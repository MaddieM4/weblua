// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function(filename) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename).toString();
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename).toString();
    }
    return ret;
  };

  Module['load'] = function(f) {
    globalEval(read(f));
  };

  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
}

if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  // Polyfill over SpiderMonkey/V8 differences
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function(f) { snarf(f) };
  }

  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }

  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }
}

if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...
  var TRY_USE_DUMP = false;
  if (!Module['print']) {
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  Module['load'] = importScripts;
}

if (!ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_SHELL) {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
if (!Module['preRun']) Module['preRun'] = [];
if (!Module['postRun']) Module['postRun'] = [];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (/^\[\d+\ x\ (.*)\]/.test(type)) return true; // [15 x ?] blocks. Like structs
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  BITSHIFT64_SHL: 0,
  BITSHIFT64_ASHR: 1,
  BITSHIFT64_LSHR: 2,
  bitshift64: function (low, high, op, bits) {
    var ret;
    var ander = Math.pow(2, bits)-1;
    if (bits < 32) {
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [low << bits, (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [(((low >>> bits ) | ((high&ander) << (32 - bits))) >> 0) >>> 0, (high >> bits) >>> 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [((low >>> bits) | ((high&ander) << (32 - bits))) >>> 0, high >>> bits];
          break;
      }
    } else if (bits == 32) {
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [0, low];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [high, (high|0) < 0 ? ander : 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [high, 0];
          break;
      }
    } else { // bits > 32
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [0, low << (bits - 32)];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [(high >> (bits - 32)) >>> 0, (high|0) < 0 ? ander : 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [high >>>  (bits - 32) , 0];
          break;
      }
    }
    assert(ret);
    HEAP32[tempDoublePtr>>2] = ret[0]; // cannot use utility functions since we are in runtime itself
    HEAP32[tempDoublePtr+4>>2] = ret[1];
  },
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type.charAt(type.length-1) == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func, sig) {
    //assert(sig); // TODO: support asm
    var table = FUNCTION_TABLE; // TODO: support asm
    var ret = table.length;
    table.push(func);
    table.push(0);
    return ret;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function stackAlloc(size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0); return ret; },
  staticAlloc: function staticAlloc(size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = ((((STATICTOP)+3)>>2)<<2); if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function alignMemory(size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  makeBigInt: function makeBigInt(low,high,unsigned) { var ret = (unsigned ? (((low)>>>0)+(((high)>>>0)*4294967296)) : (((low)>>>0)+(((high)|0)*4294967296))); return ret; },
  QUANTUM_SIZE: 4,
  __dummy__: 0
}







//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};

var ABORT = false;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = eval('_' + ident);
  } catch(e) {
    try {
      func = globalScope['Module']['_' + ident]; // closure exported function
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,Math.min(Math.floor((value)/4294967296), 4294967295)>>>0],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': (HEAPF64[(tempDoublePtr)>>3]=value,HEAP32[((ptr)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((ptr)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return (HEAP32[((tempDoublePtr)>>2)]=HEAP32[((ptr)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((ptr)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_NONE = 3; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// Simple unoptimized memset - necessary during startup
var _memset = function(ptr, value, num) {
  var stop = ptr + num;
  while (ptr < stop) {
    HEAP8[((ptr++)|0)]=value;
  }
}

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    _memset(ret, 0, size);
    return ret;
  }

  if (singleType === 'i8') {
    HEAPU8.set(new Uint8Array(slab), ret);
    return ret;
  }

  var i = 0, type;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);
    i += Runtime.getNativeTypeSize(type);
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  var utf8 = new Runtime.UTF8Processor();
  var nullTerminated = typeof(length) == "undefined";
  var ret = "";
  var i = 0;
  var t;
  while (1) {
  assert(i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    if (nullTerminated && t == 0) break;
    ret += utf8.processCChar(t);
    i += 1;
    if (!nullTerminated && i == length) break;
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}
Module['Array_stringify'] = Array_stringify;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STACK_ROOT, STACKTOP, STACK_MAX;
var STATICTOP;
function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value, (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

STACK_ROOT = STACKTOP = Runtime.alignMemory(1);
STACK_MAX = TOTAL_STACK; // we lose a little stack here, but TOTAL_STACK is nice and round so use that as the max

var tempDoublePtr = Runtime.alignMemory(allocate(12, 'i8', ALLOC_STACK), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

STATICTOP = STACK_MAX;
assert(STATICTOP < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY

var nullString = allocate(intArrayFromString('(null)'), 'i8', ALLOC_STACK);

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown

function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

if (!Math.imul) Math.imul = function(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 6000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!calledRun && shouldRunNow) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

// === Body ===



assert(STATICTOP == STACK_MAX); assert(STACK_MAX == TOTAL_STACK);

STATICTOP += 2432;

assert(STATICTOP < TOTAL_MEMORY);
































































var __ZTVN10__cxxabiv120__si_class_type_infoE;
var __ZTVN10__cxxabiv119__pointer_type_infoE;
var __ZTVN10__cxxabiv117__class_type_infoE;
























var __ZN10__cxxabiv123__fundamental_type_infoD1Ev;
var __ZN10__cxxabiv123__fundamental_type_infoD2Ev;
var __ZN10__cxxabiv117__class_type_infoD1Ev;
var __ZN10__cxxabiv117__class_type_infoD2Ev;
var __ZN10__cxxabiv120__si_class_type_infoD1Ev;
var __ZN10__cxxabiv120__si_class_type_infoD2Ev;
var __ZN10__cxxabiv117__pbase_type_infoD2Ev;
var __ZN10__cxxabiv119__pointer_type_infoD1Ev;
var __ZN10__cxxabiv119__pointer_type_infoD2Ev;
allocate(24, "i8", ALLOC_NONE, 5242880);
allocate([0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,22,22,22,22,22,22,22,22,22,22,4,4,4,4,4,4,4,21,21,21,21,21,21,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,5,4,21,21,21,21,21,21,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] /* \00\00\00\00\00\00\0 */, "i8", ALLOC_NONE, 5242904);
allocate(48, "i8", ALLOC_NONE, 5243164);
allocate([96,113,65,84,80,80,92,108,60,16,60,84,108,124,124,124,124,124,124,96,96,96,104,34,188,188,188,132,228,84,84,16,98,98,4,98,20,81,80,23] /* `qATPP\5Cl_\10_Tl||| */, "i8", ALLOC_NONE, 5243212);
allocate(12, "i8", ALLOC_NONE, 5243252);
allocate([117,112,118,97,108,0] /* upval\00 */, "i8", ALLOC_NONE, 5243264);
allocate([103,108,111,98,97,108,0] /* global\00 */, "i8", ALLOC_NONE, 5243272);
allocate([101,114,114,111,114,32,105,110,32,101,114,114,111,114,32,104,97,110,100,108,105,110,103,0] /* error in error handl */, "i8", ALLOC_NONE, 5243280);
allocate([39,102,111,114,39,32,115,116,101,112,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0] /* 'for' step must be a */, "i8", ALLOC_NONE, 5243304);
allocate([112,114,111,116,111,0] /* proto\00 */, "i8", ALLOC_NONE, 5243332);
allocate([34,93,0] /* \22]\00 */, "i8", ALLOC_NONE, 5243340);
allocate([95,69,78,86,0] /* _ENV\00 */, "i8", ALLOC_NONE, 5243344);
allocate([39,102,111,114,39,32,108,105,109,105,116,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0] /* 'for' limit must be  */, "i8", ALLOC_NONE, 5243352);
allocate([116,104,114,101,97,100,0] /* thread\00 */, "i8", ALLOC_NONE, 5243384);
allocate([91,115,116,114,105,110,103,32,34,0] /* [string \22\00 */, "i8", ALLOC_NONE, 5243392);
allocate([108,111,99,97,108,0] /* local\00 */, "i8", ALLOC_NONE, 5243404);
allocate([39,102,111,114,39,32,105,110,105,116,105,97,108,32,118,97,108,117,101,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0] /* 'for' initial value  */, "i8", ALLOC_NONE, 5243412);
allocate([102,117,110,99,116,105,111,110,0] /* function\00 */, "i8", ALLOC_NONE, 5243452);
allocate([46,46,46,0] /* ...\00 */, "i8", ALLOC_NONE, 5243464);
allocate([37,115,58,37,100,58,32,37,115,0] /* %s:%d: %s\00 */, "i8", ALLOC_NONE, 5243468);
allocate([110,111,32,109,101,115,115,97,103,101,0] /* no message\00 */, "i8", ALLOC_NONE, 5243480);
allocate([103,101,116,32,108,101,110,103,116,104,32,111,102,0] /* get length of\00 */, "i8", ALLOC_NONE, 5243492);
allocate([116,97,98,108,101,0] /* table\00 */, "i8", ALLOC_NONE, 5243508);
allocate([105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,39,37,37,37,99,39,32,116,111,32,39,108,117,97,95,112,117,115,104,102,115,116,114,105,110,103,39,0] /* invalid option '%%%c */, "i8", ALLOC_NONE, 5243516);
allocate([97,116,116,101,109,112,116,32,116,111,32,99,111,109,112,97,114,101,32,37,115,32,119,105,116,104,32,37,115,0] /* attempt to compare % */, "i8", ALLOC_NONE, 5243560);
allocate([97,116,116,101,109,112,116,32,116,111,32,37,115,32,37,115,32,39,37,115,39,32,40,97,32,37,115,32,118,97,108,117,101,41,0] /* attempt to %s %s '%s */, "i8", ALLOC_NONE, 5243592);
allocate([97,116,116,101,109,112,116,32,116,111,32,99,111,109,112,97,114,101,32,116,119,111,32,37,115,32,118,97,108,117,101,115,0] /* attempt to compare t */, "i8", ALLOC_NONE, 5243628);
allocate([115,116,114,105,110,103,32,108,101,110,103,116,104,32,111,118,101,114,102,108,111,119,0] /* string length overfl */, "i8", ALLOC_NONE, 5243664);
allocate([115,116,114,105,110,103,0] /* string\00 */, "i8", ALLOC_NONE, 5243688);
allocate([37,0] /* %\00 */, "i8", ALLOC_NONE, 5243696);
allocate([112,101,114,102,111,114,109,32,97,114,105,116,104,109,101,116,105,99,32,111,110,0] /* perform arithmetic o */, "i8", ALLOC_NONE, 5243700);
allocate([108,111,111,112,32,105,110,32,115,101,116,116,97,98,108,101,0] /* loop in settable\00 */, "i8", ALLOC_NONE, 5243724);
allocate([110,117,109,98,101,114,0] /* number\00 */, "i8", ALLOC_NONE, 5243744);
allocate([37,112,0] /* %p\00 */, "i8", ALLOC_NONE, 5243752);
allocate([37,46,49,52,103,0] /* %.14g\00 */, "i8", ALLOC_NONE, 5243756);
allocate([99,111,110,99,97,116,101,110,97,116,101,0] /* concatenate\00 */, "i8", ALLOC_NONE, 5243764);
allocate([110,111,32,118,97,108,117,101,0] /* no value\00 */, "i8", ALLOC_NONE, 5243776);
allocate([115,116,97,99,107,32,111,118,101,114,102,108,111,119,0] /* stack overflow\00 */, "i8", ALLOC_NONE, 5243788);
allocate([116,97,98,108,101,32,105,110,100,101,120,32,105,115,32,110,105,108,0] /* table index is nil\0 */, "i8", ALLOC_NONE, 5243804);
allocate([108,111,111,112,32,105,110,32,103,101,116,116,97,98,108,101,0] /* loop in gettable\00 */, "i8", ALLOC_NONE, 5243824);
allocate([98,111,111,108,101,97,110,0] /* boolean\00 */, "i8", ALLOC_NONE, 5243844);
allocate([116,97,98,108,101,32,111,118,101,114,102,108,111,119,0] /* table overflow\00 */, "i8", ALLOC_NONE, 5243852);
allocate([40,110,117,108,108,41,0] /* (null)\00 */, "i8", ALLOC_NONE, 5243868);
allocate([101,114,114,111,114,32,105,110,32,95,95,103,99,32,109,101,116,97,109,101,116,104,111,100,32,40,37,115,41,0] /* error in __gc metame */, "i8", ALLOC_NONE, 5243876);
allocate([97,116,116,101,109,112,116,32,116,111,32,37,115,32,97,32,37,115,32,118,97,108,117,101,0] /* attempt to %s a %s v */, "i8", ALLOC_NONE, 5243908);
allocate([63,0] /* ?\00 */, "i8", ALLOC_NONE, 5243936);
allocate([109,101,116,104,111,100,0] /* method\00 */, "i8", ALLOC_NONE, 5243940);
allocate([105,110,100,101,120,0] /* index\00 */, "i8", ALLOC_NONE, 5243948);
allocate([67,32,115,116,97,99,107,32,111,118,101,114,102,108,111,119,0] /* C stack overflow\00 */, "i8", ALLOC_NONE, 5243956);
allocate([110,105,108,0] /* nil\00 */, "i8", ALLOC_NONE, 5243976);
allocate([116,97,98,108,101,32,105,110,100,101,120,32,105,115,32,78,97,78,0] /* table index is NaN\0 */, "i8", ALLOC_NONE, 5243980);
allocate([110,78,0] /* nN\00 */, "i8", ALLOC_NONE, 5244000);
allocate([99,111,110,115,116,97,110,116,0] /* constant\00 */, "i8", ALLOC_NONE, 5244004);
allocate([99,97,108,108,0] /* call\00 */, "i8", ALLOC_NONE, 5244016);
allocate([120,88,0] /* xX\00 */, "i8", ALLOC_NONE, 5244024);
allocate([109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,101,114,114,111,114,58,32,98,108,111,99,107,32,116,111,111,32,98,105,103,0] /* memory allocation er */, "i8", ALLOC_NONE, 5244028);
allocate([117,112,118,97,108,117,101,0] /* upvalue\00 */, "i8", ALLOC_NONE, 5244068);
allocate([102,105,101,108,100,0] /* field\00 */, "i8", ALLOC_NONE, 5244076);
allocate(468, "i8", ALLOC_NONE, 5244084);
allocate([33,0,0,0,0,0,56,195], "i8", ALLOC_NONE, 5244552);
allocate([33,0,0,0,0,0,56,195], "i8", ALLOC_NONE, 5244560);
allocate([0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8] /* \00\01\02\02\03\03\0 */, "i8", ALLOC_NONE, 5244568);
allocate([0,0,0,0,8,9,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 5244824);
allocate(1, "i8", ALLOC_NONE, 5244852);
__ZTVN10__cxxabiv120__si_class_type_infoE=allocate([0,0,0,0,20,9,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
allocate(1, "i8", ALLOC_STATIC);
__ZTVN10__cxxabiv119__pointer_type_infoE=allocate([0,0,0,0,32,9,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
allocate(1, "i8", ALLOC_STATIC);
__ZTVN10__cxxabiv117__class_type_infoE=allocate([0,0,0,0,56,9,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
allocate(1, "i8", ALLOC_STATIC);
allocate([118,0] /* v\00 */, "i8", ALLOC_NONE, 5244856);
allocate([83,116,57,116,121,112,101,95,105,110,102,111,0] /* St9type_info\00 */, "i8", ALLOC_NONE, 5244860);
allocate([80,49,49,108,117,97,95,108,111,110,103,106,109,112,0] /* P11lua_longjmp\00 */, "i8", ALLOC_NONE, 5244876);
allocate([78,83,116,51,95,95,49,57,110,117,108,108,112,116,114,95,116,69,0] /* NSt3__19nullptr_tE\0 */, "i8", ALLOC_NONE, 5244892);
allocate([78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0] /* N10__cxxabiv123__fun */, "i8", ALLOC_NONE, 5244912);
allocate([78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0] /* N10__cxxabiv120__si_ */, "i8", ALLOC_NONE, 5244952);
allocate([78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0] /* N10__cxxabiv119__poi */, "i8", ALLOC_NONE, 5244992);
allocate([78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0] /* N10__cxxabiv117__pba */, "i8", ALLOC_NONE, 5245028);
allocate([78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0] /* N10__cxxabiv117__cla */, "i8", ALLOC_NONE, 5245064);
allocate([78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0] /* N10__cxxabiv116__shi */, "i8", ALLOC_NONE, 5245100);
allocate([49,49,108,117,97,95,108,111,110,103,106,109,112,0] /* 11lua_longjmp\00 */, "i8", ALLOC_NONE, 5245136);
allocate(8, "i8", ALLOC_NONE, 5245152);
allocate(8, "i8", ALLOC_NONE, 5245160);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,80,9,80,0], "i8", ALLOC_NONE, 5245168);
allocate(8, "i8", ALLOC_NONE, 5245184);
allocate([0,0,0,0,0,0,0,0,68,9,80,0], "i8", ALLOC_NONE, 5245192);
allocate([0,0,0,0,0,0,0,0,56,9,80,0], "i8", ALLOC_NONE, 5245204);
allocate([0,0,0,0,0,0,0,0,44,9,80,0], "i8", ALLOC_NONE, 5245216);
allocate([0,0,0,0,0,0,0,0,68,9,80,0], "i8", ALLOC_NONE, 5245228);
allocate([0,0,0,0,0,0,0,0,68,9,80,0], "i8", ALLOC_NONE, 5245240);
allocate([0,0,0,0,0,0,0,0,232,8,80,0], "i8", ALLOC_NONE, 5245252);
allocate(8, "i8", ALLOC_NONE, 5245264);
allocate([117,115,101,114,100,97,116,97,0] /* userdata\00 */, "i8", ALLOC_NONE, 5245272);
allocate(28, "i8", ALLOC_NONE, 5245284);
HEAP32[((5243164)>>2)]=((5243776)|0);
HEAP32[((5243168)>>2)]=((5243976)|0);
HEAP32[((5243172)>>2)]=((5243844)|0);
HEAP32[((5243176)>>2)]=((5245272)|0);
HEAP32[((5243180)>>2)]=((5243744)|0);
HEAP32[((5243184)>>2)]=((5243688)|0);
HEAP32[((5243188)>>2)]=((5243508)|0);
HEAP32[((5243192)>>2)]=((5243452)|0);
HEAP32[((5243196)>>2)]=((5245272)|0);
HEAP32[((5243200)>>2)]=((5243384)|0);
HEAP32[((5243204)>>2)]=((5243332)|0);
HEAP32[((5243208)>>2)]=((5243264)|0);
HEAP32[((5244832)>>2)]=(44);
HEAP32[((5244836)>>2)]=(50);
HEAP32[((5244840)>>2)]=(34);
HEAP32[((5244844)>>2)]=(48);
HEAP32[((5244848)>>2)]=(24);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(8))>>2)]=(42);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(12))>>2)]=(46);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(16))>>2)]=(34);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(20))>>2)]=(48);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(24))>>2)]=(28);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(28))>>2)]=(30);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(32))>>2)]=(22);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(36))>>2)]=(54);
HEAP32[(((__ZTVN10__cxxabiv119__pointer_type_infoE)+(8))>>2)]=(36);
HEAP32[(((__ZTVN10__cxxabiv119__pointer_type_infoE)+(12))>>2)]=(38);
HEAP32[(((__ZTVN10__cxxabiv119__pointer_type_infoE)+(16))>>2)]=(34);
HEAP32[(((__ZTVN10__cxxabiv119__pointer_type_infoE)+(20))>>2)]=(48);
HEAP32[(((__ZTVN10__cxxabiv119__pointer_type_infoE)+(24))>>2)]=(8);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(8))>>2)]=(10);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(12))>>2)]=(14);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(16))>>2)]=(34);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(20))>>2)]=(48);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(24))>>2)]=(28);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(28))>>2)]=(4);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(32))>>2)]=(32);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(36))>>2)]=(18);
HEAP32[((5245152)>>2)]=(((5244832)|0));
HEAP32[((5245156)>>2)]=((5244856)|0);
HEAP32[((5245160)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((5245164)>>2)]=((5244860)|0);
HEAP32[((5245168)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((5245172)>>2)]=((5244876)|0);
HEAP32[((5245184)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((5245188)>>2)]=((5244892)|0);
HEAP32[((5245192)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5245196)>>2)]=((5244912)|0);
HEAP32[((5245204)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5245208)>>2)]=((5244952)|0);
HEAP32[((5245216)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5245220)>>2)]=((5244992)|0);
HEAP32[((5245228)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5245232)>>2)]=((5245028)|0);
HEAP32[((5245240)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5245244)>>2)]=((5245064)|0);
HEAP32[((5245252)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5245256)>>2)]=((5245100)|0);
HEAP32[((5245264)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((5245268)>>2)]=((5245136)|0);
__ZN10__cxxabiv123__fundamental_type_infoD1Ev = 40;
__ZN10__cxxabiv123__fundamental_type_infoD2Ev = (26);
__ZN10__cxxabiv117__class_type_infoD1Ev = 6;
__ZN10__cxxabiv117__class_type_infoD2Ev = (26);
__ZN10__cxxabiv120__si_class_type_infoD1Ev = 2;
__ZN10__cxxabiv120__si_class_type_infoD2Ev = (6);
__ZN10__cxxabiv117__pbase_type_infoD2Ev = (26);
__ZN10__cxxabiv119__pointer_type_infoD1Ev = 52;
__ZN10__cxxabiv119__pointer_type_infoD2Ev = (16);
var _llvm_dbg_declare; // stub for _llvm_dbg_declare

  
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
var _llvm_va_start; // stub for _llvm_va_start

  function _llvm_va_end() {}

  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }

  
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[(((px)+(i))|0)];
        var y = HEAPU8[(((py)+(i))|0)];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function _llvm_eh_exception() {
      return HEAP32[((_llvm_eh_exception.buf)>>2)];
    }
  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }function ___cxa_find_matching_catch(thrown, throwntype, typeArray) {
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return (tempRet0 = typeArray[i],thrown);
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return (tempRet0 = throwntype,thrown);
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=type
      HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=destructor
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;;
    }

  function _abort() {
      ABORT = true;
      throw 'abort() at ' + (new Error().stack);
    }

  function ___gxx_personality_v0() {
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      return ptr;
    }

  
  function ___cxa_free_exception(ptr) {
      return _free(ptr);
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      __THREW__ = 0;
      // Clear type.
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=0
      // Call destructor if one is registered then clear it.
      var ptr = HEAP32[((_llvm_eh_exception.buf)>>2)];
      var destructor = HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)];
      if (destructor) {
        Runtime.dynCall('vi', destructor, [ptr]);
        HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=0
      }
      // Free ptr if it isn't null.
      if (ptr) {
        ___cxa_free_exception(ptr);
        HEAP32[((_llvm_eh_exception.buf)>>2)]=0
      }
    }

  var _floor=Math.floor;

  var _pow=Math.pow;

  function _strpbrk(ptr1, ptr2) {
      var curr;
      var searchSet = {};
      while (1) {
        var curr = HEAP8[((ptr2++)|0)];
        if (!curr) break;
        searchSet[curr] = 1;
      }
      while (1) {
        curr = HEAP8[(ptr1)];
        if (!curr) break;
        if (curr in searchSet) return ptr1;
        ptr1++;
      }
      return 0;
    }

  
  function _isspace(chr) {
      return chr in { 32: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0 };
    }
  
  function _isdigit(chr) {
      return chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0);
    }function _strtod(str, endptr) {
      var origin = str;
  
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == '-'.charCodeAt(0)) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == '+'.charCodeAt(0)) {
        str++;
      }
  
      var chr;
      var ret = 0;
  
      // Get whole part.
      var whole = false;
      while(1) {
        chr = HEAP8[(str)];
        if (!_isdigit(chr)) break;
        whole = true;
        ret = ret*10 + chr - '0'.charCodeAt(0);
        str++;
      }
  
      // Get fractional part.
      var fraction = false;
      if (HEAP8[(str)] == '.'.charCodeAt(0)) {
        str++;
        var mul = 1/10;
        while(1) {
          chr = HEAP8[(str)];
          if (!_isdigit(chr)) break;
          fraction = true;
          ret += mul*(chr - '0'.charCodeAt(0));
          mul /= 10;
          str++;
        }
      }
  
      if (!whole && !fraction) {
        if (endptr) {
          HEAP32[((endptr)>>2)]=origin
        }
        return 0;
      }
  
      // Get exponent part.
      chr = HEAP8[(str)];
      if (chr == 'e'.charCodeAt(0) || chr == 'E'.charCodeAt(0)) {
        str++;
        var exponent = 0;
        var expNegative = false;
        chr = HEAP8[(str)];
        if (chr == '-'.charCodeAt(0)) {
          expNegative = true;
          str++;
        } else if (chr == '+'.charCodeAt(0)) {
          str++;
        }
        chr = HEAP8[(str)];
        while(1) {
          if (!_isdigit(chr)) break;
          exponent = exponent*10 + chr - '0'.charCodeAt(0);
          str++;
          chr = HEAP8[(str)];
        }
        if (expNegative) exponent = -exponent;
        ret *= Math.pow(10, exponent);
      }
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
  
      return ret * multiplier;
    }

  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]|0 != 0) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }

  
  
  function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],HEAPF64[(tempDoublePtr)>>3]);
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == '%'.charCodeAt(0)) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case '+'.charCodeAt(0):
                flagAlwaysSigned = true;
                break;
              case '-'.charCodeAt(0):
                flagLeftAlign = true;
                break;
              case '#'.charCodeAt(0):
                flagAlternative = true;
                break;
              case '0'.charCodeAt(0):
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == '*'.charCodeAt(0)) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) {
              width = width * 10 + (next - '0'.charCodeAt(0));
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false;
          if (next == '.'.charCodeAt(0)) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == '*'.charCodeAt(0)) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < '0'.charCodeAt(0) ||
                    precisionChr > '9'.charCodeAt(0)) break;
                precision = precision * 10 + (precisionChr - '0'.charCodeAt(0));
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 'h'.charCodeAt(0)) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 'l'.charCodeAt(0)) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
  
          // Handle type specifier.
          if (['d', 'i', 'u', 'o', 'x', 'X', 'p'].indexOf(String.fromCharCode(next)) != -1) {
            // Integer.
            var signed = next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0);
            argSize = argSize || 4;
            var currArg = getNextArg('i' + (argSize * 8));
            var origArg = currArg;
            var argText;
            // Flatten i64-1 [low, high] into a (slightly rounded) double
            if (argSize == 8) {
              currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 'u'.charCodeAt(0));
            }
            // Truncate to requested size.
            if (argSize <= 4) {
              var limit = Math.pow(256, argSize) - 1;
              currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
            }
            // Format the number.
            var currAbsArg = Math.abs(currArg);
            var prefix = '';
            if (next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
              argText = reSign(currArg, 8 * argSize, 1).toString(10);
            } else if (next == 'u'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
              argText = unSign(currArg, 8 * argSize, 1).toString(10);
              currArg = Math.abs(currArg);
            } else if (next == 'o'.charCodeAt(0)) {
              argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
            } else if (next == 'x'.charCodeAt(0) || next == 'X'.charCodeAt(0)) {
              prefix = flagAlternative ? '0x' : '';
              if (argSize == 8 && i64Math) argText = (origArg[1]>>>0).toString(16) + (origArg[0]>>>0).toString(16); else
              if (currArg < 0) {
                // Represent negative numbers in hex as 2's complement.
                currArg = -currArg;
                argText = (currAbsArg - 1).toString(16);
                var buffer = [];
                for (var i = 0; i < argText.length; i++) {
                  buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                }
                argText = buffer.join('');
                while (argText.length < argSize * 2) argText = 'f' + argText;
              } else {
                argText = currAbsArg.toString(16);
              }
              if (next == 'X'.charCodeAt(0)) {
                prefix = prefix.toUpperCase();
                argText = argText.toUpperCase();
              }
            } else if (next == 'p'.charCodeAt(0)) {
              if (currAbsArg === 0) {
                argText = '(nil)';
              } else {
                prefix = '0x';
                argText = currAbsArg.toString(16);
              }
            }
            if (precisionSet) {
              while (argText.length < precision) {
                argText = '0' + argText;
              }
            }
  
            // Add sign if needed
            if (flagAlwaysSigned) {
              if (currArg < 0) {
                prefix = '-' + prefix;
              } else {
                prefix = '+' + prefix;
              }
            }
  
            // Add padding.
            while (prefix.length + argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad) {
                  argText = '0' + argText;
                } else {
                  prefix = ' ' + prefix;
                }
              }
            }
  
            // Insert the result into the buffer.
            argText = prefix + argText;
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (['f', 'F', 'e', 'E', 'g', 'G'].indexOf(String.fromCharCode(next)) != -1) {
            // Float.
            var currArg = getNextArg('double');
            var argText;
  
            if (isNaN(currArg)) {
              argText = 'nan';
              flagZeroPad = false;
            } else if (!isFinite(currArg)) {
              argText = (currArg < 0 ? '-' : '') + 'inf';
              flagZeroPad = false;
            } else {
              var isGeneral = false;
              var effectivePrecision = Math.min(precision, 20);
  
              // Convert g/G to f/F or e/E, as per:
              // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
              if (next == 'g'.charCodeAt(0) || next == 'G'.charCodeAt(0)) {
                isGeneral = true;
                precision = precision || 1;
                var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                if (precision > exponent && exponent >= -4) {
                  next = ((next == 'g'.charCodeAt(0)) ? 'f' : 'F').charCodeAt(0);
                  precision -= exponent + 1;
                } else {
                  next = ((next == 'g'.charCodeAt(0)) ? 'e' : 'E').charCodeAt(0);
                  precision--;
                }
                effectivePrecision = Math.min(precision, 20);
              }
  
              if (next == 'e'.charCodeAt(0) || next == 'E'.charCodeAt(0)) {
                argText = currArg.toExponential(effectivePrecision);
                // Make sure the exponent has at least 2 digits.
                if (/[eE][-+]\d$/.test(argText)) {
                  argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                }
              } else if (next == 'f'.charCodeAt(0) || next == 'F'.charCodeAt(0)) {
                argText = currArg.toFixed(effectivePrecision);
              }
  
              var parts = argText.split('e');
              if (isGeneral && !flagAlternative) {
                // Discard trailing zeros and periods.
                while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                       (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                  parts[0] = parts[0].slice(0, -1);
                }
              } else {
                // Make sure we have a period in alternative mode.
                if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                // Zero pad until required precision.
                while (precision > effectivePrecision++) parts[0] += '0';
              }
              argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
              // Capitalize 'E' if needed.
              if (next == 'E'.charCodeAt(0)) argText = argText.toUpperCase();
  
              // Add sign.
              if (flagAlwaysSigned && currArg >= 0) {
                argText = '+' + argText;
              }
            }
  
            // Add padding.
            while (argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                  argText = argText[0] + '0' + argText.slice(1);
                } else {
                  argText = (flagZeroPad ? '0' : ' ') + argText;
                }
              }
            }
  
            // Adjust case.
            if (next < 'a'.charCodeAt(0)) argText = argText.toUpperCase();
  
            // Insert the result into the buffer.
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (next == 's'.charCodeAt(0)) {
            // String.
            var arg = getNextArg('i8*') || nullString;
            var argLength = _strlen(arg);
            if (precisionSet) argLength = Math.min(argLength, precision);
            if (!flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
            for (var i = 0; i < argLength; i++) {
              ret.push(HEAPU8[((arg++)|0)]);
            }
            if (flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
          } else if (next == 'c'.charCodeAt(0)) {
            // Character.
            if (flagLeftAlign) ret.push(getNextArg('i8'));
            while (--width > 0) {
              ret.push(' '.charCodeAt(0));
            }
            if (!flagLeftAlign) ret.push(getNextArg('i8'));
          } else if (next == 'n'.charCodeAt(0)) {
            // Write the length written so far to the next parameter.
            var ptr = getNextArg('i32*');
            HEAP32[((ptr)>>2)]=ret.length
          } else if (next == '%'.charCodeAt(0)) {
            // Literal percent sign.
            ret.push(curr);
          } else {
            // Unknown specifiers remain untouched.
            for (var i = startTextIndex; i < textIndex + 2; i++) {
              ret.push(HEAP8[(i)]);
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }

  function _ldexp(x, exp_) {
      return x * Math.pow(2, exp_);
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }

  function _memcmp(p1, p2, num) {
      p1 = p1|0; p2 = p2|0; num = num|0;
      var i = 0, v1 = 0, v2 = 0;
      while ((i|0) < (num|0)) {
        var v1 = HEAPU8[(((p1)+(i))|0)];
        var v2 = HEAPU8[(((p2)+(i))|0)];
        if ((v1|0) != (v2|0)) return ((v1|0) > (v2|0) ? 1 : -1)|0;
        i = (i+1)|0;
      }
      return 0;
    }

  var _strcoll=_strcmp;

  
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if (num|0 >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
    }var _llvm_memset_p0i8_i64=_memset;
var _llvm_expect_i32; // stub for _llvm_expect_i32

  
  function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      if (!___setErrNo.ret) ___setErrNo.ret = allocate([0], 'i32', ALLOC_STATIC);
      HEAP32[((___setErrNo.ret)>>2)]=value
      return value;
    }
  
  var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
  
      // We need to make sure no one else allocates unfreeable memory!
      // We must control this entirely. So we don't even need to do
      // unfreeable allocations - the HEAP is ours, from STATICTOP up.
      // TODO: We could in theory slice off the top of the HEAP when
      //       sbrk gets a negative increment in |bytes|...
      var self = _sbrk;
      if (!self.called) {
        STATICTOP = alignMemoryPage(STATICTOP); // make sure we start out aligned
        self.called = true;
        _sbrk.DYNAMIC_START = STATICTOP;
      }
      var ret = STATICTOP;
      if (bytes != 0) Runtime.staticAlloc(bytes);
      return ret;  // Previous break location.
    }



  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.staticAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }


  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],ensureObjects:function () {
        if (Browser.ensured) return;
        Browser.ensured = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        function getMimetype(name) {
          return {
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
          }[name.substr(-3)];
          return ret;
        }
  
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/.exec(name);
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            setTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
      },createContext:function (canvas, useWebGL, setInModule) {
        var ctx;
        try {
          if (useWebGL) {
            ctx = canvas.getContext('experimental-webgl', {
              alpha: false,
            });
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},requestFullScreen:function () {
        var canvas = Module['canvas'];
        function fullScreenChange() {
          var isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                        canvas['mozRequestPointerLock'] ||
                                        canvas['webkitRequestPointerLock'];
            canvas.requestPointerLock();
            isFullScreen = true;
          }
          if (Module['onFullScreen']) Module['onFullScreen'](isFullScreen);
        }
  
        document.addEventListener('fullscreenchange', fullScreenChange, false);
        document.addEventListener('mozfullscreenchange', fullScreenChange, false);
        document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
  
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen(); 
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200) {
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      }};
_llvm_eh_exception.buf = allocate(12, "void*", ALLOC_STATIC);
___setErrNo(0);
Module["requestFullScreen"] = function() { Browser.requestFullScreen() };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
  


var FUNCTION_TABLE = [0,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZL9dothecallP9lua_StatePv,0,__ZN10__cxxabiv117__class_type_infoD0Ev,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZL6f_callP9lua_StatePv,0,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZN10__cxxabiv119__pointer_type_infoD0Ev,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZN10__cxxabiv120__si_class_type_infoD0Ev,0,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,0,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0];

function __ZL10index2addrP9lua_Statei($L, $idx) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $idx_addr;
      var $ci;
      var $o;
      var $func17;
      $L_addr=$L;
      $idx_addr=$idx;
      var $0=$L_addr; //@line 47 "lapi.c"
      var $ci1=(($0+16)|0); //@line 47 "lapi.c"
      var $1=HEAP32[(($ci1)>>2)]; //@line 47 "lapi.c"
      $ci=$1; //@line 47 "lapi.c"
      var $2=$idx_addr; //@line 48 "lapi.c"
      var $cmp=(($2)|0) > 0; //@line 48 "lapi.c"
      if ($cmp) { label = 3; break; } else { label = 6; break; } //@line 48 "lapi.c"
    case 3: 
      var $3=$ci; //@line 49 "lapi.c"
      var $func=(($3)|0); //@line 49 "lapi.c"
      var $4=HEAP32[(($func)>>2)]; //@line 49 "lapi.c"
      var $5=$idx_addr; //@line 49 "lapi.c"
      var $add_ptr=(($4+((($5)*(12))&-1))|0); //@line 49 "lapi.c"
      $o=$add_ptr; //@line 49 "lapi.c"
      var $6=$o; //@line 51 "lapi.c"
      var $7=$L_addr; //@line 51 "lapi.c"
      var $top=(($7+8)|0); //@line 51 "lapi.c"
      var $8=HEAP32[(($top)>>2)]; //@line 51 "lapi.c"
      var $cmp2=(($6)>>>0) >= (($8)>>>0); //@line 51 "lapi.c"
      if ($cmp2) { label = 4; break; } else { label = 5; break; } //@line 51 "lapi.c"
    case 4: 
      $retval=5243252; //@line 51 "lapi.c"
      label = 16; break; //@line 51 "lapi.c"
    case 5: 
      var $9=$o; //@line 52 "lapi.c"
      $retval=$9; //@line 52 "lapi.c"
      label = 16; break; //@line 52 "lapi.c"
    case 6: 
      var $10=$idx_addr; //@line 54 "lapi.c"
      var $cmp5=(($10)|0) > -1001000; //@line 54 "lapi.c"
      if ($cmp5) { label = 7; break; } else { label = 8; break; } //@line 54 "lapi.c"
    case 7: 
      var $11=$L_addr; //@line 56 "lapi.c"
      var $top7=(($11+8)|0); //@line 56 "lapi.c"
      var $12=HEAP32[(($top7)>>2)]; //@line 56 "lapi.c"
      var $13=$idx_addr; //@line 56 "lapi.c"
      var $add_ptr8=(($12+((($13)*(12))&-1))|0); //@line 56 "lapi.c"
      $retval=$add_ptr8; //@line 56 "lapi.c"
      label = 16; break; //@line 56 "lapi.c"
    case 8: 
      var $14=$idx_addr; //@line 58 "lapi.c"
      var $cmp10=(($14)|0)==-1001000; //@line 58 "lapi.c"
      if ($cmp10) { label = 9; break; } else { label = 10; break; } //@line 58 "lapi.c"
    case 9: 
      var $15=$L_addr; //@line 59 "lapi.c"
      var $l_G=(($15+12)|0); //@line 59 "lapi.c"
      var $16=HEAP32[(($l_G)>>2)]; //@line 59 "lapi.c"
      var $l_registry=(($16+36)|0); //@line 59 "lapi.c"
      $retval=$l_registry; //@line 59 "lapi.c"
      label = 16; break; //@line 59 "lapi.c"
    case 10: 
      var $17=$idx_addr; //@line 61 "lapi.c"
      var $sub=(((-1001000)-($17))|0); //@line 61 "lapi.c"
      $idx_addr=$sub; //@line 61 "lapi.c"
      var $18=$ci; //@line 63 "lapi.c"
      var $func13=(($18)|0); //@line 63 "lapi.c"
      var $19=HEAP32[(($func13)>>2)]; //@line 63 "lapi.c"
      var $tt_=(($19+8)|0); //@line 63 "lapi.c"
      var $20=HEAP32[(($tt_)>>2)]; //@line 63 "lapi.c"
      var $cmp14=(($20)|0)==22; //@line 63 "lapi.c"
      if ($cmp14) { label = 11; break; } else { label = 12; break; } //@line 63 "lapi.c"
    case 11: 
      $retval=5243252; //@line 64 "lapi.c"
      label = 16; break; //@line 64 "lapi.c"
    case 12: 
      var $21=$ci; //@line 66 "lapi.c"
      var $func18=(($21)|0); //@line 66 "lapi.c"
      var $22=HEAP32[(($func18)>>2)]; //@line 66 "lapi.c"
      var $value_=(($22)|0); //@line 66 "lapi.c"
      var $gc=$value_; //@line 66 "lapi.c"
      var $23=HEAP32[(($gc)>>2)]; //@line 66 "lapi.c"
      var $cl=$23; //@line 66 "lapi.c"
      var $c=$cl; //@line 66 "lapi.c"
      $func17=$c; //@line 66 "lapi.c"
      var $24=$idx_addr; //@line 67 "lapi.c"
      var $25=$func17; //@line 67 "lapi.c"
      var $nupvalues=(($25+6)|0); //@line 67 "lapi.c"
      var $26=HEAP8[($nupvalues)]; //@line 67 "lapi.c"
      var $conv=(($26)&255); //@line 67 "lapi.c"
      var $cmp19=(($24)|0) <= (($conv)|0); //@line 67 "lapi.c"
      if ($cmp19) { label = 13; break; } else { label = 14; break; } //@line 67 "lapi.c"
    case 13: 
      var $27=$idx_addr; //@line 67 "lapi.c"
      var $sub20=((($27)-(1))|0); //@line 67 "lapi.c"
      var $28=$func17; //@line 67 "lapi.c"
      var $upvalue=(($28+16)|0); //@line 67 "lapi.c"
      var $arrayidx=(($upvalue+((($sub20)*(12))&-1))|0); //@line 67 "lapi.c"
      var $cond = $arrayidx;label = 15; break; //@line 67 "lapi.c"
    case 14: 
      var $cond = 5243252;label = 15; break; //@line 67 "lapi.c"
    case 15: 
      var $cond; //@line 67 "lapi.c"
      $retval=$cond; //@line 67 "lapi.c"
      label = 16; break; //@line 67 "lapi.c"
    case 16: 
      var $29=$retval; //@line 70 "lapi.c"

      return $29; //@line 70 "lapi.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL10index2addrP9lua_Statei["X"]=1;

function __ZL9isinstackP8CallInfoPK10lua_TValue($ci, $o) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $ci_addr;
      var $o_addr;
      var $p;
      $ci_addr=$ci;
      $o_addr=$o;
      var $0=$ci_addr; //@line 480 "ldebug.c"
      var $u=(($0+24)|0); //@line 480 "ldebug.c"
      var $l=$u; //@line 480 "ldebug.c"
      var $base=(($l)|0); //@line 480 "ldebug.c"
      var $1=HEAP32[(($base)>>2)]; //@line 480 "ldebug.c"
      $p=$1; //@line 480 "ldebug.c"
      label = 3; break; //@line 480 "ldebug.c"
    case 3: 
      var $2=$p; //@line 480 "ldebug.c"
      var $3=$ci_addr; //@line 480 "ldebug.c"
      var $top=(($3+4)|0); //@line 480 "ldebug.c"
      var $4=HEAP32[(($top)>>2)]; //@line 480 "ldebug.c"
      var $cmp=(($2)>>>0) < (($4)>>>0); //@line 480 "ldebug.c"
      if ($cmp) { label = 4; break; } else { label = 8; break; } //@line 480 "ldebug.c"
    case 4: 
      var $5=$o_addr; //@line 481 "ldebug.c"
      var $6=$p; //@line 481 "ldebug.c"
      var $cmp1=(($5)|0)==(($6)|0); //@line 481 "ldebug.c"
      if ($cmp1) { label = 5; break; } else { label = 6; break; } //@line 481 "ldebug.c"
    case 5: 
      $retval=1; //@line 481 "ldebug.c"
      label = 9; break; //@line 481 "ldebug.c"
    case 6: 
      label = 7; break; //@line 481 "ldebug.c"
    case 7: 
      var $7=$p; //@line 480 "ldebug.c"
      var $incdec_ptr=(($7+12)|0); //@line 480 "ldebug.c"
      $p=$incdec_ptr; //@line 480 "ldebug.c"
      label = 3; break; //@line 480 "ldebug.c"
    case 8: 
      $retval=0; //@line 482 "ldebug.c"
      label = 9; break; //@line 482 "ldebug.c"
    case 9: 
      var $8=$retval; //@line 483 "ldebug.c"

      return $8; //@line 483 "ldebug.c"
    default: assert(0, "bad label: " + label);
  }

}


function __ZL9currentpcP8CallInfo($ci) {
  var label = 0;


  var $ci_addr;
  $ci_addr=$ci;
  var $0=$ci_addr; //@line 41 "ldebug.c"
  var $u=(($0+24)|0); //@line 41 "ldebug.c"
  var $l=$u; //@line 41 "ldebug.c"
  var $savedpc=(($l+4)|0); //@line 41 "ldebug.c"
  var $1=HEAP32[(($savedpc)>>2)]; //@line 41 "ldebug.c"
  var $2=$ci_addr; //@line 41 "ldebug.c"
  var $func=(($2)|0); //@line 41 "ldebug.c"
  var $3=HEAP32[(($func)>>2)]; //@line 41 "ldebug.c"
  var $value_=(($3)|0); //@line 41 "ldebug.c"
  var $gc=$value_; //@line 41 "ldebug.c"
  var $4=HEAP32[(($gc)>>2)]; //@line 41 "ldebug.c"
  var $cl=$4; //@line 41 "ldebug.c"
  var $l1=$cl; //@line 41 "ldebug.c"
  var $p=(($l1+12)|0); //@line 41 "ldebug.c"
  var $5=HEAP32[(($p)>>2)]; //@line 41 "ldebug.c"
  var $code=(($5+12)|0); //@line 41 "ldebug.c"
  var $6=HEAP32[(($code)>>2)]; //@line 41 "ldebug.c"
  var $sub_ptr_lhs_cast=$1; //@line 41 "ldebug.c"
  var $sub_ptr_rhs_cast=$6; //@line 41 "ldebug.c"
  var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 41 "ldebug.c"
  var $sub_ptr_div=((((($sub_ptr_sub)|0))/(4))&-1); //@line 41 "ldebug.c"
  var $sub=((($sub_ptr_div)-(1))|0); //@line 41 "ldebug.c"

  return $sub; //@line 41 "ldebug.c"
}


function __Z10lua_pcallkP9lua_StateiiiiPFiS0_E($L, $nargs, $nresults, $errfunc, $ctx, $k) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $nargs_addr;
      var $nresults_addr;
      var $errfunc_addr;
      var $ctx_addr;
      var $k_addr;
      var $c=__stackBase__;
      var $status;
      var $func;
      var $o;
      var $ci;
      $L_addr=$L;
      $nargs_addr=$nargs;
      $nresults_addr=$nresults;
      $errfunc_addr=$errfunc;
      $ctx_addr=$ctx;
      $k_addr=$k;
      var $0=$errfunc_addr; //@line 936 "lapi.c"
      var $cmp=(($0)|0)==0; //@line 936 "lapi.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 936 "lapi.c"
    case 3: 
      $func=0; //@line 937 "lapi.c"
      label = 5; break; //@line 937 "lapi.c"
    case 4: 
      var $1=$L_addr; //@line 939 "lapi.c"
      var $2=$errfunc_addr; //@line 939 "lapi.c"
      var $call=__ZL10index2addrP9lua_Statei($1, $2); //@line 939 "lapi.c"
      $o=$call; //@line 939 "lapi.c"
      var $3=$o; //@line 941 "lapi.c"
      var $4=$3; //@line 941 "lapi.c"
      var $5=$L_addr; //@line 941 "lapi.c"
      var $stack=(($5+28)|0); //@line 941 "lapi.c"
      var $6=HEAP32[(($stack)>>2)]; //@line 941 "lapi.c"
      var $7=$6; //@line 941 "lapi.c"
      var $sub_ptr_lhs_cast=$4; //@line 941 "lapi.c"
      var $sub_ptr_rhs_cast=$7; //@line 941 "lapi.c"
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 941 "lapi.c"
      $func=$sub_ptr_sub; //@line 941 "lapi.c"
      label = 5; break;
    case 5: 
      var $8=$L_addr; //@line 943 "lapi.c"
      var $top=(($8+8)|0); //@line 943 "lapi.c"
      var $9=HEAP32[(($top)>>2)]; //@line 943 "lapi.c"
      var $10=$nargs_addr; //@line 943 "lapi.c"
      var $add=((($10)+(1))|0); //@line 943 "lapi.c"
      var $idx_neg=(((-$add))|0); //@line 943 "lapi.c"
      var $add_ptr=(($9+((($idx_neg)*(12))&-1))|0); //@line 943 "lapi.c"
      var $func1=(($c)|0); //@line 943 "lapi.c"
      HEAP32[(($func1)>>2)]=$add_ptr; //@line 943 "lapi.c"
      var $11=$k_addr; //@line 944 "lapi.c"
      var $cmp2=(($11)|0)==0; //@line 944 "lapi.c"
      if ($cmp2) { label = 7; break; } else { label = 6; break; } //@line 944 "lapi.c"
    case 6: 
      var $12=$L_addr; //@line 944 "lapi.c"
      var $nny=(($12+36)|0); //@line 944 "lapi.c"
      var $13=HEAP16[(($nny)>>1)]; //@line 944 "lapi.c"
      var $conv=(($13)&65535); //@line 944 "lapi.c"
      var $cmp3=(($conv)|0) > 0; //@line 944 "lapi.c"
      if ($cmp3) { label = 7; break; } else { label = 8; break; } //@line 944 "lapi.c"
    case 7: 
      var $14=$nresults_addr; //@line 945 "lapi.c"
      var $nresults5=(($c+4)|0); //@line 945 "lapi.c"
      HEAP32[(($nresults5)>>2)]=$14; //@line 945 "lapi.c"
      var $15=$L_addr; //@line 946 "lapi.c"
      var $16=$c; //@line 946 "lapi.c"
      var $func6=(($c)|0); //@line 946 "lapi.c"
      var $17=HEAP32[(($func6)>>2)]; //@line 946 "lapi.c"
      var $18=$17; //@line 946 "lapi.c"
      var $19=$L_addr; //@line 946 "lapi.c"
      var $stack7=(($19+28)|0); //@line 946 "lapi.c"
      var $20=HEAP32[(($stack7)>>2)]; //@line 946 "lapi.c"
      var $21=$20; //@line 946 "lapi.c"
      var $sub_ptr_lhs_cast8=$18; //@line 946 "lapi.c"
      var $sub_ptr_rhs_cast9=$21; //@line 946 "lapi.c"
      var $sub_ptr_sub10=((($sub_ptr_lhs_cast8)-($sub_ptr_rhs_cast9))|0); //@line 946 "lapi.c"
      var $22=$func; //@line 946 "lapi.c"
      var $call11=__Z10luaD_pcallP9lua_StatePFvS0_PvES1_ii($15, 20, $16, $sub_ptr_sub10, $22); //@line 946 "lapi.c"
      $status=$call11; //@line 946 "lapi.c"
      label = 9; break; //@line 947 "lapi.c"
    case 8: 
      var $23=$L_addr; //@line 949 "lapi.c"
      var $ci13=(($23+16)|0); //@line 949 "lapi.c"
      var $24=HEAP32[(($ci13)>>2)]; //@line 949 "lapi.c"
      $ci=$24; //@line 949 "lapi.c"
      var $25=$k_addr; //@line 950 "lapi.c"
      var $26=$ci; //@line 950 "lapi.c"
      var $u=(($26+24)|0); //@line 950 "lapi.c"
      var $c14=$u; //@line 950 "lapi.c"
      var $k15=(($c14+4)|0); //@line 950 "lapi.c"
      HEAP32[(($k15)>>2)]=$25; //@line 950 "lapi.c"
      var $27=$ctx_addr; //@line 951 "lapi.c"
      var $28=$ci; //@line 951 "lapi.c"
      var $u16=(($28+24)|0); //@line 951 "lapi.c"
      var $c17=$u16; //@line 951 "lapi.c"
      var $ctx18=(($c17)|0); //@line 951 "lapi.c"
      HEAP32[(($ctx18)>>2)]=$27; //@line 951 "lapi.c"
      var $func19=(($c)|0); //@line 953 "lapi.c"
      var $29=HEAP32[(($func19)>>2)]; //@line 953 "lapi.c"
      var $30=$29; //@line 953 "lapi.c"
      var $31=$L_addr; //@line 953 "lapi.c"
      var $stack20=(($31+28)|0); //@line 953 "lapi.c"
      var $32=HEAP32[(($stack20)>>2)]; //@line 953 "lapi.c"
      var $33=$32; //@line 953 "lapi.c"
      var $sub_ptr_lhs_cast21=$30; //@line 953 "lapi.c"
      var $sub_ptr_rhs_cast22=$33; //@line 953 "lapi.c"
      var $sub_ptr_sub23=((($sub_ptr_lhs_cast21)-($sub_ptr_rhs_cast22))|0); //@line 953 "lapi.c"
      var $34=$ci; //@line 953 "lapi.c"
      var $extra=(($34+20)|0); //@line 953 "lapi.c"
      HEAP32[(($extra)>>2)]=$sub_ptr_sub23; //@line 953 "lapi.c"
      var $35=$L_addr; //@line 954 "lapi.c"
      var $allowhook=(($35+41)|0); //@line 954 "lapi.c"
      var $36=HEAP8[($allowhook)]; //@line 954 "lapi.c"
      var $37=$ci; //@line 954 "lapi.c"
      var $u24=(($37+24)|0); //@line 954 "lapi.c"
      var $c25=$u24; //@line 954 "lapi.c"
      var $old_allowhook=(($c25+12)|0); //@line 954 "lapi.c"
      HEAP8[($old_allowhook)]=$36; //@line 954 "lapi.c"
      var $38=$L_addr; //@line 955 "lapi.c"
      var $errfunc26=(($38+68)|0); //@line 955 "lapi.c"
      var $39=HEAP32[(($errfunc26)>>2)]; //@line 955 "lapi.c"
      var $40=$ci; //@line 955 "lapi.c"
      var $u27=(($40+24)|0); //@line 955 "lapi.c"
      var $c28=$u27; //@line 955 "lapi.c"
      var $old_errfunc=(($c28+8)|0); //@line 955 "lapi.c"
      HEAP32[(($old_errfunc)>>2)]=$39; //@line 955 "lapi.c"
      var $41=$func; //@line 956 "lapi.c"
      var $42=$L_addr; //@line 956 "lapi.c"
      var $errfunc29=(($42+68)|0); //@line 956 "lapi.c"
      HEAP32[(($errfunc29)>>2)]=$41; //@line 956 "lapi.c"
      var $43=$ci; //@line 958 "lapi.c"
      var $callstatus=(($43+18)|0); //@line 958 "lapi.c"
      var $44=HEAP8[($callstatus)]; //@line 958 "lapi.c"
      var $conv30=(($44)&255); //@line 958 "lapi.c"
      var $or=$conv30 | 16; //@line 958 "lapi.c"
      var $conv31=(($or) & 255); //@line 958 "lapi.c"
      HEAP8[($callstatus)]=$conv31; //@line 958 "lapi.c"
      var $45=$L_addr; //@line 959 "lapi.c"
      var $func32=(($c)|0); //@line 959 "lapi.c"
      var $46=HEAP32[(($func32)>>2)]; //@line 959 "lapi.c"
      var $47=$nresults_addr; //@line 959 "lapi.c"
      __Z9luaD_callP9lua_StateP10lua_TValueii($45, $46, $47, 1); //@line 959 "lapi.c"
      var $48=$ci; //@line 960 "lapi.c"
      var $callstatus33=(($48+18)|0); //@line 960 "lapi.c"
      var $49=HEAP8[($callstatus33)]; //@line 960 "lapi.c"
      var $conv34=(($49)&255); //@line 960 "lapi.c"
      var $and=$conv34 & -17; //@line 960 "lapi.c"
      var $conv35=(($and) & 255); //@line 960 "lapi.c"
      HEAP8[($callstatus33)]=$conv35; //@line 960 "lapi.c"
      var $50=$ci; //@line 961 "lapi.c"
      var $u36=(($50+24)|0); //@line 961 "lapi.c"
      var $c37=$u36; //@line 961 "lapi.c"
      var $old_errfunc38=(($c37+8)|0); //@line 961 "lapi.c"
      var $51=HEAP32[(($old_errfunc38)>>2)]; //@line 961 "lapi.c"
      var $52=$L_addr; //@line 961 "lapi.c"
      var $errfunc39=(($52+68)|0); //@line 961 "lapi.c"
      HEAP32[(($errfunc39)>>2)]=$51; //@line 961 "lapi.c"
      $status=0; //@line 962 "lapi.c"
      label = 9; break;
    case 9: 
      var $53=$nresults_addr; //@line 964 "lapi.c"
      var $cmp41=(($53)|0)==-1; //@line 964 "lapi.c"
      if ($cmp41) { label = 10; break; } else { label = 12; break; } //@line 964 "lapi.c"
    case 10: 
      var $54=$L_addr; //@line 964 "lapi.c"
      var $ci42=(($54+16)|0); //@line 964 "lapi.c"
      var $55=HEAP32[(($ci42)>>2)]; //@line 964 "lapi.c"
      var $top43=(($55+4)|0); //@line 964 "lapi.c"
      var $56=HEAP32[(($top43)>>2)]; //@line 964 "lapi.c"
      var $57=$L_addr; //@line 964 "lapi.c"
      var $top44=(($57+8)|0); //@line 964 "lapi.c"
      var $58=HEAP32[(($top44)>>2)]; //@line 964 "lapi.c"
      var $cmp45=(($56)>>>0) < (($58)>>>0); //@line 964 "lapi.c"
      if ($cmp45) { label = 11; break; } else { label = 12; break; } //@line 964 "lapi.c"
    case 11: 
      var $59=$L_addr; //@line 964 "lapi.c"
      var $top47=(($59+8)|0); //@line 964 "lapi.c"
      var $60=HEAP32[(($top47)>>2)]; //@line 964 "lapi.c"
      var $61=$L_addr; //@line 964 "lapi.c"
      var $ci48=(($61+16)|0); //@line 964 "lapi.c"
      var $62=HEAP32[(($ci48)>>2)]; //@line 964 "lapi.c"
      var $top49=(($62+4)|0); //@line 964 "lapi.c"
      HEAP32[(($top49)>>2)]=$60; //@line 964 "lapi.c"
      label = 12; break; //@line 964 "lapi.c"
    case 12: 
      var $63=$status; //@line 966 "lapi.c"
      STACKTOP = __stackBase__;
      return $63; //@line 966 "lapi.c"
    default: assert(0, "bad label: " + label);
  }

}
Module["__Z10lua_pcallkP9lua_StateiiiiPFiS0_E"] = __Z10lua_pcallkP9lua_StateiiiiPFiS0_E;__Z10lua_pcallkP9lua_StateiiiiPFiS0_E["X"]=1;

function __ZL6f_callP9lua_StatePv($L, $ud) {
  var label = 0;


  var $L_addr;
  var $ud_addr;
  var $c;
  $L_addr=$L;
  $ud_addr=$ud;
  var $0=$ud_addr; //@line 919 "lapi.c"
  var $1=$0; //@line 919 "lapi.c"
  $c=$1; //@line 919 "lapi.c"
  var $2=$L_addr; //@line 920 "lapi.c"
  var $3=$c; //@line 920 "lapi.c"
  var $func=(($3)|0); //@line 920 "lapi.c"
  var $4=HEAP32[(($func)>>2)]; //@line 920 "lapi.c"
  var $5=$c; //@line 920 "lapi.c"
  var $nresults=(($5+4)|0); //@line 920 "lapi.c"
  var $6=HEAP32[(($nresults)>>2)]; //@line 920 "lapi.c"
  __Z9luaD_callP9lua_StateP10lua_TValueii($2, $4, $6, 0); //@line 920 "lapi.c"

  return; //@line 921 "lapi.c"
}


function __ZL12getupvalnameP8CallInfoPK10lua_TValuePPKc($ci, $o, $name) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $ci_addr;
      var $o_addr;
      var $name_addr;
      var $c;
      var $i;
      $ci_addr=$ci;
      $o_addr=$o;
      $name_addr=$name;
      var $0=$ci_addr; //@line 488 "ldebug.c"
      var $func=(($0)|0); //@line 488 "ldebug.c"
      var $1=HEAP32[(($func)>>2)]; //@line 488 "ldebug.c"
      var $value_=(($1)|0); //@line 488 "ldebug.c"
      var $gc=$value_; //@line 488 "ldebug.c"
      var $2=HEAP32[(($gc)>>2)]; //@line 488 "ldebug.c"
      var $cl=$2; //@line 488 "ldebug.c"
      var $l=$cl; //@line 488 "ldebug.c"
      $c=$l; //@line 488 "ldebug.c"
      $i=0; //@line 490 "ldebug.c"
      label = 3; break; //@line 490 "ldebug.c"
    case 3: 
      var $3=$i; //@line 490 "ldebug.c"
      var $4=$c; //@line 490 "ldebug.c"
      var $nupvalues=(($4+6)|0); //@line 490 "ldebug.c"
      var $5=HEAP8[($nupvalues)]; //@line 490 "ldebug.c"
      var $conv=(($5)&255); //@line 490 "ldebug.c"
      var $cmp=(($3)|0) < (($conv)|0); //@line 490 "ldebug.c"
      if ($cmp) { label = 4; break; } else { label = 8; break; } //@line 490 "ldebug.c"
    case 4: 
      var $6=$i; //@line 491 "ldebug.c"
      var $7=$c; //@line 491 "ldebug.c"
      var $upvals=(($7+16)|0); //@line 491 "ldebug.c"
      var $arrayidx=(($upvals+($6<<2))|0); //@line 491 "ldebug.c"
      var $8=HEAP32[(($arrayidx)>>2)]; //@line 491 "ldebug.c"
      var $v=(($8+8)|0); //@line 491 "ldebug.c"
      var $9=HEAP32[(($v)>>2)]; //@line 491 "ldebug.c"
      var $10=$o_addr; //@line 491 "ldebug.c"
      var $cmp1=(($9)|0)==(($10)|0); //@line 491 "ldebug.c"
      if ($cmp1) { label = 5; break; } else { label = 6; break; } //@line 491 "ldebug.c"
    case 5: 
      var $11=$c; //@line 492 "ldebug.c"
      var $p=(($11+12)|0); //@line 492 "ldebug.c"
      var $12=HEAP32[(($p)>>2)]; //@line 492 "ldebug.c"
      var $13=$i; //@line 492 "ldebug.c"
      var $call=__ZL9upvalnameP5Protoi($12, $13); //@line 492 "ldebug.c"
      var $14=$name_addr; //@line 492 "ldebug.c"
      HEAP32[(($14)>>2)]=$call; //@line 492 "ldebug.c"
      $retval=((5244068)|0); //@line 493 "ldebug.c"
      label = 9; break; //@line 493 "ldebug.c"
    case 6: 
      label = 7; break; //@line 495 "ldebug.c"
    case 7: 
      var $15=$i; //@line 490 "ldebug.c"
      var $inc=((($15)+(1))|0); //@line 490 "ldebug.c"
      $i=$inc; //@line 490 "ldebug.c"
      label = 3; break; //@line 490 "ldebug.c"
    case 8: 
      $retval=0; //@line 496 "ldebug.c"
      label = 9; break; //@line 496 "ldebug.c"
    case 9: 
      var $16=$retval; //@line 497 "ldebug.c"

      return $16; //@line 497 "ldebug.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL12getupvalnameP8CallInfoPK10lua_TValuePPKc["X"]=1;

function __ZL10getobjnameP5ProtoiiPPKc($p, $lastpc, $reg, $name) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p_addr;
      var $lastpc_addr;
      var $reg_addr;
      var $name_addr;
      var $pc;
      var $i;
      var $op;
      var $b;
      var $k;
      var $t;
      var $vn;
      var $b29;
      var $k51;
      $p_addr=$p;
      $lastpc_addr=$lastpc;
      $reg_addr=$reg;
      $name_addr=$name;
      var $0=$p_addr; //@line 381 "ldebug.c"
      var $1=$reg_addr; //@line 381 "ldebug.c"
      var $add=((($1)+(1))|0); //@line 381 "ldebug.c"
      var $2=$lastpc_addr; //@line 381 "ldebug.c"
      var $call=__Z17luaF_getlocalnamePK5Protoii($0, $add, $2); //@line 381 "ldebug.c"
      var $3=$name_addr; //@line 381 "ldebug.c"
      HEAP32[(($3)>>2)]=$call; //@line 381 "ldebug.c"
      var $4=$name_addr; //@line 382 "ldebug.c"
      var $5=HEAP32[(($4)>>2)]; //@line 382 "ldebug.c"
      var $tobool=(($5)|0)!=0; //@line 382 "ldebug.c"
      if ($tobool) { label = 3; break; } else { label = 4; break; } //@line 382 "ldebug.c"
    case 3: 
      $retval=((5243404)|0); //@line 383 "ldebug.c"
      label = 26; break; //@line 383 "ldebug.c"
    case 4: 
      var $6=$p_addr; //@line 385 "ldebug.c"
      var $7=$lastpc_addr; //@line 385 "ldebug.c"
      var $8=$reg_addr; //@line 385 "ldebug.c"
      var $call1=__ZL10findsetregP5Protoii($6, $7, $8); //@line 385 "ldebug.c"
      $pc=$call1; //@line 385 "ldebug.c"
      var $9=$pc; //@line 386 "ldebug.c"
      var $cmp=(($9)|0)!=-1; //@line 386 "ldebug.c"
      if ($cmp) { label = 5; break; } else { label = 25; break; } //@line 386 "ldebug.c"
    case 5: 
      var $10=$pc; //@line 387 "ldebug.c"
      var $11=$p_addr; //@line 387 "ldebug.c"
      var $code=(($11+12)|0); //@line 387 "ldebug.c"
      var $12=HEAP32[(($code)>>2)]; //@line 387 "ldebug.c"
      var $arrayidx=(($12+($10<<2))|0); //@line 387 "ldebug.c"
      var $13=HEAP32[(($arrayidx)>>2)]; //@line 387 "ldebug.c"
      $i=$13; //@line 387 "ldebug.c"
      var $14=$i; //@line 388 "ldebug.c"
      var $shr=$14 >>> 0; //@line 388 "ldebug.c"
      var $and=$shr & 63; //@line 388 "ldebug.c"
      $op=$and; //@line 388 "ldebug.c"
      var $15=$op; //@line 389 "ldebug.c"
      if ((($15)|0)==0) {
        label = 6; break;
      }
      else if ((($15)|0)==6 | (($15)|0)==7) {
        label = 9; break;
      }
      else if ((($15)|0)==5) {
        label = 15; break;
      }
      else if ((($15)|0)==1 | (($15)|0)==2) {
        label = 16; break;
      }
      else if ((($15)|0)==12) {
        label = 22; break;
      }
      else {
      label = 23; break;
      }
      
    case 6: 
      var $16=$i; //@line 391 "ldebug.c"
      var $shr3=$16 >>> 23; //@line 391 "ldebug.c"
      var $and4=$shr3 & 511; //@line 391 "ldebug.c"
      $b=$and4; //@line 391 "ldebug.c"
      var $17=$b; //@line 392 "ldebug.c"
      var $18=$i; //@line 392 "ldebug.c"
      var $shr5=$18 >>> 6; //@line 392 "ldebug.c"
      var $and6=$shr5 & 255; //@line 392 "ldebug.c"
      var $cmp7=(($17)|0) < (($and6)|0); //@line 392 "ldebug.c"
      if ($cmp7) { label = 7; break; } else { label = 8; break; } //@line 392 "ldebug.c"
    case 7: 
      var $19=$p_addr; //@line 393 "ldebug.c"
      var $20=$pc; //@line 393 "ldebug.c"
      var $21=$b; //@line 393 "ldebug.c"
      var $22=$name_addr; //@line 393 "ldebug.c"
      var $call9=__ZL10getobjnameP5ProtoiiPPKc($19, $20, $21, $22); //@line 393 "ldebug.c"
      $retval=$call9; //@line 393 "ldebug.c"
      label = 26; break; //@line 393 "ldebug.c"
    case 8: 
      label = 24; break; //@line 394 "ldebug.c"
    case 9: 
      var $23=$i; //@line 398 "ldebug.c"
      var $shr12=$23 >>> 14; //@line 398 "ldebug.c"
      var $and13=$shr12 & 511; //@line 398 "ldebug.c"
      $k=$and13; //@line 398 "ldebug.c"
      var $24=$i; //@line 399 "ldebug.c"
      var $shr14=$24 >>> 23; //@line 399 "ldebug.c"
      var $and15=$shr14 & 511; //@line 399 "ldebug.c"
      $t=$and15; //@line 399 "ldebug.c"
      var $25=$op; //@line 402 "ldebug.c"
      var $cmp16=(($25)|0)==7; //@line 402 "ldebug.c"
      if ($cmp16) { label = 10; break; } else { label = 11; break; } //@line 402 "ldebug.c"
    case 10: 
      var $26=$p_addr; //@line 401 "ldebug.c"
      var $27=$t; //@line 401 "ldebug.c"
      var $add17=((($27)+(1))|0); //@line 401 "ldebug.c"
      var $28=$pc; //@line 401 "ldebug.c"
      var $call18=__Z17luaF_getlocalnamePK5Protoii($26, $add17, $28); //@line 401 "ldebug.c"
      var $cond = $call18;label = 12; break; //@line 401 "ldebug.c"
    case 11: 
      var $29=$p_addr; //@line 402 "ldebug.c"
      var $30=$t; //@line 402 "ldebug.c"
      var $call19=__ZL9upvalnameP5Protoi($29, $30); //@line 402 "ldebug.c"
      var $cond = $call19;label = 12; break; //@line 402 "ldebug.c"
    case 12: 
      var $cond; //@line 402 "ldebug.c"
      $vn=$cond; //@line 402 "ldebug.c"
      var $31=$p_addr; //@line 403 "ldebug.c"
      var $32=$pc; //@line 403 "ldebug.c"
      var $33=$k; //@line 403 "ldebug.c"
      var $34=$name_addr; //@line 403 "ldebug.c"
      __ZL5knameP5ProtoiiPPKc($31, $32, $33, $34); //@line 403 "ldebug.c"
      var $35=$vn; //@line 404 "ldebug.c"
      var $tobool20=(($35)|0)!=0; //@line 404 "ldebug.c"
      if ($tobool20) { label = 13; break; } else { var $37 = 0;label = 14; break; } //@line 404 "ldebug.c"
    case 13: 
      var $36=$vn; //@line 404 "ldebug.c"
      var $call21=_strcmp($36, ((5243344)|0)); //@line 404 "ldebug.c"
      var $cmp22=(($call21)|0)==0; //@line 404 "ldebug.c"
      var $37 = $cmp22;label = 14; break;
    case 14: 
      var $37;
      var $cond23=$37 ? (((5243272)|0)) : (((5244076)|0));
      $retval=$cond23;
      label = 26; break;
    case 15: 
      var $38=$p_addr; //@line 407 "ldebug.c"
      var $39=$i; //@line 407 "ldebug.c"
      var $shr25=$39 >>> 23; //@line 407 "ldebug.c"
      var $and26=$shr25 & 511; //@line 407 "ldebug.c"
      var $call27=__ZL9upvalnameP5Protoi($38, $and26); //@line 407 "ldebug.c"
      var $40=$name_addr; //@line 407 "ldebug.c"
      HEAP32[(($40)>>2)]=$call27; //@line 407 "ldebug.c"
      $retval=((5244068)|0); //@line 408 "ldebug.c"
      label = 26; break; //@line 408 "ldebug.c"
    case 16: 
      var $41=$op; //@line 413 "ldebug.c"
      var $cmp30=(($41)|0)==1; //@line 413 "ldebug.c"
      if ($cmp30) { label = 17; break; } else { label = 18; break; } //@line 413 "ldebug.c"
    case 17: 
      var $42=$i; //@line 413 "ldebug.c"
      var $shr32=$42 >>> 14; //@line 413 "ldebug.c"
      var $and33=$shr32 & 262143; //@line 413 "ldebug.c"
      var $cond41 = $and33;label = 19; break; //@line 413 "ldebug.c"
    case 18: 
      var $43=$pc; //@line 413 "ldebug.c"
      var $add35=((($43)+(1))|0); //@line 413 "ldebug.c"
      var $44=$p_addr; //@line 413 "ldebug.c"
      var $code36=(($44+12)|0); //@line 413 "ldebug.c"
      var $45=HEAP32[(($code36)>>2)]; //@line 413 "ldebug.c"
      var $arrayidx37=(($45+($add35<<2))|0); //@line 413 "ldebug.c"
      var $46=HEAP32[(($arrayidx37)>>2)]; //@line 413 "ldebug.c"
      var $shr38=$46 >>> 6; //@line 413 "ldebug.c"
      var $and39=$shr38 & 67108863; //@line 413 "ldebug.c"
      var $cond41 = $and39;label = 19; break; //@line 413 "ldebug.c"
    case 19: 
      var $cond41; //@line 413 "ldebug.c"
      $b29=$cond41; //@line 413 "ldebug.c"
      var $47=$b29; //@line 414 "ldebug.c"
      var $48=$p_addr; //@line 414 "ldebug.c"
      var $k42=(($48+8)|0); //@line 414 "ldebug.c"
      var $49=HEAP32[(($k42)>>2)]; //@line 414 "ldebug.c"
      var $arrayidx43=(($49+((($47)*(12))&-1))|0); //@line 414 "ldebug.c"
      var $tt_=(($arrayidx43+8)|0); //@line 414 "ldebug.c"
      var $50=HEAP32[(($tt_)>>2)]; //@line 414 "ldebug.c"
      var $and44=$50 & 15; //@line 414 "ldebug.c"
      var $cmp45=(($and44)|0)==4; //@line 414 "ldebug.c"
      if ($cmp45) { label = 20; break; } else { label = 21; break; } //@line 414 "ldebug.c"
    case 20: 
      var $51=$b29; //@line 415 "ldebug.c"
      var $52=$p_addr; //@line 415 "ldebug.c"
      var $k47=(($52+8)|0); //@line 415 "ldebug.c"
      var $53=HEAP32[(($k47)>>2)]; //@line 415 "ldebug.c"
      var $arrayidx48=(($53+((($51)*(12))&-1))|0); //@line 415 "ldebug.c"
      var $value_=(($arrayidx48)|0); //@line 415 "ldebug.c"
      var $gc=$value_; //@line 415 "ldebug.c"
      var $54=HEAP32[(($gc)>>2)]; //@line 415 "ldebug.c"
      var $ts=$54; //@line 415 "ldebug.c"
      var $add_ptr=(($ts+16)|0); //@line 415 "ldebug.c"
      var $55=$add_ptr; //@line 415 "ldebug.c"
      var $56=$name_addr; //@line 415 "ldebug.c"
      HEAP32[(($56)>>2)]=$55; //@line 415 "ldebug.c"
      $retval=((5244004)|0); //@line 416 "ldebug.c"
      label = 26; break; //@line 416 "ldebug.c"
    case 21: 
      label = 24; break; //@line 418 "ldebug.c"
    case 22: 
      var $57=$i; //@line 421 "ldebug.c"
      var $shr52=$57 >>> 14; //@line 421 "ldebug.c"
      var $and53=$shr52 & 511; //@line 421 "ldebug.c"
      $k51=$and53; //@line 421 "ldebug.c"
      var $58=$p_addr; //@line 422 "ldebug.c"
      var $59=$pc; //@line 422 "ldebug.c"
      var $60=$k51; //@line 422 "ldebug.c"
      var $61=$name_addr; //@line 422 "ldebug.c"
      __ZL5knameP5ProtoiiPPKc($58, $59, $60, $61); //@line 422 "ldebug.c"
      $retval=((5243940)|0); //@line 423 "ldebug.c"
      label = 26; break; //@line 423 "ldebug.c"
    case 23: 
      label = 24; break; //@line 425 "ldebug.c"
    case 24: 
      label = 25; break; //@line 427 "ldebug.c"
    case 25: 
      $retval=0; //@line 428 "ldebug.c"
      label = 26; break; //@line 428 "ldebug.c"
    case 26: 
      var $62=$retval; //@line 429 "ldebug.c"

      return $62; //@line 429 "ldebug.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL10getobjnameP5ProtoiiPPKc["X"]=1;

function __Z14luaG_typeerrorP9lua_StatePK10lua_TValuePKc($L, $o, $op) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $o_addr;
      var $op_addr;
      var $ci;
      var $name=__stackBase__;
      var $t;
      var $kind;
      $L_addr=$L;
      $o_addr=$o;
      $op_addr=$op;
      var $0=$L_addr; //@line 501 "ldebug.c"
      var $ci1=(($0+16)|0); //@line 501 "ldebug.c"
      var $1=HEAP32[(($ci1)>>2)]; //@line 501 "ldebug.c"
      $ci=$1; //@line 501 "ldebug.c"
      HEAP32[(($name)>>2)]=0; //@line 502 "ldebug.c"
      var $2=$o_addr; //@line 503 "ldebug.c"
      var $tt_=(($2+8)|0); //@line 503 "ldebug.c"
      var $3=HEAP32[(($tt_)>>2)]; //@line 503 "ldebug.c"
      var $and=$3 & 15; //@line 503 "ldebug.c"
      var $add=((($and)+(1))|0); //@line 503 "ldebug.c"
      var $arrayidx=((5243164+($add<<2))|0); //@line 503 "ldebug.c"
      var $4=HEAP32[(($arrayidx)>>2)]; //@line 503 "ldebug.c"
      $t=$4; //@line 503 "ldebug.c"
      $kind=0; //@line 504 "ldebug.c"
      var $5=$ci; //@line 505 "ldebug.c"
      var $callstatus=(($5+18)|0); //@line 505 "ldebug.c"
      var $6=HEAP8[($callstatus)]; //@line 505 "ldebug.c"
      var $conv=(($6)&255); //@line 505 "ldebug.c"
      var $and2=$conv & 1; //@line 505 "ldebug.c"
      var $tobool=(($and2)|0)!=0; //@line 505 "ldebug.c"
      if ($tobool) { label = 3; break; } else { label = 7; break; } //@line 505 "ldebug.c"
    case 3: 
      var $7=$ci; //@line 506 "ldebug.c"
      var $8=$o_addr; //@line 506 "ldebug.c"
      var $call=__ZL12getupvalnameP8CallInfoPK10lua_TValuePPKc($7, $8, $name); //@line 506 "ldebug.c"
      $kind=$call; //@line 506 "ldebug.c"
      var $9=$kind; //@line 507 "ldebug.c"
      var $tobool3=(($9)|0)!=0; //@line 507 "ldebug.c"
      if ($tobool3) { label = 6; break; } else { label = 4; break; } //@line 507 "ldebug.c"
    case 4: 
      var $10=$ci; //@line 507 "ldebug.c"
      var $11=$o_addr; //@line 507 "ldebug.c"
      var $call4=__ZL9isinstackP8CallInfoPK10lua_TValue($10, $11); //@line 507 "ldebug.c"
      var $tobool5=(($call4)|0)!=0; //@line 507 "ldebug.c"
      if ($tobool5) { label = 5; break; } else { label = 6; break; } //@line 507 "ldebug.c"
    case 5: 
      var $12=$ci; //@line 508 "ldebug.c"
      var $func=(($12)|0); //@line 508 "ldebug.c"
      var $13=HEAP32[(($func)>>2)]; //@line 508 "ldebug.c"
      var $value_=(($13)|0); //@line 508 "ldebug.c"
      var $gc=$value_; //@line 508 "ldebug.c"
      var $14=HEAP32[(($gc)>>2)]; //@line 508 "ldebug.c"
      var $cl=$14; //@line 508 "ldebug.c"
      var $l=$cl; //@line 508 "ldebug.c"
      var $p=(($l+12)|0); //@line 508 "ldebug.c"
      var $15=HEAP32[(($p)>>2)]; //@line 508 "ldebug.c"
      var $16=$ci; //@line 508 "ldebug.c"
      var $call7=__ZL9currentpcP8CallInfo($16); //@line 508 "ldebug.c"
      var $17=$o_addr; //@line 508 "ldebug.c"
      var $18=$ci; //@line 508 "ldebug.c"
      var $u=(($18+24)|0); //@line 508 "ldebug.c"
      var $l8=$u; //@line 508 "ldebug.c"
      var $base=(($l8)|0); //@line 508 "ldebug.c"
      var $19=HEAP32[(($base)>>2)]; //@line 508 "ldebug.c"
      var $sub_ptr_lhs_cast=$17; //@line 508 "ldebug.c"
      var $sub_ptr_rhs_cast=$19; //@line 508 "ldebug.c"
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 508 "ldebug.c"
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(12))&-1); //@line 508 "ldebug.c"
      var $call9=__ZL10getobjnameP5ProtoiiPPKc($15, $call7, $sub_ptr_div, $name); //@line 508 "ldebug.c"
      $kind=$call9; //@line 508 "ldebug.c"
      label = 6; break; //@line 508 "ldebug.c"
    case 6: 
      label = 7; break; //@line 510 "ldebug.c"
    case 7: 
      var $20=$kind; //@line 511 "ldebug.c"
      var $tobool11=(($20)|0)!=0; //@line 511 "ldebug.c"
      if ($tobool11) { label = 8; break; } else { label = 9; break; } //@line 511 "ldebug.c"
    case 8: 
      var $21=$L_addr; //@line 512 "ldebug.c"
      var $22=$op_addr; //@line 512 "ldebug.c"
      var $23=$kind; //@line 512 "ldebug.c"
      var $24=HEAP32[(($name)>>2)]; //@line 512 "ldebug.c"
      var $25=$t; //@line 512 "ldebug.c"
      __Z13luaG_runerrorP9lua_StatePKcz($21, ((5243592)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$22,HEAP32[(((tempInt)+(4))>>2)]=$23,HEAP32[(((tempInt)+(8))>>2)]=$24,HEAP32[(((tempInt)+(12))>>2)]=$25,tempInt)); //@line 512 "ldebug.c"
      throw "Reached an unreachable!" //@line 512 "ldebug.c"
    case 9: 
      var $26=$L_addr; //@line 515 "ldebug.c"
      var $27=$op_addr; //@line 515 "ldebug.c"
      var $28=$t; //@line 515 "ldebug.c"
      __Z13luaG_runerrorP9lua_StatePKcz($26, ((5243908)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$27,HEAP32[(((tempInt)+(4))>>2)]=$28,tempInt)); //@line 515 "ldebug.c"
      throw "Reached an unreachable!" //@line 515 "ldebug.c"
    case 10: 
      STACKTOP = __stackBase__;
      return; //@line 516 "ldebug.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z14luaG_typeerrorP9lua_StatePK10lua_TValuePKc["X"]=1;

function __Z13luaG_runerrorP9lua_StatePKcz($L, $fmt, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $fmt_addr;
      var $argp=__stackBase__;
      $L_addr=$L;
      $fmt_addr=$fmt;
      var $argp1=$argp; //@line 575 "ldebug.c"
      HEAP32[(($argp1)>>2)]=varrp; //@line 575 "ldebug.c"
      var $0=$L_addr; //@line 576 "ldebug.c"
      var $1=$L_addr; //@line 576 "ldebug.c"
      var $2=$fmt_addr; //@line 576 "ldebug.c"
      var $3=HEAP32[(($argp)>>2)]; //@line 576 "ldebug.c"
      var $call=__Z17luaO_pushvfstringP9lua_StatePKcPc($1, $2, $3); //@line 576 "ldebug.c"
      __ZL7addinfoP9lua_StatePKc($0, $call); //@line 576 "ldebug.c"
      var $argp2=$argp; //@line 577 "ldebug.c"
 //@line 577 "ldebug.c"
      var $4=$L_addr; //@line 578 "ldebug.c"
      __Z13luaG_errormsgP9lua_State($4); //@line 578 "ldebug.c"
      throw "Reached an unreachable!" //@line 578 "ldebug.c"
    case 3: 
      STACKTOP = __stackBase__;
      return; //@line 579 "ldebug.c"
    default: assert(0, "bad label: " + label);
  }

}


function __Z16luaG_concaterrorP9lua_StateP10lua_TValueS2_($L, $p1, $p2) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $p1_addr;
      var $p2_addr;
      $L_addr=$L;
      $p1_addr=$p1;
      $p2_addr=$p2;
      var $0=$p1_addr; //@line 520 "ldebug.c"
      var $tt_=(($0+8)|0); //@line 520 "ldebug.c"
      var $1=HEAP32[(($tt_)>>2)]; //@line 520 "ldebug.c"
      var $and=$1 & 15; //@line 520 "ldebug.c"
      var $cmp=(($and)|0)==4; //@line 520 "ldebug.c"
      if ($cmp) { label = 4; break; } else { label = 3; break; } //@line 520 "ldebug.c"
    case 3: 
      var $2=$p1_addr; //@line 520 "ldebug.c"
      var $tt_1=(($2+8)|0); //@line 520 "ldebug.c"
      var $3=HEAP32[(($tt_1)>>2)]; //@line 520 "ldebug.c"
      var $cmp2=(($3)|0)==3; //@line 520 "ldebug.c"
      if ($cmp2) { label = 4; break; } else { label = 5; break; } //@line 520 "ldebug.c"
    case 4: 
      var $4=$p2_addr; //@line 520 "ldebug.c"
      $p1_addr=$4; //@line 520 "ldebug.c"
      label = 5; break; //@line 520 "ldebug.c"
    case 5: 
      var $5=$L_addr; //@line 522 "ldebug.c"
      var $6=$p1_addr; //@line 522 "ldebug.c"
      __Z14luaG_typeerrorP9lua_StatePK10lua_TValuePKc($5, $6, ((5243764)|0)); //@line 522 "ldebug.c"
      throw "Reached an unreachable!" //@line 522 "ldebug.c"
    case 6: 

      return; //@line 523 "ldebug.c"
    default: assert(0, "bad label: " + label);
  }

}


function __Z15luaG_aritherrorP9lua_StatePK10lua_TValueS3_($L, $p1, $p2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $p1_addr;
      var $p2_addr;
      var $temp=__stackBase__;
      $L_addr=$L;
      $p1_addr=$p1;
      $p2_addr=$p2;
      var $0=$p1_addr; //@line 528 "ldebug.c"
      var $call=__Z13luaV_tonumberPK10lua_TValuePS_($0, $temp); //@line 528 "ldebug.c"
      var $cmp=(($call)|0)==0; //@line 528 "ldebug.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 528 "ldebug.c"
    case 3: 
      var $1=$p1_addr; //@line 529 "ldebug.c"
      $p2_addr=$1; //@line 529 "ldebug.c"
      label = 4; break; //@line 529 "ldebug.c"
    case 4: 
      var $2=$L_addr; //@line 530 "ldebug.c"
      var $3=$p2_addr; //@line 530 "ldebug.c"
      __Z14luaG_typeerrorP9lua_StatePK10lua_TValuePKc($2, $3, ((5243700)|0)); //@line 530 "ldebug.c"
      throw "Reached an unreachable!" //@line 530 "ldebug.c"
    case 5: 
      STACKTOP = __stackBase__;
      return; //@line 531 "ldebug.c"
    default: assert(0, "bad label: " + label);
  }

}


function __ZL10findsetregP5Protoii($p, $lastpc, $reg) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $lastpc_addr;
      var $reg_addr;
      var $pc;
      var $setreg;
      var $i;
      var $op;
      var $a;
      var $b;
      var $b17;
      var $dest;
      $p_addr=$p;
      $lastpc_addr=$lastpc;
      $reg_addr=$reg;
      $setreg=-1; //@line 335 "ldebug.c"
      $pc=0; //@line 336 "ldebug.c"
      label = 3; break; //@line 336 "ldebug.c"
    case 3: 
      var $0=$pc; //@line 336 "ldebug.c"
      var $1=$lastpc_addr; //@line 336 "ldebug.c"
      var $cmp=(($0)|0) < (($1)|0); //@line 336 "ldebug.c"
      if ($cmp) { label = 4; break; } else { label = 28; break; } //@line 336 "ldebug.c"
    case 4: 
      var $2=$pc; //@line 337 "ldebug.c"
      var $3=$p_addr; //@line 337 "ldebug.c"
      var $code=(($3+12)|0); //@line 337 "ldebug.c"
      var $4=HEAP32[(($code)>>2)]; //@line 337 "ldebug.c"
      var $arrayidx=(($4+($2<<2))|0); //@line 337 "ldebug.c"
      var $5=HEAP32[(($arrayidx)>>2)]; //@line 337 "ldebug.c"
      $i=$5; //@line 337 "ldebug.c"
      var $6=$i; //@line 338 "ldebug.c"
      var $shr=$6 >>> 0; //@line 338 "ldebug.c"
      var $and=$shr & 63; //@line 338 "ldebug.c"
      $op=$and; //@line 338 "ldebug.c"
      var $7=$i; //@line 339 "ldebug.c"
      var $shr1=$7 >>> 6; //@line 339 "ldebug.c"
      var $and2=$shr1 & 255; //@line 339 "ldebug.c"
      $a=$and2; //@line 339 "ldebug.c"
      var $8=$op; //@line 340 "ldebug.c"
      if ((($8)|0)==4) {
        label = 5; break;
      }
      else if ((($8)|0)==34) {
        label = 9; break;
      }
      else if ((($8)|0)==29 | (($8)|0)==30) {
        label = 12; break;
      }
      else if ((($8)|0)==23) {
        label = 15; break;
      }
      else if ((($8)|0)==27) {
        label = 19; break;
      }
      else {
      label = 22; break;
      }
      
    case 5: 
      var $9=$i; //@line 342 "ldebug.c"
      var $shr3=$9 >>> 23; //@line 342 "ldebug.c"
      var $and4=$shr3 & 511; //@line 342 "ldebug.c"
      $b=$and4; //@line 342 "ldebug.c"
      var $10=$a; //@line 343 "ldebug.c"
      var $11=$reg_addr; //@line 343 "ldebug.c"
      var $cmp5=(($10)|0) <= (($11)|0); //@line 343 "ldebug.c"
      if ($cmp5) { label = 6; break; } else { label = 8; break; } //@line 343 "ldebug.c"
    case 6: 
      var $12=$reg_addr; //@line 343 "ldebug.c"
      var $13=$a; //@line 343 "ldebug.c"
      var $14=$b; //@line 343 "ldebug.c"
      var $add=((($13)+($14))|0); //@line 343 "ldebug.c"
      var $cmp6=(($12)|0) <= (($add)|0); //@line 343 "ldebug.c"
      if ($cmp6) { label = 7; break; } else { label = 8; break; } //@line 343 "ldebug.c"
    case 7: 
      var $15=$pc; //@line 344 "ldebug.c"
      $setreg=$15; //@line 344 "ldebug.c"
      label = 8; break; //@line 344 "ldebug.c"
    case 8: 
      label = 26; break; //@line 345 "ldebug.c"
    case 9: 
      var $16=$reg_addr; //@line 348 "ldebug.c"
      var $17=$a; //@line 348 "ldebug.c"
      var $add8=((($17)+(2))|0); //@line 348 "ldebug.c"
      var $cmp9=(($16)|0) >= (($add8)|0); //@line 348 "ldebug.c"
      if ($cmp9) { label = 10; break; } else { label = 11; break; } //@line 348 "ldebug.c"
    case 10: 
      var $18=$pc; //@line 348 "ldebug.c"
      $setreg=$18; //@line 348 "ldebug.c"
      label = 11; break; //@line 348 "ldebug.c"
    case 11: 
      label = 26; break; //@line 349 "ldebug.c"
    case 12: 
      var $19=$reg_addr; //@line 353 "ldebug.c"
      var $20=$a; //@line 353 "ldebug.c"
      var $cmp13=(($19)|0) >= (($20)|0); //@line 353 "ldebug.c"
      if ($cmp13) { label = 13; break; } else { label = 14; break; } //@line 353 "ldebug.c"
    case 13: 
      var $21=$pc; //@line 353 "ldebug.c"
      $setreg=$21; //@line 353 "ldebug.c"
      label = 14; break; //@line 353 "ldebug.c"
    case 14: 
      label = 26; break; //@line 354 "ldebug.c"
    case 15: 
      var $22=$i; //@line 357 "ldebug.c"
      var $shr18=$22 >>> 14; //@line 357 "ldebug.c"
      var $and19=$shr18 & 262143; //@line 357 "ldebug.c"
      var $sub=((($and19)-(131071))|0); //@line 357 "ldebug.c"
      $b17=$sub; //@line 357 "ldebug.c"
      var $23=$pc; //@line 358 "ldebug.c"
      var $add20=((($23)+(1))|0); //@line 358 "ldebug.c"
      var $24=$b17; //@line 358 "ldebug.c"
      var $add21=((($add20)+($24))|0); //@line 358 "ldebug.c"
      $dest=$add21; //@line 358 "ldebug.c"
      var $25=$pc; //@line 360 "ldebug.c"
      var $26=$dest; //@line 360 "ldebug.c"
      var $cmp22=(($25)|0) < (($26)|0); //@line 360 "ldebug.c"
      if ($cmp22) { label = 16; break; } else { label = 18; break; } //@line 360 "ldebug.c"
    case 16: 
      var $27=$dest; //@line 360 "ldebug.c"
      var $28=$lastpc_addr; //@line 360 "ldebug.c"
      var $cmp24=(($27)|0) <= (($28)|0); //@line 360 "ldebug.c"
      if ($cmp24) { label = 17; break; } else { label = 18; break; } //@line 360 "ldebug.c"
    case 17: 
      var $29=$b17; //@line 361 "ldebug.c"
      var $30=$pc; //@line 361 "ldebug.c"
      var $add26=((($30)+($29))|0); //@line 361 "ldebug.c"
      $pc=$add26; //@line 361 "ldebug.c"
      label = 18; break; //@line 361 "ldebug.c"
    case 18: 
      label = 26; break; //@line 362 "ldebug.c"
    case 19: 
      var $31=$reg_addr; //@line 365 "ldebug.c"
      var $32=$a; //@line 365 "ldebug.c"
      var $cmp29=(($31)|0)==(($32)|0); //@line 365 "ldebug.c"
      if ($cmp29) { label = 20; break; } else { label = 21; break; } //@line 365 "ldebug.c"
    case 20: 
      var $33=$pc; //@line 365 "ldebug.c"
      $setreg=$33; //@line 365 "ldebug.c"
      label = 21; break; //@line 365 "ldebug.c"
    case 21: 
      label = 26; break; //@line 366 "ldebug.c"
    case 22: 
      var $34=$op; //@line 369 "ldebug.c"
      var $arrayidx32=((5243212+$34)|0); //@line 369 "ldebug.c"
      var $35=HEAP8[($arrayidx32)]; //@line 369 "ldebug.c"
      var $conv=(($35)&255); //@line 369 "ldebug.c"
      var $and33=$conv & 64; //@line 369 "ldebug.c"
      var $tobool=(($and33)|0)!=0; //@line 369 "ldebug.c"
      if ($tobool) { label = 23; break; } else { label = 25; break; } //@line 369 "ldebug.c"
    case 23: 
      var $36=$reg_addr; //@line 369 "ldebug.c"
      var $37=$a; //@line 369 "ldebug.c"
      var $cmp35=(($36)|0)==(($37)|0); //@line 369 "ldebug.c"
      if ($cmp35) { label = 24; break; } else { label = 25; break; } //@line 369 "ldebug.c"
    case 24: 
      var $38=$pc; //@line 370 "ldebug.c"
      $setreg=$38; //@line 370 "ldebug.c"
      label = 25; break; //@line 370 "ldebug.c"
    case 25: 
      label = 26; break; //@line 371 "ldebug.c"
    case 26: 
      label = 27; break; //@line 373 "ldebug.c"
    case 27: 
      var $39=$pc; //@line 336 "ldebug.c"
      var $inc=((($39)+(1))|0); //@line 336 "ldebug.c"
      $pc=$inc; //@line 336 "ldebug.c"
      label = 3; break; //@line 336 "ldebug.c"
    case 28: 
      var $40=$setreg; //@line 374 "ldebug.c"

      return $40; //@line 374 "ldebug.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL10findsetregP5Protoii["X"]=1;

function __ZL9upvalnameP5Protoi($p, $uv) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p_addr;
      var $uv_addr;
      var $s;
      $p_addr=$p;
      $uv_addr=$uv;
      var $0=$uv_addr; //@line 101 "ldebug.c"
      var $1=$p_addr; //@line 101 "ldebug.c"
      var $upvalues=(($1+28)|0); //@line 101 "ldebug.c"
      var $2=HEAP32[(($upvalues)>>2)]; //@line 101 "ldebug.c"
      var $arrayidx=(($2+($0<<3))|0); //@line 101 "ldebug.c"
      var $name=(($arrayidx)|0); //@line 101 "ldebug.c"
      var $3=HEAP32[(($name)>>2)]; //@line 101 "ldebug.c"
      $s=$3; //@line 101 "ldebug.c"
      var $4=$s; //@line 102 "ldebug.c"
      var $cmp=(($4)|0)==0; //@line 102 "ldebug.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 102 "ldebug.c"
    case 3: 
      $retval=((5243936)|0); //@line 102 "ldebug.c"
      label = 5; break; //@line 102 "ldebug.c"
    case 4: 
      var $5=$s; //@line 103 "ldebug.c"
      var $add_ptr=(($5+16)|0); //@line 103 "ldebug.c"
      var $6=$add_ptr; //@line 103 "ldebug.c"
      $retval=$6; //@line 103 "ldebug.c"
      label = 5; break; //@line 103 "ldebug.c"
    case 5: 
      var $7=$retval; //@line 104 "ldebug.c"

      return $7; //@line 104 "ldebug.c"
    default: assert(0, "bad label: " + label);
  }

}


function __ZL7addinfoP9lua_StatePKc($L, $msg) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $msg_addr;
      var $ci;
      var $buff=__stackBase__;
      var $line;
      var $src;
      $L_addr=$L;
      $msg_addr=$msg;
      var $0=$L_addr; //@line 545 "ldebug.c"
      var $ci1=(($0+16)|0); //@line 545 "ldebug.c"
      var $1=HEAP32[(($ci1)>>2)]; //@line 545 "ldebug.c"
      $ci=$1; //@line 545 "ldebug.c"
      var $2=$ci; //@line 546 "ldebug.c"
      var $callstatus=(($2+18)|0); //@line 546 "ldebug.c"
      var $3=HEAP8[($callstatus)]; //@line 546 "ldebug.c"
      var $conv=(($3)&255); //@line 546 "ldebug.c"
      var $and=$conv & 1; //@line 546 "ldebug.c"
      var $tobool=(($and)|0)!=0; //@line 546 "ldebug.c"
      if ($tobool) { label = 3; break; } else { label = 7; break; } //@line 546 "ldebug.c"
    case 3: 
      var $4=$ci; //@line 548 "ldebug.c"
      var $call=__ZL11currentlineP8CallInfo($4); //@line 548 "ldebug.c"
      $line=$call; //@line 548 "ldebug.c"
      var $5=$ci; //@line 549 "ldebug.c"
      var $func=(($5)|0); //@line 549 "ldebug.c"
      var $6=HEAP32[(($func)>>2)]; //@line 549 "ldebug.c"
      var $value_=(($6)|0); //@line 549 "ldebug.c"
      var $gc=$value_; //@line 549 "ldebug.c"
      var $7=HEAP32[(($gc)>>2)]; //@line 549 "ldebug.c"
      var $cl=$7; //@line 549 "ldebug.c"
      var $l=$cl; //@line 549 "ldebug.c"
      var $p=(($l+12)|0); //@line 549 "ldebug.c"
      var $8=HEAP32[(($p)>>2)]; //@line 549 "ldebug.c"
      var $source=(($8+36)|0); //@line 549 "ldebug.c"
      var $9=HEAP32[(($source)>>2)]; //@line 549 "ldebug.c"
      $src=$9; //@line 549 "ldebug.c"
      var $10=$src; //@line 550 "ldebug.c"
      var $tobool2=(($10)|0)!=0; //@line 550 "ldebug.c"
      if ($tobool2) { label = 4; break; } else { label = 5; break; } //@line 550 "ldebug.c"
    case 4: 
      var $arraydecay=(($buff)|0); //@line 551 "ldebug.c"
      var $11=$src; //@line 551 "ldebug.c"
      var $add_ptr=(($11+16)|0); //@line 551 "ldebug.c"
      var $12=$add_ptr; //@line 551 "ldebug.c"
      __Z12luaO_chunkidPcPKcj($arraydecay, $12, 60); //@line 551 "ldebug.c"
      label = 6; break; //@line 551 "ldebug.c"
    case 5: 
      var $arrayidx=(($buff)|0); //@line 553 "ldebug.c"
      HEAP8[($arrayidx)]=63; //@line 553 "ldebug.c"
      var $arrayidx4=(($buff+1)|0); //@line 553 "ldebug.c"
      HEAP8[($arrayidx4)]=0; //@line 553 "ldebug.c"
      label = 6; break;
    case 6: 
      var $13=$L_addr; //@line 555 "ldebug.c"
      var $arraydecay5=(($buff)|0); //@line 555 "ldebug.c"
      var $14=$line; //@line 555 "ldebug.c"
      var $15=$msg_addr; //@line 555 "ldebug.c"
      var $call6=__Z16luaO_pushfstringP9lua_StatePKcz($13, ((5243468)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$arraydecay5,HEAP32[(((tempInt)+(4))>>2)]=$14,HEAP32[(((tempInt)+(8))>>2)]=$15,tempInt)); //@line 555 "ldebug.c"
      label = 7; break; //@line 556 "ldebug.c"
    case 7: 
      STACKTOP = __stackBase__;
      return; //@line 557 "ldebug.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL7addinfoP9lua_StatePKc["X"]=1;

function __ZL11currentlineP8CallInfo($ci) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ci_addr;
      $ci_addr=$ci;
      var $0=$ci_addr; //@line 46 "ldebug.c"
      var $func=(($0)|0); //@line 46 "ldebug.c"
      var $1=HEAP32[(($func)>>2)]; //@line 46 "ldebug.c"
      var $value_=(($1)|0); //@line 46 "ldebug.c"
      var $gc=$value_; //@line 46 "ldebug.c"
      var $2=HEAP32[(($gc)>>2)]; //@line 46 "ldebug.c"
      var $cl=$2; //@line 46 "ldebug.c"
      var $l=$cl; //@line 46 "ldebug.c"
      var $p=(($l+12)|0); //@line 46 "ldebug.c"
      var $3=HEAP32[(($p)>>2)]; //@line 46 "ldebug.c"
      var $lineinfo=(($3+20)|0); //@line 46 "ldebug.c"
      var $4=HEAP32[(($lineinfo)>>2)]; //@line 46 "ldebug.c"
      var $tobool=(($4)|0)!=0; //@line 46 "ldebug.c"
      if ($tobool) { label = 3; break; } else { label = 4; break; } //@line 46 "ldebug.c"
    case 3: 
      var $5=$ci_addr; //@line 46 "ldebug.c"
      var $call=__ZL9currentpcP8CallInfo($5); //@line 46 "ldebug.c"
      var $6=$ci_addr; //@line 46 "ldebug.c"
      var $func1=(($6)|0); //@line 46 "ldebug.c"
      var $7=HEAP32[(($func1)>>2)]; //@line 46 "ldebug.c"
      var $value_2=(($7)|0); //@line 46 "ldebug.c"
      var $gc3=$value_2; //@line 46 "ldebug.c"
      var $8=HEAP32[(($gc3)>>2)]; //@line 46 "ldebug.c"
      var $cl4=$8; //@line 46 "ldebug.c"
      var $l5=$cl4; //@line 46 "ldebug.c"
      var $p6=(($l5+12)|0); //@line 46 "ldebug.c"
      var $9=HEAP32[(($p6)>>2)]; //@line 46 "ldebug.c"
      var $lineinfo7=(($9+20)|0); //@line 46 "ldebug.c"
      var $10=HEAP32[(($lineinfo7)>>2)]; //@line 46 "ldebug.c"
      var $arrayidx=(($10+($call<<2))|0); //@line 46 "ldebug.c"
      var $11=HEAP32[(($arrayidx)>>2)]; //@line 46 "ldebug.c"
      var $cond = $11;label = 5; break; //@line 46 "ldebug.c"
    case 4: 
      var $cond = 0;label = 5; break; //@line 46 "ldebug.c"
    case 5: 
      var $cond; //@line 46 "ldebug.c"

      return $cond; //@line 46 "ldebug.c"
    default: assert(0, "bad label: " + label);
  }

}


function __ZL5knameP5ProtoiiPPKc($p, $pc, $c, $name) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $pc_addr;
      var $c_addr;
      var $name_addr;
      var $kvalue;
      var $what;
      $p_addr=$p;
      $pc_addr=$pc;
      $c_addr=$c;
      $name_addr=$name;
      var $0=$c_addr; //@line 311 "ldebug.c"
      var $and=$0 & 256; //@line 311 "ldebug.c"
      var $tobool=(($and)|0)!=0; //@line 311 "ldebug.c"
      if ($tobool) { label = 3; break; } else { label = 6; break; } //@line 311 "ldebug.c"
    case 3: 
      var $1=$c_addr; //@line 312 "ldebug.c"
      var $and1=$1 & -257; //@line 312 "ldebug.c"
      var $2=$p_addr; //@line 312 "ldebug.c"
      var $k=(($2+8)|0); //@line 312 "ldebug.c"
      var $3=HEAP32[(($k)>>2)]; //@line 312 "ldebug.c"
      var $arrayidx=(($3+((($and1)*(12))&-1))|0); //@line 312 "ldebug.c"
      $kvalue=$arrayidx; //@line 312 "ldebug.c"
      var $4=$kvalue; //@line 313 "ldebug.c"
      var $tt_=(($4+8)|0); //@line 313 "ldebug.c"
      var $5=HEAP32[(($tt_)>>2)]; //@line 313 "ldebug.c"
      var $and2=$5 & 15; //@line 313 "ldebug.c"
      var $cmp=(($and2)|0)==4; //@line 313 "ldebug.c"
      if ($cmp) { label = 4; break; } else { label = 5; break; } //@line 313 "ldebug.c"
    case 4: 
      var $6=$kvalue; //@line 314 "ldebug.c"
      var $value_=(($6)|0); //@line 314 "ldebug.c"
      var $gc=$value_; //@line 314 "ldebug.c"
      var $7=HEAP32[(($gc)>>2)]; //@line 314 "ldebug.c"
      var $ts=$7; //@line 314 "ldebug.c"
      var $add_ptr=(($ts+16)|0); //@line 314 "ldebug.c"
      var $8=$add_ptr; //@line 314 "ldebug.c"
      var $9=$name_addr; //@line 314 "ldebug.c"
      HEAP32[(($9)>>2)]=$8; //@line 314 "ldebug.c"
      label = 11; break; //@line 315 "ldebug.c"
    case 5: 
      label = 10; break; //@line 318 "ldebug.c"
    case 6: 
      var $10=$p_addr; //@line 320 "ldebug.c"
      var $11=$pc_addr; //@line 320 "ldebug.c"
      var $12=$c_addr; //@line 320 "ldebug.c"
      var $13=$name_addr; //@line 320 "ldebug.c"
      var $call=__ZL10getobjnameP5ProtoiiPPKc($10, $11, $12, $13); //@line 320 "ldebug.c"
      $what=$call; //@line 320 "ldebug.c"
      var $14=$what; //@line 321 "ldebug.c"
      var $tobool4=(($14)|0)!=0; //@line 321 "ldebug.c"
      if ($tobool4) { label = 7; break; } else { label = 9; break; } //@line 321 "ldebug.c"
    case 7: 
      var $15=$what; //@line 321 "ldebug.c"
      var $16=HEAP8[($15)]; //@line 321 "ldebug.c"
      var $conv=(($16 << 24) >> 24); //@line 321 "ldebug.c"
      var $cmp5=(($conv)|0)==99; //@line 321 "ldebug.c"
      if ($cmp5) { label = 8; break; } else { label = 9; break; } //@line 321 "ldebug.c"
    case 8: 
      label = 11; break; //@line 322 "ldebug.c"
    case 9: 
      label = 10; break;
    case 10: 
      var $17=$name_addr; //@line 326 "ldebug.c"
      HEAP32[(($17)>>2)]=((5243936)|0); //@line 326 "ldebug.c"
      label = 11; break; //@line 327 "ldebug.c"
    case 11: 

      return; //@line 327 "ldebug.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL5knameP5ProtoiiPPKc["X"]=1;

function __Z20luaD_rawrunprotectedP9lua_StatePFvS0_PvES1_($L, $f, $ud) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $f_addr;
      var $ud_addr;
      var $oldnCcalls;
      var $lj=__stackBase__;
      var $exn_slot;
      var $ehselector_slot;
      $L_addr=$L;
      $f_addr=$f;
      $ud_addr=$ud;
      var $0=$L_addr; //@line 126 "ldo.c"
      var $nCcalls=(($0+38)|0); //@line 126 "ldo.c"
      var $1=HEAP16[(($nCcalls)>>1)]; //@line 126 "ldo.c"
      $oldnCcalls=$1; //@line 126 "ldo.c"
      var $status=(($lj+8)|0); //@line 128 "ldo.c"
      HEAP32[(($status)>>2)]=0; //@line 128 "ldo.c"
      var $2=$L_addr; //@line 129 "ldo.c"
      var $errorJmp=(($2+64)|0); //@line 129 "ldo.c"
      var $3=HEAP32[(($errorJmp)>>2)]; //@line 129 "ldo.c"
      var $previous=(($lj)|0); //@line 129 "ldo.c"
      HEAP32[(($previous)>>2)]=$3; //@line 129 "ldo.c"
      var $4=$L_addr; //@line 130 "ldo.c"
      var $errorJmp1=(($4+64)|0); //@line 130 "ldo.c"
      HEAP32[(($errorJmp1)>>2)]=$lj; //@line 130 "ldo.c"
      var $5=$f_addr; //@line 131 "ldo.c"
      var $6=$L_addr; //@line 131 "ldo.c"
      var $7=$ud_addr; //@line 131 "ldo.c"
      (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$5]($6, $7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 8; break; //@line 131 "ldo.c"
    case 4: 
      var $8$0 = ___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)],[0]); $8$1 = tempRet0;
      var $9=$8$0;
      $exn_slot=$9; //@line 131 "ldo.c"
      var $10=$8$1;
      $ehselector_slot=$10; //@line 131 "ldo.c"
      label = 5; break; //@line 131 "ldo.c"
    case 5: 
      var $exn=$exn_slot; //@line 131 "ldo.c"
      var $11=___cxa_begin_catch($exn); //@line 131 "ldo.c"
      var $status2=(($lj+8)|0); //@line 131 "ldo.c"
      var $12=HEAP32[(($status2)>>2)]; //@line 131 "ldo.c"
      var $cmp=(($12)|0)==0; //@line 131 "ldo.c"
      if ($cmp) { label = 6; break; } else { label = 7; break; } //@line 131 "ldo.c"
    case 6: 
      var $status3=(($lj+8)|0); //@line 131 "ldo.c"
      HEAP32[(($status3)>>2)]=-1; //@line 131 "ldo.c"
      label = 7; break; //@line 131 "ldo.c"
    case 7: 
      ___cxa_end_catch(); //@line 131 "ldo.c"
      label = 8; break; //@line 131 "ldo.c"
    case 8: 
      var $previous4=(($lj)|0); //@line 134 "ldo.c"
      var $13=HEAP32[(($previous4)>>2)]; //@line 134 "ldo.c"
      var $14=$L_addr; //@line 134 "ldo.c"
      var $errorJmp5=(($14+64)|0); //@line 134 "ldo.c"
      HEAP32[(($errorJmp5)>>2)]=$13; //@line 134 "ldo.c"
      var $15=$oldnCcalls; //@line 135 "ldo.c"
      var $16=$L_addr; //@line 135 "ldo.c"
      var $nCcalls6=(($16+38)|0); //@line 135 "ldo.c"
      HEAP16[(($nCcalls6)>>1)]=$15; //@line 135 "ldo.c"
      var $status7=(($lj+8)|0); //@line 136 "ldo.c"
      var $17=HEAP32[(($status7)>>2)]; //@line 136 "ldo.c"
      STACKTOP = __stackBase__;
      return $17; //@line 136 "ldo.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z20luaD_rawrunprotectedP9lua_StatePFvS0_PvES1_["X"]=1;

function __Z15luaG_ordererrorP9lua_StatePK10lua_TValueS3_($L, $p1, $p2) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $p1_addr;
      var $p2_addr;
      var $t1;
      var $t2;
      $L_addr=$L;
      $p1_addr=$p1;
      $p2_addr=$p2;
      var $0=$p1_addr; //@line 535 "ldebug.c"
      var $tt_=(($0+8)|0); //@line 535 "ldebug.c"
      var $1=HEAP32[(($tt_)>>2)]; //@line 535 "ldebug.c"
      var $and=$1 & 15; //@line 535 "ldebug.c"
      var $add=((($and)+(1))|0); //@line 535 "ldebug.c"
      var $arrayidx=((5243164+($add<<2))|0); //@line 535 "ldebug.c"
      var $2=HEAP32[(($arrayidx)>>2)]; //@line 535 "ldebug.c"
      $t1=$2; //@line 535 "ldebug.c"
      var $3=$p2_addr; //@line 536 "ldebug.c"
      var $tt_1=(($3+8)|0); //@line 536 "ldebug.c"
      var $4=HEAP32[(($tt_1)>>2)]; //@line 536 "ldebug.c"
      var $and2=$4 & 15; //@line 536 "ldebug.c"
      var $add3=((($and2)+(1))|0); //@line 536 "ldebug.c"
      var $arrayidx4=((5243164+($add3<<2))|0); //@line 536 "ldebug.c"
      var $5=HEAP32[(($arrayidx4)>>2)]; //@line 536 "ldebug.c"
      $t2=$5; //@line 536 "ldebug.c"
      var $6=$t1; //@line 537 "ldebug.c"
      var $7=$t2; //@line 537 "ldebug.c"
      var $cmp=(($6)|0)==(($7)|0); //@line 537 "ldebug.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 537 "ldebug.c"
    case 3: 
      var $8=$L_addr; //@line 538 "ldebug.c"
      var $9=$t1; //@line 538 "ldebug.c"
      __Z13luaG_runerrorP9lua_StatePKcz($8, ((5243628)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$9,tempInt)); //@line 538 "ldebug.c"
      throw "Reached an unreachable!" //@line 538 "ldebug.c"
    case 4: 
      var $10=$L_addr; //@line 540 "ldebug.c"
      var $11=$t1; //@line 540 "ldebug.c"
      var $12=$t2; //@line 540 "ldebug.c"
      __Z13luaG_runerrorP9lua_StatePKcz($10, ((5243560)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$11,HEAP32[(((tempInt)+(4))>>2)]=$12,tempInt)); //@line 540 "ldebug.c"
      throw "Reached an unreachable!" //@line 540 "ldebug.c"
    case 5: 
      STACKTOP = __stackBase__;
      return; //@line 541 "ldebug.c"
    default: assert(0, "bad label: " + label);
  }

}


function __Z13luaG_errormsgP9lua_State($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $errfunc1;
      var $io2;
      var $io1;
      var $io210;
      var $io111;
      $L_addr=$L;
      var $0=$L_addr; //@line 561 "ldebug.c"
      var $errfunc=(($0+68)|0); //@line 561 "ldebug.c"
      var $1=HEAP32[(($errfunc)>>2)]; //@line 561 "ldebug.c"
      var $cmp=(($1)|0)!=0; //@line 561 "ldebug.c"
      if ($cmp) { label = 3; break; } else { label = 9; break; } //@line 561 "ldebug.c"
    case 3: 
      var $2=$L_addr; //@line 562 "ldebug.c"
      var $stack=(($2+28)|0); //@line 562 "ldebug.c"
      var $3=HEAP32[(($stack)>>2)]; //@line 562 "ldebug.c"
      var $4=$3; //@line 562 "ldebug.c"
      var $5=$L_addr; //@line 562 "ldebug.c"
      var $errfunc2=(($5+68)|0); //@line 562 "ldebug.c"
      var $6=HEAP32[(($errfunc2)>>2)]; //@line 562 "ldebug.c"
      var $add_ptr=(($4+$6)|0); //@line 562 "ldebug.c"
      var $7=$add_ptr; //@line 562 "ldebug.c"
      $errfunc1=$7; //@line 562 "ldebug.c"
      var $8=$errfunc1; //@line 563 "ldebug.c"
      var $tt_=(($8+8)|0); //@line 563 "ldebug.c"
      var $9=HEAP32[(($tt_)>>2)]; //@line 563 "ldebug.c"
      var $and=$9 & 15; //@line 563 "ldebug.c"
      var $cmp3=(($and)|0)==6; //@line 563 "ldebug.c"
      if ($cmp3) { label = 5; break; } else { label = 4; break; } //@line 563 "ldebug.c"
    case 4: 
      var $10=$L_addr; //@line 563 "ldebug.c"
      __Z10luaD_throwP9lua_Statei($10, 6); //@line 563 "ldebug.c"
      throw "Reached an unreachable!" //@line 563 "ldebug.c"
    case 5: 
      var $11=$L_addr; //@line 564 "ldebug.c"
      var $top=(($11+8)|0); //@line 564 "ldebug.c"
      var $12=HEAP32[(($top)>>2)]; //@line 564 "ldebug.c"
      var $add_ptr5=((($12)-(12))|0); //@line 564 "ldebug.c"
      $io2=$add_ptr5; //@line 564 "ldebug.c"
      var $13=$L_addr; //@line 564 "ldebug.c"
      var $top6=(($13+8)|0); //@line 564 "ldebug.c"
      var $14=HEAP32[(($top6)>>2)]; //@line 564 "ldebug.c"
      $io1=$14; //@line 564 "ldebug.c"
      var $15=$io1; //@line 564 "ldebug.c"
      var $value_=(($15)|0); //@line 564 "ldebug.c"
      var $16=$io2; //@line 564 "ldebug.c"
      var $value_7=(($16)|0); //@line 564 "ldebug.c"
      var $17=$value_; //@line 564 "ldebug.c"
      var $18=$value_7; //@line 564 "ldebug.c"
      assert(8 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)]; //@line 564 "ldebug.c"
      var $19=$io2; //@line 564 "ldebug.c"
      var $tt_8=(($19+8)|0); //@line 564 "ldebug.c"
      var $20=HEAP32[(($tt_8)>>2)]; //@line 564 "ldebug.c"
      var $21=$io1; //@line 564 "ldebug.c"
      var $tt_9=(($21+8)|0); //@line 564 "ldebug.c"
      HEAP32[(($tt_9)>>2)]=$20; //@line 564 "ldebug.c"
      var $22=$errfunc1; //@line 565 "ldebug.c"
      $io210=$22; //@line 565 "ldebug.c"
      var $23=$L_addr; //@line 565 "ldebug.c"
      var $top12=(($23+8)|0); //@line 565 "ldebug.c"
      var $24=HEAP32[(($top12)>>2)]; //@line 565 "ldebug.c"
      var $add_ptr13=((($24)-(12))|0); //@line 565 "ldebug.c"
      $io111=$add_ptr13; //@line 565 "ldebug.c"
      var $25=$io111; //@line 565 "ldebug.c"
      var $value_14=(($25)|0); //@line 565 "ldebug.c"
      var $26=$io210; //@line 565 "ldebug.c"
      var $value_15=(($26)|0); //@line 565 "ldebug.c"
      var $27=$value_14; //@line 565 "ldebug.c"
      var $28=$value_15; //@line 565 "ldebug.c"
      assert(8 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)]; //@line 565 "ldebug.c"
      var $29=$io210; //@line 565 "ldebug.c"
      var $tt_16=(($29+8)|0); //@line 565 "ldebug.c"
      var $30=HEAP32[(($tt_16)>>2)]; //@line 565 "ldebug.c"
      var $31=$io111; //@line 565 "ldebug.c"
      var $tt_17=(($31+8)|0); //@line 565 "ldebug.c"
      HEAP32[(($tt_17)>>2)]=$30; //@line 565 "ldebug.c"
      var $32=$L_addr; //@line 566 "ldebug.c"
      var $top18=(($32+8)|0); //@line 566 "ldebug.c"
      var $33=HEAP32[(($top18)>>2)]; //@line 566 "ldebug.c"
      var $incdec_ptr=(($33+12)|0); //@line 566 "ldebug.c"
      HEAP32[(($top18)>>2)]=$incdec_ptr; //@line 566 "ldebug.c"
      var $34=$L_addr; //@line 566 "ldebug.c"
      var $stack_last=(($34+24)|0); //@line 566 "ldebug.c"
      var $35=HEAP32[(($stack_last)>>2)]; //@line 566 "ldebug.c"
      var $36=$L_addr; //@line 566 "ldebug.c"
      var $top19=(($36+8)|0); //@line 566 "ldebug.c"
      var $37=HEAP32[(($top19)>>2)]; //@line 566 "ldebug.c"
      var $sub_ptr_lhs_cast=$35; //@line 566 "ldebug.c"
      var $sub_ptr_rhs_cast=$37; //@line 566 "ldebug.c"
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 566 "ldebug.c"
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(12))&-1); //@line 566 "ldebug.c"
      var $cmp20=(($sub_ptr_div)|0) <= 0; //@line 566 "ldebug.c"
      if ($cmp20) { label = 6; break; } else { label = 7; break; } //@line 566 "ldebug.c"
    case 6: 
      var $38=$L_addr; //@line 566 "ldebug.c"
      __Z14luaD_growstackP9lua_Statei($38, 0); //@line 566 "ldebug.c"
      label = 8; break; //@line 566 "ldebug.c"
    case 7: 
      label = 8; break;
    case 8: 
      var $39=$L_addr; //@line 567 "ldebug.c"
      var $40=$L_addr; //@line 567 "ldebug.c"
      var $top23=(($40+8)|0); //@line 567 "ldebug.c"
      var $41=HEAP32[(($top23)>>2)]; //@line 567 "ldebug.c"
      var $add_ptr24=((($41)-(24))|0); //@line 567 "ldebug.c"
      __Z9luaD_callP9lua_StateP10lua_TValueii($39, $add_ptr24, 1, 0); //@line 567 "ldebug.c"
      label = 9; break; //@line 568 "ldebug.c"
    case 9: 
      var $42=$L_addr; //@line 569 "ldebug.c"
      __Z10luaD_throwP9lua_Statei($42, 2); //@line 569 "ldebug.c"
      throw "Reached an unreachable!" //@line 569 "ldebug.c"
    case 10: 

      return; //@line 570 "ldebug.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z13luaG_errormsgP9lua_State["X"]=1;

function __Z10luaD_throwP9lua_Statei($L, $errcode) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $errcode_addr;
      var $io2;
      var $io1;
      $L_addr=$L;
      $errcode_addr=$errcode;
      var $0=$L_addr; //@line 104 "ldo.c"
      var $errorJmp=(($0+64)|0); //@line 104 "ldo.c"
      var $1=HEAP32[(($errorJmp)>>2)]; //@line 104 "ldo.c"
      var $tobool=(($1)|0)!=0; //@line 104 "ldo.c"
      if ($tobool) { label = 3; break; } else { label = 4; break; } //@line 104 "ldo.c"
    case 3: 
      var $2=$errcode_addr; //@line 105 "ldo.c"
      var $3=$L_addr; //@line 105 "ldo.c"
      var $errorJmp1=(($3+64)|0); //@line 105 "ldo.c"
      var $4=HEAP32[(($errorJmp1)>>2)]; //@line 105 "ldo.c"
      var $status=(($4+8)|0); //@line 105 "ldo.c"
      HEAP32[(($status)>>2)]=$2; //@line 105 "ldo.c"
      var $exception=___cxa_allocate_exception(4); //@line 106 "ldo.c"
      var $5=$exception; //@line 106 "ldo.c"
      var $6=$L_addr; //@line 106 "ldo.c"
      var $errorJmp2=(($6+64)|0); //@line 106 "ldo.c"
      var $7=HEAP32[(($errorJmp2)>>2)]; //@line 106 "ldo.c"
      HEAP32[(($5)>>2)]=$7; //@line 106 "ldo.c"
      ___cxa_throw($exception, 5245168, 0); //@line 106 "ldo.c"
      throw "Reached an unreachable!" //@line 106 "ldo.c"
    case 4: 
      var $8=$errcode_addr; //@line 109 "ldo.c"
      var $conv=(($8) & 255); //@line 109 "ldo.c"
      var $9=$L_addr; //@line 109 "ldo.c"
      var $status3=(($9+6)|0); //@line 109 "ldo.c"
      HEAP8[($status3)]=$conv; //@line 109 "ldo.c"
      var $10=$L_addr; //@line 110 "ldo.c"
      var $l_G=(($10+12)|0); //@line 110 "ldo.c"
      var $11=HEAP32[(($l_G)>>2)]; //@line 110 "ldo.c"
      var $mainthread=(($11+152)|0); //@line 110 "ldo.c"
      var $12=HEAP32[(($mainthread)>>2)]; //@line 110 "ldo.c"
      var $errorJmp4=(($12+64)|0); //@line 110 "ldo.c"
      var $13=HEAP32[(($errorJmp4)>>2)]; //@line 110 "ldo.c"
      var $tobool5=(($13)|0)!=0; //@line 110 "ldo.c"
      if ($tobool5) { label = 5; break; } else { label = 6; break; } //@line 110 "ldo.c"
    case 5: 
      var $14=$L_addr; //@line 111 "ldo.c"
      var $top=(($14+8)|0); //@line 111 "ldo.c"
      var $15=HEAP32[(($top)>>2)]; //@line 111 "ldo.c"
      var $add_ptr=((($15)-(12))|0); //@line 111 "ldo.c"
      $io2=$add_ptr; //@line 111 "ldo.c"
      var $16=$L_addr; //@line 111 "ldo.c"
      var $l_G7=(($16+12)|0); //@line 111 "ldo.c"
      var $17=HEAP32[(($l_G7)>>2)]; //@line 111 "ldo.c"
      var $mainthread8=(($17+152)|0); //@line 111 "ldo.c"
      var $18=HEAP32[(($mainthread8)>>2)]; //@line 111 "ldo.c"
      var $top9=(($18+8)|0); //@line 111 "ldo.c"
      var $19=HEAP32[(($top9)>>2)]; //@line 111 "ldo.c"
      var $incdec_ptr=(($19+12)|0); //@line 111 "ldo.c"
      HEAP32[(($top9)>>2)]=$incdec_ptr; //@line 111 "ldo.c"
      $io1=$19; //@line 111 "ldo.c"
      var $20=$io1; //@line 111 "ldo.c"
      var $value_=(($20)|0); //@line 111 "ldo.c"
      var $21=$io2; //@line 111 "ldo.c"
      var $value_10=(($21)|0); //@line 111 "ldo.c"
      var $22=$value_; //@line 111 "ldo.c"
      var $23=$value_10; //@line 111 "ldo.c"
      assert(8 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)]; //@line 111 "ldo.c"
      var $24=$io2; //@line 111 "ldo.c"
      var $tt_=(($24+8)|0); //@line 111 "ldo.c"
      var $25=HEAP32[(($tt_)>>2)]; //@line 111 "ldo.c"
      var $26=$io1; //@line 111 "ldo.c"
      var $tt_11=(($26+8)|0); //@line 111 "ldo.c"
      HEAP32[(($tt_11)>>2)]=$25; //@line 111 "ldo.c"
      var $27=$L_addr; //@line 112 "ldo.c"
      var $l_G12=(($27+12)|0); //@line 112 "ldo.c"
      var $28=HEAP32[(($l_G12)>>2)]; //@line 112 "ldo.c"
      var $mainthread13=(($28+152)|0); //@line 112 "ldo.c"
      var $29=HEAP32[(($mainthread13)>>2)]; //@line 112 "ldo.c"
      var $30=$errcode_addr; //@line 112 "ldo.c"
      __Z10luaD_throwP9lua_Statei($29, $30); //@line 112 "ldo.c"
      throw "Reached an unreachable!" //@line 112 "ldo.c"
    case 6: 
      var $31=$L_addr; //@line 115 "ldo.c"
      var $l_G15=(($31+12)|0); //@line 115 "ldo.c"
      var $32=HEAP32[(($l_G15)>>2)]; //@line 115 "ldo.c"
      var $panic=(($32+148)|0); //@line 115 "ldo.c"
      var $33=HEAP32[(($panic)>>2)]; //@line 115 "ldo.c"
      var $tobool16=(($33)|0)!=0; //@line 115 "ldo.c"
      if ($tobool16) { label = 7; break; } else { label = 8; break; } //@line 115 "ldo.c"
    case 7: 
      var $34=$L_addr; //@line 117 "ldo.c"
      var $l_G18=(($34+12)|0); //@line 117 "ldo.c"
      var $35=HEAP32[(($l_G18)>>2)]; //@line 117 "ldo.c"
      var $panic19=(($35+148)|0); //@line 117 "ldo.c"
      var $36=HEAP32[(($panic19)>>2)]; //@line 117 "ldo.c"
      var $37=$L_addr; //@line 117 "ldo.c"
      var $call=FUNCTION_TABLE[$36]($37); //@line 117 "ldo.c"
      label = 8; break; //@line 118 "ldo.c"
    case 8: 
      _abort(); //@line 119 "ldo.c"
      throw "Reached an unreachable!" //@line 119 "ldo.c"
    case 9: 

      return; //@line 122 "ldo.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z10luaD_throwP9lua_Statei["X"]=1;

function __Z17luaD_reallocstackP9lua_Statei($L, $newsize) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $newsize_addr;
      var $oldstack;
      var $lim;
      $L_addr=$L;
      $newsize_addr=$newsize;
      var $0=$L_addr; //@line 162 "ldo.c"
      var $stack=(($0+28)|0); //@line 162 "ldo.c"
      var $1=HEAP32[(($stack)>>2)]; //@line 162 "ldo.c"
      $oldstack=$1; //@line 162 "ldo.c"
      var $2=$L_addr; //@line 163 "ldo.c"
      var $stacksize=(($2+32)|0); //@line 163 "ldo.c"
      var $3=HEAP32[(($stacksize)>>2)]; //@line 163 "ldo.c"
      $lim=$3; //@line 163 "ldo.c"
      var $4=$newsize_addr; //@line 166 "ldo.c"
      var $add=((($4)+(1))|0); //@line 166 "ldo.c"
      var $cmp=(($add)>>>0) > 357913941; //@line 166 "ldo.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 166 "ldo.c"
    case 3: 
      var $5=$L_addr; //@line 166 "ldo.c"
      __Z11luaM_toobigP9lua_State($5); //@line 166 "ldo.c"
      throw "Reached an unreachable!" //@line 166 "ldo.c"
      label = 5; break; //@line 166 "ldo.c"
    case 4: 
      var $7=$L_addr; //@line 166 "ldo.c"
      var $8=$L_addr; //@line 166 "ldo.c"
      var $stack1=(($8+28)|0); //@line 166 "ldo.c"
      var $9=HEAP32[(($stack1)>>2)]; //@line 166 "ldo.c"
      var $10=$9; //@line 166 "ldo.c"
      var $11=$L_addr; //@line 166 "ldo.c"
      var $stacksize2=(($11+32)|0); //@line 166 "ldo.c"
      var $12=HEAP32[(($stacksize2)>>2)]; //@line 166 "ldo.c"
      var $mul=((($12)*(12))&-1); //@line 166 "ldo.c"
      var $13=$newsize_addr; //@line 166 "ldo.c"
      var $mul3=((($13)*(12))&-1); //@line 166 "ldo.c"
      var $call=__Z13luaM_realloc_P9lua_StatePvjj($7, $10, $mul, $mul3); //@line 166 "ldo.c"
      var $cond = $call;label = 5; break; //@line 166 "ldo.c"
    case 5: 
      var $cond; //@line 166 "ldo.c"
      var $14=$cond; //@line 166 "ldo.c"
      var $15=$L_addr; //@line 166 "ldo.c"
      var $stack4=(($15+28)|0); //@line 166 "ldo.c"
      HEAP32[(($stack4)>>2)]=$14; //@line 166 "ldo.c"
      label = 6; break; //@line 167 "ldo.c"
    case 6: 
      var $16=$lim; //@line 167 "ldo.c"
      var $17=$newsize_addr; //@line 167 "ldo.c"
      var $cmp5=(($16)|0) < (($17)|0); //@line 167 "ldo.c"
      if ($cmp5) { label = 7; break; } else { label = 9; break; } //@line 167 "ldo.c"
    case 7: 
      var $18=$L_addr; //@line 168 "ldo.c"
      var $stack6=(($18+28)|0); //@line 168 "ldo.c"
      var $19=HEAP32[(($stack6)>>2)]; //@line 168 "ldo.c"
      var $20=$lim; //@line 168 "ldo.c"
      var $add_ptr=(($19+((($20)*(12))&-1))|0); //@line 168 "ldo.c"
      var $tt_=(($add_ptr+8)|0); //@line 168 "ldo.c"
      HEAP32[(($tt_)>>2)]=0; //@line 168 "ldo.c"
      label = 8; break; //@line 168 "ldo.c"
    case 8: 
      var $21=$lim; //@line 167 "ldo.c"
      var $inc=((($21)+(1))|0); //@line 167 "ldo.c"
      $lim=$inc; //@line 167 "ldo.c"
      label = 6; break; //@line 167 "ldo.c"
    case 9: 
      var $22=$newsize_addr; //@line 169 "ldo.c"
      var $23=$L_addr; //@line 169 "ldo.c"
      var $stacksize7=(($23+32)|0); //@line 169 "ldo.c"
      HEAP32[(($stacksize7)>>2)]=$22; //@line 169 "ldo.c"
      var $24=$L_addr; //@line 170 "ldo.c"
      var $stack8=(($24+28)|0); //@line 170 "ldo.c"
      var $25=HEAP32[(($stack8)>>2)]; //@line 170 "ldo.c"
      var $26=$newsize_addr; //@line 170 "ldo.c"
      var $add_ptr9=(($25+((($26)*(12))&-1))|0); //@line 170 "ldo.c"
      var $add_ptr10=((($add_ptr9)-(60))|0); //@line 170 "ldo.c"
      var $27=$L_addr; //@line 170 "ldo.c"
      var $stack_last=(($27+24)|0); //@line 170 "ldo.c"
      HEAP32[(($stack_last)>>2)]=$add_ptr10; //@line 170 "ldo.c"
      var $28=$L_addr; //@line 171 "ldo.c"
      var $29=$oldstack; //@line 171 "ldo.c"
      __ZL12correctstackP9lua_StateP10lua_TValue($28, $29); //@line 171 "ldo.c"

      return; //@line 172 "ldo.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z17luaD_reallocstackP9lua_Statei["X"]=1;

function __ZL12correctstackP9lua_StateP10lua_TValue($L, $oldstack) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $oldstack_addr;
      var $ci;
      var $up;
      $L_addr=$L;
      $oldstack_addr=$oldstack;
      var $0=$L_addr; //@line 145 "ldo.c"
      var $top=(($0+8)|0); //@line 145 "ldo.c"
      var $1=HEAP32[(($top)>>2)]; //@line 145 "ldo.c"
      var $2=$oldstack_addr; //@line 145 "ldo.c"
      var $sub_ptr_lhs_cast=$1; //@line 145 "ldo.c"
      var $sub_ptr_rhs_cast=$2; //@line 145 "ldo.c"
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 145 "ldo.c"
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(12))&-1); //@line 145 "ldo.c"
      var $3=$L_addr; //@line 145 "ldo.c"
      var $stack=(($3+28)|0); //@line 145 "ldo.c"
      var $4=HEAP32[(($stack)>>2)]; //@line 145 "ldo.c"
      var $add_ptr=(($4+((($sub_ptr_div)*(12))&-1))|0); //@line 145 "ldo.c"
      var $5=$L_addr; //@line 145 "ldo.c"
      var $top1=(($5+8)|0); //@line 145 "ldo.c"
      HEAP32[(($top1)>>2)]=$add_ptr; //@line 145 "ldo.c"
      var $6=$L_addr; //@line 146 "ldo.c"
      var $openupval=(($6+56)|0); //@line 146 "ldo.c"
      var $7=HEAP32[(($openupval)>>2)]; //@line 146 "ldo.c"
      $up=$7; //@line 146 "ldo.c"
      label = 3; break; //@line 146 "ldo.c"
    case 3: 
      var $8=$up; //@line 146 "ldo.c"
      var $cmp=(($8)|0)!=0; //@line 146 "ldo.c"
      if ($cmp) { label = 4; break; } else { label = 6; break; } //@line 146 "ldo.c"
    case 4: 
      var $9=$up; //@line 147 "ldo.c"
      var $uv=$9; //@line 147 "ldo.c"
      var $v=(($uv+8)|0); //@line 147 "ldo.c"
      var $10=HEAP32[(($v)>>2)]; //@line 147 "ldo.c"
      var $11=$oldstack_addr; //@line 147 "ldo.c"
      var $sub_ptr_lhs_cast2=$10; //@line 147 "ldo.c"
      var $sub_ptr_rhs_cast3=$11; //@line 147 "ldo.c"
      var $sub_ptr_sub4=((($sub_ptr_lhs_cast2)-($sub_ptr_rhs_cast3))|0); //@line 147 "ldo.c"
      var $sub_ptr_div5=((((($sub_ptr_sub4)|0))/(12))&-1); //@line 147 "ldo.c"
      var $12=$L_addr; //@line 147 "ldo.c"
      var $stack6=(($12+28)|0); //@line 147 "ldo.c"
      var $13=HEAP32[(($stack6)>>2)]; //@line 147 "ldo.c"
      var $add_ptr7=(($13+((($sub_ptr_div5)*(12))&-1))|0); //@line 147 "ldo.c"
      var $14=$up; //@line 147 "ldo.c"
      var $uv8=$14; //@line 147 "ldo.c"
      var $v9=(($uv8+8)|0); //@line 147 "ldo.c"
      HEAP32[(($v9)>>2)]=$add_ptr7; //@line 147 "ldo.c"
      label = 5; break; //@line 147 "ldo.c"
    case 5: 
      var $15=$up; //@line 146 "ldo.c"
      var $gch=$15; //@line 146 "ldo.c"
      var $next=(($gch)|0); //@line 146 "ldo.c"
      var $16=HEAP32[(($next)>>2)]; //@line 146 "ldo.c"
      $up=$16; //@line 146 "ldo.c"
      label = 3; break; //@line 146 "ldo.c"
    case 6: 
      var $17=$L_addr; //@line 148 "ldo.c"
      var $ci10=(($17+16)|0); //@line 148 "ldo.c"
      var $18=HEAP32[(($ci10)>>2)]; //@line 148 "ldo.c"
      $ci=$18; //@line 148 "ldo.c"
      label = 7; break; //@line 148 "ldo.c"
    case 7: 
      var $19=$ci; //@line 148 "ldo.c"
      var $cmp12=(($19)|0)!=0; //@line 148 "ldo.c"
      if ($cmp12) { label = 8; break; } else { label = 12; break; } //@line 148 "ldo.c"
    case 8: 
      var $20=$ci; //@line 149 "ldo.c"
      var $top14=(($20+4)|0); //@line 149 "ldo.c"
      var $21=HEAP32[(($top14)>>2)]; //@line 149 "ldo.c"
      var $22=$oldstack_addr; //@line 149 "ldo.c"
      var $sub_ptr_lhs_cast15=$21; //@line 149 "ldo.c"
      var $sub_ptr_rhs_cast16=$22; //@line 149 "ldo.c"
      var $sub_ptr_sub17=((($sub_ptr_lhs_cast15)-($sub_ptr_rhs_cast16))|0); //@line 149 "ldo.c"
      var $sub_ptr_div18=((((($sub_ptr_sub17)|0))/(12))&-1); //@line 149 "ldo.c"
      var $23=$L_addr; //@line 149 "ldo.c"
      var $stack19=(($23+28)|0); //@line 149 "ldo.c"
      var $24=HEAP32[(($stack19)>>2)]; //@line 149 "ldo.c"
      var $add_ptr20=(($24+((($sub_ptr_div18)*(12))&-1))|0); //@line 149 "ldo.c"
      var $25=$ci; //@line 149 "ldo.c"
      var $top21=(($25+4)|0); //@line 149 "ldo.c"
      HEAP32[(($top21)>>2)]=$add_ptr20; //@line 149 "ldo.c"
      var $26=$ci; //@line 150 "ldo.c"
      var $func=(($26)|0); //@line 150 "ldo.c"
      var $27=HEAP32[(($func)>>2)]; //@line 150 "ldo.c"
      var $28=$oldstack_addr; //@line 150 "ldo.c"
      var $sub_ptr_lhs_cast22=$27; //@line 150 "ldo.c"
      var $sub_ptr_rhs_cast23=$28; //@line 150 "ldo.c"
      var $sub_ptr_sub24=((($sub_ptr_lhs_cast22)-($sub_ptr_rhs_cast23))|0); //@line 150 "ldo.c"
      var $sub_ptr_div25=((((($sub_ptr_sub24)|0))/(12))&-1); //@line 150 "ldo.c"
      var $29=$L_addr; //@line 150 "ldo.c"
      var $stack26=(($29+28)|0); //@line 150 "ldo.c"
      var $30=HEAP32[(($stack26)>>2)]; //@line 150 "ldo.c"
      var $add_ptr27=(($30+((($sub_ptr_div25)*(12))&-1))|0); //@line 150 "ldo.c"
      var $31=$ci; //@line 150 "ldo.c"
      var $func28=(($31)|0); //@line 150 "ldo.c"
      HEAP32[(($func28)>>2)]=$add_ptr27; //@line 150 "ldo.c"
      var $32=$ci; //@line 151 "ldo.c"
      var $callstatus=(($32+18)|0); //@line 151 "ldo.c"
      var $33=HEAP8[($callstatus)]; //@line 151 "ldo.c"
      var $conv=(($33)&255); //@line 151 "ldo.c"
      var $and=$conv & 1; //@line 151 "ldo.c"
      var $tobool=(($and)|0)!=0; //@line 151 "ldo.c"
      if ($tobool) { label = 9; break; } else { label = 10; break; } //@line 151 "ldo.c"
    case 9: 
      var $34=$ci; //@line 152 "ldo.c"
      var $u=(($34+24)|0); //@line 152 "ldo.c"
      var $l=$u; //@line 152 "ldo.c"
      var $base=(($l)|0); //@line 152 "ldo.c"
      var $35=HEAP32[(($base)>>2)]; //@line 152 "ldo.c"
      var $36=$oldstack_addr; //@line 152 "ldo.c"
      var $sub_ptr_lhs_cast29=$35; //@line 152 "ldo.c"
      var $sub_ptr_rhs_cast30=$36; //@line 152 "ldo.c"
      var $sub_ptr_sub31=((($sub_ptr_lhs_cast29)-($sub_ptr_rhs_cast30))|0); //@line 152 "ldo.c"
      var $sub_ptr_div32=((((($sub_ptr_sub31)|0))/(12))&-1); //@line 152 "ldo.c"
      var $37=$L_addr; //@line 152 "ldo.c"
      var $stack33=(($37+28)|0); //@line 152 "ldo.c"
      var $38=HEAP32[(($stack33)>>2)]; //@line 152 "ldo.c"
      var $add_ptr34=(($38+((($sub_ptr_div32)*(12))&-1))|0); //@line 152 "ldo.c"
      var $39=$ci; //@line 152 "ldo.c"
      var $u35=(($39+24)|0); //@line 152 "ldo.c"
      var $l36=$u35; //@line 152 "ldo.c"
      var $base37=(($l36)|0); //@line 152 "ldo.c"
      HEAP32[(($base37)>>2)]=$add_ptr34; //@line 152 "ldo.c"
      label = 10; break; //@line 152 "ldo.c"
    case 10: 
      label = 11; break; //@line 153 "ldo.c"
    case 11: 
      var $40=$ci; //@line 148 "ldo.c"
      var $previous=(($40+8)|0); //@line 148 "ldo.c"
      var $41=HEAP32[(($previous)>>2)]; //@line 148 "ldo.c"
      $ci=$41; //@line 148 "ldo.c"
      label = 7; break; //@line 148 "ldo.c"
    case 12: 

      return; //@line 154 "ldo.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL12correctstackP9lua_StateP10lua_TValue["X"]=1;

function __ZL10stackinuseP9lua_State($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $ci;
      var $lim;
      $L_addr=$L;
      var $0=$L_addr; //@line 196 "ldo.c"
      var $top=(($0+8)|0); //@line 196 "ldo.c"
      var $1=HEAP32[(($top)>>2)]; //@line 196 "ldo.c"
      $lim=$1; //@line 196 "ldo.c"
      var $2=$L_addr; //@line 197 "ldo.c"
      var $ci1=(($2+16)|0); //@line 197 "ldo.c"
      var $3=HEAP32[(($ci1)>>2)]; //@line 197 "ldo.c"
      $ci=$3; //@line 197 "ldo.c"
      label = 3; break; //@line 197 "ldo.c"
    case 3: 
      var $4=$ci; //@line 197 "ldo.c"
      var $cmp=(($4)|0)!=0; //@line 197 "ldo.c"
      if ($cmp) { label = 4; break; } else { label = 8; break; } //@line 197 "ldo.c"
    case 4: 
      var $5=$lim; //@line 199 "ldo.c"
      var $6=$ci; //@line 199 "ldo.c"
      var $top2=(($6+4)|0); //@line 199 "ldo.c"
      var $7=HEAP32[(($top2)>>2)]; //@line 199 "ldo.c"
      var $cmp3=(($5)>>>0) < (($7)>>>0); //@line 199 "ldo.c"
      if ($cmp3) { label = 5; break; } else { label = 6; break; } //@line 199 "ldo.c"
    case 5: 
      var $8=$ci; //@line 199 "ldo.c"
      var $top4=(($8+4)|0); //@line 199 "ldo.c"
      var $9=HEAP32[(($top4)>>2)]; //@line 199 "ldo.c"
      $lim=$9; //@line 199 "ldo.c"
      label = 6; break; //@line 199 "ldo.c"
    case 6: 
      label = 7; break; //@line 200 "ldo.c"
    case 7: 
      var $10=$ci; //@line 197 "ldo.c"
      var $previous=(($10+8)|0); //@line 197 "ldo.c"
      var $11=HEAP32[(($previous)>>2)]; //@line 197 "ldo.c"
      $ci=$11; //@line 197 "ldo.c"
      label = 3; break; //@line 197 "ldo.c"
    case 8: 
      var $12=$lim; //@line 201 "ldo.c"
      var $13=$L_addr; //@line 201 "ldo.c"
      var $stack=(($13+28)|0); //@line 201 "ldo.c"
      var $14=HEAP32[(($stack)>>2)]; //@line 201 "ldo.c"
      var $sub_ptr_lhs_cast=$12; //@line 201 "ldo.c"
      var $sub_ptr_rhs_cast=$14; //@line 201 "ldo.c"
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 201 "ldo.c"
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(12))&-1); //@line 201 "ldo.c"
      var $add=((($sub_ptr_div)+(1))|0); //@line 201 "ldo.c"

      return $add; //@line 201 "ldo.c"
    default: assert(0, "bad label: " + label);
  }

}


function __Z16luaD_shrinkstackP9lua_State($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $inuse;
      var $goodsize;
      $L_addr=$L;
      var $0=$L_addr; //@line 206 "ldo.c"
      var $call=__ZL10stackinuseP9lua_State($0); //@line 206 "ldo.c"
      $inuse=$call; //@line 206 "ldo.c"
      var $1=$inuse; //@line 207 "ldo.c"
      var $2=$inuse; //@line 207 "ldo.c"
      var $div=((((($2)|0))/(8))&-1); //@line 207 "ldo.c"
      var $add=((($1)+($div))|0); //@line 207 "ldo.c"
      var $add1=((($add)+(10))|0); //@line 207 "ldo.c"
      $goodsize=$add1; //@line 207 "ldo.c"
      var $3=$goodsize; //@line 208 "ldo.c"
      var $cmp=(($3)|0) > 1000000; //@line 208 "ldo.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 208 "ldo.c"
    case 3: 
      $goodsize=1000000; //@line 208 "ldo.c"
      label = 4; break; //@line 208 "ldo.c"
    case 4: 
      var $4=$inuse; //@line 209 "ldo.c"
      var $cmp2=(($4)|0) > 1000000; //@line 209 "ldo.c"
      if ($cmp2) { label = 6; break; } else { label = 5; break; } //@line 209 "ldo.c"
    case 5: 
      var $5=$goodsize; //@line 209 "ldo.c"
      var $6=$L_addr; //@line 209 "ldo.c"
      var $stacksize=(($6+32)|0); //@line 209 "ldo.c"
      var $7=HEAP32[(($stacksize)>>2)]; //@line 209 "ldo.c"
      var $cmp3=(($5)|0) >= (($7)|0); //@line 209 "ldo.c"
      if ($cmp3) { label = 6; break; } else { label = 7; break; } //@line 209 "ldo.c"
    case 6: 
      label = 8; break; //@line 211 "ldo.c"
    case 7: 
      var $8=$L_addr; //@line 213 "ldo.c"
      var $9=$goodsize; //@line 213 "ldo.c"
      __Z17luaD_reallocstackP9lua_Statei($8, $9); //@line 213 "ldo.c"
      label = 8; break;
    case 8: 

      return; //@line 214 "ldo.c"
    default: assert(0, "bad label: " + label);
  }

}


function __Z9luaD_hookP9lua_Stateii($L, $event, $line) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 100)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $event_addr;
      var $line_addr;
      var $hook;
      var $ci;
      var $top;
      var $ci_top;
      var $ar=__stackBase__;
      $L_addr=$L;
      $event_addr=$event;
      $line_addr=$line;
      var $0=$L_addr; //@line 218 "ldo.c"
      var $hook1=(($0+52)|0); //@line 218 "ldo.c"
      var $1=HEAP32[(($hook1)>>2)]; //@line 218 "ldo.c"
      $hook=$1; //@line 218 "ldo.c"
      var $2=$hook; //@line 219 "ldo.c"
      var $tobool=(($2)|0)!=0; //@line 219 "ldo.c"
      if ($tobool) { label = 3; break; } else { label = 8; break; } //@line 219 "ldo.c"
    case 3: 
      var $3=$L_addr; //@line 219 "ldo.c"
      var $allowhook=(($3+41)|0); //@line 219 "ldo.c"
      var $4=HEAP8[($allowhook)]; //@line 219 "ldo.c"
      var $tobool2=(($4 << 24) >> 24)!=0; //@line 219 "ldo.c"
      if ($tobool2) { label = 4; break; } else { label = 8; break; } //@line 219 "ldo.c"
    case 4: 
      var $5=$L_addr; //@line 220 "ldo.c"
      var $ci3=(($5+16)|0); //@line 220 "ldo.c"
      var $6=HEAP32[(($ci3)>>2)]; //@line 220 "ldo.c"
      $ci=$6; //@line 220 "ldo.c"
      var $7=$L_addr; //@line 221 "ldo.c"
      var $top4=(($7+8)|0); //@line 221 "ldo.c"
      var $8=HEAP32[(($top4)>>2)]; //@line 221 "ldo.c"
      var $9=$8; //@line 221 "ldo.c"
      var $10=$L_addr; //@line 221 "ldo.c"
      var $stack=(($10+28)|0); //@line 221 "ldo.c"
      var $11=HEAP32[(($stack)>>2)]; //@line 221 "ldo.c"
      var $12=$11; //@line 221 "ldo.c"
      var $sub_ptr_lhs_cast=$9; //@line 221 "ldo.c"
      var $sub_ptr_rhs_cast=$12; //@line 221 "ldo.c"
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 221 "ldo.c"
      $top=$sub_ptr_sub; //@line 221 "ldo.c"
      var $13=$ci; //@line 222 "ldo.c"
      var $top5=(($13+4)|0); //@line 222 "ldo.c"
      var $14=HEAP32[(($top5)>>2)]; //@line 222 "ldo.c"
      var $15=$14; //@line 222 "ldo.c"
      var $16=$L_addr; //@line 222 "ldo.c"
      var $stack6=(($16+28)|0); //@line 222 "ldo.c"
      var $17=HEAP32[(($stack6)>>2)]; //@line 222 "ldo.c"
      var $18=$17; //@line 222 "ldo.c"
      var $sub_ptr_lhs_cast7=$15; //@line 222 "ldo.c"
      var $sub_ptr_rhs_cast8=$18; //@line 222 "ldo.c"
      var $sub_ptr_sub9=((($sub_ptr_lhs_cast7)-($sub_ptr_rhs_cast8))|0); //@line 222 "ldo.c"
      $ci_top=$sub_ptr_sub9; //@line 222 "ldo.c"
      var $19=$event_addr; //@line 224 "ldo.c"
      var $event10=(($ar)|0); //@line 224 "ldo.c"
      HEAP32[(($event10)>>2)]=$19; //@line 224 "ldo.c"
      var $20=$line_addr; //@line 225 "ldo.c"
      var $currentline=(($ar+20)|0); //@line 225 "ldo.c"
      HEAP32[(($currentline)>>2)]=$20; //@line 225 "ldo.c"
      var $21=$ci; //@line 226 "ldo.c"
      var $i_ci=(($ar+96)|0); //@line 226 "ldo.c"
      HEAP32[(($i_ci)>>2)]=$21; //@line 226 "ldo.c"
      var $22=$L_addr; //@line 227 "ldo.c"
      var $stack_last=(($22+24)|0); //@line 227 "ldo.c"
      var $23=HEAP32[(($stack_last)>>2)]; //@line 227 "ldo.c"
      var $24=$L_addr; //@line 227 "ldo.c"
      var $top11=(($24+8)|0); //@line 227 "ldo.c"
      var $25=HEAP32[(($top11)>>2)]; //@line 227 "ldo.c"
      var $sub_ptr_lhs_cast12=$23; //@line 227 "ldo.c"
      var $sub_ptr_rhs_cast13=$25; //@line 227 "ldo.c"
      var $sub_ptr_sub14=((($sub_ptr_lhs_cast12)-($sub_ptr_rhs_cast13))|0); //@line 227 "ldo.c"
      var $sub_ptr_div=((((($sub_ptr_sub14)|0))/(12))&-1); //@line 227 "ldo.c"
      var $cmp=(($sub_ptr_div)|0) <= 20; //@line 227 "ldo.c"
      if ($cmp) { label = 5; break; } else { label = 6; break; } //@line 227 "ldo.c"
    case 5: 
      var $26=$L_addr; //@line 227 "ldo.c"
      __Z14luaD_growstackP9lua_Statei($26, 20); //@line 227 "ldo.c"
      label = 7; break; //@line 227 "ldo.c"
    case 6: 
      label = 7; break;
    case 7: 
      var $27=$L_addr; //@line 228 "ldo.c"
      var $top16=(($27+8)|0); //@line 228 "ldo.c"
      var $28=HEAP32[(($top16)>>2)]; //@line 228 "ldo.c"
      var $add_ptr=(($28+240)|0); //@line 228 "ldo.c"
      var $29=$ci; //@line 228 "ldo.c"
      var $top17=(($29+4)|0); //@line 228 "ldo.c"
      HEAP32[(($top17)>>2)]=$add_ptr; //@line 228 "ldo.c"
      var $30=$L_addr; //@line 230 "ldo.c"
      var $allowhook18=(($30+41)|0); //@line 230 "ldo.c"
      HEAP8[($allowhook18)]=0; //@line 230 "ldo.c"
      var $31=$ci; //@line 231 "ldo.c"
      var $callstatus=(($31+18)|0); //@line 231 "ldo.c"
      var $32=HEAP8[($callstatus)]; //@line 231 "ldo.c"
      var $conv=(($32)&255); //@line 231 "ldo.c"
      var $or=$conv | 2; //@line 231 "ldo.c"
      var $conv19=(($or) & 255); //@line 231 "ldo.c"
      HEAP8[($callstatus)]=$conv19; //@line 231 "ldo.c"
      var $33=$hook; //@line 233 "ldo.c"
      var $34=$L_addr; //@line 233 "ldo.c"
      FUNCTION_TABLE[$33]($34, $ar); //@line 233 "ldo.c"
      var $35=$L_addr; //@line 236 "ldo.c"
      var $allowhook20=(($35+41)|0); //@line 236 "ldo.c"
      HEAP8[($allowhook20)]=1; //@line 236 "ldo.c"
      var $36=$L_addr; //@line 237 "ldo.c"
      var $stack21=(($36+28)|0); //@line 237 "ldo.c"
      var $37=HEAP32[(($stack21)>>2)]; //@line 237 "ldo.c"
      var $38=$37; //@line 237 "ldo.c"
      var $39=$ci_top; //@line 237 "ldo.c"
      var $add_ptr22=(($38+$39)|0); //@line 237 "ldo.c"
      var $40=$add_ptr22; //@line 237 "ldo.c"
      var $41=$ci; //@line 237 "ldo.c"
      var $top23=(($41+4)|0); //@line 237 "ldo.c"
      HEAP32[(($top23)>>2)]=$40; //@line 237 "ldo.c"
      var $42=$L_addr; //@line 238 "ldo.c"
      var $stack24=(($42+28)|0); //@line 238 "ldo.c"
      var $43=HEAP32[(($stack24)>>2)]; //@line 238 "ldo.c"
      var $44=$43; //@line 238 "ldo.c"
      var $45=$top; //@line 238 "ldo.c"
      var $add_ptr25=(($44+$45)|0); //@line 238 "ldo.c"
      var $46=$add_ptr25; //@line 238 "ldo.c"
      var $47=$L_addr; //@line 238 "ldo.c"
      var $top26=(($47+8)|0); //@line 238 "ldo.c"
      HEAP32[(($top26)>>2)]=$46; //@line 238 "ldo.c"
      var $48=$ci; //@line 239 "ldo.c"
      var $callstatus27=(($48+18)|0); //@line 239 "ldo.c"
      var $49=HEAP8[($callstatus27)]; //@line 239 "ldo.c"
      var $conv28=(($49)&255); //@line 239 "ldo.c"
      var $and=$conv28 & -3; //@line 239 "ldo.c"
      var $conv29=(($and) & 255); //@line 239 "ldo.c"
      HEAP8[($callstatus27)]=$conv29; //@line 239 "ldo.c"
      label = 8; break; //@line 240 "ldo.c"
    case 8: 
      STACKTOP = __stackBase__;
      return; //@line 241 "ldo.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z9luaD_hookP9lua_Stateii["X"]=1;

function __Z12luaD_precallP9lua_StateP10lua_TValuei($L, $func, $nresults) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $func_addr;
      var $nresults_addr;
      var $f;
      var $ci;
      var $n;
      var $funcr;
      var $base;
      var $p;
      $L_addr=$L;
      $func_addr=$func;
      $nresults_addr=$nresults;
      var $0=$func_addr; //@line 299 "ldo.c"
      var $1=$0; //@line 299 "ldo.c"
      var $2=$L_addr; //@line 299 "ldo.c"
      var $stack=(($2+28)|0); //@line 299 "ldo.c"
      var $3=HEAP32[(($stack)>>2)]; //@line 299 "ldo.c"
      var $4=$3; //@line 299 "ldo.c"
      var $sub_ptr_lhs_cast=$1; //@line 299 "ldo.c"
      var $sub_ptr_rhs_cast=$4; //@line 299 "ldo.c"
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 299 "ldo.c"
      $funcr=$sub_ptr_sub; //@line 299 "ldo.c"
      var $5=$func_addr; //@line 300 "ldo.c"
      var $tt_=(($5+8)|0); //@line 300 "ldo.c"
      var $6=HEAP32[(($tt_)>>2)]; //@line 300 "ldo.c"
      var $and=$6 & 63; //@line 300 "ldo.c"
      if ((($and)|0)==22) {
        label = 3; break;
      }
      else if ((($and)|0)==38) {
        label = 4; break;
      }
      else if ((($and)|0)==6) {
        label = 14; break;
      }
      else {
      label = 30; break;
      }
      
    case 3: 
      var $7=$func_addr; //@line 302 "ldo.c"
      var $value_=(($7)|0); //@line 302 "ldo.c"
      var $f1=$value_; //@line 302 "ldo.c"
      var $8=HEAP32[(($f1)>>2)]; //@line 302 "ldo.c"
      $f=$8; //@line 302 "ldo.c"
      label = 5; break; //@line 303 "ldo.c"
    case 4: 
      var $9=$func_addr; //@line 305 "ldo.c"
      var $value_3=(($9)|0); //@line 305 "ldo.c"
      var $gc=$value_3; //@line 305 "ldo.c"
      var $10=HEAP32[(($gc)>>2)]; //@line 305 "ldo.c"
      var $cl=$10; //@line 305 "ldo.c"
      var $c=$cl; //@line 305 "ldo.c"
      var $f4=(($c+12)|0); //@line 305 "ldo.c"
      var $11=HEAP32[(($f4)>>2)]; //@line 305 "ldo.c"
      $f=$11; //@line 305 "ldo.c"
      label = 5; break; //@line 305 "ldo.c"
    case 5: 
      var $12=$L_addr; //@line 307 "ldo.c"
      var $stack_last=(($12+24)|0); //@line 307 "ldo.c"
      var $13=HEAP32[(($stack_last)>>2)]; //@line 307 "ldo.c"
      var $14=$L_addr; //@line 307 "ldo.c"
      var $top=(($14+8)|0); //@line 307 "ldo.c"
      var $15=HEAP32[(($top)>>2)]; //@line 307 "ldo.c"
      var $sub_ptr_lhs_cast5=$13; //@line 307 "ldo.c"
      var $sub_ptr_rhs_cast6=$15; //@line 307 "ldo.c"
      var $sub_ptr_sub7=((($sub_ptr_lhs_cast5)-($sub_ptr_rhs_cast6))|0); //@line 307 "ldo.c"
      var $sub_ptr_div=((((($sub_ptr_sub7)|0))/(12))&-1); //@line 307 "ldo.c"
      var $cmp=(($sub_ptr_div)|0) <= 20; //@line 307 "ldo.c"
      if ($cmp) { label = 6; break; } else { label = 7; break; } //@line 307 "ldo.c"
    case 6: 
      var $16=$L_addr; //@line 307 "ldo.c"
      __Z14luaD_growstackP9lua_Statei($16, 20); //@line 307 "ldo.c"
      label = 8; break; //@line 307 "ldo.c"
    case 7: 
      label = 8; break;
    case 8: 
      var $17=$L_addr; //@line 308 "ldo.c"
      var $ci8=(($17+16)|0); //@line 308 "ldo.c"
      var $18=HEAP32[(($ci8)>>2)]; //@line 308 "ldo.c"
      var $next=(($18+12)|0); //@line 308 "ldo.c"
      var $19=HEAP32[(($next)>>2)]; //@line 308 "ldo.c"
      var $tobool=(($19)|0)!=0; //@line 308 "ldo.c"
      if ($tobool) { label = 9; break; } else { label = 10; break; } //@line 308 "ldo.c"
    case 9: 
      var $20=$L_addr; //@line 308 "ldo.c"
      var $ci9=(($20+16)|0); //@line 308 "ldo.c"
      var $21=HEAP32[(($ci9)>>2)]; //@line 308 "ldo.c"
      var $next10=(($21+12)|0); //@line 308 "ldo.c"
      var $22=HEAP32[(($next10)>>2)]; //@line 308 "ldo.c"
      var $cond = $22;label = 11; break; //@line 308 "ldo.c"
    case 10: 
      var $23=$L_addr; //@line 308 "ldo.c"
      var $call=__Z13luaE_extendCIP9lua_State($23); //@line 308 "ldo.c"
      var $cond = $call;label = 11; break; //@line 308 "ldo.c"
    case 11: 
      var $cond; //@line 308 "ldo.c"
      var $24=$L_addr; //@line 308 "ldo.c"
      var $ci11=(($24+16)|0); //@line 308 "ldo.c"
      HEAP32[(($ci11)>>2)]=$cond; //@line 308 "ldo.c"
      $ci=$cond; //@line 308 "ldo.c"
      var $25=$nresults_addr; //@line 309 "ldo.c"
      var $conv=(($25) & 65535); //@line 309 "ldo.c"
      var $26=$ci; //@line 309 "ldo.c"
      var $nresults12=(($26+16)|0); //@line 309 "ldo.c"
      HEAP16[(($nresults12)>>1)]=$conv; //@line 309 "ldo.c"
      var $27=$L_addr; //@line 310 "ldo.c"
      var $stack13=(($27+28)|0); //@line 310 "ldo.c"
      var $28=HEAP32[(($stack13)>>2)]; //@line 310 "ldo.c"
      var $29=$28; //@line 310 "ldo.c"
      var $30=$funcr; //@line 310 "ldo.c"
      var $add_ptr=(($29+$30)|0); //@line 310 "ldo.c"
      var $31=$add_ptr; //@line 310 "ldo.c"
      var $32=$ci; //@line 310 "ldo.c"
      var $func14=(($32)|0); //@line 310 "ldo.c"
      HEAP32[(($func14)>>2)]=$31; //@line 310 "ldo.c"
      var $33=$L_addr; //@line 311 "ldo.c"
      var $top15=(($33+8)|0); //@line 311 "ldo.c"
      var $34=HEAP32[(($top15)>>2)]; //@line 311 "ldo.c"
      var $add_ptr16=(($34+240)|0); //@line 311 "ldo.c"
      var $35=$ci; //@line 311 "ldo.c"
      var $top17=(($35+4)|0); //@line 311 "ldo.c"
      HEAP32[(($top17)>>2)]=$add_ptr16; //@line 311 "ldo.c"
      var $36=$ci; //@line 313 "ldo.c"
      var $callstatus=(($36+18)|0); //@line 313 "ldo.c"
      HEAP8[($callstatus)]=0; //@line 313 "ldo.c"
      var $37=$L_addr; //@line 314 "ldo.c"
      var $hookmask=(($37+40)|0); //@line 314 "ldo.c"
      var $38=HEAP8[($hookmask)]; //@line 314 "ldo.c"
      var $conv18=(($38)&255); //@line 314 "ldo.c"
      var $and19=$conv18 & 1; //@line 314 "ldo.c"
      var $tobool20=(($and19)|0)!=0; //@line 314 "ldo.c"
      if ($tobool20) { label = 12; break; } else { label = 13; break; } //@line 314 "ldo.c"
    case 12: 
      var $39=$L_addr; //@line 315 "ldo.c"
      __Z9luaD_hookP9lua_Stateii($39, 0, -1); //@line 315 "ldo.c"
      label = 13; break; //@line 315 "ldo.c"
    case 13: 
      var $40=$f; //@line 317 "ldo.c"
      var $41=$L_addr; //@line 317 "ldo.c"
      var $call23=FUNCTION_TABLE[$40]($41); //@line 317 "ldo.c"
      $n=$call23; //@line 317 "ldo.c"
      var $42=$L_addr; //@line 320 "ldo.c"
      var $43=$L_addr; //@line 320 "ldo.c"
      var $top24=(($43+8)|0); //@line 320 "ldo.c"
      var $44=HEAP32[(($top24)>>2)]; //@line 320 "ldo.c"
      var $45=$n; //@line 320 "ldo.c"
      var $idx_neg=(((-$45))|0); //@line 320 "ldo.c"
      var $add_ptr25=(($44+((($idx_neg)*(12))&-1))|0); //@line 320 "ldo.c"
      var $call26=__Z12luaD_poscallP9lua_StateP10lua_TValue($42, $add_ptr25); //@line 320 "ldo.c"
      $retval=1; //@line 321 "ldo.c"
      label = 31; break; //@line 321 "ldo.c"
    case 14: 
      var $46=$func_addr; //@line 325 "ldo.c"
      var $value_28=(($46)|0); //@line 325 "ldo.c"
      var $gc29=$value_28; //@line 325 "ldo.c"
      var $47=HEAP32[(($gc29)>>2)]; //@line 325 "ldo.c"
      var $cl30=$47; //@line 325 "ldo.c"
      var $l=$cl30; //@line 325 "ldo.c"
      var $p31=(($l+12)|0); //@line 325 "ldo.c"
      var $48=HEAP32[(($p31)>>2)]; //@line 325 "ldo.c"
      $p=$48; //@line 325 "ldo.c"
      var $49=$L_addr; //@line 326 "ldo.c"
      var $stack_last32=(($49+24)|0); //@line 326 "ldo.c"
      var $50=HEAP32[(($stack_last32)>>2)]; //@line 326 "ldo.c"
      var $51=$L_addr; //@line 326 "ldo.c"
      var $top33=(($51+8)|0); //@line 326 "ldo.c"
      var $52=HEAP32[(($top33)>>2)]; //@line 326 "ldo.c"
      var $sub_ptr_lhs_cast34=$50; //@line 326 "ldo.c"
      var $sub_ptr_rhs_cast35=$52; //@line 326 "ldo.c"
      var $sub_ptr_sub36=((($sub_ptr_lhs_cast34)-($sub_ptr_rhs_cast35))|0); //@line 326 "ldo.c"
      var $sub_ptr_div37=((((($sub_ptr_sub36)|0))/(12))&-1); //@line 326 "ldo.c"
      var $53=$p; //@line 326 "ldo.c"
      var $maxstacksize=(($53+78)|0); //@line 326 "ldo.c"
      var $54=HEAP8[($maxstacksize)]; //@line 326 "ldo.c"
      var $conv38=(($54)&255); //@line 326 "ldo.c"
      var $cmp39=(($sub_ptr_div37)|0) <= (($conv38)|0); //@line 326 "ldo.c"
      if ($cmp39) { label = 15; break; } else { label = 16; break; } //@line 326 "ldo.c"
    case 15: 
      var $55=$L_addr; //@line 326 "ldo.c"
      var $56=$p; //@line 326 "ldo.c"
      var $maxstacksize41=(($56+78)|0); //@line 326 "ldo.c"
      var $57=HEAP8[($maxstacksize41)]; //@line 326 "ldo.c"
      var $conv42=(($57)&255); //@line 326 "ldo.c"
      __Z14luaD_growstackP9lua_Statei($55, $conv42); //@line 326 "ldo.c"
      label = 17; break; //@line 326 "ldo.c"
    case 16: 
      label = 17; break;
    case 17: 
      var $58=$L_addr; //@line 327 "ldo.c"
      var $stack45=(($58+28)|0); //@line 327 "ldo.c"
      var $59=HEAP32[(($stack45)>>2)]; //@line 327 "ldo.c"
      var $60=$59; //@line 327 "ldo.c"
      var $61=$funcr; //@line 327 "ldo.c"
      var $add_ptr46=(($60+$61)|0); //@line 327 "ldo.c"
      var $62=$add_ptr46; //@line 327 "ldo.c"
      $func_addr=$62; //@line 327 "ldo.c"
      var $63=$L_addr; //@line 328 "ldo.c"
      var $top47=(($63+8)|0); //@line 328 "ldo.c"
      var $64=HEAP32[(($top47)>>2)]; //@line 328 "ldo.c"
      var $65=$func_addr; //@line 328 "ldo.c"
      var $sub_ptr_lhs_cast48=$64; //@line 328 "ldo.c"
      var $sub_ptr_rhs_cast49=$65; //@line 328 "ldo.c"
      var $sub_ptr_sub50=((($sub_ptr_lhs_cast48)-($sub_ptr_rhs_cast49))|0); //@line 328 "ldo.c"
      var $sub_ptr_div51=((((($sub_ptr_sub50)|0))/(12))&-1); //@line 328 "ldo.c"
      var $sub=((($sub_ptr_div51)-(1))|0); //@line 328 "ldo.c"
      $n=$sub; //@line 328 "ldo.c"
      label = 18; break; //@line 329 "ldo.c"
    case 18: 
      var $66=$n; //@line 329 "ldo.c"
      var $67=$p; //@line 329 "ldo.c"
      var $numparams=(($67+76)|0); //@line 329 "ldo.c"
      var $68=HEAP8[($numparams)]; //@line 329 "ldo.c"
      var $conv52=(($68)&255); //@line 329 "ldo.c"
      var $cmp53=(($66)|0) < (($conv52)|0); //@line 329 "ldo.c"
      if ($cmp53) { label = 19; break; } else { label = 21; break; } //@line 329 "ldo.c"
    case 19: 
      var $69=$L_addr; //@line 330 "ldo.c"
      var $top54=(($69+8)|0); //@line 330 "ldo.c"
      var $70=HEAP32[(($top54)>>2)]; //@line 330 "ldo.c"
      var $incdec_ptr=(($70+12)|0); //@line 330 "ldo.c"
      HEAP32[(($top54)>>2)]=$incdec_ptr; //@line 330 "ldo.c"
      var $tt_55=(($70+8)|0); //@line 330 "ldo.c"
      HEAP32[(($tt_55)>>2)]=0; //@line 330 "ldo.c"
      label = 20; break; //@line 330 "ldo.c"
    case 20: 
      var $71=$n; //@line 329 "ldo.c"
      var $inc=((($71)+(1))|0); //@line 329 "ldo.c"
      $n=$inc; //@line 329 "ldo.c"
      label = 18; break; //@line 329 "ldo.c"
    case 21: 
      var $72=$p; //@line 331 "ldo.c"
      var $is_vararg=(($72+77)|0); //@line 331 "ldo.c"
      var $73=HEAP8[($is_vararg)]; //@line 331 "ldo.c"
      var $tobool56=(($73 << 24) >> 24)!=0; //@line 331 "ldo.c"
      if ($tobool56) { label = 23; break; } else { label = 22; break; } //@line 331 "ldo.c"
    case 22: 
      var $74=$func_addr; //@line 331 "ldo.c"
      var $add_ptr58=(($74+12)|0); //@line 331 "ldo.c"
      var $cond62 = $add_ptr58;label = 24; break; //@line 331 "ldo.c"
    case 23: 
      var $75=$L_addr; //@line 331 "ldo.c"
      var $76=$p; //@line 331 "ldo.c"
      var $77=$n; //@line 331 "ldo.c"
      var $call60=__ZL14adjust_varargsP9lua_StateP5Protoi($75, $76, $77); //@line 331 "ldo.c"
      var $cond62 = $call60;label = 24; break; //@line 331 "ldo.c"
    case 24: 
      var $cond62; //@line 331 "ldo.c"
      $base=$cond62; //@line 331 "ldo.c"
      var $78=$L_addr; //@line 332 "ldo.c"
      var $ci63=(($78+16)|0); //@line 332 "ldo.c"
      var $79=HEAP32[(($ci63)>>2)]; //@line 332 "ldo.c"
      var $next64=(($79+12)|0); //@line 332 "ldo.c"
      var $80=HEAP32[(($next64)>>2)]; //@line 332 "ldo.c"
      var $tobool65=(($80)|0)!=0; //@line 332 "ldo.c"
      if ($tobool65) { label = 25; break; } else { label = 26; break; } //@line 332 "ldo.c"
    case 25: 
      var $81=$L_addr; //@line 332 "ldo.c"
      var $ci67=(($81+16)|0); //@line 332 "ldo.c"
      var $82=HEAP32[(($ci67)>>2)]; //@line 332 "ldo.c"
      var $next68=(($82+12)|0); //@line 332 "ldo.c"
      var $83=HEAP32[(($next68)>>2)]; //@line 332 "ldo.c"
      var $cond72 = $83;label = 27; break; //@line 332 "ldo.c"
    case 26: 
      var $84=$L_addr; //@line 332 "ldo.c"
      var $call70=__Z13luaE_extendCIP9lua_State($84); //@line 332 "ldo.c"
      var $cond72 = $call70;label = 27; break; //@line 332 "ldo.c"
    case 27: 
      var $cond72; //@line 332 "ldo.c"
      var $85=$L_addr; //@line 332 "ldo.c"
      var $ci73=(($85+16)|0); //@line 332 "ldo.c"
      HEAP32[(($ci73)>>2)]=$cond72; //@line 332 "ldo.c"
      $ci=$cond72; //@line 332 "ldo.c"
      var $86=$nresults_addr; //@line 333 "ldo.c"
      var $conv74=(($86) & 65535); //@line 333 "ldo.c"
      var $87=$ci; //@line 333 "ldo.c"
      var $nresults75=(($87+16)|0); //@line 333 "ldo.c"
      HEAP16[(($nresults75)>>1)]=$conv74; //@line 333 "ldo.c"
      var $88=$func_addr; //@line 334 "ldo.c"
      var $89=$ci; //@line 334 "ldo.c"
      var $func76=(($89)|0); //@line 334 "ldo.c"
      HEAP32[(($func76)>>2)]=$88; //@line 334 "ldo.c"
      var $90=$base; //@line 335 "ldo.c"
      var $91=$ci; //@line 335 "ldo.c"
      var $u=(($91+24)|0); //@line 335 "ldo.c"
      var $l77=$u; //@line 335 "ldo.c"
      var $base78=(($l77)|0); //@line 335 "ldo.c"
      HEAP32[(($base78)>>2)]=$90; //@line 335 "ldo.c"
      var $92=$base; //@line 336 "ldo.c"
      var $93=$p; //@line 336 "ldo.c"
      var $maxstacksize79=(($93+78)|0); //@line 336 "ldo.c"
      var $94=HEAP8[($maxstacksize79)]; //@line 336 "ldo.c"
      var $conv80=(($94)&255); //@line 336 "ldo.c"
      var $add_ptr81=(($92+((($conv80)*(12))&-1))|0); //@line 336 "ldo.c"
      var $95=$ci; //@line 336 "ldo.c"
      var $top82=(($95+4)|0); //@line 336 "ldo.c"
      HEAP32[(($top82)>>2)]=$add_ptr81; //@line 336 "ldo.c"
      var $96=$p; //@line 338 "ldo.c"
      var $code=(($96+12)|0); //@line 338 "ldo.c"
      var $97=HEAP32[(($code)>>2)]; //@line 338 "ldo.c"
      var $98=$ci; //@line 338 "ldo.c"
      var $u83=(($98+24)|0); //@line 338 "ldo.c"
      var $l84=$u83; //@line 338 "ldo.c"
      var $savedpc=(($l84+4)|0); //@line 338 "ldo.c"
      HEAP32[(($savedpc)>>2)]=$97; //@line 338 "ldo.c"
      var $99=$ci; //@line 339 "ldo.c"
      var $callstatus85=(($99+18)|0); //@line 339 "ldo.c"
      HEAP8[($callstatus85)]=1; //@line 339 "ldo.c"
      var $100=$ci; //@line 340 "ldo.c"
      var $top86=(($100+4)|0); //@line 340 "ldo.c"
      var $101=HEAP32[(($top86)>>2)]; //@line 340 "ldo.c"
      var $102=$L_addr; //@line 340 "ldo.c"
      var $top87=(($102+8)|0); //@line 340 "ldo.c"
      HEAP32[(($top87)>>2)]=$101; //@line 340 "ldo.c"
      var $103=$L_addr; //@line 341 "ldo.c"
      var $hookmask88=(($103+40)|0); //@line 341 "ldo.c"
      var $104=HEAP8[($hookmask88)]; //@line 341 "ldo.c"
      var $conv89=(($104)&255); //@line 341 "ldo.c"
      var $and90=$conv89 & 1; //@line 341 "ldo.c"
      var $tobool91=(($and90)|0)!=0; //@line 341 "ldo.c"
      if ($tobool91) { label = 28; break; } else { label = 29; break; } //@line 341 "ldo.c"
    case 28: 
      var $105=$L_addr; //@line 342 "ldo.c"
      var $106=$ci; //@line 342 "ldo.c"
      __ZL8callhookP9lua_StateP8CallInfo($105, $106); //@line 342 "ldo.c"
      label = 29; break; //@line 342 "ldo.c"
    case 29: 
      $retval=0; //@line 343 "ldo.c"
      label = 31; break; //@line 343 "ldo.c"
    case 30: 
      var $107=$L_addr; //@line 346 "ldo.c"
      var $108=$func_addr; //@line 346 "ldo.c"
      var $call94=__ZL9tryfuncTMP9lua_StateP10lua_TValue($107, $108); //@line 346 "ldo.c"
      $func_addr=$call94; //@line 346 "ldo.c"
      var $109=$L_addr; //@line 347 "ldo.c"
      var $110=$func_addr; //@line 347 "ldo.c"
      var $111=$nresults_addr; //@line 347 "ldo.c"
      var $call95=__Z12luaD_precallP9lua_StateP10lua_TValuei($109, $110, $111); //@line 347 "ldo.c"
      $retval=$call95; //@line 347 "ldo.c"
      label = 31; break; //@line 347 "ldo.c"
    case 31: 
      var $112=$retval; //@line 350 "ldo.c"

      return $112; //@line 350 "ldo.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z12luaD_precallP9lua_StateP10lua_TValuei["X"]=1;

function __Z14luaD_growstackP9lua_Statei($L, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $n_addr;
      var $size;
      var $needed;
      var $newsize;
      $L_addr=$L;
      $n_addr=$n;
      var $0=$L_addr; //@line 176 "ldo.c"
      var $stacksize=(($0+32)|0); //@line 176 "ldo.c"
      var $1=HEAP32[(($stacksize)>>2)]; //@line 176 "ldo.c"
      $size=$1; //@line 176 "ldo.c"
      var $2=$size; //@line 177 "ldo.c"
      var $cmp=(($2)|0) > 1000000; //@line 177 "ldo.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 177 "ldo.c"
    case 3: 
      var $3=$L_addr; //@line 178 "ldo.c"
      __Z10luaD_throwP9lua_Statei($3, 6); //@line 178 "ldo.c"
      throw "Reached an unreachable!" //@line 178 "ldo.c"
    case 4: 
      var $4=$L_addr; //@line 180 "ldo.c"
      var $top=(($4+8)|0); //@line 180 "ldo.c"
      var $5=HEAP32[(($top)>>2)]; //@line 180 "ldo.c"
      var $6=$L_addr; //@line 180 "ldo.c"
      var $stack=(($6+28)|0); //@line 180 "ldo.c"
      var $7=HEAP32[(($stack)>>2)]; //@line 180 "ldo.c"
      var $sub_ptr_lhs_cast=$5; //@line 180 "ldo.c"
      var $sub_ptr_rhs_cast=$7; //@line 180 "ldo.c"
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 180 "ldo.c"
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(12))&-1); //@line 180 "ldo.c"
      var $8=$n_addr; //@line 180 "ldo.c"
      var $add=((($sub_ptr_div)+($8))|0); //@line 180 "ldo.c"
      var $add1=((($add)+(5))|0); //@line 180 "ldo.c"
      $needed=$add1; //@line 180 "ldo.c"
      var $9=$size; //@line 181 "ldo.c"
      var $mul=($9<<1); //@line 181 "ldo.c"
      $newsize=$mul; //@line 181 "ldo.c"
      var $10=$newsize; //@line 182 "ldo.c"
      var $cmp2=(($10)|0) > 1000000; //@line 182 "ldo.c"
      if ($cmp2) { label = 5; break; } else { label = 6; break; } //@line 182 "ldo.c"
    case 5: 
      $newsize=1000000; //@line 182 "ldo.c"
      label = 6; break; //@line 182 "ldo.c"
    case 6: 
      var $11=$newsize; //@line 183 "ldo.c"
      var $12=$needed; //@line 183 "ldo.c"
      var $cmp4=(($11)|0) < (($12)|0); //@line 183 "ldo.c"
      if ($cmp4) { label = 7; break; } else { label = 8; break; } //@line 183 "ldo.c"
    case 7: 
      var $13=$needed; //@line 183 "ldo.c"
      $newsize=$13; //@line 183 "ldo.c"
      label = 8; break; //@line 183 "ldo.c"
    case 8: 
      var $14=$newsize; //@line 184 "ldo.c"
      var $cmp7=(($14)|0) > 1000000; //@line 184 "ldo.c"
      if ($cmp7) { label = 9; break; } else { label = 10; break; } //@line 184 "ldo.c"
    case 9: 
      var $15=$L_addr; //@line 185 "ldo.c"
      __Z17luaD_reallocstackP9lua_Statei($15, 1000200); //@line 185 "ldo.c"
      var $16=$L_addr; //@line 186 "ldo.c"
      __Z13luaG_runerrorP9lua_StatePKcz($16, ((5243788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 186 "ldo.c"
      throw "Reached an unreachable!" //@line 186 "ldo.c"
    case 10: 
      var $17=$L_addr; //@line 189 "ldo.c"
      var $18=$newsize; //@line 189 "ldo.c"
      __Z17luaD_reallocstackP9lua_Statei($17, $18); //@line 189 "ldo.c"
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      STACKTOP = __stackBase__;
      return; //@line 191 "ldo.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z14luaD_growstackP9lua_Statei["X"]=1;

function __Z12luaD_poscallP9lua_StateP10lua_TValue($L, $firstResult) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $firstResult_addr;
      var $res;
      var $wanted;
      var $i;
      var $ci;
      var $fr;
      var $io2;
      var $io1;
      $L_addr=$L;
      $firstResult_addr=$firstResult;
      var $0=$L_addr; //@line 356 "ldo.c"
      var $ci1=(($0+16)|0); //@line 356 "ldo.c"
      var $1=HEAP32[(($ci1)>>2)]; //@line 356 "ldo.c"
      $ci=$1; //@line 356 "ldo.c"
      var $2=$L_addr; //@line 357 "ldo.c"
      var $hookmask=(($2+40)|0); //@line 357 "ldo.c"
      var $3=HEAP8[($hookmask)]; //@line 357 "ldo.c"
      var $conv=(($3)&255); //@line 357 "ldo.c"
      var $and=$conv & 6; //@line 357 "ldo.c"
      var $tobool=(($and)|0)!=0; //@line 357 "ldo.c"
      if ($tobool) { label = 3; break; } else { label = 6; break; } //@line 357 "ldo.c"
    case 3: 
      var $4=$L_addr; //@line 358 "ldo.c"
      var $hookmask2=(($4+40)|0); //@line 358 "ldo.c"
      var $5=HEAP8[($hookmask2)]; //@line 358 "ldo.c"
      var $conv3=(($5)&255); //@line 358 "ldo.c"
      var $and4=$conv3 & 2; //@line 358 "ldo.c"
      var $tobool5=(($and4)|0)!=0; //@line 358 "ldo.c"
      if ($tobool5) { label = 4; break; } else { label = 5; break; } //@line 358 "ldo.c"
    case 4: 
      var $6=$firstResult_addr; //@line 359 "ldo.c"
      var $7=$6; //@line 359 "ldo.c"
      var $8=$L_addr; //@line 359 "ldo.c"
      var $stack=(($8+28)|0); //@line 359 "ldo.c"
      var $9=HEAP32[(($stack)>>2)]; //@line 359 "ldo.c"
      var $10=$9; //@line 359 "ldo.c"
      var $sub_ptr_lhs_cast=$7; //@line 359 "ldo.c"
      var $sub_ptr_rhs_cast=$10; //@line 359 "ldo.c"
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 359 "ldo.c"
      $fr=$sub_ptr_sub; //@line 359 "ldo.c"
      var $11=$L_addr; //@line 360 "ldo.c"
      __Z9luaD_hookP9lua_Stateii($11, 1, -1); //@line 360 "ldo.c"
      var $12=$L_addr; //@line 361 "ldo.c"
      var $stack7=(($12+28)|0); //@line 361 "ldo.c"
      var $13=HEAP32[(($stack7)>>2)]; //@line 361 "ldo.c"
      var $14=$13; //@line 361 "ldo.c"
      var $15=$fr; //@line 361 "ldo.c"
      var $add_ptr=(($14+$15)|0); //@line 361 "ldo.c"
      var $16=$add_ptr; //@line 361 "ldo.c"
      $firstResult_addr=$16; //@line 361 "ldo.c"
      label = 5; break; //@line 362 "ldo.c"
    case 5: 
      var $17=$ci; //@line 363 "ldo.c"
      var $previous=(($17+8)|0); //@line 363 "ldo.c"
      var $18=HEAP32[(($previous)>>2)]; //@line 363 "ldo.c"
      var $u=(($18+24)|0); //@line 363 "ldo.c"
      var $l=$u; //@line 363 "ldo.c"
      var $savedpc=(($l+4)|0); //@line 363 "ldo.c"
      var $19=HEAP32[(($savedpc)>>2)]; //@line 363 "ldo.c"
      var $20=$L_addr; //@line 363 "ldo.c"
      var $oldpc=(($20+20)|0); //@line 363 "ldo.c"
      HEAP32[(($oldpc)>>2)]=$19; //@line 363 "ldo.c"
      label = 6; break; //@line 364 "ldo.c"
    case 6: 
      var $21=$ci; //@line 365 "ldo.c"
      var $func=(($21)|0); //@line 365 "ldo.c"
      var $22=HEAP32[(($func)>>2)]; //@line 365 "ldo.c"
      $res=$22; //@line 365 "ldo.c"
      var $23=$ci; //@line 366 "ldo.c"
      var $nresults=(($23+16)|0); //@line 366 "ldo.c"
      var $24=HEAP16[(($nresults)>>1)]; //@line 366 "ldo.c"
      var $conv9=(($24 << 16) >> 16); //@line 366 "ldo.c"
      $wanted=$conv9; //@line 366 "ldo.c"
      var $25=$ci; //@line 367 "ldo.c"
      var $previous10=(($25+8)|0); //@line 367 "ldo.c"
      var $26=HEAP32[(($previous10)>>2)]; //@line 367 "ldo.c"
      $ci=$26; //@line 367 "ldo.c"
      var $27=$L_addr; //@line 367 "ldo.c"
      var $ci11=(($27+16)|0); //@line 367 "ldo.c"
      HEAP32[(($ci11)>>2)]=$26; //@line 367 "ldo.c"
      var $28=$wanted; //@line 369 "ldo.c"
      $i=$28; //@line 369 "ldo.c"
      label = 7; break; //@line 369 "ldo.c"
    case 7: 
      var $29=$i; //@line 369 "ldo.c"
      var $cmp=(($29)|0)!=0; //@line 369 "ldo.c"
      if ($cmp) { label = 8; break; } else { var $33 = 0;label = 9; break; } //@line 369 "ldo.c"
    case 8: 
      var $30=$firstResult_addr; //@line 369 "ldo.c"
      var $31=$L_addr; //@line 369 "ldo.c"
      var $top=(($31+8)|0); //@line 369 "ldo.c"
      var $32=HEAP32[(($top)>>2)]; //@line 369 "ldo.c"
      var $cmp12=(($30)>>>0) < (($32)>>>0); //@line 369 "ldo.c"
      var $33 = $cmp12;label = 9; break;
    case 9: 
      var $33;
      if ($33) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $34=$firstResult_addr; //@line 370 "ldo.c"
      var $incdec_ptr=(($34+12)|0); //@line 370 "ldo.c"
      $firstResult_addr=$incdec_ptr; //@line 370 "ldo.c"
      $io2=$34; //@line 370 "ldo.c"
      var $35=$res; //@line 370 "ldo.c"
      var $incdec_ptr13=(($35+12)|0); //@line 370 "ldo.c"
      $res=$incdec_ptr13; //@line 370 "ldo.c"
      $io1=$35; //@line 370 "ldo.c"
      var $36=$io1; //@line 370 "ldo.c"
      var $value_=(($36)|0); //@line 370 "ldo.c"
      var $37=$io2; //@line 370 "ldo.c"
      var $value_14=(($37)|0); //@line 370 "ldo.c"
      var $38=$value_; //@line 370 "ldo.c"
      var $39=$value_14; //@line 370 "ldo.c"
      assert(8 % 1 === 0);HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];HEAP32[((($38)+(4))>>2)]=HEAP32[((($39)+(4))>>2)]; //@line 370 "ldo.c"
      var $40=$io2; //@line 370 "ldo.c"
      var $tt_=(($40+8)|0); //@line 370 "ldo.c"
      var $41=HEAP32[(($tt_)>>2)]; //@line 370 "ldo.c"
      var $42=$io1; //@line 370 "ldo.c"
      var $tt_15=(($42+8)|0); //@line 370 "ldo.c"
      HEAP32[(($tt_15)>>2)]=$41; //@line 370 "ldo.c"
      label = 11; break; //@line 370 "ldo.c"
    case 11: 
      var $43=$i; //@line 369 "ldo.c"
      var $dec=((($43)-(1))|0); //@line 369 "ldo.c"
      $i=$dec; //@line 369 "ldo.c"
      label = 7; break; //@line 369 "ldo.c"
    case 12: 
      label = 13; break; //@line 371 "ldo.c"
    case 13: 
      var $44=$i; //@line 371 "ldo.c"
      var $dec16=((($44)-(1))|0); //@line 371 "ldo.c"
      $i=$dec16; //@line 371 "ldo.c"
      var $cmp17=(($44)|0) > 0; //@line 371 "ldo.c"
      if ($cmp17) { label = 14; break; } else { label = 15; break; } //@line 371 "ldo.c"
    case 14: 
      var $45=$res; //@line 372 "ldo.c"
      var $incdec_ptr18=(($45+12)|0); //@line 372 "ldo.c"
      $res=$incdec_ptr18; //@line 372 "ldo.c"
      var $tt_19=(($45+8)|0); //@line 372 "ldo.c"
      HEAP32[(($tt_19)>>2)]=0; //@line 372 "ldo.c"
      label = 13; break; //@line 372 "ldo.c"
    case 15: 
      var $46=$res; //@line 373 "ldo.c"
      var $47=$L_addr; //@line 373 "ldo.c"
      var $top20=(($47+8)|0); //@line 373 "ldo.c"
      HEAP32[(($top20)>>2)]=$46; //@line 373 "ldo.c"
      var $48=$wanted; //@line 374 "ldo.c"
      var $sub=((($48)+(1))|0); //@line 374 "ldo.c"

      return $sub; //@line 374 "ldo.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z12luaD_poscallP9lua_StateP10lua_TValue["X"]=1;

function __ZL14adjust_varargsP9lua_StateP5Protoi($L, $p, $actual) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $p_addr;
      var $actual_addr;
      var $i;
      var $nfixargs;
      var $base;
      var $fixed;
      var $io2;
      var $io1;
      $L_addr=$L;
      $p_addr=$p;
      $actual_addr=$actual;
      var $0=$p_addr; //@line 259 "ldo.c"
      var $numparams=(($0+76)|0); //@line 259 "ldo.c"
      var $1=HEAP8[($numparams)]; //@line 259 "ldo.c"
      var $conv=(($1)&255); //@line 259 "ldo.c"
      $nfixargs=$conv; //@line 259 "ldo.c"
      var $2=$L_addr; //@line 263 "ldo.c"
      var $top=(($2+8)|0); //@line 263 "ldo.c"
      var $3=HEAP32[(($top)>>2)]; //@line 263 "ldo.c"
      var $4=$actual_addr; //@line 263 "ldo.c"
      var $idx_neg=(((-$4))|0); //@line 263 "ldo.c"
      var $add_ptr=(($3+((($idx_neg)*(12))&-1))|0); //@line 263 "ldo.c"
      $fixed=$add_ptr; //@line 263 "ldo.c"
      var $5=$L_addr; //@line 264 "ldo.c"
      var $top1=(($5+8)|0); //@line 264 "ldo.c"
      var $6=HEAP32[(($top1)>>2)]; //@line 264 "ldo.c"
      $base=$6; //@line 264 "ldo.c"
      $i=0; //@line 265 "ldo.c"
      label = 3; break; //@line 265 "ldo.c"
    case 3: 
      var $7=$i; //@line 265 "ldo.c"
      var $8=$nfixargs; //@line 265 "ldo.c"
      var $cmp=(($7)|0) < (($8)|0); //@line 265 "ldo.c"
      if ($cmp) { label = 4; break; } else { label = 6; break; } //@line 265 "ldo.c"
    case 4: 
      var $9=$fixed; //@line 266 "ldo.c"
      var $10=$i; //@line 266 "ldo.c"
      var $add_ptr2=(($9+((($10)*(12))&-1))|0); //@line 266 "ldo.c"
      $io2=$add_ptr2; //@line 266 "ldo.c"
      var $11=$L_addr; //@line 266 "ldo.c"
      var $top3=(($11+8)|0); //@line 266 "ldo.c"
      var $12=HEAP32[(($top3)>>2)]; //@line 266 "ldo.c"
      var $incdec_ptr=(($12+12)|0); //@line 266 "ldo.c"
      HEAP32[(($top3)>>2)]=$incdec_ptr; //@line 266 "ldo.c"
      $io1=$12; //@line 266 "ldo.c"
      var $13=$io1; //@line 266 "ldo.c"
      var $value_=(($13)|0); //@line 266 "ldo.c"
      var $14=$io2; //@line 266 "ldo.c"
      var $value_4=(($14)|0); //@line 266 "ldo.c"
      var $15=$value_; //@line 266 "ldo.c"
      var $16=$value_4; //@line 266 "ldo.c"
      assert(8 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)]; //@line 266 "ldo.c"
      var $17=$io2; //@line 266 "ldo.c"
      var $tt_=(($17+8)|0); //@line 266 "ldo.c"
      var $18=HEAP32[(($tt_)>>2)]; //@line 266 "ldo.c"
      var $19=$io1; //@line 266 "ldo.c"
      var $tt_5=(($19+8)|0); //@line 266 "ldo.c"
      HEAP32[(($tt_5)>>2)]=$18; //@line 266 "ldo.c"
      var $20=$fixed; //@line 267 "ldo.c"
      var $21=$i; //@line 267 "ldo.c"
      var $add_ptr6=(($20+((($21)*(12))&-1))|0); //@line 267 "ldo.c"
      var $tt_7=(($add_ptr6+8)|0); //@line 267 "ldo.c"
      HEAP32[(($tt_7)>>2)]=0; //@line 267 "ldo.c"
      label = 5; break; //@line 268 "ldo.c"
    case 5: 
      var $22=$i; //@line 265 "ldo.c"
      var $inc=((($22)+(1))|0); //@line 265 "ldo.c"
      $i=$inc; //@line 265 "ldo.c"
      label = 3; break; //@line 265 "ldo.c"
    case 6: 
      var $23=$base; //@line 269 "ldo.c"

      return $23; //@line 269 "ldo.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL14adjust_varargsP9lua_StateP5Protoi["X"]=1;

function __ZL8callhookP9lua_StateP8CallInfo($L, $ci) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $ci_addr;
      var $hook;
      $L_addr=$L;
      $ci_addr=$ci;
      $hook=0; //@line 245 "ldo.c"
      var $0=$ci_addr; //@line 246 "ldo.c"
      var $u=(($0+24)|0); //@line 246 "ldo.c"
      var $l=$u; //@line 246 "ldo.c"
      var $savedpc=(($l+4)|0); //@line 246 "ldo.c"
      var $1=HEAP32[(($savedpc)>>2)]; //@line 246 "ldo.c"
      var $incdec_ptr=(($1+4)|0); //@line 246 "ldo.c"
      HEAP32[(($savedpc)>>2)]=$incdec_ptr; //@line 246 "ldo.c"
      var $2=$ci_addr; //@line 247 "ldo.c"
      var $previous=(($2+8)|0); //@line 247 "ldo.c"
      var $3=HEAP32[(($previous)>>2)]; //@line 247 "ldo.c"
      var $callstatus=(($3+18)|0); //@line 247 "ldo.c"
      var $4=HEAP8[($callstatus)]; //@line 247 "ldo.c"
      var $conv=(($4)&255); //@line 247 "ldo.c"
      var $and=$conv & 1; //@line 247 "ldo.c"
      var $tobool=(($and)|0)!=0; //@line 247 "ldo.c"
      if ($tobool) { label = 3; break; } else { label = 5; break; } //@line 247 "ldo.c"
    case 3: 
      var $5=$ci_addr; //@line 247 "ldo.c"
      var $previous1=(($5+8)|0); //@line 247 "ldo.c"
      var $6=HEAP32[(($previous1)>>2)]; //@line 247 "ldo.c"
      var $u2=(($6+24)|0); //@line 247 "ldo.c"
      var $l3=$u2; //@line 247 "ldo.c"
      var $savedpc4=(($l3+4)|0); //@line 247 "ldo.c"
      var $7=HEAP32[(($savedpc4)>>2)]; //@line 247 "ldo.c"
      var $add_ptr=((($7)-(4))|0); //@line 247 "ldo.c"
      var $8=HEAP32[(($add_ptr)>>2)]; //@line 247 "ldo.c"
      var $shr=$8 >>> 0; //@line 247 "ldo.c"
      var $and5=$shr & 63; //@line 247 "ldo.c"
      var $cmp=(($and5)|0)==30; //@line 247 "ldo.c"
      if ($cmp) { label = 4; break; } else { label = 5; break; } //@line 247 "ldo.c"
    case 4: 
      var $9=$ci_addr; //@line 249 "ldo.c"
      var $callstatus6=(($9+18)|0); //@line 249 "ldo.c"
      var $10=HEAP8[($callstatus6)]; //@line 249 "ldo.c"
      var $conv7=(($10)&255); //@line 249 "ldo.c"
      var $or=$conv7 | 64; //@line 249 "ldo.c"
      var $conv8=(($or) & 255); //@line 249 "ldo.c"
      HEAP8[($callstatus6)]=$conv8; //@line 249 "ldo.c"
      $hook=4; //@line 250 "ldo.c"
      label = 5; break; //@line 251 "ldo.c"
    case 5: 
      var $11=$L_addr; //@line 252 "ldo.c"
      var $12=$hook; //@line 252 "ldo.c"
      __Z9luaD_hookP9lua_Stateii($11, $12, -1); //@line 252 "ldo.c"
      var $13=$ci_addr; //@line 253 "ldo.c"
      var $u9=(($13+24)|0); //@line 253 "ldo.c"
      var $l10=$u9; //@line 253 "ldo.c"
      var $savedpc11=(($l10+4)|0); //@line 253 "ldo.c"
      var $14=HEAP32[(($savedpc11)>>2)]; //@line 253 "ldo.c"
      var $incdec_ptr12=((($14)-(4))|0); //@line 253 "ldo.c"
      HEAP32[(($savedpc11)>>2)]=$incdec_ptr12; //@line 253 "ldo.c"

      return; //@line 254 "ldo.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL8callhookP9lua_StateP8CallInfo["X"]=1;

function __ZL11seterrorobjP9lua_StateiP10lua_TValue($L, $errcode, $oldtop) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $errcode_addr;
      var $oldtop_addr;
      var $io;
      var $x_;
      var $io2;
      var $x_3;
      var $io211;
      var $io1;
      $L_addr=$L;
      $errcode_addr=$errcode;
      $oldtop_addr=$oldtop;
      var $0=$errcode_addr; //@line 85 "ldo.c"
      if ((($0)|0)==4) {
        label = 3; break;
      }
      else if ((($0)|0)==6) {
        label = 4; break;
      }
      else {
      label = 5; break;
      }
      
    case 3: 
      var $1=$oldtop_addr; //@line 87 "ldo.c"
      $io=$1; //@line 87 "ldo.c"
      var $2=$L_addr; //@line 87 "ldo.c"
      var $l_G=(($2+12)|0); //@line 87 "ldo.c"
      var $3=HEAP32[(($l_G)>>2)]; //@line 87 "ldo.c"
      var $memerrmsg=(($3+160)|0); //@line 87 "ldo.c"
      var $4=HEAP32[(($memerrmsg)>>2)]; //@line 87 "ldo.c"
      $x_=$4; //@line 87 "ldo.c"
      var $5=$x_; //@line 87 "ldo.c"
      var $6=$5; //@line 87 "ldo.c"
      var $7=$io; //@line 87 "ldo.c"
      var $value_=(($7)|0); //@line 87 "ldo.c"
      var $gc=$value_; //@line 87 "ldo.c"
      HEAP32[(($gc)>>2)]=$6; //@line 87 "ldo.c"
      var $8=$x_; //@line 87 "ldo.c"
      var $tsv=$8; //@line 87 "ldo.c"
      var $tt=(($tsv+4)|0); //@line 87 "ldo.c"
      var $9=HEAP8[($tt)]; //@line 87 "ldo.c"
      var $conv=(($9)&255); //@line 87 "ldo.c"
      var $or=$conv | 64; //@line 87 "ldo.c"
      var $10=$io; //@line 87 "ldo.c"
      var $tt_=(($10+8)|0); //@line 87 "ldo.c"
      HEAP32[(($tt_)>>2)]=$or; //@line 87 "ldo.c"
      label = 6; break; //@line 88 "ldo.c"
    case 4: 
      var $11=$oldtop_addr; //@line 91 "ldo.c"
      $io2=$11; //@line 91 "ldo.c"
      var $12=$L_addr; //@line 91 "ldo.c"
      var $call=__Z12luaS_newlstrP9lua_StatePKcj($12, ((5243280)|0), 23); //@line 91 "ldo.c"
      $x_3=$call; //@line 91 "ldo.c"
      var $13=$x_3; //@line 91 "ldo.c"
      var $14=$13; //@line 91 "ldo.c"
      var $15=$io2; //@line 91 "ldo.c"
      var $value_4=(($15)|0); //@line 91 "ldo.c"
      var $gc5=$value_4; //@line 91 "ldo.c"
      HEAP32[(($gc5)>>2)]=$14; //@line 91 "ldo.c"
      var $16=$x_3; //@line 91 "ldo.c"
      var $tsv6=$16; //@line 91 "ldo.c"
      var $tt7=(($tsv6+4)|0); //@line 91 "ldo.c"
      var $17=HEAP8[($tt7)]; //@line 91 "ldo.c"
      var $conv8=(($17)&255); //@line 91 "ldo.c"
      var $or9=$conv8 | 64; //@line 91 "ldo.c"
      var $18=$io2; //@line 91 "ldo.c"
      var $tt_10=(($18+8)|0); //@line 91 "ldo.c"
      HEAP32[(($tt_10)>>2)]=$or9; //@line 91 "ldo.c"
      label = 6; break; //@line 92 "ldo.c"
    case 5: 
      var $19=$L_addr; //@line 95 "ldo.c"
      var $top=(($19+8)|0); //@line 95 "ldo.c"
      var $20=HEAP32[(($top)>>2)]; //@line 95 "ldo.c"
      var $add_ptr=((($20)-(12))|0); //@line 95 "ldo.c"
      $io211=$add_ptr; //@line 95 "ldo.c"
      var $21=$oldtop_addr; //@line 95 "ldo.c"
      $io1=$21; //@line 95 "ldo.c"
      var $22=$io1; //@line 95 "ldo.c"
      var $value_12=(($22)|0); //@line 95 "ldo.c"
      var $23=$io211; //@line 95 "ldo.c"
      var $value_13=(($23)|0); //@line 95 "ldo.c"
      var $24=$value_12; //@line 95 "ldo.c"
      var $25=$value_13; //@line 95 "ldo.c"
      assert(8 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)]; //@line 95 "ldo.c"
      var $26=$io211; //@line 95 "ldo.c"
      var $tt_14=(($26+8)|0); //@line 95 "ldo.c"
      var $27=HEAP32[(($tt_14)>>2)]; //@line 95 "ldo.c"
      var $28=$io1; //@line 95 "ldo.c"
      var $tt_15=(($28+8)|0); //@line 95 "ldo.c"
      HEAP32[(($tt_15)>>2)]=$27; //@line 95 "ldo.c"
      label = 6; break; //@line 96 "ldo.c"
    case 6: 
      var $29=$oldtop_addr; //@line 99 "ldo.c"
      var $add_ptr16=(($29+12)|0); //@line 99 "ldo.c"
      var $30=$L_addr; //@line 99 "ldo.c"
      var $top17=(($30+8)|0); //@line 99 "ldo.c"
      HEAP32[(($top17)>>2)]=$add_ptr16; //@line 99 "ldo.c"

      return; //@line 100 "ldo.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL11seterrorobjP9lua_StateiP10lua_TValue["X"]=1;

function __Z10luaD_pcallP9lua_StatePFvS0_PvES1_ii($L, $func, $u, $old_top, $ef) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $func_addr;
      var $u_addr;
      var $old_top_addr;
      var $ef_addr;
      var $status;
      var $old_ci;
      var $old_allowhooks;
      var $old_nny;
      var $old_errfunc;
      var $oldtop;
      $L_addr=$L;
      $func_addr=$func;
      $u_addr=$u;
      $old_top_addr=$old_top;
      $ef_addr=$ef;
      var $0=$L_addr; //@line 585 "ldo.c"
      var $ci=(($0+16)|0); //@line 585 "ldo.c"
      var $1=HEAP32[(($ci)>>2)]; //@line 585 "ldo.c"
      $old_ci=$1; //@line 585 "ldo.c"
      var $2=$L_addr; //@line 586 "ldo.c"
      var $allowhook=(($2+41)|0); //@line 586 "ldo.c"
      var $3=HEAP8[($allowhook)]; //@line 586 "ldo.c"
      $old_allowhooks=$3; //@line 586 "ldo.c"
      var $4=$L_addr; //@line 587 "ldo.c"
      var $nny=(($4+36)|0); //@line 587 "ldo.c"
      var $5=HEAP16[(($nny)>>1)]; //@line 587 "ldo.c"
      $old_nny=$5; //@line 587 "ldo.c"
      var $6=$L_addr; //@line 588 "ldo.c"
      var $errfunc=(($6+68)|0); //@line 588 "ldo.c"
      var $7=HEAP32[(($errfunc)>>2)]; //@line 588 "ldo.c"
      $old_errfunc=$7; //@line 588 "ldo.c"
      var $8=$ef_addr; //@line 589 "ldo.c"
      var $9=$L_addr; //@line 589 "ldo.c"
      var $errfunc1=(($9+68)|0); //@line 589 "ldo.c"
      HEAP32[(($errfunc1)>>2)]=$8; //@line 589 "ldo.c"
      var $10=$L_addr; //@line 590 "ldo.c"
      var $11=$func_addr; //@line 590 "ldo.c"
      var $12=$u_addr; //@line 590 "ldo.c"
      var $call=__Z20luaD_rawrunprotectedP9lua_StatePFvS0_PvES1_($10, $11, $12); //@line 590 "ldo.c"
      $status=$call; //@line 590 "ldo.c"
      var $13=$status; //@line 591 "ldo.c"
      var $cmp=(($13)|0)!=0; //@line 591 "ldo.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 591 "ldo.c"
    case 3: 
      var $14=$L_addr; //@line 592 "ldo.c"
      var $stack=(($14+28)|0); //@line 592 "ldo.c"
      var $15=HEAP32[(($stack)>>2)]; //@line 592 "ldo.c"
      var $16=$15; //@line 592 "ldo.c"
      var $17=$old_top_addr; //@line 592 "ldo.c"
      var $add_ptr=(($16+$17)|0); //@line 592 "ldo.c"
      var $18=$add_ptr; //@line 592 "ldo.c"
      $oldtop=$18; //@line 592 "ldo.c"
      var $19=$L_addr; //@line 593 "ldo.c"
      var $20=$oldtop; //@line 593 "ldo.c"
      __Z10luaF_closeP9lua_StateP10lua_TValue($19, $20); //@line 593 "ldo.c"
      var $21=$L_addr; //@line 594 "ldo.c"
      var $22=$status; //@line 594 "ldo.c"
      var $23=$oldtop; //@line 594 "ldo.c"
      __ZL11seterrorobjP9lua_StateiP10lua_TValue($21, $22, $23); //@line 594 "ldo.c"
      var $24=$old_ci; //@line 595 "ldo.c"
      var $25=$L_addr; //@line 595 "ldo.c"
      var $ci2=(($25+16)|0); //@line 595 "ldo.c"
      HEAP32[(($ci2)>>2)]=$24; //@line 595 "ldo.c"
      var $26=$old_allowhooks; //@line 596 "ldo.c"
      var $27=$L_addr; //@line 596 "ldo.c"
      var $allowhook3=(($27+41)|0); //@line 596 "ldo.c"
      HEAP8[($allowhook3)]=$26; //@line 596 "ldo.c"
      var $28=$old_nny; //@line 597 "ldo.c"
      var $29=$L_addr; //@line 597 "ldo.c"
      var $nny4=(($29+36)|0); //@line 597 "ldo.c"
      HEAP16[(($nny4)>>1)]=$28; //@line 597 "ldo.c"
      var $30=$L_addr; //@line 598 "ldo.c"
      __Z16luaD_shrinkstackP9lua_State($30); //@line 598 "ldo.c"
      label = 4; break; //@line 599 "ldo.c"
    case 4: 
      var $31=$old_errfunc; //@line 600 "ldo.c"
      var $32=$L_addr; //@line 600 "ldo.c"
      var $errfunc5=(($32+68)|0); //@line 600 "ldo.c"
      HEAP32[(($errfunc5)>>2)]=$31; //@line 600 "ldo.c"
      var $33=$status; //@line 601 "ldo.c"

      return $33; //@line 601 "ldo.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z10luaD_pcallP9lua_StatePFvS0_PvES1_ii["X"]=1;

function __Z16luaF_newLclosureP9lua_Statei($L, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $n_addr;
      var $c;
      $L_addr=$L;
      $n_addr=$n;
      var $0=$L_addr; //@line 31 "lfunc.c"
      var $1=$n_addr; //@line 31 "lfunc.c"
      var $sub=((($1)-(1))|0); //@line 31 "lfunc.c"
      var $mul=($sub<<2); //@line 31 "lfunc.c"
      var $add=((($mul)+(20))|0); //@line 31 "lfunc.c"
      var $call=__Z11luaC_newobjP9lua_StateijPP8GCObjecti($0, 6, $add, 0, 0); //@line 31 "lfunc.c"
      var $cl=$call; //@line 31 "lfunc.c"
      $c=$cl; //@line 31 "lfunc.c"
      var $2=$c; //@line 32 "lfunc.c"
      var $l=$2; //@line 32 "lfunc.c"
      var $p=(($l+12)|0); //@line 32 "lfunc.c"
      HEAP32[(($p)>>2)]=0; //@line 32 "lfunc.c"
      var $3=$n_addr; //@line 33 "lfunc.c"
      var $conv=(($3) & 255); //@line 33 "lfunc.c"
      var $4=$c; //@line 33 "lfunc.c"
      var $l1=$4; //@line 33 "lfunc.c"
      var $nupvalues=(($l1+6)|0); //@line 33 "lfunc.c"
      HEAP8[($nupvalues)]=$conv; //@line 33 "lfunc.c"
      label = 3; break; //@line 34 "lfunc.c"
    case 3: 
      var $5=$n_addr; //@line 34 "lfunc.c"
      var $dec=((($5)-(1))|0); //@line 34 "lfunc.c"
      $n_addr=$dec; //@line 34 "lfunc.c"
      var $tobool=(($5)|0)!=0; //@line 34 "lfunc.c"
      if ($tobool) { label = 4; break; } else { label = 5; break; } //@line 34 "lfunc.c"
    case 4: 
      var $6=$n_addr; //@line 34 "lfunc.c"
      var $7=$c; //@line 34 "lfunc.c"
      var $l2=$7; //@line 34 "lfunc.c"
      var $upvals=(($l2+16)|0); //@line 34 "lfunc.c"
      var $arrayidx=(($upvals+($6<<2))|0); //@line 34 "lfunc.c"
      HEAP32[(($arrayidx)>>2)]=0; //@line 34 "lfunc.c"
      label = 3; break; //@line 34 "lfunc.c"
    case 5: 
      var $8=$c; //@line 35 "lfunc.c"

      return $8; //@line 35 "lfunc.c"
    default: assert(0, "bad label: " + label);
  }

}


function __ZL9tryfuncTMP9lua_StateP10lua_TValue($L, $func) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $func_addr;
      var $tm;
      var $p;
      var $funcr;
      var $io2;
      var $io1;
      var $io216;
      var $io117;
      $L_addr=$L;
      $func_addr=$func;
      var $0=$L_addr; //@line 274 "ldo.c"
      var $1=$func_addr; //@line 274 "ldo.c"
      var $call=__Z15luaT_gettmbyobjP9lua_StatePK10lua_TValue3TMS($0, $1, 16); //@line 274 "ldo.c"
      $tm=$call; //@line 274 "ldo.c"
      var $2=$func_addr; //@line 276 "ldo.c"
      var $3=$2; //@line 276 "ldo.c"
      var $4=$L_addr; //@line 276 "ldo.c"
      var $stack=(($4+28)|0); //@line 276 "ldo.c"
      var $5=HEAP32[(($stack)>>2)]; //@line 276 "ldo.c"
      var $6=$5; //@line 276 "ldo.c"
      var $sub_ptr_lhs_cast=$3; //@line 276 "ldo.c"
      var $sub_ptr_rhs_cast=$6; //@line 276 "ldo.c"
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 276 "ldo.c"
      $funcr=$sub_ptr_sub; //@line 276 "ldo.c"
      var $7=$tm; //@line 277 "ldo.c"
      var $tt_=(($7+8)|0); //@line 277 "ldo.c"
      var $8=HEAP32[(($tt_)>>2)]; //@line 277 "ldo.c"
      var $and=$8 & 15; //@line 277 "ldo.c"
      var $cmp=(($and)|0)==6; //@line 277 "ldo.c"
      if ($cmp) { label = 4; break; } else { label = 3; break; } //@line 277 "ldo.c"
    case 3: 
      var $9=$L_addr; //@line 278 "ldo.c"
      var $10=$func_addr; //@line 278 "ldo.c"
      __Z14luaG_typeerrorP9lua_StatePK10lua_TValuePKc($9, $10, ((5244016)|0)); //@line 278 "ldo.c"
      throw "Reached an unreachable!" //@line 278 "ldo.c"
    case 4: 
      var $11=$L_addr; //@line 280 "ldo.c"
      var $top=(($11+8)|0); //@line 280 "ldo.c"
      var $12=HEAP32[(($top)>>2)]; //@line 280 "ldo.c"
      $p=$12; //@line 280 "ldo.c"
      label = 5; break; //@line 280 "ldo.c"
    case 5: 
      var $13=$p; //@line 280 "ldo.c"
      var $14=$func_addr; //@line 280 "ldo.c"
      var $cmp1=(($13)>>>0) > (($14)>>>0); //@line 280 "ldo.c"
      if ($cmp1) { label = 6; break; } else { label = 8; break; } //@line 280 "ldo.c"
    case 6: 
      var $15=$p; //@line 280 "ldo.c"
      var $add_ptr=((($15)-(12))|0); //@line 280 "ldo.c"
      $io2=$add_ptr; //@line 280 "ldo.c"
      var $16=$p; //@line 280 "ldo.c"
      $io1=$16; //@line 280 "ldo.c"
      var $17=$io1; //@line 280 "ldo.c"
      var $value_=(($17)|0); //@line 280 "ldo.c"
      var $18=$io2; //@line 280 "ldo.c"
      var $value_2=(($18)|0); //@line 280 "ldo.c"
      var $19=$value_; //@line 280 "ldo.c"
      var $20=$value_2; //@line 280 "ldo.c"
      assert(8 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)]; //@line 280 "ldo.c"
      var $21=$io2; //@line 280 "ldo.c"
      var $tt_3=(($21+8)|0); //@line 280 "ldo.c"
      var $22=HEAP32[(($tt_3)>>2)]; //@line 280 "ldo.c"
      var $23=$io1; //@line 280 "ldo.c"
      var $tt_4=(($23+8)|0); //@line 280 "ldo.c"
      HEAP32[(($tt_4)>>2)]=$22; //@line 280 "ldo.c"
      label = 7; break; //@line 280 "ldo.c"
    case 7: 
      var $24=$p; //@line 280 "ldo.c"
      var $incdec_ptr=((($24)-(12))|0); //@line 280 "ldo.c"
      $p=$incdec_ptr; //@line 280 "ldo.c"
      label = 5; break; //@line 280 "ldo.c"
    case 8: 
      var $25=$L_addr; //@line 281 "ldo.c"
      var $top5=(($25+8)|0); //@line 281 "ldo.c"
      var $26=HEAP32[(($top5)>>2)]; //@line 281 "ldo.c"
      var $incdec_ptr6=(($26+12)|0); //@line 281 "ldo.c"
      HEAP32[(($top5)>>2)]=$incdec_ptr6; //@line 281 "ldo.c"
      var $27=$L_addr; //@line 281 "ldo.c"
      var $stack_last=(($27+24)|0); //@line 281 "ldo.c"
      var $28=HEAP32[(($stack_last)>>2)]; //@line 281 "ldo.c"
      var $29=$L_addr; //@line 281 "ldo.c"
      var $top7=(($29+8)|0); //@line 281 "ldo.c"
      var $30=HEAP32[(($top7)>>2)]; //@line 281 "ldo.c"
      var $sub_ptr_lhs_cast8=$28; //@line 281 "ldo.c"
      var $sub_ptr_rhs_cast9=$30; //@line 281 "ldo.c"
      var $sub_ptr_sub10=((($sub_ptr_lhs_cast8)-($sub_ptr_rhs_cast9))|0); //@line 281 "ldo.c"
      var $sub_ptr_div=((((($sub_ptr_sub10)|0))/(12))&-1); //@line 281 "ldo.c"
      var $cmp11=(($sub_ptr_div)|0) <= 0; //@line 281 "ldo.c"
      if ($cmp11) { label = 9; break; } else { label = 10; break; } //@line 281 "ldo.c"
    case 9: 
      var $31=$L_addr; //@line 281 "ldo.c"
      __Z14luaD_growstackP9lua_Statei($31, 0); //@line 281 "ldo.c"
      label = 11; break; //@line 281 "ldo.c"
    case 10: 
      label = 11; break;
    case 11: 
      var $32=$L_addr; //@line 282 "ldo.c"
      var $stack14=(($32+28)|0); //@line 282 "ldo.c"
      var $33=HEAP32[(($stack14)>>2)]; //@line 282 "ldo.c"
      var $34=$33; //@line 282 "ldo.c"
      var $35=$funcr; //@line 282 "ldo.c"
      var $add_ptr15=(($34+$35)|0); //@line 282 "ldo.c"
      var $36=$add_ptr15; //@line 282 "ldo.c"
      $func_addr=$36; //@line 282 "ldo.c"
      var $37=$tm; //@line 283 "ldo.c"
      $io216=$37; //@line 283 "ldo.c"
      var $38=$func_addr; //@line 283 "ldo.c"
      $io117=$38; //@line 283 "ldo.c"
      var $39=$io117; //@line 283 "ldo.c"
      var $value_18=(($39)|0); //@line 283 "ldo.c"
      var $40=$io216; //@line 283 "ldo.c"
      var $value_19=(($40)|0); //@line 283 "ldo.c"
      var $41=$value_18; //@line 283 "ldo.c"
      var $42=$value_19; //@line 283 "ldo.c"
      assert(8 % 1 === 0);HEAP32[(($41)>>2)]=HEAP32[(($42)>>2)];HEAP32[((($41)+(4))>>2)]=HEAP32[((($42)+(4))>>2)]; //@line 283 "ldo.c"
      var $43=$io216; //@line 283 "ldo.c"
      var $tt_20=(($43+8)|0); //@line 283 "ldo.c"
      var $44=HEAP32[(($tt_20)>>2)]; //@line 283 "ldo.c"
      var $45=$io117; //@line 283 "ldo.c"
      var $tt_21=(($45+8)|0); //@line 283 "ldo.c"
      HEAP32[(($tt_21)>>2)]=$44; //@line 283 "ldo.c"
      var $46=$func_addr; //@line 284 "ldo.c"

      return $46; //@line 284 "ldo.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL9tryfuncTMP9lua_StateP10lua_TValue["X"]=1;

function __Z9luaD_callP9lua_StateP10lua_TValueii($L, $func, $nResults, $allowyield) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $func_addr;
      var $nResults_addr;
      var $allowyield_addr;
      $L_addr=$L;
      $func_addr=$func;
      $nResults_addr=$nResults;
      $allowyield_addr=$allowyield;
      var $0=$L_addr; //@line 385 "ldo.c"
      var $nCcalls=(($0+38)|0); //@line 385 "ldo.c"
      var $1=HEAP16[(($nCcalls)>>1)]; //@line 385 "ldo.c"
      var $inc=((($1)+(1))&65535); //@line 385 "ldo.c"
      HEAP16[(($nCcalls)>>1)]=$inc; //@line 385 "ldo.c"
      var $conv=(($inc)&65535); //@line 385 "ldo.c"
      var $cmp=(($conv)|0) >= 200; //@line 385 "ldo.c"
      if ($cmp) { label = 3; break; } else { label = 9; break; } //@line 385 "ldo.c"
    case 3: 
      var $2=$L_addr; //@line 386 "ldo.c"
      var $nCcalls1=(($2+38)|0); //@line 386 "ldo.c"
      var $3=HEAP16[(($nCcalls1)>>1)]; //@line 386 "ldo.c"
      var $conv2=(($3)&65535); //@line 386 "ldo.c"
      var $cmp3=(($conv2)|0)==200; //@line 386 "ldo.c"
      if ($cmp3) { label = 4; break; } else { label = 5; break; } //@line 386 "ldo.c"
    case 4: 
      var $4=$L_addr; //@line 387 "ldo.c"
      __Z13luaG_runerrorP9lua_StatePKcz($4, ((5243956)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 387 "ldo.c"
      throw "Reached an unreachable!" //@line 387 "ldo.c"
    case 5: 
      var $5=$L_addr; //@line 388 "ldo.c"
      var $nCcalls5=(($5+38)|0); //@line 388 "ldo.c"
      var $6=HEAP16[(($nCcalls5)>>1)]; //@line 388 "ldo.c"
      var $conv6=(($6)&65535); //@line 388 "ldo.c"
      var $cmp7=(($conv6)|0) >= 225; //@line 388 "ldo.c"
      if ($cmp7) { label = 6; break; } else { label = 7; break; } //@line 388 "ldo.c"
    case 6: 
      var $7=$L_addr; //@line 389 "ldo.c"
      __Z10luaD_throwP9lua_Statei($7, 6); //@line 389 "ldo.c"
      throw "Reached an unreachable!" //@line 389 "ldo.c"
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break; //@line 390 "ldo.c"
    case 9: 
      var $8=$allowyield_addr; //@line 391 "ldo.c"
      var $tobool=(($8)|0)!=0; //@line 391 "ldo.c"
      if ($tobool) { label = 11; break; } else { label = 10; break; } //@line 391 "ldo.c"
    case 10: 
      var $9=$L_addr; //@line 391 "ldo.c"
      var $nny=(($9+36)|0); //@line 391 "ldo.c"
      var $10=HEAP16[(($nny)>>1)]; //@line 391 "ldo.c"
      var $inc12=((($10)+(1))&65535); //@line 391 "ldo.c"
      HEAP16[(($nny)>>1)]=$inc12; //@line 391 "ldo.c"
      label = 11; break; //@line 391 "ldo.c"
    case 11: 
      var $11=$L_addr; //@line 392 "ldo.c"
      var $12=$func_addr; //@line 392 "ldo.c"
      var $13=$nResults_addr; //@line 392 "ldo.c"
      var $call=__Z12luaD_precallP9lua_StateP10lua_TValuei($11, $12, $13); //@line 392 "ldo.c"
      var $tobool14=(($call)|0)!=0; //@line 392 "ldo.c"
      if ($tobool14) { label = 13; break; } else { label = 12; break; } //@line 392 "ldo.c"
    case 12: 
      var $14=$L_addr; //@line 393 "ldo.c"
      __Z12luaV_executeP9lua_State($14); //@line 393 "ldo.c"
      label = 13; break; //@line 393 "ldo.c"
    case 13: 
      var $15=$allowyield_addr; //@line 394 "ldo.c"
      var $tobool17=(($15)|0)!=0; //@line 394 "ldo.c"
      if ($tobool17) { label = 15; break; } else { label = 14; break; } //@line 394 "ldo.c"
    case 14: 
      var $16=$L_addr; //@line 394 "ldo.c"
      var $nny19=(($16+36)|0); //@line 394 "ldo.c"
      var $17=HEAP16[(($nny19)>>1)]; //@line 394 "ldo.c"
      var $dec=((($17)-(1))&65535); //@line 394 "ldo.c"
      HEAP16[(($nny19)>>1)]=$dec; //@line 394 "ldo.c"
      label = 15; break; //@line 394 "ldo.c"
    case 15: 
      var $18=$L_addr; //@line 395 "ldo.c"
      var $nCcalls21=(($18+38)|0); //@line 395 "ldo.c"
      var $19=HEAP16[(($nCcalls21)>>1)]; //@line 395 "ldo.c"
      var $dec22=((($19)-(1))&65535); //@line 395 "ldo.c"
      HEAP16[(($nCcalls21)>>1)]=$dec22; //@line 395 "ldo.c"
      var $20=$L_addr; //@line 396 "ldo.c"
      var $l_G=(($20+12)|0); //@line 396 "ldo.c"
      var $21=HEAP32[(($l_G)>>2)]; //@line 396 "ldo.c"
      var $GCdebt=(($21+12)|0); //@line 396 "ldo.c"
      var $22=HEAP32[(($GCdebt)>>2)]; //@line 396 "ldo.c"
      var $cmp23=(($22)|0) > 0; //@line 396 "ldo.c"
      if ($cmp23) { label = 16; break; } else { label = 17; break; } //@line 396 "ldo.c"
    case 16: 
      var $23=$L_addr; //@line 396 "ldo.c"
      __Z9luaC_stepP9lua_State($23); //@line 396 "ldo.c"
      label = 17; break; //@line 396 "ldo.c"
    case 17: 
      STACKTOP = __stackBase__;
      return; //@line 397 "ldo.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z9luaD_callP9lua_StateP10lua_TValueii["X"]=1;

function __ZL11unlinkupvalP5UpVal($uv) {
  var label = 0;


  var $uv_addr;
  $uv_addr=$uv;
  var $0=$uv_addr; //@line 77 "lfunc.c"
  var $u=(($0+12)|0); //@line 77 "lfunc.c"
  var $l=$u; //@line 77 "lfunc.c"
  var $prev=(($l)|0); //@line 77 "lfunc.c"
  var $1=HEAP32[(($prev)>>2)]; //@line 77 "lfunc.c"
  var $2=$uv_addr; //@line 77 "lfunc.c"
  var $u1=(($2+12)|0); //@line 77 "lfunc.c"
  var $l2=$u1; //@line 77 "lfunc.c"
  var $next=(($l2+4)|0); //@line 77 "lfunc.c"
  var $3=HEAP32[(($next)>>2)]; //@line 77 "lfunc.c"
  var $u3=(($3+12)|0); //@line 77 "lfunc.c"
  var $l4=$u3; //@line 77 "lfunc.c"
  var $prev5=(($l4)|0); //@line 77 "lfunc.c"
  HEAP32[(($prev5)>>2)]=$1; //@line 77 "lfunc.c"
  var $4=$uv_addr; //@line 78 "lfunc.c"
  var $u6=(($4+12)|0); //@line 78 "lfunc.c"
  var $l7=$u6; //@line 78 "lfunc.c"
  var $next8=(($l7+4)|0); //@line 78 "lfunc.c"
  var $5=HEAP32[(($next8)>>2)]; //@line 78 "lfunc.c"
  var $6=$uv_addr; //@line 78 "lfunc.c"
  var $u9=(($6+12)|0); //@line 78 "lfunc.c"
  var $l10=$u9; //@line 78 "lfunc.c"
  var $prev11=(($l10)|0); //@line 78 "lfunc.c"
  var $7=HEAP32[(($prev11)>>2)]; //@line 78 "lfunc.c"
  var $u12=(($7+12)|0); //@line 78 "lfunc.c"
  var $l13=$u12; //@line 78 "lfunc.c"
  var $next14=(($l13+4)|0); //@line 78 "lfunc.c"
  HEAP32[(($next14)>>2)]=$5; //@line 78 "lfunc.c"

  return; //@line 79 "lfunc.c"
}


function __Z17luaF_getlocalnamePK5Protoii($f, $local_number, $pc) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $f_addr;
      var $local_number_addr;
      var $pc_addr;
      var $i;
      $f_addr=$f;
      $local_number_addr=$local_number;
      $pc_addr=$pc;
      $i=0; //@line 152 "lfunc.c"
      label = 3; break; //@line 152 "lfunc.c"
    case 3: 
      var $0=$i; //@line 152 "lfunc.c"
      var $1=$f_addr; //@line 152 "lfunc.c"
      var $sizelocvars=(($1+60)|0); //@line 152 "lfunc.c"
      var $2=HEAP32[(($sizelocvars)>>2)]; //@line 152 "lfunc.c"
      var $cmp=(($0)|0) < (($2)|0); //@line 152 "lfunc.c"
      if ($cmp) { label = 4; break; } else { var $8 = 0;label = 5; break; } //@line 152 "lfunc.c"
    case 4: 
      var $3=$i; //@line 152 "lfunc.c"
      var $4=$f_addr; //@line 152 "lfunc.c"
      var $locvars=(($4+24)|0); //@line 152 "lfunc.c"
      var $5=HEAP32[(($locvars)>>2)]; //@line 152 "lfunc.c"
      var $arrayidx=(($5+((($3)*(12))&-1))|0); //@line 152 "lfunc.c"
      var $startpc=(($arrayidx+4)|0); //@line 152 "lfunc.c"
      var $6=HEAP32[(($startpc)>>2)]; //@line 152 "lfunc.c"
      var $7=$pc_addr; //@line 152 "lfunc.c"
      var $cmp1=(($6)|0) <= (($7)|0); //@line 152 "lfunc.c"
      var $8 = $cmp1;label = 5; break;
    case 5: 
      var $8;
      if ($8) { label = 6; break; } else { label = 12; break; }
    case 6: 
      var $9=$pc_addr; //@line 153 "lfunc.c"
      var $10=$i; //@line 153 "lfunc.c"
      var $11=$f_addr; //@line 153 "lfunc.c"
      var $locvars2=(($11+24)|0); //@line 153 "lfunc.c"
      var $12=HEAP32[(($locvars2)>>2)]; //@line 153 "lfunc.c"
      var $arrayidx3=(($12+((($10)*(12))&-1))|0); //@line 153 "lfunc.c"
      var $endpc=(($arrayidx3+8)|0); //@line 153 "lfunc.c"
      var $13=HEAP32[(($endpc)>>2)]; //@line 153 "lfunc.c"
      var $cmp4=(($9)|0) < (($13)|0); //@line 153 "lfunc.c"
      if ($cmp4) { label = 7; break; } else { label = 10; break; } //@line 153 "lfunc.c"
    case 7: 
      var $14=$local_number_addr; //@line 154 "lfunc.c"
      var $dec=((($14)-(1))|0); //@line 154 "lfunc.c"
      $local_number_addr=$dec; //@line 154 "lfunc.c"
      var $15=$local_number_addr; //@line 155 "lfunc.c"
      var $cmp5=(($15)|0)==0; //@line 155 "lfunc.c"
      if ($cmp5) { label = 8; break; } else { label = 9; break; } //@line 155 "lfunc.c"
    case 8: 
      var $16=$i; //@line 156 "lfunc.c"
      var $17=$f_addr; //@line 156 "lfunc.c"
      var $locvars7=(($17+24)|0); //@line 156 "lfunc.c"
      var $18=HEAP32[(($locvars7)>>2)]; //@line 156 "lfunc.c"
      var $arrayidx8=(($18+((($16)*(12))&-1))|0); //@line 156 "lfunc.c"
      var $varname=(($arrayidx8)|0); //@line 156 "lfunc.c"
      var $19=HEAP32[(($varname)>>2)]; //@line 156 "lfunc.c"
      var $add_ptr=(($19+16)|0); //@line 156 "lfunc.c"
      var $20=$add_ptr; //@line 156 "lfunc.c"
      $retval=$20; //@line 156 "lfunc.c"
      label = 13; break; //@line 156 "lfunc.c"
    case 9: 
      label = 10; break; //@line 157 "lfunc.c"
    case 10: 
      label = 11; break; //@line 158 "lfunc.c"
    case 11: 
      var $21=$i; //@line 152 "lfunc.c"
      var $inc=((($21)+(1))|0); //@line 152 "lfunc.c"
      $i=$inc; //@line 152 "lfunc.c"
      label = 3; break; //@line 152 "lfunc.c"
    case 12: 
      $retval=0; //@line 159 "lfunc.c"
      label = 13; break; //@line 159 "lfunc.c"
    case 13: 
      var $22=$retval; //@line 160 "lfunc.c"

      return $22; //@line 160 "lfunc.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z17luaF_getlocalnamePK5Protoii["X"]=1;

function __Z17luaC_barrierback_P9lua_StateP8GCObject($L, $o) {
  var label = 0;


  var $L_addr;
  var $o_addr;
  var $g;
  $L_addr=$L;
  $o_addr=$o;
  var $0=$L_addr; //@line 165 "lgc.c"
  var $l_G=(($0+12)|0); //@line 165 "lgc.c"
  var $1=HEAP32[(($l_G)>>2)]; //@line 165 "lgc.c"
  $g=$1; //@line 165 "lgc.c"
  var $2=$o_addr; //@line 167 "lgc.c"
  var $gch=$2; //@line 167 "lgc.c"
  var $marked=(($gch+5)|0); //@line 167 "lgc.c"
  var $3=HEAP8[($marked)]; //@line 167 "lgc.c"
  var $conv=(($3)&255); //@line 167 "lgc.c"
  var $and=$conv & 251; //@line 167 "lgc.c"
  var $conv1=(($and) & 255); //@line 167 "lgc.c"
  HEAP8[($marked)]=$conv1; //@line 167 "lgc.c"
  var $4=$g; //@line 168 "lgc.c"
  var $grayagain=(($4+80)|0); //@line 168 "lgc.c"
  var $5=HEAP32[(($grayagain)>>2)]; //@line 168 "lgc.c"
  var $6=$o_addr; //@line 168 "lgc.c"
  var $h=$6; //@line 168 "lgc.c"
  var $gclist=(($h+24)|0); //@line 168 "lgc.c"
  HEAP32[(($gclist)>>2)]=$5; //@line 168 "lgc.c"
  var $7=$o_addr; //@line 169 "lgc.c"
  var $8=$g; //@line 169 "lgc.c"
  var $grayagain2=(($8+80)|0); //@line 169 "lgc.c"
  HEAP32[(($grayagain2)>>2)]=$7; //@line 169 "lgc.c"

  return; //@line 170 "lgc.c"
}


function __Z14luaF_findupvalP9lua_StateP10lua_TValue($L, $level) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $level_addr;
      var $g;
      var $pp;
      var $p;
      var $uv;
      var $o;
      $L_addr=$L;
      $level_addr=$level;
      var $0=$L_addr; //@line 48 "lfunc.c"
      var $l_G=(($0+12)|0); //@line 48 "lfunc.c"
      var $1=HEAP32[(($l_G)>>2)]; //@line 48 "lfunc.c"
      $g=$1; //@line 48 "lfunc.c"
      var $2=$L_addr; //@line 49 "lfunc.c"
      var $openupval=(($2+56)|0); //@line 49 "lfunc.c"
      $pp=$openupval; //@line 49 "lfunc.c"
      label = 3; break; //@line 52 "lfunc.c"
    case 3: 
      var $3=$pp; //@line 52 "lfunc.c"
      var $4=HEAP32[(($3)>>2)]; //@line 52 "lfunc.c"
      var $cmp=(($4)|0)!=0; //@line 52 "lfunc.c"
      if ($cmp) { label = 4; break; } else { var $9 = 0;label = 5; break; } //@line 52 "lfunc.c"
    case 4: 
      var $5=$pp; //@line 52 "lfunc.c"
      var $6=HEAP32[(($5)>>2)]; //@line 52 "lfunc.c"
      var $uv1=$6; //@line 52 "lfunc.c"
      $p=$uv1; //@line 52 "lfunc.c"
      var $v=(($uv1+8)|0); //@line 52 "lfunc.c"
      var $7=HEAP32[(($v)>>2)]; //@line 52 "lfunc.c"
      var $8=$level_addr; //@line 52 "lfunc.c"
      var $cmp2=(($7)>>>0) >= (($8)>>>0); //@line 52 "lfunc.c"
      var $9 = $cmp2;label = 5; break;
    case 5: 
      var $9;
      if ($9) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $10=$p; //@line 53 "lfunc.c"
      var $11=$10; //@line 53 "lfunc.c"
      $o=$11; //@line 53 "lfunc.c"
      var $12=$p; //@line 55 "lfunc.c"
      var $v3=(($12+8)|0); //@line 55 "lfunc.c"
      var $13=HEAP32[(($v3)>>2)]; //@line 55 "lfunc.c"
      var $14=$level_addr; //@line 55 "lfunc.c"
      var $cmp4=(($13)|0)==(($14)|0); //@line 55 "lfunc.c"
      if ($cmp4) { label = 7; break; } else { label = 10; break; } //@line 55 "lfunc.c"
    case 7: 
      var $15=$o; //@line 56 "lfunc.c"
      var $gch=$15; //@line 56 "lfunc.c"
      var $marked=(($gch+5)|0); //@line 56 "lfunc.c"
      var $16=HEAP8[($marked)]; //@line 56 "lfunc.c"
      var $conv=(($16)&255); //@line 56 "lfunc.c"
      var $xor=$conv ^ 3; //@line 56 "lfunc.c"
      var $17=$g; //@line 56 "lfunc.c"
      var $currentwhite=(($17+52)|0); //@line 56 "lfunc.c"
      var $18=HEAP8[($currentwhite)]; //@line 56 "lfunc.c"
      var $conv5=(($18)&255); //@line 56 "lfunc.c"
      var $xor6=$conv5 ^ 3; //@line 56 "lfunc.c"
      var $and=$xor & $xor6; //@line 56 "lfunc.c"
      var $tobool=(($and)|0)!=0; //@line 56 "lfunc.c"
      if ($tobool) { label = 9; break; } else { label = 8; break; } //@line 56 "lfunc.c"
    case 8: 
      var $19=$o; //@line 57 "lfunc.c"
      var $gch8=$19; //@line 57 "lfunc.c"
      var $marked9=(($gch8+5)|0); //@line 57 "lfunc.c"
      var $20=HEAP8[($marked9)]; //@line 57 "lfunc.c"
      var $conv10=(($20)&255); //@line 57 "lfunc.c"
      var $xor11=$conv10 ^ 3; //@line 57 "lfunc.c"
      var $conv12=(($xor11) & 255); //@line 57 "lfunc.c"
      HEAP8[($marked9)]=$conv12; //@line 57 "lfunc.c"
      label = 9; break; //@line 57 "lfunc.c"
    case 9: 
      var $21=$p; //@line 58 "lfunc.c"
      $retval=$21; //@line 58 "lfunc.c"
      label = 12; break; //@line 58 "lfunc.c"
    case 10: 
      var $22=$o; //@line 60 "lfunc.c"
      var $gch14=$22; //@line 60 "lfunc.c"
      var $marked15=(($gch14+5)|0); //@line 60 "lfunc.c"
      var $23=HEAP8[($marked15)]; //@line 60 "lfunc.c"
      var $conv16=(($23)&255); //@line 60 "lfunc.c"
      var $and17=$conv16 & 191; //@line 60 "lfunc.c"
      var $conv18=(($and17) & 255); //@line 60 "lfunc.c"
      HEAP8[($marked15)]=$conv18; //@line 60 "lfunc.c"
      var $24=$p; //@line 61 "lfunc.c"
      var $next=(($24)|0); //@line 61 "lfunc.c"
      $pp=$next; //@line 61 "lfunc.c"
      label = 3; break; //@line 62 "lfunc.c"
    case 11: 
      var $25=$L_addr; //@line 64 "lfunc.c"
      var $26=$pp; //@line 64 "lfunc.c"
      var $call=__Z11luaC_newobjP9lua_StateijPP8GCObjecti($25, 10, 24, $26, 0); //@line 64 "lfunc.c"
      var $uv19=$call; //@line 64 "lfunc.c"
      $uv=$uv19; //@line 64 "lfunc.c"
      var $27=$level_addr; //@line 65 "lfunc.c"
      var $28=$uv; //@line 65 "lfunc.c"
      var $v20=(($28+8)|0); //@line 65 "lfunc.c"
      HEAP32[(($v20)>>2)]=$27; //@line 65 "lfunc.c"
      var $29=$g; //@line 66 "lfunc.c"
      var $uvhead=(($29+100)|0); //@line 66 "lfunc.c"
      var $30=$uv; //@line 66 "lfunc.c"
      var $u=(($30+12)|0); //@line 66 "lfunc.c"
      var $l=$u; //@line 66 "lfunc.c"
      var $prev=(($l)|0); //@line 66 "lfunc.c"
      HEAP32[(($prev)>>2)]=$uvhead; //@line 66 "lfunc.c"
      var $31=$g; //@line 67 "lfunc.c"
      var $uvhead21=(($31+100)|0); //@line 67 "lfunc.c"
      var $u22=(($uvhead21+12)|0); //@line 67 "lfunc.c"
      var $l23=$u22; //@line 67 "lfunc.c"
      var $next24=(($l23+4)|0); //@line 67 "lfunc.c"
      var $32=HEAP32[(($next24)>>2)]; //@line 67 "lfunc.c"
      var $33=$uv; //@line 67 "lfunc.c"
      var $u25=(($33+12)|0); //@line 67 "lfunc.c"
      var $l26=$u25; //@line 67 "lfunc.c"
      var $next27=(($l26+4)|0); //@line 67 "lfunc.c"
      HEAP32[(($next27)>>2)]=$32; //@line 67 "lfunc.c"
      var $34=$uv; //@line 68 "lfunc.c"
      var $35=$uv; //@line 68 "lfunc.c"
      var $u28=(($35+12)|0); //@line 68 "lfunc.c"
      var $l29=$u28; //@line 68 "lfunc.c"
      var $next30=(($l29+4)|0); //@line 68 "lfunc.c"
      var $36=HEAP32[(($next30)>>2)]; //@line 68 "lfunc.c"
      var $u31=(($36+12)|0); //@line 68 "lfunc.c"
      var $l32=$u31; //@line 68 "lfunc.c"
      var $prev33=(($l32)|0); //@line 68 "lfunc.c"
      HEAP32[(($prev33)>>2)]=$34; //@line 68 "lfunc.c"
      var $37=$uv; //@line 69 "lfunc.c"
      var $38=$g; //@line 69 "lfunc.c"
      var $uvhead34=(($38+100)|0); //@line 69 "lfunc.c"
      var $u35=(($uvhead34+12)|0); //@line 69 "lfunc.c"
      var $l36=$u35; //@line 69 "lfunc.c"
      var $next37=(($l36+4)|0); //@line 69 "lfunc.c"
      HEAP32[(($next37)>>2)]=$37; //@line 69 "lfunc.c"
      var $39=$uv; //@line 71 "lfunc.c"
      $retval=$39; //@line 71 "lfunc.c"
      label = 12; break; //@line 71 "lfunc.c"
    case 12: 
      var $40=$retval; //@line 72 "lfunc.c"

      return $40; //@line 72 "lfunc.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z14luaF_findupvalP9lua_StateP10lua_TValue["X"]=1;

function __Z14luaF_freeupvalP9lua_StateP5UpVal($L, $uv) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $uv_addr;
      $L_addr=$L;
      $uv_addr=$uv;
      var $0=$uv_addr; //@line 83 "lfunc.c"
      var $v=(($0+8)|0); //@line 83 "lfunc.c"
      var $1=HEAP32[(($v)>>2)]; //@line 83 "lfunc.c"
      var $2=$uv_addr; //@line 83 "lfunc.c"
      var $u=(($2+12)|0); //@line 83 "lfunc.c"
      var $value=$u; //@line 83 "lfunc.c"
      var $cmp=(($1)|0)!=(($value)|0); //@line 83 "lfunc.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 83 "lfunc.c"
    case 3: 
      var $3=$uv_addr; //@line 84 "lfunc.c"
      __ZL11unlinkupvalP5UpVal($3); //@line 84 "lfunc.c"
      label = 4; break; //@line 84 "lfunc.c"
    case 4: 
      var $4=$L_addr; //@line 85 "lfunc.c"
      var $5=$uv_addr; //@line 85 "lfunc.c"
      var $6=$5; //@line 85 "lfunc.c"
      var $call=__Z13luaM_realloc_P9lua_StatePvjj($4, $6, 24, 0); //@line 85 "lfunc.c"

      return; //@line 86 "lfunc.c"
    default: assert(0, "bad label: " + label);
  }

}


function __Z10luaF_closeP9lua_StateP10lua_TValue($L, $level) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $level_addr;
      var $uv;
      var $g;
      var $o;
      var $io2;
      var $io1;
      $L_addr=$L;
      $level_addr=$level;
      var $0=$L_addr; //@line 91 "lfunc.c"
      var $l_G=(($0+12)|0); //@line 91 "lfunc.c"
      var $1=HEAP32[(($l_G)>>2)]; //@line 91 "lfunc.c"
      $g=$1; //@line 91 "lfunc.c"
      label = 3; break; //@line 92 "lfunc.c"
    case 3: 
      var $2=$L_addr; //@line 92 "lfunc.c"
      var $openupval=(($2+56)|0); //@line 92 "lfunc.c"
      var $3=HEAP32[(($openupval)>>2)]; //@line 92 "lfunc.c"
      var $cmp=(($3)|0)!=0; //@line 92 "lfunc.c"
      if ($cmp) { label = 4; break; } else { var $8 = 0;label = 5; break; } //@line 92 "lfunc.c"
    case 4: 
      var $4=$L_addr; //@line 92 "lfunc.c"
      var $openupval1=(($4+56)|0); //@line 92 "lfunc.c"
      var $5=HEAP32[(($openupval1)>>2)]; //@line 92 "lfunc.c"
      var $uv2=$5; //@line 92 "lfunc.c"
      $uv=$uv2; //@line 92 "lfunc.c"
      var $v=(($uv2+8)|0); //@line 92 "lfunc.c"
      var $6=HEAP32[(($v)>>2)]; //@line 92 "lfunc.c"
      var $7=$level_addr; //@line 92 "lfunc.c"
      var $cmp3=(($6)>>>0) >= (($7)>>>0); //@line 92 "lfunc.c"
      var $8 = $cmp3;label = 5; break;
    case 5: 
      var $8;
      if ($8) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $9=$uv; //@line 93 "lfunc.c"
      var $10=$9; //@line 93 "lfunc.c"
      $o=$10; //@line 93 "lfunc.c"
      var $11=$uv; //@line 95 "lfunc.c"
      var $next=(($11)|0); //@line 95 "lfunc.c"
      var $12=HEAP32[(($next)>>2)]; //@line 95 "lfunc.c"
      var $13=$L_addr; //@line 95 "lfunc.c"
      var $openupval4=(($13+56)|0); //@line 95 "lfunc.c"
      HEAP32[(($openupval4)>>2)]=$12; //@line 95 "lfunc.c"
      var $14=$o; //@line 96 "lfunc.c"
      var $gch=$14; //@line 96 "lfunc.c"
      var $marked=(($gch+5)|0); //@line 96 "lfunc.c"
      var $15=HEAP8[($marked)]; //@line 96 "lfunc.c"
      var $conv=(($15)&255); //@line 96 "lfunc.c"
      var $xor=$conv ^ 3; //@line 96 "lfunc.c"
      var $16=$g; //@line 96 "lfunc.c"
      var $currentwhite=(($16+52)|0); //@line 96 "lfunc.c"
      var $17=HEAP8[($currentwhite)]; //@line 96 "lfunc.c"
      var $conv5=(($17)&255); //@line 96 "lfunc.c"
      var $xor6=$conv5 ^ 3; //@line 96 "lfunc.c"
      var $and=$xor & $xor6; //@line 96 "lfunc.c"
      var $tobool=(($and)|0)!=0; //@line 96 "lfunc.c"
      if ($tobool) { label = 8; break; } else { label = 7; break; } //@line 96 "lfunc.c"
    case 7: 
      var $18=$L_addr; //@line 97 "lfunc.c"
      var $19=$uv; //@line 97 "lfunc.c"
      __Z14luaF_freeupvalP9lua_StateP5UpVal($18, $19); //@line 97 "lfunc.c"
      label = 9; break; //@line 97 "lfunc.c"
    case 8: 
      var $20=$uv; //@line 99 "lfunc.c"
      __ZL11unlinkupvalP5UpVal($20); //@line 99 "lfunc.c"
      var $21=$uv; //@line 100 "lfunc.c"
      var $v7=(($21+8)|0); //@line 100 "lfunc.c"
      var $22=HEAP32[(($v7)>>2)]; //@line 100 "lfunc.c"
      $io2=$22; //@line 100 "lfunc.c"
      var $23=$uv; //@line 100 "lfunc.c"
      var $u=(($23+12)|0); //@line 100 "lfunc.c"
      var $value=$u; //@line 100 "lfunc.c"
      $io1=$value; //@line 100 "lfunc.c"
      var $24=$io1; //@line 100 "lfunc.c"
      var $value_=(($24)|0); //@line 100 "lfunc.c"
      var $25=$io2; //@line 100 "lfunc.c"
      var $value_8=(($25)|0); //@line 100 "lfunc.c"
      var $26=$value_; //@line 100 "lfunc.c"
      var $27=$value_8; //@line 100 "lfunc.c"
      assert(8 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)]; //@line 100 "lfunc.c"
      var $28=$io2; //@line 100 "lfunc.c"
      var $tt_=(($28+8)|0); //@line 100 "lfunc.c"
      var $29=HEAP32[(($tt_)>>2)]; //@line 100 "lfunc.c"
      var $30=$io1; //@line 100 "lfunc.c"
      var $tt_9=(($30+8)|0); //@line 100 "lfunc.c"
      HEAP32[(($tt_9)>>2)]=$29; //@line 100 "lfunc.c"
      var $31=$uv; //@line 101 "lfunc.c"
      var $u10=(($31+12)|0); //@line 101 "lfunc.c"
      var $value11=$u10; //@line 101 "lfunc.c"
      var $32=$uv; //@line 101 "lfunc.c"
      var $v12=(($32+8)|0); //@line 101 "lfunc.c"
      HEAP32[(($v12)>>2)]=$value11; //@line 101 "lfunc.c"
      var $33=$g; //@line 102 "lfunc.c"
      var $allgc=(($33+60)|0); //@line 102 "lfunc.c"
      var $34=HEAP32[(($allgc)>>2)]; //@line 102 "lfunc.c"
      var $35=$o; //@line 102 "lfunc.c"
      var $gch13=$35; //@line 102 "lfunc.c"
      var $next14=(($gch13)|0); //@line 102 "lfunc.c"
      HEAP32[(($next14)>>2)]=$34; //@line 102 "lfunc.c"
      var $36=$o; //@line 103 "lfunc.c"
      var $37=$g; //@line 103 "lfunc.c"
      var $allgc15=(($37+60)|0); //@line 103 "lfunc.c"
      HEAP32[(($allgc15)>>2)]=$36; //@line 103 "lfunc.c"
      var $38=$g; //@line 104 "lfunc.c"
      var $39=$uv; //@line 104 "lfunc.c"
      __Z20luaC_checkupvalcolorP12global_StateP5UpVal($38, $39); //@line 104 "lfunc.c"
      label = 9; break;
    case 9: 
      label = 3; break; //@line 106 "lfunc.c"
    case 10: 

      return; //@line 107 "lfunc.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z10luaF_closeP9lua_StateP10lua_TValue["X"]=1;

function __Z14luaF_freeprotoP9lua_StateP5Proto($L, $f) {
  var label = 0;


  var $L_addr;
  var $f_addr;
  $L_addr=$L;
  $f_addr=$f;
  var $0=$L_addr; //@line 136 "lfunc.c"
  var $1=$f_addr; //@line 136 "lfunc.c"
  var $code=(($1+12)|0); //@line 136 "lfunc.c"
  var $2=HEAP32[(($code)>>2)]; //@line 136 "lfunc.c"
  var $3=$2; //@line 136 "lfunc.c"
  var $4=$f_addr; //@line 136 "lfunc.c"
  var $sizecode=(($4+48)|0); //@line 136 "lfunc.c"
  var $5=HEAP32[(($sizecode)>>2)]; //@line 136 "lfunc.c"
  var $mul=($5<<2); //@line 136 "lfunc.c"
  var $call=__Z13luaM_realloc_P9lua_StatePvjj($0, $3, $mul, 0); //@line 136 "lfunc.c"
  var $6=$L_addr; //@line 137 "lfunc.c"
  var $7=$f_addr; //@line 137 "lfunc.c"
  var $p=(($7+16)|0); //@line 137 "lfunc.c"
  var $8=HEAP32[(($p)>>2)]; //@line 137 "lfunc.c"
  var $9=$8; //@line 137 "lfunc.c"
  var $10=$f_addr; //@line 137 "lfunc.c"
  var $sizep=(($10+56)|0); //@line 137 "lfunc.c"
  var $11=HEAP32[(($sizep)>>2)]; //@line 137 "lfunc.c"
  var $mul1=($11<<2); //@line 137 "lfunc.c"
  var $call2=__Z13luaM_realloc_P9lua_StatePvjj($6, $9, $mul1, 0); //@line 137 "lfunc.c"
  var $12=$L_addr; //@line 138 "lfunc.c"
  var $13=$f_addr; //@line 138 "lfunc.c"
  var $k=(($13+8)|0); //@line 138 "lfunc.c"
  var $14=HEAP32[(($k)>>2)]; //@line 138 "lfunc.c"
  var $15=$14; //@line 138 "lfunc.c"
  var $16=$f_addr; //@line 138 "lfunc.c"
  var $sizek=(($16+44)|0); //@line 138 "lfunc.c"
  var $17=HEAP32[(($sizek)>>2)]; //@line 138 "lfunc.c"
  var $mul3=((($17)*(12))&-1); //@line 138 "lfunc.c"
  var $call4=__Z13luaM_realloc_P9lua_StatePvjj($12, $15, $mul3, 0); //@line 138 "lfunc.c"
  var $18=$L_addr; //@line 139 "lfunc.c"
  var $19=$f_addr; //@line 139 "lfunc.c"
  var $lineinfo=(($19+20)|0); //@line 139 "lfunc.c"
  var $20=HEAP32[(($lineinfo)>>2)]; //@line 139 "lfunc.c"
  var $21=$20; //@line 139 "lfunc.c"
  var $22=$f_addr; //@line 139 "lfunc.c"
  var $sizelineinfo=(($22+52)|0); //@line 139 "lfunc.c"
  var $23=HEAP32[(($sizelineinfo)>>2)]; //@line 139 "lfunc.c"
  var $mul5=($23<<2); //@line 139 "lfunc.c"
  var $call6=__Z13luaM_realloc_P9lua_StatePvjj($18, $21, $mul5, 0); //@line 139 "lfunc.c"
  var $24=$L_addr; //@line 140 "lfunc.c"
  var $25=$f_addr; //@line 140 "lfunc.c"
  var $locvars=(($25+24)|0); //@line 140 "lfunc.c"
  var $26=HEAP32[(($locvars)>>2)]; //@line 140 "lfunc.c"
  var $27=$26; //@line 140 "lfunc.c"
  var $28=$f_addr; //@line 140 "lfunc.c"
  var $sizelocvars=(($28+60)|0); //@line 140 "lfunc.c"
  var $29=HEAP32[(($sizelocvars)>>2)]; //@line 140 "lfunc.c"
  var $mul7=((($29)*(12))&-1); //@line 140 "lfunc.c"
  var $call8=__Z13luaM_realloc_P9lua_StatePvjj($24, $27, $mul7, 0); //@line 140 "lfunc.c"
  var $30=$L_addr; //@line 141 "lfunc.c"
  var $31=$f_addr; //@line 141 "lfunc.c"
  var $upvalues=(($31+28)|0); //@line 141 "lfunc.c"
  var $32=HEAP32[(($upvalues)>>2)]; //@line 141 "lfunc.c"
  var $33=$32; //@line 141 "lfunc.c"
  var $34=$f_addr; //@line 141 "lfunc.c"
  var $sizeupvalues=(($34+40)|0); //@line 141 "lfunc.c"
  var $35=HEAP32[(($sizeupvalues)>>2)]; //@line 141 "lfunc.c"
  var $mul9=($35<<3); //@line 141 "lfunc.c"
  var $call10=__Z13luaM_realloc_P9lua_StatePvjj($30, $33, $mul9, 0); //@line 141 "lfunc.c"
  var $36=$L_addr; //@line 142 "lfunc.c"
  var $37=$f_addr; //@line 142 "lfunc.c"
  var $38=$37; //@line 142 "lfunc.c"
  var $call11=__Z13luaM_realloc_P9lua_StatePvjj($36, $38, 80, 0); //@line 142 "lfunc.c"

  return; //@line 143 "lfunc.c"
}
__Z14luaF_freeprotoP9lua_StateP5Proto["X"]=1;

function __Z13luaC_barrier_P9lua_StateP8GCObjectS2_($L, $o, $v) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $o_addr;
      var $v_addr;
      var $g;
      $L_addr=$L;
      $o_addr=$o;
      $v_addr=$v;
      var $0=$L_addr; //@line 145 "lgc.c"
      var $l_G=(($0+12)|0); //@line 145 "lgc.c"
      var $1=HEAP32[(($l_G)>>2)]; //@line 145 "lgc.c"
      $g=$1; //@line 145 "lgc.c"
      var $2=$g; //@line 149 "lgc.c"
      var $gckind=(($2+54)|0); //@line 149 "lgc.c"
      var $3=HEAP8[($gckind)]; //@line 149 "lgc.c"
      var $conv=(($3)&255); //@line 149 "lgc.c"
      var $cmp=(($conv)|0)==2; //@line 149 "lgc.c"
      if ($cmp) { label = 4; break; } else { label = 3; break; } //@line 149 "lgc.c"
    case 3: 
      var $4=$g; //@line 149 "lgc.c"
      var $gcstate=(($4+53)|0); //@line 149 "lgc.c"
      var $5=HEAP8[($gcstate)]; //@line 149 "lgc.c"
      var $conv1=(($5)&255); //@line 149 "lgc.c"
      var $cmp2=(($conv1)|0) <= 1; //@line 149 "lgc.c"
      if ($cmp2) { label = 4; break; } else { label = 5; break; } //@line 149 "lgc.c"
    case 4: 
      var $6=$g; //@line 150 "lgc.c"
      var $7=$v_addr; //@line 150 "lgc.c"
      __ZL16reallymarkobjectP12global_StateP8GCObject($6, $7); //@line 150 "lgc.c"
      label = 6; break; //@line 150 "lgc.c"
    case 5: 
      var $8=$o_addr; //@line 153 "lgc.c"
      var $gch=$8; //@line 153 "lgc.c"
      var $marked=(($gch+5)|0); //@line 153 "lgc.c"
      var $9=HEAP8[($marked)]; //@line 153 "lgc.c"
      var $conv3=(($9)&255); //@line 153 "lgc.c"
      var $and=$conv3 & -72; //@line 153 "lgc.c"
      var $10=$g; //@line 153 "lgc.c"
      var $currentwhite=(($10+52)|0); //@line 153 "lgc.c"
      var $11=HEAP8[($currentwhite)]; //@line 153 "lgc.c"
      var $conv4=(($11)&255); //@line 153 "lgc.c"
      var $and5=$conv4 & 3; //@line 153 "lgc.c"
      var $conv6=(($and5) & 255); //@line 153 "lgc.c"
      var $conv7=(($conv6)&255); //@line 153 "lgc.c"
      var $or=$and | $conv7; //@line 153 "lgc.c"
      var $conv8=(($or) & 255); //@line 153 "lgc.c"
      var $12=$o_addr; //@line 153 "lgc.c"
      var $gch9=$12; //@line 153 "lgc.c"
      var $marked10=(($gch9+5)|0); //@line 153 "lgc.c"
      HEAP8[($marked10)]=$conv8; //@line 153 "lgc.c"
      label = 6; break;
    case 6: 

      return; //@line 155 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}


function __ZL16reallymarkobjectP12global_StateP8GCObject($g, $o) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $o_addr;
      var $size;
      var $mt;
      var $uv33;
      $g_addr=$g;
      $o_addr=$o;
      var $0=$o_addr; //@line 254 "lgc.c"
      var $gch=$0; //@line 254 "lgc.c"
      var $marked=(($gch+5)|0); //@line 254 "lgc.c"
      var $1=HEAP8[($marked)]; //@line 254 "lgc.c"
      var $conv=(($1)&255); //@line 254 "lgc.c"
      var $and=$conv & 252; //@line 254 "lgc.c"
      var $conv1=(($and) & 255); //@line 254 "lgc.c"
      HEAP8[($marked)]=$conv1; //@line 254 "lgc.c"
      var $2=$o_addr; //@line 255 "lgc.c"
      var $gch2=$2; //@line 255 "lgc.c"
      var $tt=(($gch2+4)|0); //@line 255 "lgc.c"
      var $3=HEAP8[($tt)]; //@line 255 "lgc.c"
      var $conv3=(($3)&255); //@line 255 "lgc.c"
      if ((($conv3)|0)==4 | (($conv3)|0)==20) {
        label = 3; break;
      }
      else if ((($conv3)|0)==7) {
        label = 4; break;
      }
      else if ((($conv3)|0)==10) {
        label = 11; break;
      }
      else if ((($conv3)|0)==6) {
        label = 17; break;
      }
      else if ((($conv3)|0)==38) {
        label = 18; break;
      }
      else if ((($conv3)|0)==5) {
        label = 19; break;
      }
      else if ((($conv3)|0)==8) {
        label = 20; break;
      }
      else if ((($conv3)|0)==9) {
        label = 21; break;
      }
      else {
      label = 22; break;
      }
      
    case 3: 
      var $4=$o_addr; //@line 258 "lgc.c"
      var $ts=$4; //@line 258 "lgc.c"
      var $tsv=$ts; //@line 258 "lgc.c"
      var $len=(($tsv+12)|0); //@line 258 "lgc.c"
      var $5=HEAP32[(($len)>>2)]; //@line 258 "lgc.c"
      var $add=((($5)+(1))|0); //@line 258 "lgc.c"
      var $mul=$add; //@line 258 "lgc.c"
      var $add4=((($mul)+(16))|0); //@line 258 "lgc.c"
      $size=$add4; //@line 258 "lgc.c"
      label = 23; break; //@line 259 "lgc.c"
    case 4: 
      var $6=$o_addr; //@line 262 "lgc.c"
      var $u=$6; //@line 262 "lgc.c"
      var $uv=$u; //@line 262 "lgc.c"
      var $metatable=(($uv+8)|0); //@line 262 "lgc.c"
      var $7=HEAP32[(($metatable)>>2)]; //@line 262 "lgc.c"
      $mt=$7; //@line 262 "lgc.c"
      var $8=$mt; //@line 263 "lgc.c"
      var $tobool=(($8)|0)!=0; //@line 263 "lgc.c"
      if ($tobool) { label = 5; break; } else { label = 7; break; } //@line 263 "lgc.c"
    case 5: 
      var $9=$mt; //@line 263 "lgc.c"
      var $10=$9; //@line 263 "lgc.c"
      var $gch6=$10; //@line 263 "lgc.c"
      var $marked7=(($gch6+5)|0); //@line 263 "lgc.c"
      var $11=HEAP8[($marked7)]; //@line 263 "lgc.c"
      var $conv8=(($11)&255); //@line 263 "lgc.c"
      var $and9=$conv8 & 3; //@line 263 "lgc.c"
      var $tobool10=(($and9)|0)!=0; //@line 263 "lgc.c"
      if ($tobool10) { label = 6; break; } else { label = 7; break; } //@line 263 "lgc.c"
    case 6: 
      var $12=$g_addr; //@line 263 "lgc.c"
      var $13=$mt; //@line 263 "lgc.c"
      var $14=$13; //@line 263 "lgc.c"
      __ZL16reallymarkobjectP12global_StateP8GCObject($12, $14); //@line 263 "lgc.c"
      label = 7; break; //@line 263 "lgc.c"
    case 7: 
      var $15=$o_addr; //@line 264 "lgc.c"
      var $u11=$15; //@line 264 "lgc.c"
      var $uv12=$u11; //@line 264 "lgc.c"
      var $env=(($uv12+12)|0); //@line 264 "lgc.c"
      var $16=HEAP32[(($env)>>2)]; //@line 264 "lgc.c"
      var $tobool13=(($16)|0)!=0; //@line 264 "lgc.c"
      if ($tobool13) { label = 8; break; } else { label = 10; break; } //@line 264 "lgc.c"
    case 8: 
      var $17=$o_addr; //@line 264 "lgc.c"
      var $u15=$17; //@line 264 "lgc.c"
      var $uv16=$u15; //@line 264 "lgc.c"
      var $env17=(($uv16+12)|0); //@line 264 "lgc.c"
      var $18=HEAP32[(($env17)>>2)]; //@line 264 "lgc.c"
      var $19=$18; //@line 264 "lgc.c"
      var $gch18=$19; //@line 264 "lgc.c"
      var $marked19=(($gch18+5)|0); //@line 264 "lgc.c"
      var $20=HEAP8[($marked19)]; //@line 264 "lgc.c"
      var $conv20=(($20)&255); //@line 264 "lgc.c"
      var $and21=$conv20 & 3; //@line 264 "lgc.c"
      var $tobool22=(($and21)|0)!=0; //@line 264 "lgc.c"
      if ($tobool22) { label = 9; break; } else { label = 10; break; } //@line 264 "lgc.c"
    case 9: 
      var $21=$g_addr; //@line 264 "lgc.c"
      var $22=$o_addr; //@line 264 "lgc.c"
      var $u24=$22; //@line 264 "lgc.c"
      var $uv25=$u24; //@line 264 "lgc.c"
      var $env26=(($uv25+12)|0); //@line 264 "lgc.c"
      var $23=HEAP32[(($env26)>>2)]; //@line 264 "lgc.c"
      var $24=$23; //@line 264 "lgc.c"
      __ZL16reallymarkobjectP12global_StateP8GCObject($21, $24); //@line 264 "lgc.c"
      label = 10; break; //@line 264 "lgc.c"
    case 10: 
      var $25=$o_addr; //@line 265 "lgc.c"
      var $u28=$25; //@line 265 "lgc.c"
      var $uv29=$u28; //@line 265 "lgc.c"
      var $len30=(($uv29+16)|0); //@line 265 "lgc.c"
      var $26=HEAP32[(($len30)>>2)]; //@line 265 "lgc.c"
      var $add31=((($26)+(20))|0); //@line 265 "lgc.c"
      $size=$add31; //@line 265 "lgc.c"
      label = 23; break; //@line 266 "lgc.c"
    case 11: 
      var $27=$o_addr; //@line 269 "lgc.c"
      var $uv34=$27; //@line 269 "lgc.c"
      $uv33=$uv34; //@line 269 "lgc.c"
      var $28=$uv33; //@line 270 "lgc.c"
      var $v=(($28+8)|0); //@line 270 "lgc.c"
      var $29=HEAP32[(($v)>>2)]; //@line 270 "lgc.c"
      var $tt_=(($29+8)|0); //@line 270 "lgc.c"
      var $30=HEAP32[(($tt_)>>2)]; //@line 270 "lgc.c"
      var $and35=$30 & 64; //@line 270 "lgc.c"
      var $tobool36=(($and35)|0)!=0; //@line 270 "lgc.c"
      if ($tobool36) { label = 12; break; } else { label = 14; break; } //@line 270 "lgc.c"
    case 12: 
      var $31=$uv33; //@line 270 "lgc.c"
      var $v38=(($31+8)|0); //@line 270 "lgc.c"
      var $32=HEAP32[(($v38)>>2)]; //@line 270 "lgc.c"
      var $value_=(($32)|0); //@line 270 "lgc.c"
      var $gc=$value_; //@line 270 "lgc.c"
      var $33=HEAP32[(($gc)>>2)]; //@line 270 "lgc.c"
      var $gch39=$33; //@line 270 "lgc.c"
      var $marked40=(($gch39+5)|0); //@line 270 "lgc.c"
      var $34=HEAP8[($marked40)]; //@line 270 "lgc.c"
      var $conv41=(($34)&255); //@line 270 "lgc.c"
      var $and42=$conv41 & 3; //@line 270 "lgc.c"
      var $tobool43=(($and42)|0)!=0; //@line 270 "lgc.c"
      if ($tobool43) { label = 13; break; } else { label = 14; break; } //@line 270 "lgc.c"
    case 13: 
      var $35=$g_addr; //@line 270 "lgc.c"
      var $36=$uv33; //@line 270 "lgc.c"
      var $v45=(($36+8)|0); //@line 270 "lgc.c"
      var $37=HEAP32[(($v45)>>2)]; //@line 270 "lgc.c"
      var $value_46=(($37)|0); //@line 270 "lgc.c"
      var $gc47=$value_46; //@line 270 "lgc.c"
      var $38=HEAP32[(($gc47)>>2)]; //@line 270 "lgc.c"
      __ZL16reallymarkobjectP12global_StateP8GCObject($35, $38); //@line 270 "lgc.c"
      label = 14; break; //@line 270 "lgc.c"
    case 14: 
      var $39=$uv33; //@line 271 "lgc.c"
      var $v49=(($39+8)|0); //@line 271 "lgc.c"
      var $40=HEAP32[(($v49)>>2)]; //@line 271 "lgc.c"
      var $41=$uv33; //@line 271 "lgc.c"
      var $u50=(($41+12)|0); //@line 271 "lgc.c"
      var $value=$u50; //@line 271 "lgc.c"
      var $cmp=(($40)|0)!=(($value)|0); //@line 271 "lgc.c"
      if ($cmp) { label = 15; break; } else { label = 16; break; } //@line 271 "lgc.c"
    case 15: 
      label = 24; break; //@line 272 "lgc.c"
    case 16: 
      $size=24; //@line 273 "lgc.c"
      label = 23; break; //@line 274 "lgc.c"
    case 17: 
      var $42=$g_addr; //@line 277 "lgc.c"
      var $gray=(($42+76)|0); //@line 277 "lgc.c"
      var $43=HEAP32[(($gray)>>2)]; //@line 277 "lgc.c"
      var $44=$o_addr; //@line 277 "lgc.c"
      var $cl=$44; //@line 277 "lgc.c"
      var $l=$cl; //@line 277 "lgc.c"
      var $gclist=(($l+8)|0); //@line 277 "lgc.c"
      HEAP32[(($gclist)>>2)]=$43; //@line 277 "lgc.c"
      var $45=$o_addr; //@line 278 "lgc.c"
      var $46=$g_addr; //@line 278 "lgc.c"
      var $gray54=(($46+76)|0); //@line 278 "lgc.c"
      HEAP32[(($gray54)>>2)]=$45; //@line 278 "lgc.c"
      label = 24; break; //@line 279 "lgc.c"
    case 18: 
      var $47=$g_addr; //@line 282 "lgc.c"
      var $gray56=(($47+76)|0); //@line 282 "lgc.c"
      var $48=HEAP32[(($gray56)>>2)]; //@line 282 "lgc.c"
      var $49=$o_addr; //@line 282 "lgc.c"
      var $cl57=$49; //@line 282 "lgc.c"
      var $c=$cl57; //@line 282 "lgc.c"
      var $gclist58=(($c+8)|0); //@line 282 "lgc.c"
      HEAP32[(($gclist58)>>2)]=$48; //@line 282 "lgc.c"
      var $50=$o_addr; //@line 283 "lgc.c"
      var $51=$g_addr; //@line 283 "lgc.c"
      var $gray59=(($51+76)|0); //@line 283 "lgc.c"
      HEAP32[(($gray59)>>2)]=$50; //@line 283 "lgc.c"
      label = 24; break; //@line 284 "lgc.c"
    case 19: 
      var $52=$g_addr; //@line 287 "lgc.c"
      var $gray61=(($52+76)|0); //@line 287 "lgc.c"
      var $53=HEAP32[(($gray61)>>2)]; //@line 287 "lgc.c"
      var $54=$o_addr; //@line 287 "lgc.c"
      var $h=$54; //@line 287 "lgc.c"
      var $gclist62=(($h+24)|0); //@line 287 "lgc.c"
      HEAP32[(($gclist62)>>2)]=$53; //@line 287 "lgc.c"
      var $55=$o_addr; //@line 287 "lgc.c"
      var $h63=$55; //@line 287 "lgc.c"
      var $56=$h63; //@line 287 "lgc.c"
      var $57=$g_addr; //@line 287 "lgc.c"
      var $gray64=(($57+76)|0); //@line 287 "lgc.c"
      HEAP32[(($gray64)>>2)]=$56; //@line 287 "lgc.c"
      label = 24; break; //@line 288 "lgc.c"
    case 20: 
      var $58=$g_addr; //@line 291 "lgc.c"
      var $gray66=(($58+76)|0); //@line 291 "lgc.c"
      var $59=HEAP32[(($gray66)>>2)]; //@line 291 "lgc.c"
      var $60=$o_addr; //@line 291 "lgc.c"
      var $th=$60; //@line 291 "lgc.c"
      var $gclist67=(($th+60)|0); //@line 291 "lgc.c"
      HEAP32[(($gclist67)>>2)]=$59; //@line 291 "lgc.c"
      var $61=$o_addr; //@line 292 "lgc.c"
      var $62=$g_addr; //@line 292 "lgc.c"
      var $gray68=(($62+76)|0); //@line 292 "lgc.c"
      HEAP32[(($gray68)>>2)]=$61; //@line 292 "lgc.c"
      label = 24; break; //@line 293 "lgc.c"
    case 21: 
      var $63=$g_addr; //@line 296 "lgc.c"
      var $gray70=(($63+76)|0); //@line 296 "lgc.c"
      var $64=HEAP32[(($gray70)>>2)]; //@line 296 "lgc.c"
      var $65=$o_addr; //@line 296 "lgc.c"
      var $p=$65; //@line 296 "lgc.c"
      var $gclist71=(($p+72)|0); //@line 296 "lgc.c"
      HEAP32[(($gclist71)>>2)]=$64; //@line 296 "lgc.c"
      var $66=$o_addr; //@line 297 "lgc.c"
      var $67=$g_addr; //@line 297 "lgc.c"
      var $gray72=(($67+76)|0); //@line 297 "lgc.c"
      HEAP32[(($gray72)>>2)]=$66; //@line 297 "lgc.c"
      label = 24; break; //@line 298 "lgc.c"
    case 22: 
      label = 24; break; //@line 300 "lgc.c"
    case 23: 
      var $68=$o_addr; //@line 302 "lgc.c"
      var $gch73=$68; //@line 302 "lgc.c"
      var $marked74=(($gch73+5)|0); //@line 302 "lgc.c"
      var $69=HEAP8[($marked74)]; //@line 302 "lgc.c"
      var $conv75=(($69)&255); //@line 302 "lgc.c"
      var $or=$conv75 | 4; //@line 302 "lgc.c"
      var $conv76=(($or) & 255); //@line 302 "lgc.c"
      HEAP8[($marked74)]=$conv76; //@line 302 "lgc.c"
      var $70=$size; //@line 303 "lgc.c"
      var $71=$g_addr; //@line 303 "lgc.c"
      var $GCmemtrav=(($71+16)|0); //@line 303 "lgc.c"
      var $72=HEAP32[(($GCmemtrav)>>2)]; //@line 303 "lgc.c"
      var $add77=((($72)+($70))|0); //@line 303 "lgc.c"
      HEAP32[(($GCmemtrav)>>2)]=$add77; //@line 303 "lgc.c"
      label = 24; break; //@line 304 "lgc.c"
    case 24: 

      return; //@line 304 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL16reallymarkobjectP12global_StateP8GCObject["X"]=1;

function __Z18luaC_barrierproto_P9lua_StateP5ProtoP7Closure($L, $p, $c) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $p_addr;
      var $c_addr;
      var $g;
      $L_addr=$L;
      $p_addr=$p;
      $c_addr=$c;
      var $0=$L_addr; //@line 182 "lgc.c"
      var $l_G=(($0+12)|0); //@line 182 "lgc.c"
      var $1=HEAP32[(($l_G)>>2)]; //@line 182 "lgc.c"
      $g=$1; //@line 182 "lgc.c"
      var $2=$p_addr; //@line 184 "lgc.c"
      var $cache=(($2+32)|0); //@line 184 "lgc.c"
      var $3=HEAP32[(($cache)>>2)]; //@line 184 "lgc.c"
      var $cmp=(($3)|0)==0; //@line 184 "lgc.c"
      if ($cmp) { label = 3; break; } else { label = 7; break; } //@line 184 "lgc.c"
    case 3: 
      var $4=$c_addr; //@line 185 "lgc.c"
      var $5=$4; //@line 185 "lgc.c"
      var $gch=$5; //@line 185 "lgc.c"
      var $marked=(($gch+5)|0); //@line 185 "lgc.c"
      var $6=HEAP8[($marked)]; //@line 185 "lgc.c"
      var $conv=(($6)&255); //@line 185 "lgc.c"
      var $and=$conv & 3; //@line 185 "lgc.c"
      var $tobool=(($and)|0)!=0; //@line 185 "lgc.c"
      if ($tobool) { label = 4; break; } else { label = 6; break; } //@line 185 "lgc.c"
    case 4: 
      var $7=$p_addr; //@line 185 "lgc.c"
      var $8=$7; //@line 185 "lgc.c"
      var $gch1=$8; //@line 185 "lgc.c"
      var $marked2=(($gch1+5)|0); //@line 185 "lgc.c"
      var $9=HEAP8[($marked2)]; //@line 185 "lgc.c"
      var $conv3=(($9)&255); //@line 185 "lgc.c"
      var $and4=$conv3 & 4; //@line 185 "lgc.c"
      var $tobool5=(($and4)|0)!=0; //@line 185 "lgc.c"
      if ($tobool5) { label = 5; break; } else { label = 6; break; } //@line 185 "lgc.c"
    case 5: 
      var $10=$L_addr; //@line 185 "lgc.c"
      var $11=$p_addr; //@line 185 "lgc.c"
      var $12=$11; //@line 185 "lgc.c"
      var $13=$c_addr; //@line 185 "lgc.c"
      var $14=$13; //@line 185 "lgc.c"
      __Z13luaC_barrier_P9lua_StateP8GCObjectS2_($10, $12, $14); //@line 185 "lgc.c"
      label = 6; break; //@line 185 "lgc.c"
    case 6: 
      label = 8; break; //@line 186 "lgc.c"
    case 7: 
      var $15=$p_addr; //@line 188 "lgc.c"
      var $16=$15; //@line 188 "lgc.c"
      var $gch7=$16; //@line 188 "lgc.c"
      var $marked8=(($gch7+5)|0); //@line 188 "lgc.c"
      var $17=HEAP8[($marked8)]; //@line 188 "lgc.c"
      var $conv9=(($17)&255); //@line 188 "lgc.c"
      var $and10=$conv9 & 251; //@line 188 "lgc.c"
      var $conv11=(($and10) & 255); //@line 188 "lgc.c"
      HEAP8[($marked8)]=$conv11; //@line 188 "lgc.c"
      var $18=$g; //@line 189 "lgc.c"
      var $grayagain=(($18+80)|0); //@line 189 "lgc.c"
      var $19=HEAP32[(($grayagain)>>2)]; //@line 189 "lgc.c"
      var $20=$p_addr; //@line 189 "lgc.c"
      var $gclist=(($20+72)|0); //@line 189 "lgc.c"
      HEAP32[(($gclist)>>2)]=$19; //@line 189 "lgc.c"
      var $21=$p_addr; //@line 190 "lgc.c"
      var $22=$21; //@line 190 "lgc.c"
      var $23=$g; //@line 190 "lgc.c"
      var $grayagain12=(($23+80)|0); //@line 190 "lgc.c"
      HEAP32[(($grayagain12)>>2)]=$22; //@line 190 "lgc.c"
      label = 8; break;
    case 8: 

      return; //@line 192 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z18luaC_barrierproto_P9lua_StateP5ProtoP7Closure["X"]=1;

function __ZL15separatetobefnzP9lua_Statei($L, $all) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $all_addr;
      var $g;
      var $p;
      var $curr;
      var $lastnext;
      $L_addr=$L;
      $all_addr=$all;
      var $0=$L_addr; //@line 848 "lgc.c"
      var $l_G=(($0+12)|0); //@line 848 "lgc.c"
      var $1=HEAP32[(($l_G)>>2)]; //@line 848 "lgc.c"
      $g=$1; //@line 848 "lgc.c"
      var $2=$g; //@line 849 "lgc.c"
      var $finobj=(($2+64)|0); //@line 849 "lgc.c"
      $p=$finobj; //@line 849 "lgc.c"
      var $3=$g; //@line 851 "lgc.c"
      var $tobefnz=(($3+96)|0); //@line 851 "lgc.c"
      $lastnext=$tobefnz; //@line 851 "lgc.c"
      label = 3; break; //@line 853 "lgc.c"
    case 3: 
      var $4=$lastnext; //@line 853 "lgc.c"
      var $5=HEAP32[(($4)>>2)]; //@line 853 "lgc.c"
      var $cmp=(($5)|0)!=0; //@line 853 "lgc.c"
      if ($cmp) { label = 4; break; } else { label = 5; break; } //@line 853 "lgc.c"
    case 4: 
      var $6=$lastnext; //@line 854 "lgc.c"
      var $7=HEAP32[(($6)>>2)]; //@line 854 "lgc.c"
      var $gch=$7; //@line 854 "lgc.c"
      var $next=(($gch)|0); //@line 854 "lgc.c"
      $lastnext=$next; //@line 854 "lgc.c"
      label = 3; break; //@line 854 "lgc.c"
    case 5: 
      label = 6; break; //@line 855 "lgc.c"
    case 6: 
      var $8=$p; //@line 855 "lgc.c"
      var $9=HEAP32[(($8)>>2)]; //@line 855 "lgc.c"
      $curr=$9; //@line 855 "lgc.c"
      var $cmp2=(($9)|0)!=0; //@line 855 "lgc.c"
      if ($cmp2) { label = 7; break; } else { label = 12; break; } //@line 855 "lgc.c"
    case 7: 
      var $10=$all_addr; //@line 858 "lgc.c"
      var $tobool=(($10)|0)!=0; //@line 858 "lgc.c"
      if ($tobool) { label = 10; break; } else { label = 8; break; } //@line 858 "lgc.c"
    case 8: 
      var $11=$curr; //@line 858 "lgc.c"
      var $gch4=$11; //@line 858 "lgc.c"
      var $marked=(($gch4+5)|0); //@line 858 "lgc.c"
      var $12=HEAP8[($marked)]; //@line 858 "lgc.c"
      var $conv=(($12)&255); //@line 858 "lgc.c"
      var $and=$conv & 3; //@line 858 "lgc.c"
      var $tobool5=(($and)|0)!=0; //@line 858 "lgc.c"
      if ($tobool5) { label = 10; break; } else { label = 9; break; } //@line 858 "lgc.c"
    case 9: 
      var $13=$curr; //@line 859 "lgc.c"
      var $gch6=$13; //@line 859 "lgc.c"
      var $next7=(($gch6)|0); //@line 859 "lgc.c"
      $p=$next7; //@line 859 "lgc.c"
      label = 11; break; //@line 859 "lgc.c"
    case 10: 
      var $14=$curr; //@line 861 "lgc.c"
      var $gch8=$14; //@line 861 "lgc.c"
      var $marked9=(($gch8+5)|0); //@line 861 "lgc.c"
      var $15=HEAP8[($marked9)]; //@line 861 "lgc.c"
      var $conv10=(($15)&255); //@line 861 "lgc.c"
      var $or=$conv10 | 8; //@line 861 "lgc.c"
      var $conv11=(($or) & 255); //@line 861 "lgc.c"
      HEAP8[($marked9)]=$conv11; //@line 861 "lgc.c"
      var $16=$curr; //@line 862 "lgc.c"
      var $gch12=$16; //@line 862 "lgc.c"
      var $next13=(($gch12)|0); //@line 862 "lgc.c"
      var $17=HEAP32[(($next13)>>2)]; //@line 862 "lgc.c"
      var $18=$p; //@line 862 "lgc.c"
      HEAP32[(($18)>>2)]=$17; //@line 862 "lgc.c"
      var $19=$lastnext; //@line 863 "lgc.c"
      var $20=HEAP32[(($19)>>2)]; //@line 863 "lgc.c"
      var $21=$curr; //@line 863 "lgc.c"
      var $gch14=$21; //@line 863 "lgc.c"
      var $next15=(($gch14)|0); //@line 863 "lgc.c"
      HEAP32[(($next15)>>2)]=$20; //@line 863 "lgc.c"
      var $22=$curr; //@line 864 "lgc.c"
      var $23=$lastnext; //@line 864 "lgc.c"
      HEAP32[(($23)>>2)]=$22; //@line 864 "lgc.c"
      var $24=$curr; //@line 865 "lgc.c"
      var $gch16=$24; //@line 865 "lgc.c"
      var $next17=(($gch16)|0); //@line 865 "lgc.c"
      $lastnext=$next17; //@line 865 "lgc.c"
      label = 11; break;
    case 11: 
      label = 6; break; //@line 867 "lgc.c"
    case 12: 

      return; //@line 868 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL15separatetobefnzP9lua_Statei["X"]=1;

function __Z20luaC_checkupvalcolorP12global_StateP5UpVal($g, $uv) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $uv_addr;
      var $o;
      $g_addr=$g;
      $uv_addr=$uv;
      var $0=$uv_addr; //@line 200 "lgc.c"
      var $1=$0; //@line 200 "lgc.c"
      $o=$1; //@line 200 "lgc.c"
      var $2=$o; //@line 202 "lgc.c"
      var $gch=$2; //@line 202 "lgc.c"
      var $marked=(($gch+5)|0); //@line 202 "lgc.c"
      var $3=HEAP8[($marked)]; //@line 202 "lgc.c"
      var $conv=(($3)&255); //@line 202 "lgc.c"
      var $and=$conv & 7; //@line 202 "lgc.c"
      var $tobool=(($and)|0)!=0; //@line 202 "lgc.c"
      if ($tobool) { label = 11; break; } else { label = 3; break; } //@line 202 "lgc.c"
    case 3: 
      var $4=$g_addr; //@line 203 "lgc.c"
      var $gckind=(($4+54)|0); //@line 203 "lgc.c"
      var $5=HEAP8[($gckind)]; //@line 203 "lgc.c"
      var $conv1=(($5)&255); //@line 203 "lgc.c"
      var $cmp=(($conv1)|0)==2; //@line 203 "lgc.c"
      if ($cmp) { label = 5; break; } else { label = 4; break; } //@line 203 "lgc.c"
    case 4: 
      var $6=$g_addr; //@line 203 "lgc.c"
      var $gcstate=(($6+53)|0); //@line 203 "lgc.c"
      var $7=HEAP8[($gcstate)]; //@line 203 "lgc.c"
      var $conv2=(($7)&255); //@line 203 "lgc.c"
      var $cmp3=(($conv2)|0) <= 1; //@line 203 "lgc.c"
      if ($cmp3) { label = 5; break; } else { label = 9; break; } //@line 203 "lgc.c"
    case 5: 
      var $8=$o; //@line 204 "lgc.c"
      var $gch5=$8; //@line 204 "lgc.c"
      var $marked6=(($gch5+5)|0); //@line 204 "lgc.c"
      var $9=HEAP8[($marked6)]; //@line 204 "lgc.c"
      var $conv7=(($9)&255); //@line 204 "lgc.c"
      var $and8=$conv7 & 191; //@line 204 "lgc.c"
      var $conv9=(($and8) & 255); //@line 204 "lgc.c"
      HEAP8[($marked6)]=$conv9; //@line 204 "lgc.c"
      var $10=$o; //@line 205 "lgc.c"
      var $gch10=$10; //@line 205 "lgc.c"
      var $marked11=(($gch10+5)|0); //@line 205 "lgc.c"
      var $11=HEAP8[($marked11)]; //@line 205 "lgc.c"
      var $conv12=(($11)&255); //@line 205 "lgc.c"
      var $or=$conv12 | 4; //@line 205 "lgc.c"
      var $conv13=(($or) & 255); //@line 205 "lgc.c"
      HEAP8[($marked11)]=$conv13; //@line 205 "lgc.c"
      var $12=$uv_addr; //@line 206 "lgc.c"
      var $v=(($12+8)|0); //@line 206 "lgc.c"
      var $13=HEAP32[(($v)>>2)]; //@line 206 "lgc.c"
      var $tt_=(($13+8)|0); //@line 206 "lgc.c"
      var $14=HEAP32[(($tt_)>>2)]; //@line 206 "lgc.c"
      var $and14=$14 & 64; //@line 206 "lgc.c"
      var $tobool15=(($and14)|0)!=0; //@line 206 "lgc.c"
      if ($tobool15) { label = 6; break; } else { label = 8; break; } //@line 206 "lgc.c"
    case 6: 
      var $15=$uv_addr; //@line 206 "lgc.c"
      var $v16=(($15+8)|0); //@line 206 "lgc.c"
      var $16=HEAP32[(($v16)>>2)]; //@line 206 "lgc.c"
      var $value_=(($16)|0); //@line 206 "lgc.c"
      var $gc=$value_; //@line 206 "lgc.c"
      var $17=HEAP32[(($gc)>>2)]; //@line 206 "lgc.c"
      var $gch17=$17; //@line 206 "lgc.c"
      var $marked18=(($gch17+5)|0); //@line 206 "lgc.c"
      var $18=HEAP8[($marked18)]; //@line 206 "lgc.c"
      var $conv19=(($18)&255); //@line 206 "lgc.c"
      var $and20=$conv19 & 3; //@line 206 "lgc.c"
      var $tobool21=(($and20)|0)!=0; //@line 206 "lgc.c"
      if ($tobool21) { label = 7; break; } else { label = 8; break; } //@line 206 "lgc.c"
    case 7: 
      var $19=$g_addr; //@line 206 "lgc.c"
      var $20=$uv_addr; //@line 206 "lgc.c"
      var $v23=(($20+8)|0); //@line 206 "lgc.c"
      var $21=HEAP32[(($v23)>>2)]; //@line 206 "lgc.c"
      var $value_24=(($21)|0); //@line 206 "lgc.c"
      var $gc25=$value_24; //@line 206 "lgc.c"
      var $22=HEAP32[(($gc25)>>2)]; //@line 206 "lgc.c"
      __ZL16reallymarkobjectP12global_StateP8GCObject($19, $22); //@line 206 "lgc.c"
      label = 8; break; //@line 206 "lgc.c"
    case 8: 
      label = 10; break; //@line 207 "lgc.c"
    case 9: 
      var $23=$o; //@line 210 "lgc.c"
      var $gch26=$23; //@line 210 "lgc.c"
      var $marked27=(($gch26+5)|0); //@line 210 "lgc.c"
      var $24=HEAP8[($marked27)]; //@line 210 "lgc.c"
      var $conv28=(($24)&255); //@line 210 "lgc.c"
      var $and29=$conv28 & -72; //@line 210 "lgc.c"
      var $25=$g_addr; //@line 210 "lgc.c"
      var $currentwhite=(($25+52)|0); //@line 210 "lgc.c"
      var $26=HEAP8[($currentwhite)]; //@line 210 "lgc.c"
      var $conv30=(($26)&255); //@line 210 "lgc.c"
      var $and31=$conv30 & 3; //@line 210 "lgc.c"
      var $conv32=(($and31) & 255); //@line 210 "lgc.c"
      var $conv33=(($conv32)&255); //@line 210 "lgc.c"
      var $or34=$and29 | $conv33; //@line 210 "lgc.c"
      var $conv35=(($or34) & 255); //@line 210 "lgc.c"
      var $27=$o; //@line 210 "lgc.c"
      var $gch36=$27; //@line 210 "lgc.c"
      var $marked37=(($gch36+5)|0); //@line 210 "lgc.c"
      HEAP8[($marked37)]=$conv35; //@line 210 "lgc.c"
      label = 10; break;
    case 10: 
      label = 11; break; //@line 212 "lgc.c"
    case 11: 

      return; //@line 213 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z20luaC_checkupvalcolorP12global_StateP5UpVal["X"]=1;

function __Z11luaC_newobjP9lua_StateijPP8GCObjecti($L, $tt, $sz, $list, $offset) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $tt_addr;
      var $sz_addr;
      var $list_addr;
      var $offset_addr;
      var $g;
      var $raw;
      var $o;
      $L_addr=$L;
      $tt_addr=$tt;
      $sz_addr=$sz;
      $list_addr=$list;
      $offset_addr=$offset;
      var $0=$L_addr; //@line 223 "lgc.c"
      var $l_G=(($0+12)|0); //@line 223 "lgc.c"
      var $1=HEAP32[(($l_G)>>2)]; //@line 223 "lgc.c"
      $g=$1; //@line 223 "lgc.c"
      var $2=$L_addr; //@line 224 "lgc.c"
      var $3=$tt_addr; //@line 224 "lgc.c"
      var $and=$3 & 15; //@line 224 "lgc.c"
      var $4=$sz_addr; //@line 224 "lgc.c"
      var $call=__Z13luaM_realloc_P9lua_StatePvjj($2, 0, $and, $4); //@line 224 "lgc.c"
      $raw=$call; //@line 224 "lgc.c"
      var $5=$raw; //@line 225 "lgc.c"
      var $6=$offset_addr; //@line 225 "lgc.c"
      var $add_ptr=(($5+$6)|0); //@line 225 "lgc.c"
      var $7=$add_ptr; //@line 225 "lgc.c"
      $o=$7; //@line 225 "lgc.c"
      var $8=$list_addr; //@line 226 "lgc.c"
      var $cmp=(($8)|0)==0; //@line 226 "lgc.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 226 "lgc.c"
    case 3: 
      var $9=$g; //@line 227 "lgc.c"
      var $allgc=(($9+60)|0); //@line 227 "lgc.c"
      $list_addr=$allgc; //@line 227 "lgc.c"
      label = 4; break; //@line 227 "lgc.c"
    case 4: 
      var $10=$g; //@line 228 "lgc.c"
      var $currentwhite=(($10+52)|0); //@line 228 "lgc.c"
      var $11=HEAP8[($currentwhite)]; //@line 228 "lgc.c"
      var $conv=(($11)&255); //@line 228 "lgc.c"
      var $and1=$conv & 3; //@line 228 "lgc.c"
      var $conv2=(($and1) & 255); //@line 228 "lgc.c"
      var $12=$o; //@line 228 "lgc.c"
      var $gch=$12; //@line 228 "lgc.c"
      var $marked=(($gch+5)|0); //@line 228 "lgc.c"
      HEAP8[($marked)]=$conv2; //@line 228 "lgc.c"
      var $13=$tt_addr; //@line 229 "lgc.c"
      var $conv3=(($13) & 255); //@line 229 "lgc.c"
      var $14=$o; //@line 229 "lgc.c"
      var $gch4=$14; //@line 229 "lgc.c"
      var $tt5=(($gch4+4)|0); //@line 229 "lgc.c"
      HEAP8[($tt5)]=$conv3; //@line 229 "lgc.c"
      var $15=$list_addr; //@line 230 "lgc.c"
      var $16=HEAP32[(($15)>>2)]; //@line 230 "lgc.c"
      var $17=$o; //@line 230 "lgc.c"
      var $gch6=$17; //@line 230 "lgc.c"
      var $next=(($gch6)|0); //@line 230 "lgc.c"
      HEAP32[(($next)>>2)]=$16; //@line 230 "lgc.c"
      var $18=$o; //@line 231 "lgc.c"
      var $19=$list_addr; //@line 231 "lgc.c"
      HEAP32[(($19)>>2)]=$18; //@line 231 "lgc.c"
      var $20=$o; //@line 232 "lgc.c"

      return $20; //@line 232 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z11luaC_newobjP9lua_StateijPP8GCObjecti["X"]=1;

function __ZL11sweeptoliveP9lua_StatePP8GCObjectPi($L, $p, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $p_addr;
      var $n_addr;
      var $old;
      var $i;
      $L_addr=$L;
      $p_addr=$p;
      $n_addr=$n;
      var $0=$p_addr; //@line 761 "lgc.c"
      $old=$0; //@line 761 "lgc.c"
      $i=0; //@line 762 "lgc.c"
      label = 3; break; //@line 763 "lgc.c"
    case 3: 
      var $1=$i; //@line 764 "lgc.c"
      var $inc=((($1)+(1))|0); //@line 764 "lgc.c"
      $i=$inc; //@line 764 "lgc.c"
      var $2=$L_addr; //@line 765 "lgc.c"
      var $3=$p_addr; //@line 765 "lgc.c"
      var $call=__ZL9sweeplistP9lua_StatePP8GCObjectj($2, $3, 1); //@line 765 "lgc.c"
      $p_addr=$call; //@line 765 "lgc.c"
      label = 4; break; //@line 766 "lgc.c"
    case 4: 
      var $4=$p_addr; //@line 766 "lgc.c"
      var $5=$old; //@line 766 "lgc.c"
      var $cmp=(($4)|0)==(($5)|0); //@line 766 "lgc.c"
      if ($cmp) { label = 3; break; } else { label = 5; break; } //@line 766 "lgc.c"
    case 5: 
      var $6=$n_addr; //@line 767 "lgc.c"
      var $tobool=(($6)|0)!=0; //@line 767 "lgc.c"
      if ($tobool) { label = 6; break; } else { label = 7; break; } //@line 767 "lgc.c"
    case 6: 
      var $7=$i; //@line 767 "lgc.c"
      var $8=$n_addr; //@line 767 "lgc.c"
      var $9=HEAP32[(($8)>>2)]; //@line 767 "lgc.c"
      var $add=((($9)+($7))|0); //@line 767 "lgc.c"
      HEAP32[(($8)>>2)]=$add; //@line 767 "lgc.c"
      label = 7; break; //@line 767 "lgc.c"
    case 7: 
      var $10=$p_addr; //@line 768 "lgc.c"

      return $10; //@line 768 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}


function __Z16luaC_runtilstateP9lua_Statei($L, $statesmask) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $statesmask_addr;
      var $g;
      $L_addr=$L;
      $statesmask_addr=$statesmask;
      var $0=$L_addr; //@line 1100 "lgc.c"
      var $l_G=(($0+12)|0); //@line 1100 "lgc.c"
      var $1=HEAP32[(($l_G)>>2)]; //@line 1100 "lgc.c"
      $g=$1; //@line 1100 "lgc.c"
      label = 3; break; //@line 1101 "lgc.c"
    case 3: 
      var $2=$statesmask_addr; //@line 1101 "lgc.c"
      var $3=$g; //@line 1101 "lgc.c"
      var $gcstate=(($3+53)|0); //@line 1101 "lgc.c"
      var $4=HEAP8[($gcstate)]; //@line 1101 "lgc.c"
      var $conv=(($4)&255); //@line 1101 "lgc.c"
      var $shl=1 << $conv; //@line 1101 "lgc.c"
      var $and=$2 & $shl; //@line 1101 "lgc.c"
      var $tobool=(($and)|0)!=0; //@line 1101 "lgc.c"
      var $lnot=$tobool ^ 1; //@line 1101 "lgc.c"
      if ($lnot) { label = 4; break; } else { label = 5; break; } //@line 1101 "lgc.c"
    case 4: 
      var $5=$L_addr; //@line 1102 "lgc.c"
      var $call=__ZL10singlestepP9lua_State($5); //@line 1102 "lgc.c"
      label = 3; break; //@line 1102 "lgc.c"
    case 5: 

      return; //@line 1103 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}


function __ZL10entersweepP9lua_State($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $L_addr;
  var $g;
  var $n=__stackBase__;
  $L_addr=$L;
  var $0=$L_addr; //@line 924 "lgc.c"
  var $l_G=(($0+12)|0); //@line 924 "lgc.c"
  var $1=HEAP32[(($l_G)>>2)]; //@line 924 "lgc.c"
  $g=$1; //@line 924 "lgc.c"
  HEAP32[(($n)>>2)]=0; //@line 925 "lgc.c"
  var $2=$g; //@line 926 "lgc.c"
  var $gcstate=(($2+53)|0); //@line 926 "lgc.c"
  HEAP8[($gcstate)]=2; //@line 926 "lgc.c"
  var $3=$g; //@line 929 "lgc.c"
  var $sweepstrgc=(($3+56)|0); //@line 929 "lgc.c"
  HEAP32[(($sweepstrgc)>>2)]=0; //@line 929 "lgc.c"
  var $4=$L_addr; //@line 930 "lgc.c"
  var $5=$g; //@line 930 "lgc.c"
  var $finobj=(($5+64)|0); //@line 930 "lgc.c"
  var $call=__ZL11sweeptoliveP9lua_StatePP8GCObjectPi($4, $finobj, $n); //@line 930 "lgc.c"
  var $6=$g; //@line 930 "lgc.c"
  var $sweepfin=(($6+72)|0); //@line 930 "lgc.c"
  HEAP32[(($sweepfin)>>2)]=$call; //@line 930 "lgc.c"
  var $7=$L_addr; //@line 931 "lgc.c"
  var $8=$g; //@line 931 "lgc.c"
  var $allgc=(($8+60)|0); //@line 931 "lgc.c"
  var $call1=__ZL11sweeptoliveP9lua_StatePP8GCObjectPi($7, $allgc, $n); //@line 931 "lgc.c"
  var $9=$g; //@line 931 "lgc.c"
  var $sweepgc=(($9+68)|0); //@line 931 "lgc.c"
  HEAP32[(($sweepgc)>>2)]=$call1; //@line 931 "lgc.c"
  var $10=HEAP32[(($n)>>2)]; //@line 932 "lgc.c"
  STACKTOP = __stackBase__;
  return $10; //@line 932 "lgc.c"
}


function __ZL24callallpendingfinalizersP9lua_Statei($L, $propagateerrors) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $propagateerrors_addr;
      var $g;
      $L_addr=$L;
      $propagateerrors_addr=$propagateerrors;
      var $0=$L_addr; //@line 962 "lgc.c"
      var $l_G=(($0+12)|0); //@line 962 "lgc.c"
      var $1=HEAP32[(($l_G)>>2)]; //@line 962 "lgc.c"
      $g=$1; //@line 962 "lgc.c"
      label = 3; break; //@line 963 "lgc.c"
    case 3: 
      var $2=$g; //@line 963 "lgc.c"
      var $tobefnz=(($2+96)|0); //@line 963 "lgc.c"
      var $3=HEAP32[(($tobefnz)>>2)]; //@line 963 "lgc.c"
      var $tobool=(($3)|0)!=0; //@line 963 "lgc.c"
      if ($tobool) { label = 4; break; } else { label = 5; break; } //@line 963 "lgc.c"
    case 4: 
      var $4=$g; //@line 964 "lgc.c"
      var $tobefnz1=(($4+96)|0); //@line 964 "lgc.c"
      var $5=HEAP32[(($tobefnz1)>>2)]; //@line 964 "lgc.c"
      var $gch=$5; //@line 964 "lgc.c"
      var $marked=(($gch+5)|0); //@line 964 "lgc.c"
      var $6=HEAP8[($marked)]; //@line 964 "lgc.c"
      var $conv=(($6)&255); //@line 964 "lgc.c"
      var $and=$conv & 191; //@line 964 "lgc.c"
      var $conv2=(($and) & 255); //@line 964 "lgc.c"
      HEAP8[($marked)]=$conv2; //@line 964 "lgc.c"
      var $7=$L_addr; //@line 965 "lgc.c"
      var $8=$propagateerrors_addr; //@line 965 "lgc.c"
      __ZL4GCTMP9lua_Statei($7, $8); //@line 965 "lgc.c"
      label = 3; break; //@line 966 "lgc.c"
    case 5: 

      return; //@line 967 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}


function __ZL9sweeplistP9lua_StatePP8GCObjectj($L, $p, $count) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $p_addr;
      var $count_addr;
      var $g;
      var $ow;
      var $toclear;
      var $toset;
      var $tostop;
      var $curr;
      var $marked;
      $L_addr=$L;
      $p_addr=$p;
      $count_addr=$count;
      var $0=$L_addr; //@line 722 "lgc.c"
      var $l_G=(($0+12)|0); //@line 722 "lgc.c"
      var $1=HEAP32[(($l_G)>>2)]; //@line 722 "lgc.c"
      $g=$1; //@line 722 "lgc.c"
      var $2=$g; //@line 723 "lgc.c"
      var $currentwhite=(($2+52)|0); //@line 723 "lgc.c"
      var $3=HEAP8[($currentwhite)]; //@line 723 "lgc.c"
      var $conv=(($3)&255); //@line 723 "lgc.c"
      var $xor=$conv ^ 3; //@line 723 "lgc.c"
      $ow=$xor; //@line 723 "lgc.c"
      var $4=$g; //@line 726 "lgc.c"
      var $gckind=(($4+54)|0); //@line 726 "lgc.c"
      var $5=HEAP8[($gckind)]; //@line 726 "lgc.c"
      var $conv1=(($5)&255); //@line 726 "lgc.c"
      var $cmp=(($conv1)|0)==2; //@line 726 "lgc.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 726 "lgc.c"
    case 3: 
      $toclear=-1; //@line 727 "lgc.c"
      $toset=64; //@line 728 "lgc.c"
      $tostop=64; //@line 729 "lgc.c"
      label = 5; break; //@line 730 "lgc.c"
    case 4: 
      $toclear=-72; //@line 732 "lgc.c"
      var $6=$g; //@line 733 "lgc.c"
      var $currentwhite2=(($6+52)|0); //@line 733 "lgc.c"
      var $7=HEAP8[($currentwhite2)]; //@line 733 "lgc.c"
      var $conv3=(($7)&255); //@line 733 "lgc.c"
      var $and=$conv3 & 3; //@line 733 "lgc.c"
      var $conv4=(($and) & 255); //@line 733 "lgc.c"
      var $conv5=(($conv4)&255); //@line 733 "lgc.c"
      $toset=$conv5; //@line 733 "lgc.c"
      $tostop=0; //@line 734 "lgc.c"
      label = 5; break;
    case 5: 
      label = 6; break; //@line 736 "lgc.c"
    case 6: 
      var $8=$p_addr; //@line 736 "lgc.c"
      var $9=HEAP32[(($8)>>2)]; //@line 736 "lgc.c"
      var $cmp6=(($9)|0)!=0; //@line 736 "lgc.c"
      if ($cmp6) { label = 7; break; } else { var $11 = 0;label = 8; break; } //@line 736 "lgc.c"
    case 7: 
      var $10=$count_addr; //@line 736 "lgc.c"
      var $dec=((($10)-(1))|0); //@line 736 "lgc.c"
      $count_addr=$dec; //@line 736 "lgc.c"
      var $cmp7=(($10)>>>0) > 0; //@line 736 "lgc.c"
      var $11 = $cmp7;label = 8; break;
    case 8: 
      var $11;
      if ($11) { label = 9; break; } else { label = 17; break; }
    case 9: 
      var $12=$p_addr; //@line 737 "lgc.c"
      var $13=HEAP32[(($12)>>2)]; //@line 737 "lgc.c"
      $curr=$13; //@line 737 "lgc.c"
      var $14=$curr; //@line 738 "lgc.c"
      var $gch=$14; //@line 738 "lgc.c"
      var $marked8=(($gch+5)|0); //@line 738 "lgc.c"
      var $15=HEAP8[($marked8)]; //@line 738 "lgc.c"
      var $conv9=(($15)&255); //@line 738 "lgc.c"
      $marked=$conv9; //@line 738 "lgc.c"
      var $16=$marked; //@line 739 "lgc.c"
      var $xor10=$16 ^ 3; //@line 739 "lgc.c"
      var $17=$ow; //@line 739 "lgc.c"
      var $and11=$xor10 & $17; //@line 739 "lgc.c"
      var $tobool=(($and11)|0)!=0; //@line 739 "lgc.c"
      if ($tobool) { label = 11; break; } else { label = 10; break; } //@line 739 "lgc.c"
    case 10: 
      var $18=$curr; //@line 740 "lgc.c"
      var $gch13=$18; //@line 740 "lgc.c"
      var $next=(($gch13)|0); //@line 740 "lgc.c"
      var $19=HEAP32[(($next)>>2)]; //@line 740 "lgc.c"
      var $20=$p_addr; //@line 740 "lgc.c"
      HEAP32[(($20)>>2)]=$19; //@line 740 "lgc.c"
      var $21=$L_addr; //@line 741 "lgc.c"
      var $22=$curr; //@line 741 "lgc.c"
      __ZL7freeobjP9lua_StateP8GCObject($21, $22); //@line 741 "lgc.c"
      label = 16; break; //@line 742 "lgc.c"
    case 11: 
      var $23=$marked; //@line 744 "lgc.c"
      var $24=$tostop; //@line 744 "lgc.c"
      var $and15=$23 & $24; //@line 744 "lgc.c"
      var $tobool16=(($and15)|0)!=0; //@line 744 "lgc.c"
      if ($tobool16) { label = 12; break; } else { label = 13; break; } //@line 744 "lgc.c"
    case 12: 
      $retval=0; //@line 745 "lgc.c"
      label = 21; break; //@line 745 "lgc.c"
    case 13: 
      var $25=$curr; //@line 746 "lgc.c"
      var $gch19=$25; //@line 746 "lgc.c"
      var $tt=(($gch19+4)|0); //@line 746 "lgc.c"
      var $26=HEAP8[($tt)]; //@line 746 "lgc.c"
      var $conv20=(($26)&255); //@line 746 "lgc.c"
      var $cmp21=(($conv20)|0)==8; //@line 746 "lgc.c"
      if ($cmp21) { label = 14; break; } else { label = 15; break; } //@line 746 "lgc.c"
    case 14: 
      var $27=$L_addr; //@line 747 "lgc.c"
      var $28=$curr; //@line 747 "lgc.c"
      var $th=$28; //@line 747 "lgc.c"
      __ZL11sweepthreadP9lua_StateS0_($27, $th); //@line 747 "lgc.c"
      label = 15; break; //@line 747 "lgc.c"
    case 15: 
      var $29=$marked; //@line 749 "lgc.c"
      var $30=$toclear; //@line 749 "lgc.c"
      var $and24=$29 & $30; //@line 749 "lgc.c"
      var $31=$toset; //@line 749 "lgc.c"
      var $or=$and24 | $31; //@line 749 "lgc.c"
      var $conv25=(($or) & 255); //@line 749 "lgc.c"
      var $32=$curr; //@line 749 "lgc.c"
      var $gch26=$32; //@line 749 "lgc.c"
      var $marked27=(($gch26+5)|0); //@line 749 "lgc.c"
      HEAP8[($marked27)]=$conv25; //@line 749 "lgc.c"
      var $33=$curr; //@line 750 "lgc.c"
      var $gch28=$33; //@line 750 "lgc.c"
      var $next29=(($gch28)|0); //@line 750 "lgc.c"
      $p_addr=$next29; //@line 750 "lgc.c"
      label = 16; break;
    case 16: 
      label = 6; break; //@line 752 "lgc.c"
    case 17: 
      var $34=$p_addr; //@line 753 "lgc.c"
      var $35=HEAP32[(($34)>>2)]; //@line 753 "lgc.c"
      var $cmp31=(($35)|0)==0; //@line 753 "lgc.c"
      if ($cmp31) { label = 18; break; } else { label = 19; break; } //@line 753 "lgc.c"
    case 18: 
      var $cond = 0;label = 20; break; //@line 753 "lgc.c"
    case 19: 
      var $36=$p_addr; //@line 753 "lgc.c"
      var $cond = $36;label = 20; break; //@line 753 "lgc.c"
    case 20: 
      var $cond; //@line 753 "lgc.c"
      $retval=$cond; //@line 753 "lgc.c"
      label = 21; break; //@line 753 "lgc.c"
    case 21: 
      var $37=$retval; //@line 754 "lgc.c"

      return $37; //@line 754 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL9sweeplistP9lua_StatePP8GCObjectj["X"]=1;

function __ZL10singlestepP9lua_State($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $g;
      var $oldtrav;
      var $work;
      var $sw;
      var $i;
      var $mt=__stackBase__;
      $L_addr=$L;
      var $0=$L_addr; //@line 1028 "lgc.c"
      var $l_G=(($0+12)|0); //@line 1028 "lgc.c"
      var $1=HEAP32[(($l_G)>>2)]; //@line 1028 "lgc.c"
      $g=$1; //@line 1028 "lgc.c"
      var $2=$g; //@line 1029 "lgc.c"
      var $gcstate=(($2+53)|0); //@line 1029 "lgc.c"
      var $3=HEAP8[($gcstate)]; //@line 1029 "lgc.c"
      var $conv=(($3)&255); //@line 1029 "lgc.c"
      if ((($conv)|0)==5) {
        label = 3; break;
      }
      else if ((($conv)|0)==0) {
        label = 6; break;
      }
      else if ((($conv)|0)==2) {
        label = 9; break;
      }
      else if ((($conv)|0)==3) {
        label = 18; break;
      }
      else if ((($conv)|0)==4) {
        label = 21; break;
      }
      else {
      label = 24; break;
      }
      
    case 3: 
      var $4=$g; //@line 1031 "lgc.c"
      var $GCmemtrav=(($4+16)|0); //@line 1031 "lgc.c"
      HEAP32[(($GCmemtrav)>>2)]=0; //@line 1031 "lgc.c"
      var $5=$g; //@line 1032 "lgc.c"
      var $gckind=(($5+54)|0); //@line 1032 "lgc.c"
      var $6=HEAP8[($gckind)]; //@line 1032 "lgc.c"
      var $conv1=(($6)&255); //@line 1032 "lgc.c"
      var $cmp=(($conv1)|0)==2; //@line 1032 "lgc.c"
      if ($cmp) { label = 5; break; } else { label = 4; break; } //@line 1032 "lgc.c"
    case 4: 
      var $7=$g; //@line 1033 "lgc.c"
      __ZL8markrootP12global_State($7); //@line 1033 "lgc.c"
      label = 5; break; //@line 1033 "lgc.c"
    case 5: 
      var $8=$g; //@line 1037 "lgc.c"
      var $gcstate2=(($8+53)|0); //@line 1037 "lgc.c"
      HEAP8[($gcstate2)]=0; //@line 1037 "lgc.c"
      var $9=$g; //@line 1038 "lgc.c"
      var $GCmemtrav3=(($9+16)|0); //@line 1038 "lgc.c"
      var $10=HEAP32[(($GCmemtrav3)>>2)]; //@line 1038 "lgc.c"
      $retval=$10; //@line 1038 "lgc.c"
      label = 25; break; //@line 1038 "lgc.c"
    case 6: 
      var $11=$g; //@line 1041 "lgc.c"
      var $gray=(($11+76)|0); //@line 1041 "lgc.c"
      var $12=HEAP32[(($gray)>>2)]; //@line 1041 "lgc.c"
      var $tobool=(($12)|0)!=0; //@line 1041 "lgc.c"
      if ($tobool) { label = 7; break; } else { label = 8; break; } //@line 1041 "lgc.c"
    case 7: 
      var $13=$g; //@line 1042 "lgc.c"
      var $GCmemtrav6=(($13+16)|0); //@line 1042 "lgc.c"
      var $14=HEAP32[(($GCmemtrav6)>>2)]; //@line 1042 "lgc.c"
      $oldtrav=$14; //@line 1042 "lgc.c"
      var $15=$g; //@line 1043 "lgc.c"
      __ZL13propagatemarkP12global_State($15); //@line 1043 "lgc.c"
      var $16=$g; //@line 1044 "lgc.c"
      var $GCmemtrav7=(($16+16)|0); //@line 1044 "lgc.c"
      var $17=HEAP32[(($GCmemtrav7)>>2)]; //@line 1044 "lgc.c"
      var $18=$oldtrav; //@line 1044 "lgc.c"
      var $sub=((($17)-($18))|0); //@line 1044 "lgc.c"
      $retval=$sub; //@line 1044 "lgc.c"
      label = 25; break; //@line 1044 "lgc.c"
    case 8: 
      var $19=$g; //@line 1049 "lgc.c"
      var $gcstate8=(($19+53)|0); //@line 1049 "lgc.c"
      HEAP8[($gcstate8)]=1; //@line 1049 "lgc.c"
      var $20=$g; //@line 1050 "lgc.c"
      var $GCmemtrav9=(($20+16)|0); //@line 1050 "lgc.c"
      var $21=HEAP32[(($GCmemtrav9)>>2)]; //@line 1050 "lgc.c"
      var $22=$g; //@line 1050 "lgc.c"
      var $GCestimate=(($22+20)|0); //@line 1050 "lgc.c"
      HEAP32[(($GCestimate)>>2)]=$21; //@line 1050 "lgc.c"
      var $23=$L_addr; //@line 1051 "lgc.c"
      var $call=__ZL6atomicP9lua_State($23); //@line 1051 "lgc.c"
      $work=$call; //@line 1051 "lgc.c"
      var $24=$work; //@line 1052 "lgc.c"
      var $25=$g; //@line 1052 "lgc.c"
      var $GCestimate10=(($25+20)|0); //@line 1052 "lgc.c"
      var $26=HEAP32[(($GCestimate10)>>2)]; //@line 1052 "lgc.c"
      var $add=((($26)+($24))|0); //@line 1052 "lgc.c"
      HEAP32[(($GCestimate10)>>2)]=$add; //@line 1052 "lgc.c"
      var $27=$L_addr; //@line 1053 "lgc.c"
      var $call11=__ZL10entersweepP9lua_State($27); //@line 1053 "lgc.c"
      $sw=$call11; //@line 1053 "lgc.c"
      var $28=$work; //@line 1054 "lgc.c"
      var $29=$sw; //@line 1054 "lgc.c"
      var $mul=((($29)*(5))&-1); //@line 1054 "lgc.c"
      var $add12=((($28)+($mul))|0); //@line 1054 "lgc.c"
      $retval=$add12; //@line 1054 "lgc.c"
      label = 25; break; //@line 1054 "lgc.c"
    case 9: 
      $i=0; //@line 1059 "lgc.c"
      label = 10; break; //@line 1059 "lgc.c"
    case 10: 
      var $30=$i; //@line 1059 "lgc.c"
      var $cmp14=(($30)|0) < 80; //@line 1059 "lgc.c"
      if ($cmp14) { label = 11; break; } else { var $36 = 0;label = 12; break; } //@line 1059 "lgc.c"
    case 11: 
      var $31=$g; //@line 1059 "lgc.c"
      var $sweepstrgc=(($31+56)|0); //@line 1059 "lgc.c"
      var $32=HEAP32[(($sweepstrgc)>>2)]; //@line 1059 "lgc.c"
      var $33=$i; //@line 1059 "lgc.c"
      var $add15=((($32)+($33))|0); //@line 1059 "lgc.c"
      var $34=$g; //@line 1059 "lgc.c"
      var $strt=(($34+24)|0); //@line 1059 "lgc.c"
      var $size=(($strt+8)|0); //@line 1059 "lgc.c"
      var $35=HEAP32[(($size)>>2)]; //@line 1059 "lgc.c"
      var $cmp16=(($add15)|0) < (($35)|0); //@line 1059 "lgc.c"
      var $36 = $cmp16;label = 12; break;
    case 12: 
      var $36;
      if ($36) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $37=$L_addr; //@line 1060 "lgc.c"
      var $38=$g; //@line 1060 "lgc.c"
      var $sweepstrgc17=(($38+56)|0); //@line 1060 "lgc.c"
      var $39=HEAP32[(($sweepstrgc17)>>2)]; //@line 1060 "lgc.c"
      var $40=$i; //@line 1060 "lgc.c"
      var $add18=((($39)+($40))|0); //@line 1060 "lgc.c"
      var $41=$g; //@line 1060 "lgc.c"
      var $strt19=(($41+24)|0); //@line 1060 "lgc.c"
      var $hash=(($strt19)|0); //@line 1060 "lgc.c"
      var $42=HEAP32[(($hash)>>2)]; //@line 1060 "lgc.c"
      var $arrayidx=(($42+($add18<<2))|0); //@line 1060 "lgc.c"
      var $call20=__ZL9sweeplistP9lua_StatePP8GCObjectj($37, $arrayidx, -3); //@line 1060 "lgc.c"
      label = 14; break; //@line 1060 "lgc.c"
    case 14: 
      var $43=$i; //@line 1059 "lgc.c"
      var $inc=((($43)+(1))|0); //@line 1059 "lgc.c"
      $i=$inc; //@line 1059 "lgc.c"
      label = 10; break; //@line 1059 "lgc.c"
    case 15: 
      var $44=$i; //@line 1061 "lgc.c"
      var $45=$g; //@line 1061 "lgc.c"
      var $sweepstrgc21=(($45+56)|0); //@line 1061 "lgc.c"
      var $46=HEAP32[(($sweepstrgc21)>>2)]; //@line 1061 "lgc.c"
      var $add22=((($46)+($44))|0); //@line 1061 "lgc.c"
      HEAP32[(($sweepstrgc21)>>2)]=$add22; //@line 1061 "lgc.c"
      var $47=$g; //@line 1062 "lgc.c"
      var $sweepstrgc23=(($47+56)|0); //@line 1062 "lgc.c"
      var $48=HEAP32[(($sweepstrgc23)>>2)]; //@line 1062 "lgc.c"
      var $49=$g; //@line 1062 "lgc.c"
      var $strt24=(($49+24)|0); //@line 1062 "lgc.c"
      var $size25=(($strt24+8)|0); //@line 1062 "lgc.c"
      var $50=HEAP32[(($size25)>>2)]; //@line 1062 "lgc.c"
      var $cmp26=(($48)|0) >= (($50)|0); //@line 1062 "lgc.c"
      if ($cmp26) { label = 16; break; } else { label = 17; break; } //@line 1062 "lgc.c"
    case 16: 
      var $51=$g; //@line 1063 "lgc.c"
      var $gcstate28=(($51+53)|0); //@line 1063 "lgc.c"
      HEAP8[($gcstate28)]=3; //@line 1063 "lgc.c"
      label = 17; break; //@line 1063 "lgc.c"
    case 17: 
      var $52=$i; //@line 1064 "lgc.c"
      var $mul30=((($52)*(5))&-1); //@line 1064 "lgc.c"
      $retval=$mul30; //@line 1064 "lgc.c"
      label = 25; break; //@line 1064 "lgc.c"
    case 18: 
      var $53=$g; //@line 1067 "lgc.c"
      var $sweepfin=(($53+72)|0); //@line 1067 "lgc.c"
      var $54=HEAP32[(($sweepfin)>>2)]; //@line 1067 "lgc.c"
      var $tobool32=(($54)|0)!=0; //@line 1067 "lgc.c"
      if ($tobool32) { label = 19; break; } else { label = 20; break; } //@line 1067 "lgc.c"
    case 19: 
      var $55=$L_addr; //@line 1068 "lgc.c"
      var $56=$g; //@line 1068 "lgc.c"
      var $sweepfin34=(($56+72)|0); //@line 1068 "lgc.c"
      var $57=HEAP32[(($sweepfin34)>>2)]; //@line 1068 "lgc.c"
      var $call35=__ZL9sweeplistP9lua_StatePP8GCObjectj($55, $57, 80); //@line 1068 "lgc.c"
      var $58=$g; //@line 1068 "lgc.c"
      var $sweepfin36=(($58+72)|0); //@line 1068 "lgc.c"
      HEAP32[(($sweepfin36)>>2)]=$call35; //@line 1068 "lgc.c"
      $retval=400; //@line 1069 "lgc.c"
      label = 25; break; //@line 1069 "lgc.c"
    case 20: 
      var $59=$g; //@line 1072 "lgc.c"
      var $gcstate38=(($59+53)|0); //@line 1072 "lgc.c"
      HEAP8[($gcstate38)]=4; //@line 1072 "lgc.c"
      $retval=0; //@line 1073 "lgc.c"
      label = 25; break; //@line 1073 "lgc.c"
    case 21: 
      var $60=$g; //@line 1077 "lgc.c"
      var $sweepgc=(($60+68)|0); //@line 1077 "lgc.c"
      var $61=HEAP32[(($sweepgc)>>2)]; //@line 1077 "lgc.c"
      var $tobool40=(($61)|0)!=0; //@line 1077 "lgc.c"
      if ($tobool40) { label = 22; break; } else { label = 23; break; } //@line 1077 "lgc.c"
    case 22: 
      var $62=$L_addr; //@line 1078 "lgc.c"
      var $63=$g; //@line 1078 "lgc.c"
      var $sweepgc42=(($63+68)|0); //@line 1078 "lgc.c"
      var $64=HEAP32[(($sweepgc42)>>2)]; //@line 1078 "lgc.c"
      var $call43=__ZL9sweeplistP9lua_StatePP8GCObjectj($62, $64, 80); //@line 1078 "lgc.c"
      var $65=$g; //@line 1078 "lgc.c"
      var $sweepgc44=(($65+68)|0); //@line 1078 "lgc.c"
      HEAP32[(($sweepgc44)>>2)]=$call43; //@line 1078 "lgc.c"
      $retval=400; //@line 1079 "lgc.c"
      label = 25; break; //@line 1079 "lgc.c"
    case 23: 
      var $66=$g; //@line 1083 "lgc.c"
      var $mainthread=(($66+152)|0); //@line 1083 "lgc.c"
      var $67=HEAP32[(($mainthread)>>2)]; //@line 1083 "lgc.c"
      var $68=$67; //@line 1083 "lgc.c"
      HEAP32[(($mt)>>2)]=$68; //@line 1083 "lgc.c"
      var $69=$L_addr; //@line 1084 "lgc.c"
      var $call46=__ZL9sweeplistP9lua_StatePP8GCObjectj($69, $mt, 1); //@line 1084 "lgc.c"
      var $70=$L_addr; //@line 1085 "lgc.c"
      __ZL10checkSizesP9lua_State($70); //@line 1085 "lgc.c"
      var $71=$g; //@line 1086 "lgc.c"
      var $gcstate47=(($71+53)|0); //@line 1086 "lgc.c"
      HEAP8[($gcstate47)]=5; //@line 1086 "lgc.c"
      $retval=5; //@line 1087 "lgc.c"
      label = 25; break; //@line 1087 "lgc.c"
    case 24: 
      $retval=0; //@line 1090 "lgc.c"
      label = 25; break; //@line 1090 "lgc.c"
    case 25: 
      var $72=$retval; //@line 1092 "lgc.c"
      STACKTOP = __stackBase__;
      return $72; //@line 1092 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL10singlestepP9lua_State["X"]=1;

function __Z14luaC_forcestepP9lua_State($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $g;
      var $i;
      $L_addr=$L;
      var $0=$L_addr; //@line 1147 "lgc.c"
      var $l_G=(($0+12)|0); //@line 1147 "lgc.c"
      var $1=HEAP32[(($l_G)>>2)]; //@line 1147 "lgc.c"
      $g=$1; //@line 1147 "lgc.c"
      var $2=$g; //@line 1149 "lgc.c"
      var $gckind=(($2+54)|0); //@line 1149 "lgc.c"
      var $3=HEAP8[($gckind)]; //@line 1149 "lgc.c"
      var $conv=(($3)&255); //@line 1149 "lgc.c"
      var $cmp=(($conv)|0)==2; //@line 1149 "lgc.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 1149 "lgc.c"
    case 3: 
      var $4=$L_addr; //@line 1149 "lgc.c"
      __ZL22generationalcollectionP9lua_State($4); //@line 1149 "lgc.c"
      label = 5; break; //@line 1149 "lgc.c"
    case 4: 
      var $5=$L_addr; //@line 1150 "lgc.c"
      __ZL7incstepP9lua_State($5); //@line 1150 "lgc.c"
      label = 5; break;
    case 5: 
      $i=0; //@line 1152 "lgc.c"
      label = 6; break; //@line 1152 "lgc.c"
    case 6: 
      var $6=$g; //@line 1152 "lgc.c"
      var $tobefnz=(($6+96)|0); //@line 1152 "lgc.c"
      var $7=HEAP32[(($tobefnz)>>2)]; //@line 1152 "lgc.c"
      var $tobool=(($7)|0)!=0; //@line 1152 "lgc.c"
      if ($tobool) { label = 7; break; } else { var $12 = 0;label = 10; break; } //@line 1152 "lgc.c"
    case 7: 
      var $8=$i; //@line 1152 "lgc.c"
      var $cmp1=(($8)|0) < 4; //@line 1152 "lgc.c"
      if ($cmp1) { var $11 = 1;label = 9; break; } else { label = 8; break; } //@line 1152 "lgc.c"
    case 8: 
      var $9=$g; //@line 1152 "lgc.c"
      var $gcstate=(($9+53)|0); //@line 1152 "lgc.c"
      var $10=HEAP8[($gcstate)]; //@line 1152 "lgc.c"
      var $conv2=(($10)&255); //@line 1152 "lgc.c"
      var $cmp3=(($conv2)|0)==5; //@line 1152 "lgc.c"
      var $11 = $cmp3;label = 9; break; //@line 1152 "lgc.c"
    case 9: 
      var $11;
      var $12 = $11;label = 10; break;
    case 10: 
      var $12;
      if ($12) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $13=$L_addr; //@line 1153 "lgc.c"
      __ZL4GCTMP9lua_Statei($13, 1); //@line 1153 "lgc.c"
      label = 12; break; //@line 1153 "lgc.c"
    case 12: 
      var $14=$i; //@line 1152 "lgc.c"
      var $inc=((($14)+(1))|0); //@line 1152 "lgc.c"
      $i=$inc; //@line 1152 "lgc.c"
      label = 6; break; //@line 1152 "lgc.c"
    case 13: 

      return; //@line 1154 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}


function __ZL14udata2finalizeP12global_State($g) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $o;
      $g_addr=$g;
      var $0=$g_addr; //@line 792 "lgc.c"
      var $tobefnz=(($0+96)|0); //@line 792 "lgc.c"
      var $1=HEAP32[(($tobefnz)>>2)]; //@line 792 "lgc.c"
      $o=$1; //@line 792 "lgc.c"
      var $2=$o; //@line 794 "lgc.c"
      var $gch=$2; //@line 794 "lgc.c"
      var $next=(($gch)|0); //@line 794 "lgc.c"
      var $3=HEAP32[(($next)>>2)]; //@line 794 "lgc.c"
      var $4=$g_addr; //@line 794 "lgc.c"
      var $tobefnz1=(($4+96)|0); //@line 794 "lgc.c"
      HEAP32[(($tobefnz1)>>2)]=$3; //@line 794 "lgc.c"
      var $5=$g_addr; //@line 795 "lgc.c"
      var $allgc=(($5+60)|0); //@line 795 "lgc.c"
      var $6=HEAP32[(($allgc)>>2)]; //@line 795 "lgc.c"
      var $7=$o; //@line 795 "lgc.c"
      var $gch2=$7; //@line 795 "lgc.c"
      var $next3=(($gch2)|0); //@line 795 "lgc.c"
      HEAP32[(($next3)>>2)]=$6; //@line 795 "lgc.c"
      var $8=$o; //@line 796 "lgc.c"
      var $9=$g_addr; //@line 796 "lgc.c"
      var $allgc4=(($9+60)|0); //@line 796 "lgc.c"
      HEAP32[(($allgc4)>>2)]=$8; //@line 796 "lgc.c"
      var $10=$o; //@line 797 "lgc.c"
      var $gch5=$10; //@line 797 "lgc.c"
      var $marked=(($gch5+5)|0); //@line 797 "lgc.c"
      var $11=HEAP8[($marked)]; //@line 797 "lgc.c"
      var $conv=(($11)&255); //@line 797 "lgc.c"
      var $and=$conv & 239; //@line 797 "lgc.c"
      var $conv6=(($and) & 255); //@line 797 "lgc.c"
      HEAP8[($marked)]=$conv6; //@line 797 "lgc.c"
      var $12=$g_addr; //@line 799 "lgc.c"
      var $gckind=(($12+54)|0); //@line 799 "lgc.c"
      var $13=HEAP8[($gckind)]; //@line 799 "lgc.c"
      var $conv7=(($13)&255); //@line 799 "lgc.c"
      var $cmp=(($conv7)|0)==2; //@line 799 "lgc.c"
      if ($cmp) { label = 5; break; } else { label = 3; break; } //@line 799 "lgc.c"
    case 3: 
      var $14=$g_addr; //@line 799 "lgc.c"
      var $gcstate=(($14+53)|0); //@line 799 "lgc.c"
      var $15=HEAP8[($gcstate)]; //@line 799 "lgc.c"
      var $conv8=(($15)&255); //@line 799 "lgc.c"
      var $cmp9=(($conv8)|0) <= 1; //@line 799 "lgc.c"
      if ($cmp9) { label = 5; break; } else { label = 4; break; } //@line 799 "lgc.c"
    case 4: 
      var $16=$o; //@line 800 "lgc.c"
      var $gch10=$16; //@line 800 "lgc.c"
      var $marked11=(($gch10+5)|0); //@line 800 "lgc.c"
      var $17=HEAP8[($marked11)]; //@line 800 "lgc.c"
      var $conv12=(($17)&255); //@line 800 "lgc.c"
      var $and13=$conv12 & -72; //@line 800 "lgc.c"
      var $18=$g_addr; //@line 800 "lgc.c"
      var $currentwhite=(($18+52)|0); //@line 800 "lgc.c"
      var $19=HEAP8[($currentwhite)]; //@line 800 "lgc.c"
      var $conv14=(($19)&255); //@line 800 "lgc.c"
      var $and15=$conv14 & 3; //@line 800 "lgc.c"
      var $conv16=(($and15) & 255); //@line 800 "lgc.c"
      var $conv17=(($conv16)&255); //@line 800 "lgc.c"
      var $or=$and13 | $conv17; //@line 800 "lgc.c"
      var $conv18=(($or) & 255); //@line 800 "lgc.c"
      var $20=$o; //@line 800 "lgc.c"
      var $gch19=$20; //@line 800 "lgc.c"
      var $marked20=(($gch19+5)|0); //@line 800 "lgc.c"
      HEAP8[($marked20)]=$conv18; //@line 800 "lgc.c"
      label = 5; break; //@line 800 "lgc.c"
    case 5: 
      var $21=$o; //@line 801 "lgc.c"

      return $21; //@line 801 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL14udata2finalizeP12global_State["X"]=1;

function __ZL22generationalcollectionP9lua_State($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $g;
      var $estimate;
      $L_addr=$L;
      var $0=$L_addr; //@line 1107 "lgc.c"
      var $l_G=(($0+12)|0); //@line 1107 "lgc.c"
      var $1=HEAP32[(($l_G)>>2)]; //@line 1107 "lgc.c"
      $g=$1; //@line 1107 "lgc.c"
      var $2=$g; //@line 1108 "lgc.c"
      var $GCestimate=(($2+20)|0); //@line 1108 "lgc.c"
      var $3=HEAP32[(($GCestimate)>>2)]; //@line 1108 "lgc.c"
      var $cmp=(($3)|0)==0; //@line 1108 "lgc.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 1108 "lgc.c"
    case 3: 
      var $4=$L_addr; //@line 1109 "lgc.c"
      __Z11luaC_fullgcP9lua_Statei($4, 0); //@line 1109 "lgc.c"
      var $5=$g; //@line 1110 "lgc.c"
      var $totalbytes=(($5+8)|0); //@line 1110 "lgc.c"
      var $6=HEAP32[(($totalbytes)>>2)]; //@line 1110 "lgc.c"
      var $7=$g; //@line 1110 "lgc.c"
      var $GCdebt=(($7+12)|0); //@line 1110 "lgc.c"
      var $8=HEAP32[(($GCdebt)>>2)]; //@line 1110 "lgc.c"
      var $add=((($6)+($8))|0); //@line 1110 "lgc.c"
      var $9=$g; //@line 1110 "lgc.c"
      var $GCestimate1=(($9+20)|0); //@line 1110 "lgc.c"
      HEAP32[(($GCestimate1)>>2)]=$add; //@line 1110 "lgc.c"
      label = 7; break; //@line 1111 "lgc.c"
    case 4: 
      var $10=$g; //@line 1113 "lgc.c"
      var $GCestimate2=(($10+20)|0); //@line 1113 "lgc.c"
      var $11=HEAP32[(($GCestimate2)>>2)]; //@line 1113 "lgc.c"
      $estimate=$11; //@line 1113 "lgc.c"
      var $12=$L_addr; //@line 1114 "lgc.c"
      __Z16luaC_runtilstateP9lua_Statei($12, -33); //@line 1114 "lgc.c"
      var $13=$L_addr; //@line 1115 "lgc.c"
      __Z16luaC_runtilstateP9lua_Statei($13, 32); //@line 1115 "lgc.c"
      var $14=$g; //@line 1116 "lgc.c"
      var $totalbytes3=(($14+8)|0); //@line 1116 "lgc.c"
      var $15=HEAP32[(($totalbytes3)>>2)]; //@line 1116 "lgc.c"
      var $16=$g; //@line 1116 "lgc.c"
      var $GCdebt4=(($16+12)|0); //@line 1116 "lgc.c"
      var $17=HEAP32[(($GCdebt4)>>2)]; //@line 1116 "lgc.c"
      var $add5=((($15)+($17))|0); //@line 1116 "lgc.c"
      var $18=$estimate; //@line 1116 "lgc.c"
      var $div=Math.floor(((($18)>>>0))/(100)); //@line 1116 "lgc.c"
      var $19=$g; //@line 1116 "lgc.c"
      var $gcmajorinc=(($19+140)|0); //@line 1116 "lgc.c"
      var $20=HEAP32[(($gcmajorinc)>>2)]; //@line 1116 "lgc.c"
      var $mul=Math.imul($div,$20); //@line 1116 "lgc.c"
      var $cmp6=(($add5)>>>0) > (($mul)>>>0); //@line 1116 "lgc.c"
      if ($cmp6) { label = 5; break; } else { label = 6; break; } //@line 1116 "lgc.c"
    case 5: 
      var $21=$g; //@line 1117 "lgc.c"
      var $GCestimate8=(($21+20)|0); //@line 1117 "lgc.c"
      HEAP32[(($GCestimate8)>>2)]=0; //@line 1117 "lgc.c"
      label = 6; break; //@line 1117 "lgc.c"
    case 6: 
      label = 7; break;
    case 7: 
      var $22=$g; //@line 1119 "lgc.c"
      var $23=$g; //@line 1119 "lgc.c"
      var $totalbytes10=(($23+8)|0); //@line 1119 "lgc.c"
      var $24=HEAP32[(($totalbytes10)>>2)]; //@line 1119 "lgc.c"
      var $25=$g; //@line 1119 "lgc.c"
      var $GCdebt11=(($25+12)|0); //@line 1119 "lgc.c"
      var $26=HEAP32[(($GCdebt11)>>2)]; //@line 1119 "lgc.c"
      var $add12=((($24)+($26))|0); //@line 1119 "lgc.c"
      var $div13=Math.floor(((($add12)>>>0))/(200)); //@line 1119 "lgc.c"
      var $sub=(((-$div13))|0); //@line 1119 "lgc.c"
      var $27=$g; //@line 1119 "lgc.c"
      var $gcpause=(($27+136)|0); //@line 1119 "lgc.c"
      var $28=HEAP32[(($gcpause)>>2)]; //@line 1119 "lgc.c"
      var $mul14=Math.imul($sub,$28); //@line 1119 "lgc.c"
      __Z12luaE_setdebtP12global_Statei($22, $mul14); //@line 1119 "lgc.c"

      return; //@line 1120 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL22generationalcollectionP9lua_State["X"]=1;

function __ZL7incstepP9lua_State($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $g;
      var $debt;
      var $stepmul;
      var $work;
      $L_addr=$L;
      var $0=$L_addr; //@line 1124 "lgc.c"
      var $l_G=(($0+12)|0); //@line 1124 "lgc.c"
      var $1=HEAP32[(($l_G)>>2)]; //@line 1124 "lgc.c"
      $g=$1; //@line 1124 "lgc.c"
      var $2=$g; //@line 1125 "lgc.c"
      var $GCdebt=(($2+12)|0); //@line 1125 "lgc.c"
      var $3=HEAP32[(($GCdebt)>>2)]; //@line 1125 "lgc.c"
      $debt=$3; //@line 1125 "lgc.c"
      var $4=$g; //@line 1126 "lgc.c"
      var $gcstepmul=(($4+144)|0); //@line 1126 "lgc.c"
      var $5=HEAP32[(($gcstepmul)>>2)]; //@line 1126 "lgc.c"
      $stepmul=$5; //@line 1126 "lgc.c"
      var $6=$stepmul; //@line 1127 "lgc.c"
      var $cmp=(($6)|0) < 40; //@line 1127 "lgc.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 1127 "lgc.c"
    case 3: 
      $stepmul=40; //@line 1127 "lgc.c"
      label = 4; break; //@line 1127 "lgc.c"
    case 4: 
      var $7=$debt; //@line 1129 "lgc.c"
      var $div=((((($7)|0))/(200))&-1); //@line 1129 "lgc.c"
      var $add=((($div)+(1))|0); //@line 1129 "lgc.c"
      $debt=$add; //@line 1129 "lgc.c"
      var $8=$debt; //@line 1130 "lgc.c"
      var $9=$stepmul; //@line 1130 "lgc.c"
      var $div1=(((2147483644)/((($9)|0)))&-1); //@line 1130 "lgc.c"
      var $cmp2=(($8)|0) < (($div1)|0); //@line 1130 "lgc.c"
      if ($cmp2) { label = 5; break; } else { label = 6; break; } //@line 1130 "lgc.c"
    case 5: 
      var $10=$debt; //@line 1130 "lgc.c"
      var $11=$stepmul; //@line 1130 "lgc.c"
      var $mul=Math.imul($10,$11); //@line 1130 "lgc.c"
      var $cond = $mul;label = 7; break; //@line 1130 "lgc.c"
    case 6: 
      var $cond = 2147483644;label = 7; break; //@line 1130 "lgc.c"
    case 7: 
      var $cond; //@line 1130 "lgc.c"
      $debt=$cond; //@line 1130 "lgc.c"
      label = 8; break; //@line 1131 "lgc.c"
    case 8: 
      var $12=$L_addr; //@line 1132 "lgc.c"
      var $call=__ZL10singlestepP9lua_State($12); //@line 1132 "lgc.c"
      $work=$call; //@line 1132 "lgc.c"
      var $13=$work; //@line 1133 "lgc.c"
      var $14=$debt; //@line 1133 "lgc.c"
      var $sub=((($14)-($13))|0); //@line 1133 "lgc.c"
      $debt=$sub; //@line 1133 "lgc.c"
      label = 9; break; //@line 1134 "lgc.c"
    case 9: 
      var $15=$debt; //@line 1134 "lgc.c"
      var $cmp3=(($15)|0) > -1600; //@line 1134 "lgc.c"
      if ($cmp3) { label = 10; break; } else { var $18 = 0;label = 11; break; } //@line 1134 "lgc.c"
    case 10: 
      var $16=$g; //@line 1134 "lgc.c"
      var $gcstate=(($16+53)|0); //@line 1134 "lgc.c"
      var $17=HEAP8[($gcstate)]; //@line 1134 "lgc.c"
      var $conv=(($17)&255); //@line 1134 "lgc.c"
      var $cmp4=(($conv)|0)!=5; //@line 1134 "lgc.c"
      var $18 = $cmp4;label = 11; break;
    case 11: 
      var $18;
      if ($18) { label = 8; break; } else { label = 12; break; }
    case 12: 
      var $19=$g; //@line 1135 "lgc.c"
      var $gcstate5=(($19+53)|0); //@line 1135 "lgc.c"
      var $20=HEAP8[($gcstate5)]; //@line 1135 "lgc.c"
      var $conv6=(($20)&255); //@line 1135 "lgc.c"
      var $cmp7=(($conv6)|0)==5; //@line 1135 "lgc.c"
      if ($cmp7) { label = 13; break; } else { label = 14; break; } //@line 1135 "lgc.c"
    case 13: 
      var $21=$g; //@line 1136 "lgc.c"
      var $GCestimate=(($21+20)|0); //@line 1136 "lgc.c"
      var $22=HEAP32[(($GCestimate)>>2)]; //@line 1136 "lgc.c"
      var $div9=Math.floor(((($22)>>>0))/(200)); //@line 1136 "lgc.c"
      var $sub10=(((-$div9))|0); //@line 1136 "lgc.c"
      var $23=$g; //@line 1136 "lgc.c"
      var $gcpause=(($23+136)|0); //@line 1136 "lgc.c"
      var $24=HEAP32[(($gcpause)>>2)]; //@line 1136 "lgc.c"
      var $mul11=Math.imul($sub10,$24); //@line 1136 "lgc.c"
      $debt=$mul11; //@line 1136 "lgc.c"
      label = 15; break; //@line 1136 "lgc.c"
    case 14: 
      var $25=$debt; //@line 1138 "lgc.c"
      var $26=$stepmul; //@line 1138 "lgc.c"
      var $div12=((((($25)|0))/((($26)|0)))&-1); //@line 1138 "lgc.c"
      var $mul13=((($div12)*(200))&-1); //@line 1138 "lgc.c"
      $debt=$mul13; //@line 1138 "lgc.c"
      label = 15; break;
    case 15: 
      var $27=$g; //@line 1139 "lgc.c"
      var $28=$debt; //@line 1139 "lgc.c"
      __Z12luaE_setdebtP12global_Statei($27, $28); //@line 1139 "lgc.c"

      return; //@line 1140 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL7incstepP9lua_State["X"]=1;

function __Z9luaC_stepP9lua_State($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $g;
      $L_addr=$L;
      var $0=$L_addr; //@line 1161 "lgc.c"
      var $l_G=(($0+12)|0); //@line 1161 "lgc.c"
      var $1=HEAP32[(($l_G)>>2)]; //@line 1161 "lgc.c"
      $g=$1; //@line 1161 "lgc.c"
      var $2=$g; //@line 1162 "lgc.c"
      var $gcrunning=(($2+55)|0); //@line 1162 "lgc.c"
      var $3=HEAP8[($gcrunning)]; //@line 1162 "lgc.c"
      var $tobool=(($3 << 24) >> 24)!=0; //@line 1162 "lgc.c"
      if ($tobool) { label = 3; break; } else { label = 4; break; } //@line 1162 "lgc.c"
    case 3: 
      var $4=$L_addr; //@line 1162 "lgc.c"
      __Z14luaC_forcestepP9lua_State($4); //@line 1162 "lgc.c"
      label = 5; break; //@line 1162 "lgc.c"
    case 4: 
      var $5=$g; //@line 1163 "lgc.c"
      __Z12luaE_setdebtP12global_Statei($5, -1600); //@line 1163 "lgc.c"
      label = 5; break;
    case 5: 

      return; //@line 1164 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}


function __Z11luaC_fullgcP9lua_Statei($L, $isemergency) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $isemergency_addr;
      var $g;
      var $origkind;
      var $someblack;
      $L_addr=$L;
      $isemergency_addr=$isemergency;
      var $0=$L_addr; //@line 1173 "lgc.c"
      var $l_G=(($0+12)|0); //@line 1173 "lgc.c"
      var $1=HEAP32[(($l_G)>>2)]; //@line 1173 "lgc.c"
      $g=$1; //@line 1173 "lgc.c"
      var $2=$g; //@line 1174 "lgc.c"
      var $gckind=(($2+54)|0); //@line 1174 "lgc.c"
      var $3=HEAP8[($gckind)]; //@line 1174 "lgc.c"
      var $conv=(($3)&255); //@line 1174 "lgc.c"
      $origkind=$conv; //@line 1174 "lgc.c"
      var $4=$g; //@line 1175 "lgc.c"
      var $gckind1=(($4+54)|0); //@line 1175 "lgc.c"
      var $5=HEAP8[($gckind1)]; //@line 1175 "lgc.c"
      var $conv2=(($5)&255); //@line 1175 "lgc.c"
      var $cmp=(($conv2)|0)==2; //@line 1175 "lgc.c"
      if ($cmp) { var $8 = 1;label = 4; break; } else { label = 3; break; } //@line 1175 "lgc.c"
    case 3: 
      var $6=$g; //@line 1175 "lgc.c"
      var $gcstate=(($6+53)|0); //@line 1175 "lgc.c"
      var $7=HEAP8[($gcstate)]; //@line 1175 "lgc.c"
      var $conv3=(($7)&255); //@line 1175 "lgc.c"
      var $cmp4=(($conv3)|0) <= 1; //@line 1175 "lgc.c"
      var $8 = $cmp4;label = 4; break; //@line 1175 "lgc.c"
    case 4: 
      var $8;
      var $conv5=(($8)&1); //@line 1175 "lgc.c"
      $someblack=$conv5; //@line 1175 "lgc.c"
      var $9=$isemergency_addr; //@line 1177 "lgc.c"
      var $tobool=(($9)|0)!=0; //@line 1177 "lgc.c"
      if ($tobool) { label = 5; break; } else { label = 6; break; } //@line 1177 "lgc.c"
    case 5: 
      var $10=$g; //@line 1178 "lgc.c"
      var $gckind6=(($10+54)|0); //@line 1178 "lgc.c"
      HEAP8[($gckind6)]=1; //@line 1178 "lgc.c"
      label = 7; break; //@line 1178 "lgc.c"
    case 6: 
      var $11=$g; //@line 1180 "lgc.c"
      var $gckind7=(($11+54)|0); //@line 1180 "lgc.c"
      HEAP8[($gckind7)]=0; //@line 1180 "lgc.c"
      var $12=$L_addr; //@line 1181 "lgc.c"
      __ZL24callallpendingfinalizersP9lua_Statei($12, 1); //@line 1181 "lgc.c"
      label = 7; break;
    case 7: 
      var $13=$someblack; //@line 1183 "lgc.c"
      var $tobool8=(($13)|0)!=0; //@line 1183 "lgc.c"
      if ($tobool8) { label = 8; break; } else { label = 9; break; } //@line 1183 "lgc.c"
    case 8: 
      var $14=$L_addr; //@line 1186 "lgc.c"
      var $call=__ZL10entersweepP9lua_State($14); //@line 1186 "lgc.c"
      label = 9; break; //@line 1187 "lgc.c"
    case 9: 
      var $15=$L_addr; //@line 1189 "lgc.c"
      __Z16luaC_runtilstateP9lua_Statei($15, 32); //@line 1189 "lgc.c"
      var $16=$L_addr; //@line 1191 "lgc.c"
      __Z16luaC_runtilstateP9lua_Statei($16, -33); //@line 1191 "lgc.c"
      var $17=$L_addr; //@line 1192 "lgc.c"
      __Z16luaC_runtilstateP9lua_Statei($17, 32); //@line 1192 "lgc.c"
      var $18=$origkind; //@line 1193 "lgc.c"
      var $cmp11=(($18)|0)==2; //@line 1193 "lgc.c"
      if ($cmp11) { label = 10; break; } else { label = 11; break; } //@line 1193 "lgc.c"
    case 10: 
      var $19=$L_addr; //@line 1195 "lgc.c"
      __Z16luaC_runtilstateP9lua_Statei($19, 1); //@line 1195 "lgc.c"
      label = 11; break; //@line 1196 "lgc.c"
    case 11: 
      var $20=$origkind; //@line 1197 "lgc.c"
      var $conv14=(($20) & 255); //@line 1197 "lgc.c"
      var $21=$g; //@line 1197 "lgc.c"
      var $gckind15=(($21+54)|0); //@line 1197 "lgc.c"
      HEAP8[($gckind15)]=$conv14; //@line 1197 "lgc.c"
      var $22=$g; //@line 1198 "lgc.c"
      var $23=$g; //@line 1198 "lgc.c"
      var $totalbytes=(($23+8)|0); //@line 1198 "lgc.c"
      var $24=HEAP32[(($totalbytes)>>2)]; //@line 1198 "lgc.c"
      var $25=$g; //@line 1198 "lgc.c"
      var $GCdebt=(($25+12)|0); //@line 1198 "lgc.c"
      var $26=HEAP32[(($GCdebt)>>2)]; //@line 1198 "lgc.c"
      var $add=((($24)+($26))|0); //@line 1198 "lgc.c"
      var $div=Math.floor(((($add)>>>0))/(200)); //@line 1198 "lgc.c"
      var $sub=(((-$div))|0); //@line 1198 "lgc.c"
      var $27=$g; //@line 1198 "lgc.c"
      var $gcpause=(($27+136)|0); //@line 1198 "lgc.c"
      var $28=HEAP32[(($gcpause)>>2)]; //@line 1198 "lgc.c"
      var $mul=Math.imul($sub,$28); //@line 1198 "lgc.c"
      __Z12luaE_setdebtP12global_Statei($22, $mul); //@line 1198 "lgc.c"
      var $29=$isemergency_addr; //@line 1199 "lgc.c"
      var $tobool16=(($29)|0)!=0; //@line 1199 "lgc.c"
      if ($tobool16) { label = 13; break; } else { label = 12; break; } //@line 1199 "lgc.c"
    case 12: 
      var $30=$L_addr; //@line 1200 "lgc.c"
      __ZL24callallpendingfinalizersP9lua_Statei($30, 1); //@line 1200 "lgc.c"
      label = 13; break; //@line 1200 "lgc.c"
    case 13: 

      return; //@line 1201 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z11luaC_fullgcP9lua_Statei["X"]=1;

function __ZL9dothecallP9lua_StatePv($L, $ud) {
  var label = 0;


  var $L_addr;
  var $ud_addr;
  $L_addr=$L;
  $ud_addr=$ud;
  var $0=$L_addr; //@line 807 "lgc.c"
  var $1=$L_addr; //@line 807 "lgc.c"
  var $top=(($1+8)|0); //@line 807 "lgc.c"
  var $2=HEAP32[(($top)>>2)]; //@line 807 "lgc.c"
  var $add_ptr=((($2)-(24))|0); //@line 807 "lgc.c"
  __Z9luaD_callP9lua_StateP10lua_TValueii($0, $add_ptr, 0, 0); //@line 807 "lgc.c"

  return; //@line 808 "lgc.c"
}


function __ZL8markrootP12global_State($g) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      $g_addr=$g;
      var $0=$g_addr; //@line 347 "lgc.c"
      var $grayagain=(($0+80)|0); //@line 347 "lgc.c"
      HEAP32[(($grayagain)>>2)]=0; //@line 347 "lgc.c"
      var $1=$g_addr; //@line 347 "lgc.c"
      var $gray=(($1+76)|0); //@line 347 "lgc.c"
      HEAP32[(($gray)>>2)]=0; //@line 347 "lgc.c"
      var $2=$g_addr; //@line 348 "lgc.c"
      var $ephemeron=(($2+88)|0); //@line 348 "lgc.c"
      HEAP32[(($ephemeron)>>2)]=0; //@line 348 "lgc.c"
      var $3=$g_addr; //@line 348 "lgc.c"
      var $allweak=(($3+92)|0); //@line 348 "lgc.c"
      HEAP32[(($allweak)>>2)]=0; //@line 348 "lgc.c"
      var $4=$g_addr; //@line 348 "lgc.c"
      var $weak=(($4+84)|0); //@line 348 "lgc.c"
      HEAP32[(($weak)>>2)]=0; //@line 348 "lgc.c"
      var $5=$g_addr; //@line 349 "lgc.c"
      var $mainthread=(($5+152)|0); //@line 349 "lgc.c"
      var $6=HEAP32[(($mainthread)>>2)]; //@line 349 "lgc.c"
      var $tobool=(($6)|0)!=0; //@line 349 "lgc.c"
      if ($tobool) { label = 3; break; } else { label = 5; break; } //@line 349 "lgc.c"
    case 3: 
      var $7=$g_addr; //@line 349 "lgc.c"
      var $mainthread1=(($7+152)|0); //@line 349 "lgc.c"
      var $8=HEAP32[(($mainthread1)>>2)]; //@line 349 "lgc.c"
      var $9=$8; //@line 349 "lgc.c"
      var $gch=$9; //@line 349 "lgc.c"
      var $marked=(($gch+5)|0); //@line 349 "lgc.c"
      var $10=HEAP8[($marked)]; //@line 349 "lgc.c"
      var $conv=(($10)&255); //@line 349 "lgc.c"
      var $and=$conv & 3; //@line 349 "lgc.c"
      var $tobool2=(($and)|0)!=0; //@line 349 "lgc.c"
      if ($tobool2) { label = 4; break; } else { label = 5; break; } //@line 349 "lgc.c"
    case 4: 
      var $11=$g_addr; //@line 349 "lgc.c"
      var $12=$g_addr; //@line 349 "lgc.c"
      var $mainthread3=(($12+152)|0); //@line 349 "lgc.c"
      var $13=HEAP32[(($mainthread3)>>2)]; //@line 349 "lgc.c"
      var $14=$13; //@line 349 "lgc.c"
      __ZL16reallymarkobjectP12global_StateP8GCObject($11, $14); //@line 349 "lgc.c"
      label = 5; break; //@line 349 "lgc.c"
    case 5: 
      var $15=$g_addr; //@line 350 "lgc.c"
      var $l_registry=(($15+36)|0); //@line 350 "lgc.c"
      var $tt_=(($l_registry+8)|0); //@line 350 "lgc.c"
      var $16=HEAP32[(($tt_)>>2)]; //@line 350 "lgc.c"
      var $and4=$16 & 64; //@line 350 "lgc.c"
      var $tobool5=(($and4)|0)!=0; //@line 350 "lgc.c"
      if ($tobool5) { label = 6; break; } else { label = 8; break; } //@line 350 "lgc.c"
    case 6: 
      var $17=$g_addr; //@line 350 "lgc.c"
      var $l_registry7=(($17+36)|0); //@line 350 "lgc.c"
      var $value_=(($l_registry7)|0); //@line 350 "lgc.c"
      var $gc=$value_; //@line 350 "lgc.c"
      var $18=HEAP32[(($gc)>>2)]; //@line 350 "lgc.c"
      var $gch8=$18; //@line 350 "lgc.c"
      var $marked9=(($gch8+5)|0); //@line 350 "lgc.c"
      var $19=HEAP8[($marked9)]; //@line 350 "lgc.c"
      var $conv10=(($19)&255); //@line 350 "lgc.c"
      var $and11=$conv10 & 3; //@line 350 "lgc.c"
      var $tobool12=(($and11)|0)!=0; //@line 350 "lgc.c"
      if ($tobool12) { label = 7; break; } else { label = 8; break; } //@line 350 "lgc.c"
    case 7: 
      var $20=$g_addr; //@line 350 "lgc.c"
      var $21=$g_addr; //@line 350 "lgc.c"
      var $l_registry14=(($21+36)|0); //@line 350 "lgc.c"
      var $value_15=(($l_registry14)|0); //@line 350 "lgc.c"
      var $gc16=$value_15; //@line 350 "lgc.c"
      var $22=HEAP32[(($gc16)>>2)]; //@line 350 "lgc.c"
      __ZL16reallymarkobjectP12global_StateP8GCObject($20, $22); //@line 350 "lgc.c"
      label = 8; break; //@line 350 "lgc.c"
    case 8: 
      var $23=$g_addr; //@line 351 "lgc.c"
      __ZL6markmtP12global_State($23); //@line 351 "lgc.c"
      var $24=$g_addr; //@line 352 "lgc.c"
      __ZL12markbeingfnzP12global_State($24); //@line 352 "lgc.c"

      return; //@line 353 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL8markrootP12global_State["X"]=1;

function __ZL13propagatemarkP12global_State($g) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $size;
      var $o;
      var $h;
      var $cl;
      var $cl12;
      var $th;
      var $p;
      $g_addr=$g;
      var $0=$g_addr; //@line 525 "lgc.c"
      var $gray=(($0+76)|0); //@line 525 "lgc.c"
      var $1=HEAP32[(($gray)>>2)]; //@line 525 "lgc.c"
      $o=$1; //@line 525 "lgc.c"
      var $2=$o; //@line 527 "lgc.c"
      var $gch=$2; //@line 527 "lgc.c"
      var $marked=(($gch+5)|0); //@line 527 "lgc.c"
      var $3=HEAP8[($marked)]; //@line 527 "lgc.c"
      var $conv=(($3)&255); //@line 527 "lgc.c"
      var $or=$conv | 4; //@line 527 "lgc.c"
      var $conv1=(($or) & 255); //@line 527 "lgc.c"
      HEAP8[($marked)]=$conv1; //@line 527 "lgc.c"
      var $4=$o; //@line 528 "lgc.c"
      var $gch2=$4; //@line 528 "lgc.c"
      var $tt=(($gch2+4)|0); //@line 528 "lgc.c"
      var $5=HEAP8[($tt)]; //@line 528 "lgc.c"
      var $conv3=(($5)&255); //@line 528 "lgc.c"
      if ((($conv3)|0)==5) {
        label = 3; break;
      }
      else if ((($conv3)|0)==6) {
        label = 4; break;
      }
      else if ((($conv3)|0)==38) {
        label = 5; break;
      }
      else if ((($conv3)|0)==8) {
        label = 6; break;
      }
      else if ((($conv3)|0)==9) {
        label = 7; break;
      }
      else {
      label = 8; break;
      }
      
    case 3: 
      var $6=$o; //@line 530 "lgc.c"
      var $h4=$6; //@line 530 "lgc.c"
      $h=$h4; //@line 530 "lgc.c"
      var $7=$h; //@line 531 "lgc.c"
      var $gclist=(($7+24)|0); //@line 531 "lgc.c"
      var $8=HEAP32[(($gclist)>>2)]; //@line 531 "lgc.c"
      var $9=$g_addr; //@line 531 "lgc.c"
      var $gray5=(($9+76)|0); //@line 531 "lgc.c"
      HEAP32[(($gray5)>>2)]=$8; //@line 531 "lgc.c"
      var $10=$g_addr; //@line 532 "lgc.c"
      var $11=$h; //@line 532 "lgc.c"
      var $call=__ZL13traversetableP12global_StateP5Table($10, $11); //@line 532 "lgc.c"
      $size=$call; //@line 532 "lgc.c"
      label = 9; break; //@line 533 "lgc.c"
    case 4: 
      var $12=$o; //@line 536 "lgc.c"
      var $cl7=$12; //@line 536 "lgc.c"
      var $l=$cl7; //@line 536 "lgc.c"
      $cl=$l; //@line 536 "lgc.c"
      var $13=$cl; //@line 537 "lgc.c"
      var $gclist8=(($13+8)|0); //@line 537 "lgc.c"
      var $14=HEAP32[(($gclist8)>>2)]; //@line 537 "lgc.c"
      var $15=$g_addr; //@line 537 "lgc.c"
      var $gray9=(($15+76)|0); //@line 537 "lgc.c"
      HEAP32[(($gray9)>>2)]=$14; //@line 537 "lgc.c"
      var $16=$g_addr; //@line 538 "lgc.c"
      var $17=$cl; //@line 538 "lgc.c"
      var $call10=__ZL16traverseLclosureP12global_StateP8LClosure($16, $17); //@line 538 "lgc.c"
      $size=$call10; //@line 538 "lgc.c"
      label = 9; break; //@line 539 "lgc.c"
    case 5: 
      var $18=$o; //@line 542 "lgc.c"
      var $cl13=$18; //@line 542 "lgc.c"
      var $c=$cl13; //@line 542 "lgc.c"
      $cl12=$c; //@line 542 "lgc.c"
      var $19=$cl12; //@line 543 "lgc.c"
      var $gclist14=(($19+8)|0); //@line 543 "lgc.c"
      var $20=HEAP32[(($gclist14)>>2)]; //@line 543 "lgc.c"
      var $21=$g_addr; //@line 543 "lgc.c"
      var $gray15=(($21+76)|0); //@line 543 "lgc.c"
      HEAP32[(($gray15)>>2)]=$20; //@line 543 "lgc.c"
      var $22=$g_addr; //@line 544 "lgc.c"
      var $23=$cl12; //@line 544 "lgc.c"
      var $call16=__ZL16traverseCclosureP12global_StateP8CClosure($22, $23); //@line 544 "lgc.c"
      $size=$call16; //@line 544 "lgc.c"
      label = 9; break; //@line 545 "lgc.c"
    case 6: 
      var $24=$o; //@line 548 "lgc.c"
      var $th18=$24; //@line 548 "lgc.c"
      $th=$th18; //@line 548 "lgc.c"
      var $25=$th; //@line 549 "lgc.c"
      var $gclist19=(($25+60)|0); //@line 549 "lgc.c"
      var $26=HEAP32[(($gclist19)>>2)]; //@line 549 "lgc.c"
      var $27=$g_addr; //@line 549 "lgc.c"
      var $gray20=(($27+76)|0); //@line 549 "lgc.c"
      HEAP32[(($gray20)>>2)]=$26; //@line 549 "lgc.c"
      var $28=$g_addr; //@line 550 "lgc.c"
      var $grayagain=(($28+80)|0); //@line 550 "lgc.c"
      var $29=HEAP32[(($grayagain)>>2)]; //@line 550 "lgc.c"
      var $30=$th; //@line 550 "lgc.c"
      var $gclist21=(($30+60)|0); //@line 550 "lgc.c"
      HEAP32[(($gclist21)>>2)]=$29; //@line 550 "lgc.c"
      var $31=$o; //@line 551 "lgc.c"
      var $32=$g_addr; //@line 551 "lgc.c"
      var $grayagain22=(($32+80)|0); //@line 551 "lgc.c"
      HEAP32[(($grayagain22)>>2)]=$31; //@line 551 "lgc.c"
      var $33=$o; //@line 552 "lgc.c"
      var $gch23=$33; //@line 552 "lgc.c"
      var $marked24=(($gch23+5)|0); //@line 552 "lgc.c"
      var $34=HEAP8[($marked24)]; //@line 552 "lgc.c"
      var $conv25=(($34)&255); //@line 552 "lgc.c"
      var $and=$conv25 & 251; //@line 552 "lgc.c"
      var $conv26=(($and) & 255); //@line 552 "lgc.c"
      HEAP8[($marked24)]=$conv26; //@line 552 "lgc.c"
      var $35=$g_addr; //@line 553 "lgc.c"
      var $36=$th; //@line 553 "lgc.c"
      var $call27=__ZL13traversestackP12global_StateP9lua_State($35, $36); //@line 553 "lgc.c"
      $size=$call27; //@line 553 "lgc.c"
      label = 9; break; //@line 554 "lgc.c"
    case 7: 
      var $37=$o; //@line 557 "lgc.c"
      var $p29=$37; //@line 557 "lgc.c"
      $p=$p29; //@line 557 "lgc.c"
      var $38=$p; //@line 558 "lgc.c"
      var $gclist30=(($38+72)|0); //@line 558 "lgc.c"
      var $39=HEAP32[(($gclist30)>>2)]; //@line 558 "lgc.c"
      var $40=$g_addr; //@line 558 "lgc.c"
      var $gray31=(($40+76)|0); //@line 558 "lgc.c"
      HEAP32[(($gray31)>>2)]=$39; //@line 558 "lgc.c"
      var $41=$g_addr; //@line 559 "lgc.c"
      var $42=$p; //@line 559 "lgc.c"
      var $call32=__ZL13traverseprotoP12global_StateP5Proto($41, $42); //@line 559 "lgc.c"
      $size=$call32; //@line 559 "lgc.c"
      label = 9; break; //@line 560 "lgc.c"
    case 8: 
      label = 10; break; //@line 562 "lgc.c"
    case 9: 
      var $43=$size; //@line 564 "lgc.c"
      var $44=$g_addr; //@line 564 "lgc.c"
      var $GCmemtrav=(($44+16)|0); //@line 564 "lgc.c"
      var $45=HEAP32[(($GCmemtrav)>>2)]; //@line 564 "lgc.c"
      var $add=((($45)+($43))|0); //@line 564 "lgc.c"
      HEAP32[(($GCmemtrav)>>2)]=$add; //@line 564 "lgc.c"
      label = 10; break; //@line 565 "lgc.c"
    case 10: 

      return; //@line 565 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL13propagatemarkP12global_State["X"]=1;

function __ZL4GCTMP9lua_Statei($L, $propagateerrors) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $propagateerrors_addr;
      var $g;
      var $tm;
      var $v=__stackBase__;
      var $io;
      var $i_g;
      var $status;
      var $oldah;
      var $running;
      var $io2;
      var $io1;
      var $io211;
      var $io112;
      var $msg;
      $L_addr=$L;
      $propagateerrors_addr=$propagateerrors;
      var $0=$L_addr; //@line 812 "lgc.c"
      var $l_G=(($0+12)|0); //@line 812 "lgc.c"
      var $1=HEAP32[(($l_G)>>2)]; //@line 812 "lgc.c"
      $g=$1; //@line 812 "lgc.c"
      $io=$v; //@line 815 "lgc.c"
      var $2=$g; //@line 815 "lgc.c"
      var $call=__ZL14udata2finalizeP12global_State($2); //@line 815 "lgc.c"
      $i_g=$call; //@line 815 "lgc.c"
      var $3=$i_g; //@line 815 "lgc.c"
      var $4=$io; //@line 815 "lgc.c"
      var $value_=(($4)|0); //@line 815 "lgc.c"
      var $gc=$value_; //@line 815 "lgc.c"
      HEAP32[(($gc)>>2)]=$3; //@line 815 "lgc.c"
      var $5=$i_g; //@line 815 "lgc.c"
      var $gch=$5; //@line 815 "lgc.c"
      var $tt=(($gch+4)|0); //@line 815 "lgc.c"
      var $6=HEAP8[($tt)]; //@line 815 "lgc.c"
      var $conv=(($6)&255); //@line 815 "lgc.c"
      var $or=$conv | 64; //@line 815 "lgc.c"
      var $7=$io; //@line 815 "lgc.c"
      var $tt_=(($7+8)|0); //@line 815 "lgc.c"
      HEAP32[(($tt_)>>2)]=$or; //@line 815 "lgc.c"
      var $8=$L_addr; //@line 816 "lgc.c"
      var $call1=__Z15luaT_gettmbyobjP9lua_StatePK10lua_TValue3TMS($8, $v, 2); //@line 816 "lgc.c"
      $tm=$call1; //@line 816 "lgc.c"
      var $9=$tm; //@line 817 "lgc.c"
      var $cmp=(($9)|0)!=0; //@line 817 "lgc.c"
      if ($cmp) { label = 3; break; } else { label = 13; break; } //@line 817 "lgc.c"
    case 3: 
      var $10=$tm; //@line 817 "lgc.c"
      var $tt_2=(($10+8)|0); //@line 817 "lgc.c"
      var $11=HEAP32[(($tt_2)>>2)]; //@line 817 "lgc.c"
      var $and=$11 & 15; //@line 817 "lgc.c"
      var $cmp3=(($and)|0)==6; //@line 817 "lgc.c"
      if ($cmp3) { label = 4; break; } else { label = 13; break; } //@line 817 "lgc.c"
    case 4: 
      var $12=$L_addr; //@line 819 "lgc.c"
      var $allowhook=(($12+41)|0); //@line 819 "lgc.c"
      var $13=HEAP8[($allowhook)]; //@line 819 "lgc.c"
      $oldah=$13; //@line 819 "lgc.c"
      var $14=$g; //@line 820 "lgc.c"
      var $gcrunning=(($14+55)|0); //@line 820 "lgc.c"
      var $15=HEAP8[($gcrunning)]; //@line 820 "lgc.c"
      var $conv4=(($15)&255); //@line 820 "lgc.c"
      $running=$conv4; //@line 820 "lgc.c"
      var $16=$L_addr; //@line 821 "lgc.c"
      var $allowhook5=(($16+41)|0); //@line 821 "lgc.c"
      HEAP8[($allowhook5)]=0; //@line 821 "lgc.c"
      var $17=$g; //@line 822 "lgc.c"
      var $gcrunning6=(($17+55)|0); //@line 822 "lgc.c"
      HEAP8[($gcrunning6)]=0; //@line 822 "lgc.c"
      var $18=$tm; //@line 823 "lgc.c"
      $io2=$18; //@line 823 "lgc.c"
      var $19=$L_addr; //@line 823 "lgc.c"
      var $top=(($19+8)|0); //@line 823 "lgc.c"
      var $20=HEAP32[(($top)>>2)]; //@line 823 "lgc.c"
      $io1=$20; //@line 823 "lgc.c"
      var $21=$io1; //@line 823 "lgc.c"
      var $value_7=(($21)|0); //@line 823 "lgc.c"
      var $22=$io2; //@line 823 "lgc.c"
      var $value_8=(($22)|0); //@line 823 "lgc.c"
      var $23=$value_7; //@line 823 "lgc.c"
      var $24=$value_8; //@line 823 "lgc.c"
      assert(8 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)]; //@line 823 "lgc.c"
      var $25=$io2; //@line 823 "lgc.c"
      var $tt_9=(($25+8)|0); //@line 823 "lgc.c"
      var $26=HEAP32[(($tt_9)>>2)]; //@line 823 "lgc.c"
      var $27=$io1; //@line 823 "lgc.c"
      var $tt_10=(($27+8)|0); //@line 823 "lgc.c"
      HEAP32[(($tt_10)>>2)]=$26; //@line 823 "lgc.c"
      $io211=$v; //@line 824 "lgc.c"
      var $28=$L_addr; //@line 824 "lgc.c"
      var $top13=(($28+8)|0); //@line 824 "lgc.c"
      var $29=HEAP32[(($top13)>>2)]; //@line 824 "lgc.c"
      var $add_ptr=(($29+12)|0); //@line 824 "lgc.c"
      $io112=$add_ptr; //@line 824 "lgc.c"
      var $30=$io112; //@line 824 "lgc.c"
      var $value_14=(($30)|0); //@line 824 "lgc.c"
      var $31=$io211; //@line 824 "lgc.c"
      var $value_15=(($31)|0); //@line 824 "lgc.c"
      var $32=$value_14; //@line 824 "lgc.c"
      var $33=$value_15; //@line 824 "lgc.c"
      assert(8 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)]; //@line 824 "lgc.c"
      var $34=$io211; //@line 824 "lgc.c"
      var $tt_16=(($34+8)|0); //@line 824 "lgc.c"
      var $35=HEAP32[(($tt_16)>>2)]; //@line 824 "lgc.c"
      var $36=$io112; //@line 824 "lgc.c"
      var $tt_17=(($36+8)|0); //@line 824 "lgc.c"
      HEAP32[(($tt_17)>>2)]=$35; //@line 824 "lgc.c"
      var $37=$L_addr; //@line 825 "lgc.c"
      var $top18=(($37+8)|0); //@line 825 "lgc.c"
      var $38=HEAP32[(($top18)>>2)]; //@line 825 "lgc.c"
      var $add_ptr19=(($38+24)|0); //@line 825 "lgc.c"
      HEAP32[(($top18)>>2)]=$add_ptr19; //@line 825 "lgc.c"
      var $39=$L_addr; //@line 826 "lgc.c"
      var $40=$L_addr; //@line 826 "lgc.c"
      var $top20=(($40+8)|0); //@line 826 "lgc.c"
      var $41=HEAP32[(($top20)>>2)]; //@line 826 "lgc.c"
      var $add_ptr21=((($41)-(24))|0); //@line 826 "lgc.c"
      var $42=$add_ptr21; //@line 826 "lgc.c"
      var $43=$L_addr; //@line 826 "lgc.c"
      var $stack=(($43+28)|0); //@line 826 "lgc.c"
      var $44=HEAP32[(($stack)>>2)]; //@line 826 "lgc.c"
      var $45=$44; //@line 826 "lgc.c"
      var $sub_ptr_lhs_cast=$42; //@line 826 "lgc.c"
      var $sub_ptr_rhs_cast=$45; //@line 826 "lgc.c"
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 826 "lgc.c"
      var $call22=__Z10luaD_pcallP9lua_StatePFvS0_PvES1_ii($39, 12, 0, $sub_ptr_sub, 0); //@line 826 "lgc.c"
      $status=$call22; //@line 826 "lgc.c"
      var $46=$oldah; //@line 827 "lgc.c"
      var $47=$L_addr; //@line 827 "lgc.c"
      var $allowhook23=(($47+41)|0); //@line 827 "lgc.c"
      HEAP8[($allowhook23)]=$46; //@line 827 "lgc.c"
      var $48=$running; //@line 828 "lgc.c"
      var $conv24=(($48) & 255); //@line 828 "lgc.c"
      var $49=$g; //@line 828 "lgc.c"
      var $gcrunning25=(($49+55)|0); //@line 828 "lgc.c"
      HEAP8[($gcrunning25)]=$conv24; //@line 828 "lgc.c"
      var $50=$status; //@line 829 "lgc.c"
      var $cmp26=(($50)|0)!=0; //@line 829 "lgc.c"
      if ($cmp26) { label = 5; break; } else { label = 12; break; } //@line 829 "lgc.c"
    case 5: 
      var $51=$propagateerrors_addr; //@line 829 "lgc.c"
      var $tobool=(($51)|0)!=0; //@line 829 "lgc.c"
      if ($tobool) { label = 6; break; } else { label = 12; break; } //@line 829 "lgc.c"
    case 6: 
      var $52=$status; //@line 830 "lgc.c"
      var $cmp29=(($52)|0)==2; //@line 830 "lgc.c"
      if ($cmp29) { label = 7; break; } else { label = 11; break; } //@line 830 "lgc.c"
    case 7: 
      var $53=$L_addr; //@line 833 "lgc.c"
      var $top31=(($53+8)|0); //@line 833 "lgc.c"
      var $54=HEAP32[(($top31)>>2)]; //@line 833 "lgc.c"
      var $add_ptr32=((($54)-(12))|0); //@line 833 "lgc.c"
      var $tt_33=(($add_ptr32+8)|0); //@line 833 "lgc.c"
      var $55=HEAP32[(($tt_33)>>2)]; //@line 833 "lgc.c"
      var $and34=$55 & 15; //@line 833 "lgc.c"
      var $cmp35=(($and34)|0)==4; //@line 833 "lgc.c"
      if ($cmp35) { label = 8; break; } else { label = 9; break; } //@line 833 "lgc.c"
    case 8: 
      var $56=$L_addr; //@line 833 "lgc.c"
      var $top36=(($56+8)|0); //@line 833 "lgc.c"
      var $57=HEAP32[(($top36)>>2)]; //@line 833 "lgc.c"
      var $add_ptr37=((($57)-(12))|0); //@line 833 "lgc.c"
      var $value_38=(($add_ptr37)|0); //@line 833 "lgc.c"
      var $gc39=$value_38; //@line 833 "lgc.c"
      var $58=HEAP32[(($gc39)>>2)]; //@line 833 "lgc.c"
      var $ts=$58; //@line 833 "lgc.c"
      var $add_ptr40=(($ts+16)|0); //@line 833 "lgc.c"
      var $59=$add_ptr40; //@line 833 "lgc.c"
      var $cond = $59;label = 10; break; //@line 833 "lgc.c"
    case 9: 
      var $cond = ((5243480)|0);label = 10; break; //@line 833 "lgc.c"
    case 10: 
      var $cond; //@line 833 "lgc.c"
      $msg=$cond; //@line 833 "lgc.c"
      var $60=$L_addr; //@line 834 "lgc.c"
      var $61=$msg; //@line 834 "lgc.c"
      var $call41=__Z16luaO_pushfstringP9lua_StatePKcz($60, ((5243876)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$61,tempInt)); //@line 834 "lgc.c"
      $status=5; //@line 835 "lgc.c"
      label = 11; break; //@line 836 "lgc.c"
    case 11: 
      var $62=$L_addr; //@line 837 "lgc.c"
      var $63=$status; //@line 837 "lgc.c"
      __Z10luaD_throwP9lua_Statei($62, $63); //@line 837 "lgc.c"
      throw "Reached an unreachable!" //@line 837 "lgc.c"
    case 12: 
      label = 13; break; //@line 839 "lgc.c"
    case 13: 
      STACKTOP = __stackBase__;
      return; //@line 840 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL4GCTMP9lua_Statei["X"]=1;

function __ZL11removeentryP4Node($n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      $n_addr=$n;
      var $0=$n_addr; //@line 118 "lgc.c"
      var $i_key=(($0+12)|0); //@line 118 "lgc.c"
      var $tvk=$i_key; //@line 118 "lgc.c"
      var $tt_=(($tvk+8)|0); //@line 118 "lgc.c"
      var $1=HEAP32[(($tt_)>>2)]; //@line 118 "lgc.c"
      var $and=$1 & 64; //@line 118 "lgc.c"
      var $tobool=(($and)|0)!=0; //@line 118 "lgc.c"
      if ($tobool) { label = 3; break; } else { label = 5; break; } //@line 118 "lgc.c"
    case 3: 
      var $2=$n_addr; //@line 118 "lgc.c"
      var $i_key1=(($2+12)|0); //@line 118 "lgc.c"
      var $tvk2=$i_key1; //@line 118 "lgc.c"
      var $value_=(($tvk2)|0); //@line 118 "lgc.c"
      var $gc=$value_; //@line 118 "lgc.c"
      var $3=HEAP32[(($gc)>>2)]; //@line 118 "lgc.c"
      var $gch=$3; //@line 118 "lgc.c"
      var $marked=(($gch+5)|0); //@line 118 "lgc.c"
      var $4=HEAP8[($marked)]; //@line 118 "lgc.c"
      var $conv=(($4)&255); //@line 118 "lgc.c"
      var $and3=$conv & 3; //@line 118 "lgc.c"
      var $tobool4=(($and3)|0)!=0; //@line 118 "lgc.c"
      if ($tobool4) { label = 4; break; } else { label = 5; break; } //@line 118 "lgc.c"
    case 4: 
      var $5=$n_addr; //@line 119 "lgc.c"
      var $i_key5=(($5+12)|0); //@line 119 "lgc.c"
      var $tvk6=$i_key5; //@line 119 "lgc.c"
      var $tt_7=(($tvk6+8)|0); //@line 119 "lgc.c"
      HEAP32[(($tt_7)>>2)]=11; //@line 119 "lgc.c"
      label = 5; break; //@line 119 "lgc.c"
    case 5: 

      return; //@line 120 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}


function __ZL6atomicP9lua_State($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $g;
      var $work;
      var $origweak;
      var $origall;
      $L_addr=$L;
      var $0=$L_addr; //@line 987 "lgc.c"
      var $l_G=(($0+12)|0); //@line 987 "lgc.c"
      var $1=HEAP32[(($l_G)>>2)]; //@line 987 "lgc.c"
      $g=$1; //@line 987 "lgc.c"
      var $2=$g; //@line 988 "lgc.c"
      var $GCmemtrav=(($2+16)|0); //@line 988 "lgc.c"
      var $3=HEAP32[(($GCmemtrav)>>2)]; //@line 988 "lgc.c"
      var $sub=(((-$3))|0); //@line 988 "lgc.c"
      $work=$sub; //@line 988 "lgc.c"
      var $4=$L_addr; //@line 991 "lgc.c"
      var $tobool=(($4)|0)!=0; //@line 991 "lgc.c"
      if ($tobool) { label = 3; break; } else { label = 5; break; } //@line 991 "lgc.c"
    case 3: 
      var $5=$L_addr; //@line 991 "lgc.c"
      var $6=$5; //@line 991 "lgc.c"
      var $gch=$6; //@line 991 "lgc.c"
      var $marked=(($gch+5)|0); //@line 991 "lgc.c"
      var $7=HEAP8[($marked)]; //@line 991 "lgc.c"
      var $conv=(($7)&255); //@line 991 "lgc.c"
      var $and=$conv & 3; //@line 991 "lgc.c"
      var $tobool1=(($and)|0)!=0; //@line 991 "lgc.c"
      if ($tobool1) { label = 4; break; } else { label = 5; break; } //@line 991 "lgc.c"
    case 4: 
      var $8=$g; //@line 991 "lgc.c"
      var $9=$L_addr; //@line 991 "lgc.c"
      var $10=$9; //@line 991 "lgc.c"
      __ZL16reallymarkobjectP12global_StateP8GCObject($8, $10); //@line 991 "lgc.c"
      label = 5; break; //@line 991 "lgc.c"
    case 5: 
      var $11=$g; //@line 993 "lgc.c"
      var $l_registry=(($11+36)|0); //@line 993 "lgc.c"
      var $tt_=(($l_registry+8)|0); //@line 993 "lgc.c"
      var $12=HEAP32[(($tt_)>>2)]; //@line 993 "lgc.c"
      var $and2=$12 & 64; //@line 993 "lgc.c"
      var $tobool3=(($and2)|0)!=0; //@line 993 "lgc.c"
      if ($tobool3) { label = 6; break; } else { label = 8; break; } //@line 993 "lgc.c"
    case 6: 
      var $13=$g; //@line 993 "lgc.c"
      var $l_registry5=(($13+36)|0); //@line 993 "lgc.c"
      var $value_=(($l_registry5)|0); //@line 993 "lgc.c"
      var $gc=$value_; //@line 993 "lgc.c"
      var $14=HEAP32[(($gc)>>2)]; //@line 993 "lgc.c"
      var $gch6=$14; //@line 993 "lgc.c"
      var $marked7=(($gch6+5)|0); //@line 993 "lgc.c"
      var $15=HEAP8[($marked7)]; //@line 993 "lgc.c"
      var $conv8=(($15)&255); //@line 993 "lgc.c"
      var $and9=$conv8 & 3; //@line 993 "lgc.c"
      var $tobool10=(($and9)|0)!=0; //@line 993 "lgc.c"
      if ($tobool10) { label = 7; break; } else { label = 8; break; } //@line 993 "lgc.c"
    case 7: 
      var $16=$g; //@line 993 "lgc.c"
      var $17=$g; //@line 993 "lgc.c"
      var $l_registry12=(($17+36)|0); //@line 993 "lgc.c"
      var $value_13=(($l_registry12)|0); //@line 993 "lgc.c"
      var $gc14=$value_13; //@line 993 "lgc.c"
      var $18=HEAP32[(($gc14)>>2)]; //@line 993 "lgc.c"
      __ZL16reallymarkobjectP12global_StateP8GCObject($16, $18); //@line 993 "lgc.c"
      label = 8; break; //@line 993 "lgc.c"
    case 8: 
      var $19=$g; //@line 994 "lgc.c"
      __ZL6markmtP12global_State($19); //@line 994 "lgc.c"
      var $20=$g; //@line 996 "lgc.c"
      __ZL12remarkupvalsP12global_State($20); //@line 996 "lgc.c"
      var $21=$g; //@line 997 "lgc.c"
      __ZL12propagateallP12global_State($21); //@line 997 "lgc.c"
      var $22=$g; //@line 998 "lgc.c"
      var $GCmemtrav16=(($22+16)|0); //@line 998 "lgc.c"
      var $23=HEAP32[(($GCmemtrav16)>>2)]; //@line 998 "lgc.c"
      var $24=$work; //@line 998 "lgc.c"
      var $add=((($24)+($23))|0); //@line 998 "lgc.c"
      $work=$add; //@line 998 "lgc.c"
      var $25=$g; //@line 1000 "lgc.c"
      __ZL15retraversegraysP12global_State($25); //@line 1000 "lgc.c"
      var $26=$g; //@line 1001 "lgc.c"
      var $GCmemtrav17=(($26+16)|0); //@line 1001 "lgc.c"
      var $27=HEAP32[(($GCmemtrav17)>>2)]; //@line 1001 "lgc.c"
      var $28=$work; //@line 1001 "lgc.c"
      var $sub18=((($28)-($27))|0); //@line 1001 "lgc.c"
      $work=$sub18; //@line 1001 "lgc.c"
      var $29=$g; //@line 1002 "lgc.c"
      __ZL18convergeephemeronsP12global_State($29); //@line 1002 "lgc.c"
      var $30=$g; //@line 1005 "lgc.c"
      var $31=$g; //@line 1005 "lgc.c"
      var $weak=(($31+84)|0); //@line 1005 "lgc.c"
      var $32=HEAP32[(($weak)>>2)]; //@line 1005 "lgc.c"
      __ZL11clearvaluesP12global_StateP8GCObjectS2_($30, $32, 0); //@line 1005 "lgc.c"
      var $33=$g; //@line 1006 "lgc.c"
      var $34=$g; //@line 1006 "lgc.c"
      var $allweak=(($34+92)|0); //@line 1006 "lgc.c"
      var $35=HEAP32[(($allweak)>>2)]; //@line 1006 "lgc.c"
      __ZL11clearvaluesP12global_StateP8GCObjectS2_($33, $35, 0); //@line 1006 "lgc.c"
      var $36=$g; //@line 1007 "lgc.c"
      var $weak19=(($36+84)|0); //@line 1007 "lgc.c"
      var $37=HEAP32[(($weak19)>>2)]; //@line 1007 "lgc.c"
      $origweak=$37; //@line 1007 "lgc.c"
      var $38=$g; //@line 1007 "lgc.c"
      var $allweak20=(($38+92)|0); //@line 1007 "lgc.c"
      var $39=HEAP32[(($allweak20)>>2)]; //@line 1007 "lgc.c"
      $origall=$39; //@line 1007 "lgc.c"
      var $40=$g; //@line 1008 "lgc.c"
      var $GCmemtrav21=(($40+16)|0); //@line 1008 "lgc.c"
      var $41=HEAP32[(($GCmemtrav21)>>2)]; //@line 1008 "lgc.c"
      var $42=$work; //@line 1008 "lgc.c"
      var $add22=((($42)+($41))|0); //@line 1008 "lgc.c"
      $work=$add22; //@line 1008 "lgc.c"
      var $43=$L_addr; //@line 1009 "lgc.c"
      __ZL15separatetobefnzP9lua_Statei($43, 0); //@line 1009 "lgc.c"
      var $44=$g; //@line 1010 "lgc.c"
      __ZL12markbeingfnzP12global_State($44); //@line 1010 "lgc.c"
      var $45=$g; //@line 1011 "lgc.c"
      __ZL12propagateallP12global_State($45); //@line 1011 "lgc.c"
      var $46=$g; //@line 1012 "lgc.c"
      var $GCmemtrav23=(($46+16)|0); //@line 1012 "lgc.c"
      var $47=HEAP32[(($GCmemtrav23)>>2)]; //@line 1012 "lgc.c"
      var $48=$work; //@line 1012 "lgc.c"
      var $sub24=((($48)-($47))|0); //@line 1012 "lgc.c"
      $work=$sub24; //@line 1012 "lgc.c"
      var $49=$g; //@line 1013 "lgc.c"
      __ZL18convergeephemeronsP12global_State($49); //@line 1013 "lgc.c"
      var $50=$g; //@line 1016 "lgc.c"
      var $51=$g; //@line 1016 "lgc.c"
      var $ephemeron=(($51+88)|0); //@line 1016 "lgc.c"
      var $52=HEAP32[(($ephemeron)>>2)]; //@line 1016 "lgc.c"
      __ZL9clearkeysP12global_StateP8GCObjectS2_($50, $52, 0); //@line 1016 "lgc.c"
      var $53=$g; //@line 1017 "lgc.c"
      var $54=$g; //@line 1017 "lgc.c"
      var $allweak25=(($54+92)|0); //@line 1017 "lgc.c"
      var $55=HEAP32[(($allweak25)>>2)]; //@line 1017 "lgc.c"
      __ZL9clearkeysP12global_StateP8GCObjectS2_($53, $55, 0); //@line 1017 "lgc.c"
      var $56=$g; //@line 1019 "lgc.c"
      var $57=$g; //@line 1019 "lgc.c"
      var $weak26=(($57+84)|0); //@line 1019 "lgc.c"
      var $58=HEAP32[(($weak26)>>2)]; //@line 1019 "lgc.c"
      var $59=$origweak; //@line 1019 "lgc.c"
      __ZL11clearvaluesP12global_StateP8GCObjectS2_($56, $58, $59); //@line 1019 "lgc.c"
      var $60=$g; //@line 1020 "lgc.c"
      var $61=$g; //@line 1020 "lgc.c"
      var $allweak27=(($61+92)|0); //@line 1020 "lgc.c"
      var $62=HEAP32[(($allweak27)>>2)]; //@line 1020 "lgc.c"
      var $63=$origall; //@line 1020 "lgc.c"
      __ZL11clearvaluesP12global_StateP8GCObjectS2_($60, $62, $63); //@line 1020 "lgc.c"
      var $64=$g; //@line 1021 "lgc.c"
      var $currentwhite=(($64+52)|0); //@line 1021 "lgc.c"
      var $65=HEAP8[($currentwhite)]; //@line 1021 "lgc.c"
      var $conv28=(($65)&255); //@line 1021 "lgc.c"
      var $xor=$conv28 ^ 3; //@line 1021 "lgc.c"
      var $conv29=(($xor) & 255); //@line 1021 "lgc.c"
      var $66=$g; //@line 1021 "lgc.c"
      var $currentwhite30=(($66+52)|0); //@line 1021 "lgc.c"
      HEAP8[($currentwhite30)]=$conv29; //@line 1021 "lgc.c"
      var $67=$g; //@line 1022 "lgc.c"
      var $GCmemtrav31=(($67+16)|0); //@line 1022 "lgc.c"
      var $68=HEAP32[(($GCmemtrav31)>>2)]; //@line 1022 "lgc.c"
      var $69=$work; //@line 1022 "lgc.c"
      var $add32=((($69)+($68))|0); //@line 1022 "lgc.c"
      $work=$add32; //@line 1022 "lgc.c"
      var $70=$work; //@line 1023 "lgc.c"

      return $70; //@line 1023 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL6atomicP9lua_State["X"]=1;

function __ZL10checkSizesP9lua_State($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $g;
      var $hs;
      $L_addr=$L;
      var $0=$L_addr; //@line 781 "lgc.c"
      var $l_G=(($0+12)|0); //@line 781 "lgc.c"
      var $1=HEAP32[(($l_G)>>2)]; //@line 781 "lgc.c"
      $g=$1; //@line 781 "lgc.c"
      var $2=$g; //@line 782 "lgc.c"
      var $gckind=(($2+54)|0); //@line 782 "lgc.c"
      var $3=HEAP8[($gckind)]; //@line 782 "lgc.c"
      var $conv=(($3)&255); //@line 782 "lgc.c"
      var $cmp=(($conv)|0)!=1; //@line 782 "lgc.c"
      if ($cmp) { label = 3; break; } else { label = 6; break; } //@line 782 "lgc.c"
    case 3: 
      var $4=$g; //@line 783 "lgc.c"
      var $strt=(($4+24)|0); //@line 783 "lgc.c"
      var $size=(($strt+8)|0); //@line 783 "lgc.c"
      var $5=HEAP32[(($size)>>2)]; //@line 783 "lgc.c"
      var $div=((((($5)|0))/(2))&-1); //@line 783 "lgc.c"
      $hs=$div; //@line 783 "lgc.c"
      var $6=$g; //@line 784 "lgc.c"
      var $strt1=(($6+24)|0); //@line 784 "lgc.c"
      var $nuse=(($strt1+4)|0); //@line 784 "lgc.c"
      var $7=HEAP32[(($nuse)>>2)]; //@line 784 "lgc.c"
      var $8=$hs; //@line 784 "lgc.c"
      var $cmp2=(($7)>>>0) < (($8)>>>0); //@line 784 "lgc.c"
      if ($cmp2) { label = 4; break; } else { label = 5; break; } //@line 784 "lgc.c"
    case 4: 
      var $9=$L_addr; //@line 785 "lgc.c"
      var $10=$hs; //@line 785 "lgc.c"
      __Z11luaS_resizeP9lua_Statei($9, $10); //@line 785 "lgc.c"
      label = 5; break; //@line 785 "lgc.c"
    case 5: 
      var $11=$L_addr; //@line 786 "lgc.c"
      var $12=$g; //@line 786 "lgc.c"
      var $buff=(($12+124)|0); //@line 786 "lgc.c"
      var $buffer=(($buff)|0); //@line 786 "lgc.c"
      var $13=HEAP32[(($buffer)>>2)]; //@line 786 "lgc.c"
      var $14=$g; //@line 786 "lgc.c"
      var $buff4=(($14+124)|0); //@line 786 "lgc.c"
      var $buffsize=(($buff4+8)|0); //@line 786 "lgc.c"
      var $15=HEAP32[(($buffsize)>>2)]; //@line 786 "lgc.c"
      var $mul=$15; //@line 786 "lgc.c"
      var $call=__Z13luaM_realloc_P9lua_StatePvjj($11, $13, $mul, 0); //@line 786 "lgc.c"
      var $16=$g; //@line 786 "lgc.c"
      var $buff5=(($16+124)|0); //@line 786 "lgc.c"
      var $buffer6=(($buff5)|0); //@line 786 "lgc.c"
      HEAP32[(($buffer6)>>2)]=$call; //@line 786 "lgc.c"
      var $17=$g; //@line 786 "lgc.c"
      var $buff7=(($17+124)|0); //@line 786 "lgc.c"
      var $buffsize8=(($buff7+8)|0); //@line 786 "lgc.c"
      HEAP32[(($buffsize8)>>2)]=0; //@line 786 "lgc.c"
      label = 6; break; //@line 787 "lgc.c"
    case 6: 

      return; //@line 788 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL10checkSizesP9lua_State["X"]=1;

function __ZL6markmtP12global_State($g) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $i;
      $g_addr=$g;
      $i=0; //@line 312 "lgc.c"
      label = 3; break; //@line 312 "lgc.c"
    case 3: 
      var $0=$i; //@line 312 "lgc.c"
      var $cmp=(($0)|0) < 9; //@line 312 "lgc.c"
      if ($cmp) { label = 4; break; } else { label = 9; break; } //@line 312 "lgc.c"
    case 4: 
      var $1=$i; //@line 313 "lgc.c"
      var $2=$g_addr; //@line 313 "lgc.c"
      var $mt=(($2+232)|0); //@line 313 "lgc.c"
      var $arrayidx=(($mt+($1<<2))|0); //@line 313 "lgc.c"
      var $3=HEAP32[(($arrayidx)>>2)]; //@line 313 "lgc.c"
      var $tobool=(($3)|0)!=0; //@line 313 "lgc.c"
      if ($tobool) { label = 5; break; } else { label = 7; break; } //@line 313 "lgc.c"
    case 5: 
      var $4=$i; //@line 313 "lgc.c"
      var $5=$g_addr; //@line 313 "lgc.c"
      var $mt1=(($5+232)|0); //@line 313 "lgc.c"
      var $arrayidx2=(($mt1+($4<<2))|0); //@line 313 "lgc.c"
      var $6=HEAP32[(($arrayidx2)>>2)]; //@line 313 "lgc.c"
      var $7=$6; //@line 313 "lgc.c"
      var $gch=$7; //@line 313 "lgc.c"
      var $marked=(($gch+5)|0); //@line 313 "lgc.c"
      var $8=HEAP8[($marked)]; //@line 313 "lgc.c"
      var $conv=(($8)&255); //@line 313 "lgc.c"
      var $and=$conv & 3; //@line 313 "lgc.c"
      var $tobool3=(($and)|0)!=0; //@line 313 "lgc.c"
      if ($tobool3) { label = 6; break; } else { label = 7; break; } //@line 313 "lgc.c"
    case 6: 
      var $9=$g_addr; //@line 313 "lgc.c"
      var $10=$i; //@line 313 "lgc.c"
      var $11=$g_addr; //@line 313 "lgc.c"
      var $mt4=(($11+232)|0); //@line 313 "lgc.c"
      var $arrayidx5=(($mt4+($10<<2))|0); //@line 313 "lgc.c"
      var $12=HEAP32[(($arrayidx5)>>2)]; //@line 313 "lgc.c"
      var $13=$12; //@line 313 "lgc.c"
      __ZL16reallymarkobjectP12global_StateP8GCObject($9, $13); //@line 313 "lgc.c"
      label = 7; break; //@line 313 "lgc.c"
    case 7: 
      label = 8; break; //@line 313 "lgc.c"
    case 8: 
      var $14=$i; //@line 312 "lgc.c"
      var $inc=((($14)+(1))|0); //@line 312 "lgc.c"
      $i=$inc; //@line 312 "lgc.c"
      label = 3; break; //@line 312 "lgc.c"
    case 9: 

      return; //@line 314 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}


function __ZL12remarkupvalsP12global_State($g) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $uv;
      $g_addr=$g;
      var $0=$g_addr; //@line 335 "lgc.c"
      var $uvhead=(($0+100)|0); //@line 335 "lgc.c"
      var $u=(($uvhead+12)|0); //@line 335 "lgc.c"
      var $l=$u; //@line 335 "lgc.c"
      var $next=(($l+4)|0); //@line 335 "lgc.c"
      var $1=HEAP32[(($next)>>2)]; //@line 335 "lgc.c"
      $uv=$1; //@line 335 "lgc.c"
      label = 3; break; //@line 335 "lgc.c"
    case 3: 
      var $2=$uv; //@line 335 "lgc.c"
      var $3=$g_addr; //@line 335 "lgc.c"
      var $uvhead1=(($3+100)|0); //@line 335 "lgc.c"
      var $cmp=(($2)|0)!=(($uvhead1)|0); //@line 335 "lgc.c"
      if ($cmp) { label = 4; break; } else { label = 11; break; } //@line 335 "lgc.c"
    case 4: 
      var $4=$uv; //@line 336 "lgc.c"
      var $5=$4; //@line 336 "lgc.c"
      var $gch=$5; //@line 336 "lgc.c"
      var $marked=(($gch+5)|0); //@line 336 "lgc.c"
      var $6=HEAP8[($marked)]; //@line 336 "lgc.c"
      var $conv=(($6)&255); //@line 336 "lgc.c"
      var $and=$conv & 7; //@line 336 "lgc.c"
      var $tobool=(($and)|0)!=0; //@line 336 "lgc.c"
      if ($tobool) { label = 9; break; } else { label = 5; break; } //@line 336 "lgc.c"
    case 5: 
      var $7=$uv; //@line 337 "lgc.c"
      var $v=(($7+8)|0); //@line 337 "lgc.c"
      var $8=HEAP32[(($v)>>2)]; //@line 337 "lgc.c"
      var $tt_=(($8+8)|0); //@line 337 "lgc.c"
      var $9=HEAP32[(($tt_)>>2)]; //@line 337 "lgc.c"
      var $and2=$9 & 64; //@line 337 "lgc.c"
      var $tobool3=(($and2)|0)!=0; //@line 337 "lgc.c"
      if ($tobool3) { label = 6; break; } else { label = 8; break; } //@line 337 "lgc.c"
    case 6: 
      var $10=$uv; //@line 337 "lgc.c"
      var $v4=(($10+8)|0); //@line 337 "lgc.c"
      var $11=HEAP32[(($v4)>>2)]; //@line 337 "lgc.c"
      var $value_=(($11)|0); //@line 337 "lgc.c"
      var $gc=$value_; //@line 337 "lgc.c"
      var $12=HEAP32[(($gc)>>2)]; //@line 337 "lgc.c"
      var $gch5=$12; //@line 337 "lgc.c"
      var $marked6=(($gch5+5)|0); //@line 337 "lgc.c"
      var $13=HEAP8[($marked6)]; //@line 337 "lgc.c"
      var $conv7=(($13)&255); //@line 337 "lgc.c"
      var $and8=$conv7 & 3; //@line 337 "lgc.c"
      var $tobool9=(($and8)|0)!=0; //@line 337 "lgc.c"
      if ($tobool9) { label = 7; break; } else { label = 8; break; } //@line 337 "lgc.c"
    case 7: 
      var $14=$g_addr; //@line 337 "lgc.c"
      var $15=$uv; //@line 337 "lgc.c"
      var $v11=(($15+8)|0); //@line 337 "lgc.c"
      var $16=HEAP32[(($v11)>>2)]; //@line 337 "lgc.c"
      var $value_12=(($16)|0); //@line 337 "lgc.c"
      var $gc13=$value_12; //@line 337 "lgc.c"
      var $17=HEAP32[(($gc13)>>2)]; //@line 337 "lgc.c"
      __ZL16reallymarkobjectP12global_StateP8GCObject($14, $17); //@line 337 "lgc.c"
      label = 8; break; //@line 337 "lgc.c"
    case 8: 
      label = 9; break; //@line 337 "lgc.c"
    case 9: 
      label = 10; break; //@line 338 "lgc.c"
    case 10: 
      var $18=$uv; //@line 335 "lgc.c"
      var $u15=(($18+12)|0); //@line 335 "lgc.c"
      var $l16=$u15; //@line 335 "lgc.c"
      var $next17=(($l16+4)|0); //@line 335 "lgc.c"
      var $19=HEAP32[(($next17)>>2)]; //@line 335 "lgc.c"
      $uv=$19; //@line 335 "lgc.c"
      label = 3; break; //@line 335 "lgc.c"
    case 11: 

      return; //@line 339 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL12remarkupvalsP12global_State["X"]=1;

function __ZL12propagateallP12global_State($g) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      $g_addr=$g;
      label = 3; break; //@line 569 "lgc.c"
    case 3: 
      var $0=$g_addr; //@line 569 "lgc.c"
      var $gray=(($0+76)|0); //@line 569 "lgc.c"
      var $1=HEAP32[(($gray)>>2)]; //@line 569 "lgc.c"
      var $tobool=(($1)|0)!=0; //@line 569 "lgc.c"
      if ($tobool) { label = 4; break; } else { label = 5; break; } //@line 569 "lgc.c"
    case 4: 
      var $2=$g_addr; //@line 569 "lgc.c"
      __ZL13propagatemarkP12global_State($2); //@line 569 "lgc.c"
      label = 3; break; //@line 569 "lgc.c"
    case 5: 

      return; //@line 570 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}


function __ZL15retraversegraysP12global_State($g) {
  var label = 0;


  var $g_addr;
  var $weak;
  var $grayagain;
  var $ephemeron;
  $g_addr=$g;
  var $0=$g_addr; //@line 585 "lgc.c"
  var $weak1=(($0+84)|0); //@line 585 "lgc.c"
  var $1=HEAP32[(($weak1)>>2)]; //@line 585 "lgc.c"
  $weak=$1; //@line 585 "lgc.c"
  var $2=$g_addr; //@line 586 "lgc.c"
  var $grayagain2=(($2+80)|0); //@line 586 "lgc.c"
  var $3=HEAP32[(($grayagain2)>>2)]; //@line 586 "lgc.c"
  $grayagain=$3; //@line 586 "lgc.c"
  var $4=$g_addr; //@line 587 "lgc.c"
  var $ephemeron3=(($4+88)|0); //@line 587 "lgc.c"
  var $5=HEAP32[(($ephemeron3)>>2)]; //@line 587 "lgc.c"
  $ephemeron=$5; //@line 587 "lgc.c"
  var $6=$g_addr; //@line 588 "lgc.c"
  var $ephemeron4=(($6+88)|0); //@line 588 "lgc.c"
  HEAP32[(($ephemeron4)>>2)]=0; //@line 588 "lgc.c"
  var $7=$g_addr; //@line 588 "lgc.c"
  var $grayagain5=(($7+80)|0); //@line 588 "lgc.c"
  HEAP32[(($grayagain5)>>2)]=0; //@line 588 "lgc.c"
  var $8=$g_addr; //@line 588 "lgc.c"
  var $weak6=(($8+84)|0); //@line 588 "lgc.c"
  HEAP32[(($weak6)>>2)]=0; //@line 588 "lgc.c"
  var $9=$g_addr; //@line 589 "lgc.c"
  __ZL12propagateallP12global_State($9); //@line 589 "lgc.c"
  var $10=$g_addr; //@line 590 "lgc.c"
  var $11=$grayagain; //@line 590 "lgc.c"
  __ZL13propagatelistP12global_StateP8GCObject($10, $11); //@line 590 "lgc.c"
  var $12=$g_addr; //@line 591 "lgc.c"
  var $13=$weak; //@line 591 "lgc.c"
  __ZL13propagatelistP12global_StateP8GCObject($12, $13); //@line 591 "lgc.c"
  var $14=$g_addr; //@line 592 "lgc.c"
  var $15=$ephemeron; //@line 592 "lgc.c"
  __ZL13propagatelistP12global_StateP8GCObject($14, $15); //@line 592 "lgc.c"

  return; //@line 593 "lgc.c"
}


function __ZL18convergeephemeronsP12global_State($g) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $changed;
      var $w;
      var $next;
      $g_addr=$g;
      label = 3; break; //@line 598 "lgc.c"
    case 3: 
      var $0=$g_addr; //@line 600 "lgc.c"
      var $ephemeron=(($0+88)|0); //@line 600 "lgc.c"
      var $1=HEAP32[(($ephemeron)>>2)]; //@line 600 "lgc.c"
      $next=$1; //@line 600 "lgc.c"
      var $2=$g_addr; //@line 601 "lgc.c"
      var $ephemeron1=(($2+88)|0); //@line 601 "lgc.c"
      HEAP32[(($ephemeron1)>>2)]=0; //@line 601 "lgc.c"
      $changed=0; //@line 602 "lgc.c"
      label = 4; break; //@line 603 "lgc.c"
    case 4: 
      var $3=$next; //@line 603 "lgc.c"
      $w=$3; //@line 603 "lgc.c"
      var $cmp=(($3)|0)!=0; //@line 603 "lgc.c"
      if ($cmp) { label = 5; break; } else { label = 8; break; } //@line 603 "lgc.c"
    case 5: 
      var $4=$w; //@line 604 "lgc.c"
      var $h=$4; //@line 604 "lgc.c"
      var $gclist=(($h+24)|0); //@line 604 "lgc.c"
      var $5=HEAP32[(($gclist)>>2)]; //@line 604 "lgc.c"
      $next=$5; //@line 604 "lgc.c"
      var $6=$g_addr; //@line 605 "lgc.c"
      var $7=$w; //@line 605 "lgc.c"
      var $h2=$7; //@line 605 "lgc.c"
      var $call=__ZL17traverseephemeronP12global_StateP5Table($6, $h2); //@line 605 "lgc.c"
      var $tobool=(($call)|0)!=0; //@line 605 "lgc.c"
      if ($tobool) { label = 6; break; } else { label = 7; break; } //@line 605 "lgc.c"
    case 6: 
      var $8=$g_addr; //@line 606 "lgc.c"
      __ZL12propagateallP12global_State($8); //@line 606 "lgc.c"
      $changed=1; //@line 607 "lgc.c"
      label = 7; break; //@line 608 "lgc.c"
    case 7: 
      label = 4; break; //@line 609 "lgc.c"
    case 8: 
      label = 9; break; //@line 610 "lgc.c"
    case 9: 
      var $9=$changed; //@line 610 "lgc.c"
      var $tobool3=(($9)|0)!=0; //@line 610 "lgc.c"
      if ($tobool3) { label = 3; break; } else { label = 10; break; } //@line 610 "lgc.c"
    case 10: 

      return; //@line 611 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}


function __ZL11clearvaluesP12global_StateP8GCObjectS2_($g, $l, $f) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $l_addr;
      var $f_addr;
      var $h;
      var $n;
      var $limit;
      var $i;
      var $o;
      $g_addr=$g;
      $l_addr=$l;
      $f_addr=$f;
      label = 3; break; //@line 646 "lgc.c"
    case 3: 
      var $0=$l_addr; //@line 646 "lgc.c"
      var $1=$f_addr; //@line 646 "lgc.c"
      var $cmp=(($0)|0)!=(($1)|0); //@line 646 "lgc.c"
      if ($cmp) { label = 4; break; } else { label = 19; break; } //@line 646 "lgc.c"
    case 4: 
      var $2=$l_addr; //@line 647 "lgc.c"
      var $h1=$2; //@line 647 "lgc.c"
      $h=$h1; //@line 647 "lgc.c"
      var $3=$h; //@line 648 "lgc.c"
      var $lsizenode=(($3+7)|0); //@line 648 "lgc.c"
      var $4=HEAP8[($lsizenode)]; //@line 648 "lgc.c"
      var $conv=(($4)&255); //@line 648 "lgc.c"
      var $shl=1 << $conv; //@line 648 "lgc.c"
      var $5=$h; //@line 648 "lgc.c"
      var $node=(($5+16)|0); //@line 648 "lgc.c"
      var $6=HEAP32[(($node)>>2)]; //@line 648 "lgc.c"
      var $arrayidx=(($6+((($shl)*(28))&-1))|0); //@line 648 "lgc.c"
      $limit=$arrayidx; //@line 648 "lgc.c"
      $i=0; //@line 650 "lgc.c"
      label = 5; break; //@line 650 "lgc.c"
    case 5: 
      var $7=$i; //@line 650 "lgc.c"
      var $8=$h; //@line 650 "lgc.c"
      var $sizearray=(($8+28)|0); //@line 650 "lgc.c"
      var $9=HEAP32[(($sizearray)>>2)]; //@line 650 "lgc.c"
      var $cmp3=(($7)|0) < (($9)|0); //@line 650 "lgc.c"
      if ($cmp3) { label = 6; break; } else { label = 10; break; } //@line 650 "lgc.c"
    case 6: 
      var $10=$i; //@line 651 "lgc.c"
      var $11=$h; //@line 651 "lgc.c"
      var $array=(($11+12)|0); //@line 651 "lgc.c"
      var $12=HEAP32[(($array)>>2)]; //@line 651 "lgc.c"
      var $arrayidx5=(($12+((($10)*(12))&-1))|0); //@line 651 "lgc.c"
      $o=$arrayidx5; //@line 651 "lgc.c"
      var $13=$g_addr; //@line 652 "lgc.c"
      var $14=$o; //@line 652 "lgc.c"
      var $call=__ZL9isclearedP12global_StatePK10lua_TValue($13, $14); //@line 652 "lgc.c"
      var $tobool=(($call)|0)!=0; //@line 652 "lgc.c"
      if ($tobool) { label = 7; break; } else { label = 8; break; } //@line 652 "lgc.c"
    case 7: 
      var $15=$o; //@line 653 "lgc.c"
      var $tt_=(($15+8)|0); //@line 653 "lgc.c"
      HEAP32[(($tt_)>>2)]=0; //@line 653 "lgc.c"
      label = 8; break; //@line 653 "lgc.c"
    case 8: 
      label = 9; break; //@line 654 "lgc.c"
    case 9: 
      var $16=$i; //@line 650 "lgc.c"
      var $inc=((($16)+(1))|0); //@line 650 "lgc.c"
      $i=$inc; //@line 650 "lgc.c"
      label = 5; break; //@line 650 "lgc.c"
    case 10: 
      var $17=$h; //@line 655 "lgc.c"
      var $node6=(($17+16)|0); //@line 655 "lgc.c"
      var $18=HEAP32[(($node6)>>2)]; //@line 655 "lgc.c"
      var $arrayidx7=(($18)|0); //@line 655 "lgc.c"
      $n=$arrayidx7; //@line 655 "lgc.c"
      label = 11; break; //@line 655 "lgc.c"
    case 11: 
      var $19=$n; //@line 655 "lgc.c"
      var $20=$limit; //@line 655 "lgc.c"
      var $cmp9=(($19)>>>0) < (($20)>>>0); //@line 655 "lgc.c"
      if ($cmp9) { label = 12; break; } else { label = 17; break; } //@line 655 "lgc.c"
    case 12: 
      var $21=$n; //@line 656 "lgc.c"
      var $i_val=(($21)|0); //@line 656 "lgc.c"
      var $tt_11=(($i_val+8)|0); //@line 656 "lgc.c"
      var $22=HEAP32[(($tt_11)>>2)]; //@line 656 "lgc.c"
      var $cmp12=(($22)|0)==0; //@line 656 "lgc.c"
      if ($cmp12) { label = 15; break; } else { label = 13; break; } //@line 656 "lgc.c"
    case 13: 
      var $23=$g_addr; //@line 656 "lgc.c"
      var $24=$n; //@line 656 "lgc.c"
      var $i_val13=(($24)|0); //@line 656 "lgc.c"
      var $call14=__ZL9isclearedP12global_StatePK10lua_TValue($23, $i_val13); //@line 656 "lgc.c"
      var $tobool15=(($call14)|0)!=0; //@line 656 "lgc.c"
      if ($tobool15) { label = 14; break; } else { label = 15; break; } //@line 656 "lgc.c"
    case 14: 
      var $25=$n; //@line 657 "lgc.c"
      var $i_val17=(($25)|0); //@line 657 "lgc.c"
      var $tt_18=(($i_val17+8)|0); //@line 657 "lgc.c"
      HEAP32[(($tt_18)>>2)]=0; //@line 657 "lgc.c"
      var $26=$n; //@line 658 "lgc.c"
      __ZL11removeentryP4Node($26); //@line 658 "lgc.c"
      label = 15; break; //@line 659 "lgc.c"
    case 15: 
      label = 16; break; //@line 660 "lgc.c"
    case 16: 
      var $27=$n; //@line 655 "lgc.c"
      var $incdec_ptr=(($27+28)|0); //@line 655 "lgc.c"
      $n=$incdec_ptr; //@line 655 "lgc.c"
      label = 11; break; //@line 655 "lgc.c"
    case 17: 
      label = 18; break; //@line 661 "lgc.c"
    case 18: 
      var $28=$l_addr; //@line 646 "lgc.c"
      var $h23=$28; //@line 646 "lgc.c"
      var $gclist=(($h23+24)|0); //@line 646 "lgc.c"
      var $29=HEAP32[(($gclist)>>2)]; //@line 646 "lgc.c"
      $l_addr=$29; //@line 646 "lgc.c"
      label = 3; break; //@line 646 "lgc.c"
    case 19: 

      return; //@line 662 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL11clearvaluesP12global_StateP8GCObjectS2_["X"]=1;

function __ZL12markbeingfnzP12global_State($g) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $o;
      $g_addr=$g;
      var $0=$g_addr; //@line 322 "lgc.c"
      var $tobefnz=(($0+96)|0); //@line 322 "lgc.c"
      var $1=HEAP32[(($tobefnz)>>2)]; //@line 322 "lgc.c"
      $o=$1; //@line 322 "lgc.c"
      label = 3; break; //@line 322 "lgc.c"
    case 3: 
      var $2=$o; //@line 322 "lgc.c"
      var $cmp=(($2)|0)!=0; //@line 322 "lgc.c"
      if ($cmp) { label = 4; break; } else { label = 6; break; } //@line 322 "lgc.c"
    case 4: 
      var $3=$o; //@line 323 "lgc.c"
      var $gch=$3; //@line 323 "lgc.c"
      var $marked=(($gch+5)|0); //@line 323 "lgc.c"
      var $4=HEAP8[($marked)]; //@line 323 "lgc.c"
      var $conv=(($4)&255); //@line 323 "lgc.c"
      var $and=$conv & -72; //@line 323 "lgc.c"
      var $5=$g_addr; //@line 323 "lgc.c"
      var $currentwhite=(($5+52)|0); //@line 323 "lgc.c"
      var $6=HEAP8[($currentwhite)]; //@line 323 "lgc.c"
      var $conv1=(($6)&255); //@line 323 "lgc.c"
      var $and2=$conv1 & 3; //@line 323 "lgc.c"
      var $conv3=(($and2) & 255); //@line 323 "lgc.c"
      var $conv4=(($conv3)&255); //@line 323 "lgc.c"
      var $or=$and | $conv4; //@line 323 "lgc.c"
      var $conv5=(($or) & 255); //@line 323 "lgc.c"
      var $7=$o; //@line 323 "lgc.c"
      var $gch6=$7; //@line 323 "lgc.c"
      var $marked7=(($gch6+5)|0); //@line 323 "lgc.c"
      HEAP8[($marked7)]=$conv5; //@line 323 "lgc.c"
      var $8=$g_addr; //@line 324 "lgc.c"
      var $9=$o; //@line 324 "lgc.c"
      __ZL16reallymarkobjectP12global_StateP8GCObject($8, $9); //@line 324 "lgc.c"
      label = 5; break; //@line 325 "lgc.c"
    case 5: 
      var $10=$o; //@line 322 "lgc.c"
      var $gch8=$10; //@line 322 "lgc.c"
      var $next=(($gch8)|0); //@line 322 "lgc.c"
      var $11=HEAP32[(($next)>>2)]; //@line 322 "lgc.c"
      $o=$11; //@line 322 "lgc.c"
      label = 3; break; //@line 322 "lgc.c"
    case 6: 

      return; //@line 326 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}


function __ZL9clearkeysP12global_StateP8GCObjectS2_($g, $l, $f) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $l_addr;
      var $f_addr;
      var $h;
      var $n;
      var $limit;
      $g_addr=$g;
      $l_addr=$l;
      $f_addr=$f;
      label = 3; break; //@line 628 "lgc.c"
    case 3: 
      var $0=$l_addr; //@line 628 "lgc.c"
      var $1=$f_addr; //@line 628 "lgc.c"
      var $cmp=(($0)|0)!=(($1)|0); //@line 628 "lgc.c"
      if ($cmp) { label = 4; break; } else { label = 13; break; } //@line 628 "lgc.c"
    case 4: 
      var $2=$l_addr; //@line 629 "lgc.c"
      var $h1=$2; //@line 629 "lgc.c"
      $h=$h1; //@line 629 "lgc.c"
      var $3=$h; //@line 630 "lgc.c"
      var $lsizenode=(($3+7)|0); //@line 630 "lgc.c"
      var $4=HEAP8[($lsizenode)]; //@line 630 "lgc.c"
      var $conv=(($4)&255); //@line 630 "lgc.c"
      var $shl=1 << $conv; //@line 630 "lgc.c"
      var $5=$h; //@line 630 "lgc.c"
      var $node=(($5+16)|0); //@line 630 "lgc.c"
      var $6=HEAP32[(($node)>>2)]; //@line 630 "lgc.c"
      var $arrayidx=(($6+((($shl)*(28))&-1))|0); //@line 630 "lgc.c"
      $limit=$arrayidx; //@line 630 "lgc.c"
      var $7=$h; //@line 631 "lgc.c"
      var $node2=(($7+16)|0); //@line 631 "lgc.c"
      var $8=HEAP32[(($node2)>>2)]; //@line 631 "lgc.c"
      var $arrayidx3=(($8)|0); //@line 631 "lgc.c"
      $n=$arrayidx3; //@line 631 "lgc.c"
      label = 5; break; //@line 631 "lgc.c"
    case 5: 
      var $9=$n; //@line 631 "lgc.c"
      var $10=$limit; //@line 631 "lgc.c"
      var $cmp5=(($9)>>>0) < (($10)>>>0); //@line 631 "lgc.c"
      if ($cmp5) { label = 6; break; } else { label = 11; break; } //@line 631 "lgc.c"
    case 6: 
      var $11=$n; //@line 632 "lgc.c"
      var $i_val=(($11)|0); //@line 632 "lgc.c"
      var $tt_=(($i_val+8)|0); //@line 632 "lgc.c"
      var $12=HEAP32[(($tt_)>>2)]; //@line 632 "lgc.c"
      var $cmp7=(($12)|0)==0; //@line 632 "lgc.c"
      if ($cmp7) { label = 9; break; } else { label = 7; break; } //@line 632 "lgc.c"
    case 7: 
      var $13=$g_addr; //@line 632 "lgc.c"
      var $14=$n; //@line 632 "lgc.c"
      var $i_key=(($14+12)|0); //@line 632 "lgc.c"
      var $tvk=$i_key; //@line 632 "lgc.c"
      var $call=__ZL9isclearedP12global_StatePK10lua_TValue($13, $tvk); //@line 632 "lgc.c"
      var $tobool=(($call)|0)!=0; //@line 632 "lgc.c"
      if ($tobool) { label = 8; break; } else { label = 9; break; } //@line 632 "lgc.c"
    case 8: 
      var $15=$n; //@line 633 "lgc.c"
      var $i_val8=(($15)|0); //@line 633 "lgc.c"
      var $tt_9=(($i_val8+8)|0); //@line 633 "lgc.c"
      HEAP32[(($tt_9)>>2)]=0; //@line 633 "lgc.c"
      var $16=$n; //@line 634 "lgc.c"
      __ZL11removeentryP4Node($16); //@line 634 "lgc.c"
      label = 9; break; //@line 635 "lgc.c"
    case 9: 
      label = 10; break; //@line 636 "lgc.c"
    case 10: 
      var $17=$n; //@line 631 "lgc.c"
      var $incdec_ptr=(($17+28)|0); //@line 631 "lgc.c"
      $n=$incdec_ptr; //@line 631 "lgc.c"
      label = 5; break; //@line 631 "lgc.c"
    case 11: 
      label = 12; break; //@line 637 "lgc.c"
    case 12: 
      var $18=$l_addr; //@line 628 "lgc.c"
      var $h11=$18; //@line 628 "lgc.c"
      var $gclist=(($h11+24)|0); //@line 628 "lgc.c"
      var $19=HEAP32[(($gclist)>>2)]; //@line 628 "lgc.c"
      $l_addr=$19; //@line 628 "lgc.c"
      label = 3; break; //@line 628 "lgc.c"
    case 13: 

      return; //@line 638 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL9clearkeysP12global_StateP8GCObjectS2_["X"]=1;

function __ZL9isclearedP12global_StatePK10lua_TValue($g, $o) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $g_addr;
      var $o_addr;
      $g_addr=$g;
      $o_addr=$o;
      var $0=$o_addr; //@line 131 "lgc.c"
      var $tt_=(($0+8)|0); //@line 131 "lgc.c"
      var $1=HEAP32[(($tt_)>>2)]; //@line 131 "lgc.c"
      var $and=$1 & 64; //@line 131 "lgc.c"
      var $tobool=(($and)|0)!=0; //@line 131 "lgc.c"
      if ($tobool) { label = 4; break; } else { label = 3; break; } //@line 131 "lgc.c"
    case 3: 
      $retval=0; //@line 131 "lgc.c"
      label = 10; break; //@line 131 "lgc.c"
    case 4: 
      var $2=$o_addr; //@line 132 "lgc.c"
      var $tt_1=(($2+8)|0); //@line 132 "lgc.c"
      var $3=HEAP32[(($tt_1)>>2)]; //@line 132 "lgc.c"
      var $and2=$3 & 15; //@line 132 "lgc.c"
      var $cmp=(($and2)|0)==4; //@line 132 "lgc.c"
      if ($cmp) { label = 5; break; } else { label = 9; break; } //@line 132 "lgc.c"
    case 5: 
      var $4=$o_addr; //@line 133 "lgc.c"
      var $value_=(($4)|0); //@line 133 "lgc.c"
      var $gc=$value_; //@line 133 "lgc.c"
      var $5=HEAP32[(($gc)>>2)]; //@line 133 "lgc.c"
      var $ts=$5; //@line 133 "lgc.c"
      var $tobool4=(($ts)|0)!=0; //@line 133 "lgc.c"
      if ($tobool4) { label = 6; break; } else { label = 8; break; } //@line 133 "lgc.c"
    case 6: 
      var $6=$o_addr; //@line 133 "lgc.c"
      var $value_5=(($6)|0); //@line 133 "lgc.c"
      var $gc6=$value_5; //@line 133 "lgc.c"
      var $7=HEAP32[(($gc6)>>2)]; //@line 133 "lgc.c"
      var $ts7=$7; //@line 133 "lgc.c"
      var $8=$ts7; //@line 133 "lgc.c"
      var $gch=$8; //@line 133 "lgc.c"
      var $marked=(($gch+5)|0); //@line 133 "lgc.c"
      var $9=HEAP8[($marked)]; //@line 133 "lgc.c"
      var $conv=(($9)&255); //@line 133 "lgc.c"
      var $and8=$conv & 3; //@line 133 "lgc.c"
      var $tobool9=(($and8)|0)!=0; //@line 133 "lgc.c"
      if ($tobool9) { label = 7; break; } else { label = 8; break; } //@line 133 "lgc.c"
    case 7: 
      var $10=$g_addr; //@line 133 "lgc.c"
      var $11=$o_addr; //@line 133 "lgc.c"
      var $value_11=(($11)|0); //@line 133 "lgc.c"
      var $gc12=$value_11; //@line 133 "lgc.c"
      var $12=HEAP32[(($gc12)>>2)]; //@line 133 "lgc.c"
      var $ts13=$12; //@line 133 "lgc.c"
      var $13=$ts13; //@line 133 "lgc.c"
      __ZL16reallymarkobjectP12global_StateP8GCObject($10, $13); //@line 133 "lgc.c"
      label = 8; break; //@line 133 "lgc.c"
    case 8: 
      $retval=0; //@line 134 "lgc.c"
      label = 10; break; //@line 134 "lgc.c"
    case 9: 
      var $14=$o_addr; //@line 136 "lgc.c"
      var $value_15=(($14)|0); //@line 136 "lgc.c"
      var $gc16=$value_15; //@line 136 "lgc.c"
      var $15=HEAP32[(($gc16)>>2)]; //@line 136 "lgc.c"
      var $gch17=$15; //@line 136 "lgc.c"
      var $marked18=(($gch17+5)|0); //@line 136 "lgc.c"
      var $16=HEAP8[($marked18)]; //@line 136 "lgc.c"
      var $conv19=(($16)&255); //@line 136 "lgc.c"
      var $and20=$conv19 & 3; //@line 136 "lgc.c"
      $retval=$and20; //@line 136 "lgc.c"
      label = 10; break; //@line 136 "lgc.c"
    case 10: 
      var $17=$retval; //@line 137 "lgc.c"

      return $17; //@line 137 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL9isclearedP12global_StatePK10lua_TValue["X"]=1;

function __ZL17traverseephemeronP12global_StateP5Table($g, $h) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $h_addr;
      var $marked;
      var $hasclears;
      var $prop;
      var $n;
      var $limit;
      var $i;
      $g_addr=$g;
      $h_addr=$h;
      $marked=0; //@line 388 "lgc.c"
      $hasclears=0; //@line 389 "lgc.c"
      $prop=0; //@line 390 "lgc.c"
      var $0=$h_addr; //@line 391 "lgc.c"
      var $lsizenode=(($0+7)|0); //@line 391 "lgc.c"
      var $1=HEAP8[($lsizenode)]; //@line 391 "lgc.c"
      var $conv=(($1)&255); //@line 391 "lgc.c"
      var $shl=1 << $conv; //@line 391 "lgc.c"
      var $2=$h_addr; //@line 391 "lgc.c"
      var $node=(($2+16)|0); //@line 391 "lgc.c"
      var $3=HEAP32[(($node)>>2)]; //@line 391 "lgc.c"
      var $arrayidx=(($3+((($shl)*(28))&-1))|0); //@line 391 "lgc.c"
      $limit=$arrayidx; //@line 391 "lgc.c"
      $i=0; //@line 394 "lgc.c"
      label = 3; break; //@line 394 "lgc.c"
    case 3: 
      var $4=$i; //@line 394 "lgc.c"
      var $5=$h_addr; //@line 394 "lgc.c"
      var $sizearray=(($5+28)|0); //@line 394 "lgc.c"
      var $6=HEAP32[(($sizearray)>>2)]; //@line 394 "lgc.c"
      var $cmp=(($4)|0) < (($6)|0); //@line 394 "lgc.c"
      if ($cmp) { label = 4; break; } else { label = 9; break; } //@line 394 "lgc.c"
    case 4: 
      var $7=$i; //@line 395 "lgc.c"
      var $8=$h_addr; //@line 395 "lgc.c"
      var $array=(($8+12)|0); //@line 395 "lgc.c"
      var $9=HEAP32[(($array)>>2)]; //@line 395 "lgc.c"
      var $arrayidx1=(($9+((($7)*(12))&-1))|0); //@line 395 "lgc.c"
      var $tt_=(($arrayidx1+8)|0); //@line 395 "lgc.c"
      var $10=HEAP32[(($tt_)>>2)]; //@line 395 "lgc.c"
      var $and=$10 & 64; //@line 395 "lgc.c"
      var $tobool=(($and)|0)!=0; //@line 395 "lgc.c"
      if ($tobool) { label = 5; break; } else { label = 7; break; } //@line 395 "lgc.c"
    case 5: 
      var $11=$i; //@line 395 "lgc.c"
      var $12=$h_addr; //@line 395 "lgc.c"
      var $array2=(($12+12)|0); //@line 395 "lgc.c"
      var $13=HEAP32[(($array2)>>2)]; //@line 395 "lgc.c"
      var $arrayidx3=(($13+((($11)*(12))&-1))|0); //@line 395 "lgc.c"
      var $value_=(($arrayidx3)|0); //@line 395 "lgc.c"
      var $gc=$value_; //@line 395 "lgc.c"
      var $14=HEAP32[(($gc)>>2)]; //@line 395 "lgc.c"
      var $gch=$14; //@line 395 "lgc.c"
      var $marked4=(($gch+5)|0); //@line 395 "lgc.c"
      var $15=HEAP8[($marked4)]; //@line 395 "lgc.c"
      var $conv5=(($15)&255); //@line 395 "lgc.c"
      var $and6=$conv5 & 3; //@line 395 "lgc.c"
      var $tobool7=(($and6)|0)!=0; //@line 395 "lgc.c"
      if ($tobool7) { label = 6; break; } else { label = 7; break; } //@line 395 "lgc.c"
    case 6: 
      $marked=1; //@line 396 "lgc.c"
      var $16=$g_addr; //@line 397 "lgc.c"
      var $17=$i; //@line 397 "lgc.c"
      var $18=$h_addr; //@line 397 "lgc.c"
      var $array8=(($18+12)|0); //@line 397 "lgc.c"
      var $19=HEAP32[(($array8)>>2)]; //@line 397 "lgc.c"
      var $arrayidx9=(($19+((($17)*(12))&-1))|0); //@line 397 "lgc.c"
      var $value_10=(($arrayidx9)|0); //@line 397 "lgc.c"
      var $gc11=$value_10; //@line 397 "lgc.c"
      var $20=HEAP32[(($gc11)>>2)]; //@line 397 "lgc.c"
      __ZL16reallymarkobjectP12global_StateP8GCObject($16, $20); //@line 397 "lgc.c"
      label = 7; break; //@line 398 "lgc.c"
    case 7: 
      label = 8; break; //@line 399 "lgc.c"
    case 8: 
      var $21=$i; //@line 394 "lgc.c"
      var $inc=((($21)+(1))|0); //@line 394 "lgc.c"
      $i=$inc; //@line 394 "lgc.c"
      label = 3; break; //@line 394 "lgc.c"
    case 9: 
      var $22=$h_addr; //@line 401 "lgc.c"
      var $node12=(($22+16)|0); //@line 401 "lgc.c"
      var $23=HEAP32[(($node12)>>2)]; //@line 401 "lgc.c"
      var $arrayidx13=(($23)|0); //@line 401 "lgc.c"
      $n=$arrayidx13; //@line 401 "lgc.c"
      label = 10; break; //@line 401 "lgc.c"
    case 10: 
      var $24=$n; //@line 401 "lgc.c"
      var $25=$limit; //@line 401 "lgc.c"
      var $cmp15=(($24)>>>0) < (($25)>>>0); //@line 401 "lgc.c"
      if ($cmp15) { label = 11; break; } else { label = 25; break; } //@line 401 "lgc.c"
    case 11: 
      var $26=$n; //@line 403 "lgc.c"
      var $i_val=(($26)|0); //@line 403 "lgc.c"
      var $tt_17=(($i_val+8)|0); //@line 403 "lgc.c"
      var $27=HEAP32[(($tt_17)>>2)]; //@line 403 "lgc.c"
      var $cmp18=(($27)|0)==0; //@line 403 "lgc.c"
      if ($cmp18) { label = 12; break; } else { label = 13; break; } //@line 403 "lgc.c"
    case 12: 
      var $28=$n; //@line 404 "lgc.c"
      __ZL11removeentryP4Node($28); //@line 404 "lgc.c"
      label = 23; break; //@line 404 "lgc.c"
    case 13: 
      var $29=$g_addr; //@line 405 "lgc.c"
      var $30=$n; //@line 405 "lgc.c"
      var $i_key=(($30+12)|0); //@line 405 "lgc.c"
      var $tvk=$i_key; //@line 405 "lgc.c"
      var $call=__ZL9isclearedP12global_StatePK10lua_TValue($29, $tvk); //@line 405 "lgc.c"
      var $tobool20=(($call)|0)!=0; //@line 405 "lgc.c"
      if ($tobool20) { label = 14; break; } else { label = 18; break; } //@line 405 "lgc.c"
    case 14: 
      $hasclears=1; //@line 406 "lgc.c"
      var $31=$n; //@line 407 "lgc.c"
      var $i_val22=(($31)|0); //@line 407 "lgc.c"
      var $tt_23=(($i_val22+8)|0); //@line 407 "lgc.c"
      var $32=HEAP32[(($tt_23)>>2)]; //@line 407 "lgc.c"
      var $and24=$32 & 64; //@line 407 "lgc.c"
      var $tobool25=(($and24)|0)!=0; //@line 407 "lgc.c"
      if ($tobool25) { label = 15; break; } else { label = 17; break; } //@line 407 "lgc.c"
    case 15: 
      var $33=$n; //@line 407 "lgc.c"
      var $i_val27=(($33)|0); //@line 407 "lgc.c"
      var $value_28=(($i_val27)|0); //@line 407 "lgc.c"
      var $gc29=$value_28; //@line 407 "lgc.c"
      var $34=HEAP32[(($gc29)>>2)]; //@line 407 "lgc.c"
      var $gch30=$34; //@line 407 "lgc.c"
      var $marked31=(($gch30+5)|0); //@line 407 "lgc.c"
      var $35=HEAP8[($marked31)]; //@line 407 "lgc.c"
      var $conv32=(($35)&255); //@line 407 "lgc.c"
      var $and33=$conv32 & 3; //@line 407 "lgc.c"
      var $tobool34=(($and33)|0)!=0; //@line 407 "lgc.c"
      if ($tobool34) { label = 16; break; } else { label = 17; break; } //@line 407 "lgc.c"
    case 16: 
      $prop=1; //@line 408 "lgc.c"
      label = 17; break; //@line 408 "lgc.c"
    case 17: 
      label = 22; break; //@line 409 "lgc.c"
    case 18: 
      var $36=$n; //@line 410 "lgc.c"
      var $i_val38=(($36)|0); //@line 410 "lgc.c"
      var $tt_39=(($i_val38+8)|0); //@line 410 "lgc.c"
      var $37=HEAP32[(($tt_39)>>2)]; //@line 410 "lgc.c"
      var $and40=$37 & 64; //@line 410 "lgc.c"
      var $tobool41=(($and40)|0)!=0; //@line 410 "lgc.c"
      if ($tobool41) { label = 19; break; } else { label = 21; break; } //@line 410 "lgc.c"
    case 19: 
      var $38=$n; //@line 410 "lgc.c"
      var $i_val43=(($38)|0); //@line 410 "lgc.c"
      var $value_44=(($i_val43)|0); //@line 410 "lgc.c"
      var $gc45=$value_44; //@line 410 "lgc.c"
      var $39=HEAP32[(($gc45)>>2)]; //@line 410 "lgc.c"
      var $gch46=$39; //@line 410 "lgc.c"
      var $marked47=(($gch46+5)|0); //@line 410 "lgc.c"
      var $40=HEAP8[($marked47)]; //@line 410 "lgc.c"
      var $conv48=(($40)&255); //@line 410 "lgc.c"
      var $and49=$conv48 & 3; //@line 410 "lgc.c"
      var $tobool50=(($and49)|0)!=0; //@line 410 "lgc.c"
      if ($tobool50) { label = 20; break; } else { label = 21; break; } //@line 410 "lgc.c"
    case 20: 
      $marked=1; //@line 411 "lgc.c"
      var $41=$g_addr; //@line 412 "lgc.c"
      var $42=$n; //@line 412 "lgc.c"
      var $i_val52=(($42)|0); //@line 412 "lgc.c"
      var $value_53=(($i_val52)|0); //@line 412 "lgc.c"
      var $gc54=$value_53; //@line 412 "lgc.c"
      var $43=HEAP32[(($gc54)>>2)]; //@line 412 "lgc.c"
      __ZL16reallymarkobjectP12global_StateP8GCObject($41, $43); //@line 412 "lgc.c"
      label = 21; break; //@line 413 "lgc.c"
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break; //@line 414 "lgc.c"
    case 24: 
      var $44=$n; //@line 401 "lgc.c"
      var $incdec_ptr=(($44+28)|0); //@line 401 "lgc.c"
      $n=$incdec_ptr; //@line 401 "lgc.c"
      label = 10; break; //@line 401 "lgc.c"
    case 25: 
      var $45=$prop; //@line 415 "lgc.c"
      var $tobool60=(($45)|0)!=0; //@line 415 "lgc.c"
      if ($tobool60) { label = 26; break; } else { label = 27; break; } //@line 415 "lgc.c"
    case 26: 
      var $46=$g_addr; //@line 416 "lgc.c"
      var $ephemeron=(($46+88)|0); //@line 416 "lgc.c"
      var $47=HEAP32[(($ephemeron)>>2)]; //@line 416 "lgc.c"
      var $48=$h_addr; //@line 416 "lgc.c"
      var $gclist=(($48+24)|0); //@line 416 "lgc.c"
      HEAP32[(($gclist)>>2)]=$47; //@line 416 "lgc.c"
      var $49=$h_addr; //@line 416 "lgc.c"
      var $50=$49; //@line 416 "lgc.c"
      var $51=$g_addr; //@line 416 "lgc.c"
      var $ephemeron62=(($51+88)|0); //@line 416 "lgc.c"
      HEAP32[(($ephemeron62)>>2)]=$50; //@line 416 "lgc.c"
      label = 31; break; //@line 416 "lgc.c"
    case 27: 
      var $52=$hasclears; //@line 417 "lgc.c"
      var $tobool64=(($52)|0)!=0; //@line 417 "lgc.c"
      if ($tobool64) { label = 28; break; } else { label = 29; break; } //@line 417 "lgc.c"
    case 28: 
      var $53=$g_addr; //@line 418 "lgc.c"
      var $allweak=(($53+92)|0); //@line 418 "lgc.c"
      var $54=HEAP32[(($allweak)>>2)]; //@line 418 "lgc.c"
      var $55=$h_addr; //@line 418 "lgc.c"
      var $gclist66=(($55+24)|0); //@line 418 "lgc.c"
      HEAP32[(($gclist66)>>2)]=$54; //@line 418 "lgc.c"
      var $56=$h_addr; //@line 418 "lgc.c"
      var $57=$56; //@line 418 "lgc.c"
      var $58=$g_addr; //@line 418 "lgc.c"
      var $allweak67=(($58+92)|0); //@line 418 "lgc.c"
      HEAP32[(($allweak67)>>2)]=$57; //@line 418 "lgc.c"
      label = 30; break; //@line 418 "lgc.c"
    case 29: 
      var $59=$g_addr; //@line 420 "lgc.c"
      var $grayagain=(($59+80)|0); //@line 420 "lgc.c"
      var $60=HEAP32[(($grayagain)>>2)]; //@line 420 "lgc.c"
      var $61=$h_addr; //@line 420 "lgc.c"
      var $gclist69=(($61+24)|0); //@line 420 "lgc.c"
      HEAP32[(($gclist69)>>2)]=$60; //@line 420 "lgc.c"
      var $62=$h_addr; //@line 420 "lgc.c"
      var $63=$62; //@line 420 "lgc.c"
      var $64=$g_addr; //@line 420 "lgc.c"
      var $grayagain70=(($64+80)|0); //@line 420 "lgc.c"
      HEAP32[(($grayagain70)>>2)]=$63; //@line 420 "lgc.c"
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $65=$marked; //@line 421 "lgc.c"

      return $65; //@line 421 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL17traverseephemeronP12global_StateP5Table["X"]=1;

function __ZL13propagatelistP12global_StateP8GCObject($g, $l) {
  var label = 0;


  var $g_addr;
  var $l_addr;
  $g_addr=$g;
  $l_addr=$l;
  var $0=$l_addr; //@line 575 "lgc.c"
  var $1=$g_addr; //@line 575 "lgc.c"
  var $gray=(($1+76)|0); //@line 575 "lgc.c"
  HEAP32[(($gray)>>2)]=$0; //@line 575 "lgc.c"
  var $2=$g_addr; //@line 576 "lgc.c"
  __ZL12propagateallP12global_State($2); //@line 576 "lgc.c"

  return; //@line 577 "lgc.c"
}


function __ZL13traversetableP12global_StateP5Table($g, $h) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $h_addr;
      var $weakkey;
      var $weakvalue;
      var $mode;
      $g_addr=$g;
      $h_addr=$h;
      var $0=$h_addr; //@line 445 "lgc.c"
      var $metatable=(($0+8)|0); //@line 445 "lgc.c"
      var $1=HEAP32[(($metatable)>>2)]; //@line 445 "lgc.c"
      var $cmp=(($1)|0)==0; //@line 445 "lgc.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 445 "lgc.c"
    case 3: 
      var $cond6 = 0;label = 8; break; //@line 445 "lgc.c"
    case 4: 
      var $2=$h_addr; //@line 445 "lgc.c"
      var $metatable1=(($2+8)|0); //@line 445 "lgc.c"
      var $3=HEAP32[(($metatable1)>>2)]; //@line 445 "lgc.c"
      var $flags=(($3+6)|0); //@line 445 "lgc.c"
      var $4=HEAP8[($flags)]; //@line 445 "lgc.c"
      var $conv=(($4)&255); //@line 445 "lgc.c"
      var $and=$conv & 8; //@line 445 "lgc.c"
      var $tobool=(($and)|0)!=0; //@line 445 "lgc.c"
      if ($tobool) { label = 5; break; } else { label = 6; break; } //@line 445 "lgc.c"
    case 5: 
      var $cond = 0;label = 7; break; //@line 445 "lgc.c"
    case 6: 
      var $5=$h_addr; //@line 445 "lgc.c"
      var $metatable4=(($5+8)|0); //@line 445 "lgc.c"
      var $6=HEAP32[(($metatable4)>>2)]; //@line 445 "lgc.c"
      var $7=$g_addr; //@line 445 "lgc.c"
      var $tmname=(($7+164)|0); //@line 445 "lgc.c"
      var $arrayidx=(($tmname+12)|0); //@line 445 "lgc.c"
      var $8=HEAP32[(($arrayidx)>>2)]; //@line 445 "lgc.c"
      var $call=__Z10luaT_gettmP5Table3TMSP7TString($6, 3, $8); //@line 445 "lgc.c"
      var $cond = $call;label = 7; break; //@line 445 "lgc.c"
    case 7: 
      var $cond; //@line 445 "lgc.c"
      var $cond6 = $cond;label = 8; break; //@line 445 "lgc.c"
    case 8: 
      var $cond6; //@line 445 "lgc.c"
      $mode=$cond6; //@line 445 "lgc.c"
      var $9=$h_addr; //@line 446 "lgc.c"
      var $metatable7=(($9+8)|0); //@line 446 "lgc.c"
      var $10=HEAP32[(($metatable7)>>2)]; //@line 446 "lgc.c"
      var $tobool8=(($10)|0)!=0; //@line 446 "lgc.c"
      if ($tobool8) { label = 9; break; } else { label = 11; break; } //@line 446 "lgc.c"
    case 9: 
      var $11=$h_addr; //@line 446 "lgc.c"
      var $metatable9=(($11+8)|0); //@line 446 "lgc.c"
      var $12=HEAP32[(($metatable9)>>2)]; //@line 446 "lgc.c"
      var $13=$12; //@line 446 "lgc.c"
      var $gch=$13; //@line 446 "lgc.c"
      var $marked=(($gch+5)|0); //@line 446 "lgc.c"
      var $14=HEAP8[($marked)]; //@line 446 "lgc.c"
      var $conv10=(($14)&255); //@line 446 "lgc.c"
      var $and11=$conv10 & 3; //@line 446 "lgc.c"
      var $tobool12=(($and11)|0)!=0; //@line 446 "lgc.c"
      if ($tobool12) { label = 10; break; } else { label = 11; break; } //@line 446 "lgc.c"
    case 10: 
      var $15=$g_addr; //@line 446 "lgc.c"
      var $16=$h_addr; //@line 446 "lgc.c"
      var $metatable13=(($16+8)|0); //@line 446 "lgc.c"
      var $17=HEAP32[(($metatable13)>>2)]; //@line 446 "lgc.c"
      var $18=$17; //@line 446 "lgc.c"
      __ZL16reallymarkobjectP12global_StateP8GCObject($15, $18); //@line 446 "lgc.c"
      label = 11; break; //@line 446 "lgc.c"
    case 11: 
      var $19=$mode; //@line 447 "lgc.c"
      var $tobool14=(($19)|0)!=0; //@line 447 "lgc.c"
      if ($tobool14) { label = 12; break; } else { label = 23; break; } //@line 447 "lgc.c"
    case 12: 
      var $20=$mode; //@line 447 "lgc.c"
      var $tt_=(($20+8)|0); //@line 447 "lgc.c"
      var $21=HEAP32[(($tt_)>>2)]; //@line 447 "lgc.c"
      var $and16=$21 & 15; //@line 447 "lgc.c"
      var $cmp17=(($and16)|0)==4; //@line 447 "lgc.c"
      if ($cmp17) { label = 13; break; } else { label = 23; break; } //@line 447 "lgc.c"
    case 13: 
      var $22=$mode; //@line 448 "lgc.c"
      var $value_=(($22)|0); //@line 448 "lgc.c"
      var $gc=$value_; //@line 448 "lgc.c"
      var $23=HEAP32[(($gc)>>2)]; //@line 448 "lgc.c"
      var $ts=$23; //@line 448 "lgc.c"
      var $add_ptr=(($ts+16)|0); //@line 448 "lgc.c"
      var $24=$add_ptr; //@line 448 "lgc.c"
      var $call19=_strchr($24, 107); //@line 448 "lgc.c"
      $weakkey=$call19; //@line 448 "lgc.c"
      var $25=$mode; //@line 449 "lgc.c"
      var $value_20=(($25)|0); //@line 449 "lgc.c"
      var $gc21=$value_20; //@line 449 "lgc.c"
      var $26=HEAP32[(($gc21)>>2)]; //@line 449 "lgc.c"
      var $ts22=$26; //@line 449 "lgc.c"
      var $add_ptr23=(($ts22+16)|0); //@line 449 "lgc.c"
      var $27=$add_ptr23; //@line 449 "lgc.c"
      var $call24=_strchr($27, 118); //@line 449 "lgc.c"
      $weakvalue=$call24; //@line 449 "lgc.c"
      var $28=$weakkey; //@line 449 "lgc.c"
      var $tobool25=(($28)|0)!=0; //@line 449 "lgc.c"
      if ($tobool25) { var $30 = 1;label = 15; break; } else { label = 14; break; } //@line 449 "lgc.c"
    case 14: 
      var $29=$weakvalue; //@line 449 "lgc.c"
      var $tobool26=(($29)|0)!=0; //@line 449 "lgc.c"
      var $30 = $tobool26;label = 15; break; //@line 449 "lgc.c"
    case 15: 
      var $30;
      if ($30) { label = 16; break; } else { label = 23; break; } //@line 449 "lgc.c"
    case 16: 
      var $31=$h_addr; //@line 451 "lgc.c"
      var $32=$31; //@line 451 "lgc.c"
      var $gch28=$32; //@line 451 "lgc.c"
      var $marked29=(($gch28+5)|0); //@line 451 "lgc.c"
      var $33=HEAP8[($marked29)]; //@line 451 "lgc.c"
      var $conv30=(($33)&255); //@line 451 "lgc.c"
      var $and31=$conv30 & 251; //@line 451 "lgc.c"
      var $conv32=(($and31) & 255); //@line 451 "lgc.c"
      HEAP8[($marked29)]=$conv32; //@line 451 "lgc.c"
      var $34=$weakkey; //@line 452 "lgc.c"
      var $tobool33=(($34)|0)!=0; //@line 452 "lgc.c"
      if ($tobool33) { label = 18; break; } else { label = 17; break; } //@line 452 "lgc.c"
    case 17: 
      var $35=$g_addr; //@line 453 "lgc.c"
      var $36=$h_addr; //@line 453 "lgc.c"
      __ZL17traverseweakvalueP12global_StateP5Table($35, $36); //@line 453 "lgc.c"
      label = 22; break; //@line 453 "lgc.c"
    case 18: 
      var $37=$weakvalue; //@line 454 "lgc.c"
      var $tobool35=(($37)|0)!=0; //@line 454 "lgc.c"
      if ($tobool35) { label = 20; break; } else { label = 19; break; } //@line 454 "lgc.c"
    case 19: 
      var $38=$g_addr; //@line 455 "lgc.c"
      var $39=$h_addr; //@line 455 "lgc.c"
      var $call37=__ZL17traverseephemeronP12global_StateP5Table($38, $39); //@line 455 "lgc.c"
      label = 21; break; //@line 455 "lgc.c"
    case 20: 
      var $40=$g_addr; //@line 457 "lgc.c"
      var $allweak=(($40+92)|0); //@line 457 "lgc.c"
      var $41=HEAP32[(($allweak)>>2)]; //@line 457 "lgc.c"
      var $42=$h_addr; //@line 457 "lgc.c"
      var $gclist=(($42+24)|0); //@line 457 "lgc.c"
      HEAP32[(($gclist)>>2)]=$41; //@line 457 "lgc.c"
      var $43=$h_addr; //@line 457 "lgc.c"
      var $44=$43; //@line 457 "lgc.c"
      var $45=$g_addr; //@line 457 "lgc.c"
      var $allweak39=(($45+92)|0); //@line 457 "lgc.c"
      HEAP32[(($allweak39)>>2)]=$44; //@line 457 "lgc.c"
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 24; break; //@line 458 "lgc.c"
    case 23: 
      var $46=$g_addr; //@line 460 "lgc.c"
      var $47=$h_addr; //@line 460 "lgc.c"
      __ZL19traversestrongtableP12global_StateP5Table($46, $47); //@line 460 "lgc.c"
      label = 24; break;
    case 24: 
      var $48=$h_addr; //@line 461 "lgc.c"
      var $sizearray=(($48+28)|0); //@line 461 "lgc.c"
      var $49=HEAP32[(($sizearray)>>2)]; //@line 461 "lgc.c"
      var $mul=((($49)*(12))&-1); //@line 461 "lgc.c"
      var $add=((($mul)+(32))|0); //@line 461 "lgc.c"
      var $50=$h_addr; //@line 461 "lgc.c"
      var $lsizenode=(($50+7)|0); //@line 461 "lgc.c"
      var $51=HEAP8[($lsizenode)]; //@line 461 "lgc.c"
      var $conv44=(($51)&255); //@line 461 "lgc.c"
      var $shl=1 << $conv44; //@line 461 "lgc.c"
      var $mul45=((($shl)*(28))&-1); //@line 461 "lgc.c"
      var $add46=((($add)+($mul45))|0); //@line 461 "lgc.c"

      return $add46; //@line 461 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL13traversetableP12global_StateP5Table["X"]=1;

function __ZL16traverseLclosureP12global_StateP8LClosure($g, $cl) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $cl_addr;
      var $i;
      $g_addr=$g;
      $cl_addr=$cl;
      var $0=$cl_addr; //@line 497 "lgc.c"
      var $p=(($0+12)|0); //@line 497 "lgc.c"
      var $1=HEAP32[(($p)>>2)]; //@line 497 "lgc.c"
      var $tobool=(($1)|0)!=0; //@line 497 "lgc.c"
      if ($tobool) { label = 3; break; } else { label = 5; break; } //@line 497 "lgc.c"
    case 3: 
      var $2=$cl_addr; //@line 497 "lgc.c"
      var $p1=(($2+12)|0); //@line 497 "lgc.c"
      var $3=HEAP32[(($p1)>>2)]; //@line 497 "lgc.c"
      var $4=$3; //@line 497 "lgc.c"
      var $gch=$4; //@line 497 "lgc.c"
      var $marked=(($gch+5)|0); //@line 497 "lgc.c"
      var $5=HEAP8[($marked)]; //@line 497 "lgc.c"
      var $conv=(($5)&255); //@line 497 "lgc.c"
      var $and=$conv & 3; //@line 497 "lgc.c"
      var $tobool2=(($and)|0)!=0; //@line 497 "lgc.c"
      if ($tobool2) { label = 4; break; } else { label = 5; break; } //@line 497 "lgc.c"
    case 4: 
      var $6=$g_addr; //@line 497 "lgc.c"
      var $7=$cl_addr; //@line 497 "lgc.c"
      var $p3=(($7+12)|0); //@line 497 "lgc.c"
      var $8=HEAP32[(($p3)>>2)]; //@line 497 "lgc.c"
      var $9=$8; //@line 497 "lgc.c"
      __ZL16reallymarkobjectP12global_StateP8GCObject($6, $9); //@line 497 "lgc.c"
      label = 5; break; //@line 497 "lgc.c"
    case 5: 
      $i=0; //@line 498 "lgc.c"
      label = 6; break; //@line 498 "lgc.c"
    case 6: 
      var $10=$i; //@line 498 "lgc.c"
      var $11=$cl_addr; //@line 498 "lgc.c"
      var $nupvalues=(($11+6)|0); //@line 498 "lgc.c"
      var $12=HEAP8[($nupvalues)]; //@line 498 "lgc.c"
      var $conv4=(($12)&255); //@line 498 "lgc.c"
      var $cmp=(($10)|0) < (($conv4)|0); //@line 498 "lgc.c"
      if ($cmp) { label = 7; break; } else { label = 12; break; } //@line 498 "lgc.c"
    case 7: 
      var $13=$i; //@line 499 "lgc.c"
      var $14=$cl_addr; //@line 499 "lgc.c"
      var $upvals=(($14+16)|0); //@line 499 "lgc.c"
      var $arrayidx=(($upvals+($13<<2))|0); //@line 499 "lgc.c"
      var $15=HEAP32[(($arrayidx)>>2)]; //@line 499 "lgc.c"
      var $tobool5=(($15)|0)!=0; //@line 499 "lgc.c"
      if ($tobool5) { label = 8; break; } else { label = 10; break; } //@line 499 "lgc.c"
    case 8: 
      var $16=$i; //@line 499 "lgc.c"
      var $17=$cl_addr; //@line 499 "lgc.c"
      var $upvals7=(($17+16)|0); //@line 499 "lgc.c"
      var $arrayidx8=(($upvals7+($16<<2))|0); //@line 499 "lgc.c"
      var $18=HEAP32[(($arrayidx8)>>2)]; //@line 499 "lgc.c"
      var $19=$18; //@line 499 "lgc.c"
      var $gch9=$19; //@line 499 "lgc.c"
      var $marked10=(($gch9+5)|0); //@line 499 "lgc.c"
      var $20=HEAP8[($marked10)]; //@line 499 "lgc.c"
      var $conv11=(($20)&255); //@line 499 "lgc.c"
      var $and12=$conv11 & 3; //@line 499 "lgc.c"
      var $tobool13=(($and12)|0)!=0; //@line 499 "lgc.c"
      if ($tobool13) { label = 9; break; } else { label = 10; break; } //@line 499 "lgc.c"
    case 9: 
      var $21=$g_addr; //@line 499 "lgc.c"
      var $22=$i; //@line 499 "lgc.c"
      var $23=$cl_addr; //@line 499 "lgc.c"
      var $upvals15=(($23+16)|0); //@line 499 "lgc.c"
      var $arrayidx16=(($upvals15+($22<<2))|0); //@line 499 "lgc.c"
      var $24=HEAP32[(($arrayidx16)>>2)]; //@line 499 "lgc.c"
      var $25=$24; //@line 499 "lgc.c"
      __ZL16reallymarkobjectP12global_StateP8GCObject($21, $25); //@line 499 "lgc.c"
      label = 10; break; //@line 499 "lgc.c"
    case 10: 
      label = 11; break; //@line 499 "lgc.c"
    case 11: 
      var $26=$i; //@line 498 "lgc.c"
      var $inc=((($26)+(1))|0); //@line 498 "lgc.c"
      $i=$inc; //@line 498 "lgc.c"
      label = 6; break; //@line 498 "lgc.c"
    case 12: 
      var $27=$cl_addr; //@line 500 "lgc.c"
      var $nupvalues18=(($27+6)|0); //@line 500 "lgc.c"
      var $28=HEAP8[($nupvalues18)]; //@line 500 "lgc.c"
      var $conv19=(($28)&255); //@line 500 "lgc.c"
      var $sub=((($conv19)-(1))|0); //@line 500 "lgc.c"
      var $mul=($sub<<2); //@line 500 "lgc.c"
      var $add=((($mul)+(20))|0); //@line 500 "lgc.c"

      return $add; //@line 500 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL16traverseLclosureP12global_StateP8LClosure["X"]=1;

function __ZL16traverseCclosureP12global_StateP8CClosure($g, $cl) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $cl_addr;
      var $i;
      $g_addr=$g;
      $cl_addr=$cl;
      $i=0; //@line 490 "lgc.c"
      label = 3; break; //@line 490 "lgc.c"
    case 3: 
      var $0=$i; //@line 490 "lgc.c"
      var $1=$cl_addr; //@line 490 "lgc.c"
      var $nupvalues=(($1+6)|0); //@line 490 "lgc.c"
      var $2=HEAP8[($nupvalues)]; //@line 490 "lgc.c"
      var $conv=(($2)&255); //@line 490 "lgc.c"
      var $cmp=(($0)|0) < (($conv)|0); //@line 490 "lgc.c"
      if ($cmp) { label = 4; break; } else { label = 9; break; } //@line 490 "lgc.c"
    case 4: 
      var $3=$i; //@line 491 "lgc.c"
      var $4=$cl_addr; //@line 491 "lgc.c"
      var $upvalue=(($4+16)|0); //@line 491 "lgc.c"
      var $arrayidx=(($upvalue+((($3)*(12))&-1))|0); //@line 491 "lgc.c"
      var $tt_=(($arrayidx+8)|0); //@line 491 "lgc.c"
      var $5=HEAP32[(($tt_)>>2)]; //@line 491 "lgc.c"
      var $and=$5 & 64; //@line 491 "lgc.c"
      var $tobool=(($and)|0)!=0; //@line 491 "lgc.c"
      if ($tobool) { label = 5; break; } else { label = 7; break; } //@line 491 "lgc.c"
    case 5: 
      var $6=$i; //@line 491 "lgc.c"
      var $7=$cl_addr; //@line 491 "lgc.c"
      var $upvalue1=(($7+16)|0); //@line 491 "lgc.c"
      var $arrayidx2=(($upvalue1+((($6)*(12))&-1))|0); //@line 491 "lgc.c"
      var $value_=(($arrayidx2)|0); //@line 491 "lgc.c"
      var $gc=$value_; //@line 491 "lgc.c"
      var $8=HEAP32[(($gc)>>2)]; //@line 491 "lgc.c"
      var $gch=$8; //@line 491 "lgc.c"
      var $marked=(($gch+5)|0); //@line 491 "lgc.c"
      var $9=HEAP8[($marked)]; //@line 491 "lgc.c"
      var $conv3=(($9)&255); //@line 491 "lgc.c"
      var $and4=$conv3 & 3; //@line 491 "lgc.c"
      var $tobool5=(($and4)|0)!=0; //@line 491 "lgc.c"
      if ($tobool5) { label = 6; break; } else { label = 7; break; } //@line 491 "lgc.c"
    case 6: 
      var $10=$g_addr; //@line 491 "lgc.c"
      var $11=$i; //@line 491 "lgc.c"
      var $12=$cl_addr; //@line 491 "lgc.c"
      var $upvalue6=(($12+16)|0); //@line 491 "lgc.c"
      var $arrayidx7=(($upvalue6+((($11)*(12))&-1))|0); //@line 491 "lgc.c"
      var $value_8=(($arrayidx7)|0); //@line 491 "lgc.c"
      var $gc9=$value_8; //@line 491 "lgc.c"
      var $13=HEAP32[(($gc9)>>2)]; //@line 491 "lgc.c"
      __ZL16reallymarkobjectP12global_StateP8GCObject($10, $13); //@line 491 "lgc.c"
      label = 7; break; //@line 491 "lgc.c"
    case 7: 
      label = 8; break; //@line 491 "lgc.c"
    case 8: 
      var $14=$i; //@line 490 "lgc.c"
      var $inc=((($14)+(1))|0); //@line 490 "lgc.c"
      $i=$inc; //@line 490 "lgc.c"
      label = 3; break; //@line 490 "lgc.c"
    case 9: 
      var $15=$cl_addr; //@line 492 "lgc.c"
      var $nupvalues10=(($15+6)|0); //@line 492 "lgc.c"
      var $16=HEAP8[($nupvalues10)]; //@line 492 "lgc.c"
      var $conv11=(($16)&255); //@line 492 "lgc.c"
      var $sub=((($conv11)-(1))|0); //@line 492 "lgc.c"
      var $mul=((($sub)*(12))&-1); //@line 492 "lgc.c"
      var $add=((($mul)+(28))|0); //@line 492 "lgc.c"

      return $add; //@line 492 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL16traverseCclosureP12global_StateP8CClosure["X"]=1;

function __ZL13traversestackP12global_StateP9lua_State($g, $th) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $g_addr;
      var $th_addr;
      var $o;
      var $lim;
      $g_addr=$g;
      $th_addr=$th;
      var $0=$th_addr; //@line 505 "lgc.c"
      var $stack=(($0+28)|0); //@line 505 "lgc.c"
      var $1=HEAP32[(($stack)>>2)]; //@line 505 "lgc.c"
      $o=$1; //@line 505 "lgc.c"
      var $2=$o; //@line 506 "lgc.c"
      var $cmp=(($2)|0)==0; //@line 506 "lgc.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 506 "lgc.c"
    case 3: 
      $retval=1; //@line 507 "lgc.c"
      label = 18; break; //@line 507 "lgc.c"
    case 4: 
      label = 5; break; //@line 508 "lgc.c"
    case 5: 
      var $3=$o; //@line 508 "lgc.c"
      var $4=$th_addr; //@line 508 "lgc.c"
      var $top=(($4+8)|0); //@line 508 "lgc.c"
      var $5=HEAP32[(($top)>>2)]; //@line 508 "lgc.c"
      var $cmp1=(($3)>>>0) < (($5)>>>0); //@line 508 "lgc.c"
      if ($cmp1) { label = 6; break; } else { label = 11; break; } //@line 508 "lgc.c"
    case 6: 
      var $6=$o; //@line 509 "lgc.c"
      var $tt_=(($6+8)|0); //@line 509 "lgc.c"
      var $7=HEAP32[(($tt_)>>2)]; //@line 509 "lgc.c"
      var $and=$7 & 64; //@line 509 "lgc.c"
      var $tobool=(($and)|0)!=0; //@line 509 "lgc.c"
      if ($tobool) { label = 7; break; } else { label = 9; break; } //@line 509 "lgc.c"
    case 7: 
      var $8=$o; //@line 509 "lgc.c"
      var $value_=(($8)|0); //@line 509 "lgc.c"
      var $gc=$value_; //@line 509 "lgc.c"
      var $9=HEAP32[(($gc)>>2)]; //@line 509 "lgc.c"
      var $gch=$9; //@line 509 "lgc.c"
      var $marked=(($gch+5)|0); //@line 509 "lgc.c"
      var $10=HEAP8[($marked)]; //@line 509 "lgc.c"
      var $conv=(($10)&255); //@line 509 "lgc.c"
      var $and2=$conv & 3; //@line 509 "lgc.c"
      var $tobool3=(($and2)|0)!=0; //@line 509 "lgc.c"
      if ($tobool3) { label = 8; break; } else { label = 9; break; } //@line 509 "lgc.c"
    case 8: 
      var $11=$g_addr; //@line 509 "lgc.c"
      var $12=$o; //@line 509 "lgc.c"
      var $value_5=(($12)|0); //@line 509 "lgc.c"
      var $gc6=$value_5; //@line 509 "lgc.c"
      var $13=HEAP32[(($gc6)>>2)]; //@line 509 "lgc.c"
      __ZL16reallymarkobjectP12global_StateP8GCObject($11, $13); //@line 509 "lgc.c"
      label = 9; break; //@line 509 "lgc.c"
    case 9: 
      label = 10; break; //@line 509 "lgc.c"
    case 10: 
      var $14=$o; //@line 508 "lgc.c"
      var $incdec_ptr=(($14+12)|0); //@line 508 "lgc.c"
      $o=$incdec_ptr; //@line 508 "lgc.c"
      label = 5; break; //@line 508 "lgc.c"
    case 11: 
      var $15=$g_addr; //@line 510 "lgc.c"
      var $gcstate=(($15+53)|0); //@line 510 "lgc.c"
      var $16=HEAP8[($gcstate)]; //@line 510 "lgc.c"
      var $conv8=(($16)&255); //@line 510 "lgc.c"
      var $cmp9=(($conv8)|0)==1; //@line 510 "lgc.c"
      if ($cmp9) { label = 12; break; } else { label = 17; break; } //@line 510 "lgc.c"
    case 12: 
      var $17=$th_addr; //@line 511 "lgc.c"
      var $stack11=(($17+28)|0); //@line 511 "lgc.c"
      var $18=HEAP32[(($stack11)>>2)]; //@line 511 "lgc.c"
      var $19=$th_addr; //@line 511 "lgc.c"
      var $stacksize=(($19+32)|0); //@line 511 "lgc.c"
      var $20=HEAP32[(($stacksize)>>2)]; //@line 511 "lgc.c"
      var $add_ptr=(($18+((($20)*(12))&-1))|0); //@line 511 "lgc.c"
      $lim=$add_ptr; //@line 511 "lgc.c"
      label = 13; break; //@line 512 "lgc.c"
    case 13: 
      var $21=$o; //@line 512 "lgc.c"
      var $22=$lim; //@line 512 "lgc.c"
      var $cmp13=(($21)>>>0) < (($22)>>>0); //@line 512 "lgc.c"
      if ($cmp13) { label = 14; break; } else { label = 16; break; } //@line 512 "lgc.c"
    case 14: 
      var $23=$o; //@line 513 "lgc.c"
      var $tt_15=(($23+8)|0); //@line 513 "lgc.c"
      HEAP32[(($tt_15)>>2)]=0; //@line 513 "lgc.c"
      label = 15; break; //@line 513 "lgc.c"
    case 15: 
      var $24=$o; //@line 512 "lgc.c"
      var $incdec_ptr17=(($24+12)|0); //@line 512 "lgc.c"
      $o=$incdec_ptr17; //@line 512 "lgc.c"
      label = 13; break; //@line 512 "lgc.c"
    case 16: 
      label = 17; break; //@line 514 "lgc.c"
    case 17: 
      var $25=$th_addr; //@line 515 "lgc.c"
      var $stacksize20=(($25+32)|0); //@line 515 "lgc.c"
      var $26=HEAP32[(($stacksize20)>>2)]; //@line 515 "lgc.c"
      var $mul=((($26)*(12))&-1); //@line 515 "lgc.c"
      var $add=((($mul)+(112))|0); //@line 515 "lgc.c"
      $retval=$add; //@line 515 "lgc.c"
      label = 18; break; //@line 515 "lgc.c"
    case 18: 
      var $27=$retval; //@line 516 "lgc.c"

      return $27; //@line 516 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL13traversestackP12global_StateP9lua_State["X"]=1;

function __ZL13traverseprotoP12global_StateP5Proto($g, $f) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $f_addr;
      var $i;
      $g_addr=$g;
      $f_addr=$f;
      var $0=$f_addr; //@line 468 "lgc.c"
      var $cache=(($0+32)|0); //@line 468 "lgc.c"
      var $1=HEAP32[(($cache)>>2)]; //@line 468 "lgc.c"
      var $tobool=(($1)|0)!=0; //@line 468 "lgc.c"
      if ($tobool) { label = 3; break; } else { label = 5; break; } //@line 468 "lgc.c"
    case 3: 
      var $2=$f_addr; //@line 468 "lgc.c"
      var $cache1=(($2+32)|0); //@line 468 "lgc.c"
      var $3=HEAP32[(($cache1)>>2)]; //@line 468 "lgc.c"
      var $4=$3; //@line 468 "lgc.c"
      var $gch=$4; //@line 468 "lgc.c"
      var $marked=(($gch+5)|0); //@line 468 "lgc.c"
      var $5=HEAP8[($marked)]; //@line 468 "lgc.c"
      var $conv=(($5)&255); //@line 468 "lgc.c"
      var $and=$conv & 3; //@line 468 "lgc.c"
      var $tobool2=(($and)|0)!=0; //@line 468 "lgc.c"
      if ($tobool2) { label = 4; break; } else { label = 5; break; } //@line 468 "lgc.c"
    case 4: 
      var $6=$f_addr; //@line 469 "lgc.c"
      var $cache3=(($6+32)|0); //@line 469 "lgc.c"
      HEAP32[(($cache3)>>2)]=0; //@line 469 "lgc.c"
      label = 5; break; //@line 469 "lgc.c"
    case 5: 
      var $7=$f_addr; //@line 470 "lgc.c"
      var $source=(($7+36)|0); //@line 470 "lgc.c"
      var $8=HEAP32[(($source)>>2)]; //@line 470 "lgc.c"
      var $tobool4=(($8)|0)!=0; //@line 470 "lgc.c"
      if ($tobool4) { label = 6; break; } else { label = 8; break; } //@line 470 "lgc.c"
    case 6: 
      var $9=$f_addr; //@line 470 "lgc.c"
      var $source6=(($9+36)|0); //@line 470 "lgc.c"
      var $10=HEAP32[(($source6)>>2)]; //@line 470 "lgc.c"
      var $11=$10; //@line 470 "lgc.c"
      var $gch7=$11; //@line 470 "lgc.c"
      var $marked8=(($gch7+5)|0); //@line 470 "lgc.c"
      var $12=HEAP8[($marked8)]; //@line 470 "lgc.c"
      var $conv9=(($12)&255); //@line 470 "lgc.c"
      var $and10=$conv9 & 3; //@line 470 "lgc.c"
      var $tobool11=(($and10)|0)!=0; //@line 470 "lgc.c"
      if ($tobool11) { label = 7; break; } else { label = 8; break; } //@line 470 "lgc.c"
    case 7: 
      var $13=$g_addr; //@line 470 "lgc.c"
      var $14=$f_addr; //@line 470 "lgc.c"
      var $source13=(($14+36)|0); //@line 470 "lgc.c"
      var $15=HEAP32[(($source13)>>2)]; //@line 470 "lgc.c"
      var $16=$15; //@line 470 "lgc.c"
      __ZL16reallymarkobjectP12global_StateP8GCObject($13, $16); //@line 470 "lgc.c"
      label = 8; break; //@line 470 "lgc.c"
    case 8: 
      $i=0; //@line 471 "lgc.c"
      label = 9; break; //@line 471 "lgc.c"
    case 9: 
      var $17=$i; //@line 471 "lgc.c"
      var $18=$f_addr; //@line 471 "lgc.c"
      var $sizek=(($18+44)|0); //@line 471 "lgc.c"
      var $19=HEAP32[(($sizek)>>2)]; //@line 471 "lgc.c"
      var $cmp=(($17)|0) < (($19)|0); //@line 471 "lgc.c"
      if ($cmp) { label = 10; break; } else { label = 15; break; } //@line 471 "lgc.c"
    case 10: 
      var $20=$i; //@line 472 "lgc.c"
      var $21=$f_addr; //@line 472 "lgc.c"
      var $k=(($21+8)|0); //@line 472 "lgc.c"
      var $22=HEAP32[(($k)>>2)]; //@line 472 "lgc.c"
      var $arrayidx=(($22+((($20)*(12))&-1))|0); //@line 472 "lgc.c"
      var $tt_=(($arrayidx+8)|0); //@line 472 "lgc.c"
      var $23=HEAP32[(($tt_)>>2)]; //@line 472 "lgc.c"
      var $and15=$23 & 64; //@line 472 "lgc.c"
      var $tobool16=(($and15)|0)!=0; //@line 472 "lgc.c"
      if ($tobool16) { label = 11; break; } else { label = 13; break; } //@line 472 "lgc.c"
    case 11: 
      var $24=$i; //@line 472 "lgc.c"
      var $25=$f_addr; //@line 472 "lgc.c"
      var $k18=(($25+8)|0); //@line 472 "lgc.c"
      var $26=HEAP32[(($k18)>>2)]; //@line 472 "lgc.c"
      var $arrayidx19=(($26+((($24)*(12))&-1))|0); //@line 472 "lgc.c"
      var $value_=(($arrayidx19)|0); //@line 472 "lgc.c"
      var $gc=$value_; //@line 472 "lgc.c"
      var $27=HEAP32[(($gc)>>2)]; //@line 472 "lgc.c"
      var $gch20=$27; //@line 472 "lgc.c"
      var $marked21=(($gch20+5)|0); //@line 472 "lgc.c"
      var $28=HEAP8[($marked21)]; //@line 472 "lgc.c"
      var $conv22=(($28)&255); //@line 472 "lgc.c"
      var $and23=$conv22 & 3; //@line 472 "lgc.c"
      var $tobool24=(($and23)|0)!=0; //@line 472 "lgc.c"
      if ($tobool24) { label = 12; break; } else { label = 13; break; } //@line 472 "lgc.c"
    case 12: 
      var $29=$g_addr; //@line 472 "lgc.c"
      var $30=$i; //@line 472 "lgc.c"
      var $31=$f_addr; //@line 472 "lgc.c"
      var $k26=(($31+8)|0); //@line 472 "lgc.c"
      var $32=HEAP32[(($k26)>>2)]; //@line 472 "lgc.c"
      var $arrayidx27=(($32+((($30)*(12))&-1))|0); //@line 472 "lgc.c"
      var $value_28=(($arrayidx27)|0); //@line 472 "lgc.c"
      var $gc29=$value_28; //@line 472 "lgc.c"
      var $33=HEAP32[(($gc29)>>2)]; //@line 472 "lgc.c"
      __ZL16reallymarkobjectP12global_StateP8GCObject($29, $33); //@line 472 "lgc.c"
      label = 13; break; //@line 472 "lgc.c"
    case 13: 
      label = 14; break; //@line 472 "lgc.c"
    case 14: 
      var $34=$i; //@line 471 "lgc.c"
      var $inc=((($34)+(1))|0); //@line 471 "lgc.c"
      $i=$inc; //@line 471 "lgc.c"
      label = 9; break; //@line 471 "lgc.c"
    case 15: 
      $i=0; //@line 473 "lgc.c"
      label = 16; break; //@line 473 "lgc.c"
    case 16: 
      var $35=$i; //@line 473 "lgc.c"
      var $36=$f_addr; //@line 473 "lgc.c"
      var $sizeupvalues=(($36+40)|0); //@line 473 "lgc.c"
      var $37=HEAP32[(($sizeupvalues)>>2)]; //@line 473 "lgc.c"
      var $cmp32=(($35)|0) < (($37)|0); //@line 473 "lgc.c"
      if ($cmp32) { label = 17; break; } else { label = 22; break; } //@line 473 "lgc.c"
    case 17: 
      var $38=$i; //@line 474 "lgc.c"
      var $39=$f_addr; //@line 474 "lgc.c"
      var $upvalues=(($39+28)|0); //@line 474 "lgc.c"
      var $40=HEAP32[(($upvalues)>>2)]; //@line 474 "lgc.c"
      var $arrayidx34=(($40+($38<<3))|0); //@line 474 "lgc.c"
      var $name=(($arrayidx34)|0); //@line 474 "lgc.c"
      var $41=HEAP32[(($name)>>2)]; //@line 474 "lgc.c"
      var $tobool35=(($41)|0)!=0; //@line 474 "lgc.c"
      if ($tobool35) { label = 18; break; } else { label = 20; break; } //@line 474 "lgc.c"
    case 18: 
      var $42=$i; //@line 474 "lgc.c"
      var $43=$f_addr; //@line 474 "lgc.c"
      var $upvalues37=(($43+28)|0); //@line 474 "lgc.c"
      var $44=HEAP32[(($upvalues37)>>2)]; //@line 474 "lgc.c"
      var $arrayidx38=(($44+($42<<3))|0); //@line 474 "lgc.c"
      var $name39=(($arrayidx38)|0); //@line 474 "lgc.c"
      var $45=HEAP32[(($name39)>>2)]; //@line 474 "lgc.c"
      var $46=$45; //@line 474 "lgc.c"
      var $gch40=$46; //@line 474 "lgc.c"
      var $marked41=(($gch40+5)|0); //@line 474 "lgc.c"
      var $47=HEAP8[($marked41)]; //@line 474 "lgc.c"
      var $conv42=(($47)&255); //@line 474 "lgc.c"
      var $and43=$conv42 & 3; //@line 474 "lgc.c"
      var $tobool44=(($and43)|0)!=0; //@line 474 "lgc.c"
      if ($tobool44) { label = 19; break; } else { label = 20; break; } //@line 474 "lgc.c"
    case 19: 
      var $48=$g_addr; //@line 474 "lgc.c"
      var $49=$i; //@line 474 "lgc.c"
      var $50=$f_addr; //@line 474 "lgc.c"
      var $upvalues46=(($50+28)|0); //@line 474 "lgc.c"
      var $51=HEAP32[(($upvalues46)>>2)]; //@line 474 "lgc.c"
      var $arrayidx47=(($51+($49<<3))|0); //@line 474 "lgc.c"
      var $name48=(($arrayidx47)|0); //@line 474 "lgc.c"
      var $52=HEAP32[(($name48)>>2)]; //@line 474 "lgc.c"
      var $53=$52; //@line 474 "lgc.c"
      __ZL16reallymarkobjectP12global_StateP8GCObject($48, $53); //@line 474 "lgc.c"
      label = 20; break; //@line 474 "lgc.c"
    case 20: 
      label = 21; break; //@line 474 "lgc.c"
    case 21: 
      var $54=$i; //@line 473 "lgc.c"
      var $inc51=((($54)+(1))|0); //@line 473 "lgc.c"
      $i=$inc51; //@line 473 "lgc.c"
      label = 16; break; //@line 473 "lgc.c"
    case 22: 
      $i=0; //@line 475 "lgc.c"
      label = 23; break; //@line 475 "lgc.c"
    case 23: 
      var $55=$i; //@line 475 "lgc.c"
      var $56=$f_addr; //@line 475 "lgc.c"
      var $sizep=(($56+56)|0); //@line 475 "lgc.c"
      var $57=HEAP32[(($sizep)>>2)]; //@line 475 "lgc.c"
      var $cmp54=(($55)|0) < (($57)|0); //@line 475 "lgc.c"
      if ($cmp54) { label = 24; break; } else { label = 29; break; } //@line 475 "lgc.c"
    case 24: 
      var $58=$i; //@line 476 "lgc.c"
      var $59=$f_addr; //@line 476 "lgc.c"
      var $p=(($59+16)|0); //@line 476 "lgc.c"
      var $60=HEAP32[(($p)>>2)]; //@line 476 "lgc.c"
      var $arrayidx56=(($60+($58<<2))|0); //@line 476 "lgc.c"
      var $61=HEAP32[(($arrayidx56)>>2)]; //@line 476 "lgc.c"
      var $tobool57=(($61)|0)!=0; //@line 476 "lgc.c"
      if ($tobool57) { label = 25; break; } else { label = 27; break; } //@line 476 "lgc.c"
    case 25: 
      var $62=$i; //@line 476 "lgc.c"
      var $63=$f_addr; //@line 476 "lgc.c"
      var $p59=(($63+16)|0); //@line 476 "lgc.c"
      var $64=HEAP32[(($p59)>>2)]; //@line 476 "lgc.c"
      var $arrayidx60=(($64+($62<<2))|0); //@line 476 "lgc.c"
      var $65=HEAP32[(($arrayidx60)>>2)]; //@line 476 "lgc.c"
      var $66=$65; //@line 476 "lgc.c"
      var $gch61=$66; //@line 476 "lgc.c"
      var $marked62=(($gch61+5)|0); //@line 476 "lgc.c"
      var $67=HEAP8[($marked62)]; //@line 476 "lgc.c"
      var $conv63=(($67)&255); //@line 476 "lgc.c"
      var $and64=$conv63 & 3; //@line 476 "lgc.c"
      var $tobool65=(($and64)|0)!=0; //@line 476 "lgc.c"
      if ($tobool65) { label = 26; break; } else { label = 27; break; } //@line 476 "lgc.c"
    case 26: 
      var $68=$g_addr; //@line 476 "lgc.c"
      var $69=$i; //@line 476 "lgc.c"
      var $70=$f_addr; //@line 476 "lgc.c"
      var $p67=(($70+16)|0); //@line 476 "lgc.c"
      var $71=HEAP32[(($p67)>>2)]; //@line 476 "lgc.c"
      var $arrayidx68=(($71+($69<<2))|0); //@line 476 "lgc.c"
      var $72=HEAP32[(($arrayidx68)>>2)]; //@line 476 "lgc.c"
      var $73=$72; //@line 476 "lgc.c"
      __ZL16reallymarkobjectP12global_StateP8GCObject($68, $73); //@line 476 "lgc.c"
      label = 27; break; //@line 476 "lgc.c"
    case 27: 
      label = 28; break; //@line 476 "lgc.c"
    case 28: 
      var $74=$i; //@line 475 "lgc.c"
      var $inc71=((($74)+(1))|0); //@line 475 "lgc.c"
      $i=$inc71; //@line 475 "lgc.c"
      label = 23; break; //@line 475 "lgc.c"
    case 29: 
      $i=0; //@line 477 "lgc.c"
      label = 30; break; //@line 477 "lgc.c"
    case 30: 
      var $75=$i; //@line 477 "lgc.c"
      var $76=$f_addr; //@line 477 "lgc.c"
      var $sizelocvars=(($76+60)|0); //@line 477 "lgc.c"
      var $77=HEAP32[(($sizelocvars)>>2)]; //@line 477 "lgc.c"
      var $cmp74=(($75)|0) < (($77)|0); //@line 477 "lgc.c"
      if ($cmp74) { label = 31; break; } else { label = 36; break; } //@line 477 "lgc.c"
    case 31: 
      var $78=$i; //@line 478 "lgc.c"
      var $79=$f_addr; //@line 478 "lgc.c"
      var $locvars=(($79+24)|0); //@line 478 "lgc.c"
      var $80=HEAP32[(($locvars)>>2)]; //@line 478 "lgc.c"
      var $arrayidx76=(($80+((($78)*(12))&-1))|0); //@line 478 "lgc.c"
      var $varname=(($arrayidx76)|0); //@line 478 "lgc.c"
      var $81=HEAP32[(($varname)>>2)]; //@line 478 "lgc.c"
      var $tobool77=(($81)|0)!=0; //@line 478 "lgc.c"
      if ($tobool77) { label = 32; break; } else { label = 34; break; } //@line 478 "lgc.c"
    case 32: 
      var $82=$i; //@line 478 "lgc.c"
      var $83=$f_addr; //@line 478 "lgc.c"
      var $locvars79=(($83+24)|0); //@line 478 "lgc.c"
      var $84=HEAP32[(($locvars79)>>2)]; //@line 478 "lgc.c"
      var $arrayidx80=(($84+((($82)*(12))&-1))|0); //@line 478 "lgc.c"
      var $varname81=(($arrayidx80)|0); //@line 478 "lgc.c"
      var $85=HEAP32[(($varname81)>>2)]; //@line 478 "lgc.c"
      var $86=$85; //@line 478 "lgc.c"
      var $gch82=$86; //@line 478 "lgc.c"
      var $marked83=(($gch82+5)|0); //@line 478 "lgc.c"
      var $87=HEAP8[($marked83)]; //@line 478 "lgc.c"
      var $conv84=(($87)&255); //@line 478 "lgc.c"
      var $and85=$conv84 & 3; //@line 478 "lgc.c"
      var $tobool86=(($and85)|0)!=0; //@line 478 "lgc.c"
      if ($tobool86) { label = 33; break; } else { label = 34; break; } //@line 478 "lgc.c"
    case 33: 
      var $88=$g_addr; //@line 478 "lgc.c"
      var $89=$i; //@line 478 "lgc.c"
      var $90=$f_addr; //@line 478 "lgc.c"
      var $locvars88=(($90+24)|0); //@line 478 "lgc.c"
      var $91=HEAP32[(($locvars88)>>2)]; //@line 478 "lgc.c"
      var $arrayidx89=(($91+((($89)*(12))&-1))|0); //@line 478 "lgc.c"
      var $varname90=(($arrayidx89)|0); //@line 478 "lgc.c"
      var $92=HEAP32[(($varname90)>>2)]; //@line 478 "lgc.c"
      var $93=$92; //@line 478 "lgc.c"
      __ZL16reallymarkobjectP12global_StateP8GCObject($88, $93); //@line 478 "lgc.c"
      label = 34; break; //@line 478 "lgc.c"
    case 34: 
      label = 35; break; //@line 478 "lgc.c"
    case 35: 
      var $94=$i; //@line 477 "lgc.c"
      var $inc93=((($94)+(1))|0); //@line 477 "lgc.c"
      $i=$inc93; //@line 477 "lgc.c"
      label = 30; break; //@line 477 "lgc.c"
    case 36: 
      var $95=$f_addr; //@line 479 "lgc.c"
      var $sizecode=(($95+48)|0); //@line 479 "lgc.c"
      var $96=HEAP32[(($sizecode)>>2)]; //@line 479 "lgc.c"
      var $mul=($96<<2); //@line 479 "lgc.c"
      var $add=((($mul)+(80))|0); //@line 479 "lgc.c"
      var $97=$f_addr; //@line 479 "lgc.c"
      var $sizep95=(($97+56)|0); //@line 479 "lgc.c"
      var $98=HEAP32[(($sizep95)>>2)]; //@line 479 "lgc.c"
      var $mul96=($98<<2); //@line 479 "lgc.c"
      var $add97=((($add)+($mul96))|0); //@line 479 "lgc.c"
      var $99=$f_addr; //@line 479 "lgc.c"
      var $sizek98=(($99+44)|0); //@line 479 "lgc.c"
      var $100=HEAP32[(($sizek98)>>2)]; //@line 479 "lgc.c"
      var $mul99=((($100)*(12))&-1); //@line 479 "lgc.c"
      var $add100=((($add97)+($mul99))|0); //@line 479 "lgc.c"
      var $101=$f_addr; //@line 479 "lgc.c"
      var $sizelineinfo=(($101+52)|0); //@line 479 "lgc.c"
      var $102=HEAP32[(($sizelineinfo)>>2)]; //@line 479 "lgc.c"
      var $mul101=($102<<2); //@line 479 "lgc.c"
      var $add102=((($add100)+($mul101))|0); //@line 479 "lgc.c"
      var $103=$f_addr; //@line 479 "lgc.c"
      var $sizelocvars103=(($103+60)|0); //@line 479 "lgc.c"
      var $104=HEAP32[(($sizelocvars103)>>2)]; //@line 479 "lgc.c"
      var $mul104=((($104)*(12))&-1); //@line 479 "lgc.c"
      var $add105=((($add102)+($mul104))|0); //@line 479 "lgc.c"
      var $105=$f_addr; //@line 479 "lgc.c"
      var $sizeupvalues106=(($105+40)|0); //@line 479 "lgc.c"
      var $106=HEAP32[(($sizeupvalues106)>>2)]; //@line 479 "lgc.c"
      var $mul107=($106<<3); //@line 479 "lgc.c"
      var $add108=((($add105)+($mul107))|0); //@line 479 "lgc.c"

      return $add108; //@line 479 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL13traverseprotoP12global_StateP5Proto["X"]=1;

function __ZL17traverseweakvalueP12global_StateP5Table($g, $h) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $h_addr;
      var $n;
      var $limit;
      var $hasclears;
      $g_addr=$g;
      $h_addr=$h;
      var $0=$h_addr; //@line 365 "lgc.c"
      var $lsizenode=(($0+7)|0); //@line 365 "lgc.c"
      var $1=HEAP8[($lsizenode)]; //@line 365 "lgc.c"
      var $conv=(($1)&255); //@line 365 "lgc.c"
      var $shl=1 << $conv; //@line 365 "lgc.c"
      var $2=$h_addr; //@line 365 "lgc.c"
      var $node=(($2+16)|0); //@line 365 "lgc.c"
      var $3=HEAP32[(($node)>>2)]; //@line 365 "lgc.c"
      var $arrayidx=(($3+((($shl)*(28))&-1))|0); //@line 365 "lgc.c"
      $limit=$arrayidx; //@line 365 "lgc.c"
      var $4=$h_addr; //@line 368 "lgc.c"
      var $sizearray=(($4+28)|0); //@line 368 "lgc.c"
      var $5=HEAP32[(($sizearray)>>2)]; //@line 368 "lgc.c"
      var $cmp=(($5)|0) > 0; //@line 368 "lgc.c"
      var $conv1=(($cmp)&1); //@line 368 "lgc.c"
      $hasclears=$conv1; //@line 368 "lgc.c"
      var $6=$h_addr; //@line 369 "lgc.c"
      var $node2=(($6+16)|0); //@line 369 "lgc.c"
      var $7=HEAP32[(($node2)>>2)]; //@line 369 "lgc.c"
      var $arrayidx3=(($7)|0); //@line 369 "lgc.c"
      $n=$arrayidx3; //@line 369 "lgc.c"
      label = 3; break; //@line 369 "lgc.c"
    case 3: 
      var $8=$n; //@line 369 "lgc.c"
      var $9=$limit; //@line 369 "lgc.c"
      var $cmp4=(($8)>>>0) < (($9)>>>0); //@line 369 "lgc.c"
      if ($cmp4) { label = 4; break; } else { label = 15; break; } //@line 369 "lgc.c"
    case 4: 
      var $10=$n; //@line 371 "lgc.c"
      var $i_val=(($10)|0); //@line 371 "lgc.c"
      var $tt_=(($i_val+8)|0); //@line 371 "lgc.c"
      var $11=HEAP32[(($tt_)>>2)]; //@line 371 "lgc.c"
      var $cmp5=(($11)|0)==0; //@line 371 "lgc.c"
      if ($cmp5) { label = 5; break; } else { label = 6; break; } //@line 371 "lgc.c"
    case 5: 
      var $12=$n; //@line 372 "lgc.c"
      __ZL11removeentryP4Node($12); //@line 372 "lgc.c"
      label = 13; break; //@line 372 "lgc.c"
    case 6: 
      var $13=$n; //@line 375 "lgc.c"
      var $i_key=(($13+12)|0); //@line 375 "lgc.c"
      var $tvk=$i_key; //@line 375 "lgc.c"
      var $tt_6=(($tvk+8)|0); //@line 375 "lgc.c"
      var $14=HEAP32[(($tt_6)>>2)]; //@line 375 "lgc.c"
      var $and=$14 & 64; //@line 375 "lgc.c"
      var $tobool=(($and)|0)!=0; //@line 375 "lgc.c"
      if ($tobool) { label = 7; break; } else { label = 9; break; } //@line 375 "lgc.c"
    case 7: 
      var $15=$n; //@line 375 "lgc.c"
      var $i_key7=(($15+12)|0); //@line 375 "lgc.c"
      var $tvk8=$i_key7; //@line 375 "lgc.c"
      var $value_=(($tvk8)|0); //@line 375 "lgc.c"
      var $gc=$value_; //@line 375 "lgc.c"
      var $16=HEAP32[(($gc)>>2)]; //@line 375 "lgc.c"
      var $gch=$16; //@line 375 "lgc.c"
      var $marked=(($gch+5)|0); //@line 375 "lgc.c"
      var $17=HEAP8[($marked)]; //@line 375 "lgc.c"
      var $conv9=(($17)&255); //@line 375 "lgc.c"
      var $and10=$conv9 & 3; //@line 375 "lgc.c"
      var $tobool11=(($and10)|0)!=0; //@line 375 "lgc.c"
      if ($tobool11) { label = 8; break; } else { label = 9; break; } //@line 375 "lgc.c"
    case 8: 
      var $18=$g_addr; //@line 375 "lgc.c"
      var $19=$n; //@line 375 "lgc.c"
      var $i_key13=(($19+12)|0); //@line 375 "lgc.c"
      var $tvk14=$i_key13; //@line 375 "lgc.c"
      var $value_15=(($tvk14)|0); //@line 375 "lgc.c"
      var $gc16=$value_15; //@line 375 "lgc.c"
      var $20=HEAP32[(($gc16)>>2)]; //@line 375 "lgc.c"
      __ZL16reallymarkobjectP12global_StateP8GCObject($18, $20); //@line 375 "lgc.c"
      label = 9; break; //@line 375 "lgc.c"
    case 9: 
      var $21=$hasclears; //@line 376 "lgc.c"
      var $tobool17=(($21)|0)!=0; //@line 376 "lgc.c"
      if ($tobool17) { label = 12; break; } else { label = 10; break; } //@line 376 "lgc.c"
    case 10: 
      var $22=$g_addr; //@line 376 "lgc.c"
      var $23=$n; //@line 376 "lgc.c"
      var $i_val19=(($23)|0); //@line 376 "lgc.c"
      var $call=__ZL9isclearedP12global_StatePK10lua_TValue($22, $i_val19); //@line 376 "lgc.c"
      var $tobool20=(($call)|0)!=0; //@line 376 "lgc.c"
      if ($tobool20) { label = 11; break; } else { label = 12; break; } //@line 376 "lgc.c"
    case 11: 
      $hasclears=1; //@line 377 "lgc.c"
      label = 12; break; //@line 377 "lgc.c"
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break; //@line 379 "lgc.c"
    case 14: 
      var $24=$n; //@line 369 "lgc.c"
      var $incdec_ptr=(($24+28)|0); //@line 369 "lgc.c"
      $n=$incdec_ptr; //@line 369 "lgc.c"
      label = 3; break; //@line 369 "lgc.c"
    case 15: 
      var $25=$hasclears; //@line 380 "lgc.c"
      var $tobool24=(($25)|0)!=0; //@line 380 "lgc.c"
      if ($tobool24) { label = 16; break; } else { label = 17; break; } //@line 380 "lgc.c"
    case 16: 
      var $26=$g_addr; //@line 381 "lgc.c"
      var $weak=(($26+84)|0); //@line 381 "lgc.c"
      var $27=HEAP32[(($weak)>>2)]; //@line 381 "lgc.c"
      var $28=$h_addr; //@line 381 "lgc.c"
      var $gclist=(($28+24)|0); //@line 381 "lgc.c"
      HEAP32[(($gclist)>>2)]=$27; //@line 381 "lgc.c"
      var $29=$h_addr; //@line 381 "lgc.c"
      var $30=$29; //@line 381 "lgc.c"
      var $31=$g_addr; //@line 381 "lgc.c"
      var $weak26=(($31+84)|0); //@line 381 "lgc.c"
      HEAP32[(($weak26)>>2)]=$30; //@line 381 "lgc.c"
      label = 18; break; //@line 381 "lgc.c"
    case 17: 
      var $32=$g_addr; //@line 383 "lgc.c"
      var $grayagain=(($32+80)|0); //@line 383 "lgc.c"
      var $33=HEAP32[(($grayagain)>>2)]; //@line 383 "lgc.c"
      var $34=$h_addr; //@line 383 "lgc.c"
      var $gclist28=(($34+24)|0); //@line 383 "lgc.c"
      HEAP32[(($gclist28)>>2)]=$33; //@line 383 "lgc.c"
      var $35=$h_addr; //@line 383 "lgc.c"
      var $36=$35; //@line 383 "lgc.c"
      var $37=$g_addr; //@line 383 "lgc.c"
      var $grayagain29=(($37+80)|0); //@line 383 "lgc.c"
      HEAP32[(($grayagain29)>>2)]=$36; //@line 383 "lgc.c"
      label = 18; break;
    case 18: 

      return; //@line 384 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL17traverseweakvalueP12global_StateP5Table["X"]=1;

function __ZL19traversestrongtableP12global_StateP5Table($g, $h) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $h_addr;
      var $n;
      var $limit;
      var $i;
      $g_addr=$g;
      $h_addr=$h;
      var $0=$h_addr; //@line 426 "lgc.c"
      var $lsizenode=(($0+7)|0); //@line 426 "lgc.c"
      var $1=HEAP8[($lsizenode)]; //@line 426 "lgc.c"
      var $conv=(($1)&255); //@line 426 "lgc.c"
      var $shl=1 << $conv; //@line 426 "lgc.c"
      var $2=$h_addr; //@line 426 "lgc.c"
      var $node=(($2+16)|0); //@line 426 "lgc.c"
      var $3=HEAP32[(($node)>>2)]; //@line 426 "lgc.c"
      var $arrayidx=(($3+((($shl)*(28))&-1))|0); //@line 426 "lgc.c"
      $limit=$arrayidx; //@line 426 "lgc.c"
      $i=0; //@line 428 "lgc.c"
      label = 3; break; //@line 428 "lgc.c"
    case 3: 
      var $4=$i; //@line 428 "lgc.c"
      var $5=$h_addr; //@line 428 "lgc.c"
      var $sizearray=(($5+28)|0); //@line 428 "lgc.c"
      var $6=HEAP32[(($sizearray)>>2)]; //@line 428 "lgc.c"
      var $cmp=(($4)|0) < (($6)|0); //@line 428 "lgc.c"
      if ($cmp) { label = 4; break; } else { label = 9; break; } //@line 428 "lgc.c"
    case 4: 
      var $7=$i; //@line 429 "lgc.c"
      var $8=$h_addr; //@line 429 "lgc.c"
      var $array=(($8+12)|0); //@line 429 "lgc.c"
      var $9=HEAP32[(($array)>>2)]; //@line 429 "lgc.c"
      var $arrayidx1=(($9+((($7)*(12))&-1))|0); //@line 429 "lgc.c"
      var $tt_=(($arrayidx1+8)|0); //@line 429 "lgc.c"
      var $10=HEAP32[(($tt_)>>2)]; //@line 429 "lgc.c"
      var $and=$10 & 64; //@line 429 "lgc.c"
      var $tobool=(($and)|0)!=0; //@line 429 "lgc.c"
      if ($tobool) { label = 5; break; } else { label = 7; break; } //@line 429 "lgc.c"
    case 5: 
      var $11=$i; //@line 429 "lgc.c"
      var $12=$h_addr; //@line 429 "lgc.c"
      var $array2=(($12+12)|0); //@line 429 "lgc.c"
      var $13=HEAP32[(($array2)>>2)]; //@line 429 "lgc.c"
      var $arrayidx3=(($13+((($11)*(12))&-1))|0); //@line 429 "lgc.c"
      var $value_=(($arrayidx3)|0); //@line 429 "lgc.c"
      var $gc=$value_; //@line 429 "lgc.c"
      var $14=HEAP32[(($gc)>>2)]; //@line 429 "lgc.c"
      var $gch=$14; //@line 429 "lgc.c"
      var $marked=(($gch+5)|0); //@line 429 "lgc.c"
      var $15=HEAP8[($marked)]; //@line 429 "lgc.c"
      var $conv4=(($15)&255); //@line 429 "lgc.c"
      var $and5=$conv4 & 3; //@line 429 "lgc.c"
      var $tobool6=(($and5)|0)!=0; //@line 429 "lgc.c"
      if ($tobool6) { label = 6; break; } else { label = 7; break; } //@line 429 "lgc.c"
    case 6: 
      var $16=$g_addr; //@line 429 "lgc.c"
      var $17=$i; //@line 429 "lgc.c"
      var $18=$h_addr; //@line 429 "lgc.c"
      var $array7=(($18+12)|0); //@line 429 "lgc.c"
      var $19=HEAP32[(($array7)>>2)]; //@line 429 "lgc.c"
      var $arrayidx8=(($19+((($17)*(12))&-1))|0); //@line 429 "lgc.c"
      var $value_9=(($arrayidx8)|0); //@line 429 "lgc.c"
      var $gc10=$value_9; //@line 429 "lgc.c"
      var $20=HEAP32[(($gc10)>>2)]; //@line 429 "lgc.c"
      __ZL16reallymarkobjectP12global_StateP8GCObject($16, $20); //@line 429 "lgc.c"
      label = 7; break; //@line 429 "lgc.c"
    case 7: 
      label = 8; break; //@line 429 "lgc.c"
    case 8: 
      var $21=$i; //@line 428 "lgc.c"
      var $inc=((($21)+(1))|0); //@line 428 "lgc.c"
      $i=$inc; //@line 428 "lgc.c"
      label = 3; break; //@line 428 "lgc.c"
    case 9: 
      var $22=$h_addr; //@line 430 "lgc.c"
      var $node11=(($22+16)|0); //@line 430 "lgc.c"
      var $23=HEAP32[(($node11)>>2)]; //@line 430 "lgc.c"
      var $arrayidx12=(($23)|0); //@line 430 "lgc.c"
      $n=$arrayidx12; //@line 430 "lgc.c"
      label = 10; break; //@line 430 "lgc.c"
    case 10: 
      var $24=$n; //@line 430 "lgc.c"
      var $25=$limit; //@line 430 "lgc.c"
      var $cmp14=(($24)>>>0) < (($25)>>>0); //@line 430 "lgc.c"
      if ($cmp14) { label = 11; break; } else { label = 22; break; } //@line 430 "lgc.c"
    case 11: 
      var $26=$n; //@line 432 "lgc.c"
      var $i_val=(($26)|0); //@line 432 "lgc.c"
      var $tt_16=(($i_val+8)|0); //@line 432 "lgc.c"
      var $27=HEAP32[(($tt_16)>>2)]; //@line 432 "lgc.c"
      var $cmp17=(($27)|0)==0; //@line 432 "lgc.c"
      if ($cmp17) { label = 12; break; } else { label = 13; break; } //@line 432 "lgc.c"
    case 12: 
      var $28=$n; //@line 433 "lgc.c"
      __ZL11removeentryP4Node($28); //@line 433 "lgc.c"
      label = 20; break; //@line 433 "lgc.c"
    case 13: 
      var $29=$n; //@line 436 "lgc.c"
      var $i_key=(($29+12)|0); //@line 436 "lgc.c"
      var $tvk=$i_key; //@line 436 "lgc.c"
      var $tt_19=(($tvk+8)|0); //@line 436 "lgc.c"
      var $30=HEAP32[(($tt_19)>>2)]; //@line 436 "lgc.c"
      var $and20=$30 & 64; //@line 436 "lgc.c"
      var $tobool21=(($and20)|0)!=0; //@line 436 "lgc.c"
      if ($tobool21) { label = 14; break; } else { label = 16; break; } //@line 436 "lgc.c"
    case 14: 
      var $31=$n; //@line 436 "lgc.c"
      var $i_key23=(($31+12)|0); //@line 436 "lgc.c"
      var $tvk24=$i_key23; //@line 436 "lgc.c"
      var $value_25=(($tvk24)|0); //@line 436 "lgc.c"
      var $gc26=$value_25; //@line 436 "lgc.c"
      var $32=HEAP32[(($gc26)>>2)]; //@line 436 "lgc.c"
      var $gch27=$32; //@line 436 "lgc.c"
      var $marked28=(($gch27+5)|0); //@line 436 "lgc.c"
      var $33=HEAP8[($marked28)]; //@line 436 "lgc.c"
      var $conv29=(($33)&255); //@line 436 "lgc.c"
      var $and30=$conv29 & 3; //@line 436 "lgc.c"
      var $tobool31=(($and30)|0)!=0; //@line 436 "lgc.c"
      if ($tobool31) { label = 15; break; } else { label = 16; break; } //@line 436 "lgc.c"
    case 15: 
      var $34=$g_addr; //@line 436 "lgc.c"
      var $35=$n; //@line 436 "lgc.c"
      var $i_key33=(($35+12)|0); //@line 436 "lgc.c"
      var $tvk34=$i_key33; //@line 436 "lgc.c"
      var $value_35=(($tvk34)|0); //@line 436 "lgc.c"
      var $gc36=$value_35; //@line 436 "lgc.c"
      var $36=HEAP32[(($gc36)>>2)]; //@line 436 "lgc.c"
      __ZL16reallymarkobjectP12global_StateP8GCObject($34, $36); //@line 436 "lgc.c"
      label = 16; break; //@line 436 "lgc.c"
    case 16: 
      var $37=$n; //@line 437 "lgc.c"
      var $i_val38=(($37)|0); //@line 437 "lgc.c"
      var $tt_39=(($i_val38+8)|0); //@line 437 "lgc.c"
      var $38=HEAP32[(($tt_39)>>2)]; //@line 437 "lgc.c"
      var $and40=$38 & 64; //@line 437 "lgc.c"
      var $tobool41=(($and40)|0)!=0; //@line 437 "lgc.c"
      if ($tobool41) { label = 17; break; } else { label = 19; break; } //@line 437 "lgc.c"
    case 17: 
      var $39=$n; //@line 437 "lgc.c"
      var $i_val43=(($39)|0); //@line 437 "lgc.c"
      var $value_44=(($i_val43)|0); //@line 437 "lgc.c"
      var $gc45=$value_44; //@line 437 "lgc.c"
      var $40=HEAP32[(($gc45)>>2)]; //@line 437 "lgc.c"
      var $gch46=$40; //@line 437 "lgc.c"
      var $marked47=(($gch46+5)|0); //@line 437 "lgc.c"
      var $41=HEAP8[($marked47)]; //@line 437 "lgc.c"
      var $conv48=(($41)&255); //@line 437 "lgc.c"
      var $and49=$conv48 & 3; //@line 437 "lgc.c"
      var $tobool50=(($and49)|0)!=0; //@line 437 "lgc.c"
      if ($tobool50) { label = 18; break; } else { label = 19; break; } //@line 437 "lgc.c"
    case 18: 
      var $42=$g_addr; //@line 437 "lgc.c"
      var $43=$n; //@line 437 "lgc.c"
      var $i_val52=(($43)|0); //@line 437 "lgc.c"
      var $value_53=(($i_val52)|0); //@line 437 "lgc.c"
      var $gc54=$value_53; //@line 437 "lgc.c"
      var $44=HEAP32[(($gc54)>>2)]; //@line 437 "lgc.c"
      __ZL16reallymarkobjectP12global_StateP8GCObject($42, $44); //@line 437 "lgc.c"
      label = 19; break; //@line 437 "lgc.c"
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break; //@line 439 "lgc.c"
    case 21: 
      var $45=$n; //@line 430 "lgc.c"
      var $incdec_ptr=(($45+28)|0); //@line 430 "lgc.c"
      $n=$incdec_ptr; //@line 430 "lgc.c"
      label = 10; break; //@line 430 "lgc.c"
    case 22: 

      return; //@line 440 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL19traversestrongtableP12global_StateP5Table["X"]=1;

function __ZL7freeobjP9lua_StateP8GCObject($L, $o) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $o_addr;
      $L_addr=$L;
      $o_addr=$o;
      var $0=$o_addr; //@line 666 "lgc.c"
      var $gch=$0; //@line 666 "lgc.c"
      var $tt=(($gch+4)|0); //@line 666 "lgc.c"
      var $1=HEAP8[($tt)]; //@line 666 "lgc.c"
      var $conv=(($1)&255); //@line 666 "lgc.c"
      if ((($conv)|0)==9) {
        label = 3; break;
      }
      else if ((($conv)|0)==6) {
        label = 4; break;
      }
      else if ((($conv)|0)==38) {
        label = 5; break;
      }
      else if ((($conv)|0)==10) {
        label = 6; break;
      }
      else if ((($conv)|0)==5) {
        label = 7; break;
      }
      else if ((($conv)|0)==8) {
        label = 8; break;
      }
      else if ((($conv)|0)==7) {
        label = 9; break;
      }
      else if ((($conv)|0)==4) {
        label = 10; break;
      }
      else if ((($conv)|0)==20) {
        label = 11; break;
      }
      else {
      label = 12; break;
      }
      
    case 3: 
      var $2=$L_addr; //@line 667 "lgc.c"
      var $3=$o_addr; //@line 667 "lgc.c"
      var $p=$3; //@line 667 "lgc.c"
      __Z14luaF_freeprotoP9lua_StateP5Proto($2, $p); //@line 667 "lgc.c"
      label = 13; break; //@line 667 "lgc.c"
    case 4: 
      var $4=$L_addr; //@line 669 "lgc.c"
      var $5=$o_addr; //@line 669 "lgc.c"
      var $6=$5; //@line 669 "lgc.c"
      var $7=$o_addr; //@line 669 "lgc.c"
      var $cl=$7; //@line 669 "lgc.c"
      var $l=$cl; //@line 669 "lgc.c"
      var $nupvalues=(($l+6)|0); //@line 669 "lgc.c"
      var $8=HEAP8[($nupvalues)]; //@line 669 "lgc.c"
      var $conv2=(($8)&255); //@line 669 "lgc.c"
      var $sub=((($conv2)-(1))|0); //@line 669 "lgc.c"
      var $mul=($sub<<2); //@line 669 "lgc.c"
      var $add=((($mul)+(20))|0); //@line 669 "lgc.c"
      var $call=__Z13luaM_realloc_P9lua_StatePvjj($4, $6, $add, 0); //@line 669 "lgc.c"
      label = 13; break; //@line 670 "lgc.c"
    case 5: 
      var $9=$L_addr; //@line 673 "lgc.c"
      var $10=$o_addr; //@line 673 "lgc.c"
      var $11=$10; //@line 673 "lgc.c"
      var $12=$o_addr; //@line 673 "lgc.c"
      var $cl4=$12; //@line 673 "lgc.c"
      var $c=$cl4; //@line 673 "lgc.c"
      var $nupvalues5=(($c+6)|0); //@line 673 "lgc.c"
      var $13=HEAP8[($nupvalues5)]; //@line 673 "lgc.c"
      var $conv6=(($13)&255); //@line 673 "lgc.c"
      var $sub7=((($conv6)-(1))|0); //@line 673 "lgc.c"
      var $mul8=((($sub7)*(12))&-1); //@line 673 "lgc.c"
      var $add9=((($mul8)+(28))|0); //@line 673 "lgc.c"
      var $call10=__Z13luaM_realloc_P9lua_StatePvjj($9, $11, $add9, 0); //@line 673 "lgc.c"
      label = 13; break; //@line 674 "lgc.c"
    case 6: 
      var $14=$L_addr; //@line 676 "lgc.c"
      var $15=$o_addr; //@line 676 "lgc.c"
      var $uv=$15; //@line 676 "lgc.c"
      __Z14luaF_freeupvalP9lua_StateP5UpVal($14, $uv); //@line 676 "lgc.c"
      label = 13; break; //@line 676 "lgc.c"
    case 7: 
      var $16=$L_addr; //@line 677 "lgc.c"
      var $17=$o_addr; //@line 677 "lgc.c"
      var $h=$17; //@line 677 "lgc.c"
      __Z9luaH_freeP9lua_StateP5Table($16, $h); //@line 677 "lgc.c"
      label = 13; break; //@line 677 "lgc.c"
    case 8: 
      var $18=$L_addr; //@line 678 "lgc.c"
      var $19=$o_addr; //@line 678 "lgc.c"
      var $th=$19; //@line 678 "lgc.c"
      __Z15luaE_freethreadP9lua_StateS0_($18, $th); //@line 678 "lgc.c"
      label = 13; break; //@line 678 "lgc.c"
    case 9: 
      var $20=$L_addr; //@line 679 "lgc.c"
      var $21=$o_addr; //@line 679 "lgc.c"
      var $22=$21; //@line 679 "lgc.c"
      var $23=$o_addr; //@line 679 "lgc.c"
      var $u=$23; //@line 679 "lgc.c"
      var $uv15=$u; //@line 679 "lgc.c"
      var $len=(($uv15+16)|0); //@line 679 "lgc.c"
      var $24=HEAP32[(($len)>>2)]; //@line 679 "lgc.c"
      var $add16=((($24)+(20))|0); //@line 679 "lgc.c"
      var $call17=__Z13luaM_realloc_P9lua_StatePvjj($20, $22, $add16, 0); //@line 679 "lgc.c"
      label = 13; break; //@line 679 "lgc.c"
    case 10: 
      var $25=$L_addr; //@line 681 "lgc.c"
      var $l_G=(($25+12)|0); //@line 681 "lgc.c"
      var $26=HEAP32[(($l_G)>>2)]; //@line 681 "lgc.c"
      var $strt=(($26+24)|0); //@line 681 "lgc.c"
      var $nuse=(($strt+4)|0); //@line 681 "lgc.c"
      var $27=HEAP32[(($nuse)>>2)]; //@line 681 "lgc.c"
      var $dec=((($27)-(1))|0); //@line 681 "lgc.c"
      HEAP32[(($nuse)>>2)]=$dec; //@line 681 "lgc.c"
      label = 11; break; //@line 681 "lgc.c"
    case 11: 
      var $28=$L_addr; //@line 684 "lgc.c"
      var $29=$o_addr; //@line 684 "lgc.c"
      var $30=$29; //@line 684 "lgc.c"
      var $31=$o_addr; //@line 684 "lgc.c"
      var $ts=$31; //@line 684 "lgc.c"
      var $tsv=$ts; //@line 684 "lgc.c"
      var $len20=(($tsv+12)|0); //@line 684 "lgc.c"
      var $32=HEAP32[(($len20)>>2)]; //@line 684 "lgc.c"
      var $add21=((($32)+(1))|0); //@line 684 "lgc.c"
      var $mul22=$add21; //@line 684 "lgc.c"
      var $add23=((($mul22)+(16))|0); //@line 684 "lgc.c"
      var $call24=__Z13luaM_realloc_P9lua_StatePvjj($28, $30, $add23, 0); //@line 684 "lgc.c"
      label = 13; break; //@line 685 "lgc.c"
    case 12: 
      label = 13; break; //@line 688 "lgc.c"
    case 13: 

      return; //@line 689 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL7freeobjP9lua_StateP8GCObject["X"]=1;

function __ZL11sweepthreadP9lua_StateS0_($L, $L1) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $L1_addr;
      $L_addr=$L;
      $L1_addr=$L1;
      var $0=$L1_addr; //@line 701 "lgc.c"
      var $stack=(($0+28)|0); //@line 701 "lgc.c"
      var $1=HEAP32[(($stack)>>2)]; //@line 701 "lgc.c"
      var $cmp=(($1)|0)==0; //@line 701 "lgc.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 701 "lgc.c"
    case 3: 
      label = 6; break; //@line 701 "lgc.c"
    case 4: 
      var $2=$L_addr; //@line 702 "lgc.c"
      var $3=$L1_addr; //@line 702 "lgc.c"
      var $openupval=(($3+56)|0); //@line 702 "lgc.c"
      var $call=__ZL9sweeplistP9lua_StatePP8GCObjectj($2, $openupval, -3); //@line 702 "lgc.c"
      var $4=$L1_addr; //@line 703 "lgc.c"
      __Z11luaE_freeCIP9lua_State($4); //@line 703 "lgc.c"
      var $5=$L_addr; //@line 705 "lgc.c"
      var $l_G=(($5+12)|0); //@line 705 "lgc.c"
      var $6=HEAP32[(($l_G)>>2)]; //@line 705 "lgc.c"
      var $gckind=(($6+54)|0); //@line 705 "lgc.c"
      var $7=HEAP8[($gckind)]; //@line 705 "lgc.c"
      var $conv=(($7)&255); //@line 705 "lgc.c"
      var $cmp1=(($conv)|0)!=1; //@line 705 "lgc.c"
      if ($cmp1) { label = 5; break; } else { label = 6; break; } //@line 705 "lgc.c"
    case 5: 
      var $8=$L1_addr; //@line 706 "lgc.c"
      __Z16luaD_shrinkstackP9lua_State($8); //@line 706 "lgc.c"
      label = 6; break; //@line 706 "lgc.c"
    case 6: 

      return; //@line 707 "lgc.c"
    default: assert(0, "bad label: " + label);
  }

}


function __Z11luaM_toobigP9lua_State($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      $L_addr=$L;
      var $0=$L_addr; //@line 67 "lmem.c"
      __Z13luaG_runerrorP9lua_StatePKcz($0, ((5244028)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 67 "lmem.c"
      throw "Reached an unreachable!" //@line 67 "lmem.c"
    case 3: 
      STACKTOP = __stackBase__;
      return; //@line 68 "lmem.c"
    default: assert(0, "bad label: " + label);
  }

}


function __Z13luaM_realloc_P9lua_StatePvjj($L, $block, $osize, $nsize) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $block_addr;
      var $osize_addr;
      var $nsize_addr;
      var $newblock;
      var $g;
      var $realosize;
      $L_addr=$L;
      $block_addr=$block;
      $osize_addr=$osize;
      $nsize_addr=$nsize;
      var $0=$L_addr; //@line 77 "lmem.c"
      var $l_G=(($0+12)|0); //@line 77 "lmem.c"
      var $1=HEAP32[(($l_G)>>2)]; //@line 77 "lmem.c"
      $g=$1; //@line 77 "lmem.c"
      var $2=$block_addr; //@line 78 "lmem.c"
      var $tobool=(($2)|0)!=0; //@line 78 "lmem.c"
      if ($tobool) { label = 3; break; } else { label = 4; break; } //@line 78 "lmem.c"
    case 3: 
      var $3=$osize_addr; //@line 78 "lmem.c"
      var $cond = $3;label = 5; break; //@line 78 "lmem.c"
    case 4: 
      var $cond = 0;label = 5; break; //@line 78 "lmem.c"
    case 5: 
      var $cond; //@line 78 "lmem.c"
      $realosize=$cond; //@line 78 "lmem.c"
      var $4=$g; //@line 84 "lmem.c"
      var $frealloc=(($4)|0); //@line 84 "lmem.c"
      var $5=HEAP32[(($frealloc)>>2)]; //@line 84 "lmem.c"
      var $6=$g; //@line 84 "lmem.c"
      var $ud=(($6+4)|0); //@line 84 "lmem.c"
      var $7=HEAP32[(($ud)>>2)]; //@line 84 "lmem.c"
      var $8=$block_addr; //@line 84 "lmem.c"
      var $9=$osize_addr; //@line 84 "lmem.c"
      var $10=$nsize_addr; //@line 84 "lmem.c"
      var $call=FUNCTION_TABLE[$5]($7, $8, $9, $10); //@line 84 "lmem.c"
      $newblock=$call; //@line 84 "lmem.c"
      var $11=$newblock; //@line 85 "lmem.c"
      var $cmp=(($11)|0)==0; //@line 85 "lmem.c"
      if ($cmp) { label = 6; break; } else { label = 12; break; } //@line 85 "lmem.c"
    case 6: 
      var $12=$nsize_addr; //@line 85 "lmem.c"
      var $cmp1=(($12)>>>0) > 0; //@line 85 "lmem.c"
      if ($cmp1) { label = 7; break; } else { label = 12; break; } //@line 85 "lmem.c"
    case 7: 
      var $13=$g; //@line 88 "lmem.c"
      var $gcrunning=(($13+55)|0); //@line 88 "lmem.c"
      var $14=HEAP8[($gcrunning)]; //@line 88 "lmem.c"
      var $tobool2=(($14 << 24) >> 24)!=0; //@line 88 "lmem.c"
      if ($tobool2) { label = 8; break; } else { label = 9; break; } //@line 88 "lmem.c"
    case 8: 
      var $15=$L_addr; //@line 89 "lmem.c"
      __Z11luaC_fullgcP9lua_Statei($15, 1); //@line 89 "lmem.c"
      var $16=$g; //@line 90 "lmem.c"
      var $frealloc4=(($16)|0); //@line 90 "lmem.c"
      var $17=HEAP32[(($frealloc4)>>2)]; //@line 90 "lmem.c"
      var $18=$g; //@line 90 "lmem.c"
      var $ud5=(($18+4)|0); //@line 90 "lmem.c"
      var $19=HEAP32[(($ud5)>>2)]; //@line 90 "lmem.c"
      var $20=$block_addr; //@line 90 "lmem.c"
      var $21=$osize_addr; //@line 90 "lmem.c"
      var $22=$nsize_addr; //@line 90 "lmem.c"
      var $call6=FUNCTION_TABLE[$17]($19, $20, $21, $22); //@line 90 "lmem.c"
      $newblock=$call6; //@line 90 "lmem.c"
      label = 9; break; //@line 91 "lmem.c"
    case 9: 
      var $23=$newblock; //@line 92 "lmem.c"
      var $cmp7=(($23)|0)==0; //@line 92 "lmem.c"
      if ($cmp7) { label = 10; break; } else { label = 11; break; } //@line 92 "lmem.c"
    case 10: 
      var $24=$L_addr; //@line 93 "lmem.c"
      __Z10luaD_throwP9lua_Statei($24, 4); //@line 93 "lmem.c"
      throw "Reached an unreachable!" //@line 93 "lmem.c"
    case 11: 
      label = 12; break; //@line 94 "lmem.c"
    case 12: 
      var $25=$g; //@line 96 "lmem.c"
      var $GCdebt=(($25+12)|0); //@line 96 "lmem.c"
      var $26=HEAP32[(($GCdebt)>>2)]; //@line 96 "lmem.c"
      var $27=$nsize_addr; //@line 96 "lmem.c"
      var $add=((($26)+($27))|0); //@line 96 "lmem.c"
      var $28=$realosize; //@line 96 "lmem.c"
      var $sub=((($add)-($28))|0); //@line 96 "lmem.c"
      var $29=$g; //@line 96 "lmem.c"
      var $GCdebt11=(($29+12)|0); //@line 96 "lmem.c"
      HEAP32[(($GCdebt11)>>2)]=$sub; //@line 96 "lmem.c"
      var $30=$newblock; //@line 97 "lmem.c"

      return $30; //@line 97 "lmem.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z13luaM_realloc_P9lua_StatePvjj["X"]=1;

function __Z11luaO_fb2inti($x) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $x_addr;
      var $e;
      $x_addr=$x;
      var $0=$x_addr; //@line 49 "lobject.c"
      var $shr=$0 >> 3; //@line 49 "lobject.c"
      var $and=$shr & 31; //@line 49 "lobject.c"
      $e=$and; //@line 49 "lobject.c"
      var $1=$e; //@line 50 "lobject.c"
      var $cmp=(($1)|0)==0; //@line 50 "lobject.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 50 "lobject.c"
    case 3: 
      var $2=$x_addr; //@line 50 "lobject.c"
      $retval=$2; //@line 50 "lobject.c"
      label = 5; break; //@line 50 "lobject.c"
    case 4: 
      var $3=$x_addr; //@line 51 "lobject.c"
      var $and1=$3 & 7; //@line 51 "lobject.c"
      var $add=((($and1)+(8))|0); //@line 51 "lobject.c"
      var $4=$e; //@line 51 "lobject.c"
      var $sub=((($4)-(1))|0); //@line 51 "lobject.c"
      var $shl=$add << $sub; //@line 51 "lobject.c"
      $retval=$shl; //@line 51 "lobject.c"
      label = 5; break; //@line 51 "lobject.c"
    case 5: 
      var $5=$retval; //@line 52 "lobject.c"

      return $5; //@line 52 "lobject.c"
    default: assert(0, "bad label: " + label);
  }

}


function __Z13luaO_ceillog2j($x) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $x_addr;
      var $l;
      $x_addr=$x;
      $l=0; //@line 66 "lobject.c"
      var $0=$x_addr; //@line 67 "lobject.c"
      var $dec=((($0)-(1))|0); //@line 67 "lobject.c"
      $x_addr=$dec; //@line 67 "lobject.c"
      label = 3; break; //@line 68 "lobject.c"
    case 3: 
      var $1=$x_addr; //@line 68 "lobject.c"
      var $cmp=(($1)>>>0) >= 256; //@line 68 "lobject.c"
      if ($cmp) { label = 4; break; } else { label = 5; break; } //@line 68 "lobject.c"
    case 4: 
      var $2=$l; //@line 68 "lobject.c"
      var $add=((($2)+(8))|0); //@line 68 "lobject.c"
      $l=$add; //@line 68 "lobject.c"
      var $3=$x_addr; //@line 68 "lobject.c"
      var $shr=$3 >>> 8; //@line 68 "lobject.c"
      $x_addr=$shr; //@line 68 "lobject.c"
      label = 3; break; //@line 68 "lobject.c"
    case 5: 
      var $4=$l; //@line 69 "lobject.c"
      var $5=$x_addr; //@line 69 "lobject.c"
      var $arrayidx=((5244568+$5)|0); //@line 69 "lobject.c"
      var $6=HEAP8[($arrayidx)]; //@line 69 "lobject.c"
      var $conv=(($6)&255); //@line 69 "lobject.c"
      var $add1=((($4)+($conv))|0); //@line 69 "lobject.c"

      return $add1; //@line 69 "lobject.c"
    default: assert(0, "bad label: " + label);
  }

}


function __Z14luaO_hexavaluei($c) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $c_addr;
      $c_addr=$c;
      var $0=$c_addr; //@line 88 "lobject.c"
      var $add=((($0)+(1))|0); //@line 88 "lobject.c"
      var $arrayidx=((5242904+$add)|0); //@line 88 "lobject.c"
      var $1=HEAP8[($arrayidx)]; //@line 88 "lobject.c"
      var $conv=(($1)&255); //@line 88 "lobject.c"
      var $and=$conv & 2; //@line 88 "lobject.c"
      var $tobool=(($and)|0)!=0; //@line 88 "lobject.c"
      if ($tobool) { label = 3; break; } else { label = 4; break; } //@line 88 "lobject.c"
    case 3: 
      var $2=$c_addr; //@line 88 "lobject.c"
      var $sub=((($2)-(48))|0); //@line 88 "lobject.c"
      $retval=$sub; //@line 88 "lobject.c"
      label = 5; break; //@line 88 "lobject.c"
    case 4: 
      var $3=$c_addr; //@line 89 "lobject.c"
      var $or=$3 | 32; //@line 89 "lobject.c"
      var $sub1=((($or)-(97))|0); //@line 89 "lobject.c"
      var $add2=((($sub1)+(10))|0); //@line 89 "lobject.c"
      $retval=$add2; //@line 89 "lobject.c"
      label = 5; break; //@line 89 "lobject.c"
    case 5: 
      var $4=$retval; //@line 90 "lobject.c"

      return $4; //@line 90 "lobject.c"
    default: assert(0, "bad label: " + label);
  }

}


function __Z10luaO_arithidd($op, $v1, $v2) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $op_addr;
      var $v1_addr;
      var $v2_addr;
      $op_addr=$op;
      $v1_addr=$v1;
      $v2_addr=$v2;
      var $0=$op_addr; //@line 74 "lobject.c"
      if ((($0)|0)==0) {
        label = 3; break;
      }
      else if ((($0)|0)==1) {
        label = 4; break;
      }
      else if ((($0)|0)==2) {
        label = 5; break;
      }
      else if ((($0)|0)==3) {
        label = 6; break;
      }
      else if ((($0)|0)==4) {
        label = 7; break;
      }
      else if ((($0)|0)==5) {
        label = 8; break;
      }
      else if ((($0)|0)==6) {
        label = 9; break;
      }
      else {
      label = 10; break;
      }
      
    case 3: 
      var $1=$v1_addr; //@line 75 "lobject.c"
      var $2=$v2_addr; //@line 75 "lobject.c"
      var $add=($1)+($2); //@line 75 "lobject.c"
      $retval=$add; //@line 75 "lobject.c"
      label = 11; break; //@line 75 "lobject.c"
    case 4: 
      var $3=$v1_addr; //@line 76 "lobject.c"
      var $4=$v2_addr; //@line 76 "lobject.c"
      var $sub=($3)-($4); //@line 76 "lobject.c"
      $retval=$sub; //@line 76 "lobject.c"
      label = 11; break; //@line 76 "lobject.c"
    case 5: 
      var $5=$v1_addr; //@line 77 "lobject.c"
      var $6=$v2_addr; //@line 77 "lobject.c"
      var $mul=($5)*($6); //@line 77 "lobject.c"
      $retval=$mul; //@line 77 "lobject.c"
      label = 11; break; //@line 77 "lobject.c"
    case 6: 
      var $7=$v1_addr; //@line 78 "lobject.c"
      var $8=$v2_addr; //@line 78 "lobject.c"
      var $div=($7)/($8); //@line 78 "lobject.c"
      $retval=$div; //@line 78 "lobject.c"
      label = 11; break; //@line 78 "lobject.c"
    case 7: 
      var $9=$v1_addr; //@line 79 "lobject.c"
      var $10=$v1_addr; //@line 79 "lobject.c"
      var $11=$v2_addr; //@line 79 "lobject.c"
      var $div5=($10)/($11); //@line 79 "lobject.c"
      var $call=Math.floor($div5); //@line 79 "lobject.c"
      var $12=$v2_addr; //@line 79 "lobject.c"
      var $mul6=($call)*($12); //@line 79 "lobject.c"
      var $sub7=($9)-($mul6); //@line 79 "lobject.c"
      $retval=$sub7; //@line 79 "lobject.c"
      label = 11; break; //@line 79 "lobject.c"
    case 8: 
      var $13=$v1_addr; //@line 80 "lobject.c"
      var $14=$v2_addr; //@line 80 "lobject.c"
      var $call9=Math.pow($13, $14); //@line 80 "lobject.c"
      $retval=$call9; //@line 80 "lobject.c"
      label = 11; break; //@line 80 "lobject.c"
    case 9: 
      var $15=$v1_addr; //@line 81 "lobject.c"
      var $sub11=(-$15); //@line 81 "lobject.c"
      $retval=$sub11; //@line 81 "lobject.c"
      label = 11; break; //@line 81 "lobject.c"
    case 10: 
      $retval=0; //@line 82 "lobject.c"
      label = 11; break; //@line 82 "lobject.c"
    case 11: 
      var $16=$retval; //@line 84 "lobject.c"

      return $16; //@line 84 "lobject.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z10luaO_arithidd["X"]=1;

function __Z10luaO_str2dPKcjPd($s, $len, $result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $s_addr;
      var $len_addr;
      var $result_addr;
      var $endptr=__stackBase__;
      $s_addr=$s;
      $len_addr=$len;
      $result_addr=$result;
      var $0=$s_addr; //@line 160 "lobject.c"
      var $call=_strpbrk($0, ((5244000)|0)); //@line 160 "lobject.c"
      var $tobool=(($call)|0)!=0; //@line 160 "lobject.c"
      if ($tobool) { label = 3; break; } else { label = 4; break; } //@line 160 "lobject.c"
    case 3: 
      $retval=0; //@line 161 "lobject.c"
      label = 14; break; //@line 161 "lobject.c"
    case 4: 
      var $1=$s_addr; //@line 162 "lobject.c"
      var $call1=_strpbrk($1, ((5244024)|0)); //@line 162 "lobject.c"
      var $tobool2=(($call1)|0)!=0; //@line 162 "lobject.c"
      if ($tobool2) { label = 5; break; } else { label = 6; break; } //@line 162 "lobject.c"
    case 5: 
      var $2=$s_addr; //@line 163 "lobject.c"
      var $call4=__ZL15lua_strx2numberPKcPPc($2, $endptr); //@line 163 "lobject.c"
      var $3=$result_addr; //@line 163 "lobject.c"
      (HEAPF64[(tempDoublePtr)>>3]=$call4,HEAP32[(($3)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); //@line 163 "lobject.c"
      label = 7; break; //@line 163 "lobject.c"
    case 6: 
      var $4=$s_addr; //@line 165 "lobject.c"
      var $call6=_strtod($4, $endptr); //@line 165 "lobject.c"
      var $5=$result_addr; //@line 165 "lobject.c"
      (HEAPF64[(tempDoublePtr)>>3]=$call6,HEAP32[(($5)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($5)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); //@line 165 "lobject.c"
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $6=HEAP32[(($endptr)>>2)]; //@line 166 "lobject.c"
      var $7=$s_addr; //@line 166 "lobject.c"
      var $cmp=(($6)|0)==(($7)|0); //@line 166 "lobject.c"
      if ($cmp) { label = 9; break; } else { label = 10; break; } //@line 166 "lobject.c"
    case 9: 
      $retval=0; //@line 166 "lobject.c"
      label = 14; break; //@line 166 "lobject.c"
    case 10: 
      label = 11; break; //@line 167 "lobject.c"
    case 11: 
      var $8=HEAP32[(($endptr)>>2)]; //@line 167 "lobject.c"
      var $9=HEAP8[($8)]; //@line 167 "lobject.c"
      var $conv=(($9)&255); //@line 167 "lobject.c"
      var $add=((($conv)+(1))|0); //@line 167 "lobject.c"
      var $arrayidx=((5242904+$add)|0); //@line 167 "lobject.c"
      var $10=HEAP8[($arrayidx)]; //@line 167 "lobject.c"
      var $conv10=(($10)&255); //@line 167 "lobject.c"
      var $and=$conv10 & 8; //@line 167 "lobject.c"
      var $tobool11=(($and)|0)!=0; //@line 167 "lobject.c"
      if ($tobool11) { label = 12; break; } else { label = 13; break; } //@line 167 "lobject.c"
    case 12: 
      var $11=HEAP32[(($endptr)>>2)]; //@line 167 "lobject.c"
      var $incdec_ptr=(($11+1)|0); //@line 167 "lobject.c"
      HEAP32[(($endptr)>>2)]=$incdec_ptr; //@line 167 "lobject.c"
      label = 11; break; //@line 167 "lobject.c"
    case 13: 
      var $12=HEAP32[(($endptr)>>2)]; //@line 168 "lobject.c"
      var $13=$s_addr; //@line 168 "lobject.c"
      var $14=$len_addr; //@line 168 "lobject.c"
      var $add_ptr=(($13+$14)|0); //@line 168 "lobject.c"
      var $cmp12=(($12)|0)==(($add_ptr)|0); //@line 168 "lobject.c"
      var $conv13=(($cmp12)&1); //@line 168 "lobject.c"
      $retval=$conv13; //@line 168 "lobject.c"
      label = 14; break; //@line 168 "lobject.c"
    case 14: 
      var $15=$retval; //@line 169 "lobject.c"
      STACKTOP = __stackBase__;
      return $15; //@line 169 "lobject.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z10luaO_str2dPKcjPd["X"]=1;

function __ZL15lua_strx2numberPKcPPc($s, $endptr) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $s_addr=__stackBase__;
      var $endptr_addr;
      var $r;
      var $e=(__stackBase__)+(4);
      var $i=(__stackBase__)+(8);
      var $neg;
      var $exp1;
      var $neg1;
      HEAP32[(($s_addr)>>2)]=$s;
      $endptr_addr=$endptr;
      $r=0; //@line 119 "lobject.c"
      HEAP32[(($e)>>2)]=0; //@line 120 "lobject.c"
      HEAP32[(($i)>>2)]=0; //@line 120 "lobject.c"
      $neg=0; //@line 121 "lobject.c"
      var $0=HEAP32[(($s_addr)>>2)]; //@line 122 "lobject.c"
      var $1=$endptr_addr; //@line 122 "lobject.c"
      HEAP32[(($1)>>2)]=$0; //@line 122 "lobject.c"
      label = 3; break; //@line 123 "lobject.c"
    case 3: 
      var $2=HEAP32[(($s_addr)>>2)]; //@line 123 "lobject.c"
      var $3=HEAP8[($2)]; //@line 123 "lobject.c"
      var $conv=(($3)&255); //@line 123 "lobject.c"
      var $add=((($conv)+(1))|0); //@line 123 "lobject.c"
      var $arrayidx=((5242904+$add)|0); //@line 123 "lobject.c"
      var $4=HEAP8[($arrayidx)]; //@line 123 "lobject.c"
      var $conv1=(($4)&255); //@line 123 "lobject.c"
      var $and=$conv1 & 8; //@line 123 "lobject.c"
      var $tobool=(($and)|0)!=0; //@line 123 "lobject.c"
      if ($tobool) { label = 4; break; } else { label = 5; break; } //@line 123 "lobject.c"
    case 4: 
      var $5=HEAP32[(($s_addr)>>2)]; //@line 123 "lobject.c"
      var $incdec_ptr=(($5+1)|0); //@line 123 "lobject.c"
      HEAP32[(($s_addr)>>2)]=$incdec_ptr; //@line 123 "lobject.c"
      label = 3; break; //@line 123 "lobject.c"
    case 5: 
      var $call=__ZL5isnegPPKc($s_addr); //@line 124 "lobject.c"
      $neg=$call; //@line 124 "lobject.c"
      var $6=HEAP32[(($s_addr)>>2)]; //@line 125 "lobject.c"
      var $7=HEAP8[($6)]; //@line 125 "lobject.c"
      var $conv2=(($7 << 24) >> 24); //@line 125 "lobject.c"
      var $cmp=(($conv2)|0)==48; //@line 125 "lobject.c"
      if ($cmp) { label = 6; break; } else { label = 8; break; } //@line 125 "lobject.c"
    case 6: 
      var $8=HEAP32[(($s_addr)>>2)]; //@line 125 "lobject.c"
      var $add_ptr=(($8+1)|0); //@line 125 "lobject.c"
      var $9=HEAP8[($add_ptr)]; //@line 125 "lobject.c"
      var $conv3=(($9 << 24) >> 24); //@line 125 "lobject.c"
      var $cmp4=(($conv3)|0)==120; //@line 125 "lobject.c"
      if ($cmp4) { label = 9; break; } else { label = 7; break; } //@line 125 "lobject.c"
    case 7: 
      var $10=HEAP32[(($s_addr)>>2)]; //@line 125 "lobject.c"
      var $add_ptr5=(($10+1)|0); //@line 125 "lobject.c"
      var $11=HEAP8[($add_ptr5)]; //@line 125 "lobject.c"
      var $conv6=(($11 << 24) >> 24); //@line 125 "lobject.c"
      var $cmp7=(($conv6)|0)==88; //@line 125 "lobject.c"
      if ($cmp7) { label = 9; break; } else { label = 8; break; } //@line 125 "lobject.c"
    case 8: 
      $retval=0; //@line 126 "lobject.c"
      label = 28; break; //@line 126 "lobject.c"
    case 9: 
      var $12=HEAP32[(($s_addr)>>2)]; //@line 127 "lobject.c"
      var $add_ptr8=(($12+2)|0); //@line 127 "lobject.c"
      HEAP32[(($s_addr)>>2)]=$add_ptr8; //@line 127 "lobject.c"
      var $13=$r; //@line 128 "lobject.c"
      var $call9=__ZL8readhexaPPKcdPi($s_addr, $13, $i); //@line 128 "lobject.c"
      $r=$call9; //@line 128 "lobject.c"
      var $14=HEAP32[(($s_addr)>>2)]; //@line 129 "lobject.c"
      var $15=HEAP8[($14)]; //@line 129 "lobject.c"
      var $conv10=(($15 << 24) >> 24); //@line 129 "lobject.c"
      var $cmp11=(($conv10)|0)==46; //@line 129 "lobject.c"
      if ($cmp11) { label = 10; break; } else { label = 11; break; } //@line 129 "lobject.c"
    case 10: 
      var $16=HEAP32[(($s_addr)>>2)]; //@line 130 "lobject.c"
      var $incdec_ptr13=(($16+1)|0); //@line 130 "lobject.c"
      HEAP32[(($s_addr)>>2)]=$incdec_ptr13; //@line 130 "lobject.c"
      var $17=$r; //@line 131 "lobject.c"
      var $call14=__ZL8readhexaPPKcdPi($s_addr, $17, $e); //@line 131 "lobject.c"
      $r=$call14; //@line 131 "lobject.c"
      label = 11; break; //@line 132 "lobject.c"
    case 11: 
      var $18=HEAP32[(($i)>>2)]; //@line 133 "lobject.c"
      var $cmp16=(($18)|0)==0; //@line 133 "lobject.c"
      if ($cmp16) { label = 12; break; } else { label = 14; break; } //@line 133 "lobject.c"
    case 12: 
      var $19=HEAP32[(($e)>>2)]; //@line 133 "lobject.c"
      var $cmp18=(($19)|0)==0; //@line 133 "lobject.c"
      if ($cmp18) { label = 13; break; } else { label = 14; break; } //@line 133 "lobject.c"
    case 13: 
      $retval=0; //@line 134 "lobject.c"
      label = 28; break; //@line 134 "lobject.c"
    case 14: 
      var $20=HEAP32[(($e)>>2)]; //@line 135 "lobject.c"
      var $mul=((($20)*(-4))&-1); //@line 135 "lobject.c"
      HEAP32[(($e)>>2)]=$mul; //@line 135 "lobject.c"
      var $21=HEAP32[(($s_addr)>>2)]; //@line 136 "lobject.c"
      var $22=$endptr_addr; //@line 136 "lobject.c"
      HEAP32[(($22)>>2)]=$21; //@line 136 "lobject.c"
      var $23=HEAP32[(($s_addr)>>2)]; //@line 137 "lobject.c"
      var $24=HEAP8[($23)]; //@line 137 "lobject.c"
      var $conv21=(($24 << 24) >> 24); //@line 137 "lobject.c"
      var $cmp22=(($conv21)|0)==112; //@line 137 "lobject.c"
      if ($cmp22) { label = 16; break; } else { label = 15; break; } //@line 137 "lobject.c"
    case 15: 
      var $25=HEAP32[(($s_addr)>>2)]; //@line 137 "lobject.c"
      var $26=HEAP8[($25)]; //@line 137 "lobject.c"
      var $conv24=(($26 << 24) >> 24); //@line 137 "lobject.c"
      var $cmp25=(($conv24)|0)==80; //@line 137 "lobject.c"
      if ($cmp25) { label = 16; break; } else { label = 24; break; } //@line 137 "lobject.c"
    case 16: 
      $exp1=0; //@line 138 "lobject.c"
      var $27=HEAP32[(($s_addr)>>2)]; //@line 140 "lobject.c"
      var $incdec_ptr27=(($27+1)|0); //@line 140 "lobject.c"
      HEAP32[(($s_addr)>>2)]=$incdec_ptr27; //@line 140 "lobject.c"
      var $call28=__ZL5isnegPPKc($s_addr); //@line 141 "lobject.c"
      $neg1=$call28; //@line 141 "lobject.c"
      var $28=HEAP32[(($s_addr)>>2)]; //@line 142 "lobject.c"
      var $29=HEAP8[($28)]; //@line 142 "lobject.c"
      var $conv29=(($29)&255); //@line 142 "lobject.c"
      var $add30=((($conv29)+(1))|0); //@line 142 "lobject.c"
      var $arrayidx31=((5242904+$add30)|0); //@line 142 "lobject.c"
      var $30=HEAP8[($arrayidx31)]; //@line 142 "lobject.c"
      var $conv32=(($30)&255); //@line 142 "lobject.c"
      var $and33=$conv32 & 2; //@line 142 "lobject.c"
      var $tobool34=(($and33)|0)!=0; //@line 142 "lobject.c"
      if ($tobool34) { label = 18; break; } else { label = 17; break; } //@line 142 "lobject.c"
    case 17: 
      label = 25; break; //@line 143 "lobject.c"
    case 18: 
      label = 19; break; //@line 144 "lobject.c"
    case 19: 
      var $31=HEAP32[(($s_addr)>>2)]; //@line 144 "lobject.c"
      var $32=HEAP8[($31)]; //@line 144 "lobject.c"
      var $conv38=(($32)&255); //@line 144 "lobject.c"
      var $add39=((($conv38)+(1))|0); //@line 144 "lobject.c"
      var $arrayidx40=((5242904+$add39)|0); //@line 144 "lobject.c"
      var $33=HEAP8[($arrayidx40)]; //@line 144 "lobject.c"
      var $conv41=(($33)&255); //@line 144 "lobject.c"
      var $and42=$conv41 & 2; //@line 144 "lobject.c"
      var $tobool43=(($and42)|0)!=0; //@line 144 "lobject.c"
      if ($tobool43) { label = 20; break; } else { label = 21; break; } //@line 144 "lobject.c"
    case 20: 
      var $34=$exp1; //@line 145 "lobject.c"
      var $mul45=((($34)*(10))&-1); //@line 145 "lobject.c"
      var $35=HEAP32[(($s_addr)>>2)]; //@line 145 "lobject.c"
      var $incdec_ptr46=(($35+1)|0); //@line 145 "lobject.c"
      HEAP32[(($s_addr)>>2)]=$incdec_ptr46; //@line 145 "lobject.c"
      var $36=HEAP8[($35)]; //@line 145 "lobject.c"
      var $conv47=(($36 << 24) >> 24); //@line 145 "lobject.c"
      var $add48=((($mul45)+($conv47))|0); //@line 145 "lobject.c"
      var $sub=((($add48)-(48))|0); //@line 145 "lobject.c"
      $exp1=$sub; //@line 145 "lobject.c"
      label = 19; break; //@line 145 "lobject.c"
    case 21: 
      var $37=$neg1; //@line 146 "lobject.c"
      var $tobool50=(($37)|0)!=0; //@line 146 "lobject.c"
      if ($tobool50) { label = 22; break; } else { label = 23; break; } //@line 146 "lobject.c"
    case 22: 
      var $38=$exp1; //@line 146 "lobject.c"
      var $sub52=(((-$38))|0); //@line 146 "lobject.c"
      $exp1=$sub52; //@line 146 "lobject.c"
      label = 23; break; //@line 146 "lobject.c"
    case 23: 
      var $39=$exp1; //@line 147 "lobject.c"
      var $40=HEAP32[(($e)>>2)]; //@line 147 "lobject.c"
      var $add54=((($40)+($39))|0); //@line 147 "lobject.c"
      HEAP32[(($e)>>2)]=$add54; //@line 147 "lobject.c"
      label = 24; break; //@line 148 "lobject.c"
    case 24: 
      var $41=HEAP32[(($s_addr)>>2)]; //@line 149 "lobject.c"
      var $42=$endptr_addr; //@line 149 "lobject.c"
      HEAP32[(($42)>>2)]=$41; //@line 149 "lobject.c"
      label = 25; break; //@line 149 "lobject.c"
    case 25: 
      var $43=$neg; //@line 151 "lobject.c"
      var $tobool56=(($43)|0)!=0; //@line 151 "lobject.c"
      if ($tobool56) { label = 26; break; } else { label = 27; break; } //@line 151 "lobject.c"
    case 26: 
      var $44=$r; //@line 151 "lobject.c"
      var $sub58=(-$44); //@line 151 "lobject.c"
      $r=$sub58; //@line 151 "lobject.c"
      label = 27; break; //@line 151 "lobject.c"
    case 27: 
      var $45=$r; //@line 152 "lobject.c"
      var $46=HEAP32[(($e)>>2)]; //@line 152 "lobject.c"
      var $call60=_ldexp($45, $46); //@line 152 "lobject.c"
      $retval=$call60; //@line 152 "lobject.c"
      label = 28; break; //@line 152 "lobject.c"
    case 28: 
      var $47=$retval; //@line 153 "lobject.c"
      STACKTOP = __stackBase__;
      return $47; //@line 153 "lobject.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL15lua_strx2numberPKcPPc["X"]=1;

function __ZL7pushstrP9lua_StatePKcj($L, $str, $l) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $str_addr;
      var $l_addr;
      var $io;
      var $x_;
      $L_addr=$L;
      $str_addr=$str;
      $l_addr=$l;
      var $0=$L_addr; //@line 174 "lobject.c"
      var $top=(($0+8)|0); //@line 174 "lobject.c"
      var $1=HEAP32[(($top)>>2)]; //@line 174 "lobject.c"
      $io=$1; //@line 174 "lobject.c"
      var $2=$L_addr; //@line 174 "lobject.c"
      var $3=$str_addr; //@line 174 "lobject.c"
      var $4=$l_addr; //@line 174 "lobject.c"
      var $call=__Z12luaS_newlstrP9lua_StatePKcj($2, $3, $4); //@line 174 "lobject.c"
      $x_=$call; //@line 174 "lobject.c"
      var $5=$x_; //@line 174 "lobject.c"
      var $6=$5; //@line 174 "lobject.c"
      var $7=$io; //@line 174 "lobject.c"
      var $value_=(($7)|0); //@line 174 "lobject.c"
      var $gc=$value_; //@line 174 "lobject.c"
      HEAP32[(($gc)>>2)]=$6; //@line 174 "lobject.c"
      var $8=$x_; //@line 174 "lobject.c"
      var $tsv=$8; //@line 174 "lobject.c"
      var $tt=(($tsv+4)|0); //@line 174 "lobject.c"
      var $9=HEAP8[($tt)]; //@line 174 "lobject.c"
      var $conv=(($9)&255); //@line 174 "lobject.c"
      var $or=$conv | 64; //@line 174 "lobject.c"
      var $10=$io; //@line 174 "lobject.c"
      var $tt_=(($10+8)|0); //@line 174 "lobject.c"
      HEAP32[(($tt_)>>2)]=$or; //@line 174 "lobject.c"
      var $11=$L_addr; //@line 175 "lobject.c"
      var $top1=(($11+8)|0); //@line 175 "lobject.c"
      var $12=HEAP32[(($top1)>>2)]; //@line 175 "lobject.c"
      var $incdec_ptr=(($12+12)|0); //@line 175 "lobject.c"
      HEAP32[(($top1)>>2)]=$incdec_ptr; //@line 175 "lobject.c"
      var $13=$L_addr; //@line 175 "lobject.c"
      var $stack_last=(($13+24)|0); //@line 175 "lobject.c"
      var $14=HEAP32[(($stack_last)>>2)]; //@line 175 "lobject.c"
      var $15=$L_addr; //@line 175 "lobject.c"
      var $top2=(($15+8)|0); //@line 175 "lobject.c"
      var $16=HEAP32[(($top2)>>2)]; //@line 175 "lobject.c"
      var $sub_ptr_lhs_cast=$14; //@line 175 "lobject.c"
      var $sub_ptr_rhs_cast=$16; //@line 175 "lobject.c"
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 175 "lobject.c"
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(12))&-1); //@line 175 "lobject.c"
      var $cmp=(($sub_ptr_div)|0) <= 0; //@line 175 "lobject.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 175 "lobject.c"
    case 3: 
      var $17=$L_addr; //@line 175 "lobject.c"
      __Z14luaD_growstackP9lua_Statei($17, 0); //@line 175 "lobject.c"
      label = 5; break; //@line 175 "lobject.c"
    case 4: 
      label = 5; break;
    case 5: 

      return; //@line 176 "lobject.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL7pushstrP9lua_StatePKcj["X"]=1;

function __Z16luaO_pushfstringP9lua_StatePKcz($L, $fmt, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $L_addr;
  var $fmt_addr;
  var $msg;
  var $argp=__stackBase__;
  $L_addr=$L;
  $fmt_addr=$fmt;
  var $argp1=$argp; //@line 238 "lobject.c"
  HEAP32[(($argp1)>>2)]=varrp; //@line 238 "lobject.c"
  var $0=$L_addr; //@line 239 "lobject.c"
  var $1=$fmt_addr; //@line 239 "lobject.c"
  var $2=HEAP32[(($argp)>>2)]; //@line 239 "lobject.c"
  var $call=__Z17luaO_pushvfstringP9lua_StatePKcPc($0, $1, $2); //@line 239 "lobject.c"
  $msg=$call; //@line 239 "lobject.c"
  var $argp2=$argp; //@line 240 "lobject.c"
 //@line 240 "lobject.c"
  var $3=$msg; //@line 241 "lobject.c"
  STACKTOP = __stackBase__;
  return $3; //@line 241 "lobject.c"
}


function __Z17luaO_pushvfstringP9lua_StatePKcPc($L, $fmt, $argp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $fmt_addr;
      var $argp_addr;
      var $n;
      var $e;
      var $io;
      var $x_;
      var $s;
      var $buff=__stackBase__;
      var $io20;
      var $io41;
      var $buff61=(__stackBase__)+(4);
      var $l;
      $L_addr=$L;
      $fmt_addr=$fmt;
      $argp_addr=$argp;
      $n=0; //@line 181 "lobject.c"
      label = 3; break; //@line 182 "lobject.c"
    case 3: 
      var $0=$fmt_addr; //@line 183 "lobject.c"
      var $call=_strchr($0, 37); //@line 183 "lobject.c"
      $e=$call; //@line 183 "lobject.c"
      var $1=$e; //@line 184 "lobject.c"
      var $cmp=(($1)|0)==0; //@line 184 "lobject.c"
      if ($cmp) { label = 4; break; } else { label = 5; break; } //@line 184 "lobject.c"
    case 4: 
      label = 25; break; //@line 184 "lobject.c"
    case 5: 
      var $2=$L_addr; //@line 185 "lobject.c"
      var $top=(($2+8)|0); //@line 185 "lobject.c"
      var $3=HEAP32[(($top)>>2)]; //@line 185 "lobject.c"
      $io=$3; //@line 185 "lobject.c"
      var $4=$L_addr; //@line 185 "lobject.c"
      var $5=$fmt_addr; //@line 185 "lobject.c"
      var $6=$e; //@line 185 "lobject.c"
      var $7=$fmt_addr; //@line 185 "lobject.c"
      var $sub_ptr_lhs_cast=$6; //@line 185 "lobject.c"
      var $sub_ptr_rhs_cast=$7; //@line 185 "lobject.c"
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 185 "lobject.c"
      var $call1=__Z12luaS_newlstrP9lua_StatePKcj($4, $5, $sub_ptr_sub); //@line 185 "lobject.c"
      $x_=$call1; //@line 185 "lobject.c"
      var $8=$x_; //@line 185 "lobject.c"
      var $9=$8; //@line 185 "lobject.c"
      var $10=$io; //@line 185 "lobject.c"
      var $value_=(($10)|0); //@line 185 "lobject.c"
      var $gc=$value_; //@line 185 "lobject.c"
      HEAP32[(($gc)>>2)]=$9; //@line 185 "lobject.c"
      var $11=$x_; //@line 185 "lobject.c"
      var $tsv=$11; //@line 185 "lobject.c"
      var $tt=(($tsv+4)|0); //@line 185 "lobject.c"
      var $12=HEAP8[($tt)]; //@line 185 "lobject.c"
      var $conv=(($12)&255); //@line 185 "lobject.c"
      var $or=$conv | 64; //@line 185 "lobject.c"
      var $13=$io; //@line 185 "lobject.c"
      var $tt_=(($13+8)|0); //@line 185 "lobject.c"
      HEAP32[(($tt_)>>2)]=$or; //@line 185 "lobject.c"
      var $14=$L_addr; //@line 186 "lobject.c"
      var $top2=(($14+8)|0); //@line 186 "lobject.c"
      var $15=HEAP32[(($top2)>>2)]; //@line 186 "lobject.c"
      var $incdec_ptr=(($15+12)|0); //@line 186 "lobject.c"
      HEAP32[(($top2)>>2)]=$incdec_ptr; //@line 186 "lobject.c"
      var $16=$L_addr; //@line 186 "lobject.c"
      var $stack_last=(($16+24)|0); //@line 186 "lobject.c"
      var $17=HEAP32[(($stack_last)>>2)]; //@line 186 "lobject.c"
      var $18=$L_addr; //@line 186 "lobject.c"
      var $top3=(($18+8)|0); //@line 186 "lobject.c"
      var $19=HEAP32[(($top3)>>2)]; //@line 186 "lobject.c"
      var $sub_ptr_lhs_cast4=$17; //@line 186 "lobject.c"
      var $sub_ptr_rhs_cast5=$19; //@line 186 "lobject.c"
      var $sub_ptr_sub6=((($sub_ptr_lhs_cast4)-($sub_ptr_rhs_cast5))|0); //@line 186 "lobject.c"
      var $sub_ptr_div=((((($sub_ptr_sub6)|0))/(12))&-1); //@line 186 "lobject.c"
      var $cmp7=(($sub_ptr_div)|0) <= 0; //@line 186 "lobject.c"
      if ($cmp7) { label = 6; break; } else { label = 7; break; } //@line 186 "lobject.c"
    case 6: 
      var $20=$L_addr; //@line 186 "lobject.c"
      __Z14luaD_growstackP9lua_Statei($20, 0); //@line 186 "lobject.c"
      label = 8; break; //@line 186 "lobject.c"
    case 7: 
      label = 8; break;
    case 8: 
      var $21=$e; //@line 187 "lobject.c"
      var $add_ptr=(($21+1)|0); //@line 187 "lobject.c"
      var $22=HEAP8[($add_ptr)]; //@line 187 "lobject.c"
      var $conv10=(($22 << 24) >> 24); //@line 187 "lobject.c"
      if ((($conv10)|0)==115) {
        label = 9; break;
      }
      else if ((($conv10)|0)==99) {
        label = 12; break;
      }
      else if ((($conv10)|0)==100) {
        label = 13; break;
      }
      else if ((($conv10)|0)==102) {
        label = 17; break;
      }
      else if ((($conv10)|0)==112) {
        label = 21; break;
      }
      else if ((($conv10)|0)==37) {
        label = 22; break;
      }
      else {
      label = 23; break;
      }
      
    case 9: 
      var $ap_cur=$argp_addr; //@line 189 "lobject.c"
      var $23=$ap_cur; //@line 189 "lobject.c"
      var $ap_next=(($ap_cur+4)|0); //@line 189 "lobject.c"
      $argp_addr=$ap_next; //@line 189 "lobject.c"
      var $24=HEAP32[(($23)>>2)]; //@line 189 "lobject.c"
      $s=$24; //@line 189 "lobject.c"
      var $25=$s; //@line 190 "lobject.c"
      var $cmp11=(($25)|0)==0; //@line 190 "lobject.c"
      if ($cmp11) { label = 10; break; } else { label = 11; break; } //@line 190 "lobject.c"
    case 10: 
      $s=((5243868)|0); //@line 190 "lobject.c"
      label = 11; break; //@line 190 "lobject.c"
    case 11: 
      var $26=$L_addr; //@line 191 "lobject.c"
      var $27=$s; //@line 191 "lobject.c"
      var $28=$s; //@line 191 "lobject.c"
      var $call14=_strlen($28); //@line 191 "lobject.c"
      __ZL7pushstrP9lua_StatePKcj($26, $27, $call14); //@line 191 "lobject.c"
      label = 24; break; //@line 192 "lobject.c"
    case 12: 
      var $ap_cur16=$argp_addr; //@line 196 "lobject.c"
      var $29=$ap_cur16; //@line 196 "lobject.c"
      var $ap_next17=(($ap_cur16+4)|0); //@line 196 "lobject.c"
      $argp_addr=$ap_next17; //@line 196 "lobject.c"
      var $30=HEAP32[(($29)>>2)]; //@line 196 "lobject.c"
      var $conv18=(($30) & 255); //@line 196 "lobject.c"
      HEAP8[($buff)]=$conv18; //@line 196 "lobject.c"
      var $31=$L_addr; //@line 197 "lobject.c"
      __ZL7pushstrP9lua_StatePKcj($31, $buff, 1); //@line 197 "lobject.c"
      label = 24; break; //@line 198 "lobject.c"
    case 13: 
      var $32=$L_addr; //@line 201 "lobject.c"
      var $top21=(($32+8)|0); //@line 201 "lobject.c"
      var $33=HEAP32[(($top21)>>2)]; //@line 201 "lobject.c"
      $io20=$33; //@line 201 "lobject.c"
      var $ap_cur22=$argp_addr; //@line 201 "lobject.c"
      var $34=$ap_cur22; //@line 201 "lobject.c"
      var $ap_next23=(($ap_cur22+4)|0); //@line 201 "lobject.c"
      $argp_addr=$ap_next23; //@line 201 "lobject.c"
      var $35=HEAP32[(($34)>>2)]; //@line 201 "lobject.c"
      var $conv24=(($35)|0); //@line 201 "lobject.c"
      var $36=$io20; //@line 201 "lobject.c"
      var $value_25=(($36)|0); //@line 201 "lobject.c"
      var $n26=$value_25; //@line 201 "lobject.c"
      (HEAPF64[(tempDoublePtr)>>3]=$conv24,HEAP32[(($n26)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n26)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); //@line 201 "lobject.c"
      var $37=$io20; //@line 201 "lobject.c"
      var $tt_27=(($37+8)|0); //@line 201 "lobject.c"
      HEAP32[(($tt_27)>>2)]=3; //@line 201 "lobject.c"
      var $38=$L_addr; //@line 202 "lobject.c"
      var $top28=(($38+8)|0); //@line 202 "lobject.c"
      var $39=HEAP32[(($top28)>>2)]; //@line 202 "lobject.c"
      var $incdec_ptr29=(($39+12)|0); //@line 202 "lobject.c"
      HEAP32[(($top28)>>2)]=$incdec_ptr29; //@line 202 "lobject.c"
      var $40=$L_addr; //@line 202 "lobject.c"
      var $stack_last30=(($40+24)|0); //@line 202 "lobject.c"
      var $41=HEAP32[(($stack_last30)>>2)]; //@line 202 "lobject.c"
      var $42=$L_addr; //@line 202 "lobject.c"
      var $top31=(($42+8)|0); //@line 202 "lobject.c"
      var $43=HEAP32[(($top31)>>2)]; //@line 202 "lobject.c"
      var $sub_ptr_lhs_cast32=$41; //@line 202 "lobject.c"
      var $sub_ptr_rhs_cast33=$43; //@line 202 "lobject.c"
      var $sub_ptr_sub34=((($sub_ptr_lhs_cast32)-($sub_ptr_rhs_cast33))|0); //@line 202 "lobject.c"
      var $sub_ptr_div35=((((($sub_ptr_sub34)|0))/(12))&-1); //@line 202 "lobject.c"
      var $cmp36=(($sub_ptr_div35)|0) <= 0; //@line 202 "lobject.c"
      if ($cmp36) { label = 14; break; } else { label = 15; break; } //@line 202 "lobject.c"
    case 14: 
      var $44=$L_addr; //@line 202 "lobject.c"
      __Z14luaD_growstackP9lua_Statei($44, 0); //@line 202 "lobject.c"
      label = 16; break; //@line 202 "lobject.c"
    case 15: 
      label = 16; break;
    case 16: 
      label = 24; break; //@line 203 "lobject.c"
    case 17: 
      var $45=$L_addr; //@line 206 "lobject.c"
      var $top42=(($45+8)|0); //@line 206 "lobject.c"
      var $46=HEAP32[(($top42)>>2)]; //@line 206 "lobject.c"
      $io41=$46; //@line 206 "lobject.c"
      var $ap_cur43=$argp_addr; //@line 206 "lobject.c"
      var $47=$ap_cur43; //@line 206 "lobject.c"
      var $ap_next44=(($ap_cur43+8)|0); //@line 206 "lobject.c"
      $argp_addr=$ap_next44; //@line 206 "lobject.c"
      var $48=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($47)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($47)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 206 "lobject.c"
      var $49=$io41; //@line 206 "lobject.c"
      var $value_45=(($49)|0); //@line 206 "lobject.c"
      var $n46=$value_45; //@line 206 "lobject.c"
      (HEAPF64[(tempDoublePtr)>>3]=$48,HEAP32[(($n46)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n46)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); //@line 206 "lobject.c"
      var $50=$io41; //@line 206 "lobject.c"
      var $tt_47=(($50+8)|0); //@line 206 "lobject.c"
      HEAP32[(($tt_47)>>2)]=3; //@line 206 "lobject.c"
      var $51=$L_addr; //@line 207 "lobject.c"
      var $top48=(($51+8)|0); //@line 207 "lobject.c"
      var $52=HEAP32[(($top48)>>2)]; //@line 207 "lobject.c"
      var $incdec_ptr49=(($52+12)|0); //@line 207 "lobject.c"
      HEAP32[(($top48)>>2)]=$incdec_ptr49; //@line 207 "lobject.c"
      var $53=$L_addr; //@line 207 "lobject.c"
      var $stack_last50=(($53+24)|0); //@line 207 "lobject.c"
      var $54=HEAP32[(($stack_last50)>>2)]; //@line 207 "lobject.c"
      var $55=$L_addr; //@line 207 "lobject.c"
      var $top51=(($55+8)|0); //@line 207 "lobject.c"
      var $56=HEAP32[(($top51)>>2)]; //@line 207 "lobject.c"
      var $sub_ptr_lhs_cast52=$54; //@line 207 "lobject.c"
      var $sub_ptr_rhs_cast53=$56; //@line 207 "lobject.c"
      var $sub_ptr_sub54=((($sub_ptr_lhs_cast52)-($sub_ptr_rhs_cast53))|0); //@line 207 "lobject.c"
      var $sub_ptr_div55=((((($sub_ptr_sub54)|0))/(12))&-1); //@line 207 "lobject.c"
      var $cmp56=(($sub_ptr_div55)|0) <= 0; //@line 207 "lobject.c"
      if ($cmp56) { label = 18; break; } else { label = 19; break; } //@line 207 "lobject.c"
    case 18: 
      var $57=$L_addr; //@line 207 "lobject.c"
      __Z14luaD_growstackP9lua_Statei($57, 0); //@line 207 "lobject.c"
      label = 20; break; //@line 207 "lobject.c"
    case 19: 
      label = 20; break;
    case 20: 
      label = 24; break; //@line 208 "lobject.c"
    case 21: 
      var $arraydecay=(($buff61)|0); //@line 212 "lobject.c"
      var $ap_cur62=$argp_addr; //@line 212 "lobject.c"
      var $58=$ap_cur62; //@line 212 "lobject.c"
      var $ap_next63=(($ap_cur62+4)|0); //@line 212 "lobject.c"
      $argp_addr=$ap_next63; //@line 212 "lobject.c"
      var $59=HEAP32[(($58)>>2)]; //@line 212 "lobject.c"
      var $call64=_sprintf($arraydecay, ((5243752)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$59,tempInt)); //@line 212 "lobject.c"
      $l=$call64; //@line 212 "lobject.c"
      var $60=$L_addr; //@line 213 "lobject.c"
      var $arraydecay65=(($buff61)|0); //@line 213 "lobject.c"
      var $61=$l; //@line 213 "lobject.c"
      __ZL7pushstrP9lua_StatePKcj($60, $arraydecay65, $61); //@line 213 "lobject.c"
      label = 24; break; //@line 214 "lobject.c"
    case 22: 
      var $62=$L_addr; //@line 217 "lobject.c"
      __ZL7pushstrP9lua_StatePKcj($62, ((5243696)|0), 1); //@line 217 "lobject.c"
      label = 24; break; //@line 218 "lobject.c"
    case 23: 
      var $63=$L_addr; //@line 221 "lobject.c"
      var $64=$e; //@line 221 "lobject.c"
      var $add_ptr67=(($64+1)|0); //@line 221 "lobject.c"
      var $65=HEAP8[($add_ptr67)]; //@line 221 "lobject.c"
      var $conv68=(($65 << 24) >> 24); //@line 221 "lobject.c"
      __Z13luaG_runerrorP9lua_StatePKcz($63, ((5243516)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$conv68,tempInt)); //@line 221 "lobject.c"
      throw "Reached an unreachable!" //@line 221 "lobject.c"
    case 24: 
      var $66=$n; //@line 226 "lobject.c"
      var $add=((($66)+(2))|0); //@line 226 "lobject.c"
      $n=$add; //@line 226 "lobject.c"
      var $67=$e; //@line 227 "lobject.c"
      var $add_ptr69=(($67+2)|0); //@line 227 "lobject.c"
      $fmt_addr=$add_ptr69; //@line 227 "lobject.c"
      label = 3; break; //@line 228 "lobject.c"
    case 25: 
      var $68=$L_addr; //@line 229 "lobject.c"
      var $69=$fmt_addr; //@line 229 "lobject.c"
      var $70=$fmt_addr; //@line 229 "lobject.c"
      var $call70=_strlen($70); //@line 229 "lobject.c"
      __ZL7pushstrP9lua_StatePKcj($68, $69, $call70); //@line 229 "lobject.c"
      var $71=$n; //@line 230 "lobject.c"
      var $cmp71=(($71)|0) > 0; //@line 230 "lobject.c"
      if ($cmp71) { label = 26; break; } else { label = 27; break; } //@line 230 "lobject.c"
    case 26: 
      var $72=$L_addr; //@line 230 "lobject.c"
      var $73=$n; //@line 230 "lobject.c"
      var $add73=((($73)+(1))|0); //@line 230 "lobject.c"
      __Z11luaV_concatP9lua_Statei($72, $add73); //@line 230 "lobject.c"
      label = 27; break; //@line 230 "lobject.c"
    case 27: 
      var $74=$L_addr; //@line 231 "lobject.c"
      var $top75=(($74+8)|0); //@line 231 "lobject.c"
      var $75=HEAP32[(($top75)>>2)]; //@line 231 "lobject.c"
      var $add_ptr76=((($75)-(12))|0); //@line 231 "lobject.c"
      var $value_77=(($add_ptr76)|0); //@line 231 "lobject.c"
      var $gc78=$value_77; //@line 231 "lobject.c"
      var $76=HEAP32[(($gc78)>>2)]; //@line 231 "lobject.c"
      var $ts=$76; //@line 231 "lobject.c"
      var $add_ptr79=(($ts+16)|0); //@line 231 "lobject.c"
      var $77=$add_ptr79; //@line 231 "lobject.c"
      STACKTOP = __stackBase__;
      return $77; //@line 231 "lobject.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z17luaO_pushvfstringP9lua_StatePKcPc["X"]=1;

function __ZL5isnegPPKc($s) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $s_addr;
      $s_addr=$s;
      var $0=$s_addr; //@line 99 "lobject.c"
      var $1=HEAP32[(($0)>>2)]; //@line 99 "lobject.c"
      var $2=HEAP8[($1)]; //@line 99 "lobject.c"
      var $conv=(($2 << 24) >> 24); //@line 99 "lobject.c"
      var $cmp=(($conv)|0)==45; //@line 99 "lobject.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 99 "lobject.c"
    case 3: 
      var $3=$s_addr; //@line 99 "lobject.c"
      var $4=HEAP32[(($3)>>2)]; //@line 99 "lobject.c"
      var $incdec_ptr=(($4+1)|0); //@line 99 "lobject.c"
      HEAP32[(($3)>>2)]=$incdec_ptr; //@line 99 "lobject.c"
      $retval=1; //@line 99 "lobject.c"
      label = 8; break; //@line 99 "lobject.c"
    case 4: 
      var $5=$s_addr; //@line 100 "lobject.c"
      var $6=HEAP32[(($5)>>2)]; //@line 100 "lobject.c"
      var $7=HEAP8[($6)]; //@line 100 "lobject.c"
      var $conv1=(($7 << 24) >> 24); //@line 100 "lobject.c"
      var $cmp2=(($conv1)|0)==43; //@line 100 "lobject.c"
      if ($cmp2) { label = 5; break; } else { label = 6; break; } //@line 100 "lobject.c"
    case 5: 
      var $8=$s_addr; //@line 100 "lobject.c"
      var $9=HEAP32[(($8)>>2)]; //@line 100 "lobject.c"
      var $incdec_ptr4=(($9+1)|0); //@line 100 "lobject.c"
      HEAP32[(($8)>>2)]=$incdec_ptr4; //@line 100 "lobject.c"
      label = 6; break; //@line 100 "lobject.c"
    case 6: 
      label = 7; break;
    case 7: 
      $retval=0; //@line 101 "lobject.c"
      label = 8; break; //@line 101 "lobject.c"
    case 8: 
      var $10=$retval; //@line 102 "lobject.c"

      return $10; //@line 102 "lobject.c"
    default: assert(0, "bad label: " + label);
  }

}


function __Z12luaE_setdebtP12global_Statei($g, $debt) {
  var label = 0;


  var $g_addr;
  var $debt_addr;
  $g_addr=$g;
  $debt_addr=$debt;
  var $0=$debt_addr; //@line 107 "lstate.c"
  var $1=$g_addr; //@line 107 "lstate.c"
  var $GCdebt=(($1+12)|0); //@line 107 "lstate.c"
  var $2=HEAP32[(($GCdebt)>>2)]; //@line 107 "lstate.c"
  var $sub=((($0)-($2))|0); //@line 107 "lstate.c"
  var $3=$g_addr; //@line 107 "lstate.c"
  var $totalbytes=(($3+8)|0); //@line 107 "lstate.c"
  var $4=HEAP32[(($totalbytes)>>2)]; //@line 107 "lstate.c"
  var $sub1=((($4)-($sub))|0); //@line 107 "lstate.c"
  HEAP32[(($totalbytes)>>2)]=$sub1; //@line 107 "lstate.c"
  var $5=$debt_addr; //@line 108 "lstate.c"
  var $6=$g_addr; //@line 108 "lstate.c"
  var $GCdebt2=(($6+12)|0); //@line 108 "lstate.c"
  HEAP32[(($GCdebt2)>>2)]=$5; //@line 108 "lstate.c"

  return; //@line 109 "lstate.c"
}


function __Z9luaS_hashPKcjj($str, $l, $seed) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $str_addr;
      var $l_addr;
      var $seed_addr;
      var $h;
      var $l1;
      var $step;
      $str_addr=$str;
      $l_addr=$l;
      $seed_addr=$seed;
      var $0=$seed_addr; //@line 52 "lstring.c"
      var $1=$l_addr; //@line 52 "lstring.c"
      var $xor=$0 ^ $1; //@line 52 "lstring.c"
      $h=$xor; //@line 52 "lstring.c"
      var $2=$l_addr; //@line 54 "lstring.c"
      var $shr=$2 >>> 5; //@line 54 "lstring.c"
      var $add=((($shr)+(1))|0); //@line 54 "lstring.c"
      $step=$add; //@line 54 "lstring.c"
      var $3=$l_addr; //@line 55 "lstring.c"
      $l1=$3; //@line 55 "lstring.c"
      label = 3; break; //@line 55 "lstring.c"
    case 3: 
      var $4=$l1; //@line 55 "lstring.c"
      var $5=$step; //@line 55 "lstring.c"
      var $cmp=(($4)>>>0) >= (($5)>>>0); //@line 55 "lstring.c"
      if ($cmp) { label = 4; break; } else { label = 6; break; } //@line 55 "lstring.c"
    case 4: 
      var $6=$h; //@line 56 "lstring.c"
      var $7=$h; //@line 56 "lstring.c"
      var $shl=$7 << 5; //@line 56 "lstring.c"
      var $8=$h; //@line 56 "lstring.c"
      var $shr1=$8 >>> 2; //@line 56 "lstring.c"
      var $add2=((($shl)+($shr1))|0); //@line 56 "lstring.c"
      var $9=$l1; //@line 56 "lstring.c"
      var $sub=((($9)-(1))|0); //@line 56 "lstring.c"
      var $10=$str_addr; //@line 56 "lstring.c"
      var $arrayidx=(($10+$sub)|0); //@line 56 "lstring.c"
      var $11=HEAP8[($arrayidx)]; //@line 56 "lstring.c"
      var $conv=(($11)&255); //@line 56 "lstring.c"
      var $add3=((($add2)+($conv))|0); //@line 56 "lstring.c"
      var $xor4=$6 ^ $add3; //@line 56 "lstring.c"
      $h=$xor4; //@line 56 "lstring.c"
      label = 5; break; //@line 56 "lstring.c"
    case 5: 
      var $12=$step; //@line 55 "lstring.c"
      var $13=$l1; //@line 55 "lstring.c"
      var $sub5=((($13)-($12))|0); //@line 55 "lstring.c"
      $l1=$sub5; //@line 55 "lstring.c"
      label = 3; break; //@line 55 "lstring.c"
    case 6: 
      var $14=$h; //@line 57 "lstring.c"

      return $14; //@line 57 "lstring.c"
    default: assert(0, "bad label: " + label);
  }

}


function __Z12luaO_chunkidPcPKcj($out, $source, $bufflen) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $out_addr;
      var $source_addr;
      var $bufflen_addr;
      var $l;
      var $nl;
      $out_addr=$out;
      $source_addr=$source;
      $bufflen_addr=$bufflen;
      var $0=$source_addr; //@line 255 "lobject.c"
      var $call=_strlen($0); //@line 255 "lobject.c"
      $l=$call; //@line 255 "lobject.c"
      var $1=$source_addr; //@line 256 "lobject.c"
      var $2=HEAP8[($1)]; //@line 256 "lobject.c"
      var $conv=(($2 << 24) >> 24); //@line 256 "lobject.c"
      var $cmp=(($conv)|0)==61; //@line 256 "lobject.c"
      if ($cmp) { label = 3; break; } else { label = 7; break; } //@line 256 "lobject.c"
    case 3: 
      var $3=$l; //@line 257 "lobject.c"
      var $4=$bufflen_addr; //@line 257 "lobject.c"
      var $cmp1=(($3)>>>0) <= (($4)>>>0); //@line 257 "lobject.c"
      if ($cmp1) { label = 4; break; } else { label = 5; break; } //@line 257 "lobject.c"
    case 4: 
      var $5=$out_addr; //@line 258 "lobject.c"
      var $6=$source_addr; //@line 258 "lobject.c"
      var $add_ptr=(($6+1)|0); //@line 258 "lobject.c"
      var $7=$l; //@line 258 "lobject.c"
      var $mul=$7; //@line 258 "lobject.c"
      assert($mul % 1 === 0);_memcpy($5, $add_ptr, $mul); //@line 258 "lobject.c"
      label = 6; break; //@line 258 "lobject.c"
    case 5: 
      var $8=$out_addr; //@line 260 "lobject.c"
      var $9=$source_addr; //@line 260 "lobject.c"
      var $add_ptr3=(($9+1)|0); //@line 260 "lobject.c"
      var $10=$bufflen_addr; //@line 260 "lobject.c"
      var $sub=((($10)-(1))|0); //@line 260 "lobject.c"
      var $mul4=$sub; //@line 260 "lobject.c"
      assert($mul4 % 1 === 0);_memcpy($8, $add_ptr3, $mul4); //@line 260 "lobject.c"
      var $11=$bufflen_addr; //@line 260 "lobject.c"
      var $sub5=((($11)-(1))|0); //@line 260 "lobject.c"
      var $12=$out_addr; //@line 260 "lobject.c"
      var $add_ptr6=(($12+$sub5)|0); //@line 260 "lobject.c"
      $out_addr=$add_ptr6; //@line 260 "lobject.c"
      var $13=$out_addr; //@line 261 "lobject.c"
      HEAP8[($13)]=0; //@line 261 "lobject.c"
      label = 6; break;
    case 6: 
      label = 22; break; //@line 263 "lobject.c"
    case 7: 
      var $14=$source_addr; //@line 264 "lobject.c"
      var $15=HEAP8[($14)]; //@line 264 "lobject.c"
      var $conv8=(($15 << 24) >> 24); //@line 264 "lobject.c"
      var $cmp9=(($conv8)|0)==64; //@line 264 "lobject.c"
      if ($cmp9) { label = 8; break; } else { label = 12; break; } //@line 264 "lobject.c"
    case 8: 
      var $16=$l; //@line 265 "lobject.c"
      var $17=$bufflen_addr; //@line 265 "lobject.c"
      var $cmp11=(($16)>>>0) <= (($17)>>>0); //@line 265 "lobject.c"
      if ($cmp11) { label = 9; break; } else { label = 10; break; } //@line 265 "lobject.c"
    case 9: 
      var $18=$out_addr; //@line 266 "lobject.c"
      var $19=$source_addr; //@line 266 "lobject.c"
      var $add_ptr13=(($19+1)|0); //@line 266 "lobject.c"
      var $20=$l; //@line 266 "lobject.c"
      var $mul14=$20; //@line 266 "lobject.c"
      assert($mul14 % 1 === 0);_memcpy($18, $add_ptr13, $mul14); //@line 266 "lobject.c"
      label = 11; break; //@line 266 "lobject.c"
    case 10: 
      var $21=$out_addr; //@line 268 "lobject.c"
      assert(3 % 1 === 0);HEAP8[($21)]=HEAP8[((((5243464)|0))|0)];HEAP8[((($21)+(1))|0)]=HEAP8[(((((5243464)|0))+(1))|0)];HEAP8[((($21)+(2))|0)]=HEAP8[(((((5243464)|0))+(2))|0)]; //@line 268 "lobject.c"
      var $22=$out_addr; //@line 268 "lobject.c"
      var $add_ptr16=(($22+3)|0); //@line 268 "lobject.c"
      $out_addr=$add_ptr16; //@line 268 "lobject.c"
      var $23=$bufflen_addr; //@line 269 "lobject.c"
      var $sub17=((($23)-(3))|0); //@line 269 "lobject.c"
      $bufflen_addr=$sub17; //@line 269 "lobject.c"
      var $24=$out_addr; //@line 270 "lobject.c"
      var $25=$source_addr; //@line 270 "lobject.c"
      var $add_ptr18=(($25+1)|0); //@line 270 "lobject.c"
      var $26=$l; //@line 270 "lobject.c"
      var $add_ptr19=(($add_ptr18+$26)|0); //@line 270 "lobject.c"
      var $27=$bufflen_addr; //@line 270 "lobject.c"
      var $idx_neg=(((-$27))|0); //@line 270 "lobject.c"
      var $add_ptr20=(($add_ptr19+$idx_neg)|0); //@line 270 "lobject.c"
      var $28=$bufflen_addr; //@line 270 "lobject.c"
      var $mul21=$28; //@line 270 "lobject.c"
      assert($mul21 % 1 === 0);_memcpy($24, $add_ptr20, $mul21); //@line 270 "lobject.c"
      label = 11; break;
    case 11: 
      label = 21; break; //@line 272 "lobject.c"
    case 12: 
      var $29=$source_addr; //@line 274 "lobject.c"
      var $call24=_strchr($29, 10); //@line 274 "lobject.c"
      $nl=$call24; //@line 274 "lobject.c"
      var $30=$out_addr; //@line 275 "lobject.c"
      assert(9 % 1 === 0);for (var $$src = ((5243392)|0), $$dest = $30, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
        HEAP8[$$dest] = HEAP8[$$src]
      }; //@line 275 "lobject.c"
      var $31=$out_addr; //@line 275 "lobject.c"
      var $add_ptr25=(($31+9)|0); //@line 275 "lobject.c"
      $out_addr=$add_ptr25; //@line 275 "lobject.c"
      var $32=$bufflen_addr; //@line 276 "lobject.c"
      var $sub26=((($32)-(15))|0); //@line 276 "lobject.c"
      $bufflen_addr=$sub26; //@line 276 "lobject.c"
      var $33=$l; //@line 277 "lobject.c"
      var $34=$bufflen_addr; //@line 277 "lobject.c"
      var $cmp27=(($33)>>>0) < (($34)>>>0); //@line 277 "lobject.c"
      if ($cmp27) { label = 13; break; } else { label = 15; break; } //@line 277 "lobject.c"
    case 13: 
      var $35=$nl; //@line 277 "lobject.c"
      var $cmp28=(($35)|0)==0; //@line 277 "lobject.c"
      if ($cmp28) { label = 14; break; } else { label = 15; break; } //@line 277 "lobject.c"
    case 14: 
      var $36=$out_addr; //@line 278 "lobject.c"
      var $37=$source_addr; //@line 278 "lobject.c"
      var $38=$l; //@line 278 "lobject.c"
      var $mul30=$38; //@line 278 "lobject.c"
      assert($mul30 % 1 === 0);_memcpy($36, $37, $mul30); //@line 278 "lobject.c"
      var $39=$l; //@line 278 "lobject.c"
      var $40=$out_addr; //@line 278 "lobject.c"
      var $add_ptr31=(($40+$39)|0); //@line 278 "lobject.c"
      $out_addr=$add_ptr31; //@line 278 "lobject.c"
      label = 20; break; //@line 279 "lobject.c"
    case 15: 
      var $41=$nl; //@line 281 "lobject.c"
      var $cmp33=(($41)|0)!=0; //@line 281 "lobject.c"
      if ($cmp33) { label = 16; break; } else { label = 17; break; } //@line 281 "lobject.c"
    case 16: 
      var $42=$nl; //@line 281 "lobject.c"
      var $43=$source_addr; //@line 281 "lobject.c"
      var $sub_ptr_lhs_cast=$42; //@line 281 "lobject.c"
      var $sub_ptr_rhs_cast=$43; //@line 281 "lobject.c"
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 281 "lobject.c"
      $l=$sub_ptr_sub; //@line 281 "lobject.c"
      label = 17; break; //@line 281 "lobject.c"
    case 17: 
      var $44=$l; //@line 282 "lobject.c"
      var $45=$bufflen_addr; //@line 282 "lobject.c"
      var $cmp36=(($44)>>>0) > (($45)>>>0); //@line 282 "lobject.c"
      if ($cmp36) { label = 18; break; } else { label = 19; break; } //@line 282 "lobject.c"
    case 18: 
      var $46=$bufflen_addr; //@line 282 "lobject.c"
      $l=$46; //@line 282 "lobject.c"
      label = 19; break; //@line 282 "lobject.c"
    case 19: 
      var $47=$out_addr; //@line 283 "lobject.c"
      var $48=$source_addr; //@line 283 "lobject.c"
      var $49=$l; //@line 283 "lobject.c"
      var $mul39=$49; //@line 283 "lobject.c"
      assert($mul39 % 1 === 0);_memcpy($47, $48, $mul39); //@line 283 "lobject.c"
      var $50=$l; //@line 283 "lobject.c"
      var $51=$out_addr; //@line 283 "lobject.c"
      var $add_ptr40=(($51+$50)|0); //@line 283 "lobject.c"
      $out_addr=$add_ptr40; //@line 283 "lobject.c"
      var $52=$out_addr; //@line 284 "lobject.c"
      assert(3 % 1 === 0);HEAP8[($52)]=HEAP8[((((5243464)|0))|0)];HEAP8[((($52)+(1))|0)]=HEAP8[(((((5243464)|0))+(1))|0)];HEAP8[((($52)+(2))|0)]=HEAP8[(((((5243464)|0))+(2))|0)]; //@line 284 "lobject.c"
      var $53=$out_addr; //@line 284 "lobject.c"
      var $add_ptr41=(($53+3)|0); //@line 284 "lobject.c"
      $out_addr=$add_ptr41; //@line 284 "lobject.c"
      label = 20; break;
    case 20: 
      var $54=$out_addr; //@line 286 "lobject.c"
      assert(3 % 1 === 0);HEAP8[($54)]=HEAP8[((((5243340)|0))|0)];HEAP8[((($54)+(1))|0)]=HEAP8[(((((5243340)|0))+(1))|0)];HEAP8[((($54)+(2))|0)]=HEAP8[(((((5243340)|0))+(2))|0)]; //@line 286 "lobject.c"
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 

      return; //@line 288 "lobject.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z12luaO_chunkidPcPKcj["X"]=1;

function __ZL8readhexaPPKcdPi($s, $r, $count) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      var $r_addr;
      var $count_addr;
      $s_addr=$s;
      $r_addr=$r;
      $count_addr=$count;
      label = 3; break; //@line 106 "lobject.c"
    case 3: 
      var $0=$s_addr; //@line 106 "lobject.c"
      var $1=HEAP32[(($0)>>2)]; //@line 106 "lobject.c"
      var $2=HEAP8[($1)]; //@line 106 "lobject.c"
      var $conv=(($2)&255); //@line 106 "lobject.c"
      var $add=((($conv)+(1))|0); //@line 106 "lobject.c"
      var $arrayidx=((5242904+$add)|0); //@line 106 "lobject.c"
      var $3=HEAP8[($arrayidx)]; //@line 106 "lobject.c"
      var $conv1=(($3)&255); //@line 106 "lobject.c"
      var $and=$conv1 & 16; //@line 106 "lobject.c"
      var $tobool=(($and)|0)!=0; //@line 106 "lobject.c"
      if ($tobool) { label = 4; break; } else { label = 6; break; } //@line 106 "lobject.c"
    case 4: 
      var $4=$r_addr; //@line 107 "lobject.c"
      var $mul=($4)*(16); //@line 107 "lobject.c"
      var $5=$s_addr; //@line 107 "lobject.c"
      var $6=HEAP32[(($5)>>2)]; //@line 107 "lobject.c"
      var $7=HEAP8[($6)]; //@line 107 "lobject.c"
      var $conv2=(($7)&255); //@line 107 "lobject.c"
      var $call=__Z14luaO_hexavaluei($conv2); //@line 107 "lobject.c"
      var $conv3=(($call)|0); //@line 107 "lobject.c"
      var $add4=($mul)+($conv3); //@line 107 "lobject.c"
      $r_addr=$add4; //@line 107 "lobject.c"
      var $8=$count_addr; //@line 108 "lobject.c"
      var $9=HEAP32[(($8)>>2)]; //@line 108 "lobject.c"
      var $inc=((($9)+(1))|0); //@line 108 "lobject.c"
      HEAP32[(($8)>>2)]=$inc; //@line 108 "lobject.c"
      label = 5; break; //@line 109 "lobject.c"
    case 5: 
      var $10=$s_addr; //@line 106 "lobject.c"
      var $11=HEAP32[(($10)>>2)]; //@line 106 "lobject.c"
      var $incdec_ptr=(($11+1)|0); //@line 106 "lobject.c"
      HEAP32[(($10)>>2)]=$incdec_ptr; //@line 106 "lobject.c"
      label = 3; break; //@line 106 "lobject.c"
    case 6: 
      var $12=$r_addr; //@line 110 "lobject.c"

      return $12; //@line 110 "lobject.c"
    default: assert(0, "bad label: " + label);
  }

}


function __Z13luaE_extendCIP9lua_State($L) {
  var label = 0;


  var $L_addr;
  var $ci;
  $L_addr=$L;
  var $0=$L_addr; //@line 113 "lstate.c"
  var $call=__Z13luaM_realloc_P9lua_StatePvjj($0, 0, 0, 40); //@line 113 "lstate.c"
  var $1=$call; //@line 113 "lstate.c"
  $ci=$1; //@line 113 "lstate.c"
  var $2=$ci; //@line 115 "lstate.c"
  var $3=$L_addr; //@line 115 "lstate.c"
  var $ci1=(($3+16)|0); //@line 115 "lstate.c"
  var $4=HEAP32[(($ci1)>>2)]; //@line 115 "lstate.c"
  var $next=(($4+12)|0); //@line 115 "lstate.c"
  HEAP32[(($next)>>2)]=$2; //@line 115 "lstate.c"
  var $5=$L_addr; //@line 116 "lstate.c"
  var $ci2=(($5+16)|0); //@line 116 "lstate.c"
  var $6=HEAP32[(($ci2)>>2)]; //@line 116 "lstate.c"
  var $7=$ci; //@line 116 "lstate.c"
  var $previous=(($7+8)|0); //@line 116 "lstate.c"
  HEAP32[(($previous)>>2)]=$6; //@line 116 "lstate.c"
  var $8=$ci; //@line 117 "lstate.c"
  var $next3=(($8+12)|0); //@line 117 "lstate.c"
  HEAP32[(($next3)>>2)]=0; //@line 117 "lstate.c"
  var $9=$ci; //@line 118 "lstate.c"

  return $9; //@line 118 "lstate.c"
}


function __Z11luaE_freeCIP9lua_State($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $ci;
      var $next;
      $L_addr=$L;
      var $0=$L_addr; //@line 123 "lstate.c"
      var $ci1=(($0+16)|0); //@line 123 "lstate.c"
      var $1=HEAP32[(($ci1)>>2)]; //@line 123 "lstate.c"
      $ci=$1; //@line 123 "lstate.c"
      var $2=$ci; //@line 124 "lstate.c"
      var $next2=(($2+12)|0); //@line 124 "lstate.c"
      var $3=HEAP32[(($next2)>>2)]; //@line 124 "lstate.c"
      $next=$3; //@line 124 "lstate.c"
      var $4=$ci; //@line 125 "lstate.c"
      var $next3=(($4+12)|0); //@line 125 "lstate.c"
      HEAP32[(($next3)>>2)]=0; //@line 125 "lstate.c"
      label = 3; break; //@line 126 "lstate.c"
    case 3: 
      var $5=$next; //@line 126 "lstate.c"
      $ci=$5; //@line 126 "lstate.c"
      var $cmp=(($5)|0)!=0; //@line 126 "lstate.c"
      if ($cmp) { label = 4; break; } else { label = 5; break; } //@line 126 "lstate.c"
    case 4: 
      var $6=$ci; //@line 127 "lstate.c"
      var $next4=(($6+12)|0); //@line 127 "lstate.c"
      var $7=HEAP32[(($next4)>>2)]; //@line 127 "lstate.c"
      $next=$7; //@line 127 "lstate.c"
      var $8=$L_addr; //@line 128 "lstate.c"
      var $9=$ci; //@line 128 "lstate.c"
      var $10=$9; //@line 128 "lstate.c"
      var $call=__Z13luaM_realloc_P9lua_StatePvjj($8, $10, 40, 0); //@line 128 "lstate.c"
      label = 3; break; //@line 129 "lstate.c"
    case 5: 

      return; //@line 130 "lstate.c"
    default: assert(0, "bad label: " + label);
  }

}


function __Z15luaE_freethreadP9lua_StateS0_($L, $L1) {
  var label = 0;


  var $L_addr;
  var $L1_addr;
  var $l;
  $L_addr=$L;
  $L1_addr=$L1;
  var $0=$L1_addr; //@line 253 "lstate.c"
  var $1=$0; //@line 253 "lstate.c"
  var $add_ptr=(($1)|0); //@line 253 "lstate.c"
  var $2=$add_ptr; //@line 253 "lstate.c"
  $l=$2; //@line 253 "lstate.c"
  var $3=$L1_addr; //@line 254 "lstate.c"
  var $4=$L1_addr; //@line 254 "lstate.c"
  var $stack=(($4+28)|0); //@line 254 "lstate.c"
  var $5=HEAP32[(($stack)>>2)]; //@line 254 "lstate.c"
  __Z10luaF_closeP9lua_StateP10lua_TValue($3, $5); //@line 254 "lstate.c"
  var $6=$L1_addr; //@line 257 "lstate.c"
  __ZL9freestackP9lua_State($6); //@line 257 "lstate.c"
  var $7=$L_addr; //@line 258 "lstate.c"
  var $8=$l; //@line 258 "lstate.c"
  var $9=$8; //@line 258 "lstate.c"
  var $call=__Z13luaM_realloc_P9lua_StatePvjj($7, $9, 112, 0); //@line 258 "lstate.c"

  return; //@line 259 "lstate.c"
}


function __ZL9freestackP9lua_State($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      $L_addr=$L;
      var $0=$L_addr; //@line 154 "lstate.c"
      var $stack=(($0+28)|0); //@line 154 "lstate.c"
      var $1=HEAP32[(($stack)>>2)]; //@line 154 "lstate.c"
      var $cmp=(($1)|0)==0; //@line 154 "lstate.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 154 "lstate.c"
    case 3: 
      label = 5; break; //@line 155 "lstate.c"
    case 4: 
      var $2=$L_addr; //@line 156 "lstate.c"
      var $base_ci=(($2+72)|0); //@line 156 "lstate.c"
      var $3=$L_addr; //@line 156 "lstate.c"
      var $ci=(($3+16)|0); //@line 156 "lstate.c"
      HEAP32[(($ci)>>2)]=$base_ci; //@line 156 "lstate.c"
      var $4=$L_addr; //@line 157 "lstate.c"
      __Z11luaE_freeCIP9lua_State($4); //@line 157 "lstate.c"
      var $5=$L_addr; //@line 158 "lstate.c"
      var $6=$L_addr; //@line 158 "lstate.c"
      var $stack1=(($6+28)|0); //@line 158 "lstate.c"
      var $7=HEAP32[(($stack1)>>2)]; //@line 158 "lstate.c"
      var $8=$7; //@line 158 "lstate.c"
      var $9=$L_addr; //@line 158 "lstate.c"
      var $stacksize=(($9+32)|0); //@line 158 "lstate.c"
      var $10=HEAP32[(($stacksize)>>2)]; //@line 158 "lstate.c"
      var $mul=((($10)*(12))&-1); //@line 158 "lstate.c"
      var $call=__Z13luaM_realloc_P9lua_StatePvjj($5, $8, $mul, 0); //@line 158 "lstate.c"
      label = 5; break; //@line 159 "lstate.c"
    case 5: 

      return; //@line 159 "lstate.c"
    default: assert(0, "bad label: " + label);
  }

}


function __Z13luaS_eqlngstrP7TStringS0_($a, $b) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $b_addr;
      var $len;
      $a_addr=$a;
      $b_addr=$b;
      var $0=$a_addr; //@line 34 "lstring.c"
      var $tsv=$0; //@line 34 "lstring.c"
      var $len1=(($tsv+12)|0); //@line 34 "lstring.c"
      var $1=HEAP32[(($len1)>>2)]; //@line 34 "lstring.c"
      $len=$1; //@line 34 "lstring.c"
      var $2=$a_addr; //@line 36 "lstring.c"
      var $3=$b_addr; //@line 36 "lstring.c"
      var $cmp=(($2)|0)==(($3)|0); //@line 36 "lstring.c"
      if ($cmp) { var $13 = 1;label = 6; break; } else { label = 3; break; } //@line 36 "lstring.c"
    case 3: 
      var $4=$len; //@line 36 "lstring.c"
      var $5=$b_addr; //@line 36 "lstring.c"
      var $tsv2=$5; //@line 36 "lstring.c"
      var $len3=(($tsv2+12)|0); //@line 36 "lstring.c"
      var $6=HEAP32[(($len3)>>2)]; //@line 36 "lstring.c"
      var $cmp4=(($4)|0)==(($6)|0); //@line 36 "lstring.c"
      if ($cmp4) { label = 4; break; } else { var $12 = 0;label = 5; break; } //@line 36 "lstring.c"
    case 4: 
      var $7=$a_addr; //@line 38 "lstring.c"
      var $add_ptr=(($7+16)|0); //@line 38 "lstring.c"
      var $8=$add_ptr; //@line 38 "lstring.c"
      var $9=$b_addr; //@line 38 "lstring.c"
      var $add_ptr5=(($9+16)|0); //@line 38 "lstring.c"
      var $10=$add_ptr5; //@line 38 "lstring.c"
      var $11=$len; //@line 38 "lstring.c"
      var $call=_memcmp($8, $10, $11); //@line 38 "lstring.c"
      var $cmp6=(($call)|0)==0; //@line 38 "lstring.c"
      var $12 = $cmp6;label = 5; break;
    case 5: 
      var $12;
      var $13 = $12;label = 6; break;
    case 6: 
      var $13;
      var $conv=(($13)&1);

      return $conv; //@line 39 "lstring.c"
    default: assert(0, "bad label: " + label);
  }

}


function __ZL12internshrstrP9lua_StatePKcj($L, $str, $l) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $str_addr;
      var $l_addr;
      var $o;
      var $g;
      var $h;
      var $ts;
      $L_addr=$L;
      $str_addr=$str;
      $l_addr=$l;
      var $0=$L_addr; //@line 135 "lstring.c"
      var $l_G=(($0+12)|0); //@line 135 "lstring.c"
      var $1=HEAP32[(($l_G)>>2)]; //@line 135 "lstring.c"
      $g=$1; //@line 135 "lstring.c"
      var $2=$str_addr; //@line 136 "lstring.c"
      var $3=$l_addr; //@line 136 "lstring.c"
      var $4=$g; //@line 136 "lstring.c"
      var $seed=(($4+48)|0); //@line 136 "lstring.c"
      var $5=HEAP32[(($seed)>>2)]; //@line 136 "lstring.c"
      var $call=__Z9luaS_hashPKcjj($2, $3, $5); //@line 136 "lstring.c"
      $h=$call; //@line 136 "lstring.c"
      var $6=$h; //@line 137 "lstring.c"
      var $7=$g; //@line 137 "lstring.c"
      var $strt=(($7+24)|0); //@line 137 "lstring.c"
      var $size=(($strt+8)|0); //@line 137 "lstring.c"
      var $8=HEAP32[(($size)>>2)]; //@line 137 "lstring.c"
      var $sub=((($8)-(1))|0); //@line 137 "lstring.c"
      var $and=$6 & $sub; //@line 137 "lstring.c"
      var $9=$g; //@line 137 "lstring.c"
      var $strt1=(($9+24)|0); //@line 137 "lstring.c"
      var $hash=(($strt1)|0); //@line 137 "lstring.c"
      var $10=HEAP32[(($hash)>>2)]; //@line 137 "lstring.c"
      var $arrayidx=(($10+($and<<2))|0); //@line 137 "lstring.c"
      var $11=HEAP32[(($arrayidx)>>2)]; //@line 137 "lstring.c"
      $o=$11; //@line 137 "lstring.c"
      label = 3; break; //@line 137 "lstring.c"
    case 3: 
      var $12=$o; //@line 137 "lstring.c"
      var $cmp=(($12)|0)!=0; //@line 137 "lstring.c"
      if ($cmp) { label = 4; break; } else { label = 12; break; } //@line 137 "lstring.c"
    case 4: 
      var $13=$o; //@line 140 "lstring.c"
      var $ts2=$13; //@line 140 "lstring.c"
      $ts=$ts2; //@line 140 "lstring.c"
      var $14=$h; //@line 141 "lstring.c"
      var $15=$ts; //@line 141 "lstring.c"
      var $tsv=$15; //@line 141 "lstring.c"
      var $hash3=(($tsv+8)|0); //@line 141 "lstring.c"
      var $16=HEAP32[(($hash3)>>2)]; //@line 141 "lstring.c"
      var $cmp4=(($14)|0)==(($16)|0); //@line 141 "lstring.c"
      if ($cmp4) { label = 5; break; } else { label = 10; break; } //@line 141 "lstring.c"
    case 5: 
      var $17=$ts; //@line 141 "lstring.c"
      var $tsv5=$17; //@line 141 "lstring.c"
      var $len=(($tsv5+12)|0); //@line 141 "lstring.c"
      var $18=HEAP32[(($len)>>2)]; //@line 141 "lstring.c"
      var $19=$l_addr; //@line 141 "lstring.c"
      var $cmp6=(($18)|0)==(($19)|0); //@line 141 "lstring.c"
      if ($cmp6) { label = 6; break; } else { label = 10; break; } //@line 141 "lstring.c"
    case 6: 
      var $20=$str_addr; //@line 143 "lstring.c"
      var $21=$ts; //@line 143 "lstring.c"
      var $add_ptr=(($21+16)|0); //@line 143 "lstring.c"
      var $22=$add_ptr; //@line 143 "lstring.c"
      var $23=$l_addr; //@line 143 "lstring.c"
      var $mul=$23; //@line 143 "lstring.c"
      var $call8=_memcmp($20, $22, $mul); //@line 143 "lstring.c"
      var $cmp9=(($call8)|0)==0; //@line 143 "lstring.c"
      if ($cmp9) { label = 7; break; } else { label = 10; break; } //@line 143 "lstring.c"
    case 7: 
      var $24=$o; //@line 144 "lstring.c"
      var $gch=$24; //@line 144 "lstring.c"
      var $marked=(($gch+5)|0); //@line 144 "lstring.c"
      var $25=HEAP8[($marked)]; //@line 144 "lstring.c"
      var $conv=(($25)&255); //@line 144 "lstring.c"
      var $xor=$conv ^ 3; //@line 144 "lstring.c"
      var $26=$L_addr; //@line 144 "lstring.c"
      var $l_G10=(($26+12)|0); //@line 144 "lstring.c"
      var $27=HEAP32[(($l_G10)>>2)]; //@line 144 "lstring.c"
      var $currentwhite=(($27+52)|0); //@line 144 "lstring.c"
      var $28=HEAP8[($currentwhite)]; //@line 144 "lstring.c"
      var $conv11=(($28)&255); //@line 144 "lstring.c"
      var $xor12=$conv11 ^ 3; //@line 144 "lstring.c"
      var $and13=$xor & $xor12; //@line 144 "lstring.c"
      var $tobool=(($and13)|0)!=0; //@line 144 "lstring.c"
      if ($tobool) { label = 9; break; } else { label = 8; break; } //@line 144 "lstring.c"
    case 8: 
      var $29=$o; //@line 145 "lstring.c"
      var $gch15=$29; //@line 145 "lstring.c"
      var $marked16=(($gch15+5)|0); //@line 145 "lstring.c"
      var $30=HEAP8[($marked16)]; //@line 145 "lstring.c"
      var $conv17=(($30)&255); //@line 145 "lstring.c"
      var $xor18=$conv17 ^ 3; //@line 145 "lstring.c"
      var $conv19=(($xor18) & 255); //@line 145 "lstring.c"
      HEAP8[($marked16)]=$conv19; //@line 145 "lstring.c"
      label = 9; break; //@line 145 "lstring.c"
    case 9: 
      var $31=$ts; //@line 146 "lstring.c"
      $retval=$31; //@line 146 "lstring.c"
      label = 13; break; //@line 146 "lstring.c"
    case 10: 
      label = 11; break; //@line 148 "lstring.c"
    case 11: 
      var $32=$o; //@line 139 "lstring.c"
      var $gch21=$32; //@line 139 "lstring.c"
      var $next=(($gch21)|0); //@line 139 "lstring.c"
      var $33=HEAP32[(($next)>>2)]; //@line 139 "lstring.c"
      $o=$33; //@line 139 "lstring.c"
      label = 3; break; //@line 139 "lstring.c"
    case 12: 
      var $34=$L_addr; //@line 149 "lstring.c"
      var $35=$str_addr; //@line 149 "lstring.c"
      var $36=$l_addr; //@line 149 "lstring.c"
      var $37=$h; //@line 149 "lstring.c"
      var $call22=__ZL9newshrstrP9lua_StatePKcjj($34, $35, $36, $37); //@line 149 "lstring.c"
      $retval=$call22; //@line 149 "lstring.c"
      label = 13; break; //@line 149 "lstring.c"
    case 13: 
      var $38=$retval; //@line 150 "lstring.c"

      return $38; //@line 150 "lstring.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL12internshrstrP9lua_StatePKcj["X"]=1;

function __Z11luaS_resizeP9lua_Statei($L, $newsize) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $newsize_addr;
      var $i;
      var $tb;
      var $p;
      var $next;
      var $h;
      $L_addr=$L;
      $newsize_addr=$newsize;
      var $0=$L_addr; //@line 66 "lstring.c"
      var $l_G=(($0+12)|0); //@line 66 "lstring.c"
      var $1=HEAP32[(($l_G)>>2)]; //@line 66 "lstring.c"
      var $strt=(($1+24)|0); //@line 66 "lstring.c"
      $tb=$strt; //@line 66 "lstring.c"
      var $2=$L_addr; //@line 68 "lstring.c"
      __Z16luaC_runtilstateP9lua_Statei($2, -5); //@line 68 "lstring.c"
      var $3=$newsize_addr; //@line 69 "lstring.c"
      var $4=$tb; //@line 69 "lstring.c"
      var $size=(($4+8)|0); //@line 69 "lstring.c"
      var $5=HEAP32[(($size)>>2)]; //@line 69 "lstring.c"
      var $cmp=(($3)|0) > (($5)|0); //@line 69 "lstring.c"
      if ($cmp) { label = 3; break; } else { label = 11; break; } //@line 69 "lstring.c"
    case 3: 
      var $6=$newsize_addr; //@line 70 "lstring.c"
      var $add=((($6)+(1))|0); //@line 70 "lstring.c"
      var $cmp1=(($add)>>>0) > 1073741823; //@line 70 "lstring.c"
      if ($cmp1) { label = 4; break; } else { label = 5; break; } //@line 70 "lstring.c"
    case 4: 
      var $7=$L_addr; //@line 70 "lstring.c"
      __Z11luaM_toobigP9lua_State($7); //@line 70 "lstring.c"
      throw "Reached an unreachable!" //@line 70 "lstring.c"
      label = 6; break; //@line 70 "lstring.c"
    case 5: 
      var $9=$L_addr; //@line 70 "lstring.c"
      var $10=$tb; //@line 70 "lstring.c"
      var $hash=(($10)|0); //@line 70 "lstring.c"
      var $11=HEAP32[(($hash)>>2)]; //@line 70 "lstring.c"
      var $12=$11; //@line 70 "lstring.c"
      var $13=$tb; //@line 70 "lstring.c"
      var $size2=(($13+8)|0); //@line 70 "lstring.c"
      var $14=HEAP32[(($size2)>>2)]; //@line 70 "lstring.c"
      var $mul=($14<<2); //@line 70 "lstring.c"
      var $15=$newsize_addr; //@line 70 "lstring.c"
      var $mul3=($15<<2); //@line 70 "lstring.c"
      var $call=__Z13luaM_realloc_P9lua_StatePvjj($9, $12, $mul, $mul3); //@line 70 "lstring.c"
      var $cond = $call;label = 6; break; //@line 70 "lstring.c"
    case 6: 
      var $cond; //@line 70 "lstring.c"
      var $16=$cond; //@line 70 "lstring.c"
      var $17=$tb; //@line 70 "lstring.c"
      var $hash4=(($17)|0); //@line 70 "lstring.c"
      HEAP32[(($hash4)>>2)]=$16; //@line 70 "lstring.c"
      var $18=$tb; //@line 71 "lstring.c"
      var $size5=(($18+8)|0); //@line 71 "lstring.c"
      var $19=HEAP32[(($size5)>>2)]; //@line 71 "lstring.c"
      $i=$19; //@line 71 "lstring.c"
      label = 7; break; //@line 71 "lstring.c"
    case 7: 
      var $20=$i; //@line 71 "lstring.c"
      var $21=$newsize_addr; //@line 71 "lstring.c"
      var $cmp6=(($20)|0) < (($21)|0); //@line 71 "lstring.c"
      if ($cmp6) { label = 8; break; } else { label = 10; break; } //@line 71 "lstring.c"
    case 8: 
      var $22=$i; //@line 71 "lstring.c"
      var $23=$tb; //@line 71 "lstring.c"
      var $hash7=(($23)|0); //@line 71 "lstring.c"
      var $24=HEAP32[(($hash7)>>2)]; //@line 71 "lstring.c"
      var $arrayidx=(($24+($22<<2))|0); //@line 71 "lstring.c"
      HEAP32[(($arrayidx)>>2)]=0; //@line 71 "lstring.c"
      label = 9; break; //@line 71 "lstring.c"
    case 9: 
      var $25=$i; //@line 71 "lstring.c"
      var $inc=((($25)+(1))|0); //@line 71 "lstring.c"
      $i=$inc; //@line 71 "lstring.c"
      label = 7; break; //@line 71 "lstring.c"
    case 10: 
      label = 11; break; //@line 72 "lstring.c"
    case 11: 
      $i=0; //@line 74 "lstring.c"
      label = 12; break; //@line 74 "lstring.c"
    case 12: 
      var $26=$i; //@line 74 "lstring.c"
      var $27=$tb; //@line 74 "lstring.c"
      var $size9=(($27+8)|0); //@line 74 "lstring.c"
      var $28=HEAP32[(($size9)>>2)]; //@line 74 "lstring.c"
      var $cmp10=(($26)|0) < (($28)|0); //@line 74 "lstring.c"
      if ($cmp10) { label = 13; break; } else { label = 18; break; } //@line 74 "lstring.c"
    case 13: 
      var $29=$i; //@line 75 "lstring.c"
      var $30=$tb; //@line 75 "lstring.c"
      var $hash12=(($30)|0); //@line 75 "lstring.c"
      var $31=HEAP32[(($hash12)>>2)]; //@line 75 "lstring.c"
      var $arrayidx13=(($31+($29<<2))|0); //@line 75 "lstring.c"
      var $32=HEAP32[(($arrayidx13)>>2)]; //@line 75 "lstring.c"
      $p=$32; //@line 75 "lstring.c"
      var $33=$i; //@line 76 "lstring.c"
      var $34=$tb; //@line 76 "lstring.c"
      var $hash14=(($34)|0); //@line 76 "lstring.c"
      var $35=HEAP32[(($hash14)>>2)]; //@line 76 "lstring.c"
      var $arrayidx15=(($35+($33<<2))|0); //@line 76 "lstring.c"
      HEAP32[(($arrayidx15)>>2)]=0; //@line 76 "lstring.c"
      label = 14; break; //@line 77 "lstring.c"
    case 14: 
      var $36=$p; //@line 77 "lstring.c"
      var $tobool=(($36)|0)!=0; //@line 77 "lstring.c"
      if ($tobool) { label = 15; break; } else { label = 16; break; } //@line 77 "lstring.c"
    case 15: 
      var $37=$p; //@line 78 "lstring.c"
      var $gch=$37; //@line 78 "lstring.c"
      var $next16=(($gch)|0); //@line 78 "lstring.c"
      var $38=HEAP32[(($next16)>>2)]; //@line 78 "lstring.c"
      $next=$38; //@line 78 "lstring.c"
      var $39=$p; //@line 79 "lstring.c"
      var $ts=$39; //@line 79 "lstring.c"
      var $tsv=$ts; //@line 79 "lstring.c"
      var $hash17=(($tsv+8)|0); //@line 79 "lstring.c"
      var $40=HEAP32[(($hash17)>>2)]; //@line 79 "lstring.c"
      var $41=$newsize_addr; //@line 79 "lstring.c"
      var $sub=((($41)-(1))|0); //@line 79 "lstring.c"
      var $and=$40 & $sub; //@line 79 "lstring.c"
      $h=$and; //@line 79 "lstring.c"
      var $42=$h; //@line 80 "lstring.c"
      var $43=$tb; //@line 80 "lstring.c"
      var $hash18=(($43)|0); //@line 80 "lstring.c"
      var $44=HEAP32[(($hash18)>>2)]; //@line 80 "lstring.c"
      var $arrayidx19=(($44+($42<<2))|0); //@line 80 "lstring.c"
      var $45=HEAP32[(($arrayidx19)>>2)]; //@line 80 "lstring.c"
      var $46=$p; //@line 80 "lstring.c"
      var $gch20=$46; //@line 80 "lstring.c"
      var $next21=(($gch20)|0); //@line 80 "lstring.c"
      HEAP32[(($next21)>>2)]=$45; //@line 80 "lstring.c"
      var $47=$p; //@line 81 "lstring.c"
      var $48=$h; //@line 81 "lstring.c"
      var $49=$tb; //@line 81 "lstring.c"
      var $hash22=(($49)|0); //@line 81 "lstring.c"
      var $50=HEAP32[(($hash22)>>2)]; //@line 81 "lstring.c"
      var $arrayidx23=(($50+($48<<2))|0); //@line 81 "lstring.c"
      HEAP32[(($arrayidx23)>>2)]=$47; //@line 81 "lstring.c"
      var $51=$p; //@line 82 "lstring.c"
      var $gch24=$51; //@line 82 "lstring.c"
      var $marked=(($gch24+5)|0); //@line 82 "lstring.c"
      var $52=HEAP8[($marked)]; //@line 82 "lstring.c"
      var $conv=(($52)&255); //@line 82 "lstring.c"
      var $and25=$conv & 191; //@line 82 "lstring.c"
      var $conv26=(($and25) & 255); //@line 82 "lstring.c"
      HEAP8[($marked)]=$conv26; //@line 82 "lstring.c"
      var $53=$next; //@line 83 "lstring.c"
      $p=$53; //@line 83 "lstring.c"
      label = 14; break; //@line 84 "lstring.c"
    case 16: 
      label = 17; break; //@line 85 "lstring.c"
    case 17: 
      var $54=$i; //@line 74 "lstring.c"
      var $inc28=((($54)+(1))|0); //@line 74 "lstring.c"
      $i=$inc28; //@line 74 "lstring.c"
      label = 12; break; //@line 74 "lstring.c"
    case 18: 
      var $55=$newsize_addr; //@line 86 "lstring.c"
      var $56=$tb; //@line 86 "lstring.c"
      var $size30=(($56+8)|0); //@line 86 "lstring.c"
      var $57=HEAP32[(($size30)>>2)]; //@line 86 "lstring.c"
      var $cmp31=(($55)|0) < (($57)|0); //@line 86 "lstring.c"
      if ($cmp31) { label = 19; break; } else { label = 23; break; } //@line 86 "lstring.c"
    case 19: 
      var $58=$newsize_addr; //@line 89 "lstring.c"
      var $add33=((($58)+(1))|0); //@line 89 "lstring.c"
      var $cmp34=(($add33)>>>0) > 1073741823; //@line 89 "lstring.c"
      if ($cmp34) { label = 20; break; } else { label = 21; break; } //@line 89 "lstring.c"
    case 20: 
      var $59=$L_addr; //@line 89 "lstring.c"
      __Z11luaM_toobigP9lua_State($59); //@line 89 "lstring.c"
      throw "Reached an unreachable!" //@line 89 "lstring.c"
      label = 22; break; //@line 89 "lstring.c"
    case 21: 
      var $61=$L_addr; //@line 89 "lstring.c"
      var $62=$tb; //@line 89 "lstring.c"
      var $hash37=(($62)|0); //@line 89 "lstring.c"
      var $63=HEAP32[(($hash37)>>2)]; //@line 89 "lstring.c"
      var $64=$63; //@line 89 "lstring.c"
      var $65=$tb; //@line 89 "lstring.c"
      var $size38=(($65+8)|0); //@line 89 "lstring.c"
      var $66=HEAP32[(($size38)>>2)]; //@line 89 "lstring.c"
      var $mul39=($66<<2); //@line 89 "lstring.c"
      var $67=$newsize_addr; //@line 89 "lstring.c"
      var $mul40=($67<<2); //@line 89 "lstring.c"
      var $call41=__Z13luaM_realloc_P9lua_StatePvjj($61, $64, $mul39, $mul40); //@line 89 "lstring.c"
      var $cond43 = $call41;label = 22; break; //@line 89 "lstring.c"
    case 22: 
      var $cond43; //@line 89 "lstring.c"
      var $68=$cond43; //@line 89 "lstring.c"
      var $69=$tb; //@line 89 "lstring.c"
      var $hash44=(($69)|0); //@line 89 "lstring.c"
      HEAP32[(($hash44)>>2)]=$68; //@line 89 "lstring.c"
      label = 23; break; //@line 90 "lstring.c"
    case 23: 
      var $70=$newsize_addr; //@line 91 "lstring.c"
      var $71=$tb; //@line 91 "lstring.c"
      var $size46=(($71+8)|0); //@line 91 "lstring.c"
      HEAP32[(($size46)>>2)]=$70; //@line 91 "lstring.c"

      return; //@line 92 "lstring.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z11luaS_resizeP9lua_Statei["X"]=1;

function __Z12luaS_newlstrP9lua_StatePKcj($L, $str, $l) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $str_addr;
      var $l_addr;
      $L_addr=$L;
      $str_addr=$str;
      $l_addr=$l;
      var $0=$l_addr; //@line 157 "lstring.c"
      var $cmp=(($0)>>>0) <= 40; //@line 157 "lstring.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 157 "lstring.c"
    case 3: 
      var $1=$L_addr; //@line 158 "lstring.c"
      var $2=$str_addr; //@line 158 "lstring.c"
      var $3=$l_addr; //@line 158 "lstring.c"
      var $call=__ZL12internshrstrP9lua_StatePKcj($1, $2, $3); //@line 158 "lstring.c"
      $retval=$call; //@line 158 "lstring.c"
      label = 7; break; //@line 158 "lstring.c"
    case 4: 
      var $4=$l_addr; //@line 160 "lstring.c"
      var $add=((($4)+(1))|0); //@line 160 "lstring.c"
      var $cmp1=(($add)>>>0) > 4294967277; //@line 160 "lstring.c"
      if ($cmp1) { label = 5; break; } else { label = 6; break; } //@line 160 "lstring.c"
    case 5: 
      var $5=$L_addr; //@line 161 "lstring.c"
      __Z11luaM_toobigP9lua_State($5); //@line 161 "lstring.c"
      throw "Reached an unreachable!" //@line 161 "lstring.c"
    case 6: 
      var $6=$L_addr; //@line 162 "lstring.c"
      var $7=$str_addr; //@line 162 "lstring.c"
      var $8=$l_addr; //@line 162 "lstring.c"
      var $9=$L_addr; //@line 162 "lstring.c"
      var $l_G=(($9+12)|0); //@line 162 "lstring.c"
      var $10=HEAP32[(($l_G)>>2)]; //@line 162 "lstring.c"
      var $seed=(($10+48)|0); //@line 162 "lstring.c"
      var $11=HEAP32[(($seed)>>2)]; //@line 162 "lstring.c"
      var $call3=__ZL12createstrobjP9lua_StatePKcjijPP8GCObject($6, $7, $8, 20, $11, 0); //@line 162 "lstring.c"
      $retval=$call3; //@line 162 "lstring.c"
      label = 7; break; //@line 162 "lstring.c"
    case 7: 
      var $12=$retval; //@line 164 "lstring.c"

      return $12; //@line 164 "lstring.c"
    default: assert(0, "bad label: " + label);
  }

}


function __ZL12createstrobjP9lua_StatePKcjijPP8GCObject($L, $str, $l, $tag, $h, $list) {
  var label = 0;


  var $L_addr;
  var $str_addr;
  var $l_addr;
  var $tag_addr;
  var $h_addr;
  var $list_addr;
  var $ts;
  var $totalsize;
  $L_addr=$L;
  $str_addr=$str;
  $l_addr=$l;
  $tag_addr=$tag;
  $h_addr=$h;
  $list_addr=$list;
  var $0=$l_addr; //@line 102 "lstring.c"
  var $add=((($0)+(1))|0); //@line 102 "lstring.c"
  var $mul=$add; //@line 102 "lstring.c"
  var $add1=((($mul)+(16))|0); //@line 102 "lstring.c"
  $totalsize=$add1; //@line 102 "lstring.c"
  var $1=$L_addr; //@line 103 "lstring.c"
  var $2=$tag_addr; //@line 103 "lstring.c"
  var $3=$totalsize; //@line 103 "lstring.c"
  var $4=$list_addr; //@line 103 "lstring.c"
  var $call=__Z11luaC_newobjP9lua_StateijPP8GCObjecti($1, $2, $3, $4, 0); //@line 103 "lstring.c"
  var $ts2=$call; //@line 103 "lstring.c"
  $ts=$ts2; //@line 103 "lstring.c"
  var $5=$l_addr; //@line 104 "lstring.c"
  var $6=$ts; //@line 104 "lstring.c"
  var $tsv=$6; //@line 104 "lstring.c"
  var $len=(($tsv+12)|0); //@line 104 "lstring.c"
  HEAP32[(($len)>>2)]=$5; //@line 104 "lstring.c"
  var $7=$h_addr; //@line 105 "lstring.c"
  var $8=$ts; //@line 105 "lstring.c"
  var $tsv3=$8; //@line 105 "lstring.c"
  var $hash=(($tsv3+8)|0); //@line 105 "lstring.c"
  HEAP32[(($hash)>>2)]=$7; //@line 105 "lstring.c"
  var $9=$ts; //@line 106 "lstring.c"
  var $tsv4=$9; //@line 106 "lstring.c"
  var $extra=(($tsv4+6)|0); //@line 106 "lstring.c"
  HEAP8[($extra)]=0; //@line 106 "lstring.c"
  var $10=$ts; //@line 107 "lstring.c"
  var $add_ptr=(($10+16)|0); //@line 107 "lstring.c"
  var $11=$add_ptr; //@line 107 "lstring.c"
  var $12=$str_addr; //@line 107 "lstring.c"
  var $13=$l_addr; //@line 107 "lstring.c"
  var $mul5=$13; //@line 107 "lstring.c"
  assert($mul5 % 1 === 0);_memcpy($11, $12, $mul5); //@line 107 "lstring.c"
  var $14=$l_addr; //@line 108 "lstring.c"
  var $15=$ts; //@line 108 "lstring.c"
  var $add_ptr6=(($15+16)|0); //@line 108 "lstring.c"
  var $16=$add_ptr6; //@line 108 "lstring.c"
  var $arrayidx=(($16+$14)|0); //@line 108 "lstring.c"
  HEAP8[($arrayidx)]=0; //@line 108 "lstring.c"
  var $17=$ts; //@line 109 "lstring.c"

  return $17; //@line 109 "lstring.c"
}
__ZL12createstrobjP9lua_StatePKcjijPP8GCObject["X"]=1;

function __ZL9newshrstrP9lua_StatePKcjj($L, $str, $l, $h) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $str_addr;
      var $l_addr;
      var $h_addr;
      var $list;
      var $tb;
      var $s;
      $L_addr=$L;
      $str_addr=$str;
      $l_addr=$l;
      $h_addr=$h;
      var $0=$L_addr; //@line 119 "lstring.c"
      var $l_G=(($0+12)|0); //@line 119 "lstring.c"
      var $1=HEAP32[(($l_G)>>2)]; //@line 119 "lstring.c"
      var $strt=(($1+24)|0); //@line 119 "lstring.c"
      $tb=$strt; //@line 119 "lstring.c"
      var $2=$tb; //@line 121 "lstring.c"
      var $nuse=(($2+4)|0); //@line 121 "lstring.c"
      var $3=HEAP32[(($nuse)>>2)]; //@line 121 "lstring.c"
      var $4=$tb; //@line 121 "lstring.c"
      var $size=(($4+8)|0); //@line 121 "lstring.c"
      var $5=HEAP32[(($size)>>2)]; //@line 121 "lstring.c"
      var $cmp=(($3)>>>0) >= (($5)>>>0); //@line 121 "lstring.c"
      if ($cmp) { label = 3; break; } else { label = 5; break; } //@line 121 "lstring.c"
    case 3: 
      var $6=$tb; //@line 121 "lstring.c"
      var $size1=(($6+8)|0); //@line 121 "lstring.c"
      var $7=HEAP32[(($size1)>>2)]; //@line 121 "lstring.c"
      var $cmp2=(($7)|0) <= 1073741822; //@line 121 "lstring.c"
      if ($cmp2) { label = 4; break; } else { label = 5; break; } //@line 121 "lstring.c"
    case 4: 
      var $8=$L_addr; //@line 122 "lstring.c"
      var $9=$tb; //@line 122 "lstring.c"
      var $size3=(($9+8)|0); //@line 122 "lstring.c"
      var $10=HEAP32[(($size3)>>2)]; //@line 122 "lstring.c"
      var $mul=($10<<1); //@line 122 "lstring.c"
      __Z11luaS_resizeP9lua_Statei($8, $mul); //@line 122 "lstring.c"
      label = 5; break; //@line 122 "lstring.c"
    case 5: 
      var $11=$h_addr; //@line 123 "lstring.c"
      var $12=$tb; //@line 123 "lstring.c"
      var $size4=(($12+8)|0); //@line 123 "lstring.c"
      var $13=HEAP32[(($size4)>>2)]; //@line 123 "lstring.c"
      var $sub=((($13)-(1))|0); //@line 123 "lstring.c"
      var $and=$11 & $sub; //@line 123 "lstring.c"
      var $14=$tb; //@line 123 "lstring.c"
      var $hash=(($14)|0); //@line 123 "lstring.c"
      var $15=HEAP32[(($hash)>>2)]; //@line 123 "lstring.c"
      var $arrayidx=(($15+($and<<2))|0); //@line 123 "lstring.c"
      $list=$arrayidx; //@line 123 "lstring.c"
      var $16=$L_addr; //@line 124 "lstring.c"
      var $17=$str_addr; //@line 124 "lstring.c"
      var $18=$l_addr; //@line 124 "lstring.c"
      var $19=$h_addr; //@line 124 "lstring.c"
      var $20=$list; //@line 124 "lstring.c"
      var $call=__ZL12createstrobjP9lua_StatePKcjijPP8GCObject($16, $17, $18, 4, $19, $20); //@line 124 "lstring.c"
      $s=$call; //@line 124 "lstring.c"
      var $21=$tb; //@line 125 "lstring.c"
      var $nuse5=(($21+4)|0); //@line 125 "lstring.c"
      var $22=HEAP32[(($nuse5)>>2)]; //@line 125 "lstring.c"
      var $inc=((($22)+(1))|0); //@line 125 "lstring.c"
      HEAP32[(($nuse5)>>2)]=$inc; //@line 125 "lstring.c"
      var $23=$s; //@line 126 "lstring.c"

      return $23; //@line 126 "lstring.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL9newshrstrP9lua_StatePKcjj["X"]=1;

function __Z11luaH_setintP9lua_StateP5TableiP10lua_TValue($L, $t, $key, $value) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $t_addr;
      var $key_addr;
      var $value_addr;
      var $p;
      var $cell;
      var $k=__stackBase__;
      var $io;
      var $io2;
      var $io1;
      $L_addr=$L;
      $t_addr=$t;
      $key_addr=$key;
      $value_addr=$value;
      var $0=$t_addr; //@line 519 "ltable.c"
      var $1=$key_addr; //@line 519 "ltable.c"
      var $call=__Z11luaH_getintP5Tablei($0, $1); //@line 519 "ltable.c"
      $p=$call; //@line 519 "ltable.c"
      var $2=$p; //@line 521 "ltable.c"
      var $cmp=(($2)|0)!=5243252; //@line 521 "ltable.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 521 "ltable.c"
    case 3: 
      var $3=$p; //@line 522 "ltable.c"
      $cell=$3; //@line 522 "ltable.c"
      label = 5; break; //@line 522 "ltable.c"
    case 4: 
      $io=$k; //@line 525 "ltable.c"
      var $4=$key_addr; //@line 525 "ltable.c"
      var $conv=(($4)|0); //@line 525 "ltable.c"
      var $5=$io; //@line 525 "ltable.c"
      var $value_=(($5)|0); //@line 525 "ltable.c"
      var $n=$value_; //@line 525 "ltable.c"
      (HEAPF64[(tempDoublePtr)>>3]=$conv,HEAP32[(($n)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); //@line 525 "ltable.c"
      var $6=$io; //@line 525 "ltable.c"
      var $tt_=(($6+8)|0); //@line 525 "ltable.c"
      HEAP32[(($tt_)>>2)]=3; //@line 525 "ltable.c"
      var $7=$L_addr; //@line 526 "ltable.c"
      var $8=$t_addr; //@line 526 "ltable.c"
      var $call1=__Z11luaH_newkeyP9lua_StateP5TablePK10lua_TValue($7, $8, $k); //@line 526 "ltable.c"
      $cell=$call1; //@line 526 "ltable.c"
      label = 5; break;
    case 5: 
      var $9=$value_addr; //@line 528 "ltable.c"
      $io2=$9; //@line 528 "ltable.c"
      var $10=$cell; //@line 528 "ltable.c"
      $io1=$10; //@line 528 "ltable.c"
      var $11=$io1; //@line 528 "ltable.c"
      var $value_2=(($11)|0); //@line 528 "ltable.c"
      var $12=$io2; //@line 528 "ltable.c"
      var $value_3=(($12)|0); //@line 528 "ltable.c"
      var $13=$value_2; //@line 528 "ltable.c"
      var $14=$value_3; //@line 528 "ltable.c"
      assert(8 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)]; //@line 528 "ltable.c"
      var $15=$io2; //@line 528 "ltable.c"
      var $tt_4=(($15+8)|0); //@line 528 "ltable.c"
      var $16=HEAP32[(($tt_4)>>2)]; //@line 528 "ltable.c"
      var $17=$io1; //@line 528 "ltable.c"
      var $tt_5=(($17+8)|0); //@line 528 "ltable.c"
      HEAP32[(($tt_5)>>2)]=$16; //@line 528 "ltable.c"
      STACKTOP = __stackBase__;
      return; //@line 529 "ltable.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z11luaH_setintP9lua_StateP5TableiP10lua_TValue["X"]=1;

function __Z8luaH_setP9lua_StateP5TablePK10lua_TValue($L, $t, $key) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $t_addr;
      var $key_addr;
      var $p;
      $L_addr=$L;
      $t_addr=$t;
      $key_addr=$key;
      var $0=$t_addr; //@line 511 "ltable.c"
      var $1=$key_addr; //@line 511 "ltable.c"
      var $call=__Z8luaH_getP5TablePK10lua_TValue($0, $1); //@line 511 "ltable.c"
      $p=$call; //@line 511 "ltable.c"
      var $2=$p; //@line 512 "ltable.c"
      var $cmp=(($2)|0)!=5243252; //@line 512 "ltable.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 512 "ltable.c"
    case 3: 
      var $3=$p; //@line 513 "ltable.c"
      $retval=$3; //@line 513 "ltable.c"
      label = 5; break; //@line 513 "ltable.c"
    case 4: 
      var $4=$L_addr; //@line 514 "ltable.c"
      var $5=$t_addr; //@line 514 "ltable.c"
      var $6=$key_addr; //@line 514 "ltable.c"
      var $call1=__Z11luaH_newkeyP9lua_StateP5TablePK10lua_TValue($4, $5, $6); //@line 514 "ltable.c"
      $retval=$call1; //@line 514 "ltable.c"
      label = 5; break; //@line 514 "ltable.c"
    case 5: 
      var $7=$retval; //@line 515 "ltable.c"

      return $7; //@line 515 "ltable.c"
    default: assert(0, "bad label: " + label);
  }

}


function __Z16luaH_resizearrayP9lua_StateP5Tablei($L, $t, $nasize) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $t_addr;
      var $nasize_addr;
      var $nsize;
      $L_addr=$L;
      $t_addr=$t;
      $nasize_addr=$nasize;
      var $0=$t_addr; //@line 338 "ltable.c"
      var $node=(($0+16)|0); //@line 338 "ltable.c"
      var $1=HEAP32[(($node)>>2)]; //@line 338 "ltable.c"
      var $cmp=(($1)|0)==5245284; //@line 338 "ltable.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 338 "ltable.c"
    case 3: 
      var $cond = 0;label = 5; break; //@line 338 "ltable.c"
    case 4: 
      var $2=$t_addr; //@line 338 "ltable.c"
      var $lsizenode=(($2+7)|0); //@line 338 "ltable.c"
      var $3=HEAP8[($lsizenode)]; //@line 338 "ltable.c"
      var $conv=(($3)&255); //@line 338 "ltable.c"
      var $shl=1 << $conv; //@line 338 "ltable.c"
      var $cond = $shl;label = 5; break; //@line 338 "ltable.c"
    case 5: 
      var $cond; //@line 338 "ltable.c"
      $nsize=$cond; //@line 338 "ltable.c"
      var $4=$L_addr; //@line 339 "ltable.c"
      var $5=$t_addr; //@line 339 "ltable.c"
      var $6=$nasize_addr; //@line 339 "ltable.c"
      var $7=$nsize; //@line 339 "ltable.c"
      __Z11luaH_resizeP9lua_StateP5Tableii($4, $5, $6, $7); //@line 339 "ltable.c"

      return; //@line 340 "ltable.c"
    default: assert(0, "bad label: " + label);
  }

}


function __Z8luaH_newP9lua_State($L) {
  var label = 0;


  var $L_addr;
  var $t;
  $L_addr=$L;
  var $0=$L_addr; //@line 369 "ltable.c"
  var $call=__Z11luaC_newobjP9lua_StateijPP8GCObjecti($0, 5, 32, 0, 0); //@line 369 "ltable.c"
  var $h=$call; //@line 369 "ltable.c"
  $t=$h; //@line 369 "ltable.c"
  var $1=$t; //@line 370 "ltable.c"
  var $metatable=(($1+8)|0); //@line 370 "ltable.c"
  HEAP32[(($metatable)>>2)]=0; //@line 370 "ltable.c"
  var $2=$t; //@line 371 "ltable.c"
  var $flags=(($2+6)|0); //@line 371 "ltable.c"
  HEAP8[($flags)]=-1; //@line 371 "ltable.c"
  var $3=$t; //@line 372 "ltable.c"
  var $array=(($3+12)|0); //@line 372 "ltable.c"
  HEAP32[(($array)>>2)]=0; //@line 372 "ltable.c"
  var $4=$t; //@line 373 "ltable.c"
  var $sizearray=(($4+28)|0); //@line 373 "ltable.c"
  HEAP32[(($sizearray)>>2)]=0; //@line 373 "ltable.c"
  var $5=$L_addr; //@line 374 "ltable.c"
  var $6=$t; //@line 374 "ltable.c"
  __ZL13setnodevectorP9lua_StateP5Tablei($5, $6, 0); //@line 374 "ltable.c"
  var $7=$t; //@line 375 "ltable.c"

  return $7; //@line 375 "ltable.c"
}


function __Z9luaH_freeP9lua_StateP5Table($L, $t) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $t_addr;
      $L_addr=$L;
      $t_addr=$t;
      var $0=$t_addr; //@line 380 "ltable.c"
      var $node=(($0+16)|0); //@line 380 "ltable.c"
      var $1=HEAP32[(($node)>>2)]; //@line 380 "ltable.c"
      var $cmp=(($1)|0)==5245284; //@line 380 "ltable.c"
      if ($cmp) { label = 4; break; } else { label = 3; break; } //@line 380 "ltable.c"
    case 3: 
      var $2=$L_addr; //@line 381 "ltable.c"
      var $3=$t_addr; //@line 381 "ltable.c"
      var $node1=(($3+16)|0); //@line 381 "ltable.c"
      var $4=HEAP32[(($node1)>>2)]; //@line 381 "ltable.c"
      var $5=$4; //@line 381 "ltable.c"
      var $6=$t_addr; //@line 381 "ltable.c"
      var $lsizenode=(($6+7)|0); //@line 381 "ltable.c"
      var $7=HEAP8[($lsizenode)]; //@line 381 "ltable.c"
      var $conv=(($7)&255); //@line 381 "ltable.c"
      var $shl=1 << $conv; //@line 381 "ltable.c"
      var $mul=((($shl)*(28))&-1); //@line 381 "ltable.c"
      var $call=__Z13luaM_realloc_P9lua_StatePvjj($2, $5, $mul, 0); //@line 381 "ltable.c"
      label = 4; break; //@line 381 "ltable.c"
    case 4: 
      var $8=$L_addr; //@line 382 "ltable.c"
      var $9=$t_addr; //@line 382 "ltable.c"
      var $array=(($9+12)|0); //@line 382 "ltable.c"
      var $10=HEAP32[(($array)>>2)]; //@line 382 "ltable.c"
      var $11=$10; //@line 382 "ltable.c"
      var $12=$t_addr; //@line 382 "ltable.c"
      var $sizearray=(($12+28)|0); //@line 382 "ltable.c"
      var $13=HEAP32[(($sizearray)>>2)]; //@line 382 "ltable.c"
      var $mul2=((($13)*(12))&-1); //@line 382 "ltable.c"
      var $call3=__Z13luaM_realloc_P9lua_StatePvjj($8, $11, $mul2, 0); //@line 382 "ltable.c"
      var $14=$L_addr; //@line 383 "ltable.c"
      var $15=$t_addr; //@line 383 "ltable.c"
      var $16=$15; //@line 383 "ltable.c"
      var $call4=__Z13luaM_realloc_P9lua_StatePvjj($14, $16, 32, 0); //@line 383 "ltable.c"

      return; //@line 384 "ltable.c"
    default: assert(0, "bad label: " + label);
  }

}


function __Z11luaH_resizeP9lua_StateP5Tableii($L, $t, $nasize, $nhsize) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $t_addr;
      var $nasize_addr;
      var $nhsize_addr;
      var $i;
      var $oldasize;
      var $oldhsize;
      var $nold;
      var $old;
      var $io2;
      var $io1;
      $L_addr=$L;
      $t_addr=$t;
      $nasize_addr=$nasize;
      $nhsize_addr=$nhsize;
      var $0=$t_addr; //@line 306 "ltable.c"
      var $sizearray=(($0+28)|0); //@line 306 "ltable.c"
      var $1=HEAP32[(($sizearray)>>2)]; //@line 306 "ltable.c"
      $oldasize=$1; //@line 306 "ltable.c"
      var $2=$t_addr; //@line 307 "ltable.c"
      var $lsizenode=(($2+7)|0); //@line 307 "ltable.c"
      var $3=HEAP8[($lsizenode)]; //@line 307 "ltable.c"
      var $conv=(($3)&255); //@line 307 "ltable.c"
      $oldhsize=$conv; //@line 307 "ltable.c"
      var $4=$t_addr; //@line 308 "ltable.c"
      var $node=(($4+16)|0); //@line 308 "ltable.c"
      var $5=HEAP32[(($node)>>2)]; //@line 308 "ltable.c"
      $nold=$5; //@line 308 "ltable.c"
      var $6=$nasize_addr; //@line 309 "ltable.c"
      var $7=$oldasize; //@line 309 "ltable.c"
      var $cmp=(($6)|0) > (($7)|0); //@line 309 "ltable.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 309 "ltable.c"
    case 3: 
      var $8=$L_addr; //@line 310 "ltable.c"
      var $9=$t_addr; //@line 310 "ltable.c"
      var $10=$nasize_addr; //@line 310 "ltable.c"
      __ZL14setarrayvectorP9lua_StateP5Tablei($8, $9, $10); //@line 310 "ltable.c"
      label = 4; break; //@line 310 "ltable.c"
    case 4: 
      var $11=$L_addr; //@line 312 "ltable.c"
      var $12=$t_addr; //@line 312 "ltable.c"
      var $13=$nhsize_addr; //@line 312 "ltable.c"
      __ZL13setnodevectorP9lua_StateP5Tablei($11, $12, $13); //@line 312 "ltable.c"
      var $14=$nasize_addr; //@line 313 "ltable.c"
      var $15=$oldasize; //@line 313 "ltable.c"
      var $cmp1=(($14)|0) < (($15)|0); //@line 313 "ltable.c"
      if ($cmp1) { label = 5; break; } else { label = 15; break; } //@line 313 "ltable.c"
    case 5: 
      var $16=$nasize_addr; //@line 314 "ltable.c"
      var $17=$t_addr; //@line 314 "ltable.c"
      var $sizearray3=(($17+28)|0); //@line 314 "ltable.c"
      HEAP32[(($sizearray3)>>2)]=$16; //@line 314 "ltable.c"
      var $18=$nasize_addr; //@line 316 "ltable.c"
      $i=$18; //@line 316 "ltable.c"
      label = 6; break; //@line 316 "ltable.c"
    case 6: 
      var $19=$i; //@line 316 "ltable.c"
      var $20=$oldasize; //@line 316 "ltable.c"
      var $cmp4=(($19)|0) < (($20)|0); //@line 316 "ltable.c"
      if ($cmp4) { label = 7; break; } else { label = 11; break; } //@line 316 "ltable.c"
    case 7: 
      var $21=$i; //@line 317 "ltable.c"
      var $22=$t_addr; //@line 317 "ltable.c"
      var $array=(($22+12)|0); //@line 317 "ltable.c"
      var $23=HEAP32[(($array)>>2)]; //@line 317 "ltable.c"
      var $arrayidx=(($23+((($21)*(12))&-1))|0); //@line 317 "ltable.c"
      var $tt_=(($arrayidx+8)|0); //@line 317 "ltable.c"
      var $24=HEAP32[(($tt_)>>2)]; //@line 317 "ltable.c"
      var $cmp5=(($24)|0)==0; //@line 317 "ltable.c"
      if ($cmp5) { label = 9; break; } else { label = 8; break; } //@line 317 "ltable.c"
    case 8: 
      var $25=$L_addr; //@line 318 "ltable.c"
      var $26=$t_addr; //@line 318 "ltable.c"
      var $27=$i; //@line 318 "ltable.c"
      var $add=((($27)+(1))|0); //@line 318 "ltable.c"
      var $28=$i; //@line 318 "ltable.c"
      var $29=$t_addr; //@line 318 "ltable.c"
      var $array7=(($29+12)|0); //@line 318 "ltable.c"
      var $30=HEAP32[(($array7)>>2)]; //@line 318 "ltable.c"
      var $arrayidx8=(($30+((($28)*(12))&-1))|0); //@line 318 "ltable.c"
      __Z11luaH_setintP9lua_StateP5TableiP10lua_TValue($25, $26, $add, $arrayidx8); //@line 318 "ltable.c"
      label = 9; break; //@line 318 "ltable.c"
    case 9: 
      label = 10; break; //@line 319 "ltable.c"
    case 10: 
      var $31=$i; //@line 316 "ltable.c"
      var $inc=((($31)+(1))|0); //@line 316 "ltable.c"
      $i=$inc; //@line 316 "ltable.c"
      label = 6; break; //@line 316 "ltable.c"
    case 11: 
      var $32=$nasize_addr; //@line 321 "ltable.c"
      var $add10=((($32)+(1))|0); //@line 321 "ltable.c"
      var $cmp11=(($add10)>>>0) > 357913941; //@line 321 "ltable.c"
      if ($cmp11) { label = 12; break; } else { label = 13; break; } //@line 321 "ltable.c"
    case 12: 
      var $33=$L_addr; //@line 321 "ltable.c"
      __Z11luaM_toobigP9lua_State($33); //@line 321 "ltable.c"
      throw "Reached an unreachable!" //@line 321 "ltable.c"
      label = 14; break; //@line 321 "ltable.c"
    case 13: 
      var $35=$L_addr; //@line 321 "ltable.c"
      var $36=$t_addr; //@line 321 "ltable.c"
      var $array12=(($36+12)|0); //@line 321 "ltable.c"
      var $37=HEAP32[(($array12)>>2)]; //@line 321 "ltable.c"
      var $38=$37; //@line 321 "ltable.c"
      var $39=$oldasize; //@line 321 "ltable.c"
      var $mul=((($39)*(12))&-1); //@line 321 "ltable.c"
      var $40=$nasize_addr; //@line 321 "ltable.c"
      var $mul13=((($40)*(12))&-1); //@line 321 "ltable.c"
      var $call=__Z13luaM_realloc_P9lua_StatePvjj($35, $38, $mul, $mul13); //@line 321 "ltable.c"
      var $cond = $call;label = 14; break; //@line 321 "ltable.c"
    case 14: 
      var $cond; //@line 321 "ltable.c"
      var $41=$cond; //@line 321 "ltable.c"
      var $42=$t_addr; //@line 321 "ltable.c"
      var $array14=(($42+12)|0); //@line 321 "ltable.c"
      HEAP32[(($array14)>>2)]=$41; //@line 321 "ltable.c"
      label = 15; break; //@line 322 "ltable.c"
    case 15: 
      var $43=$oldhsize; //@line 324 "ltable.c"
      var $shl=1 << $43; //@line 324 "ltable.c"
      var $sub=((($shl)-(1))|0); //@line 324 "ltable.c"
      $i=$sub; //@line 324 "ltable.c"
      label = 16; break; //@line 324 "ltable.c"
    case 16: 
      var $44=$i; //@line 324 "ltable.c"
      var $cmp17=(($44)|0) >= 0; //@line 324 "ltable.c"
      if ($cmp17) { label = 17; break; } else { label = 21; break; } //@line 324 "ltable.c"
    case 17: 
      var $45=$nold; //@line 325 "ltable.c"
      var $46=$i; //@line 325 "ltable.c"
      var $add_ptr=(($45+((($46)*(28))&-1))|0); //@line 325 "ltable.c"
      $old=$add_ptr; //@line 325 "ltable.c"
      var $47=$old; //@line 326 "ltable.c"
      var $i_val=(($47)|0); //@line 326 "ltable.c"
      var $tt_19=(($i_val+8)|0); //@line 326 "ltable.c"
      var $48=HEAP32[(($tt_19)>>2)]; //@line 326 "ltable.c"
      var $cmp20=(($48)|0)==0; //@line 326 "ltable.c"
      if ($cmp20) { label = 19; break; } else { label = 18; break; } //@line 326 "ltable.c"
    case 18: 
      var $49=$old; //@line 329 "ltable.c"
      var $i_val22=(($49)|0); //@line 329 "ltable.c"
      $io2=$i_val22; //@line 329 "ltable.c"
      var $50=$L_addr; //@line 329 "ltable.c"
      var $51=$t_addr; //@line 329 "ltable.c"
      var $52=$old; //@line 329 "ltable.c"
      var $i_key=(($52+12)|0); //@line 329 "ltable.c"
      var $tvk=$i_key; //@line 329 "ltable.c"
      var $call23=__Z8luaH_setP9lua_StateP5TablePK10lua_TValue($50, $51, $tvk); //@line 329 "ltable.c"
      $io1=$call23; //@line 329 "ltable.c"
      var $53=$io1; //@line 329 "ltable.c"
      var $value_=(($53)|0); //@line 329 "ltable.c"
      var $54=$io2; //@line 329 "ltable.c"
      var $value_24=(($54)|0); //@line 329 "ltable.c"
      var $55=$value_; //@line 329 "ltable.c"
      var $56=$value_24; //@line 329 "ltable.c"
      assert(8 % 1 === 0);HEAP32[(($55)>>2)]=HEAP32[(($56)>>2)];HEAP32[((($55)+(4))>>2)]=HEAP32[((($56)+(4))>>2)]; //@line 329 "ltable.c"
      var $57=$io2; //@line 329 "ltable.c"
      var $tt_25=(($57+8)|0); //@line 329 "ltable.c"
      var $58=HEAP32[(($tt_25)>>2)]; //@line 329 "ltable.c"
      var $59=$io1; //@line 329 "ltable.c"
      var $tt_26=(($59+8)|0); //@line 329 "ltable.c"
      HEAP32[(($tt_26)>>2)]=$58; //@line 329 "ltable.c"
      label = 19; break; //@line 330 "ltable.c"
    case 19: 
      label = 20; break; //@line 331 "ltable.c"
    case 20: 
      var $60=$i; //@line 324 "ltable.c"
      var $dec=((($60)-(1))|0); //@line 324 "ltable.c"
      $i=$dec; //@line 324 "ltable.c"
      label = 16; break; //@line 324 "ltable.c"
    case 21: 
      var $61=$nold; //@line 332 "ltable.c"
      var $cmp30=(($61)|0)==5245284; //@line 332 "ltable.c"
      if ($cmp30) { label = 23; break; } else { label = 22; break; } //@line 332 "ltable.c"
    case 22: 
      var $62=$L_addr; //@line 333 "ltable.c"
      var $63=$nold; //@line 333 "ltable.c"
      var $64=$63; //@line 333 "ltable.c"
      var $65=$oldhsize; //@line 333 "ltable.c"
      var $shl32=1 << $65; //@line 333 "ltable.c"
      var $mul33=((($shl32)*(28))&-1); //@line 333 "ltable.c"
      var $call34=__Z13luaM_realloc_P9lua_StatePvjj($62, $64, $mul33, 0); //@line 333 "ltable.c"
      label = 23; break; //@line 333 "ltable.c"
    case 23: 

      return; //@line 334 "ltable.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z11luaH_resizeP9lua_StateP5Tableii["X"]=1;

function __ZL14setarrayvectorP9lua_StateP5Tablei($L, $t, $size) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $t_addr;
      var $size_addr;
      var $i;
      $L_addr=$L;
      $t_addr=$t;
      $size_addr=$size;
      var $0=$size_addr; //@line 272 "ltable.c"
      var $add=((($0)+(1))|0); //@line 272 "ltable.c"
      var $cmp=(($add)>>>0) > 357913941; //@line 272 "ltable.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 272 "ltable.c"
    case 3: 
      var $1=$L_addr; //@line 272 "ltable.c"
      __Z11luaM_toobigP9lua_State($1); //@line 272 "ltable.c"
      throw "Reached an unreachable!" //@line 272 "ltable.c"
      label = 5; break; //@line 272 "ltable.c"
    case 4: 
      var $3=$L_addr; //@line 272 "ltable.c"
      var $4=$t_addr; //@line 272 "ltable.c"
      var $array=(($4+12)|0); //@line 272 "ltable.c"
      var $5=HEAP32[(($array)>>2)]; //@line 272 "ltable.c"
      var $6=$5; //@line 272 "ltable.c"
      var $7=$t_addr; //@line 272 "ltable.c"
      var $sizearray=(($7+28)|0); //@line 272 "ltable.c"
      var $8=HEAP32[(($sizearray)>>2)]; //@line 272 "ltable.c"
      var $mul=((($8)*(12))&-1); //@line 272 "ltable.c"
      var $9=$size_addr; //@line 272 "ltable.c"
      var $mul1=((($9)*(12))&-1); //@line 272 "ltable.c"
      var $call=__Z13luaM_realloc_P9lua_StatePvjj($3, $6, $mul, $mul1); //@line 272 "ltable.c"
      var $cond = $call;label = 5; break; //@line 272 "ltable.c"
    case 5: 
      var $cond; //@line 272 "ltable.c"
      var $10=$cond; //@line 272 "ltable.c"
      var $11=$t_addr; //@line 272 "ltable.c"
      var $array2=(($11+12)|0); //@line 272 "ltable.c"
      HEAP32[(($array2)>>2)]=$10; //@line 272 "ltable.c"
      var $12=$t_addr; //@line 273 "ltable.c"
      var $sizearray3=(($12+28)|0); //@line 273 "ltable.c"
      var $13=HEAP32[(($sizearray3)>>2)]; //@line 273 "ltable.c"
      $i=$13; //@line 273 "ltable.c"
      label = 6; break; //@line 273 "ltable.c"
    case 6: 
      var $14=$i; //@line 273 "ltable.c"
      var $15=$size_addr; //@line 273 "ltable.c"
      var $cmp4=(($14)|0) < (($15)|0); //@line 273 "ltable.c"
      if ($cmp4) { label = 7; break; } else { label = 9; break; } //@line 273 "ltable.c"
    case 7: 
      var $16=$i; //@line 274 "ltable.c"
      var $17=$t_addr; //@line 274 "ltable.c"
      var $array5=(($17+12)|0); //@line 274 "ltable.c"
      var $18=HEAP32[(($array5)>>2)]; //@line 274 "ltable.c"
      var $arrayidx=(($18+((($16)*(12))&-1))|0); //@line 274 "ltable.c"
      var $tt_=(($arrayidx+8)|0); //@line 274 "ltable.c"
      HEAP32[(($tt_)>>2)]=0; //@line 274 "ltable.c"
      label = 8; break; //@line 274 "ltable.c"
    case 8: 
      var $19=$i; //@line 273 "ltable.c"
      var $inc=((($19)+(1))|0); //@line 273 "ltable.c"
      $i=$inc; //@line 273 "ltable.c"
      label = 6; break; //@line 273 "ltable.c"
    case 9: 
      var $20=$size_addr; //@line 275 "ltable.c"
      var $21=$t_addr; //@line 275 "ltable.c"
      var $sizearray6=(($21+28)|0); //@line 275 "ltable.c"
      HEAP32[(($sizearray6)>>2)]=$20; //@line 275 "ltable.c"

      return; //@line 276 "ltable.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL14setarrayvectorP9lua_StateP5Tablei["X"]=1;

function __ZL13setnodevectorP9lua_StateP5Tablei($L, $t, $size) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $t_addr;
      var $size_addr;
      var $lsize;
      var $i;
      var $n;
      $L_addr=$L;
      $t_addr=$t;
      $size_addr=$size;
      var $0=$size_addr; //@line 281 "ltable.c"
      var $cmp=(($0)|0)==0; //@line 281 "ltable.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 281 "ltable.c"
    case 3: 
      var $1=$t_addr; //@line 282 "ltable.c"
      var $node=(($1+16)|0); //@line 282 "ltable.c"
      HEAP32[(($node)>>2)]=5245284; //@line 282 "ltable.c"
      $lsize=0; //@line 283 "ltable.c"
      label = 14; break; //@line 284 "ltable.c"
    case 4: 
      var $2=$size_addr; //@line 287 "ltable.c"
      var $call=__Z13luaO_ceillog2j($2); //@line 287 "ltable.c"
      $lsize=$call; //@line 287 "ltable.c"
      var $3=$lsize; //@line 288 "ltable.c"
      var $cmp1=(($3)|0) > 30; //@line 288 "ltable.c"
      if ($cmp1) { label = 5; break; } else { label = 6; break; } //@line 288 "ltable.c"
    case 5: 
      var $4=$L_addr; //@line 289 "ltable.c"
      __Z13luaG_runerrorP9lua_StatePKcz($4, ((5243852)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 289 "ltable.c"
      throw "Reached an unreachable!" //@line 289 "ltable.c"
    case 6: 
      var $5=$lsize; //@line 290 "ltable.c"
      var $shl=1 << $5; //@line 290 "ltable.c"
      $size_addr=$shl; //@line 290 "ltable.c"
      var $6=$size_addr; //@line 291 "ltable.c"
      var $add=((($6)+(1))|0); //@line 291 "ltable.c"
      var $cmp3=(($add)>>>0) > 153391689; //@line 291 "ltable.c"
      if ($cmp3) { label = 7; break; } else { label = 8; break; } //@line 291 "ltable.c"
    case 7: 
      var $7=$L_addr; //@line 291 "ltable.c"
      __Z11luaM_toobigP9lua_State($7); //@line 291 "ltable.c"
      throw "Reached an unreachable!" //@line 291 "ltable.c"
      label = 9; break; //@line 291 "ltable.c"
    case 8: 
      var $9=$L_addr; //@line 291 "ltable.c"
      var $10=$size_addr; //@line 291 "ltable.c"
      var $mul=((($10)*(28))&-1); //@line 291 "ltable.c"
      var $call4=__Z13luaM_realloc_P9lua_StatePvjj($9, 0, 0, $mul); //@line 291 "ltable.c"
      var $cond = $call4;label = 9; break; //@line 291 "ltable.c"
    case 9: 
      var $cond; //@line 291 "ltable.c"
      var $11=$cond; //@line 291 "ltable.c"
      var $12=$t_addr; //@line 291 "ltable.c"
      var $node5=(($12+16)|0); //@line 291 "ltable.c"
      HEAP32[(($node5)>>2)]=$11; //@line 291 "ltable.c"
      $i=0; //@line 292 "ltable.c"
      label = 10; break; //@line 292 "ltable.c"
    case 10: 
      var $13=$i; //@line 292 "ltable.c"
      var $14=$size_addr; //@line 292 "ltable.c"
      var $cmp6=(($13)|0) < (($14)|0); //@line 292 "ltable.c"
      if ($cmp6) { label = 11; break; } else { label = 13; break; } //@line 292 "ltable.c"
    case 11: 
      var $15=$i; //@line 293 "ltable.c"
      var $16=$t_addr; //@line 293 "ltable.c"
      var $node7=(($16+16)|0); //@line 293 "ltable.c"
      var $17=HEAP32[(($node7)>>2)]; //@line 293 "ltable.c"
      var $arrayidx=(($17+((($15)*(28))&-1))|0); //@line 293 "ltable.c"
      $n=$arrayidx; //@line 293 "ltable.c"
      var $18=$n; //@line 294 "ltable.c"
      var $i_key=(($18+12)|0); //@line 294 "ltable.c"
      var $nk=$i_key; //@line 294 "ltable.c"
      var $next=(($nk+12)|0); //@line 294 "ltable.c"
      HEAP32[(($next)>>2)]=0; //@line 294 "ltable.c"
      var $19=$n; //@line 295 "ltable.c"
      var $i_key8=(($19+12)|0); //@line 295 "ltable.c"
      var $tvk=$i_key8; //@line 295 "ltable.c"
      var $tt_=(($tvk+8)|0); //@line 295 "ltable.c"
      HEAP32[(($tt_)>>2)]=0; //@line 295 "ltable.c"
      var $20=$n; //@line 296 "ltable.c"
      var $i_val=(($20)|0); //@line 296 "ltable.c"
      var $tt_9=(($i_val+8)|0); //@line 296 "ltable.c"
      HEAP32[(($tt_9)>>2)]=0; //@line 296 "ltable.c"
      label = 12; break; //@line 297 "ltable.c"
    case 12: 
      var $21=$i; //@line 292 "ltable.c"
      var $inc=((($21)+(1))|0); //@line 292 "ltable.c"
      $i=$inc; //@line 292 "ltable.c"
      label = 10; break; //@line 292 "ltable.c"
    case 13: 
      label = 14; break;
    case 14: 
      var $22=$lsize; //@line 299 "ltable.c"
      var $conv=(($22) & 255); //@line 299 "ltable.c"
      var $23=$t_addr; //@line 299 "ltable.c"
      var $lsizenode=(($23+7)|0); //@line 299 "ltable.c"
      HEAP8[($lsizenode)]=$conv; //@line 299 "ltable.c"
      var $24=$size_addr; //@line 300 "ltable.c"
      var $25=$t_addr; //@line 300 "ltable.c"
      var $node11=(($25+16)|0); //@line 300 "ltable.c"
      var $26=HEAP32[(($node11)>>2)]; //@line 300 "ltable.c"
      var $arrayidx12=(($26+((($24)*(28))&-1))|0); //@line 300 "ltable.c"
      var $27=$t_addr; //@line 300 "ltable.c"
      var $lastfree=(($27+20)|0); //@line 300 "ltable.c"
      HEAP32[(($lastfree)>>2)]=$arrayidx12; //@line 300 "ltable.c"
      STACKTOP = __stackBase__;
      return; //@line 301 "ltable.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL13setnodevectorP9lua_StateP5Tablei["X"]=1;

function __ZL10getfreeposP5Table($t) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $t_addr;
      $t_addr=$t;
      label = 3; break; //@line 388 "ltable.c"
    case 3: 
      var $0=$t_addr; //@line 388 "ltable.c"
      var $lastfree=(($0+20)|0); //@line 388 "ltable.c"
      var $1=HEAP32[(($lastfree)>>2)]; //@line 388 "ltable.c"
      var $2=$t_addr; //@line 388 "ltable.c"
      var $node=(($2+16)|0); //@line 388 "ltable.c"
      var $3=HEAP32[(($node)>>2)]; //@line 388 "ltable.c"
      var $cmp=(($1)>>>0) > (($3)>>>0); //@line 388 "ltable.c"
      if ($cmp) { label = 4; break; } else { label = 7; break; } //@line 388 "ltable.c"
    case 4: 
      var $4=$t_addr; //@line 389 "ltable.c"
      var $lastfree1=(($4+20)|0); //@line 389 "ltable.c"
      var $5=HEAP32[(($lastfree1)>>2)]; //@line 389 "ltable.c"
      var $incdec_ptr=((($5)-(28))|0); //@line 389 "ltable.c"
      HEAP32[(($lastfree1)>>2)]=$incdec_ptr; //@line 389 "ltable.c"
      var $6=$t_addr; //@line 390 "ltable.c"
      var $lastfree2=(($6+20)|0); //@line 390 "ltable.c"
      var $7=HEAP32[(($lastfree2)>>2)]; //@line 390 "ltable.c"
      var $i_key=(($7+12)|0); //@line 390 "ltable.c"
      var $tvk=$i_key; //@line 390 "ltable.c"
      var $tt_=(($tvk+8)|0); //@line 390 "ltable.c"
      var $8=HEAP32[(($tt_)>>2)]; //@line 390 "ltable.c"
      var $cmp3=(($8)|0)==0; //@line 390 "ltable.c"
      if ($cmp3) { label = 5; break; } else { label = 6; break; } //@line 390 "ltable.c"
    case 5: 
      var $9=$t_addr; //@line 391 "ltable.c"
      var $lastfree4=(($9+20)|0); //@line 391 "ltable.c"
      var $10=HEAP32[(($lastfree4)>>2)]; //@line 391 "ltable.c"
      $retval=$10; //@line 391 "ltable.c"
      label = 8; break; //@line 391 "ltable.c"
    case 6: 
      label = 3; break; //@line 392 "ltable.c"
    case 7: 
      $retval=0; //@line 393 "ltable.c"
      label = 8; break; //@line 393 "ltable.c"
    case 8: 
      var $11=$retval; //@line 394 "ltable.c"

      return $11; //@line 394 "ltable.c"
    default: assert(0, "bad label: " + label);
  }

}


function __ZL7hashnumPK5Tabled($t, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $n_addr;
      var $i;
      var $u=__stackBase__;
      $t_addr=$t;
      $n_addr=$n;
      var $0=$n_addr; //@line 82 "ltable.c"
      var $add=($0)+(1); //@line 82 "ltable.c"
      var $l_d=$u; //@line 82 "ltable.c"
      (HEAPF64[(tempDoublePtr)>>3]=$add,HEAP32[(($l_d)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($l_d)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); //@line 82 "ltable.c"
      var $l_p=$u; //@line 82 "ltable.c"
      var $arrayidx=(($l_p)|0); //@line 82 "ltable.c"
      var $1=HEAP32[(($arrayidx)>>2)]; //@line 82 "ltable.c"
      $i=$1; //@line 82 "ltable.c"
      var $l_p1=$u; //@line 82 "ltable.c"
      var $arrayidx2=(($l_p1+4)|0); //@line 82 "ltable.c"
      var $2=HEAP32[(($arrayidx2)>>2)]; //@line 82 "ltable.c"
      var $3=$i; //@line 82 "ltable.c"
      var $add3=((($3)+($2))|0); //@line 82 "ltable.c"
      $i=$add3; //@line 82 "ltable.c"
      var $4=$i; //@line 83 "ltable.c"
      var $cmp=(($4)|0) < 0; //@line 83 "ltable.c"
      if ($cmp) { label = 3; break; } else { label = 6; break; } //@line 83 "ltable.c"
    case 3: 
      var $5=$i; //@line 84 "ltable.c"
      var $6=$i; //@line 84 "ltable.c"
      var $sub=(((-$6))|0); //@line 84 "ltable.c"
      var $cmp4=(($5)|0)==(($sub)|0); //@line 84 "ltable.c"
      if ($cmp4) { label = 4; break; } else { label = 5; break; } //@line 84 "ltable.c"
    case 4: 
      $i=0; //@line 85 "ltable.c"
      label = 5; break; //@line 85 "ltable.c"
    case 5: 
      var $7=$i; //@line 86 "ltable.c"
      var $sub6=(((-$7))|0); //@line 86 "ltable.c"
      $i=$sub6; //@line 86 "ltable.c"
      label = 6; break; //@line 87 "ltable.c"
    case 6: 
      var $8=$i; //@line 88 "ltable.c"
      var $9=$t_addr; //@line 88 "ltable.c"
      var $lsizenode=(($9+7)|0); //@line 88 "ltable.c"
      var $10=HEAP8[($lsizenode)]; //@line 88 "ltable.c"
      var $conv=(($10)&255); //@line 88 "ltable.c"
      var $shl=1 << $conv; //@line 88 "ltable.c"
      var $sub8=((($shl)-(1))|0); //@line 88 "ltable.c"
      var $or=$sub8 | 1; //@line 88 "ltable.c"
      var $rem=((($8)|0))%((($or)|0)); //@line 88 "ltable.c"
      var $11=$t_addr; //@line 88 "ltable.c"
      var $node=(($11+16)|0); //@line 88 "ltable.c"
      var $12=HEAP32[(($node)>>2)]; //@line 88 "ltable.c"
      var $arrayidx9=(($12+((($rem)*(28))&-1))|0); //@line 88 "ltable.c"
      STACKTOP = __stackBase__;
      return $arrayidx9; //@line 88 "ltable.c"
    default: assert(0, "bad label: " + label);
  }

}


function __Z11luaH_getstrP5TableP7TString($t, $key) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $t_addr;
      var $key_addr;
      var $n;
      $t_addr=$t;
      $key_addr=$key;
      var $0=$key_addr; //@line 467 "ltable.c"
      var $tsv=$0; //@line 467 "ltable.c"
      var $hash=(($tsv+8)|0); //@line 467 "ltable.c"
      var $1=HEAP32[(($hash)>>2)]; //@line 467 "ltable.c"
      var $2=$t_addr; //@line 467 "ltable.c"
      var $lsizenode=(($2+7)|0); //@line 467 "ltable.c"
      var $3=HEAP8[($lsizenode)]; //@line 467 "ltable.c"
      var $conv=(($3)&255); //@line 467 "ltable.c"
      var $shl=1 << $conv; //@line 467 "ltable.c"
      var $sub=((($shl)-(1))|0); //@line 467 "ltable.c"
      var $and=$1 & $sub; //@line 467 "ltable.c"
      var $4=$t_addr; //@line 467 "ltable.c"
      var $node=(($4+16)|0); //@line 467 "ltable.c"
      var $5=HEAP32[(($node)>>2)]; //@line 467 "ltable.c"
      var $arrayidx=(($5+((($and)*(28))&-1))|0); //@line 467 "ltable.c"
      $n=$arrayidx; //@line 467 "ltable.c"
      label = 3; break; //@line 469 "ltable.c"
    case 3: 
      var $6=$n; //@line 470 "ltable.c"
      var $i_key=(($6+12)|0); //@line 470 "ltable.c"
      var $tvk=$i_key; //@line 470 "ltable.c"
      var $tt_=(($tvk+8)|0); //@line 470 "ltable.c"
      var $7=HEAP32[(($tt_)>>2)]; //@line 470 "ltable.c"
      var $cmp=(($7)|0)==68; //@line 470 "ltable.c"
      if ($cmp) { label = 4; break; } else { label = 6; break; } //@line 470 "ltable.c"
    case 4: 
      var $8=$n; //@line 470 "ltable.c"
      var $i_key1=(($8+12)|0); //@line 470 "ltable.c"
      var $tvk2=$i_key1; //@line 470 "ltable.c"
      var $value_=(($tvk2)|0); //@line 470 "ltable.c"
      var $gc=$value_; //@line 470 "ltable.c"
      var $9=HEAP32[(($gc)>>2)]; //@line 470 "ltable.c"
      var $ts=$9; //@line 470 "ltable.c"
      var $10=$key_addr; //@line 470 "ltable.c"
      var $cmp3=(($ts)|0)==(($10)|0); //@line 470 "ltable.c"
      if ($cmp3) { label = 5; break; } else { label = 6; break; } //@line 470 "ltable.c"
    case 5: 
      var $11=$n; //@line 471 "ltable.c"
      var $i_val=(($11)|0); //@line 471 "ltable.c"
      $retval=$i_val; //@line 471 "ltable.c"
      label = 10; break; //@line 471 "ltable.c"
    case 6: 
      var $12=$n; //@line 472 "ltable.c"
      var $i_key4=(($12+12)|0); //@line 472 "ltable.c"
      var $nk=$i_key4; //@line 472 "ltable.c"
      var $next=(($nk+12)|0); //@line 472 "ltable.c"
      var $13=HEAP32[(($next)>>2)]; //@line 472 "ltable.c"
      $n=$13; //@line 472 "ltable.c"
      label = 7; break;
    case 7: 
      label = 8; break; //@line 473 "ltable.c"
    case 8: 
      var $14=$n; //@line 473 "ltable.c"
      var $tobool=(($14)|0)!=0; //@line 473 "ltable.c"
      if ($tobool) { label = 3; break; } else { label = 9; break; } //@line 473 "ltable.c"
    case 9: 
      $retval=5243252; //@line 474 "ltable.c"
      label = 10; break; //@line 474 "ltable.c"
    case 10: 
      var $15=$retval; //@line 475 "ltable.c"

      return $15; //@line 475 "ltable.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z11luaH_getstrP5TableP7TString["X"]=1;

function __ZL12mainpositionPK5TablePK10lua_TValue($t, $key) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $t_addr;
      var $key_addr;
      var $s;
      $t_addr=$t;
      $key_addr=$key;
      var $0=$key_addr; //@line 98 "ltable.c"
      var $tt_=(($0+8)|0); //@line 98 "ltable.c"
      var $1=HEAP32[(($tt_)>>2)]; //@line 98 "ltable.c"
      var $and=$1 & 63; //@line 98 "ltable.c"
      if ((($and)|0)==3) {
        label = 3; break;
      }
      else if ((($and)|0)==20) {
        label = 4; break;
      }
      else if ((($and)|0)==4) {
        label = 7; break;
      }
      else if ((($and)|0)==1) {
        label = 8; break;
      }
      else if ((($and)|0)==2) {
        label = 9; break;
      }
      else if ((($and)|0)==22) {
        label = 10; break;
      }
      else {
      label = 11; break;
      }
      
    case 3: 
      var $2=$t_addr; //@line 100 "ltable.c"
      var $3=$key_addr; //@line 100 "ltable.c"
      var $value_=(($3)|0); //@line 100 "ltable.c"
      var $n=$value_; //@line 100 "ltable.c"
      var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 100 "ltable.c"
      var $call=__ZL7hashnumPK5Tabled($2, $4); //@line 100 "ltable.c"
      $retval=$call; //@line 100 "ltable.c"
      label = 12; break; //@line 100 "ltable.c"
    case 4: 
      var $5=$key_addr; //@line 102 "ltable.c"
      var $value_2=(($5)|0); //@line 102 "ltable.c"
      var $gc=$value_2; //@line 102 "ltable.c"
      var $6=HEAP32[(($gc)>>2)]; //@line 102 "ltable.c"
      var $ts=$6; //@line 102 "ltable.c"
      $s=$ts; //@line 102 "ltable.c"
      var $7=$s; //@line 103 "ltable.c"
      var $tsv=$7; //@line 103 "ltable.c"
      var $extra=(($tsv+6)|0); //@line 103 "ltable.c"
      var $8=HEAP8[($extra)]; //@line 103 "ltable.c"
      var $conv=(($8)&255); //@line 103 "ltable.c"
      var $cmp=(($conv)|0)==0; //@line 103 "ltable.c"
      if ($cmp) { label = 5; break; } else { label = 6; break; } //@line 103 "ltable.c"
    case 5: 
      var $9=$s; //@line 104 "ltable.c"
      var $add_ptr=(($9+16)|0); //@line 104 "ltable.c"
      var $10=$add_ptr; //@line 104 "ltable.c"
      var $11=$s; //@line 104 "ltable.c"
      var $tsv3=$11; //@line 104 "ltable.c"
      var $len=(($tsv3+12)|0); //@line 104 "ltable.c"
      var $12=HEAP32[(($len)>>2)]; //@line 104 "ltable.c"
      var $13=$s; //@line 104 "ltable.c"
      var $tsv4=$13; //@line 104 "ltable.c"
      var $hash=(($tsv4+8)|0); //@line 104 "ltable.c"
      var $14=HEAP32[(($hash)>>2)]; //@line 104 "ltable.c"
      var $call5=__Z9luaS_hashPKcjj($10, $12, $14); //@line 104 "ltable.c"
      var $15=$s; //@line 104 "ltable.c"
      var $tsv6=$15; //@line 104 "ltable.c"
      var $hash7=(($tsv6+8)|0); //@line 104 "ltable.c"
      HEAP32[(($hash7)>>2)]=$call5; //@line 104 "ltable.c"
      var $16=$s; //@line 105 "ltable.c"
      var $tsv8=$16; //@line 105 "ltable.c"
      var $extra9=(($tsv8+6)|0); //@line 105 "ltable.c"
      HEAP8[($extra9)]=1; //@line 105 "ltable.c"
      label = 6; break; //@line 106 "ltable.c"
    case 6: 
      var $17=$key_addr; //@line 107 "ltable.c"
      var $value_10=(($17)|0); //@line 107 "ltable.c"
      var $gc11=$value_10; //@line 107 "ltable.c"
      var $18=HEAP32[(($gc11)>>2)]; //@line 107 "ltable.c"
      var $ts12=$18; //@line 107 "ltable.c"
      var $tsv13=$ts12; //@line 107 "ltable.c"
      var $hash14=(($tsv13+8)|0); //@line 107 "ltable.c"
      var $19=HEAP32[(($hash14)>>2)]; //@line 107 "ltable.c"
      var $20=$t_addr; //@line 107 "ltable.c"
      var $lsizenode=(($20+7)|0); //@line 107 "ltable.c"
      var $21=HEAP8[($lsizenode)]; //@line 107 "ltable.c"
      var $conv15=(($21)&255); //@line 107 "ltable.c"
      var $shl=1 << $conv15; //@line 107 "ltable.c"
      var $sub=((($shl)-(1))|0); //@line 107 "ltable.c"
      var $and16=$19 & $sub; //@line 107 "ltable.c"
      var $22=$t_addr; //@line 107 "ltable.c"
      var $node=(($22+16)|0); //@line 107 "ltable.c"
      var $23=HEAP32[(($node)>>2)]; //@line 107 "ltable.c"
      var $arrayidx=(($23+((($and16)*(28))&-1))|0); //@line 107 "ltable.c"
      $retval=$arrayidx; //@line 107 "ltable.c"
      label = 12; break; //@line 107 "ltable.c"
    case 7: 
      var $24=$key_addr; //@line 110 "ltable.c"
      var $value_18=(($24)|0); //@line 110 "ltable.c"
      var $gc19=$value_18; //@line 110 "ltable.c"
      var $25=HEAP32[(($gc19)>>2)]; //@line 110 "ltable.c"
      var $ts20=$25; //@line 110 "ltable.c"
      var $tsv21=$ts20; //@line 110 "ltable.c"
      var $hash22=(($tsv21+8)|0); //@line 110 "ltable.c"
      var $26=HEAP32[(($hash22)>>2)]; //@line 110 "ltable.c"
      var $27=$t_addr; //@line 110 "ltable.c"
      var $lsizenode23=(($27+7)|0); //@line 110 "ltable.c"
      var $28=HEAP8[($lsizenode23)]; //@line 110 "ltable.c"
      var $conv24=(($28)&255); //@line 110 "ltable.c"
      var $shl25=1 << $conv24; //@line 110 "ltable.c"
      var $sub26=((($shl25)-(1))|0); //@line 110 "ltable.c"
      var $and27=$26 & $sub26; //@line 110 "ltable.c"
      var $29=$t_addr; //@line 110 "ltable.c"
      var $node28=(($29+16)|0); //@line 110 "ltable.c"
      var $30=HEAP32[(($node28)>>2)]; //@line 110 "ltable.c"
      var $arrayidx29=(($30+((($and27)*(28))&-1))|0); //@line 110 "ltable.c"
      $retval=$arrayidx29; //@line 110 "ltable.c"
      label = 12; break; //@line 110 "ltable.c"
    case 8: 
      var $31=$key_addr; //@line 112 "ltable.c"
      var $value_31=(($31)|0); //@line 112 "ltable.c"
      var $b=$value_31; //@line 112 "ltable.c"
      var $32=HEAP32[(($b)>>2)]; //@line 112 "ltable.c"
      var $33=$t_addr; //@line 112 "ltable.c"
      var $lsizenode32=(($33+7)|0); //@line 112 "ltable.c"
      var $34=HEAP8[($lsizenode32)]; //@line 112 "ltable.c"
      var $conv33=(($34)&255); //@line 112 "ltable.c"
      var $shl34=1 << $conv33; //@line 112 "ltable.c"
      var $sub35=((($shl34)-(1))|0); //@line 112 "ltable.c"
      var $and36=$32 & $sub35; //@line 112 "ltable.c"
      var $35=$t_addr; //@line 112 "ltable.c"
      var $node37=(($35+16)|0); //@line 112 "ltable.c"
      var $36=HEAP32[(($node37)>>2)]; //@line 112 "ltable.c"
      var $arrayidx38=(($36+((($and36)*(28))&-1))|0); //@line 112 "ltable.c"
      $retval=$arrayidx38; //@line 112 "ltable.c"
      label = 12; break; //@line 112 "ltable.c"
    case 9: 
      var $37=$key_addr; //@line 114 "ltable.c"
      var $value_40=(($37)|0); //@line 114 "ltable.c"
      var $p=$value_40; //@line 114 "ltable.c"
      var $38=HEAP32[(($p)>>2)]; //@line 114 "ltable.c"
      var $39=$38; //@line 114 "ltable.c"
      var $40=$t_addr; //@line 114 "ltable.c"
      var $lsizenode41=(($40+7)|0); //@line 114 "ltable.c"
      var $41=HEAP8[($lsizenode41)]; //@line 114 "ltable.c"
      var $conv42=(($41)&255); //@line 114 "ltable.c"
      var $shl43=1 << $conv42; //@line 114 "ltable.c"
      var $sub44=((($shl43)-(1))|0); //@line 114 "ltable.c"
      var $or=$sub44 | 1; //@line 114 "ltable.c"
      var $rem=((($39)>>>0))%((($or)>>>0)); //@line 114 "ltable.c"
      var $42=$t_addr; //@line 114 "ltable.c"
      var $node45=(($42+16)|0); //@line 114 "ltable.c"
      var $43=HEAP32[(($node45)>>2)]; //@line 114 "ltable.c"
      var $arrayidx46=(($43+((($rem)*(28))&-1))|0); //@line 114 "ltable.c"
      $retval=$arrayidx46; //@line 114 "ltable.c"
      label = 12; break; //@line 114 "ltable.c"
    case 10: 
      var $44=$key_addr; //@line 116 "ltable.c"
      var $value_48=(($44)|0); //@line 116 "ltable.c"
      var $f=$value_48; //@line 116 "ltable.c"
      var $45=HEAP32[(($f)>>2)]; //@line 116 "ltable.c"
      var $46=$45; //@line 116 "ltable.c"
      var $47=$t_addr; //@line 116 "ltable.c"
      var $lsizenode49=(($47+7)|0); //@line 116 "ltable.c"
      var $48=HEAP8[($lsizenode49)]; //@line 116 "ltable.c"
      var $conv50=(($48)&255); //@line 116 "ltable.c"
      var $shl51=1 << $conv50; //@line 116 "ltable.c"
      var $sub52=((($shl51)-(1))|0); //@line 116 "ltable.c"
      var $or53=$sub52 | 1; //@line 116 "ltable.c"
      var $rem54=((($46)>>>0))%((($or53)>>>0)); //@line 116 "ltable.c"
      var $49=$t_addr; //@line 116 "ltable.c"
      var $node55=(($49+16)|0); //@line 116 "ltable.c"
      var $50=HEAP32[(($node55)>>2)]; //@line 116 "ltable.c"
      var $arrayidx56=(($50+((($rem54)*(28))&-1))|0); //@line 116 "ltable.c"
      $retval=$arrayidx56; //@line 116 "ltable.c"
      label = 12; break; //@line 116 "ltable.c"
    case 11: 
      var $51=$key_addr; //@line 118 "ltable.c"
      var $value_57=(($51)|0); //@line 118 "ltable.c"
      var $gc58=$value_57; //@line 118 "ltable.c"
      var $52=HEAP32[(($gc58)>>2)]; //@line 118 "ltable.c"
      var $53=$52; //@line 118 "ltable.c"
      var $54=$t_addr; //@line 118 "ltable.c"
      var $lsizenode59=(($54+7)|0); //@line 118 "ltable.c"
      var $55=HEAP8[($lsizenode59)]; //@line 118 "ltable.c"
      var $conv60=(($55)&255); //@line 118 "ltable.c"
      var $shl61=1 << $conv60; //@line 118 "ltable.c"
      var $sub62=((($shl61)-(1))|0); //@line 118 "ltable.c"
      var $or63=$sub62 | 1; //@line 118 "ltable.c"
      var $rem64=((($53)>>>0))%((($or63)>>>0)); //@line 118 "ltable.c"
      var $56=$t_addr; //@line 118 "ltable.c"
      var $node65=(($56+16)|0); //@line 118 "ltable.c"
      var $57=HEAP32[(($node65)>>2)]; //@line 118 "ltable.c"
      var $arrayidx66=(($57+((($rem64)*(28))&-1))|0); //@line 118 "ltable.c"
      $retval=$arrayidx66; //@line 118 "ltable.c"
      label = 12; break; //@line 118 "ltable.c"
    case 12: 
      var $58=$retval; //@line 120 "ltable.c"

      return $58; //@line 120 "ltable.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL12mainpositionPK5TablePK10lua_TValue["X"]=1;

function __ZL6rehashP9lua_StateP5TablePK10lua_TValue($L, $t, $ek) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $t_addr;
      var $ek_addr;
      var $nasize=__stackBase__;
      var $na;
      var $nums=(__stackBase__)+(4);
      var $i;
      var $totaluse;
      $L_addr=$L;
      $t_addr=$t;
      $ek_addr=$ek;
      $i=0; //@line 348 "ltable.c"
      label = 3; break; //@line 348 "ltable.c"
    case 3: 
      var $0=$i; //@line 348 "ltable.c"
      var $cmp=(($0)|0) <= 30; //@line 348 "ltable.c"
      if ($cmp) { label = 4; break; } else { label = 6; break; } //@line 348 "ltable.c"
    case 4: 
      var $1=$i; //@line 348 "ltable.c"
      var $arrayidx=(($nums+($1<<2))|0); //@line 348 "ltable.c"
      HEAP32[(($arrayidx)>>2)]=0; //@line 348 "ltable.c"
      label = 5; break; //@line 348 "ltable.c"
    case 5: 
      var $2=$i; //@line 348 "ltable.c"
      var $inc=((($2)+(1))|0); //@line 348 "ltable.c"
      $i=$inc; //@line 348 "ltable.c"
      label = 3; break; //@line 348 "ltable.c"
    case 6: 
      var $3=$t_addr; //@line 349 "ltable.c"
      var $arraydecay=(($nums)|0); //@line 349 "ltable.c"
      var $call=__ZL11numusearrayPK5TablePi($3, $arraydecay); //@line 349 "ltable.c"
      HEAP32[(($nasize)>>2)]=$call; //@line 349 "ltable.c"
      var $4=HEAP32[(($nasize)>>2)]; //@line 350 "ltable.c"
      $totaluse=$4; //@line 350 "ltable.c"
      var $5=$t_addr; //@line 351 "ltable.c"
      var $arraydecay1=(($nums)|0); //@line 351 "ltable.c"
      var $call2=__ZL10numusehashPK5TablePiS2_($5, $arraydecay1, $nasize); //@line 351 "ltable.c"
      var $6=$totaluse; //@line 351 "ltable.c"
      var $add=((($6)+($call2))|0); //@line 351 "ltable.c"
      $totaluse=$add; //@line 351 "ltable.c"
      var $7=$ek_addr; //@line 353 "ltable.c"
      var $arraydecay3=(($nums)|0); //@line 353 "ltable.c"
      var $call4=__ZL8countintPK10lua_TValuePi($7, $arraydecay3); //@line 353 "ltable.c"
      var $8=HEAP32[(($nasize)>>2)]; //@line 353 "ltable.c"
      var $add5=((($8)+($call4))|0); //@line 353 "ltable.c"
      HEAP32[(($nasize)>>2)]=$add5; //@line 353 "ltable.c"
      var $9=$totaluse; //@line 354 "ltable.c"
      var $inc6=((($9)+(1))|0); //@line 354 "ltable.c"
      $totaluse=$inc6; //@line 354 "ltable.c"
      var $arraydecay7=(($nums)|0); //@line 356 "ltable.c"
      var $call8=__ZL12computesizesPiS_($arraydecay7, $nasize); //@line 356 "ltable.c"
      $na=$call8; //@line 356 "ltable.c"
      var $10=$L_addr; //@line 358 "ltable.c"
      var $11=$t_addr; //@line 358 "ltable.c"
      var $12=HEAP32[(($nasize)>>2)]; //@line 358 "ltable.c"
      var $13=$totaluse; //@line 358 "ltable.c"
      var $14=$na; //@line 358 "ltable.c"
      var $sub=((($13)-($14))|0); //@line 358 "ltable.c"
      __Z11luaH_resizeP9lua_StateP5Tableii($10, $11, $12, $sub); //@line 358 "ltable.c"
      STACKTOP = __stackBase__;
      return; //@line 359 "ltable.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL6rehashP9lua_StateP5TablePK10lua_TValue["X"]=1;

function __Z11luaH_getintP5Tablei($t, $key) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $t_addr;
      var $key_addr;
      var $nk;
      var $n;
      $t_addr=$t;
      $key_addr=$key;
      var $0=$key_addr; //@line 448 "ltable.c"
      var $sub=((($0)-(1))|0); //@line 448 "ltable.c"
      var $1=$t_addr; //@line 448 "ltable.c"
      var $sizearray=(($1+28)|0); //@line 448 "ltable.c"
      var $2=HEAP32[(($sizearray)>>2)]; //@line 448 "ltable.c"
      var $cmp=(($sub)>>>0) < (($2)>>>0); //@line 448 "ltable.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 448 "ltable.c"
    case 3: 
      var $3=$key_addr; //@line 449 "ltable.c"
      var $sub1=((($3)-(1))|0); //@line 449 "ltable.c"
      var $4=$t_addr; //@line 449 "ltable.c"
      var $array=(($4+12)|0); //@line 449 "ltable.c"
      var $5=HEAP32[(($array)>>2)]; //@line 449 "ltable.c"
      var $arrayidx=(($5+((($sub1)*(12))&-1))|0); //@line 449 "ltable.c"
      $retval=$arrayidx; //@line 449 "ltable.c"
      label = 12; break; //@line 449 "ltable.c"
    case 4: 
      var $6=$key_addr; //@line 451 "ltable.c"
      var $conv=(($6)|0); //@line 451 "ltable.c"
      $nk=$conv; //@line 451 "ltable.c"
      var $7=$t_addr; //@line 452 "ltable.c"
      var $8=$nk; //@line 452 "ltable.c"
      var $call=__ZL7hashnumPK5Tabled($7, $8); //@line 452 "ltable.c"
      $n=$call; //@line 452 "ltable.c"
      label = 5; break; //@line 453 "ltable.c"
    case 5: 
      var $9=$n; //@line 454 "ltable.c"
      var $i_key=(($9+12)|0); //@line 454 "ltable.c"
      var $tvk=$i_key; //@line 454 "ltable.c"
      var $tt_=(($tvk+8)|0); //@line 454 "ltable.c"
      var $10=HEAP32[(($tt_)>>2)]; //@line 454 "ltable.c"
      var $cmp2=(($10)|0)==3; //@line 454 "ltable.c"
      if ($cmp2) { label = 6; break; } else { label = 8; break; } //@line 454 "ltable.c"
    case 6: 
      var $11=$n; //@line 454 "ltable.c"
      var $i_key3=(($11+12)|0); //@line 454 "ltable.c"
      var $tvk4=$i_key3; //@line 454 "ltable.c"
      var $value_=(($tvk4)|0); //@line 454 "ltable.c"
      var $n5=$value_; //@line 454 "ltable.c"
      var $12=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n5)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n5)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 454 "ltable.c"
      var $13=$nk; //@line 454 "ltable.c"
      var $cmp6=$12 == $13; //@line 454 "ltable.c"
      if ($cmp6) { label = 7; break; } else { label = 8; break; } //@line 454 "ltable.c"
    case 7: 
      var $14=$n; //@line 455 "ltable.c"
      var $i_val=(($14)|0); //@line 455 "ltable.c"
      $retval=$i_val; //@line 455 "ltable.c"
      label = 12; break; //@line 455 "ltable.c"
    case 8: 
      var $15=$n; //@line 456 "ltable.c"
      var $i_key9=(($15+12)|0); //@line 456 "ltable.c"
      var $nk10=$i_key9; //@line 456 "ltable.c"
      var $next=(($nk10+12)|0); //@line 456 "ltable.c"
      var $16=HEAP32[(($next)>>2)]; //@line 456 "ltable.c"
      $n=$16; //@line 456 "ltable.c"
      label = 9; break;
    case 9: 
      label = 10; break; //@line 457 "ltable.c"
    case 10: 
      var $17=$n; //@line 457 "ltable.c"
      var $tobool=(($17)|0)!=0; //@line 457 "ltable.c"
      if ($tobool) { label = 5; break; } else { label = 11; break; } //@line 457 "ltable.c"
    case 11: 
      $retval=5243252; //@line 458 "ltable.c"
      label = 12; break; //@line 458 "ltable.c"
    case 12: 
      var $18=$retval; //@line 460 "ltable.c"

      return $18; //@line 460 "ltable.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z11luaH_getintP5Tablei["X"]=1;

function __Z8luaH_getP5TablePK10lua_TValue($t, $key) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $t_addr;
      var $key_addr;
      var $k;
      var $n;
      var $u=__stackBase__;
      var $n9;
      $t_addr=$t;
      $key_addr=$key;
      var $0=$key_addr; //@line 482 "ltable.c"
      var $tt_=(($0+8)|0); //@line 482 "ltable.c"
      var $1=HEAP32[(($tt_)>>2)]; //@line 482 "ltable.c"
      var $and=$1 & 63; //@line 482 "ltable.c"
      if ((($and)|0)==0) {
        label = 3; break;
      }
      else if ((($and)|0)==4) {
        label = 4; break;
      }
      else if ((($and)|0)==3) {
        label = 5; break;
      }
      else {
      label = 8; break;
      }
      
    case 3: 
      $retval=5243252; //@line 483 "ltable.c"
      label = 16; break; //@line 483 "ltable.c"
    case 4: 
      var $2=$t_addr; //@line 484 "ltable.c"
      var $3=$key_addr; //@line 484 "ltable.c"
      var $value_=(($3)|0); //@line 484 "ltable.c"
      var $gc=$value_; //@line 484 "ltable.c"
      var $4=HEAP32[(($gc)>>2)]; //@line 484 "ltable.c"
      var $ts=$4; //@line 484 "ltable.c"
      var $call=__Z11luaH_getstrP5TableP7TString($2, $ts); //@line 484 "ltable.c"
      $retval=$call; //@line 484 "ltable.c"
      label = 16; break; //@line 484 "ltable.c"
    case 5: 
      var $5=$key_addr; //@line 487 "ltable.c"
      var $value_3=(($5)|0); //@line 487 "ltable.c"
      var $n4=$value_3; //@line 487 "ltable.c"
      var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n4)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n4)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 487 "ltable.c"
      $n=$6; //@line 487 "ltable.c"
      var $7=$n; //@line 488 "ltable.c"
      var $add=($7)+(6755399441055744); //@line 488 "ltable.c"
      var $l_d=$u; //@line 488 "ltable.c"
      (HEAPF64[(tempDoublePtr)>>3]=$add,HEAP32[(($l_d)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($l_d)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); //@line 488 "ltable.c"
      var $8=HEAP32[((((5244564)|0))>>2)]; //@line 488 "ltable.c"
      var $cmp=(($8)|0)==33; //@line 488 "ltable.c"
      var $idxprom=(($cmp)&1); //@line 488 "ltable.c"
      var $l_p=$u; //@line 488 "ltable.c"
      var $arrayidx=(($l_p+($idxprom<<2))|0); //@line 488 "ltable.c"
      var $9=HEAP32[(($arrayidx)>>2)]; //@line 488 "ltable.c"
      $k=$9; //@line 488 "ltable.c"
      var $10=$k; //@line 489 "ltable.c"
      var $conv=(($10)|0); //@line 489 "ltable.c"
      var $11=$key_addr; //@line 489 "ltable.c"
      var $value_5=(($11)|0); //@line 489 "ltable.c"
      var $n6=$value_5; //@line 489 "ltable.c"
      var $12=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n6)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n6)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 489 "ltable.c"
      var $cmp7=$conv == $12; //@line 489 "ltable.c"
      if ($cmp7) { label = 6; break; } else { label = 7; break; } //@line 489 "ltable.c"
    case 6: 
      var $13=$t_addr; //@line 490 "ltable.c"
      var $14=$k; //@line 490 "ltable.c"
      var $call8=__Z11luaH_getintP5Tablei($13, $14); //@line 490 "ltable.c"
      $retval=$call8; //@line 490 "ltable.c"
      label = 16; break; //@line 490 "ltable.c"
    case 7: 
      label = 8; break; //@line 492 "ltable.c"
    case 8: 
      var $15=$t_addr; //@line 494 "ltable.c"
      var $16=$key_addr; //@line 494 "ltable.c"
      var $call10=__ZL12mainpositionPK5TablePK10lua_TValue($15, $16); //@line 494 "ltable.c"
      $n9=$call10; //@line 494 "ltable.c"
      label = 9; break; //@line 495 "ltable.c"
    case 9: 
      var $17=$n9; //@line 496 "ltable.c"
      var $i_key=(($17+12)|0); //@line 496 "ltable.c"
      var $tvk=$i_key; //@line 496 "ltable.c"
      var $tt_11=(($tvk+8)|0); //@line 496 "ltable.c"
      var $18=HEAP32[(($tt_11)>>2)]; //@line 496 "ltable.c"
      var $19=$key_addr; //@line 496 "ltable.c"
      var $tt_12=(($19+8)|0); //@line 496 "ltable.c"
      var $20=HEAP32[(($tt_12)>>2)]; //@line 496 "ltable.c"
      var $cmp13=(($18)|0)==(($20)|0); //@line 496 "ltable.c"
      if ($cmp13) { label = 10; break; } else { label = 12; break; } //@line 496 "ltable.c"
    case 10: 
      var $21=$n9; //@line 496 "ltable.c"
      var $i_key14=(($21+12)|0); //@line 496 "ltable.c"
      var $tvk15=$i_key14; //@line 496 "ltable.c"
      var $22=$key_addr; //@line 496 "ltable.c"
      var $call16=__Z14luaV_equalobj_P9lua_StatePK10lua_TValueS3_(0, $tvk15, $22); //@line 496 "ltable.c"
      var $tobool=(($call16)|0)!=0; //@line 496 "ltable.c"
      if ($tobool) { label = 11; break; } else { label = 12; break; } //@line 496 "ltable.c"
    case 11: 
      var $23=$n9; //@line 497 "ltable.c"
      var $i_val=(($23)|0); //@line 497 "ltable.c"
      $retval=$i_val; //@line 497 "ltable.c"
      label = 16; break; //@line 497 "ltable.c"
    case 12: 
      var $24=$n9; //@line 498 "ltable.c"
      var $i_key18=(($24+12)|0); //@line 498 "ltable.c"
      var $nk=$i_key18; //@line 498 "ltable.c"
      var $next=(($nk+12)|0); //@line 498 "ltable.c"
      var $25=HEAP32[(($next)>>2)]; //@line 498 "ltable.c"
      $n9=$25; //@line 498 "ltable.c"
      label = 13; break;
    case 13: 
      label = 14; break; //@line 499 "ltable.c"
    case 14: 
      var $26=$n9; //@line 499 "ltable.c"
      var $tobool20=(($26)|0)!=0; //@line 499 "ltable.c"
      if ($tobool20) { label = 9; break; } else { label = 15; break; } //@line 499 "ltable.c"
    case 15: 
      $retval=5243252; //@line 500 "ltable.c"
      label = 16; break; //@line 500 "ltable.c"
    case 16: 
      var $27=$retval; //@line 503 "ltable.c"
      STACKTOP = __stackBase__;
      return $27; //@line 503 "ltable.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z8luaH_getP5TablePK10lua_TValue["X"]=1;

function __Z11luaH_newkeyP9lua_StateP5TablePK10lua_TValue($L, $t, $key) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $t_addr;
      var $key_addr;
      var $mp;
      var $othern;
      var $n12;
      var $io2;
      var $io1;
      $L_addr=$L;
      $t_addr=$t;
      $key_addr=$key;
      var $0=$key_addr; //@line 407 "ltable.c"
      var $tt_=(($0+8)|0); //@line 407 "ltable.c"
      var $1=HEAP32[(($tt_)>>2)]; //@line 407 "ltable.c"
      var $cmp=(($1)|0)==0; //@line 407 "ltable.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 407 "ltable.c"
    case 3: 
      var $2=$L_addr; //@line 407 "ltable.c"
      __Z13luaG_runerrorP9lua_StatePKcz($2, ((5243804)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 407 "ltable.c"
      throw "Reached an unreachable!" //@line 407 "ltable.c"
    case 4: 
      var $3=$key_addr; //@line 408 "ltable.c"
      var $tt_1=(($3+8)|0); //@line 408 "ltable.c"
      var $4=HEAP32[(($tt_1)>>2)]; //@line 408 "ltable.c"
      var $cmp2=(($4)|0)==3; //@line 408 "ltable.c"
      if ($cmp2) { label = 5; break; } else { label = 7; break; } //@line 408 "ltable.c"
    case 5: 
      var $5=$key_addr; //@line 408 "ltable.c"
      var $value_=(($5)|0); //@line 408 "ltable.c"
      var $n=$value_; //@line 408 "ltable.c"
      var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 408 "ltable.c"
      var $7=$key_addr; //@line 408 "ltable.c"
      var $value_3=(($7)|0); //@line 408 "ltable.c"
      var $n4=$value_3; //@line 408 "ltable.c"
      var $8=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n4)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n4)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 408 "ltable.c"
      var $cmp5=$6 == $8; //@line 408 "ltable.c"
      if ($cmp5) { label = 7; break; } else { label = 6; break; } //@line 408 "ltable.c"
    case 6: 
      var $9=$L_addr; //@line 409 "ltable.c"
      __Z13luaG_runerrorP9lua_StatePKcz($9, ((5243980)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 409 "ltable.c"
      throw "Reached an unreachable!" //@line 409 "ltable.c"
    case 7: 
      label = 8; break;
    case 8: 
      var $10=$t_addr; //@line 410 "ltable.c"
      var $11=$key_addr; //@line 410 "ltable.c"
      var $call=__ZL12mainpositionPK5TablePK10lua_TValue($10, $11); //@line 410 "ltable.c"
      $mp=$call; //@line 410 "ltable.c"
      var $12=$mp; //@line 411 "ltable.c"
      var $i_val=(($12)|0); //@line 411 "ltable.c"
      var $tt_8=(($i_val+8)|0); //@line 411 "ltable.c"
      var $13=HEAP32[(($tt_8)>>2)]; //@line 411 "ltable.c"
      var $cmp9=(($13)|0)==0; //@line 411 "ltable.c"
      if ($cmp9) { label = 9; break; } else { label = 10; break; } //@line 411 "ltable.c"
    case 9: 
      var $14=$mp; //@line 411 "ltable.c"
      var $cmp10=(($14)|0)==5245284; //@line 411 "ltable.c"
      if ($cmp10) { label = 10; break; } else { label = 19; break; } //@line 411 "ltable.c"
    case 10: 
      var $15=$t_addr; //@line 413 "ltable.c"
      var $call13=__ZL10getfreeposP5Table($15); //@line 413 "ltable.c"
      $n12=$call13; //@line 413 "ltable.c"
      var $16=$n12; //@line 414 "ltable.c"
      var $cmp14=(($16)|0)==0; //@line 414 "ltable.c"
      if ($cmp14) { label = 11; break; } else { label = 12; break; } //@line 414 "ltable.c"
    case 11: 
      var $17=$L_addr; //@line 415 "ltable.c"
      var $18=$t_addr; //@line 415 "ltable.c"
      var $19=$key_addr; //@line 415 "ltable.c"
      __ZL6rehashP9lua_StateP5TablePK10lua_TValue($17, $18, $19); //@line 415 "ltable.c"
      var $20=$L_addr; //@line 417 "ltable.c"
      var $21=$t_addr; //@line 417 "ltable.c"
      var $22=$key_addr; //@line 417 "ltable.c"
      var $call16=__Z8luaH_setP9lua_StateP5TablePK10lua_TValue($20, $21, $22); //@line 417 "ltable.c"
      $retval=$call16; //@line 417 "ltable.c"
      label = 24; break; //@line 417 "ltable.c"
    case 12: 
      var $23=$t_addr; //@line 420 "ltable.c"
      var $24=$mp; //@line 420 "ltable.c"
      var $i_key=(($24+12)|0); //@line 420 "ltable.c"
      var $tvk=$i_key; //@line 420 "ltable.c"
      var $call18=__ZL12mainpositionPK5TablePK10lua_TValue($23, $tvk); //@line 420 "ltable.c"
      $othern=$call18; //@line 420 "ltable.c"
      var $25=$othern; //@line 421 "ltable.c"
      var $26=$mp; //@line 421 "ltable.c"
      var $cmp19=(($25)|0)!=(($26)|0); //@line 421 "ltable.c"
      if ($cmp19) { label = 13; break; } else { label = 17; break; } //@line 421 "ltable.c"
    case 13: 
      label = 14; break; //@line 423 "ltable.c"
    case 14: 
      var $27=$othern; //@line 423 "ltable.c"
      var $i_key21=(($27+12)|0); //@line 423 "ltable.c"
      var $nk=$i_key21; //@line 423 "ltable.c"
      var $next=(($nk+12)|0); //@line 423 "ltable.c"
      var $28=HEAP32[(($next)>>2)]; //@line 423 "ltable.c"
      var $29=$mp; //@line 423 "ltable.c"
      var $cmp22=(($28)|0)!=(($29)|0); //@line 423 "ltable.c"
      if ($cmp22) { label = 15; break; } else { label = 16; break; } //@line 423 "ltable.c"
    case 15: 
      var $30=$othern; //@line 423 "ltable.c"
      var $i_key23=(($30+12)|0); //@line 423 "ltable.c"
      var $nk24=$i_key23; //@line 423 "ltable.c"
      var $next25=(($nk24+12)|0); //@line 423 "ltable.c"
      var $31=HEAP32[(($next25)>>2)]; //@line 423 "ltable.c"
      $othern=$31; //@line 423 "ltable.c"
      label = 14; break; //@line 423 "ltable.c"
    case 16: 
      var $32=$n12; //@line 424 "ltable.c"
      var $33=$othern; //@line 424 "ltable.c"
      var $i_key26=(($33+12)|0); //@line 424 "ltable.c"
      var $nk27=$i_key26; //@line 424 "ltable.c"
      var $next28=(($nk27+12)|0); //@line 424 "ltable.c"
      HEAP32[(($next28)>>2)]=$32; //@line 424 "ltable.c"
      var $34=$n12; //@line 425 "ltable.c"
      var $35=$mp; //@line 425 "ltable.c"
      var $36=$34; //@line 425 "ltable.c"
      var $37=$35; //@line 425 "ltable.c"
      assert(28 % 1 === 0);HEAP32[(($36)>>2)]=HEAP32[(($37)>>2)];HEAP32[((($36)+(4))>>2)]=HEAP32[((($37)+(4))>>2)];HEAP32[((($36)+(8))>>2)]=HEAP32[((($37)+(8))>>2)];HEAP32[((($36)+(12))>>2)]=HEAP32[((($37)+(12))>>2)];HEAP32[((($36)+(16))>>2)]=HEAP32[((($37)+(16))>>2)];HEAP32[((($36)+(20))>>2)]=HEAP32[((($37)+(20))>>2)];HEAP32[((($36)+(24))>>2)]=HEAP32[((($37)+(24))>>2)]; //@line 425 "ltable.c"
      var $38=$mp; //@line 426 "ltable.c"
      var $i_key29=(($38+12)|0); //@line 426 "ltable.c"
      var $nk30=$i_key29; //@line 426 "ltable.c"
      var $next31=(($nk30+12)|0); //@line 426 "ltable.c"
      HEAP32[(($next31)>>2)]=0; //@line 426 "ltable.c"
      var $39=$mp; //@line 427 "ltable.c"
      var $i_val32=(($39)|0); //@line 427 "ltable.c"
      var $tt_33=(($i_val32+8)|0); //@line 427 "ltable.c"
      HEAP32[(($tt_33)>>2)]=0; //@line 427 "ltable.c"
      label = 18; break; //@line 428 "ltable.c"
    case 17: 
      var $40=$mp; //@line 431 "ltable.c"
      var $i_key35=(($40+12)|0); //@line 431 "ltable.c"
      var $nk36=$i_key35; //@line 431 "ltable.c"
      var $next37=(($nk36+12)|0); //@line 431 "ltable.c"
      var $41=HEAP32[(($next37)>>2)]; //@line 431 "ltable.c"
      var $42=$n12; //@line 431 "ltable.c"
      var $i_key38=(($42+12)|0); //@line 431 "ltable.c"
      var $nk39=$i_key38; //@line 431 "ltable.c"
      var $next40=(($nk39+12)|0); //@line 431 "ltable.c"
      HEAP32[(($next40)>>2)]=$41; //@line 431 "ltable.c"
      var $43=$n12; //@line 432 "ltable.c"
      var $44=$mp; //@line 432 "ltable.c"
      var $i_key41=(($44+12)|0); //@line 432 "ltable.c"
      var $nk42=$i_key41; //@line 432 "ltable.c"
      var $next43=(($nk42+12)|0); //@line 432 "ltable.c"
      HEAP32[(($next43)>>2)]=$43; //@line 432 "ltable.c"
      var $45=$n12; //@line 433 "ltable.c"
      $mp=$45; //@line 433 "ltable.c"
      label = 18; break;
    case 18: 
      label = 19; break; //@line 435 "ltable.c"
    case 19: 
      var $46=$key_addr; //@line 436 "ltable.c"
      $io2=$46; //@line 436 "ltable.c"
      var $47=$mp; //@line 436 "ltable.c"
      var $i_key46=(($47+12)|0); //@line 436 "ltable.c"
      var $tvk47=$i_key46; //@line 436 "ltable.c"
      $io1=$tvk47; //@line 436 "ltable.c"
      var $48=$io1; //@line 436 "ltable.c"
      var $value_48=(($48)|0); //@line 436 "ltable.c"
      var $49=$io2; //@line 436 "ltable.c"
      var $value_49=(($49)|0); //@line 436 "ltable.c"
      var $50=$value_48; //@line 436 "ltable.c"
      var $51=$value_49; //@line 436 "ltable.c"
      assert(8 % 1 === 0);HEAP32[(($50)>>2)]=HEAP32[(($51)>>2)];HEAP32[((($50)+(4))>>2)]=HEAP32[((($51)+(4))>>2)]; //@line 436 "ltable.c"
      var $52=$io2; //@line 436 "ltable.c"
      var $tt_50=(($52+8)|0); //@line 436 "ltable.c"
      var $53=HEAP32[(($tt_50)>>2)]; //@line 436 "ltable.c"
      var $54=$io1; //@line 436 "ltable.c"
      var $tt_51=(($54+8)|0); //@line 436 "ltable.c"
      HEAP32[(($tt_51)>>2)]=$53; //@line 436 "ltable.c"
      var $55=$key_addr; //@line 437 "ltable.c"
      var $tt_52=(($55+8)|0); //@line 437 "ltable.c"
      var $56=HEAP32[(($tt_52)>>2)]; //@line 437 "ltable.c"
      var $and=$56 & 64; //@line 437 "ltable.c"
      var $tobool=(($and)|0)!=0; //@line 437 "ltable.c"
      if ($tobool) { label = 20; break; } else { label = 23; break; } //@line 437 "ltable.c"
    case 20: 
      var $57=$key_addr; //@line 437 "ltable.c"
      var $value_54=(($57)|0); //@line 437 "ltable.c"
      var $gc=$value_54; //@line 437 "ltable.c"
      var $58=HEAP32[(($gc)>>2)]; //@line 437 "ltable.c"
      var $gch=$58; //@line 437 "ltable.c"
      var $marked=(($gch+5)|0); //@line 437 "ltable.c"
      var $59=HEAP8[($marked)]; //@line 437 "ltable.c"
      var $conv=(($59)&255); //@line 437 "ltable.c"
      var $and55=$conv & 3; //@line 437 "ltable.c"
      var $tobool56=(($and55)|0)!=0; //@line 437 "ltable.c"
      if ($tobool56) { label = 21; break; } else { label = 23; break; } //@line 437 "ltable.c"
    case 21: 
      var $60=$t_addr; //@line 437 "ltable.c"
      var $61=$60; //@line 437 "ltable.c"
      var $gch58=$61; //@line 437 "ltable.c"
      var $marked59=(($gch58+5)|0); //@line 437 "ltable.c"
      var $62=HEAP8[($marked59)]; //@line 437 "ltable.c"
      var $conv60=(($62)&255); //@line 437 "ltable.c"
      var $and61=$conv60 & 4; //@line 437 "ltable.c"
      var $tobool62=(($and61)|0)!=0; //@line 437 "ltable.c"
      if ($tobool62) { label = 22; break; } else { label = 23; break; } //@line 437 "ltable.c"
    case 22: 
      var $63=$L_addr; //@line 437 "ltable.c"
      var $64=$t_addr; //@line 437 "ltable.c"
      var $65=$64; //@line 437 "ltable.c"
      __Z17luaC_barrierback_P9lua_StateP8GCObject($63, $65); //@line 437 "ltable.c"
      label = 23; break; //@line 437 "ltable.c"
    case 23: 
      var $66=$mp; //@line 439 "ltable.c"
      var $i_val65=(($66)|0); //@line 439 "ltable.c"
      $retval=$i_val65; //@line 439 "ltable.c"
      label = 24; break; //@line 439 "ltable.c"
    case 24: 
      var $67=$retval; //@line 440 "ltable.c"
      STACKTOP = __stackBase__;
      return $67; //@line 440 "ltable.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z11luaH_newkeyP9lua_StateP5TablePK10lua_TValue["X"]=1;

function __ZL11numusearrayPK5TablePi($t, $nums) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $nums_addr;
      var $lg;
      var $ttlg;
      var $ause;
      var $i;
      var $lc;
      var $lim;
      $t_addr=$t;
      $nums_addr=$nums;
      $ause=0; //@line 232 "ltable.c"
      $i=1; //@line 233 "ltable.c"
      $lg=0; //@line 234 "ltable.c"
      $ttlg=1; //@line 234 "ltable.c"
      label = 3; break; //@line 234 "ltable.c"
    case 3: 
      var $0=$lg; //@line 234 "ltable.c"
      var $cmp=(($0)|0) <= 30; //@line 234 "ltable.c"
      if ($cmp) { label = 4; break; } else { label = 16; break; } //@line 234 "ltable.c"
    case 4: 
      $lc=0; //@line 235 "ltable.c"
      var $1=$ttlg; //@line 236 "ltable.c"
      $lim=$1; //@line 236 "ltable.c"
      var $2=$lim; //@line 237 "ltable.c"
      var $3=$t_addr; //@line 237 "ltable.c"
      var $sizearray=(($3+28)|0); //@line 237 "ltable.c"
      var $4=HEAP32[(($sizearray)>>2)]; //@line 237 "ltable.c"
      var $cmp1=(($2)|0) > (($4)|0); //@line 237 "ltable.c"
      if ($cmp1) { label = 5; break; } else { label = 8; break; } //@line 237 "ltable.c"
    case 5: 
      var $5=$t_addr; //@line 238 "ltable.c"
      var $sizearray2=(($5+28)|0); //@line 238 "ltable.c"
      var $6=HEAP32[(($sizearray2)>>2)]; //@line 238 "ltable.c"
      $lim=$6; //@line 238 "ltable.c"
      var $7=$i; //@line 239 "ltable.c"
      var $8=$lim; //@line 239 "ltable.c"
      var $cmp3=(($7)|0) > (($8)|0); //@line 239 "ltable.c"
      if ($cmp3) { label = 6; break; } else { label = 7; break; } //@line 239 "ltable.c"
    case 6: 
      label = 16; break; //@line 240 "ltable.c"
    case 7: 
      label = 8; break; //@line 241 "ltable.c"
    case 8: 
      label = 9; break; //@line 243 "ltable.c"
    case 9: 
      var $9=$i; //@line 243 "ltable.c"
      var $10=$lim; //@line 243 "ltable.c"
      var $cmp7=(($9)|0) <= (($10)|0); //@line 243 "ltable.c"
      if ($cmp7) { label = 10; break; } else { label = 14; break; } //@line 243 "ltable.c"
    case 10: 
      var $11=$i; //@line 244 "ltable.c"
      var $sub=((($11)-(1))|0); //@line 244 "ltable.c"
      var $12=$t_addr; //@line 244 "ltable.c"
      var $array=(($12+12)|0); //@line 244 "ltable.c"
      var $13=HEAP32[(($array)>>2)]; //@line 244 "ltable.c"
      var $arrayidx=(($13+((($sub)*(12))&-1))|0); //@line 244 "ltable.c"
      var $tt_=(($arrayidx+8)|0); //@line 244 "ltable.c"
      var $14=HEAP32[(($tt_)>>2)]; //@line 244 "ltable.c"
      var $cmp9=(($14)|0)==0; //@line 244 "ltable.c"
      if ($cmp9) { label = 12; break; } else { label = 11; break; } //@line 244 "ltable.c"
    case 11: 
      var $15=$lc; //@line 245 "ltable.c"
      var $inc=((($15)+(1))|0); //@line 245 "ltable.c"
      $lc=$inc; //@line 245 "ltable.c"
      label = 12; break; //@line 245 "ltable.c"
    case 12: 
      label = 13; break; //@line 246 "ltable.c"
    case 13: 
      var $16=$i; //@line 243 "ltable.c"
      var $inc12=((($16)+(1))|0); //@line 243 "ltable.c"
      $i=$inc12; //@line 243 "ltable.c"
      label = 9; break; //@line 243 "ltable.c"
    case 14: 
      var $17=$lc; //@line 247 "ltable.c"
      var $18=$lg; //@line 247 "ltable.c"
      var $19=$nums_addr; //@line 247 "ltable.c"
      var $arrayidx13=(($19+($18<<2))|0); //@line 247 "ltable.c"
      var $20=HEAP32[(($arrayidx13)>>2)]; //@line 247 "ltable.c"
      var $add=((($20)+($17))|0); //@line 247 "ltable.c"
      HEAP32[(($arrayidx13)>>2)]=$add; //@line 247 "ltable.c"
      var $21=$lc; //@line 248 "ltable.c"
      var $22=$ause; //@line 248 "ltable.c"
      var $add14=((($22)+($21))|0); //@line 248 "ltable.c"
      $ause=$add14; //@line 248 "ltable.c"
      label = 15; break; //@line 249 "ltable.c"
    case 15: 
      var $23=$lg; //@line 234 "ltable.c"
      var $inc16=((($23)+(1))|0); //@line 234 "ltable.c"
      $lg=$inc16; //@line 234 "ltable.c"
      var $24=$ttlg; //@line 234 "ltable.c"
      var $mul=($24<<1); //@line 234 "ltable.c"
      $ttlg=$mul; //@line 234 "ltable.c"
      label = 3; break; //@line 234 "ltable.c"
    case 16: 
      var $25=$ause; //@line 250 "ltable.c"

      return $25; //@line 250 "ltable.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL11numusearrayPK5TablePi["X"]=1;

function __ZL12computesizesPiS_($nums, $narray) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $nums_addr;
      var $narray_addr;
      var $i;
      var $twotoi;
      var $a;
      var $na;
      var $n;
      $nums_addr=$nums;
      $narray_addr=$narray;
      $a=0; //@line 199 "ltable.c"
      $na=0; //@line 200 "ltable.c"
      $n=0; //@line 201 "ltable.c"
      $i=0; //@line 202 "ltable.c"
      $twotoi=1; //@line 202 "ltable.c"
      label = 3; break; //@line 202 "ltable.c"
    case 3: 
      var $0=$twotoi; //@line 202 "ltable.c"
      var $div=((((($0)|0))/(2))&-1); //@line 202 "ltable.c"
      var $1=$narray_addr; //@line 202 "ltable.c"
      var $2=HEAP32[(($1)>>2)]; //@line 202 "ltable.c"
      var $cmp=(($div)|0) < (($2)|0); //@line 202 "ltable.c"
      if ($cmp) { label = 4; break; } else { label = 12; break; } //@line 202 "ltable.c"
    case 4: 
      var $3=$i; //@line 203 "ltable.c"
      var $4=$nums_addr; //@line 203 "ltable.c"
      var $arrayidx=(($4+($3<<2))|0); //@line 203 "ltable.c"
      var $5=HEAP32[(($arrayidx)>>2)]; //@line 203 "ltable.c"
      var $cmp1=(($5)|0) > 0; //@line 203 "ltable.c"
      if ($cmp1) { label = 5; break; } else { label = 8; break; } //@line 203 "ltable.c"
    case 5: 
      var $6=$i; //@line 204 "ltable.c"
      var $7=$nums_addr; //@line 204 "ltable.c"
      var $arrayidx2=(($7+($6<<2))|0); //@line 204 "ltable.c"
      var $8=HEAP32[(($arrayidx2)>>2)]; //@line 204 "ltable.c"
      var $9=$a; //@line 204 "ltable.c"
      var $add=((($9)+($8))|0); //@line 204 "ltable.c"
      $a=$add; //@line 204 "ltable.c"
      var $10=$a; //@line 205 "ltable.c"
      var $11=$twotoi; //@line 205 "ltable.c"
      var $div3=((((($11)|0))/(2))&-1); //@line 205 "ltable.c"
      var $cmp4=(($10)|0) > (($div3)|0); //@line 205 "ltable.c"
      if ($cmp4) { label = 6; break; } else { label = 7; break; } //@line 205 "ltable.c"
    case 6: 
      var $12=$twotoi; //@line 206 "ltable.c"
      $n=$12; //@line 206 "ltable.c"
      var $13=$a; //@line 207 "ltable.c"
      $na=$13; //@line 207 "ltable.c"
      label = 7; break; //@line 208 "ltable.c"
    case 7: 
      label = 8; break; //@line 209 "ltable.c"
    case 8: 
      var $14=$a; //@line 210 "ltable.c"
      var $15=$narray_addr; //@line 210 "ltable.c"
      var $16=HEAP32[(($15)>>2)]; //@line 210 "ltable.c"
      var $cmp7=(($14)|0)==(($16)|0); //@line 210 "ltable.c"
      if ($cmp7) { label = 9; break; } else { label = 10; break; } //@line 210 "ltable.c"
    case 9: 
      label = 12; break; //@line 210 "ltable.c"
    case 10: 
      label = 11; break; //@line 211 "ltable.c"
    case 11: 
      var $17=$i; //@line 202 "ltable.c"
      var $inc=((($17)+(1))|0); //@line 202 "ltable.c"
      $i=$inc; //@line 202 "ltable.c"
      var $18=$twotoi; //@line 202 "ltable.c"
      var $mul=($18<<1); //@line 202 "ltable.c"
      $twotoi=$mul; //@line 202 "ltable.c"
      label = 3; break; //@line 202 "ltable.c"
    case 12: 
      var $19=$n; //@line 212 "ltable.c"
      var $20=$narray_addr; //@line 212 "ltable.c"
      HEAP32[(($20)>>2)]=$19; //@line 212 "ltable.c"
      var $21=$na; //@line 214 "ltable.c"

      return $21; //@line 214 "ltable.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL12computesizesPiS_["X"]=1;

function __ZL10arrayindexPK10lua_TValue($key) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $key_addr;
      var $n;
      var $k;
      var $u=__stackBase__;
      $key_addr=$key;
      var $0=$key_addr; //@line 128 "ltable.c"
      var $tt_=(($0+8)|0); //@line 128 "ltable.c"
      var $1=HEAP32[(($tt_)>>2)]; //@line 128 "ltable.c"
      var $cmp=(($1)|0)==3; //@line 128 "ltable.c"
      if ($cmp) { label = 3; break; } else { label = 6; break; } //@line 128 "ltable.c"
    case 3: 
      var $2=$key_addr; //@line 129 "ltable.c"
      var $value_=(($2)|0); //@line 129 "ltable.c"
      var $n1=$value_; //@line 129 "ltable.c"
      var $3=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n1)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n1)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 129 "ltable.c"
      $n=$3; //@line 129 "ltable.c"
      var $4=$n; //@line 131 "ltable.c"
      var $add=($4)+(6755399441055744); //@line 131 "ltable.c"
      var $l_d=$u; //@line 131 "ltable.c"
      (HEAPF64[(tempDoublePtr)>>3]=$add,HEAP32[(($l_d)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($l_d)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); //@line 131 "ltable.c"
      var $5=HEAP32[((((5244556)|0))>>2)]; //@line 131 "ltable.c"
      var $cmp2=(($5)|0)==33; //@line 131 "ltable.c"
      var $idxprom=(($cmp2)&1); //@line 131 "ltable.c"
      var $l_p=$u; //@line 131 "ltable.c"
      var $arrayidx=(($l_p+($idxprom<<2))|0); //@line 131 "ltable.c"
      var $6=HEAP32[(($arrayidx)>>2)]; //@line 131 "ltable.c"
      $k=$6; //@line 131 "ltable.c"
      var $7=$k; //@line 132 "ltable.c"
      var $conv=(($7)|0); //@line 132 "ltable.c"
      var $8=$n; //@line 132 "ltable.c"
      var $cmp3=$conv == $8; //@line 132 "ltable.c"
      if ($cmp3) { label = 4; break; } else { label = 5; break; } //@line 132 "ltable.c"
    case 4: 
      var $9=$k; //@line 133 "ltable.c"
      $retval=$9; //@line 133 "ltable.c"
      label = 7; break; //@line 133 "ltable.c"
    case 5: 
      label = 6; break; //@line 134 "ltable.c"
    case 6: 
      $retval=-1; //@line 135 "ltable.c"
      label = 7; break; //@line 135 "ltable.c"
    case 7: 
      var $10=$retval; //@line 136 "ltable.c"
      STACKTOP = __stackBase__;
      return $10; //@line 136 "ltable.c"
    default: assert(0, "bad label: " + label);
  }

}


function __Z9luaH_getnP5Table($t) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $t_addr;
      var $j;
      var $i;
      var $m;
      $t_addr=$t;
      var $0=$t_addr; //@line 561 "ltable.c"
      var $sizearray=(($0+28)|0); //@line 561 "ltable.c"
      var $1=HEAP32[(($sizearray)>>2)]; //@line 561 "ltable.c"
      $j=$1; //@line 561 "ltable.c"
      var $2=$j; //@line 562 "ltable.c"
      var $cmp=(($2)>>>0) > 0; //@line 562 "ltable.c"
      if ($cmp) { label = 3; break; } else { label = 11; break; } //@line 562 "ltable.c"
    case 3: 
      var $3=$j; //@line 562 "ltable.c"
      var $sub=((($3)-(1))|0); //@line 562 "ltable.c"
      var $4=$t_addr; //@line 562 "ltable.c"
      var $array=(($4+12)|0); //@line 562 "ltable.c"
      var $5=HEAP32[(($array)>>2)]; //@line 562 "ltable.c"
      var $arrayidx=(($5+((($sub)*(12))&-1))|0); //@line 562 "ltable.c"
      var $tt_=(($arrayidx+8)|0); //@line 562 "ltable.c"
      var $6=HEAP32[(($tt_)>>2)]; //@line 562 "ltable.c"
      var $cmp1=(($6)|0)==0; //@line 562 "ltable.c"
      if ($cmp1) { label = 4; break; } else { label = 11; break; } //@line 562 "ltable.c"
    case 4: 
      $i=0; //@line 564 "ltable.c"
      label = 5; break; //@line 565 "ltable.c"
    case 5: 
      var $7=$j; //@line 565 "ltable.c"
      var $8=$i; //@line 565 "ltable.c"
      var $sub2=((($7)-($8))|0); //@line 565 "ltable.c"
      var $cmp3=(($sub2)>>>0) > 1; //@line 565 "ltable.c"
      if ($cmp3) { label = 6; break; } else { label = 10; break; } //@line 565 "ltable.c"
    case 6: 
      var $9=$i; //@line 566 "ltable.c"
      var $10=$j; //@line 566 "ltable.c"
      var $add=((($9)+($10))|0); //@line 566 "ltable.c"
      var $div=Math.floor(((($add)>>>0))/(2)); //@line 566 "ltable.c"
      $m=$div; //@line 566 "ltable.c"
      var $11=$m; //@line 567 "ltable.c"
      var $sub4=((($11)-(1))|0); //@line 567 "ltable.c"
      var $12=$t_addr; //@line 567 "ltable.c"
      var $array5=(($12+12)|0); //@line 567 "ltable.c"
      var $13=HEAP32[(($array5)>>2)]; //@line 567 "ltable.c"
      var $arrayidx6=(($13+((($sub4)*(12))&-1))|0); //@line 567 "ltable.c"
      var $tt_7=(($arrayidx6+8)|0); //@line 567 "ltable.c"
      var $14=HEAP32[(($tt_7)>>2)]; //@line 567 "ltable.c"
      var $cmp8=(($14)|0)==0; //@line 567 "ltable.c"
      if ($cmp8) { label = 7; break; } else { label = 8; break; } //@line 567 "ltable.c"
    case 7: 
      var $15=$m; //@line 567 "ltable.c"
      $j=$15; //@line 567 "ltable.c"
      label = 9; break; //@line 567 "ltable.c"
    case 8: 
      var $16=$m; //@line 568 "ltable.c"
      $i=$16; //@line 568 "ltable.c"
      label = 9; break;
    case 9: 
      label = 5; break; //@line 569 "ltable.c"
    case 10: 
      var $17=$i; //@line 570 "ltable.c"
      $retval=$17; //@line 570 "ltable.c"
      label = 14; break; //@line 570 "ltable.c"
    case 11: 
      var $18=$t_addr; //@line 573 "ltable.c"
      var $node=(($18+16)|0); //@line 573 "ltable.c"
      var $19=HEAP32[(($node)>>2)]; //@line 573 "ltable.c"
      var $cmp11=(($19)|0)==5245284; //@line 573 "ltable.c"
      if ($cmp11) { label = 12; break; } else { label = 13; break; } //@line 573 "ltable.c"
    case 12: 
      var $20=$j; //@line 574 "ltable.c"
      $retval=$20; //@line 574 "ltable.c"
      label = 14; break; //@line 574 "ltable.c"
    case 13: 
      var $21=$t_addr; //@line 575 "ltable.c"
      var $22=$j; //@line 575 "ltable.c"
      var $call=__ZL14unbound_searchP5Tablej($21, $22); //@line 575 "ltable.c"
      $retval=$call; //@line 575 "ltable.c"
      label = 14; break; //@line 575 "ltable.c"
    case 14: 
      var $23=$retval; //@line 576 "ltable.c"

      return $23; //@line 576 "ltable.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z9luaH_getnP5Table["X"]=1;

function __ZL14unbound_searchP5Tablej($t, $j) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $t_addr;
      var $j_addr;
      var $i;
      var $m;
      $t_addr=$t;
      $j_addr=$j;
      var $0=$j_addr; //@line 533 "ltable.c"
      $i=$0; //@line 533 "ltable.c"
      var $1=$j_addr; //@line 534 "ltable.c"
      var $inc=((($1)+(1))|0); //@line 534 "ltable.c"
      $j_addr=$inc; //@line 534 "ltable.c"
      label = 3; break; //@line 536 "ltable.c"
    case 3: 
      var $2=$t_addr; //@line 536 "ltable.c"
      var $3=$j_addr; //@line 536 "ltable.c"
      var $call=__Z11luaH_getintP5Tablei($2, $3); //@line 536 "ltable.c"
      var $tt_=(($call+8)|0); //@line 536 "ltable.c"
      var $4=HEAP32[(($tt_)>>2)]; //@line 536 "ltable.c"
      var $cmp=(($4)|0)==0; //@line 536 "ltable.c"
      var $lnot=$cmp ^ 1; //@line 536 "ltable.c"
      if ($lnot) { label = 4; break; } else { label = 10; break; } //@line 536 "ltable.c"
    case 4: 
      var $5=$j_addr; //@line 537 "ltable.c"
      $i=$5; //@line 537 "ltable.c"
      var $6=$j_addr; //@line 538 "ltable.c"
      var $mul=($6<<1); //@line 538 "ltable.c"
      $j_addr=$mul; //@line 538 "ltable.c"
      var $7=$j_addr; //@line 539 "ltable.c"
      var $cmp1=(($7)>>>0) > 2147483645; //@line 539 "ltable.c"
      if ($cmp1) { label = 5; break; } else { label = 9; break; } //@line 539 "ltable.c"
    case 5: 
      $i=1; //@line 541 "ltable.c"
      label = 6; break; //@line 542 "ltable.c"
    case 6: 
      var $8=$t_addr; //@line 542 "ltable.c"
      var $9=$i; //@line 542 "ltable.c"
      var $call3=__Z11luaH_getintP5Tablei($8, $9); //@line 542 "ltable.c"
      var $tt_4=(($call3+8)|0); //@line 542 "ltable.c"
      var $10=HEAP32[(($tt_4)>>2)]; //@line 542 "ltable.c"
      var $cmp5=(($10)|0)==0; //@line 542 "ltable.c"
      var $lnot6=$cmp5 ^ 1; //@line 542 "ltable.c"
      if ($lnot6) { label = 7; break; } else { label = 8; break; } //@line 542 "ltable.c"
    case 7: 
      var $11=$i; //@line 542 "ltable.c"
      var $inc8=((($11)+(1))|0); //@line 542 "ltable.c"
      $i=$inc8; //@line 542 "ltable.c"
      label = 6; break; //@line 542 "ltable.c"
    case 8: 
      var $12=$i; //@line 543 "ltable.c"
      var $sub=((($12)-(1))|0); //@line 543 "ltable.c"
      $retval=$sub; //@line 543 "ltable.c"
      label = 17; break; //@line 543 "ltable.c"
    case 9: 
      label = 3; break; //@line 545 "ltable.c"
    case 10: 
      label = 11; break; //@line 547 "ltable.c"
    case 11: 
      var $13=$j_addr; //@line 547 "ltable.c"
      var $14=$i; //@line 547 "ltable.c"
      var $sub11=((($13)-($14))|0); //@line 547 "ltable.c"
      var $cmp12=(($sub11)>>>0) > 1; //@line 547 "ltable.c"
      if ($cmp12) { label = 12; break; } else { label = 16; break; } //@line 547 "ltable.c"
    case 12: 
      var $15=$i; //@line 548 "ltable.c"
      var $16=$j_addr; //@line 548 "ltable.c"
      var $add=((($15)+($16))|0); //@line 548 "ltable.c"
      var $div=Math.floor(((($add)>>>0))/(2)); //@line 548 "ltable.c"
      $m=$div; //@line 548 "ltable.c"
      var $17=$t_addr; //@line 549 "ltable.c"
      var $18=$m; //@line 549 "ltable.c"
      var $call14=__Z11luaH_getintP5Tablei($17, $18); //@line 549 "ltable.c"
      var $tt_15=(($call14+8)|0); //@line 549 "ltable.c"
      var $19=HEAP32[(($tt_15)>>2)]; //@line 549 "ltable.c"
      var $cmp16=(($19)|0)==0; //@line 549 "ltable.c"
      if ($cmp16) { label = 13; break; } else { label = 14; break; } //@line 549 "ltable.c"
    case 13: 
      var $20=$m; //@line 549 "ltable.c"
      $j_addr=$20; //@line 549 "ltable.c"
      label = 15; break; //@line 549 "ltable.c"
    case 14: 
      var $21=$m; //@line 550 "ltable.c"
      $i=$21; //@line 550 "ltable.c"
      label = 15; break;
    case 15: 
      label = 11; break; //@line 551 "ltable.c"
    case 16: 
      var $22=$i; //@line 552 "ltable.c"
      $retval=$22; //@line 552 "ltable.c"
      label = 17; break; //@line 552 "ltable.c"
    case 17: 
      var $23=$retval; //@line 553 "ltable.c"

      return $23; //@line 553 "ltable.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL14unbound_searchP5Tablej["X"]=1;

function __ZL10numusehashPK5TablePiS2_($t, $nums, $pnasize) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $nums_addr;
      var $pnasize_addr;
      var $totaluse;
      var $ause;
      var $i;
      var $n;
      $t_addr=$t;
      $nums_addr=$nums;
      $pnasize_addr=$pnasize;
      $totaluse=0; //@line 255 "ltable.c"
      $ause=0; //@line 256 "ltable.c"
      var $0=$t_addr; //@line 257 "ltable.c"
      var $lsizenode=(($0+7)|0); //@line 257 "ltable.c"
      var $1=HEAP8[($lsizenode)]; //@line 257 "ltable.c"
      var $conv=(($1)&255); //@line 257 "ltable.c"
      var $shl=1 << $conv; //@line 257 "ltable.c"
      $i=$shl; //@line 257 "ltable.c"
      label = 3; break; //@line 258 "ltable.c"
    case 3: 
      var $2=$i; //@line 258 "ltable.c"
      var $dec=((($2)-(1))|0); //@line 258 "ltable.c"
      $i=$dec; //@line 258 "ltable.c"
      var $tobool=(($2)|0)!=0; //@line 258 "ltable.c"
      if ($tobool) { label = 4; break; } else { label = 7; break; } //@line 258 "ltable.c"
    case 4: 
      var $3=$i; //@line 259 "ltable.c"
      var $4=$t_addr; //@line 259 "ltable.c"
      var $node=(($4+16)|0); //@line 259 "ltable.c"
      var $5=HEAP32[(($node)>>2)]; //@line 259 "ltable.c"
      var $arrayidx=(($5+((($3)*(28))&-1))|0); //@line 259 "ltable.c"
      $n=$arrayidx; //@line 259 "ltable.c"
      var $6=$n; //@line 260 "ltable.c"
      var $i_val=(($6)|0); //@line 260 "ltable.c"
      var $tt_=(($i_val+8)|0); //@line 260 "ltable.c"
      var $7=HEAP32[(($tt_)>>2)]; //@line 260 "ltable.c"
      var $cmp=(($7)|0)==0; //@line 260 "ltable.c"
      if ($cmp) { label = 6; break; } else { label = 5; break; } //@line 260 "ltable.c"
    case 5: 
      var $8=$n; //@line 261 "ltable.c"
      var $i_key=(($8+12)|0); //@line 261 "ltable.c"
      var $tvk=$i_key; //@line 261 "ltable.c"
      var $9=$nums_addr; //@line 261 "ltable.c"
      var $call=__ZL8countintPK10lua_TValuePi($tvk, $9); //@line 261 "ltable.c"
      var $10=$ause; //@line 261 "ltable.c"
      var $add=((($10)+($call))|0); //@line 261 "ltable.c"
      $ause=$add; //@line 261 "ltable.c"
      var $11=$totaluse; //@line 262 "ltable.c"
      var $inc=((($11)+(1))|0); //@line 262 "ltable.c"
      $totaluse=$inc; //@line 262 "ltable.c"
      label = 6; break; //@line 263 "ltable.c"
    case 6: 
      label = 3; break; //@line 264 "ltable.c"
    case 7: 
      var $12=$ause; //@line 265 "ltable.c"
      var $13=$pnasize_addr; //@line 265 "ltable.c"
      var $14=HEAP32[(($13)>>2)]; //@line 265 "ltable.c"
      var $add1=((($14)+($12))|0); //@line 265 "ltable.c"
      HEAP32[(($13)>>2)]=$add1; //@line 265 "ltable.c"
      var $15=$totaluse; //@line 266 "ltable.c"

      return $15; //@line 266 "ltable.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL10numusehashPK5TablePiS2_["X"]=1;

function __ZL8countintPK10lua_TValuePi($key, $nums) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $key_addr;
      var $nums_addr;
      var $k;
      $key_addr=$key;
      $nums_addr=$nums;
      var $0=$key_addr; //@line 219 "ltable.c"
      var $call=__ZL10arrayindexPK10lua_TValue($0); //@line 219 "ltable.c"
      $k=$call; //@line 219 "ltable.c"
      var $1=$k; //@line 220 "ltable.c"
      var $cmp=0 < (($1)|0); //@line 220 "ltable.c"
      if ($cmp) { label = 3; break; } else { label = 5; break; } //@line 220 "ltable.c"
    case 3: 
      var $2=$k; //@line 220 "ltable.c"
      var $cmp1=(($2)|0) <= 1073741824; //@line 220 "ltable.c"
      if ($cmp1) { label = 4; break; } else { label = 5; break; } //@line 220 "ltable.c"
    case 4: 
      var $3=$k; //@line 221 "ltable.c"
      var $call2=__Z13luaO_ceillog2j($3); //@line 221 "ltable.c"
      var $4=$nums_addr; //@line 221 "ltable.c"
      var $arrayidx=(($4+($call2<<2))|0); //@line 221 "ltable.c"
      var $5=HEAP32[(($arrayidx)>>2)]; //@line 221 "ltable.c"
      var $inc=((($5)+(1))|0); //@line 221 "ltable.c"
      HEAP32[(($arrayidx)>>2)]=$inc; //@line 221 "ltable.c"
      $retval=1; //@line 222 "ltable.c"
      label = 6; break; //@line 222 "ltable.c"
    case 5: 
      $retval=0; //@line 225 "ltable.c"
      label = 6; break; //@line 225 "ltable.c"
    case 6: 
      var $6=$retval; //@line 226 "ltable.c"

      return $6; //@line 226 "ltable.c"
    default: assert(0, "bad label: " + label);
  }

}


function __Z10luaT_gettmP5Table3TMSP7TString($events, $event, $ename) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $events_addr;
      var $event_addr;
      var $ename_addr;
      var $tm;
      $events_addr=$events;
      $event_addr=$event;
      $ename_addr=$ename;
      var $0=$events_addr; //@line 53 "ltm.c"
      var $1=$ename_addr; //@line 53 "ltm.c"
      var $call=__Z11luaH_getstrP5TableP7TString($0, $1); //@line 53 "ltm.c"
      $tm=$call; //@line 53 "ltm.c"
      var $2=$tm; //@line 55 "ltm.c"
      var $tt_=(($2+8)|0); //@line 55 "ltm.c"
      var $3=HEAP32[(($tt_)>>2)]; //@line 55 "ltm.c"
      var $cmp=(($3)|0)==0; //@line 55 "ltm.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 55 "ltm.c"
    case 3: 
      var $4=$event_addr; //@line 56 "ltm.c"
      var $shl=1 << $4; //@line 56 "ltm.c"
      var $conv=(($shl) & 255); //@line 56 "ltm.c"
      var $conv1=(($conv)&255); //@line 56 "ltm.c"
      var $5=$events_addr; //@line 56 "ltm.c"
      var $flags=(($5+6)|0); //@line 56 "ltm.c"
      var $6=HEAP8[($flags)]; //@line 56 "ltm.c"
      var $conv2=(($6)&255); //@line 56 "ltm.c"
      var $or=$conv2 | $conv1; //@line 56 "ltm.c"
      var $conv3=(($or) & 255); //@line 56 "ltm.c"
      HEAP8[($flags)]=$conv3; //@line 56 "ltm.c"
      $retval=0; //@line 57 "ltm.c"
      label = 5; break; //@line 57 "ltm.c"
    case 4: 
      var $7=$tm; //@line 59 "ltm.c"
      $retval=$7; //@line 59 "ltm.c"
      label = 5; break; //@line 59 "ltm.c"
    case 5: 
      var $8=$retval; //@line 60 "ltm.c"

      return $8; //@line 60 "ltm.c"
    default: assert(0, "bad label: " + label);
  }

}


function __Z15luaT_gettmbyobjP9lua_StatePK10lua_TValue3TMS($L, $o, $event) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $o_addr;
      var $event_addr;
      var $mt;
      $L_addr=$L;
      $o_addr=$o;
      $event_addr=$event;
      var $0=$o_addr; //@line 65 "ltm.c"
      var $tt_=(($0+8)|0); //@line 65 "ltm.c"
      var $1=HEAP32[(($tt_)>>2)]; //@line 65 "ltm.c"
      var $and=$1 & 15; //@line 65 "ltm.c"
      if ((($and)|0)==5) {
        label = 3; break;
      }
      else if ((($and)|0)==7) {
        label = 4; break;
      }
      else {
      label = 5; break;
      }
      
    case 3: 
      var $2=$o_addr; //@line 67 "ltm.c"
      var $value_=(($2)|0); //@line 67 "ltm.c"
      var $gc=$value_; //@line 67 "ltm.c"
      var $3=HEAP32[(($gc)>>2)]; //@line 67 "ltm.c"
      var $h=$3; //@line 67 "ltm.c"
      var $metatable=(($h+8)|0); //@line 67 "ltm.c"
      var $4=HEAP32[(($metatable)>>2)]; //@line 67 "ltm.c"
      $mt=$4; //@line 67 "ltm.c"
      label = 6; break; //@line 68 "ltm.c"
    case 4: 
      var $5=$o_addr; //@line 70 "ltm.c"
      var $value_2=(($5)|0); //@line 70 "ltm.c"
      var $gc3=$value_2; //@line 70 "ltm.c"
      var $6=HEAP32[(($gc3)>>2)]; //@line 70 "ltm.c"
      var $u=$6; //@line 70 "ltm.c"
      var $uv=$u; //@line 70 "ltm.c"
      var $metatable4=(($uv+8)|0); //@line 70 "ltm.c"
      var $7=HEAP32[(($metatable4)>>2)]; //@line 70 "ltm.c"
      $mt=$7; //@line 70 "ltm.c"
      label = 6; break; //@line 71 "ltm.c"
    case 5: 
      var $8=$o_addr; //@line 73 "ltm.c"
      var $tt_5=(($8+8)|0); //@line 73 "ltm.c"
      var $9=HEAP32[(($tt_5)>>2)]; //@line 73 "ltm.c"
      var $and6=$9 & 15; //@line 73 "ltm.c"
      var $10=$L_addr; //@line 73 "ltm.c"
      var $l_G=(($10+12)|0); //@line 73 "ltm.c"
      var $11=HEAP32[(($l_G)>>2)]; //@line 73 "ltm.c"
      var $mt7=(($11+232)|0); //@line 73 "ltm.c"
      var $arrayidx=(($mt7+($and6<<2))|0); //@line 73 "ltm.c"
      var $12=HEAP32[(($arrayidx)>>2)]; //@line 73 "ltm.c"
      $mt=$12; //@line 73 "ltm.c"
      label = 6; break; //@line 74 "ltm.c"
    case 6: 
      var $13=$mt; //@line 75 "ltm.c"
      var $tobool=(($13)|0)!=0; //@line 75 "ltm.c"
      if ($tobool) { label = 7; break; } else { label = 8; break; } //@line 75 "ltm.c"
    case 7: 
      var $14=$mt; //@line 75 "ltm.c"
      var $15=$event_addr; //@line 75 "ltm.c"
      var $16=$L_addr; //@line 75 "ltm.c"
      var $l_G8=(($16+12)|0); //@line 75 "ltm.c"
      var $17=HEAP32[(($l_G8)>>2)]; //@line 75 "ltm.c"
      var $tmname=(($17+164)|0); //@line 75 "ltm.c"
      var $arrayidx9=(($tmname+($15<<2))|0); //@line 75 "ltm.c"
      var $18=HEAP32[(($arrayidx9)>>2)]; //@line 75 "ltm.c"
      var $call=__Z11luaH_getstrP5TableP7TString($14, $18); //@line 75 "ltm.c"
      var $cond = $call;label = 9; break; //@line 75 "ltm.c"
    case 8: 
      var $cond = 5243252;label = 9; break; //@line 75 "ltm.c"
    case 9: 
      var $cond; //@line 75 "ltm.c"

      return $cond; //@line 75 "ltm.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z15luaT_gettmbyobjP9lua_StatePK10lua_TValue3TMS["X"]=1;

function __Z13luaV_tonumberPK10lua_TValuePS_($obj, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $obj_addr;
      var $n_addr;
      var $num=__stackBase__;
      var $io;
      $obj_addr=$obj;
      $n_addr=$n;
      var $0=$obj_addr; //@line 37 "lvm.c"
      var $tt_=(($0+8)|0); //@line 37 "lvm.c"
      var $1=HEAP32[(($tt_)>>2)]; //@line 37 "lvm.c"
      var $cmp=(($1)|0)==3; //@line 37 "lvm.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 37 "lvm.c"
    case 3: 
      var $2=$obj_addr; //@line 37 "lvm.c"
      $retval=$2; //@line 37 "lvm.c"
      label = 8; break; //@line 37 "lvm.c"
    case 4: 
      var $3=$obj_addr; //@line 38 "lvm.c"
      var $tt_1=(($3+8)|0); //@line 38 "lvm.c"
      var $4=HEAP32[(($tt_1)>>2)]; //@line 38 "lvm.c"
      var $and=$4 & 15; //@line 38 "lvm.c"
      var $cmp2=(($and)|0)==4; //@line 38 "lvm.c"
      if ($cmp2) { label = 5; break; } else { label = 7; break; } //@line 38 "lvm.c"
    case 5: 
      var $5=$obj_addr; //@line 38 "lvm.c"
      var $value_=(($5)|0); //@line 38 "lvm.c"
      var $gc=$value_; //@line 38 "lvm.c"
      var $6=HEAP32[(($gc)>>2)]; //@line 38 "lvm.c"
      var $ts=$6; //@line 38 "lvm.c"
      var $add_ptr=(($ts+16)|0); //@line 38 "lvm.c"
      var $7=$add_ptr; //@line 38 "lvm.c"
      var $8=$obj_addr; //@line 38 "lvm.c"
      var $value_3=(($8)|0); //@line 38 "lvm.c"
      var $gc4=$value_3; //@line 38 "lvm.c"
      var $9=HEAP32[(($gc4)>>2)]; //@line 38 "lvm.c"
      var $ts5=$9; //@line 38 "lvm.c"
      var $tsv=$ts5; //@line 38 "lvm.c"
      var $len=(($tsv+12)|0); //@line 38 "lvm.c"
      var $10=HEAP32[(($len)>>2)]; //@line 38 "lvm.c"
      var $call=__Z10luaO_str2dPKcjPd($7, $10, $num); //@line 38 "lvm.c"
      var $tobool=(($call)|0)!=0; //@line 38 "lvm.c"
      if ($tobool) { label = 6; break; } else { label = 7; break; } //@line 38 "lvm.c"
    case 6: 
      var $11=$n_addr; //@line 39 "lvm.c"
      $io=$11; //@line 39 "lvm.c"
      var $12=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($num)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($num)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 39 "lvm.c"
      var $13=$io; //@line 39 "lvm.c"
      var $value_7=(($13)|0); //@line 39 "lvm.c"
      var $n8=$value_7; //@line 39 "lvm.c"
      (HEAPF64[(tempDoublePtr)>>3]=$12,HEAP32[(($n8)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n8)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); //@line 39 "lvm.c"
      var $14=$io; //@line 39 "lvm.c"
      var $tt_9=(($14+8)|0); //@line 39 "lvm.c"
      HEAP32[(($tt_9)>>2)]=3; //@line 39 "lvm.c"
      var $15=$n_addr; //@line 40 "lvm.c"
      $retval=$15; //@line 40 "lvm.c"
      label = 8; break; //@line 40 "lvm.c"
    case 7: 
      $retval=0; //@line 43 "lvm.c"
      label = 8; break; //@line 43 "lvm.c"
    case 8: 
      var $16=$retval; //@line 44 "lvm.c"
      STACKTOP = __stackBase__;
      return $16; //@line 44 "lvm.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z13luaV_tonumberPK10lua_TValuePS_["X"]=1;

function __Z13luaV_tostringP9lua_StateP10lua_TValue($L, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $obj_addr;
      var $s=__stackBase__;
      var $n;
      var $l;
      var $io;
      var $x_;
      $L_addr=$L;
      $obj_addr=$obj;
      var $0=$obj_addr; //@line 48 "lvm.c"
      var $tt_=(($0+8)|0); //@line 48 "lvm.c"
      var $1=HEAP32[(($tt_)>>2)]; //@line 48 "lvm.c"
      var $cmp=(($1)|0)==3; //@line 48 "lvm.c"
      if ($cmp) { label = 4; break; } else { label = 3; break; } //@line 48 "lvm.c"
    case 3: 
      $retval=0; //@line 49 "lvm.c"
      label = 5; break; //@line 49 "lvm.c"
    case 4: 
      var $2=$obj_addr; //@line 52 "lvm.c"
      var $value_=(($2)|0); //@line 52 "lvm.c"
      var $n1=$value_; //@line 52 "lvm.c"
      var $3=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n1)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n1)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 52 "lvm.c"
      $n=$3; //@line 52 "lvm.c"
      var $arraydecay=(($s)|0); //@line 53 "lvm.c"
      var $4=$n; //@line 53 "lvm.c"
      var $call=_sprintf($arraydecay, ((5243756)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$4,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt)); //@line 53 "lvm.c"
      $l=$call; //@line 53 "lvm.c"
      var $5=$obj_addr; //@line 54 "lvm.c"
      $io=$5; //@line 54 "lvm.c"
      var $6=$L_addr; //@line 54 "lvm.c"
      var $arraydecay2=(($s)|0); //@line 54 "lvm.c"
      var $7=$l; //@line 54 "lvm.c"
      var $call3=__Z12luaS_newlstrP9lua_StatePKcj($6, $arraydecay2, $7); //@line 54 "lvm.c"
      $x_=$call3; //@line 54 "lvm.c"
      var $8=$x_; //@line 54 "lvm.c"
      var $9=$8; //@line 54 "lvm.c"
      var $10=$io; //@line 54 "lvm.c"
      var $value_4=(($10)|0); //@line 54 "lvm.c"
      var $gc=$value_4; //@line 54 "lvm.c"
      HEAP32[(($gc)>>2)]=$9; //@line 54 "lvm.c"
      var $11=$x_; //@line 54 "lvm.c"
      var $tsv=$11; //@line 54 "lvm.c"
      var $tt=(($tsv+4)|0); //@line 54 "lvm.c"
      var $12=HEAP8[($tt)]; //@line 54 "lvm.c"
      var $conv=(($12)&255); //@line 54 "lvm.c"
      var $or=$conv | 64; //@line 54 "lvm.c"
      var $13=$io; //@line 54 "lvm.c"
      var $tt_5=(($13+8)|0); //@line 54 "lvm.c"
      HEAP32[(($tt_5)>>2)]=$or; //@line 54 "lvm.c"
      $retval=1; //@line 55 "lvm.c"
      label = 5; break; //@line 55 "lvm.c"
    case 5: 
      var $14=$retval; //@line 57 "lvm.c"
      STACKTOP = __stackBase__;
      return $14; //@line 57 "lvm.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z13luaV_tostringP9lua_StateP10lua_TValue["X"]=1;

function __ZL6callTMP9lua_StatePK10lua_TValueS3_S3_PS1_i($L, $f, $p1, $p2, $p3, $hasres) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $f_addr;
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $hasres_addr;
      var $result;
      var $io2;
      var $io1;
      var $io23;
      var $io14;
      var $io211;
      var $io112;
      var $io219;
      var $io120;
      var $io238;
      var $io141;
      $L_addr=$L;
      $f_addr=$f;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $hasres_addr=$hasres;
      var $0=$p3_addr; //@line 95 "lvm.c"
      var $1=$0; //@line 95 "lvm.c"
      var $2=$L_addr; //@line 95 "lvm.c"
      var $stack=(($2+28)|0); //@line 95 "lvm.c"
      var $3=HEAP32[(($stack)>>2)]; //@line 95 "lvm.c"
      var $4=$3; //@line 95 "lvm.c"
      var $sub_ptr_lhs_cast=$1; //@line 95 "lvm.c"
      var $sub_ptr_rhs_cast=$4; //@line 95 "lvm.c"
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 95 "lvm.c"
      $result=$sub_ptr_sub; //@line 95 "lvm.c"
      var $5=$f_addr; //@line 96 "lvm.c"
      $io2=$5; //@line 96 "lvm.c"
      var $6=$L_addr; //@line 96 "lvm.c"
      var $top=(($6+8)|0); //@line 96 "lvm.c"
      var $7=HEAP32[(($top)>>2)]; //@line 96 "lvm.c"
      var $incdec_ptr=(($7+12)|0); //@line 96 "lvm.c"
      HEAP32[(($top)>>2)]=$incdec_ptr; //@line 96 "lvm.c"
      $io1=$7; //@line 96 "lvm.c"
      var $8=$io1; //@line 96 "lvm.c"
      var $value_=(($8)|0); //@line 96 "lvm.c"
      var $9=$io2; //@line 96 "lvm.c"
      var $value_1=(($9)|0); //@line 96 "lvm.c"
      var $10=$value_; //@line 96 "lvm.c"
      var $11=$value_1; //@line 96 "lvm.c"
      assert(8 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)]; //@line 96 "lvm.c"
      var $12=$io2; //@line 96 "lvm.c"
      var $tt_=(($12+8)|0); //@line 96 "lvm.c"
      var $13=HEAP32[(($tt_)>>2)]; //@line 96 "lvm.c"
      var $14=$io1; //@line 96 "lvm.c"
      var $tt_2=(($14+8)|0); //@line 96 "lvm.c"
      HEAP32[(($tt_2)>>2)]=$13; //@line 96 "lvm.c"
      var $15=$p1_addr; //@line 97 "lvm.c"
      $io23=$15; //@line 97 "lvm.c"
      var $16=$L_addr; //@line 97 "lvm.c"
      var $top5=(($16+8)|0); //@line 97 "lvm.c"
      var $17=HEAP32[(($top5)>>2)]; //@line 97 "lvm.c"
      var $incdec_ptr6=(($17+12)|0); //@line 97 "lvm.c"
      HEAP32[(($top5)>>2)]=$incdec_ptr6; //@line 97 "lvm.c"
      $io14=$17; //@line 97 "lvm.c"
      var $18=$io14; //@line 97 "lvm.c"
      var $value_7=(($18)|0); //@line 97 "lvm.c"
      var $19=$io23; //@line 97 "lvm.c"
      var $value_8=(($19)|0); //@line 97 "lvm.c"
      var $20=$value_7; //@line 97 "lvm.c"
      var $21=$value_8; //@line 97 "lvm.c"
      assert(8 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)]; //@line 97 "lvm.c"
      var $22=$io23; //@line 97 "lvm.c"
      var $tt_9=(($22+8)|0); //@line 97 "lvm.c"
      var $23=HEAP32[(($tt_9)>>2)]; //@line 97 "lvm.c"
      var $24=$io14; //@line 97 "lvm.c"
      var $tt_10=(($24+8)|0); //@line 97 "lvm.c"
      HEAP32[(($tt_10)>>2)]=$23; //@line 97 "lvm.c"
      var $25=$p2_addr; //@line 98 "lvm.c"
      $io211=$25; //@line 98 "lvm.c"
      var $26=$L_addr; //@line 98 "lvm.c"
      var $top13=(($26+8)|0); //@line 98 "lvm.c"
      var $27=HEAP32[(($top13)>>2)]; //@line 98 "lvm.c"
      var $incdec_ptr14=(($27+12)|0); //@line 98 "lvm.c"
      HEAP32[(($top13)>>2)]=$incdec_ptr14; //@line 98 "lvm.c"
      $io112=$27; //@line 98 "lvm.c"
      var $28=$io112; //@line 98 "lvm.c"
      var $value_15=(($28)|0); //@line 98 "lvm.c"
      var $29=$io211; //@line 98 "lvm.c"
      var $value_16=(($29)|0); //@line 98 "lvm.c"
      var $30=$value_15; //@line 98 "lvm.c"
      var $31=$value_16; //@line 98 "lvm.c"
      assert(8 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)]; //@line 98 "lvm.c"
      var $32=$io211; //@line 98 "lvm.c"
      var $tt_17=(($32+8)|0); //@line 98 "lvm.c"
      var $33=HEAP32[(($tt_17)>>2)]; //@line 98 "lvm.c"
      var $34=$io112; //@line 98 "lvm.c"
      var $tt_18=(($34+8)|0); //@line 98 "lvm.c"
      HEAP32[(($tt_18)>>2)]=$33; //@line 98 "lvm.c"
      var $35=$hasres_addr; //@line 99 "lvm.c"
      var $tobool=(($35)|0)!=0; //@line 99 "lvm.c"
      if ($tobool) { label = 4; break; } else { label = 3; break; } //@line 99 "lvm.c"
    case 3: 
      var $36=$p3_addr; //@line 100 "lvm.c"
      $io219=$36; //@line 100 "lvm.c"
      var $37=$L_addr; //@line 100 "lvm.c"
      var $top21=(($37+8)|0); //@line 100 "lvm.c"
      var $38=HEAP32[(($top21)>>2)]; //@line 100 "lvm.c"
      var $incdec_ptr22=(($38+12)|0); //@line 100 "lvm.c"
      HEAP32[(($top21)>>2)]=$incdec_ptr22; //@line 100 "lvm.c"
      $io120=$38; //@line 100 "lvm.c"
      var $39=$io120; //@line 100 "lvm.c"
      var $value_23=(($39)|0); //@line 100 "lvm.c"
      var $40=$io219; //@line 100 "lvm.c"
      var $value_24=(($40)|0); //@line 100 "lvm.c"
      var $41=$value_23; //@line 100 "lvm.c"
      var $42=$value_24; //@line 100 "lvm.c"
      assert(8 % 1 === 0);HEAP32[(($41)>>2)]=HEAP32[(($42)>>2)];HEAP32[((($41)+(4))>>2)]=HEAP32[((($42)+(4))>>2)]; //@line 100 "lvm.c"
      var $43=$io219; //@line 100 "lvm.c"
      var $tt_25=(($43+8)|0); //@line 100 "lvm.c"
      var $44=HEAP32[(($tt_25)>>2)]; //@line 100 "lvm.c"
      var $45=$io120; //@line 100 "lvm.c"
      var $tt_26=(($45+8)|0); //@line 100 "lvm.c"
      HEAP32[(($tt_26)>>2)]=$44; //@line 100 "lvm.c"
      label = 4; break; //@line 100 "lvm.c"
    case 4: 
      var $46=$L_addr; //@line 101 "lvm.c"
      var $stack_last=(($46+24)|0); //@line 101 "lvm.c"
      var $47=HEAP32[(($stack_last)>>2)]; //@line 101 "lvm.c"
      var $48=$L_addr; //@line 101 "lvm.c"
      var $top27=(($48+8)|0); //@line 101 "lvm.c"
      var $49=HEAP32[(($top27)>>2)]; //@line 101 "lvm.c"
      var $sub_ptr_lhs_cast28=$47; //@line 101 "lvm.c"
      var $sub_ptr_rhs_cast29=$49; //@line 101 "lvm.c"
      var $sub_ptr_sub30=((($sub_ptr_lhs_cast28)-($sub_ptr_rhs_cast29))|0); //@line 101 "lvm.c"
      var $sub_ptr_div=((((($sub_ptr_sub30)|0))/(12))&-1); //@line 101 "lvm.c"
      var $cmp=(($sub_ptr_div)|0) <= 0; //@line 101 "lvm.c"
      if ($cmp) { label = 5; break; } else { label = 6; break; } //@line 101 "lvm.c"
    case 5: 
      var $50=$L_addr; //@line 101 "lvm.c"
      __Z14luaD_growstackP9lua_Statei($50, 0); //@line 101 "lvm.c"
      label = 7; break; //@line 101 "lvm.c"
    case 6: 
      label = 7; break;
    case 7: 
      var $51=$L_addr; //@line 103 "lvm.c"
      var $52=$L_addr; //@line 103 "lvm.c"
      var $top33=(($52+8)|0); //@line 103 "lvm.c"
      var $53=HEAP32[(($top33)>>2)]; //@line 103 "lvm.c"
      var $54=$hasres_addr; //@line 103 "lvm.c"
      var $sub=(((4)-($54))|0); //@line 103 "lvm.c"
      var $idx_neg=(((-$sub))|0); //@line 103 "lvm.c"
      var $add_ptr=(($53+((($idx_neg)*(12))&-1))|0); //@line 103 "lvm.c"
      var $55=$hasres_addr; //@line 103 "lvm.c"
      var $56=$L_addr; //@line 103 "lvm.c"
      var $ci=(($56+16)|0); //@line 103 "lvm.c"
      var $57=HEAP32[(($ci)>>2)]; //@line 103 "lvm.c"
      var $callstatus=(($57+18)|0); //@line 103 "lvm.c"
      var $58=HEAP8[($callstatus)]; //@line 103 "lvm.c"
      var $conv=(($58)&255); //@line 103 "lvm.c"
      var $and=$conv & 1; //@line 103 "lvm.c"
      __Z9luaD_callP9lua_StateP10lua_TValueii($51, $add_ptr, $55, $and); //@line 103 "lvm.c"
      var $59=$hasres_addr; //@line 104 "lvm.c"
      var $tobool34=(($59)|0)!=0; //@line 104 "lvm.c"
      if ($tobool34) { label = 8; break; } else { label = 9; break; } //@line 104 "lvm.c"
    case 8: 
      var $60=$L_addr; //@line 105 "lvm.c"
      var $stack36=(($60+28)|0); //@line 105 "lvm.c"
      var $61=HEAP32[(($stack36)>>2)]; //@line 105 "lvm.c"
      var $62=$61; //@line 105 "lvm.c"
      var $63=$result; //@line 105 "lvm.c"
      var $add_ptr37=(($62+$63)|0); //@line 105 "lvm.c"
      var $64=$add_ptr37; //@line 105 "lvm.c"
      $p3_addr=$64; //@line 105 "lvm.c"
      var $65=$L_addr; //@line 106 "lvm.c"
      var $top39=(($65+8)|0); //@line 106 "lvm.c"
      var $66=HEAP32[(($top39)>>2)]; //@line 106 "lvm.c"
      var $incdec_ptr40=((($66)-(12))|0); //@line 106 "lvm.c"
      HEAP32[(($top39)>>2)]=$incdec_ptr40; //@line 106 "lvm.c"
      $io238=$incdec_ptr40; //@line 106 "lvm.c"
      var $67=$p3_addr; //@line 106 "lvm.c"
      $io141=$67; //@line 106 "lvm.c"
      var $68=$io141; //@line 106 "lvm.c"
      var $value_42=(($68)|0); //@line 106 "lvm.c"
      var $69=$io238; //@line 106 "lvm.c"
      var $value_43=(($69)|0); //@line 106 "lvm.c"
      var $70=$value_42; //@line 106 "lvm.c"
      var $71=$value_43; //@line 106 "lvm.c"
      assert(8 % 1 === 0);HEAP32[(($70)>>2)]=HEAP32[(($71)>>2)];HEAP32[((($70)+(4))>>2)]=HEAP32[((($71)+(4))>>2)]; //@line 106 "lvm.c"
      var $72=$io238; //@line 106 "lvm.c"
      var $tt_44=(($72+8)|0); //@line 106 "lvm.c"
      var $73=HEAP32[(($tt_44)>>2)]; //@line 106 "lvm.c"
      var $74=$io141; //@line 106 "lvm.c"
      var $tt_45=(($74+8)|0); //@line 106 "lvm.c"
      HEAP32[(($tt_45)>>2)]=$73; //@line 106 "lvm.c"
      label = 9; break; //@line 107 "lvm.c"
    case 9: 

      return; //@line 108 "lvm.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL6callTMP9lua_StatePK10lua_TValueS3_S3_PS1_i["X"]=1;

function __ZL8l_strcmpPK7TStringS1_($ls, $rs) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $ls_addr;
      var $rs_addr;
      var $l;
      var $ll;
      var $r;
      var $lr;
      var $temp;
      var $len4;
      $ls_addr=$ls;
      $rs_addr=$rs;
      var $0=$ls_addr; //@line 211 "lvm.c"
      var $add_ptr=(($0+16)|0); //@line 211 "lvm.c"
      var $1=$add_ptr; //@line 211 "lvm.c"
      $l=$1; //@line 211 "lvm.c"
      var $2=$ls_addr; //@line 212 "lvm.c"
      var $tsv=$2; //@line 212 "lvm.c"
      var $len=(($tsv+12)|0); //@line 212 "lvm.c"
      var $3=HEAP32[(($len)>>2)]; //@line 212 "lvm.c"
      $ll=$3; //@line 212 "lvm.c"
      var $4=$rs_addr; //@line 213 "lvm.c"
      var $add_ptr1=(($4+16)|0); //@line 213 "lvm.c"
      var $5=$add_ptr1; //@line 213 "lvm.c"
      $r=$5; //@line 213 "lvm.c"
      var $6=$rs_addr; //@line 214 "lvm.c"
      var $tsv2=$6; //@line 214 "lvm.c"
      var $len3=(($tsv2+12)|0); //@line 214 "lvm.c"
      var $7=HEAP32[(($len3)>>2)]; //@line 214 "lvm.c"
      $lr=$7; //@line 214 "lvm.c"
      label = 3; break; //@line 215 "lvm.c"
    case 3: 
      var $8=$l; //@line 216 "lvm.c"
      var $9=$r; //@line 216 "lvm.c"
      var $call=_strcmp($8, $9); //@line 216 "lvm.c"
      $temp=$call; //@line 216 "lvm.c"
      var $10=$temp; //@line 217 "lvm.c"
      var $cmp=(($10)|0)!=0; //@line 217 "lvm.c"
      if ($cmp) { label = 4; break; } else { label = 5; break; } //@line 217 "lvm.c"
    case 4: 
      var $11=$temp; //@line 217 "lvm.c"
      $retval=$11; //@line 217 "lvm.c"
      label = 12; break; //@line 217 "lvm.c"
    case 5: 
      var $12=$l; //@line 219 "lvm.c"
      var $call5=_strlen($12); //@line 219 "lvm.c"
      $len4=$call5; //@line 219 "lvm.c"
      var $13=$len4; //@line 220 "lvm.c"
      var $14=$lr; //@line 220 "lvm.c"
      var $cmp6=(($13)|0)==(($14)|0); //@line 220 "lvm.c"
      if ($cmp6) { label = 6; break; } else { label = 7; break; } //@line 220 "lvm.c"
    case 6: 
      var $15=$len4; //@line 221 "lvm.c"
      var $16=$ll; //@line 221 "lvm.c"
      var $cmp8=(($15)|0)==(($16)|0); //@line 221 "lvm.c"
      var $cond=$cmp8 ? 0 : 1; //@line 221 "lvm.c"
      $retval=$cond; //@line 221 "lvm.c"
      label = 12; break; //@line 221 "lvm.c"
    case 7: 
      var $17=$len4; //@line 222 "lvm.c"
      var $18=$ll; //@line 222 "lvm.c"
      var $cmp10=(($17)|0)==(($18)|0); //@line 222 "lvm.c"
      if ($cmp10) { label = 8; break; } else { label = 9; break; } //@line 222 "lvm.c"
    case 8: 
      $retval=-1; //@line 223 "lvm.c"
      label = 12; break; //@line 223 "lvm.c"
    case 9: 
      label = 10; break;
    case 10: 
      var $19=$len4; //@line 225 "lvm.c"
      var $inc=((($19)+(1))|0); //@line 225 "lvm.c"
      $len4=$inc; //@line 225 "lvm.c"
      var $20=$len4; //@line 226 "lvm.c"
      var $21=$l; //@line 226 "lvm.c"
      var $add_ptr13=(($21+$20)|0); //@line 226 "lvm.c"
      $l=$add_ptr13; //@line 226 "lvm.c"
      var $22=$len4; //@line 226 "lvm.c"
      var $23=$ll; //@line 226 "lvm.c"
      var $sub=((($23)-($22))|0); //@line 226 "lvm.c"
      $ll=$sub; //@line 226 "lvm.c"
      var $24=$len4; //@line 226 "lvm.c"
      var $25=$r; //@line 226 "lvm.c"
      var $add_ptr14=(($25+$24)|0); //@line 226 "lvm.c"
      $r=$add_ptr14; //@line 226 "lvm.c"
      var $26=$len4; //@line 226 "lvm.c"
      var $27=$lr; //@line 226 "lvm.c"
      var $sub15=((($27)-($26))|0); //@line 226 "lvm.c"
      $lr=$sub15; //@line 226 "lvm.c"
      label = 11; break;
    case 11: 
      label = 3; break; //@line 228 "lvm.c"
    case 12: 
      var $28=$retval; //@line 229 "lvm.c"

      return $28; //@line 229 "lvm.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL8l_strcmpPK7TStringS1_["X"]=1;

function __ZL12call_orderTMP9lua_StatePK10lua_TValueS3_3TMS($L, $p1, $p2, $event) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $p1_addr;
      var $p2_addr;
      var $event_addr;
      $L_addr=$L;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $event_addr=$event;
      var $0=$L_addr; //@line 203 "lvm.c"
      var $1=$p1_addr; //@line 203 "lvm.c"
      var $2=$p2_addr; //@line 203 "lvm.c"
      var $3=$L_addr; //@line 203 "lvm.c"
      var $top=(($3+8)|0); //@line 203 "lvm.c"
      var $4=HEAP32[(($top)>>2)]; //@line 203 "lvm.c"
      var $5=$event_addr; //@line 203 "lvm.c"
      var $call=__ZL10call_binTMP9lua_StatePK10lua_TValueS3_PS1_3TMS($0, $1, $2, $4, $5); //@line 203 "lvm.c"
      var $tobool=(($call)|0)!=0; //@line 203 "lvm.c"
      if ($tobool) { label = 4; break; } else { label = 3; break; } //@line 203 "lvm.c"
    case 3: 
      $retval=-1; //@line 204 "lvm.c"
      label = 9; break; //@line 204 "lvm.c"
    case 4: 
      var $6=$L_addr; //@line 206 "lvm.c"
      var $top1=(($6+8)|0); //@line 206 "lvm.c"
      var $7=HEAP32[(($top1)>>2)]; //@line 206 "lvm.c"
      var $tt_=(($7+8)|0); //@line 206 "lvm.c"
      var $8=HEAP32[(($tt_)>>2)]; //@line 206 "lvm.c"
      var $cmp=(($8)|0)==0; //@line 206 "lvm.c"
      if ($cmp) { var $16 = 1;label = 8; break; } else { label = 5; break; } //@line 206 "lvm.c"
    case 5: 
      var $9=$L_addr; //@line 206 "lvm.c"
      var $top2=(($9+8)|0); //@line 206 "lvm.c"
      var $10=HEAP32[(($top2)>>2)]; //@line 206 "lvm.c"
      var $tt_3=(($10+8)|0); //@line 206 "lvm.c"
      var $11=HEAP32[(($tt_3)>>2)]; //@line 206 "lvm.c"
      var $cmp4=(($11)|0)==1; //@line 206 "lvm.c"
      if ($cmp4) { label = 6; break; } else { var $15 = 0;label = 7; break; } //@line 206 "lvm.c"
    case 6: 
      var $12=$L_addr; //@line 206 "lvm.c"
      var $top5=(($12+8)|0); //@line 206 "lvm.c"
      var $13=HEAP32[(($top5)>>2)]; //@line 206 "lvm.c"
      var $value_=(($13)|0); //@line 206 "lvm.c"
      var $b=$value_; //@line 206 "lvm.c"
      var $14=HEAP32[(($b)>>2)]; //@line 206 "lvm.c"
      var $cmp6=(($14)|0)==0; //@line 206 "lvm.c"
      var $15 = $cmp6;label = 7; break;
    case 7: 
      var $15;
      var $16 = $15;label = 8; break;
    case 8: 
      var $16;
      var $lnot=$16 ^ 1;
      var $conv=(($lnot)&1);
      $retval=$conv;
      label = 9; break;
    case 9: 
      var $17=$retval; //@line 207 "lvm.c"

      return $17; //@line 207 "lvm.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL12call_orderTMP9lua_StatePK10lua_TValueS3_3TMS["X"]=1;

function __Z13luaV_gettableP9lua_StatePK10lua_TValuePS1_S4_($L, $t, $key, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $t_addr;
      var $key_addr;
      var $val_addr;
      var $loop;
      var $tm;
      var $h;
      var $res;
      var $io2;
      var $io1;
      $L_addr=$L;
      $t_addr=$t;
      $key_addr=$key;
      $val_addr=$val;
      $loop=0; //@line 113 "lvm.c"
      label = 3; break; //@line 113 "lvm.c"
    case 3: 
      var $0=$loop; //@line 113 "lvm.c"
      var $cmp=(($0)|0) < 100; //@line 113 "lvm.c"
      if ($cmp) { label = 4; break; } else { label = 22; break; } //@line 113 "lvm.c"
    case 4: 
      var $1=$t_addr; //@line 115 "lvm.c"
      var $tt_=(($1+8)|0); //@line 115 "lvm.c"
      var $2=HEAP32[(($tt_)>>2)]; //@line 115 "lvm.c"
      var $cmp1=(($2)|0)==69; //@line 115 "lvm.c"
      if ($cmp1) { label = 5; break; } else { label = 15; break; } //@line 115 "lvm.c"
    case 5: 
      var $3=$t_addr; //@line 116 "lvm.c"
      var $value_=(($3)|0); //@line 116 "lvm.c"
      var $gc=$value_; //@line 116 "lvm.c"
      var $4=HEAP32[(($gc)>>2)]; //@line 116 "lvm.c"
      var $h2=$4; //@line 116 "lvm.c"
      $h=$h2; //@line 116 "lvm.c"
      var $5=$h; //@line 117 "lvm.c"
      var $6=$key_addr; //@line 117 "lvm.c"
      var $call=__Z8luaH_getP5TablePK10lua_TValue($5, $6); //@line 117 "lvm.c"
      $res=$call; //@line 117 "lvm.c"
      var $7=$res; //@line 118 "lvm.c"
      var $tt_3=(($7+8)|0); //@line 118 "lvm.c"
      var $8=HEAP32[(($tt_3)>>2)]; //@line 118 "lvm.c"
      var $cmp4=(($8)|0)==0; //@line 118 "lvm.c"
      if ($cmp4) { label = 6; break; } else { label = 13; break; } //@line 118 "lvm.c"
    case 6: 
      var $9=$h; //@line 118 "lvm.c"
      var $metatable=(($9+8)|0); //@line 118 "lvm.c"
      var $10=HEAP32[(($metatable)>>2)]; //@line 118 "lvm.c"
      var $cmp5=(($10)|0)==0; //@line 118 "lvm.c"
      if ($cmp5) { label = 7; break; } else { label = 8; break; } //@line 118 "lvm.c"
    case 7: 
      var $cond12 = 0;label = 12; break; //@line 118 "lvm.c"
    case 8: 
      var $11=$h; //@line 118 "lvm.c"
      var $metatable6=(($11+8)|0); //@line 118 "lvm.c"
      var $12=HEAP32[(($metatable6)>>2)]; //@line 118 "lvm.c"
      var $flags=(($12+6)|0); //@line 118 "lvm.c"
      var $13=HEAP8[($flags)]; //@line 118 "lvm.c"
      var $conv=(($13)&255); //@line 118 "lvm.c"
      var $and=$conv & 1; //@line 118 "lvm.c"
      var $tobool=(($and)|0)!=0; //@line 118 "lvm.c"
      if ($tobool) { label = 9; break; } else { label = 10; break; } //@line 118 "lvm.c"
    case 9: 
      var $cond = 0;label = 11; break; //@line 118 "lvm.c"
    case 10: 
      var $14=$h; //@line 119 "lvm.c"
      var $metatable9=(($14+8)|0); //@line 119 "lvm.c"
      var $15=HEAP32[(($metatable9)>>2)]; //@line 119 "lvm.c"
      var $16=$L_addr; //@line 119 "lvm.c"
      var $l_G=(($16+12)|0); //@line 119 "lvm.c"
      var $17=HEAP32[(($l_G)>>2)]; //@line 119 "lvm.c"
      var $tmname=(($17+164)|0); //@line 119 "lvm.c"
      var $arrayidx=(($tmname)|0); //@line 119 "lvm.c"
      var $18=HEAP32[(($arrayidx)>>2)]; //@line 119 "lvm.c"
      var $call10=__Z10luaT_gettmP5Table3TMSP7TString($15, 0, $18); //@line 119 "lvm.c"
      var $cond = $call10;label = 11; break; //@line 119 "lvm.c"
    case 11: 
      var $cond; //@line 119 "lvm.c"
      var $cond12 = $cond;label = 12; break; //@line 119 "lvm.c"
    case 12: 
      var $cond12; //@line 119 "lvm.c"
      $tm=$cond12; //@line 119 "lvm.c"
      var $cmp13=(($cond12)|0)==0; //@line 119 "lvm.c"
      if ($cmp13) { label = 13; break; } else { label = 14; break; } //@line 119 "lvm.c"
    case 13: 
      var $19=$res; //@line 120 "lvm.c"
      $io2=$19; //@line 120 "lvm.c"
      var $20=$val_addr; //@line 120 "lvm.c"
      $io1=$20; //@line 120 "lvm.c"
      var $21=$io1; //@line 120 "lvm.c"
      var $value_15=(($21)|0); //@line 120 "lvm.c"
      var $22=$io2; //@line 120 "lvm.c"
      var $value_16=(($22)|0); //@line 120 "lvm.c"
      var $23=$value_15; //@line 120 "lvm.c"
      var $24=$value_16; //@line 120 "lvm.c"
      assert(8 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)]; //@line 120 "lvm.c"
      var $25=$io2; //@line 120 "lvm.c"
      var $tt_17=(($25+8)|0); //@line 120 "lvm.c"
      var $26=HEAP32[(($tt_17)>>2)]; //@line 120 "lvm.c"
      var $27=$io1; //@line 120 "lvm.c"
      var $tt_18=(($27+8)|0); //@line 120 "lvm.c"
      HEAP32[(($tt_18)>>2)]=$26; //@line 120 "lvm.c"
      label = 23; break; //@line 121 "lvm.c"
    case 14: 
      label = 18; break; //@line 124 "lvm.c"
    case 15: 
      var $28=$L_addr; //@line 125 "lvm.c"
      var $29=$t_addr; //@line 125 "lvm.c"
      var $call19=__Z15luaT_gettmbyobjP9lua_StatePK10lua_TValue3TMS($28, $29, 0); //@line 125 "lvm.c"
      $tm=$call19; //@line 125 "lvm.c"
      var $tt_20=(($call19+8)|0); //@line 125 "lvm.c"
      var $30=HEAP32[(($tt_20)>>2)]; //@line 125 "lvm.c"
      var $cmp21=(($30)|0)==0; //@line 125 "lvm.c"
      if ($cmp21) { label = 16; break; } else { label = 17; break; } //@line 125 "lvm.c"
    case 16: 
      var $31=$L_addr; //@line 126 "lvm.c"
      var $32=$t_addr; //@line 126 "lvm.c"
      __Z14luaG_typeerrorP9lua_StatePK10lua_TValuePKc($31, $32, ((5243948)|0)); //@line 126 "lvm.c"
      throw "Reached an unreachable!" //@line 126 "lvm.c"
    case 17: 
      label = 18; break;
    case 18: 
      var $33=$tm; //@line 127 "lvm.c"
      var $tt_25=(($33+8)|0); //@line 127 "lvm.c"
      var $34=HEAP32[(($tt_25)>>2)]; //@line 127 "lvm.c"
      var $and26=$34 & 15; //@line 127 "lvm.c"
      var $cmp27=(($and26)|0)==6; //@line 127 "lvm.c"
      if ($cmp27) { label = 19; break; } else { label = 20; break; } //@line 127 "lvm.c"
    case 19: 
      var $35=$L_addr; //@line 128 "lvm.c"
      var $36=$tm; //@line 128 "lvm.c"
      var $37=$t_addr; //@line 128 "lvm.c"
      var $38=$key_addr; //@line 128 "lvm.c"
      var $39=$val_addr; //@line 128 "lvm.c"
      __ZL6callTMP9lua_StatePK10lua_TValueS3_S3_PS1_i($35, $36, $37, $38, $39, 1); //@line 128 "lvm.c"
      label = 23; break; //@line 129 "lvm.c"
    case 20: 
      var $40=$tm; //@line 131 "lvm.c"
      $t_addr=$40; //@line 131 "lvm.c"
      label = 21; break; //@line 132 "lvm.c"
    case 21: 
      var $41=$loop; //@line 113 "lvm.c"
      var $inc=((($41)+(1))|0); //@line 113 "lvm.c"
      $loop=$inc; //@line 113 "lvm.c"
      label = 3; break; //@line 113 "lvm.c"
    case 22: 
      var $42=$L_addr; //@line 133 "lvm.c"
      __Z13luaG_runerrorP9lua_StatePKcz($42, ((5243824)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 133 "lvm.c"
      throw "Reached an unreachable!" //@line 133 "lvm.c"
    case 23: 
      STACKTOP = __stackBase__;
      return; //@line 134 "lvm.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z13luaV_gettableP9lua_StatePK10lua_TValuePS1_S4_["X"]=1;

function __Z13luaV_settableP9lua_StatePK10lua_TValuePS1_S4_($L, $t, $key, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $t_addr;
      var $key_addr;
      var $val_addr;
      var $loop;
      var $tm;
      var $h;
      var $oldval;
      var $io2;
      var $io1;
      $L_addr=$L;
      $t_addr=$t;
      $key_addr=$key;
      $val_addr=$val;
      $loop=0; //@line 139 "lvm.c"
      label = 3; break; //@line 139 "lvm.c"
    case 3: 
      var $0=$loop; //@line 139 "lvm.c"
      var $cmp=(($0)|0) < 100; //@line 139 "lvm.c"
      if ($cmp) { label = 4; break; } else { label = 28; break; } //@line 139 "lvm.c"
    case 4: 
      var $1=$t_addr; //@line 141 "lvm.c"
      var $tt_=(($1+8)|0); //@line 141 "lvm.c"
      var $2=HEAP32[(($tt_)>>2)]; //@line 141 "lvm.c"
      var $cmp1=(($2)|0)==69; //@line 141 "lvm.c"
      if ($cmp1) { label = 5; break; } else { label = 21; break; } //@line 141 "lvm.c"
    case 5: 
      var $3=$t_addr; //@line 142 "lvm.c"
      var $value_=(($3)|0); //@line 142 "lvm.c"
      var $gc=$value_; //@line 142 "lvm.c"
      var $4=HEAP32[(($gc)>>2)]; //@line 142 "lvm.c"
      var $h2=$4; //@line 142 "lvm.c"
      $h=$h2; //@line 142 "lvm.c"
      var $5=$h; //@line 143 "lvm.c"
      var $6=$key_addr; //@line 143 "lvm.c"
      var $call=__Z8luaH_getP5TablePK10lua_TValue($5, $6); //@line 143 "lvm.c"
      $oldval=$call; //@line 143 "lvm.c"
      var $7=$oldval; //@line 146 "lvm.c"
      var $tt_3=(($7+8)|0); //@line 146 "lvm.c"
      var $8=HEAP32[(($tt_3)>>2)]; //@line 146 "lvm.c"
      var $cmp4=(($8)|0)==0; //@line 146 "lvm.c"
      if ($cmp4) { label = 6; break; } else { label = 15; break; } //@line 146 "lvm.c"
    case 6: 
      var $9=$h; //@line 146 "lvm.c"
      var $metatable=(($9+8)|0); //@line 146 "lvm.c"
      var $10=HEAP32[(($metatable)>>2)]; //@line 146 "lvm.c"
      var $cmp5=(($10)|0)==0; //@line 146 "lvm.c"
      if ($cmp5) { label = 7; break; } else { label = 8; break; } //@line 146 "lvm.c"
    case 7: 
      var $cond12 = 0;label = 12; break; //@line 146 "lvm.c"
    case 8: 
      var $11=$h; //@line 146 "lvm.c"
      var $metatable6=(($11+8)|0); //@line 146 "lvm.c"
      var $12=HEAP32[(($metatable6)>>2)]; //@line 146 "lvm.c"
      var $flags=(($12+6)|0); //@line 146 "lvm.c"
      var $13=HEAP8[($flags)]; //@line 146 "lvm.c"
      var $conv=(($13)&255); //@line 146 "lvm.c"
      var $and=$conv & 2; //@line 146 "lvm.c"
      var $tobool=(($and)|0)!=0; //@line 146 "lvm.c"
      if ($tobool) { label = 9; break; } else { label = 10; break; } //@line 146 "lvm.c"
    case 9: 
      var $cond = 0;label = 11; break; //@line 146 "lvm.c"
    case 10: 
      var $14=$h; //@line 148 "lvm.c"
      var $metatable9=(($14+8)|0); //@line 148 "lvm.c"
      var $15=HEAP32[(($metatable9)>>2)]; //@line 148 "lvm.c"
      var $16=$L_addr; //@line 148 "lvm.c"
      var $l_G=(($16+12)|0); //@line 148 "lvm.c"
      var $17=HEAP32[(($l_G)>>2)]; //@line 148 "lvm.c"
      var $tmname=(($17+164)|0); //@line 148 "lvm.c"
      var $arrayidx=(($tmname+4)|0); //@line 148 "lvm.c"
      var $18=HEAP32[(($arrayidx)>>2)]; //@line 148 "lvm.c"
      var $call10=__Z10luaT_gettmP5Table3TMSP7TString($15, 1, $18); //@line 148 "lvm.c"
      var $cond = $call10;label = 11; break; //@line 148 "lvm.c"
    case 11: 
      var $cond; //@line 148 "lvm.c"
      var $cond12 = $cond;label = 12; break; //@line 148 "lvm.c"
    case 12: 
      var $cond12; //@line 148 "lvm.c"
      $tm=$cond12; //@line 148 "lvm.c"
      var $cmp13=(($cond12)|0)==0; //@line 148 "lvm.c"
      if ($cmp13) { label = 13; break; } else { label = 20; break; } //@line 148 "lvm.c"
    case 13: 
      var $19=$oldval; //@line 148 "lvm.c"
      var $cmp14=(($19)|0)!=5243252; //@line 148 "lvm.c"
      if ($cmp14) { label = 15; break; } else { label = 14; break; } //@line 148 "lvm.c"
    case 14: 
      var $20=$L_addr; //@line 153 "lvm.c"
      var $21=$h; //@line 153 "lvm.c"
      var $22=$key_addr; //@line 153 "lvm.c"
      var $call16=__Z11luaH_newkeyP9lua_StateP5TablePK10lua_TValue($20, $21, $22); //@line 153 "lvm.c"
      $oldval=$call16; //@line 153 "lvm.c"
      if (1) { label = 15; break; } else { label = 20; break; } //@line 153 "lvm.c"
    case 15: 
      var $23=$val_addr; //@line 155 "lvm.c"
      $io2=$23; //@line 155 "lvm.c"
      var $24=$oldval; //@line 155 "lvm.c"
      $io1=$24; //@line 155 "lvm.c"
      var $25=$io1; //@line 155 "lvm.c"
      var $value_18=(($25)|0); //@line 155 "lvm.c"
      var $26=$io2; //@line 155 "lvm.c"
      var $value_19=(($26)|0); //@line 155 "lvm.c"
      var $27=$value_18; //@line 155 "lvm.c"
      var $28=$value_19; //@line 155 "lvm.c"
      assert(8 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)]; //@line 155 "lvm.c"
      var $29=$io2; //@line 155 "lvm.c"
      var $tt_20=(($29+8)|0); //@line 155 "lvm.c"
      var $30=HEAP32[(($tt_20)>>2)]; //@line 155 "lvm.c"
      var $31=$io1; //@line 155 "lvm.c"
      var $tt_21=(($31+8)|0); //@line 155 "lvm.c"
      HEAP32[(($tt_21)>>2)]=$30; //@line 155 "lvm.c"
      var $32=$h; //@line 156 "lvm.c"
      var $flags22=(($32+6)|0); //@line 156 "lvm.c"
      HEAP8[($flags22)]=0; //@line 156 "lvm.c"
      var $33=$val_addr; //@line 157 "lvm.c"
      var $tt_23=(($33+8)|0); //@line 157 "lvm.c"
      var $34=HEAP32[(($tt_23)>>2)]; //@line 157 "lvm.c"
      var $and24=$34 & 64; //@line 157 "lvm.c"
      var $tobool25=(($and24)|0)!=0; //@line 157 "lvm.c"
      if ($tobool25) { label = 16; break; } else { label = 19; break; } //@line 157 "lvm.c"
    case 16: 
      var $35=$val_addr; //@line 157 "lvm.c"
      var $value_27=(($35)|0); //@line 157 "lvm.c"
      var $gc28=$value_27; //@line 157 "lvm.c"
      var $36=HEAP32[(($gc28)>>2)]; //@line 157 "lvm.c"
      var $gch=$36; //@line 157 "lvm.c"
      var $marked=(($gch+5)|0); //@line 157 "lvm.c"
      var $37=HEAP8[($marked)]; //@line 157 "lvm.c"
      var $conv29=(($37)&255); //@line 157 "lvm.c"
      var $and30=$conv29 & 3; //@line 157 "lvm.c"
      var $tobool31=(($and30)|0)!=0; //@line 157 "lvm.c"
      if ($tobool31) { label = 17; break; } else { label = 19; break; } //@line 157 "lvm.c"
    case 17: 
      var $38=$h; //@line 157 "lvm.c"
      var $39=$38; //@line 157 "lvm.c"
      var $gch33=$39; //@line 157 "lvm.c"
      var $marked34=(($gch33+5)|0); //@line 157 "lvm.c"
      var $40=HEAP8[($marked34)]; //@line 157 "lvm.c"
      var $conv35=(($40)&255); //@line 157 "lvm.c"
      var $and36=$conv35 & 4; //@line 157 "lvm.c"
      var $tobool37=(($and36)|0)!=0; //@line 157 "lvm.c"
      if ($tobool37) { label = 18; break; } else { label = 19; break; } //@line 157 "lvm.c"
    case 18: 
      var $41=$L_addr; //@line 157 "lvm.c"
      var $42=$h; //@line 157 "lvm.c"
      var $43=$42; //@line 157 "lvm.c"
      __Z17luaC_barrierback_P9lua_StateP8GCObject($41, $43); //@line 157 "lvm.c"
      label = 19; break; //@line 157 "lvm.c"
    case 19: 
      label = 29; break; //@line 158 "lvm.c"
    case 20: 
      label = 24; break; //@line 161 "lvm.c"
    case 21: 
      var $44=$L_addr; //@line 163 "lvm.c"
      var $45=$t_addr; //@line 163 "lvm.c"
      var $call40=__Z15luaT_gettmbyobjP9lua_StatePK10lua_TValue3TMS($44, $45, 1); //@line 163 "lvm.c"
      $tm=$call40; //@line 163 "lvm.c"
      var $tt_41=(($call40+8)|0); //@line 163 "lvm.c"
      var $46=HEAP32[(($tt_41)>>2)]; //@line 163 "lvm.c"
      var $cmp42=(($46)|0)==0; //@line 163 "lvm.c"
      if ($cmp42) { label = 22; break; } else { label = 23; break; } //@line 163 "lvm.c"
    case 22: 
      var $47=$L_addr; //@line 164 "lvm.c"
      var $48=$t_addr; //@line 164 "lvm.c"
      __Z14luaG_typeerrorP9lua_StatePK10lua_TValuePKc($47, $48, ((5243948)|0)); //@line 164 "lvm.c"
      throw "Reached an unreachable!" //@line 164 "lvm.c"
    case 23: 
      label = 24; break;
    case 24: 
      var $49=$tm; //@line 166 "lvm.c"
      var $tt_46=(($49+8)|0); //@line 166 "lvm.c"
      var $50=HEAP32[(($tt_46)>>2)]; //@line 166 "lvm.c"
      var $and47=$50 & 15; //@line 166 "lvm.c"
      var $cmp48=(($and47)|0)==6; //@line 166 "lvm.c"
      if ($cmp48) { label = 25; break; } else { label = 26; break; } //@line 166 "lvm.c"
    case 25: 
      var $51=$L_addr; //@line 167 "lvm.c"
      var $52=$tm; //@line 167 "lvm.c"
      var $53=$t_addr; //@line 167 "lvm.c"
      var $54=$key_addr; //@line 167 "lvm.c"
      var $55=$val_addr; //@line 167 "lvm.c"
      __ZL6callTMP9lua_StatePK10lua_TValueS3_S3_PS1_i($51, $52, $53, $54, $55, 0); //@line 167 "lvm.c"
      label = 29; break; //@line 168 "lvm.c"
    case 26: 
      var $56=$tm; //@line 170 "lvm.c"
      $t_addr=$56; //@line 170 "lvm.c"
      label = 27; break; //@line 171 "lvm.c"
    case 27: 
      var $57=$loop; //@line 139 "lvm.c"
      var $inc=((($57)+(1))|0); //@line 139 "lvm.c"
      $loop=$inc; //@line 139 "lvm.c"
      label = 3; break; //@line 139 "lvm.c"
    case 28: 
      var $58=$L_addr; //@line 172 "lvm.c"
      __Z13luaG_runerrorP9lua_StatePKcz($58, ((5243724)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 172 "lvm.c"
      throw "Reached an unreachable!" //@line 172 "lvm.c"
    case 29: 
      STACKTOP = __stackBase__;
      return; //@line 173 "lvm.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z13luaV_settableP9lua_StatePK10lua_TValuePS1_S4_["X"]=1;

function __Z13luaV_lessthanP9lua_StatePK10lua_TValueS3_($L, $l, $r) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $l_addr;
      var $r_addr;
      var $res;
      $L_addr=$L;
      $l_addr=$l;
      $r_addr=$r;
      var $0=$l_addr; //@line 234 "lvm.c"
      var $tt_=(($0+8)|0); //@line 234 "lvm.c"
      var $1=HEAP32[(($tt_)>>2)]; //@line 234 "lvm.c"
      var $cmp=(($1)|0)==3; //@line 234 "lvm.c"
      if ($cmp) { label = 3; break; } else { label = 5; break; } //@line 234 "lvm.c"
    case 3: 
      var $2=$r_addr; //@line 234 "lvm.c"
      var $tt_1=(($2+8)|0); //@line 234 "lvm.c"
      var $3=HEAP32[(($tt_1)>>2)]; //@line 234 "lvm.c"
      var $cmp2=(($3)|0)==3; //@line 234 "lvm.c"
      if ($cmp2) { label = 4; break; } else { label = 5; break; } //@line 234 "lvm.c"
    case 4: 
      var $4=$l_addr; //@line 235 "lvm.c"
      var $value_=(($4)|0); //@line 235 "lvm.c"
      var $n=$value_; //@line 235 "lvm.c"
      var $5=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 235 "lvm.c"
      var $6=$r_addr; //@line 235 "lvm.c"
      var $value_3=(($6)|0); //@line 235 "lvm.c"
      var $n4=$value_3; //@line 235 "lvm.c"
      var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n4)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n4)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 235 "lvm.c"
      var $cmp5=$5 < $7; //@line 235 "lvm.c"
      var $conv=(($cmp5)&1); //@line 235 "lvm.c"
      $retval=$conv; //@line 235 "lvm.c"
      label = 13; break; //@line 235 "lvm.c"
    case 5: 
      var $8=$l_addr; //@line 236 "lvm.c"
      var $tt_6=(($8+8)|0); //@line 236 "lvm.c"
      var $9=HEAP32[(($tt_6)>>2)]; //@line 236 "lvm.c"
      var $and=$9 & 15; //@line 236 "lvm.c"
      var $cmp7=(($and)|0)==4; //@line 236 "lvm.c"
      if ($cmp7) { label = 6; break; } else { label = 8; break; } //@line 236 "lvm.c"
    case 6: 
      var $10=$r_addr; //@line 236 "lvm.c"
      var $tt_9=(($10+8)|0); //@line 236 "lvm.c"
      var $11=HEAP32[(($tt_9)>>2)]; //@line 236 "lvm.c"
      var $and10=$11 & 15; //@line 236 "lvm.c"
      var $cmp11=(($and10)|0)==4; //@line 236 "lvm.c"
      if ($cmp11) { label = 7; break; } else { label = 8; break; } //@line 236 "lvm.c"
    case 7: 
      var $12=$l_addr; //@line 237 "lvm.c"
      var $value_13=(($12)|0); //@line 237 "lvm.c"
      var $gc=$value_13; //@line 237 "lvm.c"
      var $13=HEAP32[(($gc)>>2)]; //@line 237 "lvm.c"
      var $ts=$13; //@line 237 "lvm.c"
      var $14=$r_addr; //@line 237 "lvm.c"
      var $value_14=(($14)|0); //@line 237 "lvm.c"
      var $gc15=$value_14; //@line 237 "lvm.c"
      var $15=HEAP32[(($gc15)>>2)]; //@line 237 "lvm.c"
      var $ts16=$15; //@line 237 "lvm.c"
      var $call=__ZL8l_strcmpPK7TStringS1_($ts, $ts16); //@line 237 "lvm.c"
      var $cmp17=(($call)|0) < 0; //@line 237 "lvm.c"
      var $conv18=(($cmp17)&1); //@line 237 "lvm.c"
      $retval=$conv18; //@line 237 "lvm.c"
      label = 13; break; //@line 237 "lvm.c"
    case 8: 
      var $16=$L_addr; //@line 238 "lvm.c"
      var $17=$l_addr; //@line 238 "lvm.c"
      var $18=$r_addr; //@line 238 "lvm.c"
      var $call20=__ZL12call_orderTMP9lua_StatePK10lua_TValueS3_3TMS($16, $17, $18, 13); //@line 238 "lvm.c"
      $res=$call20; //@line 238 "lvm.c"
      var $cmp21=(($call20)|0) < 0; //@line 238 "lvm.c"
      if ($cmp21) { label = 9; break; } else { label = 10; break; } //@line 238 "lvm.c"
    case 9: 
      var $19=$L_addr; //@line 239 "lvm.c"
      var $20=$l_addr; //@line 239 "lvm.c"
      var $21=$r_addr; //@line 239 "lvm.c"
      __Z15luaG_ordererrorP9lua_StatePK10lua_TValueS3_($19, $20, $21); //@line 239 "lvm.c"
      throw "Reached an unreachable!" //@line 239 "lvm.c"
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $22=$res; //@line 240 "lvm.c"
      $retval=$22; //@line 240 "lvm.c"
      label = 13; break; //@line 240 "lvm.c"
    case 13: 
      var $23=$retval; //@line 241 "lvm.c"

      return $23; //@line 241 "lvm.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z13luaV_lessthanP9lua_StatePK10lua_TValueS3_["X"]=1;

function __Z14luaV_equalobj_P9lua_StatePK10lua_TValueS3_($L, $t1, $t2) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $t1_addr;
      var $t2_addr;
      var $tm;
      $L_addr=$L;
      $t1_addr=$t1;
      $t2_addr=$t2;
      var $0=$t1_addr; //@line 264 "lvm.c"
      var $tt_=(($0+8)|0); //@line 264 "lvm.c"
      var $1=HEAP32[(($tt_)>>2)]; //@line 264 "lvm.c"
      var $and=$1 & 63; //@line 264 "lvm.c"
      if ((($and)|0)==0) {
        label = 3; break;
      }
      else if ((($and)|0)==3) {
        label = 4; break;
      }
      else if ((($and)|0)==1) {
        label = 5; break;
      }
      else if ((($and)|0)==2) {
        label = 6; break;
      }
      else if ((($and)|0)==22) {
        label = 7; break;
      }
      else if ((($and)|0)==4) {
        label = 8; break;
      }
      else if ((($and)|0)==20) {
        label = 9; break;
      }
      else if ((($and)|0)==7) {
        label = 10; break;
      }
      else if ((($and)|0)==5) {
        label = 16; break;
      }
      else {
      label = 22; break;
      }
      
    case 3: 
      $retval=1; //@line 265 "lvm.c"
      label = 30; break; //@line 265 "lvm.c"
    case 4: 
      var $2=$t1_addr; //@line 266 "lvm.c"
      var $value_=(($2)|0); //@line 266 "lvm.c"
      var $n=$value_; //@line 266 "lvm.c"
      var $3=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 266 "lvm.c"
      var $4=$t2_addr; //@line 266 "lvm.c"
      var $value_2=(($4)|0); //@line 266 "lvm.c"
      var $n3=$value_2; //@line 266 "lvm.c"
      var $5=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 266 "lvm.c"
      var $cmp=$3 == $5; //@line 266 "lvm.c"
      var $conv=(($cmp)&1); //@line 266 "lvm.c"
      $retval=$conv; //@line 266 "lvm.c"
      label = 30; break; //@line 266 "lvm.c"
    case 5: 
      var $6=$t1_addr; //@line 267 "lvm.c"
      var $value_5=(($6)|0); //@line 267 "lvm.c"
      var $b=$value_5; //@line 267 "lvm.c"
      var $7=HEAP32[(($b)>>2)]; //@line 267 "lvm.c"
      var $8=$t2_addr; //@line 267 "lvm.c"
      var $value_6=(($8)|0); //@line 267 "lvm.c"
      var $b7=$value_6; //@line 267 "lvm.c"
      var $9=HEAP32[(($b7)>>2)]; //@line 267 "lvm.c"
      var $cmp8=(($7)|0)==(($9)|0); //@line 267 "lvm.c"
      var $conv9=(($cmp8)&1); //@line 267 "lvm.c"
      $retval=$conv9; //@line 267 "lvm.c"
      label = 30; break; //@line 267 "lvm.c"
    case 6: 
      var $10=$t1_addr; //@line 268 "lvm.c"
      var $value_11=(($10)|0); //@line 268 "lvm.c"
      var $p=$value_11; //@line 268 "lvm.c"
      var $11=HEAP32[(($p)>>2)]; //@line 268 "lvm.c"
      var $12=$t2_addr; //@line 268 "lvm.c"
      var $value_12=(($12)|0); //@line 268 "lvm.c"
      var $p13=$value_12; //@line 268 "lvm.c"
      var $13=HEAP32[(($p13)>>2)]; //@line 268 "lvm.c"
      var $cmp14=(($11)|0)==(($13)|0); //@line 268 "lvm.c"
      var $conv15=(($cmp14)&1); //@line 268 "lvm.c"
      $retval=$conv15; //@line 268 "lvm.c"
      label = 30; break; //@line 268 "lvm.c"
    case 7: 
      var $14=$t1_addr; //@line 269 "lvm.c"
      var $value_17=(($14)|0); //@line 269 "lvm.c"
      var $f=$value_17; //@line 269 "lvm.c"
      var $15=HEAP32[(($f)>>2)]; //@line 269 "lvm.c"
      var $16=$t2_addr; //@line 269 "lvm.c"
      var $value_18=(($16)|0); //@line 269 "lvm.c"
      var $f19=$value_18; //@line 269 "lvm.c"
      var $17=HEAP32[(($f19)>>2)]; //@line 269 "lvm.c"
      var $cmp20=(($15)|0)==(($17)|0); //@line 269 "lvm.c"
      var $conv21=(($cmp20)&1); //@line 269 "lvm.c"
      $retval=$conv21; //@line 269 "lvm.c"
      label = 30; break; //@line 269 "lvm.c"
    case 8: 
      var $18=$t1_addr; //@line 270 "lvm.c"
      var $value_23=(($18)|0); //@line 270 "lvm.c"
      var $gc=$value_23; //@line 270 "lvm.c"
      var $19=HEAP32[(($gc)>>2)]; //@line 270 "lvm.c"
      var $ts=$19; //@line 270 "lvm.c"
      var $20=$t2_addr; //@line 270 "lvm.c"
      var $value_24=(($20)|0); //@line 270 "lvm.c"
      var $gc25=$value_24; //@line 270 "lvm.c"
      var $21=HEAP32[(($gc25)>>2)]; //@line 270 "lvm.c"
      var $ts26=$21; //@line 270 "lvm.c"
      var $cmp27=(($ts)|0)==(($ts26)|0); //@line 270 "lvm.c"
      var $conv28=(($cmp27)&1); //@line 270 "lvm.c"
      $retval=$conv28; //@line 270 "lvm.c"
      label = 30; break; //@line 270 "lvm.c"
    case 9: 
      var $22=$t1_addr; //@line 271 "lvm.c"
      var $value_30=(($22)|0); //@line 271 "lvm.c"
      var $gc31=$value_30; //@line 271 "lvm.c"
      var $23=HEAP32[(($gc31)>>2)]; //@line 271 "lvm.c"
      var $ts32=$23; //@line 271 "lvm.c"
      var $24=$t2_addr; //@line 271 "lvm.c"
      var $value_33=(($24)|0); //@line 271 "lvm.c"
      var $gc34=$value_33; //@line 271 "lvm.c"
      var $25=HEAP32[(($gc34)>>2)]; //@line 271 "lvm.c"
      var $ts35=$25; //@line 271 "lvm.c"
      var $call=__Z13luaS_eqlngstrP7TStringS0_($ts32, $ts35); //@line 271 "lvm.c"
      $retval=$call; //@line 271 "lvm.c"
      label = 30; break; //@line 271 "lvm.c"
    case 10: 
      var $26=$t1_addr; //@line 273 "lvm.c"
      var $value_37=(($26)|0); //@line 273 "lvm.c"
      var $gc38=$value_37; //@line 273 "lvm.c"
      var $27=HEAP32[(($gc38)>>2)]; //@line 273 "lvm.c"
      var $u=$27; //@line 273 "lvm.c"
      var $uv=$u; //@line 273 "lvm.c"
      var $28=$t2_addr; //@line 273 "lvm.c"
      var $value_39=(($28)|0); //@line 273 "lvm.c"
      var $gc40=$value_39; //@line 273 "lvm.c"
      var $29=HEAP32[(($gc40)>>2)]; //@line 273 "lvm.c"
      var $u41=$29; //@line 273 "lvm.c"
      var $uv42=$u41; //@line 273 "lvm.c"
      var $cmp43=(($uv)|0)==(($uv42)|0); //@line 273 "lvm.c"
      if ($cmp43) { label = 11; break; } else { label = 12; break; } //@line 273 "lvm.c"
    case 11: 
      $retval=1; //@line 273 "lvm.c"
      label = 30; break; //@line 273 "lvm.c"
    case 12: 
      var $30=$L_addr; //@line 274 "lvm.c"
      var $cmp44=(($30)|0)==0; //@line 274 "lvm.c"
      if ($cmp44) { label = 13; break; } else { label = 14; break; } //@line 274 "lvm.c"
    case 13: 
      $retval=0; //@line 274 "lvm.c"
      label = 30; break; //@line 274 "lvm.c"
    case 14: 
      label = 15; break;
    case 15: 
      var $31=$L_addr; //@line 275 "lvm.c"
      var $32=$t1_addr; //@line 275 "lvm.c"
      var $value_47=(($32)|0); //@line 275 "lvm.c"
      var $gc48=$value_47; //@line 275 "lvm.c"
      var $33=HEAP32[(($gc48)>>2)]; //@line 275 "lvm.c"
      var $u49=$33; //@line 275 "lvm.c"
      var $uv50=$u49; //@line 275 "lvm.c"
      var $metatable=(($uv50+8)|0); //@line 275 "lvm.c"
      var $34=HEAP32[(($metatable)>>2)]; //@line 275 "lvm.c"
      var $35=$t2_addr; //@line 275 "lvm.c"
      var $value_51=(($35)|0); //@line 275 "lvm.c"
      var $gc52=$value_51; //@line 275 "lvm.c"
      var $36=HEAP32[(($gc52)>>2)]; //@line 275 "lvm.c"
      var $u53=$36; //@line 275 "lvm.c"
      var $uv54=$u53; //@line 275 "lvm.c"
      var $metatable55=(($uv54+8)|0); //@line 275 "lvm.c"
      var $37=HEAP32[(($metatable55)>>2)]; //@line 275 "lvm.c"
      var $call56=__ZL11get_equalTMP9lua_StateP5TableS2_3TMS($31, $34, $37, 5); //@line 275 "lvm.c"
      $tm=$call56; //@line 275 "lvm.c"
      label = 23; break; //@line 276 "lvm.c"
    case 16: 
      var $38=$t1_addr; //@line 279 "lvm.c"
      var $value_58=(($38)|0); //@line 279 "lvm.c"
      var $gc59=$value_58; //@line 279 "lvm.c"
      var $39=HEAP32[(($gc59)>>2)]; //@line 279 "lvm.c"
      var $h=$39; //@line 279 "lvm.c"
      var $40=$t2_addr; //@line 279 "lvm.c"
      var $value_60=(($40)|0); //@line 279 "lvm.c"
      var $gc61=$value_60; //@line 279 "lvm.c"
      var $41=HEAP32[(($gc61)>>2)]; //@line 279 "lvm.c"
      var $h62=$41; //@line 279 "lvm.c"
      var $cmp63=(($h)|0)==(($h62)|0); //@line 279 "lvm.c"
      if ($cmp63) { label = 17; break; } else { label = 18; break; } //@line 279 "lvm.c"
    case 17: 
      $retval=1; //@line 279 "lvm.c"
      label = 30; break; //@line 279 "lvm.c"
    case 18: 
      var $42=$L_addr; //@line 280 "lvm.c"
      var $cmp66=(($42)|0)==0; //@line 280 "lvm.c"
      if ($cmp66) { label = 19; break; } else { label = 20; break; } //@line 280 "lvm.c"
    case 19: 
      $retval=0; //@line 280 "lvm.c"
      label = 30; break; //@line 280 "lvm.c"
    case 20: 
      label = 21; break;
    case 21: 
      var $43=$L_addr; //@line 281 "lvm.c"
      var $44=$t1_addr; //@line 281 "lvm.c"
      var $value_70=(($44)|0); //@line 281 "lvm.c"
      var $gc71=$value_70; //@line 281 "lvm.c"
      var $45=HEAP32[(($gc71)>>2)]; //@line 281 "lvm.c"
      var $h72=$45; //@line 281 "lvm.c"
      var $metatable73=(($h72+8)|0); //@line 281 "lvm.c"
      var $46=HEAP32[(($metatable73)>>2)]; //@line 281 "lvm.c"
      var $47=$t2_addr; //@line 281 "lvm.c"
      var $value_74=(($47)|0); //@line 281 "lvm.c"
      var $gc75=$value_74; //@line 281 "lvm.c"
      var $48=HEAP32[(($gc75)>>2)]; //@line 281 "lvm.c"
      var $h76=$48; //@line 281 "lvm.c"
      var $metatable77=(($h76+8)|0); //@line 281 "lvm.c"
      var $49=HEAP32[(($metatable77)>>2)]; //@line 281 "lvm.c"
      var $call78=__ZL11get_equalTMP9lua_StateP5TableS2_3TMS($43, $46, $49, 5); //@line 281 "lvm.c"
      $tm=$call78; //@line 281 "lvm.c"
      label = 23; break; //@line 282 "lvm.c"
    case 22: 
      var $50=$t1_addr; //@line 286 "lvm.c"
      var $value_79=(($50)|0); //@line 286 "lvm.c"
      var $gc80=$value_79; //@line 286 "lvm.c"
      var $51=HEAP32[(($gc80)>>2)]; //@line 286 "lvm.c"
      var $52=$t2_addr; //@line 286 "lvm.c"
      var $value_81=(($52)|0); //@line 286 "lvm.c"
      var $gc82=$value_81; //@line 286 "lvm.c"
      var $53=HEAP32[(($gc82)>>2)]; //@line 286 "lvm.c"
      var $cmp83=(($51)|0)==(($53)|0); //@line 286 "lvm.c"
      var $conv84=(($cmp83)&1); //@line 286 "lvm.c"
      $retval=$conv84; //@line 286 "lvm.c"
      label = 30; break; //@line 286 "lvm.c"
    case 23: 
      var $54=$tm; //@line 288 "lvm.c"
      var $cmp85=(($54)|0)==0; //@line 288 "lvm.c"
      if ($cmp85) { label = 24; break; } else { label = 25; break; } //@line 288 "lvm.c"
    case 24: 
      $retval=0; //@line 288 "lvm.c"
      label = 30; break; //@line 288 "lvm.c"
    case 25: 
      var $55=$L_addr; //@line 289 "lvm.c"
      var $56=$tm; //@line 289 "lvm.c"
      var $57=$t1_addr; //@line 289 "lvm.c"
      var $58=$t2_addr; //@line 289 "lvm.c"
      var $59=$L_addr; //@line 289 "lvm.c"
      var $top=(($59+8)|0); //@line 289 "lvm.c"
      var $60=HEAP32[(($top)>>2)]; //@line 289 "lvm.c"
      __ZL6callTMP9lua_StatePK10lua_TValueS3_S3_PS1_i($55, $56, $57, $58, $60, 1); //@line 289 "lvm.c"
      var $61=$L_addr; //@line 290 "lvm.c"
      var $top88=(($61+8)|0); //@line 290 "lvm.c"
      var $62=HEAP32[(($top88)>>2)]; //@line 290 "lvm.c"
      var $tt_89=(($62+8)|0); //@line 290 "lvm.c"
      var $63=HEAP32[(($tt_89)>>2)]; //@line 290 "lvm.c"
      var $cmp90=(($63)|0)==0; //@line 290 "lvm.c"
      if ($cmp90) { var $71 = 1;label = 29; break; } else { label = 26; break; } //@line 290 "lvm.c"
    case 26: 
      var $64=$L_addr; //@line 290 "lvm.c"
      var $top91=(($64+8)|0); //@line 290 "lvm.c"
      var $65=HEAP32[(($top91)>>2)]; //@line 290 "lvm.c"
      var $tt_92=(($65+8)|0); //@line 290 "lvm.c"
      var $66=HEAP32[(($tt_92)>>2)]; //@line 290 "lvm.c"
      var $cmp93=(($66)|0)==1; //@line 290 "lvm.c"
      if ($cmp93) { label = 27; break; } else { var $70 = 0;label = 28; break; } //@line 290 "lvm.c"
    case 27: 
      var $67=$L_addr; //@line 290 "lvm.c"
      var $top94=(($67+8)|0); //@line 290 "lvm.c"
      var $68=HEAP32[(($top94)>>2)]; //@line 290 "lvm.c"
      var $value_95=(($68)|0); //@line 290 "lvm.c"
      var $b96=$value_95; //@line 290 "lvm.c"
      var $69=HEAP32[(($b96)>>2)]; //@line 290 "lvm.c"
      var $cmp97=(($69)|0)==0; //@line 290 "lvm.c"
      var $70 = $cmp97;label = 28; break;
    case 28: 
      var $70;
      var $71 = $70;label = 29; break;
    case 29: 
      var $71;
      var $lnot=$71 ^ 1;
      var $conv98=(($lnot)&1);
      $retval=$conv98;
      label = 30; break;
    case 30: 
      var $72=$retval; //@line 291 "lvm.c"

      return $72; //@line 291 "lvm.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z14luaV_equalobj_P9lua_StatePK10lua_TValueS3_["X"]=1;

function __ZL11get_equalTMP9lua_StateP5TableS2_3TMS($L, $mt1, $mt2, $event) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $mt1_addr;
      var $mt2_addr;
      var $event_addr;
      var $tm1;
      var $tm2;
      $L_addr=$L;
      $mt1_addr=$mt1;
      $mt2_addr=$mt2;
      $event_addr=$event;
      var $0=$mt1_addr; //@line 189 "lvm.c"
      var $cmp=(($0)|0)==0; //@line 189 "lvm.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 189 "lvm.c"
    case 3: 
      var $cond4 = 0;label = 8; break; //@line 189 "lvm.c"
    case 4: 
      var $1=$mt1_addr; //@line 189 "lvm.c"
      var $flags=(($1+6)|0); //@line 189 "lvm.c"
      var $2=HEAP8[($flags)]; //@line 189 "lvm.c"
      var $conv=(($2)&255); //@line 189 "lvm.c"
      var $3=$event_addr; //@line 189 "lvm.c"
      var $shl=1 << $3; //@line 189 "lvm.c"
      var $and=$conv & $shl; //@line 189 "lvm.c"
      var $tobool=(($and)|0)!=0; //@line 189 "lvm.c"
      if ($tobool) { label = 5; break; } else { label = 6; break; } //@line 189 "lvm.c"
    case 5: 
      var $cond = 0;label = 7; break; //@line 189 "lvm.c"
    case 6: 
      var $4=$mt1_addr; //@line 189 "lvm.c"
      var $5=$event_addr; //@line 189 "lvm.c"
      var $6=$event_addr; //@line 189 "lvm.c"
      var $7=$L_addr; //@line 189 "lvm.c"
      var $l_G=(($7+12)|0); //@line 189 "lvm.c"
      var $8=HEAP32[(($l_G)>>2)]; //@line 189 "lvm.c"
      var $tmname=(($8+164)|0); //@line 189 "lvm.c"
      var $arrayidx=(($tmname+($6<<2))|0); //@line 189 "lvm.c"
      var $9=HEAP32[(($arrayidx)>>2)]; //@line 189 "lvm.c"
      var $call=__Z10luaT_gettmP5Table3TMSP7TString($4, $5, $9); //@line 189 "lvm.c"
      var $cond = $call;label = 7; break; //@line 189 "lvm.c"
    case 7: 
      var $cond; //@line 189 "lvm.c"
      var $cond4 = $cond;label = 8; break; //@line 189 "lvm.c"
    case 8: 
      var $cond4; //@line 189 "lvm.c"
      $tm1=$cond4; //@line 189 "lvm.c"
      var $10=$tm1; //@line 191 "lvm.c"
      var $cmp5=(($10)|0)==0; //@line 191 "lvm.c"
      if ($cmp5) { label = 9; break; } else { label = 10; break; } //@line 191 "lvm.c"
    case 9: 
      $retval=0; //@line 191 "lvm.c"
      label = 24; break; //@line 191 "lvm.c"
    case 10: 
      var $11=$mt1_addr; //@line 192 "lvm.c"
      var $12=$mt2_addr; //@line 192 "lvm.c"
      var $cmp6=(($11)|0)==(($12)|0); //@line 192 "lvm.c"
      if ($cmp6) { label = 11; break; } else { label = 12; break; } //@line 192 "lvm.c"
    case 11: 
      var $13=$tm1; //@line 192 "lvm.c"
      $retval=$13; //@line 192 "lvm.c"
      label = 24; break; //@line 192 "lvm.c"
    case 12: 
      var $14=$mt2_addr; //@line 193 "lvm.c"
      var $cmp9=(($14)|0)==0; //@line 193 "lvm.c"
      if ($cmp9) { label = 13; break; } else { label = 14; break; } //@line 193 "lvm.c"
    case 13: 
      var $cond26 = 0;label = 18; break; //@line 193 "lvm.c"
    case 14: 
      var $15=$mt2_addr; //@line 193 "lvm.c"
      var $flags12=(($15+6)|0); //@line 193 "lvm.c"
      var $16=HEAP8[($flags12)]; //@line 193 "lvm.c"
      var $conv13=(($16)&255); //@line 193 "lvm.c"
      var $17=$event_addr; //@line 193 "lvm.c"
      var $shl14=1 << $17; //@line 193 "lvm.c"
      var $and15=$conv13 & $shl14; //@line 193 "lvm.c"
      var $tobool16=(($and15)|0)!=0; //@line 193 "lvm.c"
      if ($tobool16) { label = 15; break; } else { label = 16; break; } //@line 193 "lvm.c"
    case 15: 
      var $cond24 = 0;label = 17; break; //@line 193 "lvm.c"
    case 16: 
      var $18=$mt2_addr; //@line 193 "lvm.c"
      var $19=$event_addr; //@line 193 "lvm.c"
      var $20=$event_addr; //@line 193 "lvm.c"
      var $21=$L_addr; //@line 193 "lvm.c"
      var $l_G19=(($21+12)|0); //@line 193 "lvm.c"
      var $22=HEAP32[(($l_G19)>>2)]; //@line 193 "lvm.c"
      var $tmname20=(($22+164)|0); //@line 193 "lvm.c"
      var $arrayidx21=(($tmname20+($20<<2))|0); //@line 193 "lvm.c"
      var $23=HEAP32[(($arrayidx21)>>2)]; //@line 193 "lvm.c"
      var $call22=__Z10luaT_gettmP5Table3TMSP7TString($18, $19, $23); //@line 193 "lvm.c"
      var $cond24 = $call22;label = 17; break; //@line 193 "lvm.c"
    case 17: 
      var $cond24; //@line 193 "lvm.c"
      var $cond26 = $cond24;label = 18; break; //@line 193 "lvm.c"
    case 18: 
      var $cond26; //@line 193 "lvm.c"
      $tm2=$cond26; //@line 193 "lvm.c"
      var $24=$tm2; //@line 194 "lvm.c"
      var $cmp27=(($24)|0)==0; //@line 194 "lvm.c"
      if ($cmp27) { label = 19; break; } else { label = 20; break; } //@line 194 "lvm.c"
    case 19: 
      $retval=0; //@line 194 "lvm.c"
      label = 24; break; //@line 194 "lvm.c"
    case 20: 
      var $25=$tm1; //@line 195 "lvm.c"
      var $tt_=(($25+8)|0); //@line 195 "lvm.c"
      var $26=HEAP32[(($tt_)>>2)]; //@line 195 "lvm.c"
      var $27=$tm2; //@line 195 "lvm.c"
      var $tt_30=(($27+8)|0); //@line 195 "lvm.c"
      var $28=HEAP32[(($tt_30)>>2)]; //@line 195 "lvm.c"
      var $cmp31=(($26)|0)==(($28)|0); //@line 195 "lvm.c"
      if ($cmp31) { label = 21; break; } else { label = 23; break; } //@line 195 "lvm.c"
    case 21: 
      var $29=$tm1; //@line 195 "lvm.c"
      var $30=$tm2; //@line 195 "lvm.c"
      var $call32=__Z14luaV_equalobj_P9lua_StatePK10lua_TValueS3_(0, $29, $30); //@line 195 "lvm.c"
      var $tobool33=(($call32)|0)!=0; //@line 195 "lvm.c"
      if ($tobool33) { label = 22; break; } else { label = 23; break; } //@line 195 "lvm.c"
    case 22: 
      var $31=$tm1; //@line 196 "lvm.c"
      $retval=$31; //@line 196 "lvm.c"
      label = 24; break; //@line 196 "lvm.c"
    case 23: 
      $retval=0; //@line 197 "lvm.c"
      label = 24; break; //@line 197 "lvm.c"
    case 24: 
      var $32=$retval; //@line 198 "lvm.c"

      return $32; //@line 198 "lvm.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL11get_equalTMP9lua_StateP5TableS2_3TMS["X"]=1;

function __Z14luaV_lessequalP9lua_StatePK10lua_TValueS3_($L, $l, $r) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $l_addr;
      var $r_addr;
      var $res;
      $L_addr=$L;
      $l_addr=$l;
      $r_addr=$r;
      var $0=$l_addr; //@line 246 "lvm.c"
      var $tt_=(($0+8)|0); //@line 246 "lvm.c"
      var $1=HEAP32[(($tt_)>>2)]; //@line 246 "lvm.c"
      var $cmp=(($1)|0)==3; //@line 246 "lvm.c"
      if ($cmp) { label = 3; break; } else { label = 5; break; } //@line 246 "lvm.c"
    case 3: 
      var $2=$r_addr; //@line 246 "lvm.c"
      var $tt_1=(($2+8)|0); //@line 246 "lvm.c"
      var $3=HEAP32[(($tt_1)>>2)]; //@line 246 "lvm.c"
      var $cmp2=(($3)|0)==3; //@line 246 "lvm.c"
      if ($cmp2) { label = 4; break; } else { label = 5; break; } //@line 246 "lvm.c"
    case 4: 
      var $4=$l_addr; //@line 247 "lvm.c"
      var $value_=(($4)|0); //@line 247 "lvm.c"
      var $n=$value_; //@line 247 "lvm.c"
      var $5=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 247 "lvm.c"
      var $6=$r_addr; //@line 247 "lvm.c"
      var $value_3=(($6)|0); //@line 247 "lvm.c"
      var $n4=$value_3; //@line 247 "lvm.c"
      var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n4)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n4)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 247 "lvm.c"
      var $cmp5=$5 <= $7; //@line 247 "lvm.c"
      var $conv=(($cmp5)&1); //@line 247 "lvm.c"
      $retval=$conv; //@line 247 "lvm.c"
      label = 16; break; //@line 247 "lvm.c"
    case 5: 
      var $8=$l_addr; //@line 248 "lvm.c"
      var $tt_6=(($8+8)|0); //@line 248 "lvm.c"
      var $9=HEAP32[(($tt_6)>>2)]; //@line 248 "lvm.c"
      var $and=$9 & 15; //@line 248 "lvm.c"
      var $cmp7=(($and)|0)==4; //@line 248 "lvm.c"
      if ($cmp7) { label = 6; break; } else { label = 8; break; } //@line 248 "lvm.c"
    case 6: 
      var $10=$r_addr; //@line 248 "lvm.c"
      var $tt_9=(($10+8)|0); //@line 248 "lvm.c"
      var $11=HEAP32[(($tt_9)>>2)]; //@line 248 "lvm.c"
      var $and10=$11 & 15; //@line 248 "lvm.c"
      var $cmp11=(($and10)|0)==4; //@line 248 "lvm.c"
      if ($cmp11) { label = 7; break; } else { label = 8; break; } //@line 248 "lvm.c"
    case 7: 
      var $12=$l_addr; //@line 249 "lvm.c"
      var $value_13=(($12)|0); //@line 249 "lvm.c"
      var $gc=$value_13; //@line 249 "lvm.c"
      var $13=HEAP32[(($gc)>>2)]; //@line 249 "lvm.c"
      var $ts=$13; //@line 249 "lvm.c"
      var $14=$r_addr; //@line 249 "lvm.c"
      var $value_14=(($14)|0); //@line 249 "lvm.c"
      var $gc15=$value_14; //@line 249 "lvm.c"
      var $15=HEAP32[(($gc15)>>2)]; //@line 249 "lvm.c"
      var $ts16=$15; //@line 249 "lvm.c"
      var $call=__ZL8l_strcmpPK7TStringS1_($ts, $ts16); //@line 249 "lvm.c"
      var $cmp17=(($call)|0) <= 0; //@line 249 "lvm.c"
      var $conv18=(($cmp17)&1); //@line 249 "lvm.c"
      $retval=$conv18; //@line 249 "lvm.c"
      label = 16; break; //@line 249 "lvm.c"
    case 8: 
      var $16=$L_addr; //@line 250 "lvm.c"
      var $17=$l_addr; //@line 250 "lvm.c"
      var $18=$r_addr; //@line 250 "lvm.c"
      var $call20=__ZL12call_orderTMP9lua_StatePK10lua_TValueS3_3TMS($16, $17, $18, 14); //@line 250 "lvm.c"
      $res=$call20; //@line 250 "lvm.c"
      var $cmp21=(($call20)|0) >= 0; //@line 250 "lvm.c"
      if ($cmp21) { label = 9; break; } else { label = 10; break; } //@line 250 "lvm.c"
    case 9: 
      var $19=$res; //@line 251 "lvm.c"
      $retval=$19; //@line 251 "lvm.c"
      label = 16; break; //@line 251 "lvm.c"
    case 10: 
      var $20=$L_addr; //@line 252 "lvm.c"
      var $21=$r_addr; //@line 252 "lvm.c"
      var $22=$l_addr; //@line 252 "lvm.c"
      var $call24=__ZL12call_orderTMP9lua_StatePK10lua_TValueS3_3TMS($20, $21, $22, 13); //@line 252 "lvm.c"
      $res=$call24; //@line 252 "lvm.c"
      var $cmp25=(($call24)|0) < 0; //@line 252 "lvm.c"
      if ($cmp25) { label = 11; break; } else { label = 12; break; } //@line 252 "lvm.c"
    case 11: 
      var $23=$L_addr; //@line 253 "lvm.c"
      var $24=$l_addr; //@line 253 "lvm.c"
      var $25=$r_addr; //@line 253 "lvm.c"
      __Z15luaG_ordererrorP9lua_StatePK10lua_TValueS3_($23, $24, $25); //@line 253 "lvm.c"
      throw "Reached an unreachable!" //@line 253 "lvm.c"
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $26=$res; //@line 254 "lvm.c"
      var $tobool=(($26)|0)!=0; //@line 254 "lvm.c"
      var $lnot=$tobool ^ 1; //@line 254 "lvm.c"
      var $conv30=(($lnot)&1); //@line 254 "lvm.c"
      $retval=$conv30; //@line 254 "lvm.c"
      label = 16; break; //@line 254 "lvm.c"
    case 16: 
      var $27=$retval; //@line 255 "lvm.c"

      return $27; //@line 255 "lvm.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z14luaV_lessequalP9lua_StatePK10lua_TValueS3_["X"]=1;

function __Z11luaV_concatP9lua_Statei($L, $total) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $total_addr;
      var $top;
      var $n;
      var $io2;
      var $io1;
      var $tl;
      var $buffer;
      var $i;
      var $l;
      var $l82;
      var $io;
      var $x_;
      $L_addr=$L;
      $total_addr=$total;
      label = 3; break; //@line 296 "lvm.c"
    case 3: 
      var $0=$L_addr; //@line 297 "lvm.c"
      var $top1=(($0+8)|0); //@line 297 "lvm.c"
      var $1=HEAP32[(($top1)>>2)]; //@line 297 "lvm.c"
      $top=$1; //@line 297 "lvm.c"
      $n=2; //@line 298 "lvm.c"
      var $2=$top; //@line 299 "lvm.c"
      var $add_ptr=((($2)-(24))|0); //@line 299 "lvm.c"
      var $tt_=(($add_ptr+8)|0); //@line 299 "lvm.c"
      var $3=HEAP32[(($tt_)>>2)]; //@line 299 "lvm.c"
      var $and=$3 & 15; //@line 299 "lvm.c"
      var $cmp=(($and)|0)==4; //@line 299 "lvm.c"
      if ($cmp) { label = 5; break; } else { label = 4; break; } //@line 299 "lvm.c"
    case 4: 
      var $4=$top; //@line 299 "lvm.c"
      var $add_ptr2=((($4)-(24))|0); //@line 299 "lvm.c"
      var $tt_3=(($add_ptr2+8)|0); //@line 299 "lvm.c"
      var $5=HEAP32[(($tt_3)>>2)]; //@line 299 "lvm.c"
      var $cmp4=(($5)|0)==3; //@line 299 "lvm.c"
      if ($cmp4) { label = 5; break; } else { label = 7; break; } //@line 299 "lvm.c"
    case 5: 
      var $6=$top; //@line 299 "lvm.c"
      var $add_ptr6=((($6)-(12))|0); //@line 299 "lvm.c"
      var $tt_7=(($add_ptr6+8)|0); //@line 299 "lvm.c"
      var $7=HEAP32[(($tt_7)>>2)]; //@line 299 "lvm.c"
      var $and8=$7 & 15; //@line 299 "lvm.c"
      var $cmp9=(($and8)|0)==4; //@line 299 "lvm.c"
      if ($cmp9) { label = 10; break; } else { label = 6; break; } //@line 299 "lvm.c"
    case 6: 
      var $8=$L_addr; //@line 299 "lvm.c"
      var $9=$top; //@line 299 "lvm.c"
      var $add_ptr11=((($9)-(12))|0); //@line 299 "lvm.c"
      var $call=__Z13luaV_tostringP9lua_StateP10lua_TValue($8, $add_ptr11); //@line 299 "lvm.c"
      var $tobool=(($call)|0)!=0; //@line 299 "lvm.c"
      if ($tobool) { label = 10; break; } else { label = 7; break; } //@line 299 "lvm.c"
    case 7: 
      var $10=$L_addr; //@line 300 "lvm.c"
      var $11=$top; //@line 300 "lvm.c"
      var $add_ptr12=((($11)-(24))|0); //@line 300 "lvm.c"
      var $12=$top; //@line 300 "lvm.c"
      var $add_ptr13=((($12)-(12))|0); //@line 300 "lvm.c"
      var $13=$top; //@line 300 "lvm.c"
      var $add_ptr14=((($13)-(24))|0); //@line 300 "lvm.c"
      var $call15=__ZL10call_binTMP9lua_StatePK10lua_TValueS3_PS1_3TMS($10, $add_ptr12, $add_ptr13, $add_ptr14, 15); //@line 300 "lvm.c"
      var $tobool16=(($call15)|0)!=0; //@line 300 "lvm.c"
      if ($tobool16) { label = 9; break; } else { label = 8; break; } //@line 300 "lvm.c"
    case 8: 
      var $14=$L_addr; //@line 301 "lvm.c"
      var $15=$top; //@line 301 "lvm.c"
      var $add_ptr18=((($15)-(24))|0); //@line 301 "lvm.c"
      var $16=$top; //@line 301 "lvm.c"
      var $add_ptr19=((($16)-(12))|0); //@line 301 "lvm.c"
      __Z16luaG_concaterrorP9lua_StateP10lua_TValueS2_($14, $add_ptr18, $add_ptr19); //@line 301 "lvm.c"
      throw "Reached an unreachable!" //@line 301 "lvm.c"
    case 9: 
      label = 33; break; //@line 302 "lvm.c"
    case 10: 
      var $17=$top; //@line 303 "lvm.c"
      var $add_ptr20=((($17)-(12))|0); //@line 303 "lvm.c"
      var $value_=(($add_ptr20)|0); //@line 303 "lvm.c"
      var $gc=$value_; //@line 303 "lvm.c"
      var $18=HEAP32[(($gc)>>2)]; //@line 303 "lvm.c"
      var $ts=$18; //@line 303 "lvm.c"
      var $tsv=$ts; //@line 303 "lvm.c"
      var $len=(($tsv+12)|0); //@line 303 "lvm.c"
      var $19=HEAP32[(($len)>>2)]; //@line 303 "lvm.c"
      var $cmp21=(($19)|0)==0; //@line 303 "lvm.c"
      if ($cmp21) { label = 11; break; } else { label = 14; break; } //@line 303 "lvm.c"
    case 11: 
      var $20=$top; //@line 304 "lvm.c"
      var $add_ptr23=((($20)-(24))|0); //@line 304 "lvm.c"
      var $tt_24=(($add_ptr23+8)|0); //@line 304 "lvm.c"
      var $21=HEAP32[(($tt_24)>>2)]; //@line 304 "lvm.c"
      var $and25=$21 & 15; //@line 304 "lvm.c"
      var $cmp26=(($and25)|0)==4; //@line 304 "lvm.c"
      if ($cmp26) { var $24 = 1;label = 13; break; } else { label = 12; break; } //@line 304 "lvm.c"
    case 12: 
      var $22=$L_addr; //@line 304 "lvm.c"
      var $23=$top; //@line 304 "lvm.c"
      var $add_ptr27=((($23)-(24))|0); //@line 304 "lvm.c"
      var $call28=__Z13luaV_tostringP9lua_StateP10lua_TValue($22, $add_ptr27); //@line 304 "lvm.c"
      var $tobool29=(($call28)|0)!=0; //@line 304 "lvm.c"
      var $24 = $tobool29;label = 13; break; //@line 304 "lvm.c"
    case 13: 
      var $24;
      label = 32; break; //@line 304 "lvm.c"
    case 14: 
      var $25=$top; //@line 305 "lvm.c"
      var $add_ptr31=((($25)-(24))|0); //@line 305 "lvm.c"
      var $tt_32=(($add_ptr31+8)|0); //@line 305 "lvm.c"
      var $26=HEAP32[(($tt_32)>>2)]; //@line 305 "lvm.c"
      var $and33=$26 & 15; //@line 305 "lvm.c"
      var $cmp34=(($and33)|0)==4; //@line 305 "lvm.c"
      if ($cmp34) { label = 15; break; } else { label = 17; break; } //@line 305 "lvm.c"
    case 15: 
      var $27=$top; //@line 305 "lvm.c"
      var $add_ptr35=((($27)-(24))|0); //@line 305 "lvm.c"
      var $value_36=(($add_ptr35)|0); //@line 305 "lvm.c"
      var $gc37=$value_36; //@line 305 "lvm.c"
      var $28=HEAP32[(($gc37)>>2)]; //@line 305 "lvm.c"
      var $ts38=$28; //@line 305 "lvm.c"
      var $tsv39=$ts38; //@line 305 "lvm.c"
      var $len40=(($tsv39+12)|0); //@line 305 "lvm.c"
      var $29=HEAP32[(($len40)>>2)]; //@line 305 "lvm.c"
      var $cmp41=(($29)|0)==0; //@line 305 "lvm.c"
      if ($cmp41) { label = 16; break; } else { label = 17; break; } //@line 305 "lvm.c"
    case 16: 
      var $30=$top; //@line 306 "lvm.c"
      var $add_ptr43=((($30)-(12))|0); //@line 306 "lvm.c"
      $io2=$add_ptr43; //@line 306 "lvm.c"
      var $31=$top; //@line 306 "lvm.c"
      var $add_ptr44=((($31)-(24))|0); //@line 306 "lvm.c"
      $io1=$add_ptr44; //@line 306 "lvm.c"
      var $32=$io1; //@line 306 "lvm.c"
      var $value_45=(($32)|0); //@line 306 "lvm.c"
      var $33=$io2; //@line 306 "lvm.c"
      var $value_46=(($33)|0); //@line 306 "lvm.c"
      var $34=$value_45; //@line 306 "lvm.c"
      var $35=$value_46; //@line 306 "lvm.c"
      assert(8 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)]; //@line 306 "lvm.c"
      var $36=$io2; //@line 306 "lvm.c"
      var $tt_47=(($36+8)|0); //@line 306 "lvm.c"
      var $37=HEAP32[(($tt_47)>>2)]; //@line 306 "lvm.c"
      var $38=$io1; //@line 306 "lvm.c"
      var $tt_48=(($38+8)|0); //@line 306 "lvm.c"
      HEAP32[(($tt_48)>>2)]=$37; //@line 306 "lvm.c"
      label = 31; break; //@line 307 "lvm.c"
    case 17: 
      var $39=$top; //@line 310 "lvm.c"
      var $add_ptr50=((($39)-(12))|0); //@line 310 "lvm.c"
      var $value_51=(($add_ptr50)|0); //@line 310 "lvm.c"
      var $gc52=$value_51; //@line 310 "lvm.c"
      var $40=HEAP32[(($gc52)>>2)]; //@line 310 "lvm.c"
      var $ts53=$40; //@line 310 "lvm.c"
      var $tsv54=$ts53; //@line 310 "lvm.c"
      var $len55=(($tsv54+12)|0); //@line 310 "lvm.c"
      var $41=HEAP32[(($len55)>>2)]; //@line 310 "lvm.c"
      $tl=$41; //@line 310 "lvm.c"
      $i=1; //@line 314 "lvm.c"
      label = 18; break; //@line 314 "lvm.c"
    case 18: 
      var $42=$i; //@line 314 "lvm.c"
      var $43=$total_addr; //@line 314 "lvm.c"
      var $cmp56=(($42)|0) < (($43)|0); //@line 314 "lvm.c"
      if ($cmp56) { label = 19; break; } else { var $51 = 0;label = 22; break; } //@line 314 "lvm.c"
    case 19: 
      var $44=$top; //@line 314 "lvm.c"
      var $45=$i; //@line 314 "lvm.c"
      var $idx_neg=(((-$45))|0); //@line 314 "lvm.c"
      var $add_ptr57=(($44+((($idx_neg)*(12))&-1))|0); //@line 314 "lvm.c"
      var $add_ptr58=((($add_ptr57)-(12))|0); //@line 314 "lvm.c"
      var $tt_59=(($add_ptr58+8)|0); //@line 314 "lvm.c"
      var $46=HEAP32[(($tt_59)>>2)]; //@line 314 "lvm.c"
      var $and60=$46 & 15; //@line 314 "lvm.c"
      var $cmp61=(($and60)|0)==4; //@line 314 "lvm.c"
      if ($cmp61) { var $50 = 1;label = 21; break; } else { label = 20; break; } //@line 314 "lvm.c"
    case 20: 
      var $47=$L_addr; //@line 314 "lvm.c"
      var $48=$top; //@line 314 "lvm.c"
      var $49=$i; //@line 314 "lvm.c"
      var $idx_neg63=(((-$49))|0); //@line 314 "lvm.c"
      var $add_ptr64=(($48+((($idx_neg63)*(12))&-1))|0); //@line 314 "lvm.c"
      var $add_ptr65=((($add_ptr64)-(12))|0); //@line 314 "lvm.c"
      var $call66=__Z13luaV_tostringP9lua_StateP10lua_TValue($47, $add_ptr65); //@line 314 "lvm.c"
      var $tobool67=(($call66)|0)!=0; //@line 314 "lvm.c"
      var $50 = $tobool67;label = 21; break; //@line 314 "lvm.c"
    case 21: 
      var $50;
      var $51 = $50;label = 22; break;
    case 22: 
      var $51;
      if ($51) { label = 23; break; } else { label = 27; break; }
    case 23: 
      var $52=$top; //@line 315 "lvm.c"
      var $53=$i; //@line 315 "lvm.c"
      var $idx_neg69=(((-$53))|0); //@line 315 "lvm.c"
      var $add_ptr70=(($52+((($idx_neg69)*(12))&-1))|0); //@line 315 "lvm.c"
      var $add_ptr71=((($add_ptr70)-(12))|0); //@line 315 "lvm.c"
      var $value_72=(($add_ptr71)|0); //@line 315 "lvm.c"
      var $gc73=$value_72; //@line 315 "lvm.c"
      var $54=HEAP32[(($gc73)>>2)]; //@line 315 "lvm.c"
      var $ts74=$54; //@line 315 "lvm.c"
      var $tsv75=$ts74; //@line 315 "lvm.c"
      var $len76=(($tsv75+12)|0); //@line 315 "lvm.c"
      var $55=HEAP32[(($len76)>>2)]; //@line 315 "lvm.c"
      $l=$55; //@line 315 "lvm.c"
      var $56=$l; //@line 316 "lvm.c"
      var $57=$tl; //@line 316 "lvm.c"
      var $sub=(((-3)-($57))|0); //@line 316 "lvm.c"
      var $cmp77=(($56)>>>0) >= (($sub)>>>0); //@line 316 "lvm.c"
      if ($cmp77) { label = 24; break; } else { label = 25; break; } //@line 316 "lvm.c"
    case 24: 
      var $58=$L_addr; //@line 317 "lvm.c"
      __Z13luaG_runerrorP9lua_StatePKcz($58, ((5243664)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 317 "lvm.c"
      throw "Reached an unreachable!" //@line 317 "lvm.c"
    case 25: 
      var $59=$l; //@line 318 "lvm.c"
      var $60=$tl; //@line 318 "lvm.c"
      var $add=((($60)+($59))|0); //@line 318 "lvm.c"
      $tl=$add; //@line 318 "lvm.c"
      label = 26; break; //@line 319 "lvm.c"
    case 26: 
      var $61=$i; //@line 314 "lvm.c"
      var $inc=((($61)+(1))|0); //@line 314 "lvm.c"
      $i=$inc; //@line 314 "lvm.c"
      label = 18; break; //@line 314 "lvm.c"
    case 27: 
      var $62=$L_addr; //@line 320 "lvm.c"
      var $63=$L_addr; //@line 320 "lvm.c"
      var $l_G=(($63+12)|0); //@line 320 "lvm.c"
      var $64=HEAP32[(($l_G)>>2)]; //@line 320 "lvm.c"
      var $buff=(($64+124)|0); //@line 320 "lvm.c"
      var $65=$tl; //@line 320 "lvm.c"
      var $call80=__Z14luaZ_openspaceP9lua_StateP7Mbufferj($62, $buff, $65); //@line 320 "lvm.c"
      $buffer=$call80; //@line 320 "lvm.c"
      $tl=0; //@line 321 "lvm.c"
      var $66=$i; //@line 322 "lvm.c"
      $n=$66; //@line 322 "lvm.c"
      label = 28; break; //@line 323 "lvm.c"
    case 28: 
      var $67=$top; //@line 324 "lvm.c"
      var $68=$i; //@line 324 "lvm.c"
      var $idx_neg83=(((-$68))|0); //@line 324 "lvm.c"
      var $add_ptr84=(($67+((($idx_neg83)*(12))&-1))|0); //@line 324 "lvm.c"
      var $value_85=(($add_ptr84)|0); //@line 324 "lvm.c"
      var $gc86=$value_85; //@line 324 "lvm.c"
      var $69=HEAP32[(($gc86)>>2)]; //@line 324 "lvm.c"
      var $ts87=$69; //@line 324 "lvm.c"
      var $tsv88=$ts87; //@line 324 "lvm.c"
      var $len89=(($tsv88+12)|0); //@line 324 "lvm.c"
      var $70=HEAP32[(($len89)>>2)]; //@line 324 "lvm.c"
      $l82=$70; //@line 324 "lvm.c"
      var $71=$buffer; //@line 325 "lvm.c"
      var $72=$tl; //@line 325 "lvm.c"
      var $add_ptr90=(($71+$72)|0); //@line 325 "lvm.c"
      var $73=$top; //@line 325 "lvm.c"
      var $74=$i; //@line 325 "lvm.c"
      var $idx_neg91=(((-$74))|0); //@line 325 "lvm.c"
      var $add_ptr92=(($73+((($idx_neg91)*(12))&-1))|0); //@line 325 "lvm.c"
      var $value_93=(($add_ptr92)|0); //@line 325 "lvm.c"
      var $gc94=$value_93; //@line 325 "lvm.c"
      var $75=HEAP32[(($gc94)>>2)]; //@line 325 "lvm.c"
      var $ts95=$75; //@line 325 "lvm.c"
      var $add_ptr96=(($ts95+16)|0); //@line 325 "lvm.c"
      var $76=$add_ptr96; //@line 325 "lvm.c"
      var $77=$l82; //@line 325 "lvm.c"
      var $mul=$77; //@line 325 "lvm.c"
      assert($mul % 1 === 0);_memcpy($add_ptr90, $76, $mul); //@line 325 "lvm.c"
      var $78=$l82; //@line 326 "lvm.c"
      var $79=$tl; //@line 326 "lvm.c"
      var $add97=((($79)+($78))|0); //@line 326 "lvm.c"
      $tl=$add97; //@line 326 "lvm.c"
      label = 29; break; //@line 327 "lvm.c"
    case 29: 
      var $80=$i; //@line 327 "lvm.c"
      var $dec=((($80)-(1))|0); //@line 327 "lvm.c"
      $i=$dec; //@line 327 "lvm.c"
      var $cmp98=(($dec)|0) > 0; //@line 327 "lvm.c"
      if ($cmp98) { label = 28; break; } else { label = 30; break; } //@line 327 "lvm.c"
    case 30: 
      var $81=$top; //@line 328 "lvm.c"
      var $82=$n; //@line 328 "lvm.c"
      var $idx_neg99=(((-$82))|0); //@line 328 "lvm.c"
      var $add_ptr100=(($81+((($idx_neg99)*(12))&-1))|0); //@line 328 "lvm.c"
      $io=$add_ptr100; //@line 328 "lvm.c"
      var $83=$L_addr; //@line 328 "lvm.c"
      var $84=$buffer; //@line 328 "lvm.c"
      var $85=$tl; //@line 328 "lvm.c"
      var $call101=__Z12luaS_newlstrP9lua_StatePKcj($83, $84, $85); //@line 328 "lvm.c"
      $x_=$call101; //@line 328 "lvm.c"
      var $86=$x_; //@line 328 "lvm.c"
      var $87=$86; //@line 328 "lvm.c"
      var $88=$io; //@line 328 "lvm.c"
      var $value_102=(($88)|0); //@line 328 "lvm.c"
      var $gc103=$value_102; //@line 328 "lvm.c"
      HEAP32[(($gc103)>>2)]=$87; //@line 328 "lvm.c"
      var $89=$x_; //@line 328 "lvm.c"
      var $tsv104=$89; //@line 328 "lvm.c"
      var $tt=(($tsv104+4)|0); //@line 328 "lvm.c"
      var $90=HEAP8[($tt)]; //@line 328 "lvm.c"
      var $conv=(($90)&255); //@line 328 "lvm.c"
      var $or=$conv | 64; //@line 328 "lvm.c"
      var $91=$io; //@line 328 "lvm.c"
      var $tt_105=(($91+8)|0); //@line 328 "lvm.c"
      HEAP32[(($tt_105)>>2)]=$or; //@line 328 "lvm.c"
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $92=$n; //@line 330 "lvm.c"
      var $sub109=((($92)-(1))|0); //@line 330 "lvm.c"
      var $93=$total_addr; //@line 330 "lvm.c"
      var $sub110=((($93)-($sub109))|0); //@line 330 "lvm.c"
      $total_addr=$sub110; //@line 330 "lvm.c"
      var $94=$n; //@line 331 "lvm.c"
      var $sub111=((($94)-(1))|0); //@line 331 "lvm.c"
      var $95=$L_addr; //@line 331 "lvm.c"
      var $top112=(($95+8)|0); //@line 331 "lvm.c"
      var $96=HEAP32[(($top112)>>2)]; //@line 331 "lvm.c"
      var $idx_neg113=(((-$sub111))|0); //@line 331 "lvm.c"
      var $add_ptr114=(($96+((($idx_neg113)*(12))&-1))|0); //@line 331 "lvm.c"
      HEAP32[(($top112)>>2)]=$add_ptr114; //@line 331 "lvm.c"
      label = 34; break; //@line 332 "lvm.c"
    case 34: 
      var $97=$total_addr; //@line 332 "lvm.c"
      var $cmp116=(($97)|0) > 1; //@line 332 "lvm.c"
      if ($cmp116) { label = 3; break; } else { label = 35; break; } //@line 332 "lvm.c"
    case 35: 
      STACKTOP = __stackBase__;
      return; //@line 333 "lvm.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z11luaV_concatP9lua_Statei["X"]=1;

function __ZL10call_binTMP9lua_StatePK10lua_TValueS3_PS1_3TMS($L, $p1, $p2, $res, $event) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $p1_addr;
      var $p2_addr;
      var $res_addr;
      var $event_addr;
      var $tm;
      $L_addr=$L;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $res_addr=$res;
      $event_addr=$event;
      var $0=$L_addr; //@line 178 "lvm.c"
      var $1=$p1_addr; //@line 178 "lvm.c"
      var $2=$event_addr; //@line 178 "lvm.c"
      var $call=__Z15luaT_gettmbyobjP9lua_StatePK10lua_TValue3TMS($0, $1, $2); //@line 178 "lvm.c"
      $tm=$call; //@line 178 "lvm.c"
      var $3=$tm; //@line 179 "lvm.c"
      var $tt_=(($3+8)|0); //@line 179 "lvm.c"
      var $4=HEAP32[(($tt_)>>2)]; //@line 179 "lvm.c"
      var $cmp=(($4)|0)==0; //@line 179 "lvm.c"
      if ($cmp) { label = 3; break; } else { label = 4; break; } //@line 179 "lvm.c"
    case 3: 
      var $5=$L_addr; //@line 180 "lvm.c"
      var $6=$p2_addr; //@line 180 "lvm.c"
      var $7=$event_addr; //@line 180 "lvm.c"
      var $call1=__Z15luaT_gettmbyobjP9lua_StatePK10lua_TValue3TMS($5, $6, $7); //@line 180 "lvm.c"
      $tm=$call1; //@line 180 "lvm.c"
      label = 4; break; //@line 180 "lvm.c"
    case 4: 
      var $8=$tm; //@line 181 "lvm.c"
      var $tt_2=(($8+8)|0); //@line 181 "lvm.c"
      var $9=HEAP32[(($tt_2)>>2)]; //@line 181 "lvm.c"
      var $cmp3=(($9)|0)==0; //@line 181 "lvm.c"
      if ($cmp3) { label = 5; break; } else { label = 6; break; } //@line 181 "lvm.c"
    case 5: 
      $retval=0; //@line 181 "lvm.c"
      label = 7; break; //@line 181 "lvm.c"
    case 6: 
      var $10=$L_addr; //@line 182 "lvm.c"
      var $11=$tm; //@line 182 "lvm.c"
      var $12=$p1_addr; //@line 182 "lvm.c"
      var $13=$p2_addr; //@line 182 "lvm.c"
      var $14=$res_addr; //@line 182 "lvm.c"
      __ZL6callTMP9lua_StatePK10lua_TValueS3_S3_PS1_i($10, $11, $12, $13, $14, 1); //@line 182 "lvm.c"
      $retval=1; //@line 183 "lvm.c"
      label = 7; break; //@line 183 "lvm.c"
    case 7: 
      var $15=$retval; //@line 184 "lvm.c"

      return $15; //@line 184 "lvm.c"
    default: assert(0, "bad label: " + label);
  }

}


function __Z11luaV_objlenP9lua_StateP10lua_TValuePKS1_($L, $ra, $rb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $ra_addr;
      var $rb_addr;
      var $tm;
      var $h;
      var $io;
      var $io15;
      $L_addr=$L;
      $ra_addr=$ra;
      $rb_addr=$rb;
      var $0=$rb_addr; //@line 338 "lvm.c"
      var $tt_=(($0+8)|0); //@line 338 "lvm.c"
      var $1=HEAP32[(($tt_)>>2)]; //@line 338 "lvm.c"
      var $and=$1 & 15; //@line 338 "lvm.c"
      if ((($and)|0)==5) {
        label = 3; break;
      }
      else if ((($and)|0)==4) {
        label = 12; break;
      }
      else {
      label = 13; break;
      }
      
    case 3: 
      var $2=$rb_addr; //@line 340 "lvm.c"
      var $value_=(($2)|0); //@line 340 "lvm.c"
      var $gc=$value_; //@line 340 "lvm.c"
      var $3=HEAP32[(($gc)>>2)]; //@line 340 "lvm.c"
      var $h1=$3; //@line 340 "lvm.c"
      $h=$h1; //@line 340 "lvm.c"
      var $4=$h; //@line 341 "lvm.c"
      var $metatable=(($4+8)|0); //@line 341 "lvm.c"
      var $5=HEAP32[(($metatable)>>2)]; //@line 341 "lvm.c"
      var $cmp=(($5)|0)==0; //@line 341 "lvm.c"
      if ($cmp) { label = 4; break; } else { label = 5; break; } //@line 341 "lvm.c"
    case 4: 
      var $cond8 = 0;label = 9; break; //@line 341 "lvm.c"
    case 5: 
      var $6=$h; //@line 341 "lvm.c"
      var $metatable2=(($6+8)|0); //@line 341 "lvm.c"
      var $7=HEAP32[(($metatable2)>>2)]; //@line 341 "lvm.c"
      var $flags=(($7+6)|0); //@line 341 "lvm.c"
      var $8=HEAP8[($flags)]; //@line 341 "lvm.c"
      var $conv=(($8)&255); //@line 341 "lvm.c"
      var $and3=$conv & 16; //@line 341 "lvm.c"
      var $tobool=(($and3)|0)!=0; //@line 341 "lvm.c"
      if ($tobool) { label = 6; break; } else { label = 7; break; } //@line 341 "lvm.c"
    case 6: 
      var $cond = 0;label = 8; break; //@line 341 "lvm.c"
    case 7: 
      var $9=$h; //@line 341 "lvm.c"
      var $metatable6=(($9+8)|0); //@line 341 "lvm.c"
      var $10=HEAP32[(($metatable6)>>2)]; //@line 341 "lvm.c"
      var $11=$L_addr; //@line 341 "lvm.c"
      var $l_G=(($11+12)|0); //@line 341 "lvm.c"
      var $12=HEAP32[(($l_G)>>2)]; //@line 341 "lvm.c"
      var $tmname=(($12+164)|0); //@line 341 "lvm.c"
      var $arrayidx=(($tmname+16)|0); //@line 341 "lvm.c"
      var $13=HEAP32[(($arrayidx)>>2)]; //@line 341 "lvm.c"
      var $call=__Z10luaT_gettmP5Table3TMSP7TString($10, 4, $13); //@line 341 "lvm.c"
      var $cond = $call;label = 8; break; //@line 341 "lvm.c"
    case 8: 
      var $cond; //@line 341 "lvm.c"
      var $cond8 = $cond;label = 9; break; //@line 341 "lvm.c"
    case 9: 
      var $cond8; //@line 341 "lvm.c"
      $tm=$cond8; //@line 341 "lvm.c"
      var $14=$tm; //@line 342 "lvm.c"
      var $tobool9=(($14)|0)!=0; //@line 342 "lvm.c"
      if ($tobool9) { label = 10; break; } else { label = 11; break; } //@line 342 "lvm.c"
    case 10: 
      label = 16; break; //@line 342 "lvm.c"
    case 11: 
      var $15=$ra_addr; //@line 343 "lvm.c"
      $io=$15; //@line 343 "lvm.c"
      var $16=$h; //@line 343 "lvm.c"
      var $call10=__Z9luaH_getnP5Table($16); //@line 343 "lvm.c"
      var $conv11=(($call10)|0); //@line 343 "lvm.c"
      var $17=$io; //@line 343 "lvm.c"
      var $value_12=(($17)|0); //@line 343 "lvm.c"
      var $n=$value_12; //@line 343 "lvm.c"
      (HEAPF64[(tempDoublePtr)>>3]=$conv11,HEAP32[(($n)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); //@line 343 "lvm.c"
      var $18=$io; //@line 343 "lvm.c"
      var $tt_13=(($18+8)|0); //@line 343 "lvm.c"
      HEAP32[(($tt_13)>>2)]=3; //@line 343 "lvm.c"
      label = 17; break; //@line 344 "lvm.c"
    case 12: 
      var $19=$ra_addr; //@line 347 "lvm.c"
      $io15=$19; //@line 347 "lvm.c"
      var $20=$rb_addr; //@line 347 "lvm.c"
      var $value_16=(($20)|0); //@line 347 "lvm.c"
      var $gc17=$value_16; //@line 347 "lvm.c"
      var $21=HEAP32[(($gc17)>>2)]; //@line 347 "lvm.c"
      var $ts=$21; //@line 347 "lvm.c"
      var $tsv=$ts; //@line 347 "lvm.c"
      var $len=(($tsv+12)|0); //@line 347 "lvm.c"
      var $22=HEAP32[(($len)>>2)]; //@line 347 "lvm.c"
      var $conv18=(($22)>>>0); //@line 347 "lvm.c"
      var $23=$io15; //@line 347 "lvm.c"
      var $value_19=(($23)|0); //@line 347 "lvm.c"
      var $n20=$value_19; //@line 347 "lvm.c"
      (HEAPF64[(tempDoublePtr)>>3]=$conv18,HEAP32[(($n20)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n20)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); //@line 347 "lvm.c"
      var $24=$io15; //@line 347 "lvm.c"
      var $tt_21=(($24+8)|0); //@line 347 "lvm.c"
      HEAP32[(($tt_21)>>2)]=3; //@line 347 "lvm.c"
      label = 17; break; //@line 348 "lvm.c"
    case 13: 
      var $25=$L_addr; //@line 351 "lvm.c"
      var $26=$rb_addr; //@line 351 "lvm.c"
      var $call22=__Z15luaT_gettmbyobjP9lua_StatePK10lua_TValue3TMS($25, $26, 4); //@line 351 "lvm.c"
      $tm=$call22; //@line 351 "lvm.c"
      var $27=$tm; //@line 352 "lvm.c"
      var $tt_23=(($27+8)|0); //@line 352 "lvm.c"
      var $28=HEAP32[(($tt_23)>>2)]; //@line 352 "lvm.c"
      var $cmp24=(($28)|0)==0; //@line 352 "lvm.c"
      if ($cmp24) { label = 14; break; } else { label = 15; break; } //@line 352 "lvm.c"
    case 14: 
      var $29=$L_addr; //@line 353 "lvm.c"
      var $30=$rb_addr; //@line 353 "lvm.c"
      __Z14luaG_typeerrorP9lua_StatePK10lua_TValuePKc($29, $30, ((5243492)|0)); //@line 353 "lvm.c"
      throw "Reached an unreachable!" //@line 353 "lvm.c"
    case 15: 
      label = 16; break; //@line 354 "lvm.c"
    case 16: 
      var $31=$L_addr; //@line 357 "lvm.c"
      var $32=$tm; //@line 357 "lvm.c"
      var $33=$rb_addr; //@line 357 "lvm.c"
      var $34=$rb_addr; //@line 357 "lvm.c"
      var $35=$ra_addr; //@line 357 "lvm.c"
      __ZL6callTMP9lua_StatePK10lua_TValueS3_S3_PS1_i($31, $32, $33, $34, $35, 1); //@line 357 "lvm.c"
      label = 17; break; //@line 358 "lvm.c"
    case 17: 

      return; //@line 358 "lvm.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z11luaV_objlenP9lua_StateP10lua_TValuePKS1_["X"]=1;

function __Z10luaV_arithP9lua_StateP10lua_TValuePKS1_S4_3TMS($L, $ra, $rb, $rc, $op) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $ra_addr;
      var $rb_addr;
      var $rc_addr;
      var $op_addr;
      var $tempb=__stackBase__;
      var $tempc=(__stackBase__)+(12);
      var $b;
      var $c;
      var $res;
      var $io;
      $L_addr=$L;
      $ra_addr=$ra;
      $rb_addr=$rb;
      $rc_addr=$rc;
      $op_addr=$op;
      var $0=$rb_addr; //@line 365 "lvm.c"
      var $call=__Z13luaV_tonumberPK10lua_TValuePS_($0, $tempb); //@line 365 "lvm.c"
      $b=$call; //@line 365 "lvm.c"
      var $cmp=(($call)|0)!=0; //@line 365 "lvm.c"
      if ($cmp) { label = 3; break; } else { label = 5; break; } //@line 365 "lvm.c"
    case 3: 
      var $1=$rc_addr; //@line 366 "lvm.c"
      var $call1=__Z13luaV_tonumberPK10lua_TValuePS_($1, $tempc); //@line 366 "lvm.c"
      $c=$call1; //@line 366 "lvm.c"
      var $cmp2=(($call1)|0)!=0; //@line 366 "lvm.c"
      if ($cmp2) { label = 4; break; } else { label = 5; break; } //@line 366 "lvm.c"
    case 4: 
      var $2=$op_addr; //@line 367 "lvm.c"
      var $sub=((($2)-(6))|0); //@line 367 "lvm.c"
      var $add=(($sub)|0); //@line 367 "lvm.c"
      var $3=$b; //@line 367 "lvm.c"
      var $value_=(($3)|0); //@line 367 "lvm.c"
      var $n=$value_; //@line 367 "lvm.c"
      var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 367 "lvm.c"
      var $5=$c; //@line 367 "lvm.c"
      var $value_3=(($5)|0); //@line 367 "lvm.c"
      var $n4=$value_3; //@line 367 "lvm.c"
      var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n4)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n4)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 367 "lvm.c"
      var $call5=__Z10luaO_arithidd($add, $4, $6); //@line 367 "lvm.c"
      $res=$call5; //@line 367 "lvm.c"
      var $7=$ra_addr; //@line 368 "lvm.c"
      $io=$7; //@line 368 "lvm.c"
      var $8=$res; //@line 368 "lvm.c"
      var $9=$io; //@line 368 "lvm.c"
      var $value_6=(($9)|0); //@line 368 "lvm.c"
      var $n7=$value_6; //@line 368 "lvm.c"
      (HEAPF64[(tempDoublePtr)>>3]=$8,HEAP32[(($n7)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n7)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); //@line 368 "lvm.c"
      var $10=$io; //@line 368 "lvm.c"
      var $tt_=(($10+8)|0); //@line 368 "lvm.c"
      HEAP32[(($tt_)>>2)]=3; //@line 368 "lvm.c"
      label = 8; break; //@line 369 "lvm.c"
    case 5: 
      var $11=$L_addr; //@line 370 "lvm.c"
      var $12=$rb_addr; //@line 370 "lvm.c"
      var $13=$rc_addr; //@line 370 "lvm.c"
      var $14=$ra_addr; //@line 370 "lvm.c"
      var $15=$op_addr; //@line 370 "lvm.c"
      var $call8=__ZL10call_binTMP9lua_StatePK10lua_TValueS3_PS1_3TMS($11, $12, $13, $14, $15); //@line 370 "lvm.c"
      var $tobool=(($call8)|0)!=0; //@line 370 "lvm.c"
      if ($tobool) { label = 7; break; } else { label = 6; break; } //@line 370 "lvm.c"
    case 6: 
      var $16=$L_addr; //@line 371 "lvm.c"
      var $17=$rb_addr; //@line 371 "lvm.c"
      var $18=$rc_addr; //@line 371 "lvm.c"
      __Z15luaG_aritherrorP9lua_StatePK10lua_TValueS3_($16, $17, $18); //@line 371 "lvm.c"
      throw "Reached an unreachable!" //@line 371 "lvm.c"
    case 7: 
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return; //@line 372 "lvm.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z10luaV_arithP9lua_StateP10lua_TValuePKS1_S4_3TMS["X"]=1;

function __Z12luaV_executeP9lua_State($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $ci;
      var $cl;
      var $k;
      var $base;
      var $i;
      var $ra;
      var $io2;
      var $io1;
      var $rb;
      var $io228;
      var $io129;
      var $rb35;
      var $io243;
      var $io144;
      var $io;
      var $b64;
      var $b72;
      var $io275;
      var $io176;
      var $b82;
      var $a;
      var $uv;
      var $io2168;
      var $io1169;
      var $b229;
      var $c;
      var $t;
      var $io234;
      var $rb255;
      var $io2259;
      var $io1260;
      var $rb285;
      var $rc;
      var $nb;
      var $nc;
      var $io325;
      var $rb334;
      var $rc350;
      var $nb372;
      var $nc375;
      var $io378;
      var $rb388;
      var $rc404;
      var $nb426;
      var $nc429;
      var $io432;
      var $rb442;
      var $rc458;
      var $nb480;
      var $nc483;
      var $io486;
      var $rb496;
      var $rc512;
      var $nb534;
      var $nc537;
      var $io540;
      var $rb554;
      var $rc570;
      var $nb592;
      var $nc595;
      var $io598;
      var $rb609;
      var $nb616;
      var $io619;
      var $rb630;
      var $res;
      var $io642;
      var $b654;
      var $c657;
      var $rb660;
      var $io2673;
      var $io1674;
      var $a699;
      var $rb719;
      var $rc735;
      var $a771;
      var $a838;
      var $a905;
      var $a961;
      var $rb982;
      var $io21015;
      var $io11016;
      var $a1024;
      var $b1045;
      var $nresults;
      var $b1073;
      var $nci;
      var $oci;
      var $nfunc;
      var $ofunc;
      var $lim;
      var $aux;
      var $io21111;
      var $io11113;
      var $b1147;
      var $step;
      var $idx;
      var $limit;
      var $io1197;
      var $io1201;
      var $init;
      var $plimit;
      var $pstep;
      var $io1235;
      var $cb;
      var $io21253;
      var $io11255;
      var $io21261;
      var $io11263;
      var $io21269;
      var $io11270;
      var $io21296;
      var $io11298;
      var $n1312;
      var $c1315;
      var $last;
      var $h;
      var $val;
      var $p1375;
      var $ncl;
      var $io1388;
      var $b1406;
      var $j;
      var $n1410;
      var $io21446;
      var $io11449;
      $L_addr=$L;
      var $0=$L_addr; //@line 536 "lvm.c"
      var $ci1=(($0+16)|0); //@line 536 "lvm.c"
      var $1=HEAP32[(($ci1)>>2)]; //@line 536 "lvm.c"
      $ci=$1; //@line 536 "lvm.c"
      label = 3; break; //@line 539 "lvm.c"
    case 3: 
      var $2=$ci; //@line 542 "lvm.c"
      var $func=(($2)|0); //@line 542 "lvm.c"
      var $3=HEAP32[(($func)>>2)]; //@line 542 "lvm.c"
      var $value_=(($3)|0); //@line 542 "lvm.c"
      var $gc=$value_; //@line 542 "lvm.c"
      var $4=HEAP32[(($gc)>>2)]; //@line 542 "lvm.c"
      var $cl2=$4; //@line 542 "lvm.c"
      var $l=$cl2; //@line 542 "lvm.c"
      $cl=$l; //@line 542 "lvm.c"
      var $5=$cl; //@line 543 "lvm.c"
      var $p=(($5+12)|0); //@line 543 "lvm.c"
      var $6=HEAP32[(($p)>>2)]; //@line 543 "lvm.c"
      var $k3=(($6+8)|0); //@line 543 "lvm.c"
      var $7=HEAP32[(($k3)>>2)]; //@line 543 "lvm.c"
      $k=$7; //@line 543 "lvm.c"
      var $8=$ci; //@line 544 "lvm.c"
      var $u=(($8+24)|0); //@line 544 "lvm.c"
      var $l4=$u; //@line 544 "lvm.c"
      var $base5=(($l4)|0); //@line 544 "lvm.c"
      var $9=HEAP32[(($base5)>>2)]; //@line 544 "lvm.c"
      $base=$9; //@line 544 "lvm.c"
      label = 4; break; //@line 546 "lvm.c"
    case 4: 
      var $10=$ci; //@line 547 "lvm.c"
      var $u6=(($10+24)|0); //@line 547 "lvm.c"
      var $l7=$u6; //@line 547 "lvm.c"
      var $savedpc=(($l7+4)|0); //@line 547 "lvm.c"
      var $11=HEAP32[(($savedpc)>>2)]; //@line 547 "lvm.c"
      var $incdec_ptr=(($11+4)|0); //@line 547 "lvm.c"
      HEAP32[(($savedpc)>>2)]=$incdec_ptr; //@line 547 "lvm.c"
      var $12=HEAP32[(($11)>>2)]; //@line 547 "lvm.c"
      $i=$12; //@line 547 "lvm.c"
      var $13=$L_addr; //@line 549 "lvm.c"
      var $hookmask=(($13+40)|0); //@line 549 "lvm.c"
      var $14=HEAP8[($hookmask)]; //@line 549 "lvm.c"
      var $conv=(($14)&255); //@line 549 "lvm.c"
      var $and=$conv & 12; //@line 549 "lvm.c"
      var $tobool=(($and)|0)!=0; //@line 549 "lvm.c"
      if ($tobool) { label = 5; break; } else { label = 8; break; } //@line 549 "lvm.c"
    case 5: 
      var $15=$L_addr; //@line 549 "lvm.c"
      var $hookcount=(($15+48)|0); //@line 549 "lvm.c"
      var $16=HEAP32[(($hookcount)>>2)]; //@line 549 "lvm.c"
      var $dec=((($16)-(1))|0); //@line 549 "lvm.c"
      HEAP32[(($hookcount)>>2)]=$dec; //@line 549 "lvm.c"
      var $cmp=(($dec)|0)==0; //@line 549 "lvm.c"
      if ($cmp) { label = 7; break; } else { label = 6; break; } //@line 549 "lvm.c"
    case 6: 
      var $17=$L_addr; //@line 549 "lvm.c"
      var $hookmask8=(($17+40)|0); //@line 549 "lvm.c"
      var $18=HEAP8[($hookmask8)]; //@line 549 "lvm.c"
      var $conv9=(($18)&255); //@line 549 "lvm.c"
      var $and10=$conv9 & 4; //@line 549 "lvm.c"
      var $tobool11=(($and10)|0)!=0; //@line 549 "lvm.c"
      if ($tobool11) { label = 7; break; } else { label = 8; break; } //@line 549 "lvm.c"
    case 7: 
      var $19=$L_addr; //@line 551 "lvm.c"
      __ZL9traceexecP9lua_State($19); //@line 551 "lvm.c"
      var $20=$ci; //@line 551 "lvm.c"
      var $u12=(($20+24)|0); //@line 551 "lvm.c"
      var $l13=$u12; //@line 551 "lvm.c"
      var $base14=(($l13)|0); //@line 551 "lvm.c"
      var $21=HEAP32[(($base14)>>2)]; //@line 551 "lvm.c"
      $base=$21; //@line 551 "lvm.c"
      label = 8; break; //@line 552 "lvm.c"
    case 8: 
      var $22=$base; //@line 554 "lvm.c"
      var $23=$i; //@line 554 "lvm.c"
      var $shr=$23 >>> 6; //@line 554 "lvm.c"
      var $and15=$shr & 255; //@line 554 "lvm.c"
      var $add_ptr=(($22+((($and15)*(12))&-1))|0); //@line 554 "lvm.c"
      $ra=$add_ptr; //@line 554 "lvm.c"
      var $24=$i; //@line 557 "lvm.c"
      var $shr16=$24 >>> 0; //@line 557 "lvm.c"
      var $and17=$shr16 & 63; //@line 557 "lvm.c"
      if ((($and17)|0)==0) {
        label = 9; break;
      }
      else if ((($and17)|0)==1) {
        label = 10; break;
      }
      else if ((($and17)|0)==2) {
        label = 11; break;
      }
      else if ((($and17)|0)==3) {
        label = 12; break;
      }
      else if ((($and17)|0)==4) {
        label = 15; break;
      }
      else if ((($and17)|0)==5) {
        label = 19; break;
      }
      else if ((($and17)|0)==6) {
        label = 20; break;
      }
      else if ((($and17)|0)==7) {
        label = 24; break;
      }
      else if ((($and17)|0)==8) {
        label = 28; break;
      }
      else if ((($and17)|0)==9) {
        label = 35; break;
      }
      else if ((($and17)|0)==10) {
        label = 40; break;
      }
      else if ((($and17)|0)==11) {
        label = 47; break;
      }
      else if ((($and17)|0)==12) {
        label = 53; break;
      }
      else if ((($and17)|0)==13) {
        label = 57; break;
      }
      else if ((($and17)|0)==14) {
        label = 68; break;
      }
      else if ((($and17)|0)==15) {
        label = 79; break;
      }
      else if ((($and17)|0)==16) {
        label = 90; break;
      }
      else if ((($and17)|0)==17) {
        label = 101; break;
      }
      else if ((($and17)|0)==18) {
        label = 112; break;
      }
      else if ((($and17)|0)==19) {
        label = 123; break;
      }
      else if ((($and17)|0)==20) {
        label = 127; break;
      }
      else if ((($and17)|0)==21) {
        label = 132; break;
      }
      else if ((($and17)|0)==22) {
        label = 133; break;
      }
      else if ((($and17)|0)==23) {
        label = 139; break;
      }
      else if ((($and17)|0)==24) {
        label = 142; break;
      }
      else if ((($and17)|0)==25) {
        label = 156; break;
      }
      else if ((($and17)|0)==26) {
        label = 168; break;
      }
      else if ((($and17)|0)==27) {
        label = 180; break;
      }
      else if ((($and17)|0)==28) {
        label = 192; break;
      }
      else if ((($and17)|0)==29) {
        label = 204; break;
      }
      else if ((($and17)|0)==30) {
        label = 212; break;
      }
      else if ((($and17)|0)==31) {
        label = 224; break;
      }
      else if ((($and17)|0)==32) {
        label = 233; break;
      }
      else if ((($and17)|0)==33) {
        label = 238; break;
      }
      else if ((($and17)|0)==34) {
        label = 250; break;
      }
      else if ((($and17)|0)==35) {
        label = 251; break;
      }
      else if ((($and17)|0)==36) {
        label = 255; break;
      }
      else if ((($and17)|0)==37) {
        label = 270; break;
      }
      else if ((($and17)|0)==38) {
        label = 276; break;
      }
      else if ((($and17)|0)==39) {
        label = 289; break;
      }
      else {
      label = 290; break;
      }
      
    case 9: 
      var $25=$base; //@line 558 "lvm.c"
      var $26=$i; //@line 558 "lvm.c"
      var $shr18=$26 >>> 23; //@line 558 "lvm.c"
      var $and19=$shr18 & 511; //@line 558 "lvm.c"
      var $add_ptr20=(($25+((($and19)*(12))&-1))|0); //@line 558 "lvm.c"
      $io2=$add_ptr20; //@line 558 "lvm.c"
      var $27=$ra; //@line 558 "lvm.c"
      $io1=$27; //@line 558 "lvm.c"
      var $28=$io1; //@line 558 "lvm.c"
      var $value_21=(($28)|0); //@line 558 "lvm.c"
      var $29=$io2; //@line 558 "lvm.c"
      var $value_22=(($29)|0); //@line 558 "lvm.c"
      var $30=$value_21; //@line 558 "lvm.c"
      var $31=$value_22; //@line 558 "lvm.c"
      assert(8 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)]; //@line 558 "lvm.c"
      var $32=$io2; //@line 558 "lvm.c"
      var $tt_=(($32+8)|0); //@line 558 "lvm.c"
      var $33=HEAP32[(($tt_)>>2)]; //@line 558 "lvm.c"
      var $34=$io1; //@line 558 "lvm.c"
      var $tt_23=(($34+8)|0); //@line 558 "lvm.c"
      HEAP32[(($tt_23)>>2)]=$33; //@line 558 "lvm.c"
      label = 290; break; //@line 558 "lvm.c"
    case 10: 
      var $35=$k; //@line 561 "lvm.c"
      var $36=$i; //@line 561 "lvm.c"
      var $shr25=$36 >>> 14; //@line 561 "lvm.c"
      var $and26=$shr25 & 262143; //@line 561 "lvm.c"
      var $add_ptr27=(($35+((($and26)*(12))&-1))|0); //@line 561 "lvm.c"
      $rb=$add_ptr27; //@line 561 "lvm.c"
      var $37=$rb; //@line 561 "lvm.c"
      $io228=$37; //@line 561 "lvm.c"
      var $38=$ra; //@line 561 "lvm.c"
      $io129=$38; //@line 561 "lvm.c"
      var $39=$io129; //@line 561 "lvm.c"
      var $value_30=(($39)|0); //@line 561 "lvm.c"
      var $40=$io228; //@line 561 "lvm.c"
      var $value_31=(($40)|0); //@line 561 "lvm.c"
      var $41=$value_30; //@line 561 "lvm.c"
      var $42=$value_31; //@line 561 "lvm.c"
      assert(8 % 1 === 0);HEAP32[(($41)>>2)]=HEAP32[(($42)>>2)];HEAP32[((($41)+(4))>>2)]=HEAP32[((($42)+(4))>>2)]; //@line 561 "lvm.c"
      var $43=$io228; //@line 561 "lvm.c"
      var $tt_32=(($43+8)|0); //@line 561 "lvm.c"
      var $44=HEAP32[(($tt_32)>>2)]; //@line 561 "lvm.c"
      var $45=$io129; //@line 561 "lvm.c"
      var $tt_33=(($45+8)|0); //@line 561 "lvm.c"
      HEAP32[(($tt_33)>>2)]=$44; //@line 561 "lvm.c"
      label = 290; break; //@line 561 "lvm.c"
    case 11: 
      var $46=$k; //@line 565 "lvm.c"
      var $47=$ci; //@line 565 "lvm.c"
      var $u36=(($47+24)|0); //@line 565 "lvm.c"
      var $l37=$u36; //@line 565 "lvm.c"
      var $savedpc38=(($l37+4)|0); //@line 565 "lvm.c"
      var $48=HEAP32[(($savedpc38)>>2)]; //@line 565 "lvm.c"
      var $incdec_ptr39=(($48+4)|0); //@line 565 "lvm.c"
      HEAP32[(($savedpc38)>>2)]=$incdec_ptr39; //@line 565 "lvm.c"
      var $49=HEAP32[(($48)>>2)]; //@line 565 "lvm.c"
      var $shr40=$49 >>> 6; //@line 565 "lvm.c"
      var $and41=$shr40 & 67108863; //@line 565 "lvm.c"
      var $add_ptr42=(($46+((($and41)*(12))&-1))|0); //@line 565 "lvm.c"
      $rb35=$add_ptr42; //@line 565 "lvm.c"
      var $50=$rb35; //@line 565 "lvm.c"
      $io243=$50; //@line 565 "lvm.c"
      var $51=$ra; //@line 565 "lvm.c"
      $io144=$51; //@line 565 "lvm.c"
      var $52=$io144; //@line 565 "lvm.c"
      var $value_45=(($52)|0); //@line 565 "lvm.c"
      var $53=$io243; //@line 565 "lvm.c"
      var $value_46=(($53)|0); //@line 565 "lvm.c"
      var $54=$value_45; //@line 565 "lvm.c"
      var $55=$value_46; //@line 565 "lvm.c"
      assert(8 % 1 === 0);HEAP32[(($54)>>2)]=HEAP32[(($55)>>2)];HEAP32[((($54)+(4))>>2)]=HEAP32[((($55)+(4))>>2)]; //@line 565 "lvm.c"
      var $56=$io243; //@line 565 "lvm.c"
      var $tt_47=(($56+8)|0); //@line 565 "lvm.c"
      var $57=HEAP32[(($tt_47)>>2)]; //@line 565 "lvm.c"
      var $58=$io144; //@line 565 "lvm.c"
      var $tt_48=(($58+8)|0); //@line 565 "lvm.c"
      HEAP32[(($tt_48)>>2)]=$57; //@line 565 "lvm.c"
      label = 290; break; //@line 565 "lvm.c"
    case 12: 
      var $59=$ra; //@line 571 "lvm.c"
      $io=$59; //@line 571 "lvm.c"
      var $60=$i; //@line 571 "lvm.c"
      var $shr50=$60 >>> 23; //@line 571 "lvm.c"
      var $and51=$shr50 & 511; //@line 571 "lvm.c"
      var $61=$io; //@line 571 "lvm.c"
      var $value_52=(($61)|0); //@line 571 "lvm.c"
      var $b=$value_52; //@line 571 "lvm.c"
      HEAP32[(($b)>>2)]=$and51; //@line 571 "lvm.c"
      var $62=$io; //@line 571 "lvm.c"
      var $tt_53=(($62+8)|0); //@line 571 "lvm.c"
      HEAP32[(($tt_53)>>2)]=1; //@line 571 "lvm.c"
      var $63=$i; //@line 571 "lvm.c"
      var $shr54=$63 >>> 14; //@line 571 "lvm.c"
      var $and55=$shr54 & 511; //@line 571 "lvm.c"
      var $tobool56=(($and55)|0)!=0; //@line 571 "lvm.c"
      if ($tobool56) { label = 13; break; } else { label = 14; break; } //@line 571 "lvm.c"
    case 13: 
      var $64=$ci; //@line 571 "lvm.c"
      var $u58=(($64+24)|0); //@line 571 "lvm.c"
      var $l59=$u58; //@line 571 "lvm.c"
      var $savedpc60=(($l59+4)|0); //@line 571 "lvm.c"
      var $65=HEAP32[(($savedpc60)>>2)]; //@line 571 "lvm.c"
      var $incdec_ptr61=(($65+4)|0); //@line 571 "lvm.c"
      HEAP32[(($savedpc60)>>2)]=$incdec_ptr61; //@line 571 "lvm.c"
      label = 14; break; //@line 571 "lvm.c"
    case 14: 
      label = 290; break; //@line 571 "lvm.c"
    case 15: 
      var $66=$i; //@line 575 "lvm.c"
      var $shr65=$66 >>> 23; //@line 575 "lvm.c"
      var $and66=$shr65 & 511; //@line 575 "lvm.c"
      $b64=$and66; //@line 575 "lvm.c"
      label = 16; break; //@line 575 "lvm.c"
    case 16: 
      var $67=$ra; //@line 575 "lvm.c"
      var $incdec_ptr67=(($67+12)|0); //@line 575 "lvm.c"
      $ra=$incdec_ptr67; //@line 575 "lvm.c"
      var $tt_68=(($67+8)|0); //@line 575 "lvm.c"
      HEAP32[(($tt_68)>>2)]=0; //@line 575 "lvm.c"
      label = 17; break; //@line 575 "lvm.c"
    case 17: 
      var $68=$b64; //@line 575 "lvm.c"
      var $dec69=((($68)-(1))|0); //@line 575 "lvm.c"
      $b64=$dec69; //@line 575 "lvm.c"
      var $tobool70=(($68)|0)!=0; //@line 575 "lvm.c"
      if ($tobool70) { label = 16; break; } else { label = 18; break; } //@line 575 "lvm.c"
    case 18: 
      label = 290; break; //@line 575 "lvm.c"
    case 19: 
      var $69=$i; //@line 581 "lvm.c"
      var $shr73=$69 >>> 23; //@line 581 "lvm.c"
      var $and74=$shr73 & 511; //@line 581 "lvm.c"
      $b72=$and74; //@line 581 "lvm.c"
      var $70=$b72; //@line 581 "lvm.c"
      var $71=$cl; //@line 581 "lvm.c"
      var $upvals=(($71+16)|0); //@line 581 "lvm.c"
      var $arrayidx=(($upvals+($70<<2))|0); //@line 581 "lvm.c"
      var $72=HEAP32[(($arrayidx)>>2)]; //@line 581 "lvm.c"
      var $v=(($72+8)|0); //@line 581 "lvm.c"
      var $73=HEAP32[(($v)>>2)]; //@line 581 "lvm.c"
      $io275=$73; //@line 581 "lvm.c"
      var $74=$ra; //@line 581 "lvm.c"
      $io176=$74; //@line 581 "lvm.c"
      var $75=$io176; //@line 581 "lvm.c"
      var $value_77=(($75)|0); //@line 581 "lvm.c"
      var $76=$io275; //@line 581 "lvm.c"
      var $value_78=(($76)|0); //@line 581 "lvm.c"
      var $77=$value_77; //@line 581 "lvm.c"
      var $78=$value_78; //@line 581 "lvm.c"
      assert(8 % 1 === 0);HEAP32[(($77)>>2)]=HEAP32[(($78)>>2)];HEAP32[((($77)+(4))>>2)]=HEAP32[((($78)+(4))>>2)]; //@line 581 "lvm.c"
      var $79=$io275; //@line 581 "lvm.c"
      var $tt_79=(($79+8)|0); //@line 581 "lvm.c"
      var $80=HEAP32[(($tt_79)>>2)]; //@line 581 "lvm.c"
      var $81=$io176; //@line 581 "lvm.c"
      var $tt_80=(($81+8)|0); //@line 581 "lvm.c"
      HEAP32[(($tt_80)>>2)]=$80; //@line 581 "lvm.c"
      label = 290; break; //@line 581 "lvm.c"
    case 20: 
      var $82=$i; //@line 585 "lvm.c"
      var $shr83=$82 >>> 23; //@line 585 "lvm.c"
      var $and84=$shr83 & 511; //@line 585 "lvm.c"
      $b82=$and84; //@line 585 "lvm.c"
      var $83=$L_addr; //@line 585 "lvm.c"
      var $84=$b82; //@line 585 "lvm.c"
      var $85=$cl; //@line 585 "lvm.c"
      var $upvals85=(($85+16)|0); //@line 585 "lvm.c"
      var $arrayidx86=(($upvals85+($84<<2))|0); //@line 585 "lvm.c"
      var $86=HEAP32[(($arrayidx86)>>2)]; //@line 585 "lvm.c"
      var $v87=(($86+8)|0); //@line 585 "lvm.c"
      var $87=HEAP32[(($v87)>>2)]; //@line 585 "lvm.c"
      var $88=$i; //@line 585 "lvm.c"
      var $shr88=$88 >>> 14; //@line 585 "lvm.c"
      var $and89=$shr88 & 511; //@line 585 "lvm.c"
      var $and90=$and89 & 256; //@line 585 "lvm.c"
      var $tobool91=(($and90)|0)!=0; //@line 585 "lvm.c"
      if ($tobool91) { label = 21; break; } else { label = 22; break; } //@line 585 "lvm.c"
    case 21: 
      var $89=$k; //@line 585 "lvm.c"
      var $90=$i; //@line 585 "lvm.c"
      var $shr92=$90 >>> 14; //@line 585 "lvm.c"
      var $and93=$shr92 & 511; //@line 585 "lvm.c"
      var $and94=$and93 & -257; //@line 585 "lvm.c"
      var $add_ptr95=(($89+((($and94)*(12))&-1))|0); //@line 585 "lvm.c"
      var $cond = $add_ptr95;label = 23; break; //@line 585 "lvm.c"
    case 22: 
      var $91=$base; //@line 585 "lvm.c"
      var $92=$i; //@line 585 "lvm.c"
      var $shr96=$92 >>> 14; //@line 585 "lvm.c"
      var $and97=$shr96 & 511; //@line 585 "lvm.c"
      var $add_ptr98=(($91+((($and97)*(12))&-1))|0); //@line 585 "lvm.c"
      var $cond = $add_ptr98;label = 23; break; //@line 585 "lvm.c"
    case 23: 
      var $cond; //@line 585 "lvm.c"
      var $93=$ra; //@line 585 "lvm.c"
      __Z13luaV_gettableP9lua_StatePK10lua_TValuePS1_S4_($83, $87, $cond, $93); //@line 585 "lvm.c"
      var $94=$ci; //@line 585 "lvm.c"
      var $u99=(($94+24)|0); //@line 585 "lvm.c"
      var $l100=$u99; //@line 585 "lvm.c"
      var $base101=(($l100)|0); //@line 585 "lvm.c"
      var $95=HEAP32[(($base101)>>2)]; //@line 585 "lvm.c"
      $base=$95; //@line 585 "lvm.c"
      label = 290; break; //@line 585 "lvm.c"
    case 24: 
      var $96=$L_addr; //@line 589 "lvm.c"
      var $97=$base; //@line 589 "lvm.c"
      var $98=$i; //@line 589 "lvm.c"
      var $shr103=$98 >>> 23; //@line 589 "lvm.c"
      var $and104=$shr103 & 511; //@line 589 "lvm.c"
      var $add_ptr105=(($97+((($and104)*(12))&-1))|0); //@line 589 "lvm.c"
      var $99=$i; //@line 589 "lvm.c"
      var $shr106=$99 >>> 14; //@line 589 "lvm.c"
      var $and107=$shr106 & 511; //@line 589 "lvm.c"
      var $and108=$and107 & 256; //@line 589 "lvm.c"
      var $tobool109=(($and108)|0)!=0; //@line 589 "lvm.c"
      if ($tobool109) { label = 25; break; } else { label = 26; break; } //@line 589 "lvm.c"
    case 25: 
      var $100=$k; //@line 589 "lvm.c"
      var $101=$i; //@line 589 "lvm.c"
      var $shr111=$101 >>> 14; //@line 589 "lvm.c"
      var $and112=$shr111 & 511; //@line 589 "lvm.c"
      var $and113=$and112 & -257; //@line 589 "lvm.c"
      var $add_ptr114=(($100+((($and113)*(12))&-1))|0); //@line 589 "lvm.c"
      var $cond120 = $add_ptr114;label = 27; break; //@line 589 "lvm.c"
    case 26: 
      var $102=$base; //@line 589 "lvm.c"
      var $103=$i; //@line 589 "lvm.c"
      var $shr116=$103 >>> 14; //@line 589 "lvm.c"
      var $and117=$shr116 & 511; //@line 589 "lvm.c"
      var $add_ptr118=(($102+((($and117)*(12))&-1))|0); //@line 589 "lvm.c"
      var $cond120 = $add_ptr118;label = 27; break; //@line 589 "lvm.c"
    case 27: 
      var $cond120; //@line 589 "lvm.c"
      var $104=$ra; //@line 589 "lvm.c"
      __Z13luaV_gettableP9lua_StatePK10lua_TValuePS1_S4_($96, $add_ptr105, $cond120, $104); //@line 589 "lvm.c"
      var $105=$ci; //@line 589 "lvm.c"
      var $u121=(($105+24)|0); //@line 589 "lvm.c"
      var $l122=$u121; //@line 589 "lvm.c"
      var $base123=(($l122)|0); //@line 589 "lvm.c"
      var $106=HEAP32[(($base123)>>2)]; //@line 589 "lvm.c"
      $base=$106; //@line 589 "lvm.c"
      label = 290; break; //@line 589 "lvm.c"
    case 28: 
      var $107=$i; //@line 592 "lvm.c"
      var $shr125=$107 >>> 6; //@line 592 "lvm.c"
      var $and126=$shr125 & 255; //@line 592 "lvm.c"
      $a=$and126; //@line 592 "lvm.c"
      var $108=$L_addr; //@line 592 "lvm.c"
      var $109=$a; //@line 592 "lvm.c"
      var $110=$cl; //@line 592 "lvm.c"
      var $upvals127=(($110+16)|0); //@line 592 "lvm.c"
      var $arrayidx128=(($upvals127+($109<<2))|0); //@line 592 "lvm.c"
      var $111=HEAP32[(($arrayidx128)>>2)]; //@line 592 "lvm.c"
      var $v129=(($111+8)|0); //@line 592 "lvm.c"
      var $112=HEAP32[(($v129)>>2)]; //@line 592 "lvm.c"
      var $113=$i; //@line 592 "lvm.c"
      var $shr130=$113 >>> 23; //@line 592 "lvm.c"
      var $and131=$shr130 & 511; //@line 592 "lvm.c"
      var $and132=$and131 & 256; //@line 592 "lvm.c"
      var $tobool133=(($and132)|0)!=0; //@line 592 "lvm.c"
      if ($tobool133) { label = 29; break; } else { label = 30; break; } //@line 592 "lvm.c"
    case 29: 
      var $114=$k; //@line 592 "lvm.c"
      var $115=$i; //@line 592 "lvm.c"
      var $shr135=$115 >>> 23; //@line 592 "lvm.c"
      var $and136=$shr135 & 511; //@line 592 "lvm.c"
      var $and137=$and136 & -257; //@line 592 "lvm.c"
      var $add_ptr138=(($114+((($and137)*(12))&-1))|0); //@line 592 "lvm.c"
      var $cond144 = $add_ptr138;label = 31; break; //@line 592 "lvm.c"
    case 30: 
      var $116=$base; //@line 592 "lvm.c"
      var $117=$i; //@line 592 "lvm.c"
      var $shr140=$117 >>> 23; //@line 592 "lvm.c"
      var $and141=$shr140 & 511; //@line 592 "lvm.c"
      var $add_ptr142=(($116+((($and141)*(12))&-1))|0); //@line 592 "lvm.c"
      var $cond144 = $add_ptr142;label = 31; break; //@line 592 "lvm.c"
    case 31: 
      var $cond144; //@line 592 "lvm.c"
      var $118=$i; //@line 592 "lvm.c"
      var $shr145=$118 >>> 14; //@line 592 "lvm.c"
      var $and146=$shr145 & 511; //@line 592 "lvm.c"
      var $and147=$and146 & 256; //@line 592 "lvm.c"
      var $tobool148=(($and147)|0)!=0; //@line 592 "lvm.c"
      if ($tobool148) { label = 32; break; } else { label = 33; break; } //@line 592 "lvm.c"
    case 32: 
      var $119=$k; //@line 592 "lvm.c"
      var $120=$i; //@line 592 "lvm.c"
      var $shr150=$120 >>> 14; //@line 592 "lvm.c"
      var $and151=$shr150 & 511; //@line 592 "lvm.c"
      var $and152=$and151 & -257; //@line 592 "lvm.c"
      var $add_ptr153=(($119+((($and152)*(12))&-1))|0); //@line 592 "lvm.c"
      var $cond159 = $add_ptr153;label = 34; break; //@line 592 "lvm.c"
    case 33: 
      var $121=$base; //@line 592 "lvm.c"
      var $122=$i; //@line 592 "lvm.c"
      var $shr155=$122 >>> 14; //@line 592 "lvm.c"
      var $and156=$shr155 & 511; //@line 592 "lvm.c"
      var $add_ptr157=(($121+((($and156)*(12))&-1))|0); //@line 592 "lvm.c"
      var $cond159 = $add_ptr157;label = 34; break; //@line 592 "lvm.c"
    case 34: 
      var $cond159; //@line 592 "lvm.c"
      __Z13luaV_settableP9lua_StatePK10lua_TValuePS1_S4_($108, $112, $cond144, $cond159); //@line 592 "lvm.c"
      var $123=$ci; //@line 592 "lvm.c"
      var $u160=(($123+24)|0); //@line 592 "lvm.c"
      var $l161=$u160; //@line 592 "lvm.c"
      var $base162=(($l161)|0); //@line 592 "lvm.c"
      var $124=HEAP32[(($base162)>>2)]; //@line 592 "lvm.c"
      $base=$124; //@line 592 "lvm.c"
      label = 290; break; //@line 592 "lvm.c"
    case 35: 
      var $125=$i; //@line 596 "lvm.c"
      var $shr164=$125 >>> 23; //@line 596 "lvm.c"
      var $and165=$shr164 & 511; //@line 596 "lvm.c"
      var $126=$cl; //@line 596 "lvm.c"
      var $upvals166=(($126+16)|0); //@line 596 "lvm.c"
      var $arrayidx167=(($upvals166+($and165<<2))|0); //@line 596 "lvm.c"
      var $127=HEAP32[(($arrayidx167)>>2)]; //@line 596 "lvm.c"
      $uv=$127; //@line 596 "lvm.c"
      var $128=$ra; //@line 596 "lvm.c"
      $io2168=$128; //@line 596 "lvm.c"
      var $129=$uv; //@line 596 "lvm.c"
      var $v170=(($129+8)|0); //@line 596 "lvm.c"
      var $130=HEAP32[(($v170)>>2)]; //@line 596 "lvm.c"
      $io1169=$130; //@line 596 "lvm.c"
      var $131=$io1169; //@line 596 "lvm.c"
      var $value_171=(($131)|0); //@line 596 "lvm.c"
      var $132=$io2168; //@line 596 "lvm.c"
      var $value_172=(($132)|0); //@line 596 "lvm.c"
      var $133=$value_171; //@line 596 "lvm.c"
      var $134=$value_172; //@line 596 "lvm.c"
      assert(8 % 1 === 0);HEAP32[(($133)>>2)]=HEAP32[(($134)>>2)];HEAP32[((($133)+(4))>>2)]=HEAP32[((($134)+(4))>>2)]; //@line 596 "lvm.c"
      var $135=$io2168; //@line 596 "lvm.c"
      var $tt_173=(($135+8)|0); //@line 596 "lvm.c"
      var $136=HEAP32[(($tt_173)>>2)]; //@line 596 "lvm.c"
      var $137=$io1169; //@line 596 "lvm.c"
      var $tt_174=(($137+8)|0); //@line 596 "lvm.c"
      HEAP32[(($tt_174)>>2)]=$136; //@line 596 "lvm.c"
      var $138=$ra; //@line 596 "lvm.c"
      var $tt_175=(($138+8)|0); //@line 596 "lvm.c"
      var $139=HEAP32[(($tt_175)>>2)]; //@line 596 "lvm.c"
      var $and176=$139 & 64; //@line 596 "lvm.c"
      var $tobool177=(($and176)|0)!=0; //@line 596 "lvm.c"
      if ($tobool177) { label = 36; break; } else { label = 39; break; } //@line 596 "lvm.c"
    case 36: 
      var $140=$ra; //@line 596 "lvm.c"
      var $value_179=(($140)|0); //@line 596 "lvm.c"
      var $gc180=$value_179; //@line 596 "lvm.c"
      var $141=HEAP32[(($gc180)>>2)]; //@line 596 "lvm.c"
      var $gch=$141; //@line 596 "lvm.c"
      var $marked=(($gch+5)|0); //@line 596 "lvm.c"
      var $142=HEAP8[($marked)]; //@line 596 "lvm.c"
      var $conv181=(($142)&255); //@line 596 "lvm.c"
      var $and182=$conv181 & 3; //@line 596 "lvm.c"
      var $tobool183=(($and182)|0)!=0; //@line 596 "lvm.c"
      if ($tobool183) { label = 37; break; } else { label = 39; break; } //@line 596 "lvm.c"
    case 37: 
      var $143=$uv; //@line 596 "lvm.c"
      var $144=$143; //@line 596 "lvm.c"
      var $gch185=$144; //@line 596 "lvm.c"
      var $marked186=(($gch185+5)|0); //@line 596 "lvm.c"
      var $145=HEAP8[($marked186)]; //@line 596 "lvm.c"
      var $conv187=(($145)&255); //@line 596 "lvm.c"
      var $and188=$conv187 & 4; //@line 596 "lvm.c"
      var $tobool189=(($and188)|0)!=0; //@line 596 "lvm.c"
      if ($tobool189) { label = 38; break; } else { label = 39; break; } //@line 596 "lvm.c"
    case 38: 
      var $146=$L_addr; //@line 596 "lvm.c"
      var $147=$uv; //@line 596 "lvm.c"
      var $148=$147; //@line 596 "lvm.c"
      var $149=$ra; //@line 596 "lvm.c"
      var $value_191=(($149)|0); //@line 596 "lvm.c"
      var $gc192=$value_191; //@line 596 "lvm.c"
      var $150=HEAP32[(($gc192)>>2)]; //@line 596 "lvm.c"
      __Z13luaC_barrier_P9lua_StateP8GCObjectS2_($146, $148, $150); //@line 596 "lvm.c"
      label = 39; break; //@line 596 "lvm.c"
    case 39: 
      label = 290; break; //@line 596 "lvm.c"
    case 40: 
      var $151=$L_addr; //@line 601 "lvm.c"
      var $152=$ra; //@line 601 "lvm.c"
      var $153=$i; //@line 601 "lvm.c"
      var $shr195=$153 >>> 23; //@line 601 "lvm.c"
      var $and196=$shr195 & 511; //@line 601 "lvm.c"
      var $and197=$and196 & 256; //@line 601 "lvm.c"
      var $tobool198=(($and197)|0)!=0; //@line 601 "lvm.c"
      if ($tobool198) { label = 41; break; } else { label = 42; break; } //@line 601 "lvm.c"
    case 41: 
      var $154=$k; //@line 601 "lvm.c"
      var $155=$i; //@line 601 "lvm.c"
      var $shr200=$155 >>> 23; //@line 601 "lvm.c"
      var $and201=$shr200 & 511; //@line 601 "lvm.c"
      var $and202=$and201 & -257; //@line 601 "lvm.c"
      var $add_ptr203=(($154+((($and202)*(12))&-1))|0); //@line 601 "lvm.c"
      var $cond209 = $add_ptr203;label = 43; break; //@line 601 "lvm.c"
    case 42: 
      var $156=$base; //@line 601 "lvm.c"
      var $157=$i; //@line 601 "lvm.c"
      var $shr205=$157 >>> 23; //@line 601 "lvm.c"
      var $and206=$shr205 & 511; //@line 601 "lvm.c"
      var $add_ptr207=(($156+((($and206)*(12))&-1))|0); //@line 601 "lvm.c"
      var $cond209 = $add_ptr207;label = 43; break; //@line 601 "lvm.c"
    case 43: 
      var $cond209; //@line 601 "lvm.c"
      var $158=$i; //@line 601 "lvm.c"
      var $shr210=$158 >>> 14; //@line 601 "lvm.c"
      var $and211=$shr210 & 511; //@line 601 "lvm.c"
      var $and212=$and211 & 256; //@line 601 "lvm.c"
      var $tobool213=(($and212)|0)!=0; //@line 601 "lvm.c"
      if ($tobool213) { label = 44; break; } else { label = 45; break; } //@line 601 "lvm.c"
    case 44: 
      var $159=$k; //@line 601 "lvm.c"
      var $160=$i; //@line 601 "lvm.c"
      var $shr215=$160 >>> 14; //@line 601 "lvm.c"
      var $and216=$shr215 & 511; //@line 601 "lvm.c"
      var $and217=$and216 & -257; //@line 601 "lvm.c"
      var $add_ptr218=(($159+((($and217)*(12))&-1))|0); //@line 601 "lvm.c"
      var $cond224 = $add_ptr218;label = 46; break; //@line 601 "lvm.c"
    case 45: 
      var $161=$base; //@line 601 "lvm.c"
      var $162=$i; //@line 601 "lvm.c"
      var $shr220=$162 >>> 14; //@line 601 "lvm.c"
      var $and221=$shr220 & 511; //@line 601 "lvm.c"
      var $add_ptr222=(($161+((($and221)*(12))&-1))|0); //@line 601 "lvm.c"
      var $cond224 = $add_ptr222;label = 46; break; //@line 601 "lvm.c"
    case 46: 
      var $cond224; //@line 601 "lvm.c"
      __Z13luaV_settableP9lua_StatePK10lua_TValuePS1_S4_($151, $152, $cond209, $cond224); //@line 601 "lvm.c"
      var $163=$ci; //@line 601 "lvm.c"
      var $u225=(($163+24)|0); //@line 601 "lvm.c"
      var $l226=$u225; //@line 601 "lvm.c"
      var $base227=(($l226)|0); //@line 601 "lvm.c"
      var $164=HEAP32[(($base227)>>2)]; //@line 601 "lvm.c"
      $base=$164; //@line 601 "lvm.c"
      label = 290; break; //@line 601 "lvm.c"
    case 47: 
      var $165=$i; //@line 604 "lvm.c"
      var $shr230=$165 >>> 23; //@line 604 "lvm.c"
      var $and231=$shr230 & 511; //@line 604 "lvm.c"
      $b229=$and231; //@line 604 "lvm.c"
      var $166=$i; //@line 604 "lvm.c"
      var $shr232=$166 >>> 14; //@line 604 "lvm.c"
      var $and233=$shr232 & 511; //@line 604 "lvm.c"
      $c=$and233; //@line 604 "lvm.c"
      var $167=$L_addr; //@line 604 "lvm.c"
      var $call=__Z8luaH_newP9lua_State($167); //@line 604 "lvm.c"
      $t=$call; //@line 604 "lvm.c"
      var $168=$ra; //@line 604 "lvm.c"
      $io234=$168; //@line 604 "lvm.c"
      var $169=$t; //@line 604 "lvm.c"
      var $170=$169; //@line 604 "lvm.c"
      var $171=$io234; //@line 604 "lvm.c"
      var $value_235=(($171)|0); //@line 604 "lvm.c"
      var $gc236=$value_235; //@line 604 "lvm.c"
      HEAP32[(($gc236)>>2)]=$170; //@line 604 "lvm.c"
      var $172=$io234; //@line 604 "lvm.c"
      var $tt_237=(($172+8)|0); //@line 604 "lvm.c"
      HEAP32[(($tt_237)>>2)]=69; //@line 604 "lvm.c"
      var $173=$b229; //@line 604 "lvm.c"
      var $cmp238=(($173)|0)!=0; //@line 604 "lvm.c"
      if ($cmp238) { label = 49; break; } else { label = 48; break; } //@line 604 "lvm.c"
    case 48: 
      var $174=$c; //@line 604 "lvm.c"
      var $cmp240=(($174)|0)!=0; //@line 604 "lvm.c"
      if ($cmp240) { label = 49; break; } else { label = 50; break; } //@line 604 "lvm.c"
    case 49: 
      var $175=$L_addr; //@line 604 "lvm.c"
      var $176=$t; //@line 604 "lvm.c"
      var $177=$b229; //@line 604 "lvm.c"
      var $call242=__Z11luaO_fb2inti($177); //@line 604 "lvm.c"
      var $178=$c; //@line 604 "lvm.c"
      var $call243=__Z11luaO_fb2inti($178); //@line 604 "lvm.c"
      __Z11luaH_resizeP9lua_StateP5Tableii($175, $176, $call242, $call243); //@line 604 "lvm.c"
      label = 50; break; //@line 604 "lvm.c"
    case 50: 
      var $179=$L_addr; //@line 604 "lvm.c"
      var $l_G=(($179+12)|0); //@line 604 "lvm.c"
      var $180=HEAP32[(($l_G)>>2)]; //@line 604 "lvm.c"
      var $GCdebt=(($180+12)|0); //@line 604 "lvm.c"
      var $181=HEAP32[(($GCdebt)>>2)]; //@line 604 "lvm.c"
      var $cmp245=(($181)|0) > 0; //@line 604 "lvm.c"
      if ($cmp245) { label = 51; break; } else { label = 52; break; } //@line 604 "lvm.c"
    case 51: 
      var $182=$ra; //@line 604 "lvm.c"
      var $add_ptr247=(($182+12)|0); //@line 604 "lvm.c"
      var $183=$L_addr; //@line 604 "lvm.c"
      var $top=(($183+8)|0); //@line 604 "lvm.c"
      HEAP32[(($top)>>2)]=$add_ptr247; //@line 604 "lvm.c"
      var $184=$L_addr; //@line 604 "lvm.c"
      __Z9luaC_stepP9lua_State($184); //@line 604 "lvm.c"
      var $185=$ci; //@line 604 "lvm.c"
      var $top248=(($185+4)|0); //@line 604 "lvm.c"
      var $186=HEAP32[(($top248)>>2)]; //@line 604 "lvm.c"
      var $187=$L_addr; //@line 604 "lvm.c"
      var $top249=(($187+8)|0); //@line 604 "lvm.c"
      HEAP32[(($top249)>>2)]=$186; //@line 604 "lvm.c"
      label = 52; break; //@line 604 "lvm.c"
    case 52: 
      var $188=$ci; //@line 604 "lvm.c"
      var $u251=(($188+24)|0); //@line 604 "lvm.c"
      var $l252=$u251; //@line 604 "lvm.c"
      var $base253=(($l252)|0); //@line 604 "lvm.c"
      var $189=HEAP32[(($base253)>>2)]; //@line 604 "lvm.c"
      $base=$189; //@line 604 "lvm.c"
      label = 290; break; //@line 604 "lvm.c"
    case 53: 
      var $190=$base; //@line 613 "lvm.c"
      var $191=$i; //@line 613 "lvm.c"
      var $shr256=$191 >>> 23; //@line 613 "lvm.c"
      var $and257=$shr256 & 511; //@line 613 "lvm.c"
      var $add_ptr258=(($190+((($and257)*(12))&-1))|0); //@line 613 "lvm.c"
      $rb255=$add_ptr258; //@line 613 "lvm.c"
      var $192=$rb255; //@line 613 "lvm.c"
      $io2259=$192; //@line 613 "lvm.c"
      var $193=$ra; //@line 613 "lvm.c"
      var $add_ptr261=(($193+12)|0); //@line 613 "lvm.c"
      $io1260=$add_ptr261; //@line 613 "lvm.c"
      var $194=$io1260; //@line 613 "lvm.c"
      var $value_262=(($194)|0); //@line 613 "lvm.c"
      var $195=$io2259; //@line 613 "lvm.c"
      var $value_263=(($195)|0); //@line 613 "lvm.c"
      var $196=$value_262; //@line 613 "lvm.c"
      var $197=$value_263; //@line 613 "lvm.c"
      assert(8 % 1 === 0);HEAP32[(($196)>>2)]=HEAP32[(($197)>>2)];HEAP32[((($196)+(4))>>2)]=HEAP32[((($197)+(4))>>2)]; //@line 613 "lvm.c"
      var $198=$io2259; //@line 613 "lvm.c"
      var $tt_264=(($198+8)|0); //@line 613 "lvm.c"
      var $199=HEAP32[(($tt_264)>>2)]; //@line 613 "lvm.c"
      var $200=$io1260; //@line 613 "lvm.c"
      var $tt_265=(($200+8)|0); //@line 613 "lvm.c"
      HEAP32[(($tt_265)>>2)]=$199; //@line 613 "lvm.c"
      var $201=$L_addr; //@line 613 "lvm.c"
      var $202=$rb255; //@line 613 "lvm.c"
      var $203=$i; //@line 613 "lvm.c"
      var $shr266=$203 >>> 14; //@line 613 "lvm.c"
      var $and267=$shr266 & 511; //@line 613 "lvm.c"
      var $and268=$and267 & 256; //@line 613 "lvm.c"
      var $tobool269=(($and268)|0)!=0; //@line 613 "lvm.c"
      if ($tobool269) { label = 54; break; } else { label = 55; break; } //@line 613 "lvm.c"
    case 54: 
      var $204=$k; //@line 613 "lvm.c"
      var $205=$i; //@line 613 "lvm.c"
      var $shr271=$205 >>> 14; //@line 613 "lvm.c"
      var $and272=$shr271 & 511; //@line 613 "lvm.c"
      var $and273=$and272 & -257; //@line 613 "lvm.c"
      var $add_ptr274=(($204+((($and273)*(12))&-1))|0); //@line 613 "lvm.c"
      var $cond280 = $add_ptr274;label = 56; break; //@line 613 "lvm.c"
    case 55: 
      var $206=$base; //@line 613 "lvm.c"
      var $207=$i; //@line 613 "lvm.c"
      var $shr276=$207 >>> 14; //@line 613 "lvm.c"
      var $and277=$shr276 & 511; //@line 613 "lvm.c"
      var $add_ptr278=(($206+((($and277)*(12))&-1))|0); //@line 613 "lvm.c"
      var $cond280 = $add_ptr278;label = 56; break; //@line 613 "lvm.c"
    case 56: 
      var $cond280; //@line 613 "lvm.c"
      var $208=$ra; //@line 613 "lvm.c"
      __Z13luaV_gettableP9lua_StatePK10lua_TValuePS1_S4_($201, $202, $cond280, $208); //@line 613 "lvm.c"
      var $209=$ci; //@line 613 "lvm.c"
      var $u281=(($209+24)|0); //@line 613 "lvm.c"
      var $l282=$u281; //@line 613 "lvm.c"
      var $base283=(($l282)|0); //@line 613 "lvm.c"
      var $210=HEAP32[(($base283)>>2)]; //@line 613 "lvm.c"
      $base=$210; //@line 613 "lvm.c"
      label = 290; break; //@line 613 "lvm.c"
    case 57: 
      var $211=$i; //@line 618 "lvm.c"
      var $shr286=$211 >>> 23; //@line 618 "lvm.c"
      var $and287=$shr286 & 511; //@line 618 "lvm.c"
      var $and288=$and287 & 256; //@line 618 "lvm.c"
      var $tobool289=(($and288)|0)!=0; //@line 618 "lvm.c"
      if ($tobool289) { label = 58; break; } else { label = 59; break; } //@line 618 "lvm.c"
    case 58: 
      var $212=$k; //@line 618 "lvm.c"
      var $213=$i; //@line 618 "lvm.c"
      var $shr291=$213 >>> 23; //@line 618 "lvm.c"
      var $and292=$shr291 & 511; //@line 618 "lvm.c"
      var $and293=$and292 & -257; //@line 618 "lvm.c"
      var $add_ptr294=(($212+((($and293)*(12))&-1))|0); //@line 618 "lvm.c"
      var $cond300 = $add_ptr294;label = 60; break; //@line 618 "lvm.c"
    case 59: 
      var $214=$base; //@line 618 "lvm.c"
      var $215=$i; //@line 618 "lvm.c"
      var $shr296=$215 >>> 23; //@line 618 "lvm.c"
      var $and297=$shr296 & 511; //@line 618 "lvm.c"
      var $add_ptr298=(($214+((($and297)*(12))&-1))|0); //@line 618 "lvm.c"
      var $cond300 = $add_ptr298;label = 60; break; //@line 618 "lvm.c"
    case 60: 
      var $cond300; //@line 618 "lvm.c"
      $rb285=$cond300; //@line 618 "lvm.c"
      var $216=$i; //@line 618 "lvm.c"
      var $shr301=$216 >>> 14; //@line 618 "lvm.c"
      var $and302=$shr301 & 511; //@line 618 "lvm.c"
      var $and303=$and302 & 256; //@line 618 "lvm.c"
      var $tobool304=(($and303)|0)!=0; //@line 618 "lvm.c"
      if ($tobool304) { label = 61; break; } else { label = 62; break; } //@line 618 "lvm.c"
    case 61: 
      var $217=$k; //@line 618 "lvm.c"
      var $218=$i; //@line 618 "lvm.c"
      var $shr306=$218 >>> 14; //@line 618 "lvm.c"
      var $and307=$shr306 & 511; //@line 618 "lvm.c"
      var $and308=$and307 & -257; //@line 618 "lvm.c"
      var $add_ptr309=(($217+((($and308)*(12))&-1))|0); //@line 618 "lvm.c"
      var $cond315 = $add_ptr309;label = 63; break; //@line 618 "lvm.c"
    case 62: 
      var $219=$base; //@line 618 "lvm.c"
      var $220=$i; //@line 618 "lvm.c"
      var $shr311=$220 >>> 14; //@line 618 "lvm.c"
      var $and312=$shr311 & 511; //@line 618 "lvm.c"
      var $add_ptr313=(($219+((($and312)*(12))&-1))|0); //@line 618 "lvm.c"
      var $cond315 = $add_ptr313;label = 63; break; //@line 618 "lvm.c"
    case 63: 
      var $cond315; //@line 618 "lvm.c"
      $rc=$cond315; //@line 618 "lvm.c"
      var $221=$rb285; //@line 618 "lvm.c"
      var $tt_316=(($221+8)|0); //@line 618 "lvm.c"
      var $222=HEAP32[(($tt_316)>>2)]; //@line 618 "lvm.c"
      var $cmp317=(($222)|0)==3; //@line 618 "lvm.c"
      if ($cmp317) { label = 64; break; } else { label = 66; break; } //@line 618 "lvm.c"
    case 64: 
      var $223=$rc; //@line 618 "lvm.c"
      var $tt_319=(($223+8)|0); //@line 618 "lvm.c"
      var $224=HEAP32[(($tt_319)>>2)]; //@line 618 "lvm.c"
      var $cmp320=(($224)|0)==3; //@line 618 "lvm.c"
      if ($cmp320) { label = 65; break; } else { label = 66; break; } //@line 618 "lvm.c"
    case 65: 
      var $225=$rb285; //@line 618 "lvm.c"
      var $value_322=(($225)|0); //@line 618 "lvm.c"
      var $n=$value_322; //@line 618 "lvm.c"
      var $226=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 618 "lvm.c"
      $nb=$226; //@line 618 "lvm.c"
      var $227=$rc; //@line 618 "lvm.c"
      var $value_323=(($227)|0); //@line 618 "lvm.c"
      var $n324=$value_323; //@line 618 "lvm.c"
      var $228=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n324)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n324)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 618 "lvm.c"
      $nc=$228; //@line 618 "lvm.c"
      var $229=$ra; //@line 618 "lvm.c"
      $io325=$229; //@line 618 "lvm.c"
      var $230=$nb; //@line 618 "lvm.c"
      var $231=$nc; //@line 618 "lvm.c"
      var $add=($230)+($231); //@line 618 "lvm.c"
      var $232=$io325; //@line 618 "lvm.c"
      var $value_326=(($232)|0); //@line 618 "lvm.c"
      var $n327=$value_326; //@line 618 "lvm.c"
      (HEAPF64[(tempDoublePtr)>>3]=$add,HEAP32[(($n327)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n327)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); //@line 618 "lvm.c"
      var $233=$io325; //@line 618 "lvm.c"
      var $tt_328=(($233+8)|0); //@line 618 "lvm.c"
      HEAP32[(($tt_328)>>2)]=3; //@line 618 "lvm.c"
      label = 67; break; //@line 618 "lvm.c"
    case 66: 
      var $234=$L_addr; //@line 618 "lvm.c"
      var $235=$ra; //@line 618 "lvm.c"
      var $236=$rb285; //@line 618 "lvm.c"
      var $237=$rc; //@line 618 "lvm.c"
      __Z10luaV_arithP9lua_StateP10lua_TValuePKS1_S4_3TMS($234, $235, $236, $237, 6); //@line 618 "lvm.c"
      var $238=$ci; //@line 618 "lvm.c"
      var $u329=(($238+24)|0); //@line 618 "lvm.c"
      var $l330=$u329; //@line 618 "lvm.c"
      var $base331=(($l330)|0); //@line 618 "lvm.c"
      var $239=HEAP32[(($base331)>>2)]; //@line 618 "lvm.c"
      $base=$239; //@line 618 "lvm.c"
      label = 67; break;
    case 67: 
      label = 290; break; //@line 618 "lvm.c"
    case 68: 
      var $240=$i; //@line 621 "lvm.c"
      var $shr335=$240 >>> 23; //@line 621 "lvm.c"
      var $and336=$shr335 & 511; //@line 621 "lvm.c"
      var $and337=$and336 & 256; //@line 621 "lvm.c"
      var $tobool338=(($and337)|0)!=0; //@line 621 "lvm.c"
      if ($tobool338) { label = 69; break; } else { label = 70; break; } //@line 621 "lvm.c"
    case 69: 
      var $241=$k; //@line 621 "lvm.c"
      var $242=$i; //@line 621 "lvm.c"
      var $shr340=$242 >>> 23; //@line 621 "lvm.c"
      var $and341=$shr340 & 511; //@line 621 "lvm.c"
      var $and342=$and341 & -257; //@line 621 "lvm.c"
      var $add_ptr343=(($241+((($and342)*(12))&-1))|0); //@line 621 "lvm.c"
      var $cond349 = $add_ptr343;label = 71; break; //@line 621 "lvm.c"
    case 70: 
      var $243=$base; //@line 621 "lvm.c"
      var $244=$i; //@line 621 "lvm.c"
      var $shr345=$244 >>> 23; //@line 621 "lvm.c"
      var $and346=$shr345 & 511; //@line 621 "lvm.c"
      var $add_ptr347=(($243+((($and346)*(12))&-1))|0); //@line 621 "lvm.c"
      var $cond349 = $add_ptr347;label = 71; break; //@line 621 "lvm.c"
    case 71: 
      var $cond349; //@line 621 "lvm.c"
      $rb334=$cond349; //@line 621 "lvm.c"
      var $245=$i; //@line 621 "lvm.c"
      var $shr351=$245 >>> 14; //@line 621 "lvm.c"
      var $and352=$shr351 & 511; //@line 621 "lvm.c"
      var $and353=$and352 & 256; //@line 621 "lvm.c"
      var $tobool354=(($and353)|0)!=0; //@line 621 "lvm.c"
      if ($tobool354) { label = 72; break; } else { label = 73; break; } //@line 621 "lvm.c"
    case 72: 
      var $246=$k; //@line 621 "lvm.c"
      var $247=$i; //@line 621 "lvm.c"
      var $shr356=$247 >>> 14; //@line 621 "lvm.c"
      var $and357=$shr356 & 511; //@line 621 "lvm.c"
      var $and358=$and357 & -257; //@line 621 "lvm.c"
      var $add_ptr359=(($246+((($and358)*(12))&-1))|0); //@line 621 "lvm.c"
      var $cond365 = $add_ptr359;label = 74; break; //@line 621 "lvm.c"
    case 73: 
      var $248=$base; //@line 621 "lvm.c"
      var $249=$i; //@line 621 "lvm.c"
      var $shr361=$249 >>> 14; //@line 621 "lvm.c"
      var $and362=$shr361 & 511; //@line 621 "lvm.c"
      var $add_ptr363=(($248+((($and362)*(12))&-1))|0); //@line 621 "lvm.c"
      var $cond365 = $add_ptr363;label = 74; break; //@line 621 "lvm.c"
    case 74: 
      var $cond365; //@line 621 "lvm.c"
      $rc350=$cond365; //@line 621 "lvm.c"
      var $250=$rb334; //@line 621 "lvm.c"
      var $tt_366=(($250+8)|0); //@line 621 "lvm.c"
      var $251=HEAP32[(($tt_366)>>2)]; //@line 621 "lvm.c"
      var $cmp367=(($251)|0)==3; //@line 621 "lvm.c"
      if ($cmp367) { label = 75; break; } else { label = 77; break; } //@line 621 "lvm.c"
    case 75: 
      var $252=$rc350; //@line 621 "lvm.c"
      var $tt_369=(($252+8)|0); //@line 621 "lvm.c"
      var $253=HEAP32[(($tt_369)>>2)]; //@line 621 "lvm.c"
      var $cmp370=(($253)|0)==3; //@line 621 "lvm.c"
      if ($cmp370) { label = 76; break; } else { label = 77; break; } //@line 621 "lvm.c"
    case 76: 
      var $254=$rb334; //@line 621 "lvm.c"
      var $value_373=(($254)|0); //@line 621 "lvm.c"
      var $n374=$value_373; //@line 621 "lvm.c"
      var $255=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n374)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n374)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 621 "lvm.c"
      $nb372=$255; //@line 621 "lvm.c"
      var $256=$rc350; //@line 621 "lvm.c"
      var $value_376=(($256)|0); //@line 621 "lvm.c"
      var $n377=$value_376; //@line 621 "lvm.c"
      var $257=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n377)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n377)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 621 "lvm.c"
      $nc375=$257; //@line 621 "lvm.c"
      var $258=$ra; //@line 621 "lvm.c"
      $io378=$258; //@line 621 "lvm.c"
      var $259=$nb372; //@line 621 "lvm.c"
      var $260=$nc375; //@line 621 "lvm.c"
      var $sub=($259)-($260); //@line 621 "lvm.c"
      var $261=$io378; //@line 621 "lvm.c"
      var $value_379=(($261)|0); //@line 621 "lvm.c"
      var $n380=$value_379; //@line 621 "lvm.c"
      (HEAPF64[(tempDoublePtr)>>3]=$sub,HEAP32[(($n380)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n380)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); //@line 621 "lvm.c"
      var $262=$io378; //@line 621 "lvm.c"
      var $tt_381=(($262+8)|0); //@line 621 "lvm.c"
      HEAP32[(($tt_381)>>2)]=3; //@line 621 "lvm.c"
      label = 78; break; //@line 621 "lvm.c"
    case 77: 
      var $263=$L_addr; //@line 621 "lvm.c"
      var $264=$ra; //@line 621 "lvm.c"
      var $265=$rb334; //@line 621 "lvm.c"
      var $266=$rc350; //@line 621 "lvm.c"
      __Z10luaV_arithP9lua_StateP10lua_TValuePKS1_S4_3TMS($263, $264, $265, $266, 7); //@line 621 "lvm.c"
      var $267=$ci; //@line 621 "lvm.c"
      var $u383=(($267+24)|0); //@line 621 "lvm.c"
      var $l384=$u383; //@line 621 "lvm.c"
      var $base385=(($l384)|0); //@line 621 "lvm.c"
      var $268=HEAP32[(($base385)>>2)]; //@line 621 "lvm.c"
      $base=$268; //@line 621 "lvm.c"
      label = 78; break;
    case 78: 
      label = 290; break; //@line 621 "lvm.c"
    case 79: 
      var $269=$i; //@line 624 "lvm.c"
      var $shr389=$269 >>> 23; //@line 624 "lvm.c"
      var $and390=$shr389 & 511; //@line 624 "lvm.c"
      var $and391=$and390 & 256; //@line 624 "lvm.c"
      var $tobool392=(($and391)|0)!=0; //@line 624 "lvm.c"
      if ($tobool392) { label = 80; break; } else { label = 81; break; } //@line 624 "lvm.c"
    case 80: 
      var $270=$k; //@line 624 "lvm.c"
      var $271=$i; //@line 624 "lvm.c"
      var $shr394=$271 >>> 23; //@line 624 "lvm.c"
      var $and395=$shr394 & 511; //@line 624 "lvm.c"
      var $and396=$and395 & -257; //@line 624 "lvm.c"
      var $add_ptr397=(($270+((($and396)*(12))&-1))|0); //@line 624 "lvm.c"
      var $cond403 = $add_ptr397;label = 82; break; //@line 624 "lvm.c"
    case 81: 
      var $272=$base; //@line 624 "lvm.c"
      var $273=$i; //@line 624 "lvm.c"
      var $shr399=$273 >>> 23; //@line 624 "lvm.c"
      var $and400=$shr399 & 511; //@line 624 "lvm.c"
      var $add_ptr401=(($272+((($and400)*(12))&-1))|0); //@line 624 "lvm.c"
      var $cond403 = $add_ptr401;label = 82; break; //@line 624 "lvm.c"
    case 82: 
      var $cond403; //@line 624 "lvm.c"
      $rb388=$cond403; //@line 624 "lvm.c"
      var $274=$i; //@line 624 "lvm.c"
      var $shr405=$274 >>> 14; //@line 624 "lvm.c"
      var $and406=$shr405 & 511; //@line 624 "lvm.c"
      var $and407=$and406 & 256; //@line 624 "lvm.c"
      var $tobool408=(($and407)|0)!=0; //@line 624 "lvm.c"
      if ($tobool408) { label = 83; break; } else { label = 84; break; } //@line 624 "lvm.c"
    case 83: 
      var $275=$k; //@line 624 "lvm.c"
      var $276=$i; //@line 624 "lvm.c"
      var $shr410=$276 >>> 14; //@line 624 "lvm.c"
      var $and411=$shr410 & 511; //@line 624 "lvm.c"
      var $and412=$and411 & -257; //@line 624 "lvm.c"
      var $add_ptr413=(($275+((($and412)*(12))&-1))|0); //@line 624 "lvm.c"
      var $cond419 = $add_ptr413;label = 85; break; //@line 624 "lvm.c"
    case 84: 
      var $277=$base; //@line 624 "lvm.c"
      var $278=$i; //@line 624 "lvm.c"
      var $shr415=$278 >>> 14; //@line 624 "lvm.c"
      var $and416=$shr415 & 511; //@line 624 "lvm.c"
      var $add_ptr417=(($277+((($and416)*(12))&-1))|0); //@line 624 "lvm.c"
      var $cond419 = $add_ptr417;label = 85; break; //@line 624 "lvm.c"
    case 85: 
      var $cond419; //@line 624 "lvm.c"
      $rc404=$cond419; //@line 624 "lvm.c"
      var $279=$rb388; //@line 624 "lvm.c"
      var $tt_420=(($279+8)|0); //@line 624 "lvm.c"
      var $280=HEAP32[(($tt_420)>>2)]; //@line 624 "lvm.c"
      var $cmp421=(($280)|0)==3; //@line 624 "lvm.c"
      if ($cmp421) { label = 86; break; } else { label = 88; break; } //@line 624 "lvm.c"
    case 86: 
      var $281=$rc404; //@line 624 "lvm.c"
      var $tt_423=(($281+8)|0); //@line 624 "lvm.c"
      var $282=HEAP32[(($tt_423)>>2)]; //@line 624 "lvm.c"
      var $cmp424=(($282)|0)==3; //@line 624 "lvm.c"
      if ($cmp424) { label = 87; break; } else { label = 88; break; } //@line 624 "lvm.c"
    case 87: 
      var $283=$rb388; //@line 624 "lvm.c"
      var $value_427=(($283)|0); //@line 624 "lvm.c"
      var $n428=$value_427; //@line 624 "lvm.c"
      var $284=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n428)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n428)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 624 "lvm.c"
      $nb426=$284; //@line 624 "lvm.c"
      var $285=$rc404; //@line 624 "lvm.c"
      var $value_430=(($285)|0); //@line 624 "lvm.c"
      var $n431=$value_430; //@line 624 "lvm.c"
      var $286=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n431)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n431)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 624 "lvm.c"
      $nc429=$286; //@line 624 "lvm.c"
      var $287=$ra; //@line 624 "lvm.c"
      $io432=$287; //@line 624 "lvm.c"
      var $288=$nb426; //@line 624 "lvm.c"
      var $289=$nc429; //@line 624 "lvm.c"
      var $mul=($288)*($289); //@line 624 "lvm.c"
      var $290=$io432; //@line 624 "lvm.c"
      var $value_433=(($290)|0); //@line 624 "lvm.c"
      var $n434=$value_433; //@line 624 "lvm.c"
      (HEAPF64[(tempDoublePtr)>>3]=$mul,HEAP32[(($n434)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n434)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); //@line 624 "lvm.c"
      var $291=$io432; //@line 624 "lvm.c"
      var $tt_435=(($291+8)|0); //@line 624 "lvm.c"
      HEAP32[(($tt_435)>>2)]=3; //@line 624 "lvm.c"
      label = 89; break; //@line 624 "lvm.c"
    case 88: 
      var $292=$L_addr; //@line 624 "lvm.c"
      var $293=$ra; //@line 624 "lvm.c"
      var $294=$rb388; //@line 624 "lvm.c"
      var $295=$rc404; //@line 624 "lvm.c"
      __Z10luaV_arithP9lua_StateP10lua_TValuePKS1_S4_3TMS($292, $293, $294, $295, 8); //@line 624 "lvm.c"
      var $296=$ci; //@line 624 "lvm.c"
      var $u437=(($296+24)|0); //@line 624 "lvm.c"
      var $l438=$u437; //@line 624 "lvm.c"
      var $base439=(($l438)|0); //@line 624 "lvm.c"
      var $297=HEAP32[(($base439)>>2)]; //@line 624 "lvm.c"
      $base=$297; //@line 624 "lvm.c"
      label = 89; break;
    case 89: 
      label = 290; break; //@line 624 "lvm.c"
    case 90: 
      var $298=$i; //@line 627 "lvm.c"
      var $shr443=$298 >>> 23; //@line 627 "lvm.c"
      var $and444=$shr443 & 511; //@line 627 "lvm.c"
      var $and445=$and444 & 256; //@line 627 "lvm.c"
      var $tobool446=(($and445)|0)!=0; //@line 627 "lvm.c"
      if ($tobool446) { label = 91; break; } else { label = 92; break; } //@line 627 "lvm.c"
    case 91: 
      var $299=$k; //@line 627 "lvm.c"
      var $300=$i; //@line 627 "lvm.c"
      var $shr448=$300 >>> 23; //@line 627 "lvm.c"
      var $and449=$shr448 & 511; //@line 627 "lvm.c"
      var $and450=$and449 & -257; //@line 627 "lvm.c"
      var $add_ptr451=(($299+((($and450)*(12))&-1))|0); //@line 627 "lvm.c"
      var $cond457 = $add_ptr451;label = 93; break; //@line 627 "lvm.c"
    case 92: 
      var $301=$base; //@line 627 "lvm.c"
      var $302=$i; //@line 627 "lvm.c"
      var $shr453=$302 >>> 23; //@line 627 "lvm.c"
      var $and454=$shr453 & 511; //@line 627 "lvm.c"
      var $add_ptr455=(($301+((($and454)*(12))&-1))|0); //@line 627 "lvm.c"
      var $cond457 = $add_ptr455;label = 93; break; //@line 627 "lvm.c"
    case 93: 
      var $cond457; //@line 627 "lvm.c"
      $rb442=$cond457; //@line 627 "lvm.c"
      var $303=$i; //@line 627 "lvm.c"
      var $shr459=$303 >>> 14; //@line 627 "lvm.c"
      var $and460=$shr459 & 511; //@line 627 "lvm.c"
      var $and461=$and460 & 256; //@line 627 "lvm.c"
      var $tobool462=(($and461)|0)!=0; //@line 627 "lvm.c"
      if ($tobool462) { label = 94; break; } else { label = 95; break; } //@line 627 "lvm.c"
    case 94: 
      var $304=$k; //@line 627 "lvm.c"
      var $305=$i; //@line 627 "lvm.c"
      var $shr464=$305 >>> 14; //@line 627 "lvm.c"
      var $and465=$shr464 & 511; //@line 627 "lvm.c"
      var $and466=$and465 & -257; //@line 627 "lvm.c"
      var $add_ptr467=(($304+((($and466)*(12))&-1))|0); //@line 627 "lvm.c"
      var $cond473 = $add_ptr467;label = 96; break; //@line 627 "lvm.c"
    case 95: 
      var $306=$base; //@line 627 "lvm.c"
      var $307=$i; //@line 627 "lvm.c"
      var $shr469=$307 >>> 14; //@line 627 "lvm.c"
      var $and470=$shr469 & 511; //@line 627 "lvm.c"
      var $add_ptr471=(($306+((($and470)*(12))&-1))|0); //@line 627 "lvm.c"
      var $cond473 = $add_ptr471;label = 96; break; //@line 627 "lvm.c"
    case 96: 
      var $cond473; //@line 627 "lvm.c"
      $rc458=$cond473; //@line 627 "lvm.c"
      var $308=$rb442; //@line 627 "lvm.c"
      var $tt_474=(($308+8)|0); //@line 627 "lvm.c"
      var $309=HEAP32[(($tt_474)>>2)]; //@line 627 "lvm.c"
      var $cmp475=(($309)|0)==3; //@line 627 "lvm.c"
      if ($cmp475) { label = 97; break; } else { label = 99; break; } //@line 627 "lvm.c"
    case 97: 
      var $310=$rc458; //@line 627 "lvm.c"
      var $tt_477=(($310+8)|0); //@line 627 "lvm.c"
      var $311=HEAP32[(($tt_477)>>2)]; //@line 627 "lvm.c"
      var $cmp478=(($311)|0)==3; //@line 627 "lvm.c"
      if ($cmp478) { label = 98; break; } else { label = 99; break; } //@line 627 "lvm.c"
    case 98: 
      var $312=$rb442; //@line 627 "lvm.c"
      var $value_481=(($312)|0); //@line 627 "lvm.c"
      var $n482=$value_481; //@line 627 "lvm.c"
      var $313=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n482)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n482)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 627 "lvm.c"
      $nb480=$313; //@line 627 "lvm.c"
      var $314=$rc458; //@line 627 "lvm.c"
      var $value_484=(($314)|0); //@line 627 "lvm.c"
      var $n485=$value_484; //@line 627 "lvm.c"
      var $315=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n485)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n485)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 627 "lvm.c"
      $nc483=$315; //@line 627 "lvm.c"
      var $316=$ra; //@line 627 "lvm.c"
      $io486=$316; //@line 627 "lvm.c"
      var $317=$nb480; //@line 627 "lvm.c"
      var $318=$nc483; //@line 627 "lvm.c"
      var $div=($317)/($318); //@line 627 "lvm.c"
      var $319=$io486; //@line 627 "lvm.c"
      var $value_487=(($319)|0); //@line 627 "lvm.c"
      var $n488=$value_487; //@line 627 "lvm.c"
      (HEAPF64[(tempDoublePtr)>>3]=$div,HEAP32[(($n488)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n488)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); //@line 627 "lvm.c"
      var $320=$io486; //@line 627 "lvm.c"
      var $tt_489=(($320+8)|0); //@line 627 "lvm.c"
      HEAP32[(($tt_489)>>2)]=3; //@line 627 "lvm.c"
      label = 100; break; //@line 627 "lvm.c"
    case 99: 
      var $321=$L_addr; //@line 627 "lvm.c"
      var $322=$ra; //@line 627 "lvm.c"
      var $323=$rb442; //@line 627 "lvm.c"
      var $324=$rc458; //@line 627 "lvm.c"
      __Z10luaV_arithP9lua_StateP10lua_TValuePKS1_S4_3TMS($321, $322, $323, $324, 9); //@line 627 "lvm.c"
      var $325=$ci; //@line 627 "lvm.c"
      var $u491=(($325+24)|0); //@line 627 "lvm.c"
      var $l492=$u491; //@line 627 "lvm.c"
      var $base493=(($l492)|0); //@line 627 "lvm.c"
      var $326=HEAP32[(($base493)>>2)]; //@line 627 "lvm.c"
      $base=$326; //@line 627 "lvm.c"
      label = 100; break;
    case 100: 
      label = 290; break; //@line 627 "lvm.c"
    case 101: 
      var $327=$i; //@line 630 "lvm.c"
      var $shr497=$327 >>> 23; //@line 630 "lvm.c"
      var $and498=$shr497 & 511; //@line 630 "lvm.c"
      var $and499=$and498 & 256; //@line 630 "lvm.c"
      var $tobool500=(($and499)|0)!=0; //@line 630 "lvm.c"
      if ($tobool500) { label = 102; break; } else { label = 103; break; } //@line 630 "lvm.c"
    case 102: 
      var $328=$k; //@line 630 "lvm.c"
      var $329=$i; //@line 630 "lvm.c"
      var $shr502=$329 >>> 23; //@line 630 "lvm.c"
      var $and503=$shr502 & 511; //@line 630 "lvm.c"
      var $and504=$and503 & -257; //@line 630 "lvm.c"
      var $add_ptr505=(($328+((($and504)*(12))&-1))|0); //@line 630 "lvm.c"
      var $cond511 = $add_ptr505;label = 104; break; //@line 630 "lvm.c"
    case 103: 
      var $330=$base; //@line 630 "lvm.c"
      var $331=$i; //@line 630 "lvm.c"
      var $shr507=$331 >>> 23; //@line 630 "lvm.c"
      var $and508=$shr507 & 511; //@line 630 "lvm.c"
      var $add_ptr509=(($330+((($and508)*(12))&-1))|0); //@line 630 "lvm.c"
      var $cond511 = $add_ptr509;label = 104; break; //@line 630 "lvm.c"
    case 104: 
      var $cond511; //@line 630 "lvm.c"
      $rb496=$cond511; //@line 630 "lvm.c"
      var $332=$i; //@line 630 "lvm.c"
      var $shr513=$332 >>> 14; //@line 630 "lvm.c"
      var $and514=$shr513 & 511; //@line 630 "lvm.c"
      var $and515=$and514 & 256; //@line 630 "lvm.c"
      var $tobool516=(($and515)|0)!=0; //@line 630 "lvm.c"
      if ($tobool516) { label = 105; break; } else { label = 106; break; } //@line 630 "lvm.c"
    case 105: 
      var $333=$k; //@line 630 "lvm.c"
      var $334=$i; //@line 630 "lvm.c"
      var $shr518=$334 >>> 14; //@line 630 "lvm.c"
      var $and519=$shr518 & 511; //@line 630 "lvm.c"
      var $and520=$and519 & -257; //@line 630 "lvm.c"
      var $add_ptr521=(($333+((($and520)*(12))&-1))|0); //@line 630 "lvm.c"
      var $cond527 = $add_ptr521;label = 107; break; //@line 630 "lvm.c"
    case 106: 
      var $335=$base; //@line 630 "lvm.c"
      var $336=$i; //@line 630 "lvm.c"
      var $shr523=$336 >>> 14; //@line 630 "lvm.c"
      var $and524=$shr523 & 511; //@line 630 "lvm.c"
      var $add_ptr525=(($335+((($and524)*(12))&-1))|0); //@line 630 "lvm.c"
      var $cond527 = $add_ptr525;label = 107; break; //@line 630 "lvm.c"
    case 107: 
      var $cond527; //@line 630 "lvm.c"
      $rc512=$cond527; //@line 630 "lvm.c"
      var $337=$rb496; //@line 630 "lvm.c"
      var $tt_528=(($337+8)|0); //@line 630 "lvm.c"
      var $338=HEAP32[(($tt_528)>>2)]; //@line 630 "lvm.c"
      var $cmp529=(($338)|0)==3; //@line 630 "lvm.c"
      if ($cmp529) { label = 108; break; } else { label = 110; break; } //@line 630 "lvm.c"
    case 108: 
      var $339=$rc512; //@line 630 "lvm.c"
      var $tt_531=(($339+8)|0); //@line 630 "lvm.c"
      var $340=HEAP32[(($tt_531)>>2)]; //@line 630 "lvm.c"
      var $cmp532=(($340)|0)==3; //@line 630 "lvm.c"
      if ($cmp532) { label = 109; break; } else { label = 110; break; } //@line 630 "lvm.c"
    case 109: 
      var $341=$rb496; //@line 630 "lvm.c"
      var $value_535=(($341)|0); //@line 630 "lvm.c"
      var $n536=$value_535; //@line 630 "lvm.c"
      var $342=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n536)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n536)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 630 "lvm.c"
      $nb534=$342; //@line 630 "lvm.c"
      var $343=$rc512; //@line 630 "lvm.c"
      var $value_538=(($343)|0); //@line 630 "lvm.c"
      var $n539=$value_538; //@line 630 "lvm.c"
      var $344=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n539)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n539)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 630 "lvm.c"
      $nc537=$344; //@line 630 "lvm.c"
      var $345=$ra; //@line 630 "lvm.c"
      $io540=$345; //@line 630 "lvm.c"
      var $346=$nb534; //@line 630 "lvm.c"
      var $347=$nb534; //@line 630 "lvm.c"
      var $348=$nc537; //@line 630 "lvm.c"
      var $div541=($347)/($348); //@line 630 "lvm.c"
      var $call542=Math.floor($div541); //@line 630 "lvm.c"
      var $349=$nc537; //@line 630 "lvm.c"
      var $mul543=($call542)*($349); //@line 630 "lvm.c"
      var $sub544=($346)-($mul543); //@line 630 "lvm.c"
      var $350=$io540; //@line 630 "lvm.c"
      var $value_545=(($350)|0); //@line 630 "lvm.c"
      var $n546=$value_545; //@line 630 "lvm.c"
      (HEAPF64[(tempDoublePtr)>>3]=$sub544,HEAP32[(($n546)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n546)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); //@line 630 "lvm.c"
      var $351=$io540; //@line 630 "lvm.c"
      var $tt_547=(($351+8)|0); //@line 630 "lvm.c"
      HEAP32[(($tt_547)>>2)]=3; //@line 630 "lvm.c"
      label = 111; break; //@line 630 "lvm.c"
    case 110: 
      var $352=$L_addr; //@line 630 "lvm.c"
      var $353=$ra; //@line 630 "lvm.c"
      var $354=$rb496; //@line 630 "lvm.c"
      var $355=$rc512; //@line 630 "lvm.c"
      __Z10luaV_arithP9lua_StateP10lua_TValuePKS1_S4_3TMS($352, $353, $354, $355, 10); //@line 630 "lvm.c"
      var $356=$ci; //@line 630 "lvm.c"
      var $u549=(($356+24)|0); //@line 630 "lvm.c"
      var $l550=$u549; //@line 630 "lvm.c"
      var $base551=(($l550)|0); //@line 630 "lvm.c"
      var $357=HEAP32[(($base551)>>2)]; //@line 630 "lvm.c"
      $base=$357; //@line 630 "lvm.c"
      label = 111; break;
    case 111: 
      label = 290; break; //@line 630 "lvm.c"
    case 112: 
      var $358=$i; //@line 633 "lvm.c"
      var $shr555=$358 >>> 23; //@line 633 "lvm.c"
      var $and556=$shr555 & 511; //@line 633 "lvm.c"
      var $and557=$and556 & 256; //@line 633 "lvm.c"
      var $tobool558=(($and557)|0)!=0; //@line 633 "lvm.c"
      if ($tobool558) { label = 113; break; } else { label = 114; break; } //@line 633 "lvm.c"
    case 113: 
      var $359=$k; //@line 633 "lvm.c"
      var $360=$i; //@line 633 "lvm.c"
      var $shr560=$360 >>> 23; //@line 633 "lvm.c"
      var $and561=$shr560 & 511; //@line 633 "lvm.c"
      var $and562=$and561 & -257; //@line 633 "lvm.c"
      var $add_ptr563=(($359+((($and562)*(12))&-1))|0); //@line 633 "lvm.c"
      var $cond569 = $add_ptr563;label = 115; break; //@line 633 "lvm.c"
    case 114: 
      var $361=$base; //@line 633 "lvm.c"
      var $362=$i; //@line 633 "lvm.c"
      var $shr565=$362 >>> 23; //@line 633 "lvm.c"
      var $and566=$shr565 & 511; //@line 633 "lvm.c"
      var $add_ptr567=(($361+((($and566)*(12))&-1))|0); //@line 633 "lvm.c"
      var $cond569 = $add_ptr567;label = 115; break; //@line 633 "lvm.c"
    case 115: 
      var $cond569; //@line 633 "lvm.c"
      $rb554=$cond569; //@line 633 "lvm.c"
      var $363=$i; //@line 633 "lvm.c"
      var $shr571=$363 >>> 14; //@line 633 "lvm.c"
      var $and572=$shr571 & 511; //@line 633 "lvm.c"
      var $and573=$and572 & 256; //@line 633 "lvm.c"
      var $tobool574=(($and573)|0)!=0; //@line 633 "lvm.c"
      if ($tobool574) { label = 116; break; } else { label = 117; break; } //@line 633 "lvm.c"
    case 116: 
      var $364=$k; //@line 633 "lvm.c"
      var $365=$i; //@line 633 "lvm.c"
      var $shr576=$365 >>> 14; //@line 633 "lvm.c"
      var $and577=$shr576 & 511; //@line 633 "lvm.c"
      var $and578=$and577 & -257; //@line 633 "lvm.c"
      var $add_ptr579=(($364+((($and578)*(12))&-1))|0); //@line 633 "lvm.c"
      var $cond585 = $add_ptr579;label = 118; break; //@line 633 "lvm.c"
    case 117: 
      var $366=$base; //@line 633 "lvm.c"
      var $367=$i; //@line 633 "lvm.c"
      var $shr581=$367 >>> 14; //@line 633 "lvm.c"
      var $and582=$shr581 & 511; //@line 633 "lvm.c"
      var $add_ptr583=(($366+((($and582)*(12))&-1))|0); //@line 633 "lvm.c"
      var $cond585 = $add_ptr583;label = 118; break; //@line 633 "lvm.c"
    case 118: 
      var $cond585; //@line 633 "lvm.c"
      $rc570=$cond585; //@line 633 "lvm.c"
      var $368=$rb554; //@line 633 "lvm.c"
      var $tt_586=(($368+8)|0); //@line 633 "lvm.c"
      var $369=HEAP32[(($tt_586)>>2)]; //@line 633 "lvm.c"
      var $cmp587=(($369)|0)==3; //@line 633 "lvm.c"
      if ($cmp587) { label = 119; break; } else { label = 121; break; } //@line 633 "lvm.c"
    case 119: 
      var $370=$rc570; //@line 633 "lvm.c"
      var $tt_589=(($370+8)|0); //@line 633 "lvm.c"
      var $371=HEAP32[(($tt_589)>>2)]; //@line 633 "lvm.c"
      var $cmp590=(($371)|0)==3; //@line 633 "lvm.c"
      if ($cmp590) { label = 120; break; } else { label = 121; break; } //@line 633 "lvm.c"
    case 120: 
      var $372=$rb554; //@line 633 "lvm.c"
      var $value_593=(($372)|0); //@line 633 "lvm.c"
      var $n594=$value_593; //@line 633 "lvm.c"
      var $373=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n594)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n594)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 633 "lvm.c"
      $nb592=$373; //@line 633 "lvm.c"
      var $374=$rc570; //@line 633 "lvm.c"
      var $value_596=(($374)|0); //@line 633 "lvm.c"
      var $n597=$value_596; //@line 633 "lvm.c"
      var $375=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n597)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n597)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 633 "lvm.c"
      $nc595=$375; //@line 633 "lvm.c"
      var $376=$ra; //@line 633 "lvm.c"
      $io598=$376; //@line 633 "lvm.c"
      var $377=$nb592; //@line 633 "lvm.c"
      var $378=$nc595; //@line 633 "lvm.c"
      var $call599=Math.pow($377, $378); //@line 633 "lvm.c"
      var $379=$io598; //@line 633 "lvm.c"
      var $value_600=(($379)|0); //@line 633 "lvm.c"
      var $n601=$value_600; //@line 633 "lvm.c"
      (HEAPF64[(tempDoublePtr)>>3]=$call599,HEAP32[(($n601)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n601)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); //@line 633 "lvm.c"
      var $380=$io598; //@line 633 "lvm.c"
      var $tt_602=(($380+8)|0); //@line 633 "lvm.c"
      HEAP32[(($tt_602)>>2)]=3; //@line 633 "lvm.c"
      label = 122; break; //@line 633 "lvm.c"
    case 121: 
      var $381=$L_addr; //@line 633 "lvm.c"
      var $382=$ra; //@line 633 "lvm.c"
      var $383=$rb554; //@line 633 "lvm.c"
      var $384=$rc570; //@line 633 "lvm.c"
      __Z10luaV_arithP9lua_StateP10lua_TValuePKS1_S4_3TMS($381, $382, $383, $384, 11); //@line 633 "lvm.c"
      var $385=$ci; //@line 633 "lvm.c"
      var $u604=(($385+24)|0); //@line 633 "lvm.c"
      var $l605=$u604; //@line 633 "lvm.c"
      var $base606=(($l605)|0); //@line 633 "lvm.c"
      var $386=HEAP32[(($base606)>>2)]; //@line 633 "lvm.c"
      $base=$386; //@line 633 "lvm.c"
      label = 122; break;
    case 122: 
      label = 290; break; //@line 633 "lvm.c"
    case 123: 
      var $387=$base; //@line 636 "lvm.c"
      var $388=$i; //@line 636 "lvm.c"
      var $shr610=$388 >>> 23; //@line 636 "lvm.c"
      var $and611=$shr610 & 511; //@line 636 "lvm.c"
      var $add_ptr612=(($387+((($and611)*(12))&-1))|0); //@line 636 "lvm.c"
      $rb609=$add_ptr612; //@line 636 "lvm.c"
      var $389=$rb609; //@line 636 "lvm.c"
      var $tt_613=(($389+8)|0); //@line 636 "lvm.c"
      var $390=HEAP32[(($tt_613)>>2)]; //@line 636 "lvm.c"
      var $cmp614=(($390)|0)==3; //@line 636 "lvm.c"
      if ($cmp614) { label = 124; break; } else { label = 125; break; } //@line 636 "lvm.c"
    case 124: 
      var $391=$rb609; //@line 636 "lvm.c"
      var $value_617=(($391)|0); //@line 636 "lvm.c"
      var $n618=$value_617; //@line 636 "lvm.c"
      var $392=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n618)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n618)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 636 "lvm.c"
      $nb616=$392; //@line 636 "lvm.c"
      var $393=$ra; //@line 636 "lvm.c"
      $io619=$393; //@line 636 "lvm.c"
      var $394=$nb616; //@line 636 "lvm.c"
      var $sub620=(-$394); //@line 636 "lvm.c"
      var $395=$io619; //@line 636 "lvm.c"
      var $value_621=(($395)|0); //@line 636 "lvm.c"
      var $n622=$value_621; //@line 636 "lvm.c"
      (HEAPF64[(tempDoublePtr)>>3]=$sub620,HEAP32[(($n622)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n622)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); //@line 636 "lvm.c"
      var $396=$io619; //@line 636 "lvm.c"
      var $tt_623=(($396+8)|0); //@line 636 "lvm.c"
      HEAP32[(($tt_623)>>2)]=3; //@line 636 "lvm.c"
      label = 126; break; //@line 636 "lvm.c"
    case 125: 
      var $397=$L_addr; //@line 636 "lvm.c"
      var $398=$ra; //@line 636 "lvm.c"
      var $399=$rb609; //@line 636 "lvm.c"
      var $400=$rb609; //@line 636 "lvm.c"
      __Z10luaV_arithP9lua_StateP10lua_TValuePKS1_S4_3TMS($397, $398, $399, $400, 12); //@line 636 "lvm.c"
      var $401=$ci; //@line 636 "lvm.c"
      var $u625=(($401+24)|0); //@line 636 "lvm.c"
      var $l626=$u625; //@line 636 "lvm.c"
      var $base627=(($l626)|0); //@line 636 "lvm.c"
      var $402=HEAP32[(($base627)>>2)]; //@line 636 "lvm.c"
      $base=$402; //@line 636 "lvm.c"
      label = 126; break;
    case 126: 
      label = 290; break; //@line 636 "lvm.c"
    case 127: 
      var $403=$base; //@line 646 "lvm.c"
      var $404=$i; //@line 646 "lvm.c"
      var $shr631=$404 >>> 23; //@line 646 "lvm.c"
      var $and632=$shr631 & 511; //@line 646 "lvm.c"
      var $add_ptr633=(($403+((($and632)*(12))&-1))|0); //@line 646 "lvm.c"
      $rb630=$add_ptr633; //@line 646 "lvm.c"
      var $405=$rb630; //@line 646 "lvm.c"
      var $tt_634=(($405+8)|0); //@line 646 "lvm.c"
      var $406=HEAP32[(($tt_634)>>2)]; //@line 646 "lvm.c"
      var $cmp635=(($406)|0)==0; //@line 646 "lvm.c"
      if ($cmp635) { var $412 = 1;label = 131; break; } else { label = 128; break; } //@line 646 "lvm.c"
    case 128: 
      var $407=$rb630; //@line 646 "lvm.c"
      var $tt_636=(($407+8)|0); //@line 646 "lvm.c"
      var $408=HEAP32[(($tt_636)>>2)]; //@line 646 "lvm.c"
      var $cmp637=(($408)|0)==1; //@line 646 "lvm.c"
      if ($cmp637) { label = 129; break; } else { var $411 = 0;label = 130; break; } //@line 646 "lvm.c"
    case 129: 
      var $409=$rb630; //@line 646 "lvm.c"
      var $value_638=(($409)|0); //@line 646 "lvm.c"
      var $b639=$value_638; //@line 646 "lvm.c"
      var $410=HEAP32[(($b639)>>2)]; //@line 646 "lvm.c"
      var $cmp640=(($410)|0)==0; //@line 646 "lvm.c"
      var $411 = $cmp640;label = 130; break;
    case 130: 
      var $411;
      var $412 = $411;label = 131; break;
    case 131: 
      var $412;
      var $conv641=(($412)&1);
      $res=$conv641;
      var $413=$ra; //@line 646 "lvm.c"
      $io642=$413; //@line 646 "lvm.c"
      var $414=$res; //@line 646 "lvm.c"
      var $415=$io642; //@line 646 "lvm.c"
      var $value_643=(($415)|0); //@line 646 "lvm.c"
      var $b644=$value_643; //@line 646 "lvm.c"
      HEAP32[(($b644)>>2)]=$414; //@line 646 "lvm.c"
      var $416=$io642; //@line 646 "lvm.c"
      var $tt_645=(($416+8)|0); //@line 646 "lvm.c"
      HEAP32[(($tt_645)>>2)]=1; //@line 646 "lvm.c"
      label = 290; break; //@line 646 "lvm.c"
    case 132: 
      var $417=$L_addr; //@line 651 "lvm.c"
      var $418=$ra; //@line 651 "lvm.c"
      var $419=$base; //@line 651 "lvm.c"
      var $420=$i; //@line 651 "lvm.c"
      var $shr647=$420 >>> 23; //@line 651 "lvm.c"
      var $and648=$shr647 & 511; //@line 651 "lvm.c"
      var $add_ptr649=(($419+((($and648)*(12))&-1))|0); //@line 651 "lvm.c"
      __Z11luaV_objlenP9lua_StateP10lua_TValuePKS1_($417, $418, $add_ptr649); //@line 651 "lvm.c"
      var $421=$ci; //@line 651 "lvm.c"
      var $u650=(($421+24)|0); //@line 651 "lvm.c"
      var $l651=$u650; //@line 651 "lvm.c"
      var $base652=(($l651)|0); //@line 651 "lvm.c"
      var $422=HEAP32[(($base652)>>2)]; //@line 651 "lvm.c"
      $base=$422; //@line 651 "lvm.c"
      label = 290; break; //@line 651 "lvm.c"
    case 133: 
      var $423=$i; //@line 654 "lvm.c"
      var $shr655=$423 >>> 23; //@line 654 "lvm.c"
      var $and656=$shr655 & 511; //@line 654 "lvm.c"
      $b654=$and656; //@line 654 "lvm.c"
      var $424=$i; //@line 654 "lvm.c"
      var $shr658=$424 >>> 14; //@line 654 "lvm.c"
      var $and659=$shr658 & 511; //@line 654 "lvm.c"
      $c657=$and659; //@line 654 "lvm.c"
      var $425=$base; //@line 654 "lvm.c"
      var $426=$c657; //@line 654 "lvm.c"
      var $add_ptr661=(($425+((($426)*(12))&-1))|0); //@line 654 "lvm.c"
      var $add_ptr662=(($add_ptr661+12)|0); //@line 654 "lvm.c"
      var $427=$L_addr; //@line 654 "lvm.c"
      var $top663=(($427+8)|0); //@line 654 "lvm.c"
      HEAP32[(($top663)>>2)]=$add_ptr662; //@line 654 "lvm.c"
      var $428=$L_addr; //@line 654 "lvm.c"
      var $429=$c657; //@line 654 "lvm.c"
      var $430=$b654; //@line 654 "lvm.c"
      var $sub664=((($429)-($430))|0); //@line 654 "lvm.c"
      var $add665=((($sub664)+(1))|0); //@line 654 "lvm.c"
      __Z11luaV_concatP9lua_Statei($428, $add665); //@line 654 "lvm.c"
      var $431=$ci; //@line 654 "lvm.c"
      var $u666=(($431+24)|0); //@line 654 "lvm.c"
      var $l667=$u666; //@line 654 "lvm.c"
      var $base668=(($l667)|0); //@line 654 "lvm.c"
      var $432=HEAP32[(($base668)>>2)]; //@line 654 "lvm.c"
      $base=$432; //@line 654 "lvm.c"
      var $433=$base; //@line 654 "lvm.c"
      var $434=$i; //@line 654 "lvm.c"
      var $shr669=$434 >>> 6; //@line 654 "lvm.c"
      var $and670=$shr669 & 255; //@line 654 "lvm.c"
      var $add_ptr671=(($433+((($and670)*(12))&-1))|0); //@line 654 "lvm.c"
      $ra=$add_ptr671; //@line 654 "lvm.c"
      var $435=$b654; //@line 654 "lvm.c"
      var $436=$base; //@line 654 "lvm.c"
      var $add_ptr672=(($436+((($435)*(12))&-1))|0); //@line 654 "lvm.c"
      $rb660=$add_ptr672; //@line 654 "lvm.c"
      var $437=$rb660; //@line 654 "lvm.c"
      $io2673=$437; //@line 654 "lvm.c"
      var $438=$ra; //@line 654 "lvm.c"
      $io1674=$438; //@line 654 "lvm.c"
      var $439=$io1674; //@line 654 "lvm.c"
      var $value_675=(($439)|0); //@line 654 "lvm.c"
      var $440=$io2673; //@line 654 "lvm.c"
      var $value_676=(($440)|0); //@line 654 "lvm.c"
      var $441=$value_675; //@line 654 "lvm.c"
      var $442=$value_676; //@line 654 "lvm.c"
      assert(8 % 1 === 0);HEAP32[(($441)>>2)]=HEAP32[(($442)>>2)];HEAP32[((($441)+(4))>>2)]=HEAP32[((($442)+(4))>>2)]; //@line 654 "lvm.c"
      var $443=$io2673; //@line 654 "lvm.c"
      var $tt_677=(($443+8)|0); //@line 654 "lvm.c"
      var $444=HEAP32[(($tt_677)>>2)]; //@line 654 "lvm.c"
      var $445=$io1674; //@line 654 "lvm.c"
      var $tt_678=(($445+8)|0); //@line 654 "lvm.c"
      HEAP32[(($tt_678)>>2)]=$444; //@line 654 "lvm.c"
      var $446=$L_addr; //@line 654 "lvm.c"
      var $l_G679=(($446+12)|0); //@line 654 "lvm.c"
      var $447=HEAP32[(($l_G679)>>2)]; //@line 654 "lvm.c"
      var $GCdebt680=(($447+12)|0); //@line 654 "lvm.c"
      var $448=HEAP32[(($GCdebt680)>>2)]; //@line 654 "lvm.c"
      var $cmp681=(($448)|0) > 0; //@line 654 "lvm.c"
      if ($cmp681) { label = 134; break; } else { label = 138; break; } //@line 654 "lvm.c"
    case 134: 
      var $449=$ra; //@line 654 "lvm.c"
      var $450=$rb660; //@line 654 "lvm.c"
      var $cmp683=(($449)>>>0) >= (($450)>>>0); //@line 654 "lvm.c"
      if ($cmp683) { label = 135; break; } else { label = 136; break; } //@line 654 "lvm.c"
    case 135: 
      var $451=$ra; //@line 654 "lvm.c"
      var $add_ptr685=(($451+12)|0); //@line 654 "lvm.c"
      var $cond688 = $add_ptr685;label = 137; break; //@line 654 "lvm.c"
    case 136: 
      var $452=$rb660; //@line 654 "lvm.c"
      var $cond688 = $452;label = 137; break; //@line 654 "lvm.c"
    case 137: 
      var $cond688; //@line 654 "lvm.c"
      var $453=$L_addr; //@line 654 "lvm.c"
      var $top689=(($453+8)|0); //@line 654 "lvm.c"
      HEAP32[(($top689)>>2)]=$cond688; //@line 654 "lvm.c"
      var $454=$L_addr; //@line 654 "lvm.c"
      __Z9luaC_stepP9lua_State($454); //@line 654 "lvm.c"
      var $455=$ci; //@line 654 "lvm.c"
      var $top690=(($455+4)|0); //@line 654 "lvm.c"
      var $456=HEAP32[(($top690)>>2)]; //@line 654 "lvm.c"
      var $457=$L_addr; //@line 654 "lvm.c"
      var $top691=(($457+8)|0); //@line 654 "lvm.c"
      HEAP32[(($top691)>>2)]=$456; //@line 654 "lvm.c"
      label = 138; break; //@line 654 "lvm.c"
    case 138: 
      var $458=$ci; //@line 654 "lvm.c"
      var $u693=(($458+24)|0); //@line 654 "lvm.c"
      var $l694=$u693; //@line 654 "lvm.c"
      var $base695=(($l694)|0); //@line 654 "lvm.c"
      var $459=HEAP32[(($base695)>>2)]; //@line 654 "lvm.c"
      $base=$459; //@line 654 "lvm.c"
      var $460=$ci; //@line 654 "lvm.c"
      var $top696=(($460+4)|0); //@line 654 "lvm.c"
      var $461=HEAP32[(($top696)>>2)]; //@line 654 "lvm.c"
      var $462=$L_addr; //@line 654 "lvm.c"
      var $top697=(($462+8)|0); //@line 654 "lvm.c"
      HEAP32[(($top697)>>2)]=$461; //@line 654 "lvm.c"
      label = 290; break; //@line 654 "lvm.c"
    case 139: 
      var $463=$i; //@line 666 "lvm.c"
      var $shr700=$463 >>> 6; //@line 666 "lvm.c"
      var $and701=$shr700 & 255; //@line 666 "lvm.c"
      $a699=$and701; //@line 666 "lvm.c"
      var $464=$a699; //@line 666 "lvm.c"
      var $cmp702=(($464)|0) > 0; //@line 666 "lvm.c"
      if ($cmp702) { label = 140; break; } else { label = 141; break; } //@line 666 "lvm.c"
    case 140: 
      var $465=$L_addr; //@line 666 "lvm.c"
      var $466=$ci; //@line 666 "lvm.c"
      var $u704=(($466+24)|0); //@line 666 "lvm.c"
      var $l705=$u704; //@line 666 "lvm.c"
      var $base706=(($l705)|0); //@line 666 "lvm.c"
      var $467=HEAP32[(($base706)>>2)]; //@line 666 "lvm.c"
      var $468=$a699; //@line 666 "lvm.c"
      var $add_ptr707=(($467+((($468)*(12))&-1))|0); //@line 666 "lvm.c"
      var $add_ptr708=((($add_ptr707)-(12))|0); //@line 666 "lvm.c"
      __Z10luaF_closeP9lua_StateP10lua_TValue($465, $add_ptr708); //@line 666 "lvm.c"
      label = 141; break; //@line 666 "lvm.c"
    case 141: 
      var $469=$i; //@line 666 "lvm.c"
      var $shr710=$469 >>> 14; //@line 666 "lvm.c"
      var $and711=$shr710 & 262143; //@line 666 "lvm.c"
      var $sub712=((($and711)-(131071))|0); //@line 666 "lvm.c"
      var $add713=(($sub712)|0); //@line 666 "lvm.c"
      var $470=$ci; //@line 666 "lvm.c"
      var $u714=(($470+24)|0); //@line 666 "lvm.c"
      var $l715=$u714; //@line 666 "lvm.c"
      var $savedpc716=(($l715+4)|0); //@line 666 "lvm.c"
      var $471=HEAP32[(($savedpc716)>>2)]; //@line 666 "lvm.c"
      var $add_ptr717=(($471+($add713<<2))|0); //@line 666 "lvm.c"
      HEAP32[(($savedpc716)>>2)]=$add_ptr717; //@line 666 "lvm.c"
      label = 290; break; //@line 666 "lvm.c"
    case 142: 
      var $472=$i; //@line 669 "lvm.c"
      var $shr720=$472 >>> 23; //@line 669 "lvm.c"
      var $and721=$shr720 & 511; //@line 669 "lvm.c"
      var $and722=$and721 & 256; //@line 669 "lvm.c"
      var $tobool723=(($and722)|0)!=0; //@line 669 "lvm.c"
      if ($tobool723) { label = 143; break; } else { label = 144; break; } //@line 669 "lvm.c"
    case 143: 
      var $473=$k; //@line 669 "lvm.c"
      var $474=$i; //@line 669 "lvm.c"
      var $shr725=$474 >>> 23; //@line 669 "lvm.c"
      var $and726=$shr725 & 511; //@line 669 "lvm.c"
      var $and727=$and726 & -257; //@line 669 "lvm.c"
      var $add_ptr728=(($473+((($and727)*(12))&-1))|0); //@line 669 "lvm.c"
      var $cond734 = $add_ptr728;label = 145; break; //@line 669 "lvm.c"
    case 144: 
      var $475=$base; //@line 669 "lvm.c"
      var $476=$i; //@line 669 "lvm.c"
      var $shr730=$476 >>> 23; //@line 669 "lvm.c"
      var $and731=$shr730 & 511; //@line 669 "lvm.c"
      var $add_ptr732=(($475+((($and731)*(12))&-1))|0); //@line 669 "lvm.c"
      var $cond734 = $add_ptr732;label = 145; break; //@line 669 "lvm.c"
    case 145: 
      var $cond734; //@line 669 "lvm.c"
      $rb719=$cond734; //@line 669 "lvm.c"
      var $477=$i; //@line 669 "lvm.c"
      var $shr736=$477 >>> 14; //@line 669 "lvm.c"
      var $and737=$shr736 & 511; //@line 669 "lvm.c"
      var $and738=$and737 & 256; //@line 669 "lvm.c"
      var $tobool739=(($and738)|0)!=0; //@line 669 "lvm.c"
      if ($tobool739) { label = 146; break; } else { label = 147; break; } //@line 669 "lvm.c"
    case 146: 
      var $478=$k; //@line 669 "lvm.c"
      var $479=$i; //@line 669 "lvm.c"
      var $shr741=$479 >>> 14; //@line 669 "lvm.c"
      var $and742=$shr741 & 511; //@line 669 "lvm.c"
      var $and743=$and742 & -257; //@line 669 "lvm.c"
      var $add_ptr744=(($478+((($and743)*(12))&-1))|0); //@line 669 "lvm.c"
      var $cond750 = $add_ptr744;label = 148; break; //@line 669 "lvm.c"
    case 147: 
      var $480=$base; //@line 669 "lvm.c"
      var $481=$i; //@line 669 "lvm.c"
      var $shr746=$481 >>> 14; //@line 669 "lvm.c"
      var $and747=$shr746 & 511; //@line 669 "lvm.c"
      var $add_ptr748=(($480+((($and747)*(12))&-1))|0); //@line 669 "lvm.c"
      var $cond750 = $add_ptr748;label = 148; break; //@line 669 "lvm.c"
    case 148: 
      var $cond750; //@line 669 "lvm.c"
      $rc735=$cond750; //@line 669 "lvm.c"
      var $482=$rb719; //@line 669 "lvm.c"
      var $tt_751=(($482+8)|0); //@line 669 "lvm.c"
      var $483=HEAP32[(($tt_751)>>2)]; //@line 669 "lvm.c"
      var $484=$rc735; //@line 669 "lvm.c"
      var $tt_752=(($484+8)|0); //@line 669 "lvm.c"
      var $485=HEAP32[(($tt_752)>>2)]; //@line 669 "lvm.c"
      var $cmp753=(($483)|0)==(($485)|0); //@line 669 "lvm.c"
      if ($cmp753) { label = 149; break; } else { var $489 = 0;label = 150; break; } //@line 669 "lvm.c"
    case 149: 
      var $486=$L_addr; //@line 669 "lvm.c"
      var $487=$rb719; //@line 669 "lvm.c"
      var $488=$rc735; //@line 669 "lvm.c"
      var $call755=__Z14luaV_equalobj_P9lua_StatePK10lua_TValueS3_($486, $487, $488); //@line 669 "lvm.c"
      var $tobool756=(($call755)|0)!=0; //@line 669 "lvm.c"
      var $489 = $tobool756;label = 150; break;
    case 150: 
      var $489;
      var $conv758=(($489)&1);
      var $490=$i;
      var $shr759=$490 >>> 6;
      var $and760=$shr759 & 255;
      var $cmp761=(($conv758)|0)!=(($and760)|0);
      if ($cmp761) { label = 151; break; } else { label = 152; break; }
    case 151: 
      var $491=$ci; //@line 669 "lvm.c"
      var $u763=(($491+24)|0); //@line 669 "lvm.c"
      var $l764=$u763; //@line 669 "lvm.c"
      var $savedpc765=(($l764+4)|0); //@line 669 "lvm.c"
      var $492=HEAP32[(($savedpc765)>>2)]; //@line 669 "lvm.c"
      var $incdec_ptr766=(($492+4)|0); //@line 669 "lvm.c"
      HEAP32[(($savedpc765)>>2)]=$incdec_ptr766; //@line 669 "lvm.c"
      label = 155; break; //@line 669 "lvm.c"
    case 152: 
      var $493=$ci; //@line 669 "lvm.c"
      var $u768=(($493+24)|0); //@line 669 "lvm.c"
      var $l769=$u768; //@line 669 "lvm.c"
      var $savedpc770=(($l769+4)|0); //@line 669 "lvm.c"
      var $494=HEAP32[(($savedpc770)>>2)]; //@line 669 "lvm.c"
      var $495=HEAP32[(($494)>>2)]; //@line 669 "lvm.c"
      $i=$495; //@line 669 "lvm.c"
      var $496=$i; //@line 669 "lvm.c"
      var $shr772=$496 >>> 6; //@line 669 "lvm.c"
      var $and773=$shr772 & 255; //@line 669 "lvm.c"
      $a771=$and773; //@line 669 "lvm.c"
      var $497=$a771; //@line 669 "lvm.c"
      var $cmp774=(($497)|0) > 0; //@line 669 "lvm.c"
      if ($cmp774) { label = 153; break; } else { label = 154; break; } //@line 669 "lvm.c"
    case 153: 
      var $498=$L_addr; //@line 669 "lvm.c"
      var $499=$ci; //@line 669 "lvm.c"
      var $u776=(($499+24)|0); //@line 669 "lvm.c"
      var $l777=$u776; //@line 669 "lvm.c"
      var $base778=(($l777)|0); //@line 669 "lvm.c"
      var $500=HEAP32[(($base778)>>2)]; //@line 669 "lvm.c"
      var $501=$a771; //@line 669 "lvm.c"
      var $add_ptr779=(($500+((($501)*(12))&-1))|0); //@line 669 "lvm.c"
      var $add_ptr780=((($add_ptr779)-(12))|0); //@line 669 "lvm.c"
      __Z10luaF_closeP9lua_StateP10lua_TValue($498, $add_ptr780); //@line 669 "lvm.c"
      label = 154; break; //@line 669 "lvm.c"
    case 154: 
      var $502=$i; //@line 669 "lvm.c"
      var $shr782=$502 >>> 14; //@line 669 "lvm.c"
      var $and783=$shr782 & 262143; //@line 669 "lvm.c"
      var $sub784=((($and783)-(131071))|0); //@line 669 "lvm.c"
      var $add785=((($sub784)+(1))|0); //@line 669 "lvm.c"
      var $503=$ci; //@line 669 "lvm.c"
      var $u786=(($503+24)|0); //@line 669 "lvm.c"
      var $l787=$u786; //@line 669 "lvm.c"
      var $savedpc788=(($l787+4)|0); //@line 669 "lvm.c"
      var $504=HEAP32[(($savedpc788)>>2)]; //@line 669 "lvm.c"
      var $add_ptr789=(($504+($add785<<2))|0); //@line 669 "lvm.c"
      HEAP32[(($savedpc788)>>2)]=$add_ptr789; //@line 669 "lvm.c"
      label = 155; break;
    case 155: 
      var $505=$ci; //@line 669 "lvm.c"
      var $u791=(($505+24)|0); //@line 669 "lvm.c"
      var $l792=$u791; //@line 669 "lvm.c"
      var $base793=(($l792)|0); //@line 669 "lvm.c"
      var $506=HEAP32[(($base793)>>2)]; //@line 669 "lvm.c"
      $base=$506; //@line 669 "lvm.c"
      label = 290; break; //@line 669 "lvm.c"
    case 156: 
      var $507=$L_addr; //@line 679 "lvm.c"
      var $508=$i; //@line 679 "lvm.c"
      var $shr795=$508 >>> 23; //@line 679 "lvm.c"
      var $and796=$shr795 & 511; //@line 679 "lvm.c"
      var $and797=$and796 & 256; //@line 679 "lvm.c"
      var $tobool798=(($and797)|0)!=0; //@line 679 "lvm.c"
      if ($tobool798) { label = 157; break; } else { label = 158; break; } //@line 679 "lvm.c"
    case 157: 
      var $509=$k; //@line 679 "lvm.c"
      var $510=$i; //@line 679 "lvm.c"
      var $shr800=$510 >>> 23; //@line 679 "lvm.c"
      var $and801=$shr800 & 511; //@line 679 "lvm.c"
      var $and802=$and801 & -257; //@line 679 "lvm.c"
      var $add_ptr803=(($509+((($and802)*(12))&-1))|0); //@line 679 "lvm.c"
      var $cond809 = $add_ptr803;label = 159; break; //@line 679 "lvm.c"
    case 158: 
      var $511=$base; //@line 679 "lvm.c"
      var $512=$i; //@line 679 "lvm.c"
      var $shr805=$512 >>> 23; //@line 679 "lvm.c"
      var $and806=$shr805 & 511; //@line 679 "lvm.c"
      var $add_ptr807=(($511+((($and806)*(12))&-1))|0); //@line 679 "lvm.c"
      var $cond809 = $add_ptr807;label = 159; break; //@line 679 "lvm.c"
    case 159: 
      var $cond809; //@line 679 "lvm.c"
      var $513=$i; //@line 679 "lvm.c"
      var $shr810=$513 >>> 14; //@line 679 "lvm.c"
      var $and811=$shr810 & 511; //@line 679 "lvm.c"
      var $and812=$and811 & 256; //@line 679 "lvm.c"
      var $tobool813=(($and812)|0)!=0; //@line 679 "lvm.c"
      if ($tobool813) { label = 160; break; } else { label = 161; break; } //@line 679 "lvm.c"
    case 160: 
      var $514=$k; //@line 679 "lvm.c"
      var $515=$i; //@line 679 "lvm.c"
      var $shr815=$515 >>> 14; //@line 679 "lvm.c"
      var $and816=$shr815 & 511; //@line 679 "lvm.c"
      var $and817=$and816 & -257; //@line 679 "lvm.c"
      var $add_ptr818=(($514+((($and817)*(12))&-1))|0); //@line 679 "lvm.c"
      var $cond824 = $add_ptr818;label = 162; break; //@line 679 "lvm.c"
    case 161: 
      var $516=$base; //@line 679 "lvm.c"
      var $517=$i; //@line 679 "lvm.c"
      var $shr820=$517 >>> 14; //@line 679 "lvm.c"
      var $and821=$shr820 & 511; //@line 679 "lvm.c"
      var $add_ptr822=(($516+((($and821)*(12))&-1))|0); //@line 679 "lvm.c"
      var $cond824 = $add_ptr822;label = 162; break; //@line 679 "lvm.c"
    case 162: 
      var $cond824; //@line 679 "lvm.c"
      var $call825=__Z13luaV_lessthanP9lua_StatePK10lua_TValueS3_($507, $cond809, $cond824); //@line 679 "lvm.c"
      var $518=$i; //@line 679 "lvm.c"
      var $shr826=$518 >>> 6; //@line 679 "lvm.c"
      var $and827=$shr826 & 255; //@line 679 "lvm.c"
      var $cmp828=(($call825)|0)!=(($and827)|0); //@line 679 "lvm.c"
      if ($cmp828) { label = 163; break; } else { label = 164; break; } //@line 679 "lvm.c"
    case 163: 
      var $519=$ci; //@line 679 "lvm.c"
      var $u830=(($519+24)|0); //@line 679 "lvm.c"
      var $l831=$u830; //@line 679 "lvm.c"
      var $savedpc832=(($l831+4)|0); //@line 679 "lvm.c"
      var $520=HEAP32[(($savedpc832)>>2)]; //@line 679 "lvm.c"
      var $incdec_ptr833=(($520+4)|0); //@line 679 "lvm.c"
      HEAP32[(($savedpc832)>>2)]=$incdec_ptr833; //@line 679 "lvm.c"
      label = 167; break; //@line 679 "lvm.c"
    case 164: 
      var $521=$ci; //@line 679 "lvm.c"
      var $u835=(($521+24)|0); //@line 679 "lvm.c"
      var $l836=$u835; //@line 679 "lvm.c"
      var $savedpc837=(($l836+4)|0); //@line 679 "lvm.c"
      var $522=HEAP32[(($savedpc837)>>2)]; //@line 679 "lvm.c"
      var $523=HEAP32[(($522)>>2)]; //@line 679 "lvm.c"
      $i=$523; //@line 679 "lvm.c"
      var $524=$i; //@line 679 "lvm.c"
      var $shr839=$524 >>> 6; //@line 679 "lvm.c"
      var $and840=$shr839 & 255; //@line 679 "lvm.c"
      $a838=$and840; //@line 679 "lvm.c"
      var $525=$a838; //@line 679 "lvm.c"
      var $cmp841=(($525)|0) > 0; //@line 679 "lvm.c"
      if ($cmp841) { label = 165; break; } else { label = 166; break; } //@line 679 "lvm.c"
    case 165: 
      var $526=$L_addr; //@line 679 "lvm.c"
      var $527=$ci; //@line 679 "lvm.c"
      var $u843=(($527+24)|0); //@line 679 "lvm.c"
      var $l844=$u843; //@line 679 "lvm.c"
      var $base845=(($l844)|0); //@line 679 "lvm.c"
      var $528=HEAP32[(($base845)>>2)]; //@line 679 "lvm.c"
      var $529=$a838; //@line 679 "lvm.c"
      var $add_ptr846=(($528+((($529)*(12))&-1))|0); //@line 679 "lvm.c"
      var $add_ptr847=((($add_ptr846)-(12))|0); //@line 679 "lvm.c"
      __Z10luaF_closeP9lua_StateP10lua_TValue($526, $add_ptr847); //@line 679 "lvm.c"
      label = 166; break; //@line 679 "lvm.c"
    case 166: 
      var $530=$i; //@line 679 "lvm.c"
      var $shr849=$530 >>> 14; //@line 679 "lvm.c"
      var $and850=$shr849 & 262143; //@line 679 "lvm.c"
      var $sub851=((($and850)-(131071))|0); //@line 679 "lvm.c"
      var $add852=((($sub851)+(1))|0); //@line 679 "lvm.c"
      var $531=$ci; //@line 679 "lvm.c"
      var $u853=(($531+24)|0); //@line 679 "lvm.c"
      var $l854=$u853; //@line 679 "lvm.c"
      var $savedpc855=(($l854+4)|0); //@line 679 "lvm.c"
      var $532=HEAP32[(($savedpc855)>>2)]; //@line 679 "lvm.c"
      var $add_ptr856=(($532+($add852<<2))|0); //@line 679 "lvm.c"
      HEAP32[(($savedpc855)>>2)]=$add_ptr856; //@line 679 "lvm.c"
      label = 167; break;
    case 167: 
      var $533=$ci; //@line 679 "lvm.c"
      var $u858=(($533+24)|0); //@line 679 "lvm.c"
      var $l859=$u858; //@line 679 "lvm.c"
      var $base860=(($l859)|0); //@line 679 "lvm.c"
      var $534=HEAP32[(($base860)>>2)]; //@line 679 "lvm.c"
      $base=$534; //@line 679 "lvm.c"
      label = 290; break; //@line 679 "lvm.c"
    case 168: 
      var $535=$L_addr; //@line 687 "lvm.c"
      var $536=$i; //@line 687 "lvm.c"
      var $shr862=$536 >>> 23; //@line 687 "lvm.c"
      var $and863=$shr862 & 511; //@line 687 "lvm.c"
      var $and864=$and863 & 256; //@line 687 "lvm.c"
      var $tobool865=(($and864)|0)!=0; //@line 687 "lvm.c"
      if ($tobool865) { label = 169; break; } else { label = 170; break; } //@line 687 "lvm.c"
    case 169: 
      var $537=$k; //@line 687 "lvm.c"
      var $538=$i; //@line 687 "lvm.c"
      var $shr867=$538 >>> 23; //@line 687 "lvm.c"
      var $and868=$shr867 & 511; //@line 687 "lvm.c"
      var $and869=$and868 & -257; //@line 687 "lvm.c"
      var $add_ptr870=(($537+((($and869)*(12))&-1))|0); //@line 687 "lvm.c"
      var $cond876 = $add_ptr870;label = 171; break; //@line 687 "lvm.c"
    case 170: 
      var $539=$base; //@line 687 "lvm.c"
      var $540=$i; //@line 687 "lvm.c"
      var $shr872=$540 >>> 23; //@line 687 "lvm.c"
      var $and873=$shr872 & 511; //@line 687 "lvm.c"
      var $add_ptr874=(($539+((($and873)*(12))&-1))|0); //@line 687 "lvm.c"
      var $cond876 = $add_ptr874;label = 171; break; //@line 687 "lvm.c"
    case 171: 
      var $cond876; //@line 687 "lvm.c"
      var $541=$i; //@line 687 "lvm.c"
      var $shr877=$541 >>> 14; //@line 687 "lvm.c"
      var $and878=$shr877 & 511; //@line 687 "lvm.c"
      var $and879=$and878 & 256; //@line 687 "lvm.c"
      var $tobool880=(($and879)|0)!=0; //@line 687 "lvm.c"
      if ($tobool880) { label = 172; break; } else { label = 173; break; } //@line 687 "lvm.c"
    case 172: 
      var $542=$k; //@line 687 "lvm.c"
      var $543=$i; //@line 687 "lvm.c"
      var $shr882=$543 >>> 14; //@line 687 "lvm.c"
      var $and883=$shr882 & 511; //@line 687 "lvm.c"
      var $and884=$and883 & -257; //@line 687 "lvm.c"
      var $add_ptr885=(($542+((($and884)*(12))&-1))|0); //@line 687 "lvm.c"
      var $cond891 = $add_ptr885;label = 174; break; //@line 687 "lvm.c"
    case 173: 
      var $544=$base; //@line 687 "lvm.c"
      var $545=$i; //@line 687 "lvm.c"
      var $shr887=$545 >>> 14; //@line 687 "lvm.c"
      var $and888=$shr887 & 511; //@line 687 "lvm.c"
      var $add_ptr889=(($544+((($and888)*(12))&-1))|0); //@line 687 "lvm.c"
      var $cond891 = $add_ptr889;label = 174; break; //@line 687 "lvm.c"
    case 174: 
      var $cond891; //@line 687 "lvm.c"
      var $call892=__Z14luaV_lessequalP9lua_StatePK10lua_TValueS3_($535, $cond876, $cond891); //@line 687 "lvm.c"
      var $546=$i; //@line 687 "lvm.c"
      var $shr893=$546 >>> 6; //@line 687 "lvm.c"
      var $and894=$shr893 & 255; //@line 687 "lvm.c"
      var $cmp895=(($call892)|0)!=(($and894)|0); //@line 687 "lvm.c"
      if ($cmp895) { label = 175; break; } else { label = 176; break; } //@line 687 "lvm.c"
    case 175: 
      var $547=$ci; //@line 687 "lvm.c"
      var $u897=(($547+24)|0); //@line 687 "lvm.c"
      var $l898=$u897; //@line 687 "lvm.c"
      var $savedpc899=(($l898+4)|0); //@line 687 "lvm.c"
      var $548=HEAP32[(($savedpc899)>>2)]; //@line 687 "lvm.c"
      var $incdec_ptr900=(($548+4)|0); //@line 687 "lvm.c"
      HEAP32[(($savedpc899)>>2)]=$incdec_ptr900; //@line 687 "lvm.c"
      label = 179; break; //@line 687 "lvm.c"
    case 176: 
      var $549=$ci; //@line 687 "lvm.c"
      var $u902=(($549+24)|0); //@line 687 "lvm.c"
      var $l903=$u902; //@line 687 "lvm.c"
      var $savedpc904=(($l903+4)|0); //@line 687 "lvm.c"
      var $550=HEAP32[(($savedpc904)>>2)]; //@line 687 "lvm.c"
      var $551=HEAP32[(($550)>>2)]; //@line 687 "lvm.c"
      $i=$551; //@line 687 "lvm.c"
      var $552=$i; //@line 687 "lvm.c"
      var $shr906=$552 >>> 6; //@line 687 "lvm.c"
      var $and907=$shr906 & 255; //@line 687 "lvm.c"
      $a905=$and907; //@line 687 "lvm.c"
      var $553=$a905; //@line 687 "lvm.c"
      var $cmp908=(($553)|0) > 0; //@line 687 "lvm.c"
      if ($cmp908) { label = 177; break; } else { label = 178; break; } //@line 687 "lvm.c"
    case 177: 
      var $554=$L_addr; //@line 687 "lvm.c"
      var $555=$ci; //@line 687 "lvm.c"
      var $u910=(($555+24)|0); //@line 687 "lvm.c"
      var $l911=$u910; //@line 687 "lvm.c"
      var $base912=(($l911)|0); //@line 687 "lvm.c"
      var $556=HEAP32[(($base912)>>2)]; //@line 687 "lvm.c"
      var $557=$a905; //@line 687 "lvm.c"
      var $add_ptr913=(($556+((($557)*(12))&-1))|0); //@line 687 "lvm.c"
      var $add_ptr914=((($add_ptr913)-(12))|0); //@line 687 "lvm.c"
      __Z10luaF_closeP9lua_StateP10lua_TValue($554, $add_ptr914); //@line 687 "lvm.c"
      label = 178; break; //@line 687 "lvm.c"
    case 178: 
      var $558=$i; //@line 687 "lvm.c"
      var $shr916=$558 >>> 14; //@line 687 "lvm.c"
      var $and917=$shr916 & 262143; //@line 687 "lvm.c"
      var $sub918=((($and917)-(131071))|0); //@line 687 "lvm.c"
      var $add919=((($sub918)+(1))|0); //@line 687 "lvm.c"
      var $559=$ci; //@line 687 "lvm.c"
      var $u920=(($559+24)|0); //@line 687 "lvm.c"
      var $l921=$u920; //@line 687 "lvm.c"
      var $savedpc922=(($l921+4)|0); //@line 687 "lvm.c"
      var $560=HEAP32[(($savedpc922)>>2)]; //@line 687 "lvm.c"
      var $add_ptr923=(($560+($add919<<2))|0); //@line 687 "lvm.c"
      HEAP32[(($savedpc922)>>2)]=$add_ptr923; //@line 687 "lvm.c"
      label = 179; break;
    case 179: 
      var $561=$ci; //@line 687 "lvm.c"
      var $u925=(($561+24)|0); //@line 687 "lvm.c"
      var $l926=$u925; //@line 687 "lvm.c"
      var $base927=(($l926)|0); //@line 687 "lvm.c"
      var $562=HEAP32[(($base927)>>2)]; //@line 687 "lvm.c"
      $base=$562; //@line 687 "lvm.c"
      label = 290; break; //@line 687 "lvm.c"
    case 180: 
      var $563=$i; //@line 695 "lvm.c"
      var $shr929=$563 >>> 14; //@line 695 "lvm.c"
      var $and930=$shr929 & 511; //@line 695 "lvm.c"
      var $tobool931=(($and930)|0)!=0; //@line 695 "lvm.c"
      if ($tobool931) { label = 181; break; } else { label = 184; break; } //@line 695 "lvm.c"
    case 181: 
      var $564=$ra; //@line 695 "lvm.c"
      var $tt_933=(($564+8)|0); //@line 695 "lvm.c"
      var $565=HEAP32[(($tt_933)>>2)]; //@line 695 "lvm.c"
      var $cmp934=(($565)|0)==0; //@line 695 "lvm.c"
      if ($cmp934) { label = 187; break; } else { label = 182; break; } //@line 695 "lvm.c"
    case 182: 
      var $566=$ra; //@line 695 "lvm.c"
      var $tt_936=(($566+8)|0); //@line 695 "lvm.c"
      var $567=HEAP32[(($tt_936)>>2)]; //@line 695 "lvm.c"
      var $cmp937=(($567)|0)==1; //@line 695 "lvm.c"
      if ($cmp937) { label = 183; break; } else { label = 188; break; } //@line 695 "lvm.c"
    case 183: 
      var $568=$ra; //@line 695 "lvm.c"
      var $value_939=(($568)|0); //@line 695 "lvm.c"
      var $b940=$value_939; //@line 695 "lvm.c"
      var $569=HEAP32[(($b940)>>2)]; //@line 695 "lvm.c"
      var $cmp941=(($569)|0)==0; //@line 695 "lvm.c"
      if ($cmp941) { label = 187; break; } else { label = 188; break; } //@line 695 "lvm.c"
    case 184: 
      var $570=$ra; //@line 695 "lvm.c"
      var $tt_943=(($570+8)|0); //@line 695 "lvm.c"
      var $571=HEAP32[(($tt_943)>>2)]; //@line 695 "lvm.c"
      var $cmp944=(($571)|0)==0; //@line 695 "lvm.c"
      if ($cmp944) { label = 188; break; } else { label = 185; break; } //@line 695 "lvm.c"
    case 185: 
      var $572=$ra; //@line 695 "lvm.c"
      var $tt_946=(($572+8)|0); //@line 695 "lvm.c"
      var $573=HEAP32[(($tt_946)>>2)]; //@line 695 "lvm.c"
      var $cmp947=(($573)|0)==1; //@line 695 "lvm.c"
      if ($cmp947) { label = 186; break; } else { label = 187; break; } //@line 695 "lvm.c"
    case 186: 
      var $574=$ra; //@line 695 "lvm.c"
      var $value_949=(($574)|0); //@line 695 "lvm.c"
      var $b950=$value_949; //@line 695 "lvm.c"
      var $575=HEAP32[(($b950)>>2)]; //@line 695 "lvm.c"
      var $cmp951=(($575)|0)==0; //@line 695 "lvm.c"
      if ($cmp951) { label = 188; break; } else { label = 187; break; } //@line 695 "lvm.c"
    case 187: 
      var $576=$ci; //@line 695 "lvm.c"
      var $u953=(($576+24)|0); //@line 695 "lvm.c"
      var $l954=$u953; //@line 695 "lvm.c"
      var $savedpc955=(($l954+4)|0); //@line 695 "lvm.c"
      var $577=HEAP32[(($savedpc955)>>2)]; //@line 695 "lvm.c"
      var $incdec_ptr956=(($577+4)|0); //@line 695 "lvm.c"
      HEAP32[(($savedpc955)>>2)]=$incdec_ptr956; //@line 695 "lvm.c"
      label = 191; break; //@line 695 "lvm.c"
    case 188: 
      var $578=$ci; //@line 695 "lvm.c"
      var $u958=(($578+24)|0); //@line 695 "lvm.c"
      var $l959=$u958; //@line 695 "lvm.c"
      var $savedpc960=(($l959+4)|0); //@line 695 "lvm.c"
      var $579=HEAP32[(($savedpc960)>>2)]; //@line 695 "lvm.c"
      var $580=HEAP32[(($579)>>2)]; //@line 695 "lvm.c"
      $i=$580; //@line 695 "lvm.c"
      var $581=$i; //@line 695 "lvm.c"
      var $shr962=$581 >>> 6; //@line 695 "lvm.c"
      var $and963=$shr962 & 255; //@line 695 "lvm.c"
      $a961=$and963; //@line 695 "lvm.c"
      var $582=$a961; //@line 695 "lvm.c"
      var $cmp964=(($582)|0) > 0; //@line 695 "lvm.c"
      if ($cmp964) { label = 189; break; } else { label = 190; break; } //@line 695 "lvm.c"
    case 189: 
      var $583=$L_addr; //@line 695 "lvm.c"
      var $584=$ci; //@line 695 "lvm.c"
      var $u966=(($584+24)|0); //@line 695 "lvm.c"
      var $l967=$u966; //@line 695 "lvm.c"
      var $base968=(($l967)|0); //@line 695 "lvm.c"
      var $585=HEAP32[(($base968)>>2)]; //@line 695 "lvm.c"
      var $586=$a961; //@line 695 "lvm.c"
      var $add_ptr969=(($585+((($586)*(12))&-1))|0); //@line 695 "lvm.c"
      var $add_ptr970=((($add_ptr969)-(12))|0); //@line 695 "lvm.c"
      __Z10luaF_closeP9lua_StateP10lua_TValue($583, $add_ptr970); //@line 695 "lvm.c"
      label = 190; break; //@line 695 "lvm.c"
    case 190: 
      var $587=$i; //@line 695 "lvm.c"
      var $shr972=$587 >>> 14; //@line 695 "lvm.c"
      var $and973=$shr972 & 262143; //@line 695 "lvm.c"
      var $sub974=((($and973)-(131071))|0); //@line 695 "lvm.c"
      var $add975=((($sub974)+(1))|0); //@line 695 "lvm.c"
      var $588=$ci; //@line 695 "lvm.c"
      var $u976=(($588+24)|0); //@line 695 "lvm.c"
      var $l977=$u976; //@line 695 "lvm.c"
      var $savedpc978=(($l977+4)|0); //@line 695 "lvm.c"
      var $589=HEAP32[(($savedpc978)>>2)]; //@line 695 "lvm.c"
      var $add_ptr979=(($589+($add975<<2))|0); //@line 695 "lvm.c"
      HEAP32[(($savedpc978)>>2)]=$add_ptr979; //@line 695 "lvm.c"
      label = 191; break;
    case 191: 
      label = 290; break; //@line 695 "lvm.c"
    case 192: 
      var $590=$base; //@line 701 "lvm.c"
      var $591=$i; //@line 701 "lvm.c"
      var $shr983=$591 >>> 23; //@line 701 "lvm.c"
      var $and984=$shr983 & 511; //@line 701 "lvm.c"
      var $add_ptr985=(($590+((($and984)*(12))&-1))|0); //@line 701 "lvm.c"
      $rb982=$add_ptr985; //@line 701 "lvm.c"
      var $592=$i; //@line 701 "lvm.c"
      var $shr986=$592 >>> 14; //@line 701 "lvm.c"
      var $and987=$shr986 & 511; //@line 701 "lvm.c"
      var $tobool988=(($and987)|0)!=0; //@line 701 "lvm.c"
      if ($tobool988) { label = 193; break; } else { label = 196; break; } //@line 701 "lvm.c"
    case 193: 
      var $593=$rb982; //@line 701 "lvm.c"
      var $tt_990=(($593+8)|0); //@line 701 "lvm.c"
      var $594=HEAP32[(($tt_990)>>2)]; //@line 701 "lvm.c"
      var $cmp991=(($594)|0)==0; //@line 701 "lvm.c"
      if ($cmp991) { label = 199; break; } else { label = 194; break; } //@line 701 "lvm.c"
    case 194: 
      var $595=$rb982; //@line 701 "lvm.c"
      var $tt_993=(($595+8)|0); //@line 701 "lvm.c"
      var $596=HEAP32[(($tt_993)>>2)]; //@line 701 "lvm.c"
      var $cmp994=(($596)|0)==1; //@line 701 "lvm.c"
      if ($cmp994) { label = 195; break; } else { label = 200; break; } //@line 701 "lvm.c"
    case 195: 
      var $597=$rb982; //@line 701 "lvm.c"
      var $value_996=(($597)|0); //@line 701 "lvm.c"
      var $b997=$value_996; //@line 701 "lvm.c"
      var $598=HEAP32[(($b997)>>2)]; //@line 701 "lvm.c"
      var $cmp998=(($598)|0)==0; //@line 701 "lvm.c"
      if ($cmp998) { label = 199; break; } else { label = 200; break; } //@line 701 "lvm.c"
    case 196: 
      var $599=$rb982; //@line 701 "lvm.c"
      var $tt_1000=(($599+8)|0); //@line 701 "lvm.c"
      var $600=HEAP32[(($tt_1000)>>2)]; //@line 701 "lvm.c"
      var $cmp1001=(($600)|0)==0; //@line 701 "lvm.c"
      if ($cmp1001) { label = 200; break; } else { label = 197; break; } //@line 701 "lvm.c"
    case 197: 
      var $601=$rb982; //@line 701 "lvm.c"
      var $tt_1003=(($601+8)|0); //@line 701 "lvm.c"
      var $602=HEAP32[(($tt_1003)>>2)]; //@line 701 "lvm.c"
      var $cmp1004=(($602)|0)==1; //@line 701 "lvm.c"
      if ($cmp1004) { label = 198; break; } else { label = 199; break; } //@line 701 "lvm.c"
    case 198: 
      var $603=$rb982; //@line 701 "lvm.c"
      var $value_1006=(($603)|0); //@line 701 "lvm.c"
      var $b1007=$value_1006; //@line 701 "lvm.c"
      var $604=HEAP32[(($b1007)>>2)]; //@line 701 "lvm.c"
      var $cmp1008=(($604)|0)==0; //@line 701 "lvm.c"
      if ($cmp1008) { label = 200; break; } else { label = 199; break; } //@line 701 "lvm.c"
    case 199: 
      var $605=$ci; //@line 701 "lvm.c"
      var $u1010=(($605+24)|0); //@line 701 "lvm.c"
      var $l1011=$u1010; //@line 701 "lvm.c"
      var $savedpc1012=(($l1011+4)|0); //@line 701 "lvm.c"
      var $606=HEAP32[(($savedpc1012)>>2)]; //@line 701 "lvm.c"
      var $incdec_ptr1013=(($606+4)|0); //@line 701 "lvm.c"
      HEAP32[(($savedpc1012)>>2)]=$incdec_ptr1013; //@line 701 "lvm.c"
      label = 203; break; //@line 701 "lvm.c"
    case 200: 
      var $607=$rb982; //@line 701 "lvm.c"
      $io21015=$607; //@line 701 "lvm.c"
      var $608=$ra; //@line 701 "lvm.c"
      $io11016=$608; //@line 701 "lvm.c"
      var $609=$io11016; //@line 701 "lvm.c"
      var $value_1017=(($609)|0); //@line 701 "lvm.c"
      var $610=$io21015; //@line 701 "lvm.c"
      var $value_1018=(($610)|0); //@line 701 "lvm.c"
      var $611=$value_1017; //@line 701 "lvm.c"
      var $612=$value_1018; //@line 701 "lvm.c"
      assert(8 % 1 === 0);HEAP32[(($611)>>2)]=HEAP32[(($612)>>2)];HEAP32[((($611)+(4))>>2)]=HEAP32[((($612)+(4))>>2)]; //@line 701 "lvm.c"
      var $613=$io21015; //@line 701 "lvm.c"
      var $tt_1019=(($613+8)|0); //@line 701 "lvm.c"
      var $614=HEAP32[(($tt_1019)>>2)]; //@line 701 "lvm.c"
      var $615=$io11016; //@line 701 "lvm.c"
      var $tt_1020=(($615+8)|0); //@line 701 "lvm.c"
      HEAP32[(($tt_1020)>>2)]=$614; //@line 701 "lvm.c"
      var $616=$ci; //@line 701 "lvm.c"
      var $u1021=(($616+24)|0); //@line 701 "lvm.c"
      var $l1022=$u1021; //@line 701 "lvm.c"
      var $savedpc1023=(($l1022+4)|0); //@line 701 "lvm.c"
      var $617=HEAP32[(($savedpc1023)>>2)]; //@line 701 "lvm.c"
      var $618=HEAP32[(($617)>>2)]; //@line 701 "lvm.c"
      $i=$618; //@line 701 "lvm.c"
      var $619=$i; //@line 701 "lvm.c"
      var $shr1025=$619 >>> 6; //@line 701 "lvm.c"
      var $and1026=$shr1025 & 255; //@line 701 "lvm.c"
      $a1024=$and1026; //@line 701 "lvm.c"
      var $620=$a1024; //@line 701 "lvm.c"
      var $cmp1027=(($620)|0) > 0; //@line 701 "lvm.c"
      if ($cmp1027) { label = 201; break; } else { label = 202; break; } //@line 701 "lvm.c"
    case 201: 
      var $621=$L_addr; //@line 701 "lvm.c"
      var $622=$ci; //@line 701 "lvm.c"
      var $u1029=(($622+24)|0); //@line 701 "lvm.c"
      var $l1030=$u1029; //@line 701 "lvm.c"
      var $base1031=(($l1030)|0); //@line 701 "lvm.c"
      var $623=HEAP32[(($base1031)>>2)]; //@line 701 "lvm.c"
      var $624=$a1024; //@line 701 "lvm.c"
      var $add_ptr1032=(($623+((($624)*(12))&-1))|0); //@line 701 "lvm.c"
      var $add_ptr1033=((($add_ptr1032)-(12))|0); //@line 701 "lvm.c"
      __Z10luaF_closeP9lua_StateP10lua_TValue($621, $add_ptr1033); //@line 701 "lvm.c"
      label = 202; break; //@line 701 "lvm.c"
    case 202: 
      var $625=$i; //@line 701 "lvm.c"
      var $shr1035=$625 >>> 14; //@line 701 "lvm.c"
      var $and1036=$shr1035 & 262143; //@line 701 "lvm.c"
      var $sub1037=((($and1036)-(131071))|0); //@line 701 "lvm.c"
      var $add1038=((($sub1037)+(1))|0); //@line 701 "lvm.c"
      var $626=$ci; //@line 701 "lvm.c"
      var $u1039=(($626+24)|0); //@line 701 "lvm.c"
      var $l1040=$u1039; //@line 701 "lvm.c"
      var $savedpc1041=(($l1040+4)|0); //@line 701 "lvm.c"
      var $627=HEAP32[(($savedpc1041)>>2)]; //@line 701 "lvm.c"
      var $add_ptr1042=(($627+($add1038<<2))|0); //@line 701 "lvm.c"
      HEAP32[(($savedpc1041)>>2)]=$add_ptr1042; //@line 701 "lvm.c"
      label = 203; break;
    case 203: 
      label = 290; break; //@line 701 "lvm.c"
    case 204: 
      var $628=$i; //@line 710 "lvm.c"
      var $shr1046=$628 >>> 23; //@line 710 "lvm.c"
      var $and1047=$shr1046 & 511; //@line 710 "lvm.c"
      $b1045=$and1047; //@line 710 "lvm.c"
      var $629=$i; //@line 710 "lvm.c"
      var $shr1048=$629 >>> 14; //@line 710 "lvm.c"
      var $and1049=$shr1048 & 511; //@line 710 "lvm.c"
      var $sub1050=((($and1049)-(1))|0); //@line 710 "lvm.c"
      $nresults=$sub1050; //@line 710 "lvm.c"
      var $630=$b1045; //@line 710 "lvm.c"
      var $cmp1051=(($630)|0)!=0; //@line 710 "lvm.c"
      if ($cmp1051) { label = 205; break; } else { label = 206; break; } //@line 710 "lvm.c"
    case 205: 
      var $631=$ra; //@line 710 "lvm.c"
      var $632=$b1045; //@line 710 "lvm.c"
      var $add_ptr1053=(($631+((($632)*(12))&-1))|0); //@line 710 "lvm.c"
      var $633=$L_addr; //@line 710 "lvm.c"
      var $top1054=(($633+8)|0); //@line 710 "lvm.c"
      HEAP32[(($top1054)>>2)]=$add_ptr1053; //@line 710 "lvm.c"
      label = 206; break; //@line 710 "lvm.c"
    case 206: 
      var $634=$L_addr; //@line 710 "lvm.c"
      var $635=$ra; //@line 710 "lvm.c"
      var $636=$nresults; //@line 710 "lvm.c"
      var $call1056=__Z12luaD_precallP9lua_StateP10lua_TValuei($634, $635, $636); //@line 710 "lvm.c"
      var $tobool1057=(($call1056)|0)!=0; //@line 710 "lvm.c"
      if ($tobool1057) { label = 207; break; } else { label = 210; break; } //@line 710 "lvm.c"
    case 207: 
      var $637=$nresults; //@line 710 "lvm.c"
      var $cmp1059=(($637)|0) >= 0; //@line 710 "lvm.c"
      if ($cmp1059) { label = 208; break; } else { label = 209; break; } //@line 710 "lvm.c"
    case 208: 
      var $638=$ci; //@line 710 "lvm.c"
      var $top1061=(($638+4)|0); //@line 710 "lvm.c"
      var $639=HEAP32[(($top1061)>>2)]; //@line 710 "lvm.c"
      var $640=$L_addr; //@line 710 "lvm.c"
      var $top1062=(($640+8)|0); //@line 710 "lvm.c"
      HEAP32[(($top1062)>>2)]=$639; //@line 710 "lvm.c"
      label = 209; break; //@line 710 "lvm.c"
    case 209: 
      var $641=$ci; //@line 710 "lvm.c"
      var $u1064=(($641+24)|0); //@line 710 "lvm.c"
      var $l1065=$u1064; //@line 710 "lvm.c"
      var $base1066=(($l1065)|0); //@line 710 "lvm.c"
      var $642=HEAP32[(($base1066)>>2)]; //@line 710 "lvm.c"
      $base=$642; //@line 710 "lvm.c"
      label = 211; break; //@line 710 "lvm.c"
    case 210: 
      var $643=$L_addr; //@line 710 "lvm.c"
      var $ci1068=(($643+16)|0); //@line 710 "lvm.c"
      var $644=HEAP32[(($ci1068)>>2)]; //@line 710 "lvm.c"
      $ci=$644; //@line 710 "lvm.c"
      var $645=$ci; //@line 710 "lvm.c"
      var $callstatus=(($645+18)|0); //@line 710 "lvm.c"
      var $646=HEAP8[($callstatus)]; //@line 710 "lvm.c"
      var $conv1069=(($646)&255); //@line 710 "lvm.c"
      var $or=$conv1069 | 4; //@line 710 "lvm.c"
      var $conv1070=(($or) & 255); //@line 710 "lvm.c"
      HEAP8[($callstatus)]=$conv1070; //@line 710 "lvm.c"
      label = 3; break; //@line 710 "lvm.c"
    case 211: 
      label = 290; break; //@line 710 "lvm.c"
    case 212: 
      var $647=$i; //@line 724 "lvm.c"
      var $shr1074=$647 >>> 23; //@line 724 "lvm.c"
      var $and1075=$shr1074 & 511; //@line 724 "lvm.c"
      $b1073=$and1075; //@line 724 "lvm.c"
      var $648=$b1073; //@line 724 "lvm.c"
      var $cmp1076=(($648)|0)!=0; //@line 724 "lvm.c"
      if ($cmp1076) { label = 213; break; } else { label = 214; break; } //@line 724 "lvm.c"
    case 213: 
      var $649=$ra; //@line 724 "lvm.c"
      var $650=$b1073; //@line 724 "lvm.c"
      var $add_ptr1078=(($649+((($650)*(12))&-1))|0); //@line 724 "lvm.c"
      var $651=$L_addr; //@line 724 "lvm.c"
      var $top1079=(($651+8)|0); //@line 724 "lvm.c"
      HEAP32[(($top1079)>>2)]=$add_ptr1078; //@line 724 "lvm.c"
      label = 214; break; //@line 724 "lvm.c"
    case 214: 
      var $652=$L_addr; //@line 724 "lvm.c"
      var $653=$ra; //@line 724 "lvm.c"
      var $call1081=__Z12luaD_precallP9lua_StateP10lua_TValuei($652, $653, -1); //@line 724 "lvm.c"
      var $tobool1082=(($call1081)|0)!=0; //@line 724 "lvm.c"
      if ($tobool1082) { label = 215; break; } else { label = 216; break; } //@line 724 "lvm.c"
    case 215: 
      var $654=$ci; //@line 724 "lvm.c"
      var $u1084=(($654+24)|0); //@line 724 "lvm.c"
      var $l1085=$u1084; //@line 724 "lvm.c"
      var $base1086=(($l1085)|0); //@line 724 "lvm.c"
      var $655=HEAP32[(($base1086)>>2)]; //@line 724 "lvm.c"
      $base=$655; //@line 724 "lvm.c"
      label = 223; break; //@line 724 "lvm.c"
    case 216: 
      var $656=$L_addr; //@line 724 "lvm.c"
      var $ci1088=(($656+16)|0); //@line 724 "lvm.c"
      var $657=HEAP32[(($ci1088)>>2)]; //@line 724 "lvm.c"
      $nci=$657; //@line 724 "lvm.c"
      var $658=$nci; //@line 724 "lvm.c"
      var $previous=(($658+8)|0); //@line 724 "lvm.c"
      var $659=HEAP32[(($previous)>>2)]; //@line 724 "lvm.c"
      $oci=$659; //@line 724 "lvm.c"
      var $660=$nci; //@line 724 "lvm.c"
      var $func1089=(($660)|0); //@line 724 "lvm.c"
      var $661=HEAP32[(($func1089)>>2)]; //@line 724 "lvm.c"
      $nfunc=$661; //@line 724 "lvm.c"
      var $662=$oci; //@line 724 "lvm.c"
      var $func1090=(($662)|0); //@line 724 "lvm.c"
      var $663=HEAP32[(($func1090)>>2)]; //@line 724 "lvm.c"
      $ofunc=$663; //@line 724 "lvm.c"
      var $664=$nci; //@line 724 "lvm.c"
      var $u1091=(($664+24)|0); //@line 724 "lvm.c"
      var $l1092=$u1091; //@line 724 "lvm.c"
      var $base1093=(($l1092)|0); //@line 724 "lvm.c"
      var $665=HEAP32[(($base1093)>>2)]; //@line 724 "lvm.c"
      var $666=$nfunc; //@line 724 "lvm.c"
      var $value_1094=(($666)|0); //@line 724 "lvm.c"
      var $gc1095=$value_1094; //@line 724 "lvm.c"
      var $667=HEAP32[(($gc1095)>>2)]; //@line 724 "lvm.c"
      var $cl1096=$667; //@line 724 "lvm.c"
      var $l1097=$cl1096; //@line 724 "lvm.c"
      var $p1098=(($l1097+12)|0); //@line 724 "lvm.c"
      var $668=HEAP32[(($p1098)>>2)]; //@line 724 "lvm.c"
      var $numparams=(($668+76)|0); //@line 724 "lvm.c"
      var $669=HEAP8[($numparams)]; //@line 724 "lvm.c"
      var $conv1099=(($669)&255); //@line 724 "lvm.c"
      var $add_ptr1100=(($665+((($conv1099)*(12))&-1))|0); //@line 724 "lvm.c"
      $lim=$add_ptr1100; //@line 724 "lvm.c"
      var $670=$cl; //@line 724 "lvm.c"
      var $p1101=(($670+12)|0); //@line 724 "lvm.c"
      var $671=HEAP32[(($p1101)>>2)]; //@line 724 "lvm.c"
      var $sizep=(($671+56)|0); //@line 724 "lvm.c"
      var $672=HEAP32[(($sizep)>>2)]; //@line 724 "lvm.c"
      var $cmp1102=(($672)|0) > 0; //@line 724 "lvm.c"
      if ($cmp1102) { label = 217; break; } else { label = 218; break; } //@line 724 "lvm.c"
    case 217: 
      var $673=$L_addr; //@line 724 "lvm.c"
      var $674=$oci; //@line 724 "lvm.c"
      var $u1104=(($674+24)|0); //@line 724 "lvm.c"
      var $l1105=$u1104; //@line 724 "lvm.c"
      var $base1106=(($l1105)|0); //@line 724 "lvm.c"
      var $675=HEAP32[(($base1106)>>2)]; //@line 724 "lvm.c"
      __Z10luaF_closeP9lua_StateP10lua_TValue($673, $675); //@line 724 "lvm.c"
      label = 218; break; //@line 724 "lvm.c"
    case 218: 
      $aux=0; //@line 724 "lvm.c"
      label = 219; break; //@line 724 "lvm.c"
    case 219: 
      var $676=$nfunc; //@line 724 "lvm.c"
      var $677=$aux; //@line 724 "lvm.c"
      var $add_ptr1109=(($676+((($677)*(12))&-1))|0); //@line 724 "lvm.c"
      var $678=$lim; //@line 724 "lvm.c"
      var $cmp1110=(($add_ptr1109)>>>0) < (($678)>>>0); //@line 724 "lvm.c"
      if ($cmp1110) { label = 220; break; } else { label = 222; break; } //@line 724 "lvm.c"
    case 220: 
      var $679=$nfunc; //@line 724 "lvm.c"
      var $680=$aux; //@line 724 "lvm.c"
      var $add_ptr1112=(($679+((($680)*(12))&-1))|0); //@line 724 "lvm.c"
      $io21111=$add_ptr1112; //@line 724 "lvm.c"
      var $681=$ofunc; //@line 724 "lvm.c"
      var $682=$aux; //@line 724 "lvm.c"
      var $add_ptr1114=(($681+((($682)*(12))&-1))|0); //@line 724 "lvm.c"
      $io11113=$add_ptr1114; //@line 724 "lvm.c"
      var $683=$io11113; //@line 724 "lvm.c"
      var $value_1115=(($683)|0); //@line 724 "lvm.c"
      var $684=$io21111; //@line 724 "lvm.c"
      var $value_1116=(($684)|0); //@line 724 "lvm.c"
      var $685=$value_1115; //@line 724 "lvm.c"
      var $686=$value_1116; //@line 724 "lvm.c"
      assert(8 % 1 === 0);HEAP32[(($685)>>2)]=HEAP32[(($686)>>2)];HEAP32[((($685)+(4))>>2)]=HEAP32[((($686)+(4))>>2)]; //@line 724 "lvm.c"
      var $687=$io21111; //@line 724 "lvm.c"
      var $tt_1117=(($687+8)|0); //@line 724 "lvm.c"
      var $688=HEAP32[(($tt_1117)>>2)]; //@line 724 "lvm.c"
      var $689=$io11113; //@line 724 "lvm.c"
      var $tt_1118=(($689+8)|0); //@line 724 "lvm.c"
      HEAP32[(($tt_1118)>>2)]=$688; //@line 724 "lvm.c"
      label = 221; break; //@line 724 "lvm.c"
    case 221: 
      var $690=$aux; //@line 724 "lvm.c"
      var $inc=((($690)+(1))|0); //@line 724 "lvm.c"
      $aux=$inc; //@line 724 "lvm.c"
      label = 219; break; //@line 724 "lvm.c"
    case 222: 
      var $691=$ofunc; //@line 724 "lvm.c"
      var $692=$nci; //@line 724 "lvm.c"
      var $u1119=(($692+24)|0); //@line 724 "lvm.c"
      var $l1120=$u1119; //@line 724 "lvm.c"
      var $base1121=(($l1120)|0); //@line 724 "lvm.c"
      var $693=HEAP32[(($base1121)>>2)]; //@line 724 "lvm.c"
      var $694=$nfunc; //@line 724 "lvm.c"
      var $sub_ptr_lhs_cast=$693; //@line 724 "lvm.c"
      var $sub_ptr_rhs_cast=$694; //@line 724 "lvm.c"
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 724 "lvm.c"
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(12))&-1); //@line 724 "lvm.c"
      var $add_ptr1122=(($691+((($sub_ptr_div)*(12))&-1))|0); //@line 724 "lvm.c"
      var $695=$oci; //@line 724 "lvm.c"
      var $u1123=(($695+24)|0); //@line 724 "lvm.c"
      var $l1124=$u1123; //@line 724 "lvm.c"
      var $base1125=(($l1124)|0); //@line 724 "lvm.c"
      HEAP32[(($base1125)>>2)]=$add_ptr1122; //@line 724 "lvm.c"
      var $696=$ofunc; //@line 724 "lvm.c"
      var $697=$L_addr; //@line 724 "lvm.c"
      var $top1126=(($697+8)|0); //@line 724 "lvm.c"
      var $698=HEAP32[(($top1126)>>2)]; //@line 724 "lvm.c"
      var $699=$nfunc; //@line 724 "lvm.c"
      var $sub_ptr_lhs_cast1127=$698; //@line 724 "lvm.c"
      var $sub_ptr_rhs_cast1128=$699; //@line 724 "lvm.c"
      var $sub_ptr_sub1129=((($sub_ptr_lhs_cast1127)-($sub_ptr_rhs_cast1128))|0); //@line 724 "lvm.c"
      var $sub_ptr_div1130=((((($sub_ptr_sub1129)|0))/(12))&-1); //@line 724 "lvm.c"
      var $add_ptr1131=(($696+((($sub_ptr_div1130)*(12))&-1))|0); //@line 724 "lvm.c"
      var $700=$L_addr; //@line 724 "lvm.c"
      var $top1132=(($700+8)|0); //@line 724 "lvm.c"
      HEAP32[(($top1132)>>2)]=$add_ptr1131; //@line 724 "lvm.c"
      var $701=$oci; //@line 724 "lvm.c"
      var $top1133=(($701+4)|0); //@line 724 "lvm.c"
      HEAP32[(($top1133)>>2)]=$add_ptr1131; //@line 724 "lvm.c"
      var $702=$nci; //@line 724 "lvm.c"
      var $u1134=(($702+24)|0); //@line 724 "lvm.c"
      var $l1135=$u1134; //@line 724 "lvm.c"
      var $savedpc1136=(($l1135+4)|0); //@line 724 "lvm.c"
      var $703=HEAP32[(($savedpc1136)>>2)]; //@line 724 "lvm.c"
      var $704=$oci; //@line 724 "lvm.c"
      var $u1137=(($704+24)|0); //@line 724 "lvm.c"
      var $l1138=$u1137; //@line 724 "lvm.c"
      var $savedpc1139=(($l1138+4)|0); //@line 724 "lvm.c"
      HEAP32[(($savedpc1139)>>2)]=$703; //@line 724 "lvm.c"
      var $705=$oci; //@line 724 "lvm.c"
      var $callstatus1140=(($705+18)|0); //@line 724 "lvm.c"
      var $706=HEAP8[($callstatus1140)]; //@line 724 "lvm.c"
      var $conv1141=(($706)&255); //@line 724 "lvm.c"
      var $or1142=$conv1141 | 64; //@line 724 "lvm.c"
      var $conv1143=(($or1142) & 255); //@line 724 "lvm.c"
      HEAP8[($callstatus1140)]=$conv1143; //@line 724 "lvm.c"
      var $707=$oci; //@line 724 "lvm.c"
      var $708=$L_addr; //@line 724 "lvm.c"
      var $ci1144=(($708+16)|0); //@line 724 "lvm.c"
      HEAP32[(($ci1144)>>2)]=$707; //@line 724 "lvm.c"
      $ci=$707; //@line 724 "lvm.c"
      label = 3; break; //@line 724 "lvm.c"
    case 223: 
      label = 290; break; //@line 724 "lvm.c"
    case 224: 
      var $709=$i; //@line 753 "lvm.c"
      var $shr1148=$709 >>> 23; //@line 753 "lvm.c"
      var $and1149=$shr1148 & 511; //@line 753 "lvm.c"
      $b1147=$and1149; //@line 753 "lvm.c"
      var $710=$b1147; //@line 753 "lvm.c"
      var $cmp1150=(($710)|0)!=0; //@line 753 "lvm.c"
      if ($cmp1150) { label = 225; break; } else { label = 226; break; } //@line 753 "lvm.c"
    case 225: 
      var $711=$ra; //@line 753 "lvm.c"
      var $712=$b1147; //@line 753 "lvm.c"
      var $add_ptr1152=(($711+((($712)*(12))&-1))|0); //@line 753 "lvm.c"
      var $add_ptr1153=((($add_ptr1152)-(12))|0); //@line 753 "lvm.c"
      var $713=$L_addr; //@line 753 "lvm.c"
      var $top1154=(($713+8)|0); //@line 753 "lvm.c"
      HEAP32[(($top1154)>>2)]=$add_ptr1153; //@line 753 "lvm.c"
      label = 226; break; //@line 753 "lvm.c"
    case 226: 
      var $714=$cl; //@line 753 "lvm.c"
      var $p1156=(($714+12)|0); //@line 753 "lvm.c"
      var $715=HEAP32[(($p1156)>>2)]; //@line 753 "lvm.c"
      var $sizep1157=(($715+56)|0); //@line 753 "lvm.c"
      var $716=HEAP32[(($sizep1157)>>2)]; //@line 753 "lvm.c"
      var $cmp1158=(($716)|0) > 0; //@line 753 "lvm.c"
      if ($cmp1158) { label = 227; break; } else { label = 228; break; } //@line 753 "lvm.c"
    case 227: 
      var $717=$L_addr; //@line 753 "lvm.c"
      var $718=$base; //@line 753 "lvm.c"
      __Z10luaF_closeP9lua_StateP10lua_TValue($717, $718); //@line 753 "lvm.c"
      label = 228; break; //@line 753 "lvm.c"
    case 228: 
      var $719=$L_addr; //@line 753 "lvm.c"
      var $720=$ra; //@line 753 "lvm.c"
      var $call1161=__Z12luaD_poscallP9lua_StateP10lua_TValue($719, $720); //@line 753 "lvm.c"
      $b1147=$call1161; //@line 753 "lvm.c"
      var $721=$ci; //@line 753 "lvm.c"
      var $callstatus1162=(($721+18)|0); //@line 753 "lvm.c"
      var $722=HEAP8[($callstatus1162)]; //@line 753 "lvm.c"
      var $conv1163=(($722)&255); //@line 753 "lvm.c"
      var $and1164=$conv1163 & 4; //@line 753 "lvm.c"
      var $tobool1165=(($and1164)|0)!=0; //@line 753 "lvm.c"
      if ($tobool1165) { label = 230; break; } else { label = 229; break; } //@line 753 "lvm.c"
    case 229: 
      STACKTOP = __stackBase__;
      return; //@line 753 "lvm.c"
    case 230: 
      var $723=$L_addr; //@line 753 "lvm.c"
      var $ci1168=(($723+16)|0); //@line 753 "lvm.c"
      var $724=HEAP32[(($ci1168)>>2)]; //@line 753 "lvm.c"
      $ci=$724; //@line 753 "lvm.c"
      var $725=$b1147; //@line 753 "lvm.c"
      var $tobool1169=(($725)|0)!=0; //@line 753 "lvm.c"
      if ($tobool1169) { label = 231; break; } else { label = 232; break; } //@line 753 "lvm.c"
    case 231: 
      var $726=$ci; //@line 753 "lvm.c"
      var $top1171=(($726+4)|0); //@line 753 "lvm.c"
      var $727=HEAP32[(($top1171)>>2)]; //@line 753 "lvm.c"
      var $728=$L_addr; //@line 753 "lvm.c"
      var $top1172=(($728+8)|0); //@line 753 "lvm.c"
      HEAP32[(($top1172)>>2)]=$727; //@line 753 "lvm.c"
      label = 232; break; //@line 753 "lvm.c"
    case 232: 
      label = 3; break; //@line 753 "lvm.c"
    case 233: 
      var $729=$ra; //@line 768 "lvm.c"
      var $add_ptr1175=(($729+24)|0); //@line 768 "lvm.c"
      var $value_1176=(($add_ptr1175)|0); //@line 768 "lvm.c"
      var $n1177=$value_1176; //@line 768 "lvm.c"
      var $730=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n1177)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n1177)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 768 "lvm.c"
      $step=$730; //@line 768 "lvm.c"
      var $731=$ra; //@line 768 "lvm.c"
      var $value_1178=(($731)|0); //@line 768 "lvm.c"
      var $n1179=$value_1178; //@line 768 "lvm.c"
      var $732=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n1179)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n1179)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 768 "lvm.c"
      var $733=$step; //@line 768 "lvm.c"
      var $add1180=($732)+($733); //@line 768 "lvm.c"
      $idx=$add1180; //@line 768 "lvm.c"
      var $734=$ra; //@line 768 "lvm.c"
      var $add_ptr1181=(($734+12)|0); //@line 768 "lvm.c"
      var $value_1182=(($add_ptr1181)|0); //@line 768 "lvm.c"
      var $n1183=$value_1182; //@line 768 "lvm.c"
      var $735=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n1183)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n1183)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 768 "lvm.c"
      $limit=$735; //@line 768 "lvm.c"
      var $736=$step; //@line 768 "lvm.c"
      var $cmp1184=0 < $736; //@line 768 "lvm.c"
      if ($cmp1184) { label = 234; break; } else { label = 235; break; } //@line 768 "lvm.c"
    case 234: 
      var $737=$idx; //@line 768 "lvm.c"
      var $738=$limit; //@line 768 "lvm.c"
      var $cmp1186=$737 <= $738; //@line 768 "lvm.c"
      if ($cmp1186) { label = 236; break; } else { label = 237; break; } //@line 768 "lvm.c"
    case 235: 
      var $739=$limit; //@line 768 "lvm.c"
      var $740=$idx; //@line 768 "lvm.c"
      var $cmp1188=$739 <= $740; //@line 768 "lvm.c"
      if ($cmp1188) { label = 236; break; } else { label = 237; break; } //@line 768 "lvm.c"
    case 236: 
      var $741=$i; //@line 768 "lvm.c"
      var $shr1190=$741 >>> 14; //@line 768 "lvm.c"
      var $and1191=$shr1190 & 262143; //@line 768 "lvm.c"
      var $sub1192=((($and1191)-(131071))|0); //@line 768 "lvm.c"
      var $742=$ci; //@line 768 "lvm.c"
      var $u1193=(($742+24)|0); //@line 768 "lvm.c"
      var $l1194=$u1193; //@line 768 "lvm.c"
      var $savedpc1195=(($l1194+4)|0); //@line 768 "lvm.c"
      var $743=HEAP32[(($savedpc1195)>>2)]; //@line 768 "lvm.c"
      var $add_ptr1196=(($743+($sub1192<<2))|0); //@line 768 "lvm.c"
      HEAP32[(($savedpc1195)>>2)]=$add_ptr1196; //@line 768 "lvm.c"
      var $744=$ra; //@line 768 "lvm.c"
      $io1197=$744; //@line 768 "lvm.c"
      var $745=$idx; //@line 768 "lvm.c"
      var $746=$io1197; //@line 768 "lvm.c"
      var $value_1198=(($746)|0); //@line 768 "lvm.c"
      var $n1199=$value_1198; //@line 768 "lvm.c"
      (HEAPF64[(tempDoublePtr)>>3]=$745,HEAP32[(($n1199)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n1199)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); //@line 768 "lvm.c"
      var $747=$io1197; //@line 768 "lvm.c"
      var $tt_1200=(($747+8)|0); //@line 768 "lvm.c"
      HEAP32[(($tt_1200)>>2)]=3; //@line 768 "lvm.c"
      var $748=$ra; //@line 768 "lvm.c"
      var $add_ptr1202=(($748+36)|0); //@line 768 "lvm.c"
      $io1201=$add_ptr1202; //@line 768 "lvm.c"
      var $749=$idx; //@line 768 "lvm.c"
      var $750=$io1201; //@line 768 "lvm.c"
      var $value_1203=(($750)|0); //@line 768 "lvm.c"
      var $n1204=$value_1203; //@line 768 "lvm.c"
      (HEAPF64[(tempDoublePtr)>>3]=$749,HEAP32[(($n1204)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n1204)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); //@line 768 "lvm.c"
      var $751=$io1201; //@line 768 "lvm.c"
      var $tt_1205=(($751+8)|0); //@line 768 "lvm.c"
      HEAP32[(($tt_1205)>>2)]=3; //@line 768 "lvm.c"
      label = 237; break; //@line 768 "lvm.c"
    case 237: 
      label = 290; break; //@line 768 "lvm.c"
    case 238: 
      var $752=$ra; //@line 779 "lvm.c"
      $init=$752; //@line 779 "lvm.c"
      var $753=$ra; //@line 779 "lvm.c"
      var $add_ptr1208=(($753+12)|0); //@line 779 "lvm.c"
      $plimit=$add_ptr1208; //@line 779 "lvm.c"
      var $754=$ra; //@line 779 "lvm.c"
      var $add_ptr1209=(($754+24)|0); //@line 779 "lvm.c"
      $pstep=$add_ptr1209; //@line 779 "lvm.c"
      var $755=$init; //@line 779 "lvm.c"
      var $tt_1210=(($755+8)|0); //@line 779 "lvm.c"
      var $756=HEAP32[(($tt_1210)>>2)]; //@line 779 "lvm.c"
      var $cmp1211=(($756)|0)==3; //@line 779 "lvm.c"
      if ($cmp1211) { label = 241; break; } else { label = 239; break; } //@line 779 "lvm.c"
    case 239: 
      var $757=$init; //@line 779 "lvm.c"
      var $758=$ra; //@line 779 "lvm.c"
      var $call1213=__Z13luaV_tonumberPK10lua_TValuePS_($757, $758); //@line 779 "lvm.c"
      $init=$call1213; //@line 779 "lvm.c"
      var $cmp1214=(($call1213)|0)!=0; //@line 779 "lvm.c"
      if ($cmp1214) { label = 241; break; } else { label = 240; break; } //@line 779 "lvm.c"
    case 240: 
      var $759=$L_addr; //@line 779 "lvm.c"
      __Z13luaG_runerrorP9lua_StatePKcz($759, ((5243412)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 779 "lvm.c"
      throw "Reached an unreachable!" //@line 779 "lvm.c"
    case 241: 
      var $760=$plimit; //@line 779 "lvm.c"
      var $tt_1217=(($760+8)|0); //@line 779 "lvm.c"
      var $761=HEAP32[(($tt_1217)>>2)]; //@line 779 "lvm.c"
      var $cmp1218=(($761)|0)==3; //@line 779 "lvm.c"
      if ($cmp1218) { label = 244; break; } else { label = 242; break; } //@line 779 "lvm.c"
    case 242: 
      var $762=$plimit; //@line 779 "lvm.c"
      var $763=$ra; //@line 779 "lvm.c"
      var $add_ptr1220=(($763+12)|0); //@line 779 "lvm.c"
      var $call1221=__Z13luaV_tonumberPK10lua_TValuePS_($762, $add_ptr1220); //@line 779 "lvm.c"
      $plimit=$call1221; //@line 779 "lvm.c"
      var $cmp1222=(($call1221)|0)!=0; //@line 779 "lvm.c"
      if ($cmp1222) { label = 244; break; } else { label = 243; break; } //@line 779 "lvm.c"
    case 243: 
      var $764=$L_addr; //@line 779 "lvm.c"
      __Z13luaG_runerrorP9lua_StatePKcz($764, ((5243352)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 779 "lvm.c"
      throw "Reached an unreachable!" //@line 779 "lvm.c"
    case 244: 
      var $765=$pstep; //@line 779 "lvm.c"
      var $tt_1225=(($765+8)|0); //@line 779 "lvm.c"
      var $766=HEAP32[(($tt_1225)>>2)]; //@line 779 "lvm.c"
      var $cmp1226=(($766)|0)==3; //@line 779 "lvm.c"
      if ($cmp1226) { label = 247; break; } else { label = 245; break; } //@line 779 "lvm.c"
    case 245: 
      var $767=$pstep; //@line 779 "lvm.c"
      var $768=$ra; //@line 779 "lvm.c"
      var $add_ptr1228=(($768+24)|0); //@line 779 "lvm.c"
      var $call1229=__Z13luaV_tonumberPK10lua_TValuePS_($767, $add_ptr1228); //@line 779 "lvm.c"
      $pstep=$call1229; //@line 779 "lvm.c"
      var $cmp1230=(($call1229)|0)!=0; //@line 779 "lvm.c"
      if ($cmp1230) { label = 247; break; } else { label = 246; break; } //@line 779 "lvm.c"
    case 246: 
      var $769=$L_addr; //@line 779 "lvm.c"
      __Z13luaG_runerrorP9lua_StatePKcz($769, ((5243304)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 779 "lvm.c"
      throw "Reached an unreachable!" //@line 779 "lvm.c"
    case 247: 
      label = 248; break;
    case 248: 
      label = 249; break;
    case 249: 
      var $770=$ra; //@line 779 "lvm.c"
      $io1235=$770; //@line 779 "lvm.c"
      var $771=$ra; //@line 779 "lvm.c"
      var $value_1236=(($771)|0); //@line 779 "lvm.c"
      var $n1237=$value_1236; //@line 779 "lvm.c"
      var $772=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n1237)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n1237)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 779 "lvm.c"
      var $773=$pstep; //@line 779 "lvm.c"
      var $value_1238=(($773)|0); //@line 779 "lvm.c"
      var $n1239=$value_1238; //@line 779 "lvm.c"
      var $774=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n1239)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n1239)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]); //@line 779 "lvm.c"
      var $sub1240=($772)-($774); //@line 779 "lvm.c"
      var $775=$io1235; //@line 779 "lvm.c"
      var $value_1241=(($775)|0); //@line 779 "lvm.c"
      var $n1242=$value_1241; //@line 779 "lvm.c"
      (HEAPF64[(tempDoublePtr)>>3]=$sub1240,HEAP32[(($n1242)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n1242)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); //@line 779 "lvm.c"
      var $776=$io1235; //@line 779 "lvm.c"
      var $tt_1243=(($776+8)|0); //@line 779 "lvm.c"
      HEAP32[(($tt_1243)>>2)]=3; //@line 779 "lvm.c"
      var $777=$i; //@line 779 "lvm.c"
      var $shr1244=$777 >>> 14; //@line 779 "lvm.c"
      var $and1245=$shr1244 & 262143; //@line 779 "lvm.c"
      var $sub1246=((($and1245)-(131071))|0); //@line 779 "lvm.c"
      var $778=$ci; //@line 779 "lvm.c"
      var $u1247=(($778+24)|0); //@line 779 "lvm.c"
      var $l1248=$u1247; //@line 779 "lvm.c"
      var $savedpc1249=(($l1248+4)|0); //@line 779 "lvm.c"
      var $779=HEAP32[(($savedpc1249)>>2)]; //@line 779 "lvm.c"
      var $add_ptr1250=(($779+($sub1246<<2))|0); //@line 779 "lvm.c"
      HEAP32[(($savedpc1249)>>2)]=$add_ptr1250; //@line 779 "lvm.c"
      label = 290; break; //@line 779 "lvm.c"
    case 250: 
      var $780=$ra; //@line 792 "lvm.c"
      var $add_ptr1252=(($780+36)|0); //@line 792 "lvm.c"
      $cb=$add_ptr1252; //@line 792 "lvm.c"
      var $781=$ra; //@line 792 "lvm.c"
      var $add_ptr1254=(($781+24)|0); //@line 792 "lvm.c"
      $io21253=$add_ptr1254; //@line 792 "lvm.c"
      var $782=$cb; //@line 792 "lvm.c"
      var $add_ptr1256=(($782+24)|0); //@line 792 "lvm.c"
      $io11255=$add_ptr1256; //@line 792 "lvm.c"
      var $783=$io11255; //@line 792 "lvm.c"
      var $value_1257=(($783)|0); //@line 792 "lvm.c"
      var $784=$io21253; //@line 792 "lvm.c"
      var $value_1258=(($784)|0); //@line 792 "lvm.c"
      var $785=$value_1257; //@line 792 "lvm.c"
      var $786=$value_1258; //@line 792 "lvm.c"
      assert(8 % 1 === 0);HEAP32[(($785)>>2)]=HEAP32[(($786)>>2)];HEAP32[((($785)+(4))>>2)]=HEAP32[((($786)+(4))>>2)]; //@line 792 "lvm.c"
      var $787=$io21253; //@line 792 "lvm.c"
      var $tt_1259=(($787+8)|0); //@line 792 "lvm.c"
      var $788=HEAP32[(($tt_1259)>>2)]; //@line 792 "lvm.c"
      var $789=$io11255; //@line 792 "lvm.c"
      var $tt_1260=(($789+8)|0); //@line 792 "lvm.c"
      HEAP32[(($tt_1260)>>2)]=$788; //@line 792 "lvm.c"
      var $790=$ra; //@line 792 "lvm.c"
      var $add_ptr1262=(($790+12)|0); //@line 792 "lvm.c"
      $io21261=$add_ptr1262; //@line 792 "lvm.c"
      var $791=$cb; //@line 792 "lvm.c"
      var $add_ptr1264=(($791+12)|0); //@line 792 "lvm.c"
      $io11263=$add_ptr1264; //@line 792 "lvm.c"
      var $792=$io11263; //@line 792 "lvm.c"
      var $value_1265=(($792)|0); //@line 792 "lvm.c"
      var $793=$io21261; //@line 792 "lvm.c"
      var $value_1266=(($793)|0); //@line 792 "lvm.c"
      var $794=$value_1265; //@line 792 "lvm.c"
      var $795=$value_1266; //@line 792 "lvm.c"
      assert(8 % 1 === 0);HEAP32[(($794)>>2)]=HEAP32[(($795)>>2)];HEAP32[((($794)+(4))>>2)]=HEAP32[((($795)+(4))>>2)]; //@line 792 "lvm.c"
      var $796=$io21261; //@line 792 "lvm.c"
      var $tt_1267=(($796+8)|0); //@line 792 "lvm.c"
      var $797=HEAP32[(($tt_1267)>>2)]; //@line 792 "lvm.c"
      var $798=$io11263; //@line 792 "lvm.c"
      var $tt_1268=(($798+8)|0); //@line 792 "lvm.c"
      HEAP32[(($tt_1268)>>2)]=$797; //@line 792 "lvm.c"
      var $799=$ra; //@line 792 "lvm.c"
      $io21269=$799; //@line 792 "lvm.c"
      var $800=$cb; //@line 792 "lvm.c"
      $io11270=$800; //@line 792 "lvm.c"
      var $801=$io11270; //@line 792 "lvm.c"
      var $value_1271=(($801)|0); //@line 792 "lvm.c"
      var $802=$io21269; //@line 792 "lvm.c"
      var $value_1272=(($802)|0); //@line 792 "lvm.c"
      var $803=$value_1271; //@line 792 "lvm.c"
      var $804=$value_1272; //@line 792 "lvm.c"
      assert(8 % 1 === 0);HEAP32[(($803)>>2)]=HEAP32[(($804)>>2)];HEAP32[((($803)+(4))>>2)]=HEAP32[((($804)+(4))>>2)]; //@line 792 "lvm.c"
      var $805=$io21269; //@line 792 "lvm.c"
      var $tt_1273=(($805+8)|0); //@line 792 "lvm.c"
      var $806=HEAP32[(($tt_1273)>>2)]; //@line 792 "lvm.c"
      var $807=$io11270; //@line 792 "lvm.c"
      var $tt_1274=(($807+8)|0); //@line 792 "lvm.c"
      HEAP32[(($tt_1274)>>2)]=$806; //@line 792 "lvm.c"
      var $808=$cb; //@line 792 "lvm.c"
      var $add_ptr1275=(($808+36)|0); //@line 792 "lvm.c"
      var $809=$L_addr; //@line 792 "lvm.c"
      var $top1276=(($809+8)|0); //@line 792 "lvm.c"
      HEAP32[(($top1276)>>2)]=$add_ptr1275; //@line 792 "lvm.c"
      var $810=$L_addr; //@line 792 "lvm.c"
      var $811=$cb; //@line 792 "lvm.c"
      var $812=$i; //@line 792 "lvm.c"
      var $shr1277=$812 >>> 14; //@line 792 "lvm.c"
      var $and1278=$shr1277 & 511; //@line 792 "lvm.c"
      __Z9luaD_callP9lua_StateP10lua_TValueii($810, $811, $and1278, 1); //@line 792 "lvm.c"
      var $813=$ci; //@line 792 "lvm.c"
      var $u1279=(($813+24)|0); //@line 792 "lvm.c"
      var $l1280=$u1279; //@line 792 "lvm.c"
      var $base1281=(($l1280)|0); //@line 792 "lvm.c"
      var $814=HEAP32[(($base1281)>>2)]; //@line 792 "lvm.c"
      $base=$814; //@line 792 "lvm.c"
      var $815=$ci; //@line 792 "lvm.c"
      var $top1282=(($815+4)|0); //@line 792 "lvm.c"
      var $816=HEAP32[(($top1282)>>2)]; //@line 792 "lvm.c"
      var $817=$L_addr; //@line 792 "lvm.c"
      var $top1283=(($817+8)|0); //@line 792 "lvm.c"
      HEAP32[(($top1283)>>2)]=$816; //@line 792 "lvm.c"
      var $818=$ci; //@line 792 "lvm.c"
      var $u1284=(($818+24)|0); //@line 792 "lvm.c"
      var $l1285=$u1284; //@line 792 "lvm.c"
      var $savedpc1286=(($l1285+4)|0); //@line 792 "lvm.c"
      var $819=HEAP32[(($savedpc1286)>>2)]; //@line 792 "lvm.c"
      var $incdec_ptr1287=(($819+4)|0); //@line 792 "lvm.c"
      HEAP32[(($savedpc1286)>>2)]=$incdec_ptr1287; //@line 792 "lvm.c"
      var $820=HEAP32[(($819)>>2)]; //@line 792 "lvm.c"
      $i=$820; //@line 792 "lvm.c"
      var $821=$base; //@line 792 "lvm.c"
      var $822=$i; //@line 792 "lvm.c"
      var $shr1288=$822 >>> 6; //@line 792 "lvm.c"
      var $and1289=$shr1288 & 255; //@line 792 "lvm.c"
      var $add_ptr1290=(($821+((($and1289)*(12))&-1))|0); //@line 792 "lvm.c"
      $ra=$add_ptr1290; //@line 792 "lvm.c"
      label = 252; break; //@line 792 "lvm.c"
    case 251: 
      label = 252; break; //@line 805 "lvm.c"
    case 252: 
      var $823=$ra; //@line 805 "lvm.c"
      var $add_ptr1292=(($823+12)|0); //@line 805 "lvm.c"
      var $tt_1293=(($add_ptr1292+8)|0); //@line 805 "lvm.c"
      var $824=HEAP32[(($tt_1293)>>2)]; //@line 805 "lvm.c"
      var $cmp1294=(($824)|0)==0; //@line 805 "lvm.c"
      if ($cmp1294) { label = 254; break; } else { label = 253; break; } //@line 805 "lvm.c"
    case 253: 
      var $825=$ra; //@line 805 "lvm.c"
      var $add_ptr1297=(($825+12)|0); //@line 805 "lvm.c"
      $io21296=$add_ptr1297; //@line 805 "lvm.c"
      var $826=$ra; //@line 805 "lvm.c"
      $io11298=$826; //@line 805 "lvm.c"
      var $827=$io11298; //@line 805 "lvm.c"
      var $value_1299=(($827)|0); //@line 805 "lvm.c"
      var $828=$io21296; //@line 805 "lvm.c"
      var $value_1300=(($828)|0); //@line 805 "lvm.c"
      var $829=$value_1299; //@line 805 "lvm.c"
      var $830=$value_1300; //@line 805 "lvm.c"
      assert(8 % 1 === 0);HEAP32[(($829)>>2)]=HEAP32[(($830)>>2)];HEAP32[((($829)+(4))>>2)]=HEAP32[((($830)+(4))>>2)]; //@line 805 "lvm.c"
      var $831=$io21296; //@line 805 "lvm.c"
      var $tt_1301=(($831+8)|0); //@line 805 "lvm.c"
      var $832=HEAP32[(($tt_1301)>>2)]; //@line 805 "lvm.c"
      var $833=$io11298; //@line 805 "lvm.c"
      var $tt_1302=(($833+8)|0); //@line 805 "lvm.c"
      HEAP32[(($tt_1302)>>2)]=$832; //@line 805 "lvm.c"
      var $834=$i; //@line 805 "lvm.c"
      var $shr1303=$834 >>> 14; //@line 805 "lvm.c"
      var $and1304=$shr1303 & 262143; //@line 805 "lvm.c"
      var $sub1305=((($and1304)-(131071))|0); //@line 805 "lvm.c"
      var $835=$ci; //@line 805 "lvm.c"
      var $u1306=(($835+24)|0); //@line 805 "lvm.c"
      var $l1307=$u1306; //@line 805 "lvm.c"
      var $savedpc1308=(($l1307+4)|0); //@line 805 "lvm.c"
      var $836=HEAP32[(($savedpc1308)>>2)]; //@line 805 "lvm.c"
      var $add_ptr1309=(($836+($sub1305<<2))|0); //@line 805 "lvm.c"
      HEAP32[(($savedpc1308)>>2)]=$add_ptr1309; //@line 805 "lvm.c"
      label = 254; break; //@line 805 "lvm.c"
    case 254: 
      label = 290; break; //@line 805 "lvm.c"
    case 255: 
      var $837=$i; //@line 812 "lvm.c"
      var $shr1313=$837 >>> 23; //@line 812 "lvm.c"
      var $and1314=$shr1313 & 511; //@line 812 "lvm.c"
      $n1312=$and1314; //@line 812 "lvm.c"
      var $838=$i; //@line 812 "lvm.c"
      var $shr1316=$838 >>> 14; //@line 812 "lvm.c"
      var $and1317=$shr1316 & 511; //@line 812 "lvm.c"
      $c1315=$and1317; //@line 812 "lvm.c"
      var $839=$n1312; //@line 812 "lvm.c"
      var $cmp1318=(($839)|0)==0; //@line 812 "lvm.c"
      if ($cmp1318) { label = 256; break; } else { label = 257; break; } //@line 812 "lvm.c"
    case 256: 
      var $840=$L_addr; //@line 812 "lvm.c"
      var $top1320=(($840+8)|0); //@line 812 "lvm.c"
      var $841=HEAP32[(($top1320)>>2)]; //@line 812 "lvm.c"
      var $842=$ra; //@line 812 "lvm.c"
      var $sub_ptr_lhs_cast1321=$841; //@line 812 "lvm.c"
      var $sub_ptr_rhs_cast1322=$842; //@line 812 "lvm.c"
      var $sub_ptr_sub1323=((($sub_ptr_lhs_cast1321)-($sub_ptr_rhs_cast1322))|0); //@line 812 "lvm.c"
      var $sub_ptr_div1324=((((($sub_ptr_sub1323)|0))/(12))&-1); //@line 812 "lvm.c"
      var $sub1325=((($sub_ptr_div1324)-(1))|0); //@line 812 "lvm.c"
      $n1312=$sub1325; //@line 812 "lvm.c"
      label = 257; break; //@line 812 "lvm.c"
    case 257: 
      var $843=$c1315; //@line 812 "lvm.c"
      var $cmp1327=(($843)|0)==0; //@line 812 "lvm.c"
      if ($cmp1327) { label = 258; break; } else { label = 259; break; } //@line 812 "lvm.c"
    case 258: 
      var $844=$ci; //@line 812 "lvm.c"
      var $u1329=(($844+24)|0); //@line 812 "lvm.c"
      var $l1330=$u1329; //@line 812 "lvm.c"
      var $savedpc1331=(($l1330+4)|0); //@line 812 "lvm.c"
      var $845=HEAP32[(($savedpc1331)>>2)]; //@line 812 "lvm.c"
      var $incdec_ptr1332=(($845+4)|0); //@line 812 "lvm.c"
      HEAP32[(($savedpc1331)>>2)]=$incdec_ptr1332; //@line 812 "lvm.c"
      var $846=HEAP32[(($845)>>2)]; //@line 812 "lvm.c"
      var $shr1333=$846 >>> 6; //@line 812 "lvm.c"
      var $and1334=$shr1333 & 67108863; //@line 812 "lvm.c"
      $c1315=$and1334; //@line 812 "lvm.c"
      label = 259; break; //@line 812 "lvm.c"
    case 259: 
      var $847=$ra; //@line 812 "lvm.c"
      var $value_1336=(($847)|0); //@line 812 "lvm.c"
      var $gc1337=$value_1336; //@line 812 "lvm.c"
      var $848=HEAP32[(($gc1337)>>2)]; //@line 812 "lvm.c"
      var $h1338=$848; //@line 812 "lvm.c"
      $h=$h1338; //@line 812 "lvm.c"
      var $849=$c1315; //@line 812 "lvm.c"
      var $sub1339=((($849)-(1))|0); //@line 812 "lvm.c"
      var $mul1340=((($sub1339)*(50))&-1); //@line 812 "lvm.c"
      var $850=$n1312; //@line 812 "lvm.c"
      var $add1341=((($mul1340)+($850))|0); //@line 812 "lvm.c"
      $last=$add1341; //@line 812 "lvm.c"
      var $851=$last; //@line 812 "lvm.c"
      var $852=$h; //@line 812 "lvm.c"
      var $sizearray=(($852+28)|0); //@line 812 "lvm.c"
      var $853=HEAP32[(($sizearray)>>2)]; //@line 812 "lvm.c"
      var $cmp1342=(($851)|0) > (($853)|0); //@line 812 "lvm.c"
      if ($cmp1342) { label = 260; break; } else { label = 261; break; } //@line 812 "lvm.c"
    case 260: 
      var $854=$L_addr; //@line 812 "lvm.c"
      var $855=$h; //@line 812 "lvm.c"
      var $856=$last; //@line 812 "lvm.c"
      __Z16luaH_resizearrayP9lua_StateP5Tablei($854, $855, $856); //@line 812 "lvm.c"
      label = 261; break; //@line 812 "lvm.c"
    case 261: 
      label = 262; break; //@line 812 "lvm.c"
    case 262: 
      var $857=$n1312; //@line 812 "lvm.c"
      var $cmp1346=(($857)|0) > 0; //@line 812 "lvm.c"
      if ($cmp1346) { label = 263; break; } else { label = 269; break; } //@line 812 "lvm.c"
    case 263: 
      var $858=$ra; //@line 812 "lvm.c"
      var $859=$n1312; //@line 812 "lvm.c"
      var $add_ptr1348=(($858+((($859)*(12))&-1))|0); //@line 812 "lvm.c"
      $val=$add_ptr1348; //@line 812 "lvm.c"
      var $860=$L_addr; //@line 812 "lvm.c"
      var $861=$h; //@line 812 "lvm.c"
      var $862=$last; //@line 812 "lvm.c"
      var $dec1349=((($862)-(1))|0); //@line 812 "lvm.c"
      $last=$dec1349; //@line 812 "lvm.c"
      var $863=$val; //@line 812 "lvm.c"
      __Z11luaH_setintP9lua_StateP5TableiP10lua_TValue($860, $861, $862, $863); //@line 812 "lvm.c"
      var $864=$val; //@line 812 "lvm.c"
      var $tt_1350=(($864+8)|0); //@line 812 "lvm.c"
      var $865=HEAP32[(($tt_1350)>>2)]; //@line 812 "lvm.c"
      var $and1351=$865 & 64; //@line 812 "lvm.c"
      var $tobool1352=(($and1351)|0)!=0; //@line 812 "lvm.c"
      if ($tobool1352) { label = 264; break; } else { label = 267; break; } //@line 812 "lvm.c"
    case 264: 
      var $866=$val; //@line 812 "lvm.c"
      var $value_1354=(($866)|0); //@line 812 "lvm.c"
      var $gc1355=$value_1354; //@line 812 "lvm.c"
      var $867=HEAP32[(($gc1355)>>2)]; //@line 812 "lvm.c"
      var $gch1356=$867; //@line 812 "lvm.c"
      var $marked1357=(($gch1356+5)|0); //@line 812 "lvm.c"
      var $868=HEAP8[($marked1357)]; //@line 812 "lvm.c"
      var $conv1358=(($868)&255); //@line 812 "lvm.c"
      var $and1359=$conv1358 & 3; //@line 812 "lvm.c"
      var $tobool1360=(($and1359)|0)!=0; //@line 812 "lvm.c"
      if ($tobool1360) { label = 265; break; } else { label = 267; break; } //@line 812 "lvm.c"
    case 265: 
      var $869=$h; //@line 812 "lvm.c"
      var $870=$869; //@line 812 "lvm.c"
      var $gch1362=$870; //@line 812 "lvm.c"
      var $marked1363=(($gch1362+5)|0); //@line 812 "lvm.c"
      var $871=HEAP8[($marked1363)]; //@line 812 "lvm.c"
      var $conv1364=(($871)&255); //@line 812 "lvm.c"
      var $and1365=$conv1364 & 4; //@line 812 "lvm.c"
      var $tobool1366=(($and1365)|0)!=0; //@line 812 "lvm.c"
      if ($tobool1366) { label = 266; break; } else { label = 267; break; } //@line 812 "lvm.c"
    case 266: 
      var $872=$L_addr; //@line 812 "lvm.c"
      var $873=$h; //@line 812 "lvm.c"
      var $874=$873; //@line 812 "lvm.c"
      __Z17luaC_barrierback_P9lua_StateP8GCObject($872, $874); //@line 812 "lvm.c"
      label = 267; break; //@line 812 "lvm.c"
    case 267: 
      label = 268; break; //@line 812 "lvm.c"
    case 268: 
      var $875=$n1312; //@line 812 "lvm.c"
      var $dec1370=((($875)-(1))|0); //@line 812 "lvm.c"
      $n1312=$dec1370; //@line 812 "lvm.c"
      label = 262; break; //@line 812 "lvm.c"
    case 269: 
      var $876=$ci; //@line 812 "lvm.c"
      var $top1372=(($876+4)|0); //@line 812 "lvm.c"
      var $877=HEAP32[(($top1372)>>2)]; //@line 812 "lvm.c"
      var $878=$L_addr; //@line 812 "lvm.c"
      var $top1373=(($878+8)|0); //@line 812 "lvm.c"
      HEAP32[(($top1373)>>2)]=$877; //@line 812 "lvm.c"
      label = 290; break; //@line 812 "lvm.c"
    case 270: 
      var $879=$i; //@line 834 "lvm.c"
      var $shr1376=$879 >>> 14; //@line 834 "lvm.c"
      var $and1377=$shr1376 & 262143; //@line 834 "lvm.c"
      var $880=$cl; //@line 834 "lvm.c"
      var $p1378=(($880+12)|0); //@line 834 "lvm.c"
      var $881=HEAP32[(($p1378)>>2)]; //@line 834 "lvm.c"
      var $p1379=(($881+16)|0); //@line 834 "lvm.c"
      var $882=HEAP32[(($p1379)>>2)]; //@line 834 "lvm.c"
      var $arrayidx1380=(($882+($and1377<<2))|0); //@line 834 "lvm.c"
      var $883=HEAP32[(($arrayidx1380)>>2)]; //@line 834 "lvm.c"
      $p1375=$883; //@line 834 "lvm.c"
      var $884=$p1375; //@line 834 "lvm.c"
      var $885=$cl; //@line 834 "lvm.c"
      var $upvals1381=(($885+16)|0); //@line 834 "lvm.c"
      var $arraydecay=(($upvals1381)|0); //@line 834 "lvm.c"
      var $886=$base; //@line 834 "lvm.c"
      var $call1382=__ZL9getcachedP5ProtoPP5UpValP10lua_TValue($884, $arraydecay, $886); //@line 834 "lvm.c"
      $ncl=$call1382; //@line 834 "lvm.c"
      var $887=$ncl; //@line 834 "lvm.c"
      var $cmp1383=(($887)|0)==0; //@line 834 "lvm.c"
      if ($cmp1383) { label = 271; break; } else { label = 272; break; } //@line 834 "lvm.c"
    case 271: 
      var $888=$L_addr; //@line 834 "lvm.c"
      var $889=$p1375; //@line 834 "lvm.c"
      var $890=$cl; //@line 834 "lvm.c"
      var $upvals1385=(($890+16)|0); //@line 834 "lvm.c"
      var $arraydecay1386=(($upvals1385)|0); //@line 834 "lvm.c"
      var $891=$base; //@line 834 "lvm.c"
      var $892=$ra; //@line 834 "lvm.c"
      __ZL11pushclosureP9lua_StateP5ProtoPP5UpValP10lua_TValueS7_($888, $889, $arraydecay1386, $891, $892); //@line 834 "lvm.c"
      label = 273; break; //@line 834 "lvm.c"
    case 272: 
      var $893=$ra; //@line 834 "lvm.c"
      $io1388=$893; //@line 834 "lvm.c"
      var $894=$ncl; //@line 834 "lvm.c"
      var $895=$894; //@line 834 "lvm.c"
      var $896=$io1388; //@line 834 "lvm.c"
      var $value_1389=(($896)|0); //@line 834 "lvm.c"
      var $gc1390=$value_1389; //@line 834 "lvm.c"
      HEAP32[(($gc1390)>>2)]=$895; //@line 834 "lvm.c"
      var $897=$io1388; //@line 834 "lvm.c"
      var $tt_1391=(($897+8)|0); //@line 834 "lvm.c"
      HEAP32[(($tt_1391)>>2)]=70; //@line 834 "lvm.c"
      label = 273; break;
    case 273: 
      var $898=$L_addr; //@line 834 "lvm.c"
      var $l_G1393=(($898+12)|0); //@line 834 "lvm.c"
      var $899=HEAP32[(($l_G1393)>>2)]; //@line 834 "lvm.c"
      var $GCdebt1394=(($899+12)|0); //@line 834 "lvm.c"
      var $900=HEAP32[(($GCdebt1394)>>2)]; //@line 834 "lvm.c"
      var $cmp1395=(($900)|0) > 0; //@line 834 "lvm.c"
      if ($cmp1395) { label = 274; break; } else { label = 275; break; } //@line 834 "lvm.c"
    case 274: 
      var $901=$ra; //@line 834 "lvm.c"
      var $add_ptr1397=(($901+12)|0); //@line 834 "lvm.c"
      var $902=$L_addr; //@line 834 "lvm.c"
      var $top1398=(($902+8)|0); //@line 834 "lvm.c"
      HEAP32[(($top1398)>>2)]=$add_ptr1397; //@line 834 "lvm.c"
      var $903=$L_addr; //@line 834 "lvm.c"
      __Z9luaC_stepP9lua_State($903); //@line 834 "lvm.c"
      var $904=$ci; //@line 834 "lvm.c"
      var $top1399=(($904+4)|0); //@line 834 "lvm.c"
      var $905=HEAP32[(($top1399)>>2)]; //@line 834 "lvm.c"
      var $906=$L_addr; //@line 834 "lvm.c"
      var $top1400=(($906+8)|0); //@line 834 "lvm.c"
      HEAP32[(($top1400)>>2)]=$905; //@line 834 "lvm.c"
      label = 275; break; //@line 834 "lvm.c"
    case 275: 
      var $907=$ci; //@line 834 "lvm.c"
      var $u1402=(($907+24)|0); //@line 834 "lvm.c"
      var $l1403=$u1402; //@line 834 "lvm.c"
      var $base1404=(($l1403)|0); //@line 834 "lvm.c"
      var $908=HEAP32[(($base1404)>>2)]; //@line 834 "lvm.c"
      $base=$908; //@line 834 "lvm.c"
      label = 290; break; //@line 834 "lvm.c"
    case 276: 
      var $909=$i; //@line 843 "lvm.c"
      var $shr1407=$909 >>> 23; //@line 843 "lvm.c"
      var $and1408=$shr1407 & 511; //@line 843 "lvm.c"
      var $sub1409=((($and1408)-(1))|0); //@line 843 "lvm.c"
      $b1406=$sub1409; //@line 843 "lvm.c"
      var $910=$base; //@line 843 "lvm.c"
      var $911=$ci; //@line 843 "lvm.c"
      var $func1411=(($911)|0); //@line 843 "lvm.c"
      var $912=HEAP32[(($func1411)>>2)]; //@line 843 "lvm.c"
      var $sub_ptr_lhs_cast1412=$910; //@line 843 "lvm.c"
      var $sub_ptr_rhs_cast1413=$912; //@line 843 "lvm.c"
      var $sub_ptr_sub1414=((($sub_ptr_lhs_cast1412)-($sub_ptr_rhs_cast1413))|0); //@line 843 "lvm.c"
      var $sub_ptr_div1415=((((($sub_ptr_sub1414)|0))/(12))&-1); //@line 843 "lvm.c"
      var $913=$cl; //@line 843 "lvm.c"
      var $p1416=(($913+12)|0); //@line 843 "lvm.c"
      var $914=HEAP32[(($p1416)>>2)]; //@line 843 "lvm.c"
      var $numparams1417=(($914+76)|0); //@line 843 "lvm.c"
      var $915=HEAP8[($numparams1417)]; //@line 843 "lvm.c"
      var $conv1418=(($915)&255); //@line 843 "lvm.c"
      var $sub1419=((($sub_ptr_div1415)-($conv1418))|0); //@line 843 "lvm.c"
      var $sub1420=((($sub1419)-(1))|0); //@line 843 "lvm.c"
      $n1410=$sub1420; //@line 843 "lvm.c"
      var $916=$b1406; //@line 843 "lvm.c"
      var $cmp1421=(($916)|0) < 0; //@line 843 "lvm.c"
      if ($cmp1421) { label = 277; break; } else { label = 281; break; } //@line 843 "lvm.c"
    case 277: 
      var $917=$n1410; //@line 843 "lvm.c"
      $b1406=$917; //@line 843 "lvm.c"
      var $918=$L_addr; //@line 843 "lvm.c"
      var $stack_last=(($918+24)|0); //@line 843 "lvm.c"
      var $919=HEAP32[(($stack_last)>>2)]; //@line 843 "lvm.c"
      var $920=$L_addr; //@line 843 "lvm.c"
      var $top1423=(($920+8)|0); //@line 843 "lvm.c"
      var $921=HEAP32[(($top1423)>>2)]; //@line 843 "lvm.c"
      var $sub_ptr_lhs_cast1424=$919; //@line 843 "lvm.c"
      var $sub_ptr_rhs_cast1425=$921; //@line 843 "lvm.c"
      var $sub_ptr_sub1426=((($sub_ptr_lhs_cast1424)-($sub_ptr_rhs_cast1425))|0); //@line 843 "lvm.c"
      var $sub_ptr_div1427=((((($sub_ptr_sub1426)|0))/(12))&-1); //@line 843 "lvm.c"
      var $922=$n1410; //@line 843 "lvm.c"
      var $cmp1428=(($sub_ptr_div1427)|0) <= (($922)|0); //@line 843 "lvm.c"
      if ($cmp1428) { label = 278; break; } else { label = 279; break; } //@line 843 "lvm.c"
    case 278: 
      var $923=$L_addr; //@line 843 "lvm.c"
      var $924=$n1410; //@line 843 "lvm.c"
      __Z14luaD_growstackP9lua_Statei($923, $924); //@line 843 "lvm.c"
      label = 280; break; //@line 843 "lvm.c"
    case 279: 
      label = 280; break;
    case 280: 
      var $925=$ci; //@line 843 "lvm.c"
      var $u1432=(($925+24)|0); //@line 843 "lvm.c"
      var $l1433=$u1432; //@line 843 "lvm.c"
      var $base1434=(($l1433)|0); //@line 843 "lvm.c"
      var $926=HEAP32[(($base1434)>>2)]; //@line 843 "lvm.c"
      $base=$926; //@line 843 "lvm.c"
      var $927=$base; //@line 843 "lvm.c"
      var $928=$i; //@line 843 "lvm.c"
      var $shr1435=$928 >>> 6; //@line 843 "lvm.c"
      var $and1436=$shr1435 & 255; //@line 843 "lvm.c"
      var $add_ptr1437=(($927+((($and1436)*(12))&-1))|0); //@line 843 "lvm.c"
      $ra=$add_ptr1437; //@line 843 "lvm.c"
      var $929=$ra; //@line 843 "lvm.c"
      var $930=$n1410; //@line 843 "lvm.c"
      var $add_ptr1438=(($929+((($930)*(12))&-1))|0); //@line 843 "lvm.c"
      var $931=$L_addr; //@line 843 "lvm.c"
      var $top1439=(($931+8)|0); //@line 843 "lvm.c"
      HEAP32[(($top1439)>>2)]=$add_ptr1438; //@line 843 "lvm.c"
      label = 281; break; //@line 843 "lvm.c"
    case 281: 
      $j=0; //@line 843 "lvm.c"
      label = 282; break; //@line 843 "lvm.c"
    case 282: 
      var $932=$j; //@line 843 "lvm.c"
      var $933=$b1406; //@line 843 "lvm.c"
      var $cmp1442=(($932)|0) < (($933)|0); //@line 843 "lvm.c"
      if ($cmp1442) { label = 283; break; } else { label = 288; break; } //@line 843 "lvm.c"
    case 283: 
      var $934=$j; //@line 843 "lvm.c"
      var $935=$n1410; //@line 843 "lvm.c"
      var $cmp1444=(($934)|0) < (($935)|0); //@line 843 "lvm.c"
      if ($cmp1444) { label = 284; break; } else { label = 285; break; } //@line 843 "lvm.c"
    case 284: 
      var $936=$base; //@line 843 "lvm.c"
      var $937=$n1410; //@line 843 "lvm.c"
      var $idx_neg=(((-$937))|0); //@line 843 "lvm.c"
      var $add_ptr1447=(($936+((($idx_neg)*(12))&-1))|0); //@line 843 "lvm.c"
      var $938=$j; //@line 843 "lvm.c"
      var $add_ptr1448=(($add_ptr1447+((($938)*(12))&-1))|0); //@line 843 "lvm.c"
      $io21446=$add_ptr1448; //@line 843 "lvm.c"
      var $939=$ra; //@line 843 "lvm.c"
      var $940=$j; //@line 843 "lvm.c"
      var $add_ptr1450=(($939+((($940)*(12))&-1))|0); //@line 843 "lvm.c"
      $io11449=$add_ptr1450; //@line 843 "lvm.c"
      var $941=$io11449; //@line 843 "lvm.c"
      var $value_1451=(($941)|0); //@line 843 "lvm.c"
      var $942=$io21446; //@line 843 "lvm.c"
      var $value_1452=(($942)|0); //@line 843 "lvm.c"
      var $943=$value_1451; //@line 843 "lvm.c"
      var $944=$value_1452; //@line 843 "lvm.c"
      assert(8 % 1 === 0);HEAP32[(($943)>>2)]=HEAP32[(($944)>>2)];HEAP32[((($943)+(4))>>2)]=HEAP32[((($944)+(4))>>2)]; //@line 843 "lvm.c"
      var $945=$io21446; //@line 843 "lvm.c"
      var $tt_1453=(($945+8)|0); //@line 843 "lvm.c"
      var $946=HEAP32[(($tt_1453)>>2)]; //@line 843 "lvm.c"
      var $947=$io11449; //@line 843 "lvm.c"
      var $tt_1454=(($947+8)|0); //@line 843 "lvm.c"
      HEAP32[(($tt_1454)>>2)]=$946; //@line 843 "lvm.c"
      label = 286; break; //@line 843 "lvm.c"
    case 285: 
      var $948=$ra; //@line 843 "lvm.c"
      var $949=$j; //@line 843 "lvm.c"
      var $add_ptr1456=(($948+((($949)*(12))&-1))|0); //@line 843 "lvm.c"
      var $tt_1457=(($add_ptr1456+8)|0); //@line 843 "lvm.c"
      HEAP32[(($tt_1457)>>2)]=0; //@line 843 "lvm.c"
      label = 286; break;
    case 286: 
      label = 287; break; //@line 843 "lvm.c"
    case 287: 
      var $950=$j; //@line 843 "lvm.c"
      var $inc1460=((($950)+(1))|0); //@line 843 "lvm.c"
      $j=$inc1460; //@line 843 "lvm.c"
      label = 282; break; //@line 843 "lvm.c"
    case 288: 
      label = 290; break; //@line 843 "lvm.c"
    case 289: 
      label = 290; break; //@line 862 "lvm.c"
    case 290: 
      label = 4; break; //@line 866 "lvm.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z12luaV_executeP9lua_State["X"]=1;

function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
  var label = 0;


  var $this_addr;
  $this_addr=$this;
  var $this1=$this_addr;

  return;
}


function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
  var label = 0;


  var $this_addr;
  $this_addr=$this;
  var $this1=$this_addr;

  return;
}


function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($x, $y, $0) {
  var label = 0;


  var $x_addr;
  var $y_addr;
  var $_addr;
  $x_addr=$x;
  $y_addr=$y;
  var $frombool=(($0)&1);
  $_addr=$frombool;
  var $1=$x_addr;
  var $2=$y_addr;
  var $cmp=(($1)|0)==(($2)|0);

  return $cmp;
}


function __ZL9getcachedP5ProtoPP5UpValP10lua_TValue($p, $encup, $base) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p_addr;
      var $encup_addr;
      var $base_addr;
      var $c;
      var $nup;
      var $uv;
      var $i;
      var $v;
      $p_addr=$p;
      $encup_addr=$encup;
      $base_addr=$base;
      var $0=$p_addr; //@line 381 "lvm.c"
      var $cache=(($0+32)|0); //@line 381 "lvm.c"
      var $1=HEAP32[(($cache)>>2)]; //@line 381 "lvm.c"
      $c=$1; //@line 381 "lvm.c"
      var $2=$c; //@line 382 "lvm.c"
      var $cmp=(($2)|0)!=0; //@line 382 "lvm.c"
      if ($cmp) { label = 3; break; } else { label = 13; break; } //@line 382 "lvm.c"
    case 3: 
      var $3=$p_addr; //@line 383 "lvm.c"
      var $sizeupvalues=(($3+40)|0); //@line 383 "lvm.c"
      var $4=HEAP32[(($sizeupvalues)>>2)]; //@line 383 "lvm.c"
      $nup=$4; //@line 383 "lvm.c"
      var $5=$p_addr; //@line 384 "lvm.c"
      var $upvalues=(($5+28)|0); //@line 384 "lvm.c"
      var $6=HEAP32[(($upvalues)>>2)]; //@line 384 "lvm.c"
      $uv=$6; //@line 384 "lvm.c"
      $i=0; //@line 386 "lvm.c"
      label = 4; break; //@line 386 "lvm.c"
    case 4: 
      var $7=$i; //@line 386 "lvm.c"
      var $8=$nup; //@line 386 "lvm.c"
      var $cmp1=(($7)|0) < (($8)|0); //@line 386 "lvm.c"
      if ($cmp1) { label = 5; break; } else { label = 12; break; } //@line 386 "lvm.c"
    case 5: 
      var $9=$i; //@line 387 "lvm.c"
      var $10=$uv; //@line 387 "lvm.c"
      var $arrayidx=(($10+($9<<3))|0); //@line 387 "lvm.c"
      var $instack=(($arrayidx+4)|0); //@line 387 "lvm.c"
      var $11=HEAP8[($instack)]; //@line 387 "lvm.c"
      var $tobool=(($11 << 24) >> 24)!=0; //@line 387 "lvm.c"
      if ($tobool) { label = 6; break; } else { label = 7; break; } //@line 387 "lvm.c"
    case 6: 
      var $12=$base_addr; //@line 387 "lvm.c"
      var $13=$i; //@line 387 "lvm.c"
      var $14=$uv; //@line 387 "lvm.c"
      var $arrayidx2=(($14+($13<<3))|0); //@line 387 "lvm.c"
      var $idx=(($arrayidx2+5)|0); //@line 387 "lvm.c"
      var $15=HEAP8[($idx)]; //@line 387 "lvm.c"
      var $conv=(($15)&255); //@line 387 "lvm.c"
      var $add_ptr=(($12+((($conv)*(12))&-1))|0); //@line 387 "lvm.c"
      var $cond = $add_ptr;label = 8; break; //@line 387 "lvm.c"
    case 7: 
      var $16=$i; //@line 387 "lvm.c"
      var $17=$uv; //@line 387 "lvm.c"
      var $arrayidx3=(($17+($16<<3))|0); //@line 387 "lvm.c"
      var $idx4=(($arrayidx3+5)|0); //@line 387 "lvm.c"
      var $18=HEAP8[($idx4)]; //@line 387 "lvm.c"
      var $idxprom=(($18)&255); //@line 387 "lvm.c"
      var $19=$encup_addr; //@line 387 "lvm.c"
      var $arrayidx5=(($19+($idxprom<<2))|0); //@line 387 "lvm.c"
      var $20=HEAP32[(($arrayidx5)>>2)]; //@line 387 "lvm.c"
      var $v6=(($20+8)|0); //@line 387 "lvm.c"
      var $21=HEAP32[(($v6)>>2)]; //@line 387 "lvm.c"
      var $cond = $21;label = 8; break; //@line 387 "lvm.c"
    case 8: 
      var $cond; //@line 387 "lvm.c"
      $v=$cond; //@line 387 "lvm.c"
      var $22=$i; //@line 388 "lvm.c"
      var $23=$c; //@line 388 "lvm.c"
      var $l=$23; //@line 388 "lvm.c"
      var $upvals=(($l+16)|0); //@line 388 "lvm.c"
      var $arrayidx7=(($upvals+($22<<2))|0); //@line 388 "lvm.c"
      var $24=HEAP32[(($arrayidx7)>>2)]; //@line 388 "lvm.c"
      var $v8=(($24+8)|0); //@line 388 "lvm.c"
      var $25=HEAP32[(($v8)>>2)]; //@line 388 "lvm.c"
      var $26=$v; //@line 388 "lvm.c"
      var $cmp9=(($25)|0)!=(($26)|0); //@line 388 "lvm.c"
      if ($cmp9) { label = 9; break; } else { label = 10; break; } //@line 388 "lvm.c"
    case 9: 
      $retval=0; //@line 389 "lvm.c"
      label = 14; break; //@line 389 "lvm.c"
    case 10: 
      label = 11; break; //@line 390 "lvm.c"
    case 11: 
      var $27=$i; //@line 386 "lvm.c"
      var $inc=((($27)+(1))|0); //@line 386 "lvm.c"
      $i=$inc; //@line 386 "lvm.c"
      label = 4; break; //@line 386 "lvm.c"
    case 12: 
      label = 13; break; //@line 391 "lvm.c"
    case 13: 
      var $28=$c; //@line 392 "lvm.c"
      $retval=$28; //@line 392 "lvm.c"
      label = 14; break; //@line 392 "lvm.c"
    case 14: 
      var $29=$retval; //@line 393 "lvm.c"

      return $29; //@line 393 "lvm.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL9getcachedP5ProtoPP5UpValP10lua_TValue["X"]=1;

function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $this_addr;
      var $info_addr;
      var $adjustedPtr_addr;
      var $path_below_addr;
      $this_addr=$this;
      $info_addr=$info;
      $adjustedPtr_addr=$adjustedPtr;
      $path_below_addr=$path_below;
      var $this1=$this_addr;
      var $0=$info_addr;
      var $dst_ptr_leading_to_static_ptr=(($0+16)|0);
      var $1=HEAP32[(($dst_ptr_leading_to_static_ptr)>>2)];
      var $cmp=(($1)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$adjustedPtr_addr;
      var $3=$info_addr;
      var $dst_ptr_leading_to_static_ptr2=(($3+16)|0);
      HEAP32[(($dst_ptr_leading_to_static_ptr2)>>2)]=$2;
      var $4=$path_below_addr;
      var $5=$info_addr;
      var $path_dst_ptr_to_static_ptr=(($5+24)|0);
      HEAP32[(($path_dst_ptr_to_static_ptr)>>2)]=$4;
      var $6=$info_addr;
      var $number_to_static_ptr=(($6+36)|0);
      HEAP32[(($number_to_static_ptr)>>2)]=1;
      label = 10; break;
    case 4: 
      var $7=$info_addr;
      var $dst_ptr_leading_to_static_ptr3=(($7+16)|0);
      var $8=HEAP32[(($dst_ptr_leading_to_static_ptr3)>>2)];
      var $9=$adjustedPtr_addr;
      var $cmp4=(($8)|0)==(($9)|0);
      if ($cmp4) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $10=$info_addr;
      var $path_dst_ptr_to_static_ptr6=(($10+24)|0);
      var $11=HEAP32[(($path_dst_ptr_to_static_ptr6)>>2)];
      var $cmp7=(($11)|0)==2;
      if ($cmp7) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $12=$path_below_addr;
      var $13=$info_addr;
      var $path_dst_ptr_to_static_ptr9=(($13+24)|0);
      HEAP32[(($path_dst_ptr_to_static_ptr9)>>2)]=$12;
      label = 7; break;
    case 7: 
      label = 9; break;
    case 8: 
      var $14=$info_addr;
      var $number_to_static_ptr11=(($14+36)|0);
      var $15=HEAP32[(($number_to_static_ptr11)>>2)];
      var $add=((($15)+(1))|0);
      HEAP32[(($number_to_static_ptr11)>>2)]=$add;
      var $16=$info_addr;
      var $path_dst_ptr_to_static_ptr12=(($16+24)|0);
      HEAP32[(($path_dst_ptr_to_static_ptr12)>>2)]=2;
      var $17=$info_addr;
      var $search_done=(($17+54)|0);
      HEAP8[($search_done)]=1;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
__ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi["X"]=1;

function __ZL11pushclosureP9lua_StateP5ProtoPP5UpValP10lua_TValueS7_($L, $p, $encup, $base, $ra) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $p_addr;
      var $encup_addr;
      var $base_addr;
      var $ra_addr;
      var $nup;
      var $uv;
      var $i;
      var $ncl;
      var $io;
      $L_addr=$L;
      $p_addr=$p;
      $encup_addr=$encup;
      $base_addr=$base;
      $ra_addr=$ra;
      var $0=$p_addr; //@line 404 "lvm.c"
      var $sizeupvalues=(($0+40)|0); //@line 404 "lvm.c"
      var $1=HEAP32[(($sizeupvalues)>>2)]; //@line 404 "lvm.c"
      $nup=$1; //@line 404 "lvm.c"
      var $2=$p_addr; //@line 405 "lvm.c"
      var $upvalues=(($2+28)|0); //@line 405 "lvm.c"
      var $3=HEAP32[(($upvalues)>>2)]; //@line 405 "lvm.c"
      $uv=$3; //@line 405 "lvm.c"
      var $4=$L_addr; //@line 407 "lvm.c"
      var $5=$nup; //@line 407 "lvm.c"
      var $call=__Z16luaF_newLclosureP9lua_Statei($4, $5); //@line 407 "lvm.c"
      $ncl=$call; //@line 407 "lvm.c"
      var $6=$p_addr; //@line 408 "lvm.c"
      var $7=$ncl; //@line 408 "lvm.c"
      var $l=$7; //@line 408 "lvm.c"
      var $p1=(($l+12)|0); //@line 408 "lvm.c"
      HEAP32[(($p1)>>2)]=$6; //@line 408 "lvm.c"
      var $8=$ra_addr; //@line 409 "lvm.c"
      $io=$8; //@line 409 "lvm.c"
      var $9=$ncl; //@line 409 "lvm.c"
      var $10=$9; //@line 409 "lvm.c"
      var $11=$io; //@line 409 "lvm.c"
      var $value_=(($11)|0); //@line 409 "lvm.c"
      var $gc=$value_; //@line 409 "lvm.c"
      HEAP32[(($gc)>>2)]=$10; //@line 409 "lvm.c"
      var $12=$io; //@line 409 "lvm.c"
      var $tt_=(($12+8)|0); //@line 409 "lvm.c"
      HEAP32[(($tt_)>>2)]=70; //@line 409 "lvm.c"
      $i=0; //@line 410 "lvm.c"
      label = 3; break; //@line 410 "lvm.c"
    case 3: 
      var $13=$i; //@line 410 "lvm.c"
      var $14=$nup; //@line 410 "lvm.c"
      var $cmp=(($13)|0) < (($14)|0); //@line 410 "lvm.c"
      if ($cmp) { label = 4; break; } else { label = 9; break; } //@line 410 "lvm.c"
    case 4: 
      var $15=$i; //@line 411 "lvm.c"
      var $16=$uv; //@line 411 "lvm.c"
      var $arrayidx=(($16+($15<<3))|0); //@line 411 "lvm.c"
      var $instack=(($arrayidx+4)|0); //@line 411 "lvm.c"
      var $17=HEAP8[($instack)]; //@line 411 "lvm.c"
      var $tobool=(($17 << 24) >> 24)!=0; //@line 411 "lvm.c"
      if ($tobool) { label = 5; break; } else { label = 6; break; } //@line 411 "lvm.c"
    case 5: 
      var $18=$L_addr; //@line 412 "lvm.c"
      var $19=$base_addr; //@line 412 "lvm.c"
      var $20=$i; //@line 412 "lvm.c"
      var $21=$uv; //@line 412 "lvm.c"
      var $arrayidx2=(($21+($20<<3))|0); //@line 412 "lvm.c"
      var $idx=(($arrayidx2+5)|0); //@line 412 "lvm.c"
      var $22=HEAP8[($idx)]; //@line 412 "lvm.c"
      var $conv=(($22)&255); //@line 412 "lvm.c"
      var $add_ptr=(($19+((($conv)*(12))&-1))|0); //@line 412 "lvm.c"
      var $call3=__Z14luaF_findupvalP9lua_StateP10lua_TValue($18, $add_ptr); //@line 412 "lvm.c"
      var $23=$i; //@line 412 "lvm.c"
      var $24=$ncl; //@line 412 "lvm.c"
      var $l4=$24; //@line 412 "lvm.c"
      var $upvals=(($l4+16)|0); //@line 412 "lvm.c"
      var $arrayidx5=(($upvals+($23<<2))|0); //@line 412 "lvm.c"
      HEAP32[(($arrayidx5)>>2)]=$call3; //@line 412 "lvm.c"
      label = 7; break; //@line 412 "lvm.c"
    case 6: 
      var $25=$i; //@line 414 "lvm.c"
      var $26=$uv; //@line 414 "lvm.c"
      var $arrayidx6=(($26+($25<<3))|0); //@line 414 "lvm.c"
      var $idx7=(($arrayidx6+5)|0); //@line 414 "lvm.c"
      var $27=HEAP8[($idx7)]; //@line 414 "lvm.c"
      var $idxprom=(($27)&255); //@line 414 "lvm.c"
      var $28=$encup_addr; //@line 414 "lvm.c"
      var $arrayidx8=(($28+($idxprom<<2))|0); //@line 414 "lvm.c"
      var $29=HEAP32[(($arrayidx8)>>2)]; //@line 414 "lvm.c"
      var $30=$i; //@line 414 "lvm.c"
      var $31=$ncl; //@line 414 "lvm.c"
      var $l9=$31; //@line 414 "lvm.c"
      var $upvals10=(($l9+16)|0); //@line 414 "lvm.c"
      var $arrayidx11=(($upvals10+($30<<2))|0); //@line 414 "lvm.c"
      HEAP32[(($arrayidx11)>>2)]=$29; //@line 414 "lvm.c"
      label = 7; break;
    case 7: 
      label = 8; break; //@line 415 "lvm.c"
    case 8: 
      var $32=$i; //@line 410 "lvm.c"
      var $inc=((($32)+(1))|0); //@line 410 "lvm.c"
      $i=$inc; //@line 410 "lvm.c"
      label = 3; break; //@line 410 "lvm.c"
    case 9: 
      var $33=$p_addr; //@line 416 "lvm.c"
      var $34=$33; //@line 416 "lvm.c"
      var $gch=$34; //@line 416 "lvm.c"
      var $marked=(($gch+5)|0); //@line 416 "lvm.c"
      var $35=HEAP8[($marked)]; //@line 416 "lvm.c"
      var $conv12=(($35)&255); //@line 416 "lvm.c"
      var $and=$conv12 & 4; //@line 416 "lvm.c"
      var $tobool13=(($and)|0)!=0; //@line 416 "lvm.c"
      if ($tobool13) { label = 10; break; } else { label = 11; break; } //@line 416 "lvm.c"
    case 10: 
      var $36=$L_addr; //@line 416 "lvm.c"
      var $37=$p_addr; //@line 416 "lvm.c"
      var $38=$ncl; //@line 416 "lvm.c"
      __Z18luaC_barrierproto_P9lua_StateP5ProtoP7Closure($36, $37, $38); //@line 416 "lvm.c"
      label = 11; break; //@line 416 "lvm.c"
    case 11: 
      var $39=$ncl; //@line 417 "lvm.c"
      var $40=$p_addr; //@line 417 "lvm.c"
      var $cache=(($40+32)|0); //@line 417 "lvm.c"
      HEAP32[(($cache)>>2)]=$39; //@line 417 "lvm.c"

      return; //@line 418 "lvm.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL11pushclosureP9lua_StateP5ProtoPP5UpValP10lua_TValueS7_["X"]=1;

function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
  var label = 0;


  var $this_addr;
  $this_addr=$this;
  var $this1=$this_addr;
  var $0=$this1;
  __ZNSt9type_infoD2Ev($0);

  return;
}


function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $this_addr;
      var $exn_slot;
      var $ehselector_slot;
      $this_addr=$this;
      var $this1=$this_addr;
      (function() { try { __THREW__ = 0; return FUNCTION_TABLE[__ZN10__cxxabiv123__fundamental_type_infoD1Ev]($this1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $0=$this1;
      __ZdlPv($0);

      return;
    case 4: 
      var $1$0 = ___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)],[]); $1$1 = tempRet0;
      var $2=$1$0;
      $exn_slot=$2;
      var $3=$1$1;
      $ehselector_slot=$3;
      var $4=$this1;
      __ZdlPv($4);
      label = 5; break;
    case 5: 
      var $exn=$exn_slot;
      var $sel=$ehselector_slot;
      var $lpad_val$0=$exn;
      var $lpad_val$1=0;
      var $lpad_val2$0=$lpad_val$0;
      var $lpad_val2$1=$sel;
      if (HEAP32[((_llvm_eh_exception.buf)>>2)] == 0) { HEAP32[((_llvm_eh_exception.buf)>>2)]=$lpad_val2$0 } throw $lpad_val2$0;;
    default: assert(0, "bad label: " + label);
  }

}


function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $this_addr;
      var $exn_slot;
      var $ehselector_slot;
      $this_addr=$this;
      var $this1=$this_addr;
      (function() { try { __THREW__ = 0; return FUNCTION_TABLE[__ZN10__cxxabiv117__class_type_infoD1Ev]($this1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $0=$this1;
      __ZdlPv($0);

      return;
    case 4: 
      var $1$0 = ___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)],[]); $1$1 = tempRet0;
      var $2=$1$0;
      $exn_slot=$2;
      var $3=$1$1;
      $ehselector_slot=$3;
      var $4=$this1;
      __ZdlPv($4);
      label = 5; break;
    case 5: 
      var $exn=$exn_slot;
      var $sel=$ehselector_slot;
      var $lpad_val$0=$exn;
      var $lpad_val$1=0;
      var $lpad_val2$0=$lpad_val$0;
      var $lpad_val2$1=$sel;
      if (HEAP32[((_llvm_eh_exception.buf)>>2)] == 0) { HEAP32[((_llvm_eh_exception.buf)>>2)]=$lpad_val2$0 } throw $lpad_val2$0;;
    default: assert(0, "bad label: " + label);
  }

}


function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $this_addr;
      var $exn_slot;
      var $ehselector_slot;
      $this_addr=$this;
      var $this1=$this_addr;
      (function() { try { __THREW__ = 0; return FUNCTION_TABLE[__ZN10__cxxabiv120__si_class_type_infoD1Ev]($this1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $0=$this1;
      __ZdlPv($0);

      return;
    case 4: 
      var $1$0 = ___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)],[]); $1$1 = tempRet0;
      var $2=$1$0;
      $exn_slot=$2;
      var $3=$1$1;
      $ehselector_slot=$3;
      var $4=$this1;
      __ZdlPv($4);
      label = 5; break;
    case 5: 
      var $exn=$exn_slot;
      var $sel=$ehselector_slot;
      var $lpad_val$0=$exn;
      var $lpad_val$1=0;
      var $lpad_val2$0=$lpad_val$0;
      var $lpad_val2$1=$sel;
      if (HEAP32[((_llvm_eh_exception.buf)>>2)] == 0) { HEAP32[((_llvm_eh_exception.buf)>>2)]=$lpad_val2$0 } throw $lpad_val2$0;;
    default: assert(0, "bad label: " + label);
  }

}


function __ZN10__cxxabiv119__pointer_type_infoD0Ev($this) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $this_addr;
      var $exn_slot;
      var $ehselector_slot;
      $this_addr=$this;
      var $this1=$this_addr;
      (function() { try { __THREW__ = 0; return FUNCTION_TABLE[__ZN10__cxxabiv119__pointer_type_infoD1Ev]($this1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $0=$this1;
      __ZdlPv($0);

      return;
    case 4: 
      var $1$0 = ___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)],[]); $1$1 = tempRet0;
      var $2=$1$0;
      $exn_slot=$2;
      var $3=$1$1;
      $ehselector_slot=$3;
      var $4=$this1;
      __ZdlPv($4);
      label = 5; break;
    case 5: 
      var $exn=$exn_slot;
      var $sel=$ehselector_slot;
      var $lpad_val$0=$exn;
      var $lpad_val$1=0;
      var $lpad_val2$0=$lpad_val$0;
      var $lpad_val2$1=$sel;
      if (HEAP32[((_llvm_eh_exception.buf)>>2)] == 0) { HEAP32[((_llvm_eh_exception.buf)>>2)]=$lpad_val2$0 } throw $lpad_val2$0;;
    default: assert(0, "bad label: " + label);
  }

}


function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $0) {
  var label = 0;


  var $this_addr;
  var $thrown_type_addr;
  var $_addr;
  $this_addr=$this;
  $thrown_type_addr=$thrown_type;
  $_addr=$0;
  var $this1=$this_addr;
  var $1=$this1;
  var $2=$thrown_type_addr;
  var $3=$2;
  var $call=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($1, $3, 0);

  return $call;
}


function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $this_addr;
      var $thrown_type_addr;
      var $adjustedPtr_addr;
      var $thrown_class_type;
      var $info=__stackBase__;
      $this_addr=$this;
      $thrown_type_addr=$thrown_type;
      $adjustedPtr_addr=$adjustedPtr;
      var $this1=$this_addr;
      var $0=$this1;
      var $1=$thrown_type_addr;
      var $2=$1;
      var $call=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $2, 0);
      if ($call) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=1;
      label = 12; break;
    case 4: 
      var $3=$thrown_type_addr;
      var $4=(($3)|0)==0;
      if ($4) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $5=$3;
      var $6=___dynamic_cast($5, 5245252, 5245240, -1);
      var $7=$6;
      var $8 = $7;label = 7; break;
    case 6: 
      var $8 = 0;label = 7; break;
    case 7: 
      var $8;
      $thrown_class_type=$8;
      var $9=$thrown_class_type;
      var $cmp=(($9)|0)==0;
      if ($cmp) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $retval=0;
      label = 12; break;
    case 9: 
      var $10=$info;
      for (var $$dest = $10>>2, $$stop = $$dest + 14; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $dst_type=(($info)|0);
      var $11=$thrown_class_type;
      HEAP32[(($dst_type)>>2)]=$11;
      var $static_type=(($info+8)|0);
      HEAP32[(($static_type)>>2)]=$this1;
      var $src2dst_offset=(($info+12)|0);
      HEAP32[(($src2dst_offset)>>2)]=-1;
      var $number_of_dst_type=(($info+48)|0);
      HEAP32[(($number_of_dst_type)>>2)]=1;
      var $12=$thrown_class_type;
      var $13=$12;
      var $vtable=HEAP32[(($13)>>2)];
      var $vfn=(($vtable+28)|0);
      var $14=HEAP32[(($vfn)>>2)];
      var $15=$adjustedPtr_addr;
      var $16=HEAP32[(($15)>>2)];
      FUNCTION_TABLE[$14]($12, $info, $16, 1);
      var $path_dst_ptr_to_static_ptr=(($info+24)|0);
      var $17=HEAP32[(($path_dst_ptr_to_static_ptr)>>2)];
      var $cmp4=(($17)|0)==1;
      if ($cmp4) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $dst_ptr_leading_to_static_ptr=(($info+16)|0);
      var $18=HEAP32[(($dst_ptr_leading_to_static_ptr)>>2)];
      var $19=$adjustedPtr_addr;
      HEAP32[(($19)>>2)]=$18;
      $retval=1;
      label = 12; break;
    case 11: 
      $retval=0;
      label = 12; break;
    case 12: 
      var $20=$retval;
      STACKTOP = __stackBase__;
      return $20;
    default: assert(0, "bad label: " + label);
  }

}
__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv["X"]=1;

function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $this_addr;
      var $info_addr;
      var $adjustedPtr_addr;
      var $path_below_addr;
      $this_addr=$this;
      $info_addr=$info;
      $adjustedPtr_addr=$adjustedPtr;
      $path_below_addr=$path_below;
      var $this1=$this_addr;
      var $0=$this1;
      var $1=$info_addr;
      var $static_type=(($1+8)|0);
      var $2=HEAP32[(($static_type)>>2)];
      var $3=$2;
      var $call=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $3, 0);
      if ($call) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$info_addr;
      var $5=$adjustedPtr_addr;
      var $6=$path_below_addr;
      __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this1, $4, $5, $6);
      label = 4; break;
    case 4: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function __ZL9traceexecP9lua_State($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $ci;
      var $mask;
      var $counthook;
      var $p;
      var $npc;
      var $newline;
      $L_addr=$L;
      var $0=$L_addr; //@line 61 "lvm.c"
      var $ci1=(($0+16)|0); //@line 61 "lvm.c"
      var $1=HEAP32[(($ci1)>>2)]; //@line 61 "lvm.c"
      $ci=$1; //@line 61 "lvm.c"
      var $2=$L_addr; //@line 62 "lvm.c"
      var $hookmask=(($2+40)|0); //@line 62 "lvm.c"
      var $3=HEAP8[($hookmask)]; //@line 62 "lvm.c"
      $mask=$3; //@line 62 "lvm.c"
      var $4=$mask; //@line 63 "lvm.c"
      var $conv=(($4)&255); //@line 63 "lvm.c"
      var $and=$conv & 8; //@line 63 "lvm.c"
      var $tobool=(($and)|0)!=0; //@line 63 "lvm.c"
      if ($tobool) { label = 3; break; } else { var $7 = 0;label = 4; break; } //@line 63 "lvm.c"
    case 3: 
      var $5=$L_addr; //@line 63 "lvm.c"
      var $hookcount=(($5+48)|0); //@line 63 "lvm.c"
      var $6=HEAP32[(($hookcount)>>2)]; //@line 63 "lvm.c"
      var $cmp=(($6)|0)==0; //@line 63 "lvm.c"
      var $7 = $cmp;label = 4; break;
    case 4: 
      var $7;
      var $conv2=(($7)&1);
      $counthook=$conv2;
      var $8=$counthook; //@line 64 "lvm.c"
      var $tobool3=(($8)|0)!=0; //@line 64 "lvm.c"
      if ($tobool3) { label = 5; break; } else { label = 6; break; } //@line 64 "lvm.c"
    case 5: 
      var $9=$L_addr; //@line 65 "lvm.c"
      var $basehookcount=(($9+44)|0); //@line 65 "lvm.c"
      var $10=HEAP32[(($basehookcount)>>2)]; //@line 65 "lvm.c"
      var $11=$L_addr; //@line 65 "lvm.c"
      var $hookcount4=(($11+48)|0); //@line 65 "lvm.c"
      HEAP32[(($hookcount4)>>2)]=$10; //@line 65 "lvm.c"
      label = 6; break; //@line 65 "lvm.c"
    case 6: 
      var $12=$ci; //@line 66 "lvm.c"
      var $callstatus=(($12+18)|0); //@line 66 "lvm.c"
      var $13=HEAP8[($callstatus)]; //@line 66 "lvm.c"
      var $conv5=(($13)&255); //@line 66 "lvm.c"
      var $and6=$conv5 & 128; //@line 66 "lvm.c"
      var $tobool7=(($and6)|0)!=0; //@line 66 "lvm.c"
      if ($tobool7) { label = 7; break; } else { label = 8; break; } //@line 66 "lvm.c"
    case 7: 
      var $14=$ci; //@line 67 "lvm.c"
      var $callstatus9=(($14+18)|0); //@line 67 "lvm.c"
      var $15=HEAP8[($callstatus9)]; //@line 67 "lvm.c"
      var $conv10=(($15)&255); //@line 67 "lvm.c"
      var $and11=$conv10 & -129; //@line 67 "lvm.c"
      var $conv12=(($and11) & 255); //@line 67 "lvm.c"
      HEAP8[($callstatus9)]=$conv12; //@line 67 "lvm.c"
      label = 26; break; //@line 68 "lvm.c"
    case 8: 
      var $16=$counthook; //@line 70 "lvm.c"
      var $tobool14=(($16)|0)!=0; //@line 70 "lvm.c"
      if ($tobool14) { label = 9; break; } else { label = 10; break; } //@line 70 "lvm.c"
    case 9: 
      var $17=$L_addr; //@line 71 "lvm.c"
      __Z9luaD_hookP9lua_Stateii($17, 3, -1); //@line 71 "lvm.c"
      label = 10; break; //@line 71 "lvm.c"
    case 10: 
      var $18=$mask; //@line 72 "lvm.c"
      var $conv17=(($18)&255); //@line 72 "lvm.c"
      var $and18=$conv17 & 4; //@line 72 "lvm.c"
      var $tobool19=(($and18)|0)!=0; //@line 72 "lvm.c"
      if ($tobool19) { label = 11; break; } else { label = 22; break; } //@line 72 "lvm.c"
    case 11: 
      var $19=$ci; //@line 73 "lvm.c"
      var $func=(($19)|0); //@line 73 "lvm.c"
      var $20=HEAP32[(($func)>>2)]; //@line 73 "lvm.c"
      var $value_=(($20)|0); //@line 73 "lvm.c"
      var $gc=$value_; //@line 73 "lvm.c"
      var $21=HEAP32[(($gc)>>2)]; //@line 73 "lvm.c"
      var $cl=$21; //@line 73 "lvm.c"
      var $l=$cl; //@line 73 "lvm.c"
      var $p21=(($l+12)|0); //@line 73 "lvm.c"
      var $22=HEAP32[(($p21)>>2)]; //@line 73 "lvm.c"
      $p=$22; //@line 73 "lvm.c"
      var $23=$ci; //@line 74 "lvm.c"
      var $u=(($23+24)|0); //@line 74 "lvm.c"
      var $l22=$u; //@line 74 "lvm.c"
      var $savedpc=(($l22+4)|0); //@line 74 "lvm.c"
      var $24=HEAP32[(($savedpc)>>2)]; //@line 74 "lvm.c"
      var $25=$p; //@line 74 "lvm.c"
      var $code=(($25+12)|0); //@line 74 "lvm.c"
      var $26=HEAP32[(($code)>>2)]; //@line 74 "lvm.c"
      var $sub_ptr_lhs_cast=$24; //@line 74 "lvm.c"
      var $sub_ptr_rhs_cast=$26; //@line 74 "lvm.c"
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 74 "lvm.c"
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(4))&-1); //@line 74 "lvm.c"
      var $sub=((($sub_ptr_div)-(1))|0); //@line 74 "lvm.c"
      $npc=$sub; //@line 74 "lvm.c"
      var $27=$p; //@line 75 "lvm.c"
      var $lineinfo=(($27+20)|0); //@line 75 "lvm.c"
      var $28=HEAP32[(($lineinfo)>>2)]; //@line 75 "lvm.c"
      var $tobool23=(($28)|0)!=0; //@line 75 "lvm.c"
      if ($tobool23) { label = 12; break; } else { label = 13; break; } //@line 75 "lvm.c"
    case 12: 
      var $29=$npc; //@line 75 "lvm.c"
      var $30=$p; //@line 75 "lvm.c"
      var $lineinfo24=(($30+20)|0); //@line 75 "lvm.c"
      var $31=HEAP32[(($lineinfo24)>>2)]; //@line 75 "lvm.c"
      var $arrayidx=(($31+($29<<2))|0); //@line 75 "lvm.c"
      var $32=HEAP32[(($arrayidx)>>2)]; //@line 75 "lvm.c"
      var $cond = $32;label = 14; break; //@line 75 "lvm.c"
    case 13: 
      var $cond = 0;label = 14; break; //@line 75 "lvm.c"
    case 14: 
      var $cond; //@line 75 "lvm.c"
      $newline=$cond; //@line 75 "lvm.c"
      var $33=$npc; //@line 76 "lvm.c"
      var $cmp25=(($33)|0)==0; //@line 76 "lvm.c"
      if ($cmp25) { label = 20; break; } else { label = 15; break; } //@line 76 "lvm.c"
    case 15: 
      var $34=$ci; //@line 76 "lvm.c"
      var $u26=(($34+24)|0); //@line 76 "lvm.c"
      var $l27=$u26; //@line 76 "lvm.c"
      var $savedpc28=(($l27+4)|0); //@line 76 "lvm.c"
      var $35=HEAP32[(($savedpc28)>>2)]; //@line 76 "lvm.c"
      var $36=$L_addr; //@line 76 "lvm.c"
      var $oldpc=(($36+20)|0); //@line 76 "lvm.c"
      var $37=HEAP32[(($oldpc)>>2)]; //@line 76 "lvm.c"
      var $cmp29=(($35)>>>0) <= (($37)>>>0); //@line 76 "lvm.c"
      if ($cmp29) { label = 20; break; } else { label = 16; break; } //@line 76 "lvm.c"
    case 16: 
      var $38=$newline; //@line 76 "lvm.c"
      var $39=$p; //@line 76 "lvm.c"
      var $lineinfo31=(($39+20)|0); //@line 76 "lvm.c"
      var $40=HEAP32[(($lineinfo31)>>2)]; //@line 76 "lvm.c"
      var $tobool32=(($40)|0)!=0; //@line 76 "lvm.c"
      if ($tobool32) { label = 17; break; } else { label = 18; break; } //@line 76 "lvm.c"
    case 17: 
      var $41=$L_addr; //@line 76 "lvm.c"
      var $oldpc34=(($41+20)|0); //@line 76 "lvm.c"
      var $42=HEAP32[(($oldpc34)>>2)]; //@line 76 "lvm.c"
      var $43=$p; //@line 76 "lvm.c"
      var $code35=(($43+12)|0); //@line 76 "lvm.c"
      var $44=HEAP32[(($code35)>>2)]; //@line 76 "lvm.c"
      var $sub_ptr_lhs_cast36=$42; //@line 76 "lvm.c"
      var $sub_ptr_rhs_cast37=$44; //@line 76 "lvm.c"
      var $sub_ptr_sub38=((($sub_ptr_lhs_cast36)-($sub_ptr_rhs_cast37))|0); //@line 76 "lvm.c"
      var $sub_ptr_div39=((((($sub_ptr_sub38)|0))/(4))&-1); //@line 76 "lvm.c"
      var $sub40=((($sub_ptr_div39)-(1))|0); //@line 76 "lvm.c"
      var $45=$p; //@line 76 "lvm.c"
      var $lineinfo41=(($45+20)|0); //@line 76 "lvm.c"
      var $46=HEAP32[(($lineinfo41)>>2)]; //@line 76 "lvm.c"
      var $arrayidx42=(($46+($sub40<<2))|0); //@line 76 "lvm.c"
      var $47=HEAP32[(($arrayidx42)>>2)]; //@line 76 "lvm.c"
      var $cond45 = $47;label = 19; break; //@line 76 "lvm.c"
    case 18: 
      var $cond45 = 0;label = 19; break; //@line 76 "lvm.c"
    case 19: 
      var $cond45; //@line 76 "lvm.c"
      var $cmp46=(($38)|0)!=(($cond45)|0); //@line 76 "lvm.c"
      if ($cmp46) { label = 20; break; } else { label = 21; break; } //@line 76 "lvm.c"
    case 20: 
      var $48=$L_addr; //@line 79 "lvm.c"
      var $49=$newline; //@line 79 "lvm.c"
      __Z9luaD_hookP9lua_Stateii($48, 2, $49); //@line 79 "lvm.c"
      label = 21; break; //@line 79 "lvm.c"
    case 21: 
      label = 22; break; //@line 80 "lvm.c"
    case 22: 
      var $50=$ci; //@line 81 "lvm.c"
      var $u50=(($50+24)|0); //@line 81 "lvm.c"
      var $l51=$u50; //@line 81 "lvm.c"
      var $savedpc52=(($l51+4)|0); //@line 81 "lvm.c"
      var $51=HEAP32[(($savedpc52)>>2)]; //@line 81 "lvm.c"
      var $52=$L_addr; //@line 81 "lvm.c"
      var $oldpc53=(($52+20)|0); //@line 81 "lvm.c"
      HEAP32[(($oldpc53)>>2)]=$51; //@line 81 "lvm.c"
      var $53=$L_addr; //@line 82 "lvm.c"
      var $status=(($53+6)|0); //@line 82 "lvm.c"
      var $54=HEAP8[($status)]; //@line 82 "lvm.c"
      var $conv54=(($54)&255); //@line 82 "lvm.c"
      var $cmp55=(($conv54)|0)==1; //@line 82 "lvm.c"
      if ($cmp55) { label = 23; break; } else { label = 26; break; } //@line 82 "lvm.c"
    case 23: 
      var $55=$counthook; //@line 83 "lvm.c"
      var $tobool57=(($55)|0)!=0; //@line 83 "lvm.c"
      if ($tobool57) { label = 24; break; } else { label = 25; break; } //@line 83 "lvm.c"
    case 24: 
      var $56=$L_addr; //@line 84 "lvm.c"
      var $hookcount59=(($56+48)|0); //@line 84 "lvm.c"
      HEAP32[(($hookcount59)>>2)]=1; //@line 84 "lvm.c"
      label = 25; break; //@line 84 "lvm.c"
    case 25: 
      var $57=$ci; //@line 85 "lvm.c"
      var $u61=(($57+24)|0); //@line 85 "lvm.c"
      var $l62=$u61; //@line 85 "lvm.c"
      var $savedpc63=(($l62+4)|0); //@line 85 "lvm.c"
      var $58=HEAP32[(($savedpc63)>>2)]; //@line 85 "lvm.c"
      var $incdec_ptr=((($58)-(4))|0); //@line 85 "lvm.c"
      HEAP32[(($savedpc63)>>2)]=$incdec_ptr; //@line 85 "lvm.c"
      var $59=$ci; //@line 86 "lvm.c"
      var $callstatus64=(($59+18)|0); //@line 86 "lvm.c"
      var $60=HEAP8[($callstatus64)]; //@line 86 "lvm.c"
      var $conv65=(($60)&255); //@line 86 "lvm.c"
      var $or=$conv65 | 128; //@line 86 "lvm.c"
      var $conv66=(($or) & 255); //@line 86 "lvm.c"
      HEAP8[($callstatus64)]=$conv66; //@line 86 "lvm.c"
      var $61=$L_addr; //@line 87 "lvm.c"
      var $top=(($61+8)|0); //@line 87 "lvm.c"
      var $62=HEAP32[(($top)>>2)]; //@line 87 "lvm.c"
      var $add_ptr=((($62)-(12))|0); //@line 87 "lvm.c"
      var $63=$ci; //@line 87 "lvm.c"
      var $func67=(($63)|0); //@line 87 "lvm.c"
      HEAP32[(($func67)>>2)]=$add_ptr; //@line 87 "lvm.c"
      var $64=$L_addr; //@line 88 "lvm.c"
      __Z10luaD_throwP9lua_Statei($64, 1); //@line 88 "lvm.c"
      throw "Reached an unreachable!" //@line 88 "lvm.c"
    case 26: 

      return; //@line 90 "lvm.c"
    default: assert(0, "bad label: " + label);
  }

}
__ZL9traceexecP9lua_State["X"]=1;

function __Z14luaZ_openspaceP9lua_StateP7Mbufferj($L, $buff, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $buff_addr;
      var $n_addr;
      $L_addr=$L;
      $buff_addr=$buff;
      $n_addr=$n;
      var $0=$n_addr; //@line 69 "lzio.c"
      var $1=$buff_addr; //@line 69 "lzio.c"
      var $buffsize=(($1+8)|0); //@line 69 "lzio.c"
      var $2=HEAP32[(($buffsize)>>2)]; //@line 69 "lzio.c"
      var $cmp=(($0)>>>0) > (($2)>>>0); //@line 69 "lzio.c"
      if ($cmp) { label = 3; break; } else { label = 9; break; } //@line 69 "lzio.c"
    case 3: 
      var $3=$n_addr; //@line 70 "lzio.c"
      var $cmp1=(($3)>>>0) < 32; //@line 70 "lzio.c"
      if ($cmp1) { label = 4; break; } else { label = 5; break; } //@line 70 "lzio.c"
    case 4: 
      $n_addr=32; //@line 70 "lzio.c"
      label = 5; break; //@line 70 "lzio.c"
    case 5: 
      var $4=$n_addr; //@line 71 "lzio.c"
      var $add=((($4)+(1))|0); //@line 71 "lzio.c"
      var $cmp3=(($add)>>>0) > 4294967293; //@line 71 "lzio.c"
      if ($cmp3) { label = 6; break; } else { label = 7; break; } //@line 71 "lzio.c"
    case 6: 
      var $5=$L_addr; //@line 71 "lzio.c"
      __Z11luaM_toobigP9lua_State($5); //@line 71 "lzio.c"
      throw "Reached an unreachable!" //@line 71 "lzio.c"
      label = 8; break; //@line 71 "lzio.c"
    case 7: 
      var $7=$L_addr; //@line 71 "lzio.c"
      var $8=$buff_addr; //@line 71 "lzio.c"
      var $buffer=(($8)|0); //@line 71 "lzio.c"
      var $9=HEAP32[(($buffer)>>2)]; //@line 71 "lzio.c"
      var $10=$buff_addr; //@line 71 "lzio.c"
      var $buffsize4=(($10+8)|0); //@line 71 "lzio.c"
      var $11=HEAP32[(($buffsize4)>>2)]; //@line 71 "lzio.c"
      var $mul=$11; //@line 71 "lzio.c"
      var $12=$n_addr; //@line 71 "lzio.c"
      var $mul5=$12; //@line 71 "lzio.c"
      var $call=__Z13luaM_realloc_P9lua_StatePvjj($7, $9, $mul, $mul5); //@line 71 "lzio.c"
      var $cond = $call;label = 8; break; //@line 71 "lzio.c"
    case 8: 
      var $cond; //@line 71 "lzio.c"
      var $13=$buff_addr; //@line 71 "lzio.c"
      var $buffer6=(($13)|0); //@line 71 "lzio.c"
      HEAP32[(($buffer6)>>2)]=$cond; //@line 71 "lzio.c"
      var $14=$n_addr; //@line 71 "lzio.c"
      var $15=$buff_addr; //@line 71 "lzio.c"
      var $buffsize7=(($15+8)|0); //@line 71 "lzio.c"
      HEAP32[(($buffsize7)>>2)]=$14; //@line 71 "lzio.c"
      label = 9; break; //@line 72 "lzio.c"
    case 9: 
      var $16=$buff_addr; //@line 73 "lzio.c"
      var $buffer9=(($16)|0); //@line 73 "lzio.c"
      var $17=HEAP32[(($buffer9)>>2)]; //@line 73 "lzio.c"

      return $17; //@line 73 "lzio.c"
    default: assert(0, "bad label: " + label);
  }

}
__Z14luaZ_openspaceP9lua_StateP7Mbufferj["X"]=1;

function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this, $info, $dst_ptr, $current_ptr, $path_below) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $this_addr;
      var $info_addr;
      var $dst_ptr_addr;
      var $current_ptr_addr;
      var $path_below_addr;
      $this_addr=$this;
      $info_addr=$info;
      $dst_ptr_addr=$dst_ptr;
      $current_ptr_addr=$current_ptr;
      $path_below_addr=$path_below;
      var $this1=$this_addr;
      var $0=$info_addr;
      var $found_any_static_type=(($0+53)|0);
      HEAP8[($found_any_static_type)]=1;
      var $1=$current_ptr_addr;
      var $2=$info_addr;
      var $static_ptr=(($2+4)|0);
      var $3=HEAP32[(($static_ptr)>>2)];
      var $cmp=(($1)|0)==(($3)|0);
      if ($cmp) { label = 3; break; } else { label = 18; break; }
    case 3: 
      var $4=$info_addr;
      var $found_our_static_ptr=(($4+52)|0);
      HEAP8[($found_our_static_ptr)]=1;
      var $5=$info_addr;
      var $dst_ptr_leading_to_static_ptr=(($5+16)|0);
      var $6=HEAP32[(($dst_ptr_leading_to_static_ptr)>>2)];
      var $cmp2=(($6)|0)==0;
      if ($cmp2) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $7=$dst_ptr_addr;
      var $8=$info_addr;
      var $dst_ptr_leading_to_static_ptr4=(($8+16)|0);
      HEAP32[(($dst_ptr_leading_to_static_ptr4)>>2)]=$7;
      var $9=$path_below_addr;
      var $10=$info_addr;
      var $path_dst_ptr_to_static_ptr=(($10+24)|0);
      HEAP32[(($path_dst_ptr_to_static_ptr)>>2)]=$9;
      var $11=$info_addr;
      var $number_to_static_ptr=(($11+36)|0);
      HEAP32[(($number_to_static_ptr)>>2)]=1;
      var $12=$info_addr;
      var $number_of_dst_type=(($12+48)|0);
      var $13=HEAP32[(($number_of_dst_type)>>2)];
      var $cmp5=(($13)|0)==1;
      if ($cmp5) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $14=$info_addr;
      var $path_dst_ptr_to_static_ptr6=(($14+24)|0);
      var $15=HEAP32[(($path_dst_ptr_to_static_ptr6)>>2)];
      var $cmp7=(($15)|0)==1;
      if ($cmp7) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $16=$info_addr;
      var $search_done=(($16+54)|0);
      HEAP8[($search_done)]=1;
      label = 7; break;
    case 7: 
      label = 17; break;
    case 8: 
      var $17=$info_addr;
      var $dst_ptr_leading_to_static_ptr9=(($17+16)|0);
      var $18=HEAP32[(($dst_ptr_leading_to_static_ptr9)>>2)];
      var $19=$dst_ptr_addr;
      var $cmp10=(($18)|0)==(($19)|0);
      if ($cmp10) { label = 9; break; } else { label = 15; break; }
    case 9: 
      var $20=$info_addr;
      var $path_dst_ptr_to_static_ptr12=(($20+24)|0);
      var $21=HEAP32[(($path_dst_ptr_to_static_ptr12)>>2)];
      var $cmp13=(($21)|0)==2;
      if ($cmp13) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $22=$path_below_addr;
      var $23=$info_addr;
      var $path_dst_ptr_to_static_ptr15=(($23+24)|0);
      HEAP32[(($path_dst_ptr_to_static_ptr15)>>2)]=$22;
      label = 11; break;
    case 11: 
      var $24=$info_addr;
      var $number_of_dst_type17=(($24+48)|0);
      var $25=HEAP32[(($number_of_dst_type17)>>2)];
      var $cmp18=(($25)|0)==1;
      if ($cmp18) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $26=$info_addr;
      var $path_dst_ptr_to_static_ptr20=(($26+24)|0);
      var $27=HEAP32[(($path_dst_ptr_to_static_ptr20)>>2)];
      var $cmp21=(($27)|0)==1;
      if ($cmp21) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $28=$info_addr;
      var $search_done23=(($28+54)|0);
      HEAP8[($search_done23)]=1;
      label = 14; break;
    case 14: 
      label = 16; break;
    case 15: 
      var $29=$info_addr;
      var $number_to_static_ptr26=(($29+36)|0);
      var $30=HEAP32[(($number_to_static_ptr26)>>2)];
      var $add=((($30)+(1))|0);
      HEAP32[(($number_to_static_ptr26)>>2)]=$add;
      var $31=$info_addr;
      var $search_done27=(($31+54)|0);
      HEAP8[($search_done27)]=1;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
__ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i["X"]=1;

function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($this, $info, $current_ptr, $path_below) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $this_addr;
      var $info_addr;
      var $current_ptr_addr;
      var $path_below_addr;
      $this_addr=$this;
      $info_addr=$info;
      $current_ptr_addr=$current_ptr;
      $path_below_addr=$path_below;
      var $this1=$this_addr;
      var $0=$current_ptr_addr;
      var $1=$info_addr;
      var $static_ptr=(($1+4)|0);
      var $2=HEAP32[(($static_ptr)>>2)];
      var $cmp=(($0)|0)==(($2)|0);
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $3=$info_addr;
      var $path_dynamic_ptr_to_static_ptr=(($3+28)|0);
      var $4=HEAP32[(($path_dynamic_ptr_to_static_ptr)>>2)];
      var $cmp2=(($4)|0)!=1;
      if ($cmp2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $5=$path_below_addr;
      var $6=$info_addr;
      var $path_dynamic_ptr_to_static_ptr4=(($6+28)|0);
      HEAP32[(($path_dynamic_ptr_to_static_ptr4)>>2)]=$5;
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $this_addr;
      var $info_addr;
      var $adjustedPtr_addr;
      var $path_below_addr;
      $this_addr=$this;
      $info_addr=$info;
      $adjustedPtr_addr=$adjustedPtr;
      $path_below_addr=$path_below;
      var $this1=$this_addr;
      var $0=$this1;
      var $1=$info_addr;
      var $static_type=(($1+8)|0);
      var $2=HEAP32[(($static_type)>>2)];
      var $3=$2;
      var $call=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $3, 0);
      if ($call) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$this1;
      var $5=$info_addr;
      var $6=$adjustedPtr_addr;
      var $7=$path_below_addr;
      __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($4, $5, $6, $7);
      label = 5; break;
    case 4: 
      var $__base_type=(($this1+8)|0);
      var $8=HEAP32[(($__base_type)>>2)];
      var $9=$8;
      var $vtable=HEAP32[(($9)>>2)];
      var $vfn=(($vtable+28)|0);
      var $10=HEAP32[(($vfn)>>2)];
      var $11=$info_addr;
      var $12=$adjustedPtr_addr;
      var $13=$path_below_addr;
      FUNCTION_TABLE[$10]($8, $11, $12, $13);
      label = 5; break;
    case 5: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function __ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $0) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $this_addr;
      var $thrown_type_addr;
      var $_addr;
      $this_addr=$this;
      $thrown_type_addr=$thrown_type;
      $_addr=$0;
      var $this1=$this_addr;
      var $1=$this1;
      var $2=$thrown_type_addr;
      var $3=$2;
      var $call=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($1, $3, 0);
      if ($call) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=1;
      label = 5; break;
    case 4: 
      var $4=$thrown_type_addr;
      var $5=$4;
      var $call2=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($5, 5245184, 0);
      $retval=$call2;
      label = 5; break;
    case 5: 
      var $6=$retval;

      return $6;
    default: assert(0, "bad label: " + label);
  }

}


function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $this_addr;
      var $thrown_type_addr;
      var $adjustedPtr_addr;
      var $thrown_pointer_type;
      var $catch_class_type;
      var $thrown_class_type;
      var $info=__stackBase__;
      $this_addr=$this;
      $thrown_type_addr=$thrown_type;
      $adjustedPtr_addr=$adjustedPtr;
      var $this1=$this_addr;
      var $0=$adjustedPtr_addr;
      var $1=HEAP32[(($0)>>2)];
      var $2=$1;
      var $3=HEAP32[(($2)>>2)];
      var $4=$adjustedPtr_addr;
      HEAP32[(($4)>>2)]=$3;
      var $5=$this1;
      var $6=$thrown_type_addr;
      var $7=$adjustedPtr_addr;
      var $call=__ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv($5, $6, $7);
      if ($call) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=1;
      label = 28; break;
    case 4: 
      var $8=$thrown_type_addr;
      var $9=(($8)|0)==0;
      if ($9) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $10=$8;
      var $11=___dynamic_cast($10, 5245252, 5245216, -1);
      var $12=$11;
      var $13 = $12;label = 7; break;
    case 6: 
      var $13 = 0;label = 7; break;
    case 7: 
      var $13;
      $thrown_pointer_type=$13;
      var $14=$thrown_pointer_type;
      var $cmp=(($14)|0)==0;
      if ($cmp) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $retval=0;
      label = 28; break;
    case 9: 
      var $15=$thrown_pointer_type;
      var $16=$15;
      var $__flags=(($16+8)|0);
      var $17=HEAP32[(($__flags)>>2)];
      var $18=$this1;
      var $__flags4=(($18+8)|0);
      var $19=HEAP32[(($__flags4)>>2)];
      var $neg=$19 ^ -1;
      var $and=$17 & $neg;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $retval=0;
      label = 28; break;
    case 11: 
      var $20=$this1;
      var $__pointee=(($20+12)|0);
      var $21=HEAP32[(($__pointee)>>2)];
      var $22=$21;
      var $23=$thrown_pointer_type;
      var $24=$23;
      var $__pointee7=(($24+12)|0);
      var $25=HEAP32[(($__pointee7)>>2)];
      var $26=$25;
      var $call8=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($22, $26, 0);
      if ($call8) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $retval=1;
      label = 28; break;
    case 13: 
      var $27=$this1;
      var $__pointee11=(($27+12)|0);
      var $28=HEAP32[(($__pointee11)>>2)];
      var $29=$28;
      var $call12=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($29, 5245152, 0);
      if ($call12) { label = 14; break; } else { label = 15; break; }
    case 14: 
      $retval=1;
      label = 28; break;
    case 15: 
      var $30=$this1;
      var $__pointee15=(($30+12)|0);
      var $31=HEAP32[(($__pointee15)>>2)];
      var $32=(($31)|0)==0;
      if ($32) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $33=$31;
      var $34=___dynamic_cast($33, 5245252, 5245240, -1);
      var $35=$34;
      var $36 = $35;label = 18; break;
    case 17: 
      var $36 = 0;label = 18; break;
    case 18: 
      var $36;
      $catch_class_type=$36;
      var $37=$catch_class_type;
      var $cmp19=(($37)|0)==0;
      if ($cmp19) { label = 19; break; } else { label = 20; break; }
    case 19: 
      $retval=0;
      label = 28; break;
    case 20: 
      var $38=$thrown_pointer_type;
      var $39=$38;
      var $__pointee22=(($39+12)|0);
      var $40=HEAP32[(($__pointee22)>>2)];
      var $41=(($40)|0)==0;
      if ($41) { label = 22; break; } else { label = 21; break; }
    case 21: 
      var $42=$40;
      var $43=___dynamic_cast($42, 5245252, 5245240, -1);
      var $44=$43;
      var $45 = $44;label = 23; break;
    case 22: 
      var $45 = 0;label = 23; break;
    case 23: 
      var $45;
      $thrown_class_type=$45;
      var $46=$thrown_class_type;
      var $cmp26=(($46)|0)==0;
      if ($cmp26) { label = 24; break; } else { label = 25; break; }
    case 24: 
      $retval=0;
      label = 28; break;
    case 25: 
      var $47=$info;
      for (var $$dest = $47>>2, $$stop = $$dest + 14; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $dst_type=(($info)|0);
      var $48=$thrown_class_type;
      HEAP32[(($dst_type)>>2)]=$48;
      var $static_type=(($info+8)|0);
      var $49=$catch_class_type;
      HEAP32[(($static_type)>>2)]=$49;
      var $src2dst_offset=(($info+12)|0);
      HEAP32[(($src2dst_offset)>>2)]=-1;
      var $number_of_dst_type=(($info+48)|0);
      HEAP32[(($number_of_dst_type)>>2)]=1;
      var $50=$thrown_class_type;
      var $51=$50;
      var $vtable=HEAP32[(($51)>>2)];
      var $vfn=(($vtable+28)|0);
      var $52=HEAP32[(($vfn)>>2)];
      var $53=$adjustedPtr_addr;
      var $54=HEAP32[(($53)>>2)];
      FUNCTION_TABLE[$52]($50, $info, $54, 1);
      var $path_dst_ptr_to_static_ptr=(($info+24)|0);
      var $55=HEAP32[(($path_dst_ptr_to_static_ptr)>>2)];
      var $cmp29=(($55)|0)==1;
      if ($cmp29) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $dst_ptr_leading_to_static_ptr=(($info+16)|0);
      var $56=HEAP32[(($dst_ptr_leading_to_static_ptr)>>2)];
      var $57=$adjustedPtr_addr;
      HEAP32[(($57)>>2)]=$56;
      $retval=1;
      label = 28; break;
    case 27: 
      $retval=0;
      label = 28; break;
    case 28: 
      var $58=$retval;
      STACKTOP = __stackBase__;
      return $58;
    default: assert(0, "bad label: " + label);
  }

}
__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv["X"]=1;

function ___dynamic_cast($static_ptr, $static_type, $dst_type, $src2dst_offset) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $static_ptr_addr;
      var $static_type_addr;
      var $dst_type_addr;
      var $src2dst_offset_addr;
      var $vtable;
      var $offset_to_derived;
      var $dynamic_ptr;
      var $dynamic_type;
      var $dst_ptr;
      var $info=__stackBase__;
      $static_ptr_addr=$static_ptr;
      $static_type_addr=$static_type;
      $dst_type_addr=$dst_type;
      $src2dst_offset_addr=$src2dst_offset;
      var $0=$static_ptr_addr;
      var $1=$0;
      var $2=HEAP32[(($1)>>2)];
      $vtable=$2;
      var $3=$vtable;
      var $arrayidx=((($3)-(8))|0);
      var $4=HEAP32[(($arrayidx)>>2)];
      var $5=$4;
      $offset_to_derived=$5;
      var $6=$static_ptr_addr;
      var $7=$offset_to_derived;
      var $add_ptr=(($6+$7)|0);
      $dynamic_ptr=$add_ptr;
      var $8=$vtable;
      var $arrayidx1=((($8)-(4))|0);
      var $9=HEAP32[(($arrayidx1)>>2)];
      var $10=$9;
      $dynamic_type=$10;
      $dst_ptr=0;
      var $dst_type2=(($info)|0);
      var $11=$dst_type_addr;
      HEAP32[(($dst_type2)>>2)]=$11;
      var $static_ptr3=(($info+4)|0);
      var $12=$static_ptr_addr;
      HEAP32[(($static_ptr3)>>2)]=$12;
      var $static_type4=(($info+8)|0);
      var $13=$static_type_addr;
      HEAP32[(($static_type4)>>2)]=$13;
      var $src2dst_offset5=(($info+12)|0);
      var $14=$src2dst_offset_addr;
      HEAP32[(($src2dst_offset5)>>2)]=$14;
      var $dst_ptr_leading_to_static_ptr=(($info+16)|0);
      HEAP32[(($dst_ptr_leading_to_static_ptr)>>2)]=0;
      var $dst_ptr_not_leading_to_static_ptr=(($info+20)|0);
      HEAP32[(($dst_ptr_not_leading_to_static_ptr)>>2)]=0;
      var $path_dst_ptr_to_static_ptr=(($info+24)|0);
      HEAP32[(($path_dst_ptr_to_static_ptr)>>2)]=0;
      var $path_dynamic_ptr_to_static_ptr=(($info+28)|0);
      HEAP32[(($path_dynamic_ptr_to_static_ptr)>>2)]=0;
      var $path_dynamic_ptr_to_dst_ptr=(($info+32)|0);
      HEAP32[(($path_dynamic_ptr_to_dst_ptr)>>2)]=0;
      var $number_to_static_ptr=(($info+36)|0);
      HEAP32[(($number_to_static_ptr)>>2)]=0;
      var $number_to_dst_ptr=(($info+40)|0);
      HEAP32[(($number_to_dst_ptr)>>2)]=0;
      var $is_dst_type_derived_from_static_type=(($info+44)|0);
      HEAP32[(($is_dst_type_derived_from_static_type)>>2)]=0;
      var $number_of_dst_type=(($info+48)|0);
      HEAP32[(($number_of_dst_type)>>2)]=0;
      var $found_our_static_ptr=(($info+52)|0);
      HEAP8[($found_our_static_ptr)]=0;
      var $found_any_static_type=(($info+53)|0);
      HEAP8[($found_any_static_type)]=0;
      var $search_done=(($info+54)|0);
      HEAP8[($search_done)]=0;
      var $15=$dynamic_type;
      var $16=$15;
      var $17=$dst_type_addr;
      var $18=$17;
      var $call=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($16, $18, 0);
      if ($call) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $number_of_dst_type6=(($info+48)|0);
      HEAP32[(($number_of_dst_type6)>>2)]=1;
      var $19=$dynamic_type;
      var $20=$19;
      var $vtable7=HEAP32[(($20)>>2)];
      var $vfn=(($vtable7+20)|0);
      var $21=HEAP32[(($vfn)>>2)];
      var $22=$dynamic_ptr;
      var $23=$dynamic_ptr;
      FUNCTION_TABLE[$21]($19, $info, $22, $23, 1, 0);
      var $path_dst_ptr_to_static_ptr8=(($info+24)|0);
      var $24=HEAP32[(($path_dst_ptr_to_static_ptr8)>>2)];
      var $cmp=(($24)|0)==1;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $25=$dynamic_ptr;
      $dst_ptr=$25;
      label = 5; break;
    case 5: 
      label = 19; break;
    case 6: 
      var $26=$dynamic_type;
      var $27=$26;
      var $vtable10=HEAP32[(($27)>>2)];
      var $vfn11=(($vtable10+24)|0);
      var $28=HEAP32[(($vfn11)>>2)];
      var $29=$dynamic_ptr;
      FUNCTION_TABLE[$28]($26, $info, $29, 1, 0);
      var $number_to_static_ptr12=(($info+36)|0);
      var $30=HEAP32[(($number_to_static_ptr12)>>2)];
      if ((($30)|0)==0) {
        label = 7; break;
      }
      else if ((($30)|0)==1) {
        label = 12; break;
      }
      else {
      label = 18; break;
      }
      
    case 7: 
      var $number_to_dst_ptr13=(($info+40)|0);
      var $31=HEAP32[(($number_to_dst_ptr13)>>2)];
      var $cmp14=(($31)|0)==1;
      if ($cmp14) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $path_dynamic_ptr_to_static_ptr15=(($info+28)|0);
      var $32=HEAP32[(($path_dynamic_ptr_to_static_ptr15)>>2)];
      var $cmp16=(($32)|0)==1;
      if ($cmp16) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $path_dynamic_ptr_to_dst_ptr18=(($info+32)|0);
      var $33=HEAP32[(($path_dynamic_ptr_to_dst_ptr18)>>2)];
      var $cmp19=(($33)|0)==1;
      if ($cmp19) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $dst_ptr_not_leading_to_static_ptr21=(($info+20)|0);
      var $34=HEAP32[(($dst_ptr_not_leading_to_static_ptr21)>>2)];
      $dst_ptr=$34;
      label = 11; break;
    case 11: 
      label = 18; break;
    case 12: 
      var $path_dst_ptr_to_static_ptr24=(($info+24)|0);
      var $35=HEAP32[(($path_dst_ptr_to_static_ptr24)>>2)];
      var $cmp25=(($35)|0)==1;
      if ($cmp25) { label = 16; break; } else { label = 13; break; }
    case 13: 
      var $number_to_dst_ptr26=(($info+40)|0);
      var $36=HEAP32[(($number_to_dst_ptr26)>>2)];
      var $cmp27=(($36)|0)==0;
      if ($cmp27) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $path_dynamic_ptr_to_static_ptr29=(($info+28)|0);
      var $37=HEAP32[(($path_dynamic_ptr_to_static_ptr29)>>2)];
      var $cmp30=(($37)|0)==1;
      if ($cmp30) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $path_dynamic_ptr_to_dst_ptr32=(($info+32)|0);
      var $38=HEAP32[(($path_dynamic_ptr_to_dst_ptr32)>>2)];
      var $cmp33=(($38)|0)==1;
      if ($cmp33) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $dst_ptr_leading_to_static_ptr35=(($info+16)|0);
      var $39=HEAP32[(($dst_ptr_leading_to_static_ptr35)>>2)];
      $dst_ptr=$39;
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $40=$dst_ptr;
      STACKTOP = __stackBase__;
      return $40;
    default: assert(0, "bad label: " + label);
  }

}
___dynamic_cast["X"]=1;

function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $this_addr;
      var $info_addr;
      var $current_ptr_addr;
      var $path_below_addr;
      var $use_strcmp_addr;
      var $is_dst_type_derived_from_static_type13;
      var $does_dst_type_point_to_our_static_type;
      $this_addr=$this;
      $info_addr=$info;
      $current_ptr_addr=$current_ptr;
      $path_below_addr=$path_below;
      var $frombool=(($use_strcmp)&1);
      $use_strcmp_addr=$frombool;
      var $this1=$this_addr;
      var $0=$this1;
      var $1=$info_addr;
      var $static_type=(($1+8)|0);
      var $2=HEAP32[(($static_type)>>2)];
      var $3=$2;
      var $4=$use_strcmp_addr;
      var $tobool=(($4) & 1);
      var $call=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $3, $tobool);
      if ($call) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$this1;
      var $6=$info_addr;
      var $7=$current_ptr_addr;
      var $8=$path_below_addr;
      __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($5, $6, $7, $8);
      label = 28; break;
    case 4: 
      var $9=$this1;
      var $10=$info_addr;
      var $dst_type=(($10)|0);
      var $11=HEAP32[(($dst_type)>>2)];
      var $12=$11;
      var $13=$use_strcmp_addr;
      var $tobool2=(($13) & 1);
      var $call3=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($9, $12, $tobool2);
      if ($call3) { label = 5; break; } else { label = 26; break; }
    case 5: 
      var $14=$current_ptr_addr;
      var $15=$info_addr;
      var $dst_ptr_leading_to_static_ptr=(($15+16)|0);
      var $16=HEAP32[(($dst_ptr_leading_to_static_ptr)>>2)];
      var $cmp=(($14)|0)==(($16)|0);
      if ($cmp) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $17=$current_ptr_addr;
      var $18=$info_addr;
      var $dst_ptr_not_leading_to_static_ptr=(($18+20)|0);
      var $19=HEAP32[(($dst_ptr_not_leading_to_static_ptr)>>2)];
      var $cmp5=(($17)|0)==(($19)|0);
      if ($cmp5) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $20=$path_below_addr;
      var $cmp7=(($20)|0)==1;
      if ($cmp7) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $21=$info_addr;
      var $path_dynamic_ptr_to_dst_ptr=(($21+32)|0);
      HEAP32[(($path_dynamic_ptr_to_dst_ptr)>>2)]=1;
      label = 9; break;
    case 9: 
      label = 25; break;
    case 10: 
      var $22=$path_below_addr;
      var $23=$info_addr;
      var $path_dynamic_ptr_to_dst_ptr10=(($23+32)|0);
      HEAP32[(($path_dynamic_ptr_to_dst_ptr10)>>2)]=$22;
      var $24=$info_addr;
      var $is_dst_type_derived_from_static_type=(($24+44)|0);
      var $25=HEAP32[(($is_dst_type_derived_from_static_type)>>2)];
      var $cmp11=(($25)|0)!=4;
      if ($cmp11) { label = 11; break; } else { label = 24; break; }
    case 11: 
      $is_dst_type_derived_from_static_type13=0;
      $does_dst_type_point_to_our_static_type=0;
      var $26=$info_addr;
      var $found_our_static_ptr=(($26+52)|0);
      HEAP8[($found_our_static_ptr)]=0;
      var $27=$info_addr;
      var $found_any_static_type=(($27+53)|0);
      HEAP8[($found_any_static_type)]=0;
      var $__base_type=(($this1+8)|0);
      var $28=HEAP32[(($__base_type)>>2)];
      var $29=$28;
      var $vtable=HEAP32[(($29)>>2)];
      var $vfn=(($vtable+20)|0);
      var $30=HEAP32[(($vfn)>>2)];
      var $31=$info_addr;
      var $32=$current_ptr_addr;
      var $33=$current_ptr_addr;
      var $34=$use_strcmp_addr;
      var $tobool14=(($34) & 1);
      FUNCTION_TABLE[$30]($28, $31, $32, $33, 1, $tobool14);
      var $35=$info_addr;
      var $found_any_static_type15=(($35+53)|0);
      var $36=HEAP8[($found_any_static_type15)];
      var $tobool16=(($36) & 1);
      if ($tobool16) { label = 12; break; } else { label = 15; break; }
    case 12: 
      $is_dst_type_derived_from_static_type13=1;
      var $37=$info_addr;
      var $found_our_static_ptr18=(($37+52)|0);
      var $38=HEAP8[($found_our_static_ptr18)];
      var $tobool19=(($38) & 1);
      if ($tobool19) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $does_dst_type_point_to_our_static_type=1;
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $39=$does_dst_type_point_to_our_static_type;
      var $tobool23=(($39) & 1);
      if ($tobool23) { label = 20; break; } else { label = 16; break; }
    case 16: 
      var $40=$current_ptr_addr;
      var $41=$info_addr;
      var $dst_ptr_not_leading_to_static_ptr25=(($41+20)|0);
      HEAP32[(($dst_ptr_not_leading_to_static_ptr25)>>2)]=$40;
      var $42=$info_addr;
      var $number_to_dst_ptr=(($42+40)|0);
      var $43=HEAP32[(($number_to_dst_ptr)>>2)];
      var $add=((($43)+(1))|0);
      HEAP32[(($number_to_dst_ptr)>>2)]=$add;
      var $44=$info_addr;
      var $number_to_static_ptr=(($44+36)|0);
      var $45=HEAP32[(($number_to_static_ptr)>>2)];
      var $cmp26=(($45)|0)==1;
      if ($cmp26) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $46=$info_addr;
      var $path_dst_ptr_to_static_ptr=(($46+24)|0);
      var $47=HEAP32[(($path_dst_ptr_to_static_ptr)>>2)];
      var $cmp27=(($47)|0)==2;
      if ($cmp27) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $48=$info_addr;
      var $search_done=(($48+54)|0);
      HEAP8[($search_done)]=1;
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $49=$is_dst_type_derived_from_static_type13;
      var $tobool31=(($49) & 1);
      if ($tobool31) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $50=$info_addr;
      var $is_dst_type_derived_from_static_type33=(($50+44)|0);
      HEAP32[(($is_dst_type_derived_from_static_type33)>>2)]=3;
      label = 23; break;
    case 22: 
      var $51=$info_addr;
      var $is_dst_type_derived_from_static_type35=(($51+44)|0);
      HEAP32[(($is_dst_type_derived_from_static_type35)>>2)]=4;
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 27; break;
    case 26: 
      var $__base_type40=(($this1+8)|0);
      var $52=HEAP32[(($__base_type40)>>2)];
      var $53=$52;
      var $vtable41=HEAP32[(($53)>>2)];
      var $vfn42=(($vtable41+24)|0);
      var $54=HEAP32[(($vfn42)>>2)];
      var $55=$info_addr;
      var $56=$current_ptr_addr;
      var $57=$path_below_addr;
      var $58=$use_strcmp_addr;
      var $tobool43=(($58) & 1);
      FUNCTION_TABLE[$54]($52, $55, $56, $57, $tobool43);
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib["X"]=1;

function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $this_addr;
      var $info_addr;
      var $current_ptr_addr;
      var $path_below_addr;
      var $use_strcmp_addr;
      $this_addr=$this;
      $info_addr=$info;
      $current_ptr_addr=$current_ptr;
      $path_below_addr=$path_below;
      var $frombool=(($use_strcmp)&1);
      $use_strcmp_addr=$frombool;
      var $this1=$this_addr;
      var $0=$this1;
      var $1=$info_addr;
      var $static_type=(($1+8)|0);
      var $2=HEAP32[(($static_type)>>2)];
      var $3=$2;
      var $4=$use_strcmp_addr;
      var $tobool=(($4) & 1);
      var $call=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $3, $tobool);
      if ($call) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$info_addr;
      var $6=$current_ptr_addr;
      var $7=$path_below_addr;
      __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($this1, $5, $6, $7);
      label = 16; break;
    case 4: 
      var $8=$this1;
      var $9=$info_addr;
      var $dst_type=(($9)|0);
      var $10=HEAP32[(($dst_type)>>2)];
      var $11=$10;
      var $12=$use_strcmp_addr;
      var $tobool2=(($12) & 1);
      var $call3=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($8, $11, $tobool2);
      if ($call3) { label = 5; break; } else { label = 15; break; }
    case 5: 
      var $13=$current_ptr_addr;
      var $14=$info_addr;
      var $dst_ptr_leading_to_static_ptr=(($14+16)|0);
      var $15=HEAP32[(($dst_ptr_leading_to_static_ptr)>>2)];
      var $cmp=(($13)|0)==(($15)|0);
      if ($cmp) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $16=$current_ptr_addr;
      var $17=$info_addr;
      var $dst_ptr_not_leading_to_static_ptr=(($17+20)|0);
      var $18=HEAP32[(($dst_ptr_not_leading_to_static_ptr)>>2)];
      var $cmp5=(($16)|0)==(($18)|0);
      if ($cmp5) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $19=$path_below_addr;
      var $cmp7=(($19)|0)==1;
      if ($cmp7) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $20=$info_addr;
      var $path_dynamic_ptr_to_dst_ptr=(($20+32)|0);
      HEAP32[(($path_dynamic_ptr_to_dst_ptr)>>2)]=1;
      label = 9; break;
    case 9: 
      label = 14; break;
    case 10: 
      var $21=$path_below_addr;
      var $22=$info_addr;
      var $path_dynamic_ptr_to_dst_ptr10=(($22+32)|0);
      HEAP32[(($path_dynamic_ptr_to_dst_ptr10)>>2)]=$21;
      var $23=$current_ptr_addr;
      var $24=$info_addr;
      var $dst_ptr_not_leading_to_static_ptr11=(($24+20)|0);
      HEAP32[(($dst_ptr_not_leading_to_static_ptr11)>>2)]=$23;
      var $25=$info_addr;
      var $number_to_dst_ptr=(($25+40)|0);
      var $26=HEAP32[(($number_to_dst_ptr)>>2)];
      var $add=((($26)+(1))|0);
      HEAP32[(($number_to_dst_ptr)>>2)]=$add;
      var $27=$info_addr;
      var $number_to_static_ptr=(($27+36)|0);
      var $28=HEAP32[(($number_to_static_ptr)>>2)];
      var $cmp12=(($28)|0)==1;
      if ($cmp12) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $29=$info_addr;
      var $path_dst_ptr_to_static_ptr=(($29+24)|0);
      var $30=HEAP32[(($path_dst_ptr_to_static_ptr)>>2)];
      var $cmp13=(($30)|0)==2;
      if ($cmp13) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $31=$info_addr;
      var $search_done=(($31+54)|0);
      HEAP8[($search_done)]=1;
      label = 13; break;
    case 13: 
      var $32=$info_addr;
      var $is_dst_type_derived_from_static_type=(($32+44)|0);
      HEAP32[(($is_dst_type_derived_from_static_type)>>2)]=4;
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib["X"]=1;

function __ZNSt9type_infoD2Ev($this) {
  var label = 0;


  var $this_addr;
  $this_addr=$this;
  var $this1=$this_addr;

  return;
}


function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $this_addr;
      var $info_addr;
      var $dst_ptr_addr;
      var $current_ptr_addr;
      var $path_below_addr;
      var $use_strcmp_addr;
      $this_addr=$this;
      $info_addr=$info;
      $dst_ptr_addr=$dst_ptr;
      $current_ptr_addr=$current_ptr;
      $path_below_addr=$path_below;
      var $frombool=(($use_strcmp)&1);
      $use_strcmp_addr=$frombool;
      var $this1=$this_addr;
      var $0=$this1;
      var $1=$info_addr;
      var $static_type=(($1+8)|0);
      var $2=HEAP32[(($static_type)>>2)];
      var $3=$2;
      var $4=$use_strcmp_addr;
      var $tobool=(($4) & 1);
      var $call=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $3, $tobool);
      if ($call) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$this1;
      var $6=$info_addr;
      var $7=$dst_ptr_addr;
      var $8=$current_ptr_addr;
      var $9=$path_below_addr;
      __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($5, $6, $7, $8, $9);
      label = 5; break;
    case 4: 
      var $__base_type=(($this1+8)|0);
      var $10=HEAP32[(($__base_type)>>2)];
      var $11=$10;
      var $vtable=HEAP32[(($11)>>2)];
      var $vfn=(($vtable+20)|0);
      var $12=HEAP32[(($vfn)>>2)];
      var $13=$info_addr;
      var $14=$dst_ptr_addr;
      var $15=$current_ptr_addr;
      var $16=$path_below_addr;
      var $17=$use_strcmp_addr;
      var $tobool2=(($17) & 1);
      FUNCTION_TABLE[$12]($10, $13, $14, $15, $16, $tobool2);
      label = 5; break;
    case 5: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $this_addr;
      var $info_addr;
      var $dst_ptr_addr;
      var $current_ptr_addr;
      var $path_below_addr;
      var $use_strcmp_addr;
      $this_addr=$this;
      $info_addr=$info;
      $dst_ptr_addr=$dst_ptr;
      $current_ptr_addr=$current_ptr;
      $path_below_addr=$path_below;
      var $frombool=(($use_strcmp)&1);
      $use_strcmp_addr=$frombool;
      var $this1=$this_addr;
      var $0=$this1;
      var $1=$info_addr;
      var $static_type=(($1+8)|0);
      var $2=HEAP32[(($static_type)>>2)];
      var $3=$2;
      var $4=$use_strcmp_addr;
      var $tobool=(($4) & 1);
      var $call=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $3, $tobool);
      if ($call) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$info_addr;
      var $6=$dst_ptr_addr;
      var $7=$current_ptr_addr;
      var $8=$path_below_addr;
      __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this1, $5, $6, $7, $8);
      label = 4; break;
    case 4: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _free($mem) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mem_addr;
      var $p;
      var $psize;
      var $next;
      var $prevsize;
      var $prev;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F60;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F245;
      var $B247;
      var $I249;
      var $TP285;
      var $XP286;
      var $R288;
      var $F293;
      var $RP306;
      var $CP317;
      var $H343;
      var $C0385;
      var $C1386;
      var $I447;
      var $B449;
      var $F452;
      var $tp;
      var $H475;
      var $I476;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K525;
      var $C;
      var $F558;
      $mem_addr=$mem;
      var $0=$mem_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 197; break; }
    case 3: 
      var $1=$mem_addr;
      var $add_ptr=((($1)-(8))|0);
      var $2=$add_ptr;
      $p=$2;
      var $3=$p;
      var $4=$3;
      var $5=HEAP32[((((5244100)|0))>>2)];
      var $cmp1=(($4)>>>0) >= (($5)>>>0);
      if ($cmp1) { label = 4; break; } else { var $8 = 0;label = 5; break; }
    case 4: 
      var $6=$p;
      var $head=(($6+4)|0);
      var $7=HEAP32[(($head)>>2)];
      var $and=$7 & 3;
      var $cmp2=(($and)|0)!=1;
      var $8 = $cmp2;label = 5; break;
    case 5: 
      var $8;
      var $land_ext=(($8)&1);
      var $expval=($land_ext);
      var $tobool=(($expval)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 194; break; }
    case 6: 
      var $9=$p;
      var $head4=(($9+4)|0);
      var $10=HEAP32[(($head4)>>2)];
      var $and5=$10 & -8;
      $psize=$and5;
      var $11=$p;
      var $12=$11;
      var $13=$psize;
      var $add_ptr6=(($12+$13)|0);
      var $14=$add_ptr6;
      $next=$14;
      var $15=$p;
      var $head7=(($15+4)|0);
      var $16=HEAP32[(($head7)>>2)];
      var $and8=$16 & 1;
      var $tobool9=(($and8)|0)!=0;
      if ($tobool9) { label = 78; break; } else { label = 7; break; }
    case 7: 
      var $17=$p;
      var $prev_foot=(($17)|0);
      var $18=HEAP32[(($prev_foot)>>2)];
      $prevsize=$18;
      var $19=$p;
      var $head11=(($19+4)|0);
      var $20=HEAP32[(($head11)>>2)];
      var $and12=$20 & 3;
      var $cmp13=(($and12)|0)==0;
      if ($cmp13) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $21=$prevsize;
      var $add=((($21)+(16))|0);
      var $22=$psize;
      var $add15=((($22)+($add))|0);
      $psize=$add15;
      label = 196; break;
    case 9: 
      var $23=$p;
      var $24=$23;
      var $25=$prevsize;
      var $idx_neg=(((-$25))|0);
      var $add_ptr16=(($24+$idx_neg)|0);
      var $26=$add_ptr16;
      $prev=$26;
      var $27=$prevsize;
      var $28=$psize;
      var $add17=((($28)+($27))|0);
      $psize=$add17;
      var $29=$prev;
      $p=$29;
      var $30=$prev;
      var $31=$30;
      var $32=HEAP32[((((5244100)|0))>>2)];
      var $cmp18=(($31)>>>0) >= (($32)>>>0);
      var $conv=(($cmp18)&1);
      var $expval19=($conv);
      var $tobool20=(($expval19)|0)!=0;
      if ($tobool20) { label = 10; break; } else { label = 75; break; }
    case 10: 
      var $33=$p;
      var $34=HEAP32[((((5244104)|0))>>2)];
      var $cmp22=(($33)|0)!=(($34)|0);
      if ($cmp22) { label = 11; break; } else { label = 71; break; }
    case 11: 
      var $35=$prevsize;
      var $shr=$35 >>> 3;
      var $cmp25=(($shr)>>>0) < 32;
      if ($cmp25) { label = 12; break; } else { label = 24; break; }
    case 12: 
      var $36=$p;
      var $fd=(($36+8)|0);
      var $37=HEAP32[(($fd)>>2)];
      $F=$37;
      var $38=$p;
      var $bk=(($38+12)|0);
      var $39=HEAP32[(($bk)>>2)];
      $B=$39;
      var $40=$prevsize;
      var $shr28=$40 >>> 3;
      $I=$shr28;
      var $41=$F;
      var $42=$B;
      var $cmp29=(($41)|0)==(($42)|0);
      if ($cmp29) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $43=$I;
      var $shl=1 << $43;
      var $neg=$shl ^ -1;
      var $44=HEAP32[((((5244084)|0))>>2)];
      var $and32=$44 & $neg;
      HEAP32[((((5244084)|0))>>2)]=$and32;
      label = 23; break;
    case 14: 
      var $45=$F;
      var $46=$I;
      var $shl34=$46 << 1;
      var $arrayidx=((((5244124)|0)+($shl34<<2))|0);
      var $47=$arrayidx;
      var $48=$47;
      var $cmp35=(($45)|0)==(($48)|0);
      if ($cmp35) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $49=$F;
      var $50=$49;
      var $51=HEAP32[((((5244100)|0))>>2)];
      var $cmp37=(($50)>>>0) >= (($51)>>>0);
      if ($cmp37) { label = 16; break; } else { var $60 = 0;label = 19; break; }
    case 16: 
      var $52=$B;
      var $53=$I;
      var $shl40=$53 << 1;
      var $arrayidx41=((((5244124)|0)+($shl40<<2))|0);
      var $54=$arrayidx41;
      var $55=$54;
      var $cmp42=(($52)|0)==(($55)|0);
      if ($cmp42) { var $59 = 1;label = 18; break; } else { label = 17; break; }
    case 17: 
      var $56=$B;
      var $57=$56;
      var $58=HEAP32[((((5244100)|0))>>2)];
      var $cmp44=(($57)>>>0) >= (($58)>>>0);
      var $59 = $cmp44;label = 18; break;
    case 18: 
      var $59;
      var $60 = $59;label = 19; break;
    case 19: 
      var $60;
      var $land_ext47=(($60)&1);
      var $expval48=($land_ext47);
      var $tobool49=(($expval48)|0)!=0;
      if ($tobool49) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $61=$B;
      var $62=$F;
      var $bk51=(($62+12)|0);
      HEAP32[(($bk51)>>2)]=$61;
      var $63=$F;
      var $64=$B;
      var $fd52=(($64+8)|0);
      HEAP32[(($fd52)>>2)]=$63;
      label = 22; break;
    case 21: 
      _abort();
      throw "Reached an unreachable!"
    case 22: 
      label = 23; break;
    case 23: 
      label = 70; break;
    case 24: 
      var $65=$p;
      var $66=$65;
      $TP=$66;
      var $67=$TP;
      var $parent=(($67+24)|0);
      var $68=HEAP32[(($parent)>>2)];
      $XP=$68;
      var $69=$TP;
      var $bk56=(($69+12)|0);
      var $70=HEAP32[(($bk56)>>2)];
      var $71=$TP;
      var $cmp57=(($70)|0)!=(($71)|0);
      if ($cmp57) { label = 25; break; } else { label = 29; break; }
    case 25: 
      var $72=$TP;
      var $fd61=(($72+8)|0);
      var $73=HEAP32[(($fd61)>>2)];
      $F60=$73;
      var $74=$TP;
      var $bk62=(($74+12)|0);
      var $75=HEAP32[(($bk62)>>2)];
      $R=$75;
      var $76=$F60;
      var $77=$76;
      var $78=HEAP32[((((5244100)|0))>>2)];
      var $cmp63=(($77)>>>0) >= (($78)>>>0);
      var $conv64=(($cmp63)&1);
      var $expval65=($conv64);
      var $tobool66=(($expval65)|0)!=0;
      if ($tobool66) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $79=$R;
      var $80=$F60;
      var $bk68=(($80+12)|0);
      HEAP32[(($bk68)>>2)]=$79;
      var $81=$F60;
      var $82=$R;
      var $fd69=(($82+8)|0);
      HEAP32[(($fd69)>>2)]=$81;
      label = 28; break;
    case 27: 
      _abort();
      throw "Reached an unreachable!"
    case 28: 
      label = 41; break;
    case 29: 
      var $83=$TP;
      var $child=(($83+16)|0);
      var $arrayidx73=(($child+4)|0);
      $RP=$arrayidx73;
      var $84=HEAP32[(($arrayidx73)>>2)];
      $R=$84;
      var $cmp74=(($84)|0)!=0;
      if ($cmp74) { label = 31; break; } else { label = 30; break; }
    case 30: 
      var $85=$TP;
      var $child77=(($85+16)|0);
      var $arrayidx78=(($child77)|0);
      $RP=$arrayidx78;
      var $86=HEAP32[(($arrayidx78)>>2)];
      $R=$86;
      var $cmp79=(($86)|0)!=0;
      if ($cmp79) { label = 31; break; } else { label = 40; break; }
    case 31: 
      label = 32; break;
    case 32: 
      var $87=$R;
      var $child82=(($87+16)|0);
      var $arrayidx83=(($child82+4)|0);
      $CP=$arrayidx83;
      var $88=HEAP32[(($arrayidx83)>>2)];
      var $cmp84=(($88)|0)!=0;
      if ($cmp84) { var $91 = 1;label = 34; break; } else { label = 33; break; }
    case 33: 
      var $89=$R;
      var $child87=(($89+16)|0);
      var $arrayidx88=(($child87)|0);
      $CP=$arrayidx88;
      var $90=HEAP32[(($arrayidx88)>>2)];
      var $cmp89=(($90)|0)!=0;
      var $91 = $cmp89;label = 34; break;
    case 34: 
      var $91;
      if ($91) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $92=$CP;
      $RP=$92;
      var $93=HEAP32[(($92)>>2)];
      $R=$93;
      label = 32; break;
    case 36: 
      var $94=$RP;
      var $95=$94;
      var $96=HEAP32[((((5244100)|0))>>2)];
      var $cmp92=(($95)>>>0) >= (($96)>>>0);
      var $conv93=(($cmp92)&1);
      var $expval94=($conv93);
      var $tobool95=(($expval94)|0)!=0;
      if ($tobool95) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $97=$RP;
      HEAP32[(($97)>>2)]=0;
      label = 39; break;
    case 38: 
      _abort();
      throw "Reached an unreachable!"
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $98=$XP;
      var $cmp101=(($98)|0)!=0;
      if ($cmp101) { label = 42; break; } else { label = 69; break; }
    case 42: 
      var $99=$TP;
      var $index=(($99+28)|0);
      var $100=HEAP32[(($index)>>2)];
      var $arrayidx104=((((5244388)|0)+($100<<2))|0);
      $H=$arrayidx104;
      var $101=$TP;
      var $102=$H;
      var $103=HEAP32[(($102)>>2)];
      var $cmp105=(($101)|0)==(($103)|0);
      if ($cmp105) { label = 43; break; } else { label = 46; break; }
    case 43: 
      var $104=$R;
      var $105=$H;
      HEAP32[(($105)>>2)]=$104;
      var $cmp108=(($104)|0)==0;
      if ($cmp108) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $106=$TP;
      var $index111=(($106+28)|0);
      var $107=HEAP32[(($index111)>>2)];
      var $shl112=1 << $107;
      var $neg113=$shl112 ^ -1;
      var $108=HEAP32[((((5244088)|0))>>2)];
      var $and114=$108 & $neg113;
      HEAP32[((((5244088)|0))>>2)]=$and114;
      label = 45; break;
    case 45: 
      label = 53; break;
    case 46: 
      var $109=$XP;
      var $110=$109;
      var $111=HEAP32[((((5244100)|0))>>2)];
      var $cmp117=(($110)>>>0) >= (($111)>>>0);
      var $conv118=(($cmp117)&1);
      var $expval119=($conv118);
      var $tobool120=(($expval119)|0)!=0;
      if ($tobool120) { label = 47; break; } else { label = 51; break; }
    case 47: 
      var $112=$XP;
      var $child122=(($112+16)|0);
      var $arrayidx123=(($child122)|0);
      var $113=HEAP32[(($arrayidx123)>>2)];
      var $114=$TP;
      var $cmp124=(($113)|0)==(($114)|0);
      if ($cmp124) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $115=$R;
      var $116=$XP;
      var $child127=(($116+16)|0);
      var $arrayidx128=(($child127)|0);
      HEAP32[(($arrayidx128)>>2)]=$115;
      label = 50; break;
    case 49: 
      var $117=$R;
      var $118=$XP;
      var $child130=(($118+16)|0);
      var $arrayidx131=(($child130+4)|0);
      HEAP32[(($arrayidx131)>>2)]=$117;
      label = 50; break;
    case 50: 
      label = 52; break;
    case 51: 
      _abort();
      throw "Reached an unreachable!"
    case 52: 
      label = 53; break;
    case 53: 
      var $119=$R;
      var $cmp136=(($119)|0)!=0;
      if ($cmp136) { label = 54; break; } else { label = 68; break; }
    case 54: 
      var $120=$R;
      var $121=$120;
      var $122=HEAP32[((((5244100)|0))>>2)];
      var $cmp139=(($121)>>>0) >= (($122)>>>0);
      var $conv140=(($cmp139)&1);
      var $expval141=($conv140);
      var $tobool142=(($expval141)|0)!=0;
      if ($tobool142) { label = 55; break; } else { label = 66; break; }
    case 55: 
      var $123=$XP;
      var $124=$R;
      var $parent144=(($124+24)|0);
      HEAP32[(($parent144)>>2)]=$123;
      var $125=$TP;
      var $child145=(($125+16)|0);
      var $arrayidx146=(($child145)|0);
      var $126=HEAP32[(($arrayidx146)>>2)];
      $C0=$126;
      var $cmp147=(($126)|0)!=0;
      if ($cmp147) { label = 56; break; } else { label = 60; break; }
    case 56: 
      var $127=$C0;
      var $128=$127;
      var $129=HEAP32[((((5244100)|0))>>2)];
      var $cmp150=(($128)>>>0) >= (($129)>>>0);
      var $conv151=(($cmp150)&1);
      var $expval152=($conv151);
      var $tobool153=(($expval152)|0)!=0;
      if ($tobool153) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $130=$C0;
      var $131=$R;
      var $child155=(($131+16)|0);
      var $arrayidx156=(($child155)|0);
      HEAP32[(($arrayidx156)>>2)]=$130;
      var $132=$R;
      var $133=$C0;
      var $parent157=(($133+24)|0);
      HEAP32[(($parent157)>>2)]=$132;
      label = 59; break;
    case 58: 
      _abort();
      throw "Reached an unreachable!"
    case 59: 
      label = 60; break;
    case 60: 
      var $134=$TP;
      var $child161=(($134+16)|0);
      var $arrayidx162=(($child161+4)|0);
      var $135=HEAP32[(($arrayidx162)>>2)];
      $C1=$135;
      var $cmp163=(($135)|0)!=0;
      if ($cmp163) { label = 61; break; } else { label = 65; break; }
    case 61: 
      var $136=$C1;
      var $137=$136;
      var $138=HEAP32[((((5244100)|0))>>2)];
      var $cmp166=(($137)>>>0) >= (($138)>>>0);
      var $conv167=(($cmp166)&1);
      var $expval168=($conv167);
      var $tobool169=(($expval168)|0)!=0;
      if ($tobool169) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $139=$C1;
      var $140=$R;
      var $child171=(($140+16)|0);
      var $arrayidx172=(($child171+4)|0);
      HEAP32[(($arrayidx172)>>2)]=$139;
      var $141=$R;
      var $142=$C1;
      var $parent173=(($142+24)|0);
      HEAP32[(($parent173)>>2)]=$141;
      label = 64; break;
    case 63: 
      _abort();
      throw "Reached an unreachable!"
    case 64: 
      label = 65; break;
    case 65: 
      label = 67; break;
    case 66: 
      _abort();
      throw "Reached an unreachable!"
    case 67: 
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      label = 74; break;
    case 71: 
      var $143=$next;
      var $head183=(($143+4)|0);
      var $144=HEAP32[(($head183)>>2)];
      var $and184=$144 & 3;
      var $cmp185=(($and184)|0)==3;
      if ($cmp185) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $145=$psize;
      HEAP32[((((5244092)|0))>>2)]=$145;
      var $146=$next;
      var $head188=(($146+4)|0);
      var $147=HEAP32[(($head188)>>2)];
      var $and189=$147 & -2;
      HEAP32[(($head188)>>2)]=$and189;
      var $148=$psize;
      var $or=$148 | 1;
      var $149=$p;
      var $head190=(($149+4)|0);
      HEAP32[(($head190)>>2)]=$or;
      var $150=$psize;
      var $151=$p;
      var $152=$151;
      var $153=$psize;
      var $add_ptr191=(($152+$153)|0);
      var $154=$add_ptr191;
      var $prev_foot192=(($154)|0);
      HEAP32[(($prev_foot192)>>2)]=$150;
      label = 196; break;
    case 73: 
      label = 74; break;
    case 74: 
      label = 76; break;
    case 75: 
      label = 195; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      var $155=$p;
      var $156=$155;
      var $157=$next;
      var $158=$157;
      var $cmp199=(($156)>>>0) < (($158)>>>0);
      if ($cmp199) { label = 79; break; } else { var $161 = 0;label = 80; break; }
    case 79: 
      var $159=$next;
      var $head202=(($159+4)|0);
      var $160=HEAP32[(($head202)>>2)];
      var $and203=$160 & 1;
      var $tobool204=(($and203)|0)!=0;
      var $161 = $tobool204;label = 80; break;
    case 80: 
      var $161;
      var $land_ext206=(($161)&1);
      var $expval207=($land_ext206);
      var $tobool208=(($expval207)|0)!=0;
      if ($tobool208) { label = 81; break; } else { label = 193; break; }
    case 81: 
      var $162=$next;
      var $head210=(($162+4)|0);
      var $163=HEAP32[(($head210)>>2)];
      var $and211=$163 & 2;
      var $tobool212=(($and211)|0)!=0;
      if ($tobool212) { label = 154; break; } else { label = 82; break; }
    case 82: 
      var $164=$next;
      var $165=HEAP32[((((5244108)|0))>>2)];
      var $cmp214=(($164)|0)==(($165)|0);
      if ($cmp214) { label = 83; break; } else { label = 88; break; }
    case 83: 
      var $166=$psize;
      var $167=HEAP32[((((5244096)|0))>>2)];
      var $add217=((($167)+($166))|0);
      HEAP32[((((5244096)|0))>>2)]=$add217;
      $tsize=$add217;
      var $168=$p;
      HEAP32[((((5244108)|0))>>2)]=$168;
      var $169=$tsize;
      var $or218=$169 | 1;
      var $170=$p;
      var $head219=(($170+4)|0);
      HEAP32[(($head219)>>2)]=$or218;
      var $171=$p;
      var $172=HEAP32[((((5244104)|0))>>2)];
      var $cmp220=(($171)|0)==(($172)|0);
      if ($cmp220) { label = 84; break; } else { label = 85; break; }
    case 84: 
      HEAP32[((((5244104)|0))>>2)]=0;
      HEAP32[((((5244092)|0))>>2)]=0;
      label = 85; break;
    case 85: 
      var $173=$tsize;
      var $174=HEAP32[((((5244112)|0))>>2)];
      var $cmp224=(($173)>>>0) > (($174)>>>0);
      if ($cmp224) { label = 86; break; } else { label = 87; break; }
    case 86: 
      var $call=_sys_trim(5244084, 0);
      label = 87; break;
    case 87: 
      label = 196; break;
    case 88: 
      var $175=$next;
      var $176=HEAP32[((((5244104)|0))>>2)];
      var $cmp229=(($175)|0)==(($176)|0);
      if ($cmp229) { label = 89; break; } else { label = 90; break; }
    case 89: 
      var $177=$psize;
      var $178=HEAP32[((((5244092)|0))>>2)];
      var $add232=((($178)+($177))|0);
      HEAP32[((((5244092)|0))>>2)]=$add232;
      $dsize=$add232;
      var $179=$p;
      HEAP32[((((5244104)|0))>>2)]=$179;
      var $180=$dsize;
      var $or233=$180 | 1;
      var $181=$p;
      var $head234=(($181+4)|0);
      HEAP32[(($head234)>>2)]=$or233;
      var $182=$dsize;
      var $183=$p;
      var $184=$183;
      var $185=$dsize;
      var $add_ptr235=(($184+$185)|0);
      var $186=$add_ptr235;
      var $prev_foot236=(($186)|0);
      HEAP32[(($prev_foot236)>>2)]=$182;
      label = 196; break;
    case 90: 
      var $187=$next;
      var $head238=(($187+4)|0);
      var $188=HEAP32[(($head238)>>2)];
      var $and239=$188 & -8;
      $nsize=$and239;
      var $189=$nsize;
      var $190=$psize;
      var $add240=((($190)+($189))|0);
      $psize=$add240;
      var $191=$nsize;
      var $shr241=$191 >>> 3;
      var $cmp242=(($shr241)>>>0) < 32;
      if ($cmp242) { label = 91; break; } else { label = 103; break; }
    case 91: 
      var $192=$next;
      var $fd246=(($192+8)|0);
      var $193=HEAP32[(($fd246)>>2)];
      $F245=$193;
      var $194=$next;
      var $bk248=(($194+12)|0);
      var $195=HEAP32[(($bk248)>>2)];
      $B247=$195;
      var $196=$nsize;
      var $shr250=$196 >>> 3;
      $I249=$shr250;
      var $197=$F245;
      var $198=$B247;
      var $cmp251=(($197)|0)==(($198)|0);
      if ($cmp251) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $199=$I249;
      var $shl254=1 << $199;
      var $neg255=$shl254 ^ -1;
      var $200=HEAP32[((((5244084)|0))>>2)];
      var $and256=$200 & $neg255;
      HEAP32[((((5244084)|0))>>2)]=$and256;
      label = 102; break;
    case 93: 
      var $201=$F245;
      var $202=$I249;
      var $shl258=$202 << 1;
      var $arrayidx259=((((5244124)|0)+($shl258<<2))|0);
      var $203=$arrayidx259;
      var $204=$203;
      var $cmp260=(($201)|0)==(($204)|0);
      if ($cmp260) { label = 95; break; } else { label = 94; break; }
    case 94: 
      var $205=$F245;
      var $206=$205;
      var $207=HEAP32[((((5244100)|0))>>2)];
      var $cmp263=(($206)>>>0) >= (($207)>>>0);
      if ($cmp263) { label = 95; break; } else { var $216 = 0;label = 98; break; }
    case 95: 
      var $208=$B247;
      var $209=$I249;
      var $shl266=$209 << 1;
      var $arrayidx267=((((5244124)|0)+($shl266<<2))|0);
      var $210=$arrayidx267;
      var $211=$210;
      var $cmp268=(($208)|0)==(($211)|0);
      if ($cmp268) { var $215 = 1;label = 97; break; } else { label = 96; break; }
    case 96: 
      var $212=$B247;
      var $213=$212;
      var $214=HEAP32[((((5244100)|0))>>2)];
      var $cmp271=(($213)>>>0) >= (($214)>>>0);
      var $215 = $cmp271;label = 97; break;
    case 97: 
      var $215;
      var $216 = $215;label = 98; break;
    case 98: 
      var $216;
      var $land_ext275=(($216)&1);
      var $expval276=($land_ext275);
      var $tobool277=(($expval276)|0)!=0;
      if ($tobool277) { label = 99; break; } else { label = 100; break; }
    case 99: 
      var $217=$B247;
      var $218=$F245;
      var $bk279=(($218+12)|0);
      HEAP32[(($bk279)>>2)]=$217;
      var $219=$F245;
      var $220=$B247;
      var $fd280=(($220+8)|0);
      HEAP32[(($fd280)>>2)]=$219;
      label = 101; break;
    case 100: 
      _abort();
      throw "Reached an unreachable!"
    case 101: 
      label = 102; break;
    case 102: 
      label = 149; break;
    case 103: 
      var $221=$next;
      var $222=$221;
      $TP285=$222;
      var $223=$TP285;
      var $parent287=(($223+24)|0);
      var $224=HEAP32[(($parent287)>>2)];
      $XP286=$224;
      var $225=$TP285;
      var $bk289=(($225+12)|0);
      var $226=HEAP32[(($bk289)>>2)];
      var $227=$TP285;
      var $cmp290=(($226)|0)!=(($227)|0);
      if ($cmp290) { label = 104; break; } else { label = 108; break; }
    case 104: 
      var $228=$TP285;
      var $fd294=(($228+8)|0);
      var $229=HEAP32[(($fd294)>>2)];
      $F293=$229;
      var $230=$TP285;
      var $bk295=(($230+12)|0);
      var $231=HEAP32[(($bk295)>>2)];
      $R288=$231;
      var $232=$F293;
      var $233=$232;
      var $234=HEAP32[((((5244100)|0))>>2)];
      var $cmp296=(($233)>>>0) >= (($234)>>>0);
      var $conv297=(($cmp296)&1);
      var $expval298=($conv297);
      var $tobool299=(($expval298)|0)!=0;
      if ($tobool299) { label = 105; break; } else { label = 106; break; }
    case 105: 
      var $235=$R288;
      var $236=$F293;
      var $bk301=(($236+12)|0);
      HEAP32[(($bk301)>>2)]=$235;
      var $237=$F293;
      var $238=$R288;
      var $fd302=(($238+8)|0);
      HEAP32[(($fd302)>>2)]=$237;
      label = 107; break;
    case 106: 
      _abort();
      throw "Reached an unreachable!"
    case 107: 
      label = 120; break;
    case 108: 
      var $239=$TP285;
      var $child307=(($239+16)|0);
      var $arrayidx308=(($child307+4)|0);
      $RP306=$arrayidx308;
      var $240=HEAP32[(($arrayidx308)>>2)];
      $R288=$240;
      var $cmp309=(($240)|0)!=0;
      if ($cmp309) { label = 110; break; } else { label = 109; break; }
    case 109: 
      var $241=$TP285;
      var $child312=(($241+16)|0);
      var $arrayidx313=(($child312)|0);
      $RP306=$arrayidx313;
      var $242=HEAP32[(($arrayidx313)>>2)];
      $R288=$242;
      var $cmp314=(($242)|0)!=0;
      if ($cmp314) { label = 110; break; } else { label = 119; break; }
    case 110: 
      label = 111; break;
    case 111: 
      var $243=$R288;
      var $child319=(($243+16)|0);
      var $arrayidx320=(($child319+4)|0);
      $CP317=$arrayidx320;
      var $244=HEAP32[(($arrayidx320)>>2)];
      var $cmp321=(($244)|0)!=0;
      if ($cmp321) { var $247 = 1;label = 113; break; } else { label = 112; break; }
    case 112: 
      var $245=$R288;
      var $child324=(($245+16)|0);
      var $arrayidx325=(($child324)|0);
      $CP317=$arrayidx325;
      var $246=HEAP32[(($arrayidx325)>>2)];
      var $cmp326=(($246)|0)!=0;
      var $247 = $cmp326;label = 113; break;
    case 113: 
      var $247;
      if ($247) { label = 114; break; } else { label = 115; break; }
    case 114: 
      var $248=$CP317;
      $RP306=$248;
      var $249=HEAP32[(($248)>>2)];
      $R288=$249;
      label = 111; break;
    case 115: 
      var $250=$RP306;
      var $251=$250;
      var $252=HEAP32[((((5244100)|0))>>2)];
      var $cmp331=(($251)>>>0) >= (($252)>>>0);
      var $conv332=(($cmp331)&1);
      var $expval333=($conv332);
      var $tobool334=(($expval333)|0)!=0;
      if ($tobool334) { label = 116; break; } else { label = 117; break; }
    case 116: 
      var $253=$RP306;
      HEAP32[(($253)>>2)]=0;
      label = 118; break;
    case 117: 
      _abort();
      throw "Reached an unreachable!"
    case 118: 
      label = 119; break;
    case 119: 
      label = 120; break;
    case 120: 
      var $254=$XP286;
      var $cmp340=(($254)|0)!=0;
      if ($cmp340) { label = 121; break; } else { label = 148; break; }
    case 121: 
      var $255=$TP285;
      var $index344=(($255+28)|0);
      var $256=HEAP32[(($index344)>>2)];
      var $arrayidx345=((((5244388)|0)+($256<<2))|0);
      $H343=$arrayidx345;
      var $257=$TP285;
      var $258=$H343;
      var $259=HEAP32[(($258)>>2)];
      var $cmp346=(($257)|0)==(($259)|0);
      if ($cmp346) { label = 122; break; } else { label = 125; break; }
    case 122: 
      var $260=$R288;
      var $261=$H343;
      HEAP32[(($261)>>2)]=$260;
      var $cmp349=(($260)|0)==0;
      if ($cmp349) { label = 123; break; } else { label = 124; break; }
    case 123: 
      var $262=$TP285;
      var $index352=(($262+28)|0);
      var $263=HEAP32[(($index352)>>2)];
      var $shl353=1 << $263;
      var $neg354=$shl353 ^ -1;
      var $264=HEAP32[((((5244088)|0))>>2)];
      var $and355=$264 & $neg354;
      HEAP32[((((5244088)|0))>>2)]=$and355;
      label = 124; break;
    case 124: 
      label = 132; break;
    case 125: 
      var $265=$XP286;
      var $266=$265;
      var $267=HEAP32[((((5244100)|0))>>2)];
      var $cmp358=(($266)>>>0) >= (($267)>>>0);
      var $conv359=(($cmp358)&1);
      var $expval360=($conv359);
      var $tobool361=(($expval360)|0)!=0;
      if ($tobool361) { label = 126; break; } else { label = 130; break; }
    case 126: 
      var $268=$XP286;
      var $child363=(($268+16)|0);
      var $arrayidx364=(($child363)|0);
      var $269=HEAP32[(($arrayidx364)>>2)];
      var $270=$TP285;
      var $cmp365=(($269)|0)==(($270)|0);
      if ($cmp365) { label = 127; break; } else { label = 128; break; }
    case 127: 
      var $271=$R288;
      var $272=$XP286;
      var $child368=(($272+16)|0);
      var $arrayidx369=(($child368)|0);
      HEAP32[(($arrayidx369)>>2)]=$271;
      label = 129; break;
    case 128: 
      var $273=$R288;
      var $274=$XP286;
      var $child371=(($274+16)|0);
      var $arrayidx372=(($child371+4)|0);
      HEAP32[(($arrayidx372)>>2)]=$273;
      label = 129; break;
    case 129: 
      label = 131; break;
    case 130: 
      _abort();
      throw "Reached an unreachable!"
    case 131: 
      label = 132; break;
    case 132: 
      var $275=$R288;
      var $cmp377=(($275)|0)!=0;
      if ($cmp377) { label = 133; break; } else { label = 147; break; }
    case 133: 
      var $276=$R288;
      var $277=$276;
      var $278=HEAP32[((((5244100)|0))>>2)];
      var $cmp380=(($277)>>>0) >= (($278)>>>0);
      var $conv381=(($cmp380)&1);
      var $expval382=($conv381);
      var $tobool383=(($expval382)|0)!=0;
      if ($tobool383) { label = 134; break; } else { label = 145; break; }
    case 134: 
      var $279=$XP286;
      var $280=$R288;
      var $parent387=(($280+24)|0);
      HEAP32[(($parent387)>>2)]=$279;
      var $281=$TP285;
      var $child388=(($281+16)|0);
      var $arrayidx389=(($child388)|0);
      var $282=HEAP32[(($arrayidx389)>>2)];
      $C0385=$282;
      var $cmp390=(($282)|0)!=0;
      if ($cmp390) { label = 135; break; } else { label = 139; break; }
    case 135: 
      var $283=$C0385;
      var $284=$283;
      var $285=HEAP32[((((5244100)|0))>>2)];
      var $cmp393=(($284)>>>0) >= (($285)>>>0);
      var $conv394=(($cmp393)&1);
      var $expval395=($conv394);
      var $tobool396=(($expval395)|0)!=0;
      if ($tobool396) { label = 136; break; } else { label = 137; break; }
    case 136: 
      var $286=$C0385;
      var $287=$R288;
      var $child398=(($287+16)|0);
      var $arrayidx399=(($child398)|0);
      HEAP32[(($arrayidx399)>>2)]=$286;
      var $288=$R288;
      var $289=$C0385;
      var $parent400=(($289+24)|0);
      HEAP32[(($parent400)>>2)]=$288;
      label = 138; break;
    case 137: 
      _abort();
      throw "Reached an unreachable!"
    case 138: 
      label = 139; break;
    case 139: 
      var $290=$TP285;
      var $child404=(($290+16)|0);
      var $arrayidx405=(($child404+4)|0);
      var $291=HEAP32[(($arrayidx405)>>2)];
      $C1386=$291;
      var $cmp406=(($291)|0)!=0;
      if ($cmp406) { label = 140; break; } else { label = 144; break; }
    case 140: 
      var $292=$C1386;
      var $293=$292;
      var $294=HEAP32[((((5244100)|0))>>2)];
      var $cmp409=(($293)>>>0) >= (($294)>>>0);
      var $conv410=(($cmp409)&1);
      var $expval411=($conv410);
      var $tobool412=(($expval411)|0)!=0;
      if ($tobool412) { label = 141; break; } else { label = 142; break; }
    case 141: 
      var $295=$C1386;
      var $296=$R288;
      var $child414=(($296+16)|0);
      var $arrayidx415=(($child414+4)|0);
      HEAP32[(($arrayidx415)>>2)]=$295;
      var $297=$R288;
      var $298=$C1386;
      var $parent416=(($298+24)|0);
      HEAP32[(($parent416)>>2)]=$297;
      label = 143; break;
    case 142: 
      _abort();
      throw "Reached an unreachable!"
    case 143: 
      label = 144; break;
    case 144: 
      label = 146; break;
    case 145: 
      _abort();
      throw "Reached an unreachable!"
    case 146: 
      label = 147; break;
    case 147: 
      label = 148; break;
    case 148: 
      label = 149; break;
    case 149: 
      var $299=$psize;
      var $or425=$299 | 1;
      var $300=$p;
      var $head426=(($300+4)|0);
      HEAP32[(($head426)>>2)]=$or425;
      var $301=$psize;
      var $302=$p;
      var $303=$302;
      var $304=$psize;
      var $add_ptr427=(($303+$304)|0);
      var $305=$add_ptr427;
      var $prev_foot428=(($305)|0);
      HEAP32[(($prev_foot428)>>2)]=$301;
      var $306=$p;
      var $307=HEAP32[((((5244104)|0))>>2)];
      var $cmp429=(($306)|0)==(($307)|0);
      if ($cmp429) { label = 150; break; } else { label = 151; break; }
    case 150: 
      var $308=$psize;
      HEAP32[((((5244092)|0))>>2)]=$308;
      label = 196; break;
    case 151: 
      label = 152; break;
    case 152: 
      label = 153; break;
    case 153: 
      label = 155; break;
    case 154: 
      var $309=$next;
      var $head436=(($309+4)|0);
      var $310=HEAP32[(($head436)>>2)];
      var $and437=$310 & -2;
      HEAP32[(($head436)>>2)]=$and437;
      var $311=$psize;
      var $or438=$311 | 1;
      var $312=$p;
      var $head439=(($312+4)|0);
      HEAP32[(($head439)>>2)]=$or438;
      var $313=$psize;
      var $314=$p;
      var $315=$314;
      var $316=$psize;
      var $add_ptr440=(($315+$316)|0);
      var $317=$add_ptr440;
      var $prev_foot441=(($317)|0);
      HEAP32[(($prev_foot441)>>2)]=$313;
      label = 155; break;
    case 155: 
      var $318=$psize;
      var $shr443=$318 >>> 3;
      var $cmp444=(($shr443)>>>0) < 32;
      if ($cmp444) { label = 156; break; } else { label = 163; break; }
    case 156: 
      var $319=$psize;
      var $shr448=$319 >>> 3;
      $I447=$shr448;
      var $320=$I447;
      var $shl450=$320 << 1;
      var $arrayidx451=((((5244124)|0)+($shl450<<2))|0);
      var $321=$arrayidx451;
      var $322=$321;
      $B449=$322;
      var $323=$B449;
      $F452=$323;
      var $324=HEAP32[((((5244084)|0))>>2)];
      var $325=$I447;
      var $shl453=1 << $325;
      var $and454=$324 & $shl453;
      var $tobool455=(($and454)|0)!=0;
      if ($tobool455) { label = 158; break; } else { label = 157; break; }
    case 157: 
      var $326=$I447;
      var $shl457=1 << $326;
      var $327=HEAP32[((((5244084)|0))>>2)];
      var $or458=$327 | $shl457;
      HEAP32[((((5244084)|0))>>2)]=$or458;
      label = 162; break;
    case 158: 
      var $328=$B449;
      var $fd460=(($328+8)|0);
      var $329=HEAP32[(($fd460)>>2)];
      var $330=$329;
      var $331=HEAP32[((((5244100)|0))>>2)];
      var $cmp461=(($330)>>>0) >= (($331)>>>0);
      var $conv462=(($cmp461)&1);
      var $expval463=($conv462);
      var $tobool464=(($expval463)|0)!=0;
      if ($tobool464) { label = 159; break; } else { label = 160; break; }
    case 159: 
      var $332=$B449;
      var $fd466=(($332+8)|0);
      var $333=HEAP32[(($fd466)>>2)];
      $F452=$333;
      label = 161; break;
    case 160: 
      _abort();
      throw "Reached an unreachable!"
    case 161: 
      label = 162; break;
    case 162: 
      var $334=$p;
      var $335=$B449;
      var $fd470=(($335+8)|0);
      HEAP32[(($fd470)>>2)]=$334;
      var $336=$p;
      var $337=$F452;
      var $bk471=(($337+12)|0);
      HEAP32[(($bk471)>>2)]=$336;
      var $338=$F452;
      var $339=$p;
      var $fd472=(($339+8)|0);
      HEAP32[(($fd472)>>2)]=$338;
      var $340=$B449;
      var $341=$p;
      var $bk473=(($341+12)|0);
      HEAP32[(($bk473)>>2)]=$340;
      label = 192; break;
    case 163: 
      var $342=$p;
      var $343=$342;
      $tp=$343;
      var $344=$psize;
      var $shr477=$344 >>> 8;
      $X=$shr477;
      var $345=$X;
      var $cmp478=(($345)|0)==0;
      if ($cmp478) { label = 164; break; } else { label = 165; break; }
    case 164: 
      $I476=0;
      label = 169; break;
    case 165: 
      var $346=$X;
      var $cmp482=(($346)>>>0) > 65535;
      if ($cmp482) { label = 166; break; } else { label = 167; break; }
    case 166: 
      $I476=31;
      label = 168; break;
    case 167: 
      var $347=$X;
      $Y=$347;
      var $348=$Y;
      var $sub=((($348)-(256))|0);
      var $shr486=$sub >>> 16;
      var $and487=$shr486 & 8;
      $N=$and487;
      var $349=$N;
      var $350=$Y;
      var $shl488=$350 << $349;
      $Y=$shl488;
      var $sub489=((($shl488)-(4096))|0);
      var $shr490=$sub489 >>> 16;
      var $and491=$shr490 & 4;
      $K=$and491;
      var $351=$K;
      var $352=$N;
      var $add492=((($352)+($351))|0);
      $N=$add492;
      var $353=$K;
      var $354=$Y;
      var $shl493=$354 << $353;
      $Y=$shl493;
      var $sub494=((($shl493)-(16384))|0);
      var $shr495=$sub494 >>> 16;
      var $and496=$shr495 & 2;
      $K=$and496;
      var $355=$N;
      var $add497=((($355)+($and496))|0);
      $N=$add497;
      var $356=$N;
      var $sub498=(((14)-($356))|0);
      var $357=$K;
      var $358=$Y;
      var $shl499=$358 << $357;
      $Y=$shl499;
      var $shr500=$shl499 >>> 15;
      var $add501=((($sub498)+($shr500))|0);
      $K=$add501;
      var $359=$K;
      var $shl502=$359 << 1;
      var $360=$psize;
      var $361=$K;
      var $add503=((($361)+(7))|0);
      var $shr504=$360 >>> (($add503)>>>0);
      var $and505=$shr504 & 1;
      var $add506=((($shl502)+($and505))|0);
      $I476=$add506;
      label = 168; break;
    case 168: 
      label = 169; break;
    case 169: 
      var $362=$I476;
      var $arrayidx509=((((5244388)|0)+($362<<2))|0);
      $H475=$arrayidx509;
      var $363=$I476;
      var $364=$tp;
      var $index510=(($364+28)|0);
      HEAP32[(($index510)>>2)]=$363;
      var $365=$tp;
      var $child511=(($365+16)|0);
      var $arrayidx512=(($child511+4)|0);
      HEAP32[(($arrayidx512)>>2)]=0;
      var $366=$tp;
      var $child513=(($366+16)|0);
      var $arrayidx514=(($child513)|0);
      HEAP32[(($arrayidx514)>>2)]=0;
      var $367=HEAP32[((((5244088)|0))>>2)];
      var $368=$I476;
      var $shl515=1 << $368;
      var $and516=$367 & $shl515;
      var $tobool517=(($and516)|0)!=0;
      if ($tobool517) { label = 171; break; } else { label = 170; break; }
    case 170: 
      var $369=$I476;
      var $shl519=1 << $369;
      var $370=HEAP32[((((5244088)|0))>>2)];
      var $or520=$370 | $shl519;
      HEAP32[((((5244088)|0))>>2)]=$or520;
      var $371=$tp;
      var $372=$H475;
      HEAP32[(($372)>>2)]=$371;
      var $373=$H475;
      var $374=$373;
      var $375=$tp;
      var $parent521=(($375+24)|0);
      HEAP32[(($parent521)>>2)]=$374;
      var $376=$tp;
      var $377=$tp;
      var $bk522=(($377+12)|0);
      HEAP32[(($bk522)>>2)]=$376;
      var $378=$tp;
      var $fd523=(($378+8)|0);
      HEAP32[(($fd523)>>2)]=$376;
      label = 189; break;
    case 171: 
      var $379=$H475;
      var $380=HEAP32[(($379)>>2)];
      $T=$380;
      var $381=$psize;
      var $382=$I476;
      var $cmp526=(($382)|0)==31;
      if ($cmp526) { label = 172; break; } else { label = 173; break; }
    case 172: 
      var $cond = 0;label = 174; break;
    case 173: 
      var $383=$I476;
      var $shr528=$383 >>> 1;
      var $add529=((($shr528)+(8))|0);
      var $sub530=((($add529)-(2))|0);
      var $sub531=(((31)-($sub530))|0);
      var $cond = $sub531;label = 174; break;
    case 174: 
      var $cond;
      var $shl532=$381 << $cond;
      $K525=$shl532;
      label = 175; break;
    case 175: 
      var $384=$T;
      var $head533=(($384+4)|0);
      var $385=HEAP32[(($head533)>>2)];
      var $and534=$385 & -8;
      var $386=$psize;
      var $cmp535=(($and534)|0)!=(($386)|0);
      if ($cmp535) { label = 176; break; } else { label = 182; break; }
    case 176: 
      var $387=$K525;
      var $shr538=$387 >>> 31;
      var $and539=$shr538 & 1;
      var $388=$T;
      var $child540=(($388+16)|0);
      var $arrayidx541=(($child540+($and539<<2))|0);
      $C=$arrayidx541;
      var $389=$K525;
      var $shl542=$389 << 1;
      $K525=$shl542;
      var $390=$C;
      var $391=HEAP32[(($390)>>2)];
      var $cmp543=(($391)|0)!=0;
      if ($cmp543) { label = 177; break; } else { label = 178; break; }
    case 177: 
      var $392=$C;
      var $393=HEAP32[(($392)>>2)];
      $T=$393;
      label = 181; break;
    case 178: 
      var $394=$C;
      var $395=$394;
      var $396=HEAP32[((((5244100)|0))>>2)];
      var $cmp547=(($395)>>>0) >= (($396)>>>0);
      var $conv548=(($cmp547)&1);
      var $expval549=($conv548);
      var $tobool550=(($expval549)|0)!=0;
      if ($tobool550) { label = 179; break; } else { label = 180; break; }
    case 179: 
      var $397=$tp;
      var $398=$C;
      HEAP32[(($398)>>2)]=$397;
      var $399=$T;
      var $400=$tp;
      var $parent552=(($400+24)|0);
      HEAP32[(($parent552)>>2)]=$399;
      var $401=$tp;
      var $402=$tp;
      var $bk553=(($402+12)|0);
      HEAP32[(($bk553)>>2)]=$401;
      var $403=$tp;
      var $fd554=(($403+8)|0);
      HEAP32[(($fd554)>>2)]=$401;
      label = 188; break;
    case 180: 
      _abort();
      throw "Reached an unreachable!"
    case 181: 
      label = 187; break;
    case 182: 
      var $404=$T;
      var $fd559=(($404+8)|0);
      var $405=HEAP32[(($fd559)>>2)];
      $F558=$405;
      var $406=$T;
      var $407=$406;
      var $408=HEAP32[((((5244100)|0))>>2)];
      var $cmp560=(($407)>>>0) >= (($408)>>>0);
      if ($cmp560) { label = 183; break; } else { var $412 = 0;label = 184; break; }
    case 183: 
      var $409=$F558;
      var $410=$409;
      var $411=HEAP32[((((5244100)|0))>>2)];
      var $cmp563=(($410)>>>0) >= (($411)>>>0);
      var $412 = $cmp563;label = 184; break;
    case 184: 
      var $412;
      var $land_ext566=(($412)&1);
      var $expval567=($land_ext566);
      var $tobool568=(($expval567)|0)!=0;
      if ($tobool568) { label = 185; break; } else { label = 186; break; }
    case 185: 
      var $413=$tp;
      var $414=$F558;
      var $bk570=(($414+12)|0);
      HEAP32[(($bk570)>>2)]=$413;
      var $415=$T;
      var $fd571=(($415+8)|0);
      HEAP32[(($fd571)>>2)]=$413;
      var $416=$F558;
      var $417=$tp;
      var $fd572=(($417+8)|0);
      HEAP32[(($fd572)>>2)]=$416;
      var $418=$T;
      var $419=$tp;
      var $bk573=(($419+12)|0);
      HEAP32[(($bk573)>>2)]=$418;
      var $420=$tp;
      var $parent574=(($420+24)|0);
      HEAP32[(($parent574)>>2)]=0;
      label = 188; break;
    case 186: 
      _abort();
      throw "Reached an unreachable!"
    case 187: 
      label = 175; break;
    case 188: 
      label = 189; break;
    case 189: 
      var $421=HEAP32[((((5244116)|0))>>2)];
      var $dec=((($421)-(1))|0);
      HEAP32[((((5244116)|0))>>2)]=$dec;
      var $cmp578=(($dec)|0)==0;
      if ($cmp578) { label = 190; break; } else { label = 191; break; }
    case 190: 
      var $call581=_release_unused_segments(5244084);
      label = 191; break;
    case 191: 
      label = 192; break;
    case 192: 
      label = 196; break;
    case 193: 
      label = 194; break;
    case 194: 
      label = 195; break;
    case 195: 
      _abort();
      throw "Reached an unreachable!"
    case 196: 
      label = 197; break;
    case 197: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_free["X"]=1;

function _sys_trim($m, $pad) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $pad_addr;
      var $released;
      var $unit;
      var $extra;
      var $sp;
      var $old_br;
      var $rel_br;
      var $new_br;
      $m_addr=$m;
      $pad_addr=$pad;
      $released=0;
      var $0=HEAP32[((((5242880)|0))>>2)];
      var $cmp=(($0)|0)!=0;
      if ($cmp) { var $1 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $call=_init_mparams();
      var $tobool=(($call)|0)!=0;
      var $1 = $tobool;label = 4; break;
    case 4: 
      var $1;
      var $lor_ext=(($1)&1);
      var $2=$pad_addr;
      var $cmp1=(($2)>>>0) < 4294967232;
      if ($cmp1) { label = 5; break; } else { label = 26; break; }
    case 5: 
      var $3=$m_addr;
      var $top=(($3+24)|0);
      var $4=HEAP32[(($top)>>2)];
      var $cmp2=(($4)|0)!=0;
      if ($cmp2) { label = 6; break; } else { label = 26; break; }
    case 6: 
      var $5=$pad_addr;
      var $add=((($5)+(40))|0);
      $pad_addr=$add;
      var $6=$m_addr;
      var $topsize=(($6+12)|0);
      var $7=HEAP32[(($topsize)>>2)];
      var $8=$pad_addr;
      var $cmp3=(($7)>>>0) > (($8)>>>0);
      if ($cmp3) { label = 7; break; } else { label = 22; break; }
    case 7: 
      var $9=HEAP32[((((5242888)|0))>>2)];
      $unit=$9;
      var $10=$m_addr;
      var $topsize5=(($10+12)|0);
      var $11=HEAP32[(($topsize5)>>2)];
      var $12=$pad_addr;
      var $sub=((($11)-($12))|0);
      var $13=$unit;
      var $sub6=((($13)-(1))|0);
      var $add7=((($sub)+($sub6))|0);
      var $14=$unit;
      var $div=Math.floor(((($add7)>>>0))/((($14)>>>0)));
      var $sub8=((($div)-(1))|0);
      var $15=$unit;
      var $mul=Math.imul($sub8,$15);
      $extra=$mul;
      var $16=$m_addr;
      var $17=$m_addr;
      var $top9=(($17+24)|0);
      var $18=HEAP32[(($top9)>>2)];
      var $19=$18;
      var $call10=_segment_holding($16, $19);
      $sp=$call10;
      var $20=$sp;
      var $sflags=(($20+12)|0);
      var $21=HEAP32[(($sflags)>>2)];
      var $and=$21 & 8;
      var $tobool11=(($and)|0)!=0;
      if ($tobool11) { label = 19; break; } else { label = 8; break; }
    case 8: 
      var $22=$sp;
      var $sflags13=(($22+12)|0);
      var $23=HEAP32[(($sflags13)>>2)];
      var $and14=$23 & 0;
      var $tobool15=(($and14)|0)!=0;
      if ($tobool15) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 18; break;
    case 10: 
      var $24=$extra;
      var $cmp17=(($24)>>>0) >= 2147483647;
      if ($cmp17) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $25=$unit;
      var $sub19=(((-2147483648)-($25))|0);
      $extra=$sub19;
      label = 12; break;
    case 12: 
      var $call20=_sbrk(0);
      $old_br=$call20;
      var $26=$old_br;
      var $27=$sp;
      var $base=(($27)|0);
      var $28=HEAP32[(($base)>>2)];
      var $29=$sp;
      var $size=(($29+4)|0);
      var $30=HEAP32[(($size)>>2)];
      var $add_ptr=(($28+$30)|0);
      var $cmp21=(($26)|0)==(($add_ptr)|0);
      if ($cmp21) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $31=$extra;
      var $sub23=(((-$31))|0);
      var $call24=_sbrk($sub23);
      $rel_br=$call24;
      var $call25=_sbrk(0);
      $new_br=$call25;
      var $32=$rel_br;
      var $cmp26=(($32)|0)!=-1;
      if ($cmp26) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $33=$new_br;
      var $34=$old_br;
      var $cmp28=(($33)>>>0) < (($34)>>>0);
      if ($cmp28) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $35=$old_br;
      var $36=$new_br;
      var $sub_ptr_lhs_cast=$35;
      var $sub_ptr_rhs_cast=$36;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $released=$sub_ptr_sub;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $37=$released;
      var $cmp34=(($37)|0)!=0;
      if ($cmp34) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $38=$released;
      var $39=$sp;
      var $size36=(($39+4)|0);
      var $40=HEAP32[(($size36)>>2)];
      var $sub37=((($40)-($38))|0);
      HEAP32[(($size36)>>2)]=$sub37;
      var $41=$released;
      var $42=$m_addr;
      var $footprint=(($42+432)|0);
      var $43=HEAP32[(($footprint)>>2)];
      var $sub38=((($43)-($41))|0);
      HEAP32[(($footprint)>>2)]=$sub38;
      var $44=$m_addr;
      var $45=$m_addr;
      var $top39=(($45+24)|0);
      var $46=HEAP32[(($top39)>>2)];
      var $47=$m_addr;
      var $topsize40=(($47+12)|0);
      var $48=HEAP32[(($topsize40)>>2)];
      var $49=$released;
      var $sub41=((($48)-($49))|0);
      _init_top($44, $46, $sub41);
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $50=$released;
      var $cmp44=(($50)|0)==0;
      if ($cmp44) { label = 23; break; } else { label = 25; break; }
    case 23: 
      var $51=$m_addr;
      var $topsize46=(($51+12)|0);
      var $52=HEAP32[(($topsize46)>>2)];
      var $53=$m_addr;
      var $trim_check=(($53+28)|0);
      var $54=HEAP32[(($trim_check)>>2)];
      var $cmp47=(($52)>>>0) > (($54)>>>0);
      if ($cmp47) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $55=$m_addr;
      var $trim_check49=(($55+28)|0);
      HEAP32[(($trim_check49)>>2)]=-1;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $56=$released;
      var $cmp52=(($56)|0)!=0;
      var $cond=$cmp52 ? 1 : 0;

      return $cond;
    default: assert(0, "bad label: " + label);
  }

}
_sys_trim["X"]=1;

function _segment_holding($m, $addr) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $addr_addr;
      var $sp;
      $m_addr=$m;
      $addr_addr=$addr;
      var $0=$m_addr;
      var $seg=(($0+444)|0);
      $sp=$seg;
      label = 3; break;
    case 3: 
      var $1=$addr_addr;
      var $2=$sp;
      var $base=(($2)|0);
      var $3=HEAP32[(($base)>>2)];
      var $cmp=(($1)>>>0) >= (($3)>>>0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $4=$addr_addr;
      var $5=$sp;
      var $base1=(($5)|0);
      var $6=HEAP32[(($base1)>>2)];
      var $7=$sp;
      var $size=(($7+4)|0);
      var $8=HEAP32[(($size)>>2)];
      var $add_ptr=(($6+$8)|0);
      var $cmp2=(($4)>>>0) < (($add_ptr)>>>0);
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $9=$sp;
      $retval=$9;
      label = 9; break;
    case 6: 
      var $10=$sp;
      var $next=(($10+8)|0);
      var $11=HEAP32[(($next)>>2)];
      $sp=$11;
      var $cmp3=(($11)|0)==0;
      if ($cmp3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $retval=0;
      label = 9; break;
    case 8: 
      label = 3; break;
    case 9: 
      var $12=$retval;

      return $12;
    default: assert(0, "bad label: " + label);
  }

}


function _init_top($m, $p, $psize) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $p_addr;
      var $psize_addr;
      var $offset;
      $m_addr=$m;
      $p_addr=$p;
      $psize_addr=$psize;
      var $0=$p_addr;
      var $1=$0;
      var $add_ptr=(($1+8)|0);
      var $2=$add_ptr;
      var $and=$2 & 7;
      var $cmp=(($and)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $cond = 0;label = 5; break;
    case 4: 
      var $3=$p_addr;
      var $4=$3;
      var $add_ptr1=(($4+8)|0);
      var $5=$add_ptr1;
      var $and2=$5 & 7;
      var $sub=(((8)-($and2))|0);
      var $and3=$sub & 7;
      var $cond = $and3;label = 5; break;
    case 5: 
      var $cond;
      $offset=$cond;
      var $6=$p_addr;
      var $7=$6;
      var $8=$offset;
      var $add_ptr4=(($7+$8)|0);
      var $9=$add_ptr4;
      $p_addr=$9;
      var $10=$offset;
      var $11=$psize_addr;
      var $sub5=((($11)-($10))|0);
      $psize_addr=$sub5;
      var $12=$p_addr;
      var $13=$m_addr;
      var $top=(($13+24)|0);
      HEAP32[(($top)>>2)]=$12;
      var $14=$psize_addr;
      var $15=$m_addr;
      var $topsize=(($15+12)|0);
      HEAP32[(($topsize)>>2)]=$14;
      var $16=$psize_addr;
      var $or=$16 | 1;
      var $17=$p_addr;
      var $head=(($17+4)|0);
      HEAP32[(($head)>>2)]=$or;
      var $18=$p_addr;
      var $19=$18;
      var $20=$psize_addr;
      var $add_ptr6=(($19+$20)|0);
      var $21=$add_ptr6;
      var $head7=(($21+4)|0);
      HEAP32[(($head7)>>2)]=40;
      var $22=HEAP32[((((5242896)|0))>>2)];
      var $23=$m_addr;
      var $trim_check=(($23+28)|0);
      HEAP32[(($trim_check)>>2)]=$22;

      return;
    default: assert(0, "bad label: " + label);
  }

}
_init_top["X"]=1;

function __ZdlPv($ptr) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ptr_addr;
      $ptr_addr=$ptr;
      var $0=$ptr_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$ptr_addr;
      _free($1);
      label = 4; break;
    case 4: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _release_unused_segments($m) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $released;
      var $nsegs;
      var $pred;
      var $sp;
      var $base;
      var $size;
      var $next3;
      var $p;
      var $psize;
      var $tp;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $H147;
      var $I;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K197;
      var $C;
      var $F235;
      $m_addr=$m;
      $released=0;
      $nsegs=0;
      var $0=$m_addr;
      var $seg=(($0+444)|0);
      $pred=$seg;
      var $1=$pred;
      var $next=(($1+8)|0);
      var $2=HEAP32[(($next)>>2)];
      $sp=$2;
      label = 3; break;
    case 3: 
      var $3=$sp;
      var $cmp=(($3)|0)!=0;
      if ($cmp) { label = 4; break; } else { label = 88; break; }
    case 4: 
      var $4=$sp;
      var $base1=(($4)|0);
      var $5=HEAP32[(($base1)>>2)];
      $base=$5;
      var $6=$sp;
      var $size2=(($6+4)|0);
      var $7=HEAP32[(($size2)>>2)];
      $size=$7;
      var $8=$sp;
      var $next4=(($8+8)|0);
      var $9=HEAP32[(($next4)>>2)];
      $next3=$9;
      var $10=$nsegs;
      var $inc=((($10)+(1))|0);
      $nsegs=$inc;
      var $11=$sp;
      var $sflags=(($11+12)|0);
      var $12=HEAP32[(($sflags)>>2)];
      var $and=$12 & 0;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 87; break; }
    case 5: 
      var $13=$sp;
      var $sflags5=(($13+12)|0);
      var $14=HEAP32[(($sflags5)>>2)];
      var $and6=$14 & 8;
      var $tobool7=(($and6)|0)!=0;
      if ($tobool7) { label = 87; break; } else { label = 6; break; }
    case 6: 
      var $15=$base;
      var $16=$base;
      var $add_ptr=(($16+8)|0);
      var $17=$add_ptr;
      var $and8=$17 & 7;
      var $cmp9=(($and8)|0)==0;
      if ($cmp9) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $cond = 0;label = 9; break;
    case 8: 
      var $18=$base;
      var $add_ptr10=(($18+8)|0);
      var $19=$add_ptr10;
      var $and11=$19 & 7;
      var $sub=(((8)-($and11))|0);
      var $and12=$sub & 7;
      var $cond = $and12;label = 9; break;
    case 9: 
      var $cond;
      var $add_ptr13=(($15+$cond)|0);
      var $20=$add_ptr13;
      $p=$20;
      var $21=$p;
      var $head=(($21+4)|0);
      var $22=HEAP32[(($head)>>2)];
      var $and14=$22 & -8;
      $psize=$and14;
      var $23=$p;
      var $head15=(($23+4)|0);
      var $24=HEAP32[(($head15)>>2)];
      var $and16=$24 & 3;
      var $cmp17=(($and16)|0)!=1;
      if ($cmp17) { label = 86; break; } else { label = 10; break; }
    case 10: 
      var $25=$p;
      var $26=$25;
      var $27=$psize;
      var $add_ptr19=(($26+$27)|0);
      var $28=$base;
      var $29=$size;
      var $add_ptr20=(($28+$29)|0);
      var $add_ptr21=((($add_ptr20)-(40))|0);
      var $cmp22=(($add_ptr19)>>>0) >= (($add_ptr21)>>>0);
      if ($cmp22) { label = 11; break; } else { label = 86; break; }
    case 11: 
      var $30=$p;
      var $31=$30;
      $tp=$31;
      var $32=$p;
      var $33=$m_addr;
      var $dv=(($33+20)|0);
      var $34=HEAP32[(($dv)>>2)];
      var $cmp24=(($32)|0)==(($34)|0);
      if ($cmp24) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $35=$m_addr;
      var $dv26=(($35+20)|0);
      HEAP32[(($dv26)>>2)]=0;
      var $36=$m_addr;
      var $dvsize=(($36+8)|0);
      HEAP32[(($dvsize)>>2)]=0;
      label = 59; break;
    case 13: 
      var $37=$tp;
      var $parent=(($37+24)|0);
      var $38=HEAP32[(($parent)>>2)];
      $XP=$38;
      var $39=$tp;
      var $bk=(($39+12)|0);
      var $40=HEAP32[(($bk)>>2)];
      var $41=$tp;
      var $cmp27=(($40)|0)!=(($41)|0);
      if ($cmp27) { label = 14; break; } else { label = 18; break; }
    case 14: 
      var $42=$tp;
      var $fd=(($42+8)|0);
      var $43=HEAP32[(($fd)>>2)];
      $F=$43;
      var $44=$tp;
      var $bk29=(($44+12)|0);
      var $45=HEAP32[(($bk29)>>2)];
      $R=$45;
      var $46=$F;
      var $47=$46;
      var $48=$m_addr;
      var $least_addr=(($48+16)|0);
      var $49=HEAP32[(($least_addr)>>2)];
      var $cmp30=(($47)>>>0) >= (($49)>>>0);
      var $conv=(($cmp30)&1);
      var $expval=($conv);
      var $tobool31=(($expval)|0)!=0;
      if ($tobool31) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $50=$R;
      var $51=$F;
      var $bk33=(($51+12)|0);
      HEAP32[(($bk33)>>2)]=$50;
      var $52=$F;
      var $53=$R;
      var $fd34=(($53+8)|0);
      HEAP32[(($fd34)>>2)]=$52;
      label = 17; break;
    case 16: 
      _abort();
      throw "Reached an unreachable!"
    case 17: 
      label = 30; break;
    case 18: 
      var $54=$tp;
      var $child=(($54+16)|0);
      var $arrayidx=(($child+4)|0);
      $RP=$arrayidx;
      var $55=HEAP32[(($arrayidx)>>2)];
      $R=$55;
      var $cmp37=(($55)|0)!=0;
      if ($cmp37) { label = 20; break; } else { label = 19; break; }
    case 19: 
      var $56=$tp;
      var $child39=(($56+16)|0);
      var $arrayidx40=(($child39)|0);
      $RP=$arrayidx40;
      var $57=HEAP32[(($arrayidx40)>>2)];
      $R=$57;
      var $cmp41=(($57)|0)!=0;
      if ($cmp41) { label = 20; break; } else { label = 29; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $58=$R;
      var $child45=(($58+16)|0);
      var $arrayidx46=(($child45+4)|0);
      $CP=$arrayidx46;
      var $59=HEAP32[(($arrayidx46)>>2)];
      var $cmp47=(($59)|0)!=0;
      if ($cmp47) { var $62 = 1;label = 23; break; } else { label = 22; break; }
    case 22: 
      var $60=$R;
      var $child49=(($60+16)|0);
      var $arrayidx50=(($child49)|0);
      $CP=$arrayidx50;
      var $61=HEAP32[(($arrayidx50)>>2)];
      var $cmp51=(($61)|0)!=0;
      var $62 = $cmp51;label = 23; break;
    case 23: 
      var $62;
      if ($62) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $63=$CP;
      $RP=$63;
      var $64=HEAP32[(($63)>>2)];
      $R=$64;
      label = 21; break;
    case 25: 
      var $65=$RP;
      var $66=$65;
      var $67=$m_addr;
      var $least_addr54=(($67+16)|0);
      var $68=HEAP32[(($least_addr54)>>2)];
      var $cmp55=(($66)>>>0) >= (($68)>>>0);
      var $conv56=(($cmp55)&1);
      var $expval57=($conv56);
      var $tobool58=(($expval57)|0)!=0;
      if ($tobool58) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $69=$RP;
      HEAP32[(($69)>>2)]=0;
      label = 28; break;
    case 27: 
      _abort();
      throw "Reached an unreachable!"
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $70=$XP;
      var $cmp64=(($70)|0)!=0;
      if ($cmp64) { label = 31; break; } else { label = 58; break; }
    case 31: 
      var $71=$tp;
      var $index=(($71+28)|0);
      var $72=HEAP32[(($index)>>2)];
      var $73=$m_addr;
      var $treebins=(($73+304)|0);
      var $arrayidx67=(($treebins+($72<<2))|0);
      $H=$arrayidx67;
      var $74=$tp;
      var $75=$H;
      var $76=HEAP32[(($75)>>2)];
      var $cmp68=(($74)|0)==(($76)|0);
      if ($cmp68) { label = 32; break; } else { label = 35; break; }
    case 32: 
      var $77=$R;
      var $78=$H;
      HEAP32[(($78)>>2)]=$77;
      var $cmp71=(($77)|0)==0;
      if ($cmp71) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $79=$tp;
      var $index74=(($79+28)|0);
      var $80=HEAP32[(($index74)>>2)];
      var $shl=1 << $80;
      var $neg=$shl ^ -1;
      var $81=$m_addr;
      var $treemap=(($81+4)|0);
      var $82=HEAP32[(($treemap)>>2)];
      var $and75=$82 & $neg;
      HEAP32[(($treemap)>>2)]=$and75;
      label = 34; break;
    case 34: 
      label = 42; break;
    case 35: 
      var $83=$XP;
      var $84=$83;
      var $85=$m_addr;
      var $least_addr78=(($85+16)|0);
      var $86=HEAP32[(($least_addr78)>>2)];
      var $cmp79=(($84)>>>0) >= (($86)>>>0);
      var $conv80=(($cmp79)&1);
      var $expval81=($conv80);
      var $tobool82=(($expval81)|0)!=0;
      if ($tobool82) { label = 36; break; } else { label = 40; break; }
    case 36: 
      var $87=$XP;
      var $child84=(($87+16)|0);
      var $arrayidx85=(($child84)|0);
      var $88=HEAP32[(($arrayidx85)>>2)];
      var $89=$tp;
      var $cmp86=(($88)|0)==(($89)|0);
      if ($cmp86) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $90=$R;
      var $91=$XP;
      var $child89=(($91+16)|0);
      var $arrayidx90=(($child89)|0);
      HEAP32[(($arrayidx90)>>2)]=$90;
      label = 39; break;
    case 38: 
      var $92=$R;
      var $93=$XP;
      var $child92=(($93+16)|0);
      var $arrayidx93=(($child92+4)|0);
      HEAP32[(($arrayidx93)>>2)]=$92;
      label = 39; break;
    case 39: 
      label = 41; break;
    case 40: 
      _abort();
      throw "Reached an unreachable!"
    case 41: 
      label = 42; break;
    case 42: 
      var $94=$R;
      var $cmp98=(($94)|0)!=0;
      if ($cmp98) { label = 43; break; } else { label = 57; break; }
    case 43: 
      var $95=$R;
      var $96=$95;
      var $97=$m_addr;
      var $least_addr101=(($97+16)|0);
      var $98=HEAP32[(($least_addr101)>>2)];
      var $cmp102=(($96)>>>0) >= (($98)>>>0);
      var $conv103=(($cmp102)&1);
      var $expval104=($conv103);
      var $tobool105=(($expval104)|0)!=0;
      if ($tobool105) { label = 44; break; } else { label = 55; break; }
    case 44: 
      var $99=$XP;
      var $100=$R;
      var $parent107=(($100+24)|0);
      HEAP32[(($parent107)>>2)]=$99;
      var $101=$tp;
      var $child108=(($101+16)|0);
      var $arrayidx109=(($child108)|0);
      var $102=HEAP32[(($arrayidx109)>>2)];
      $C0=$102;
      var $cmp110=(($102)|0)!=0;
      if ($cmp110) { label = 45; break; } else { label = 49; break; }
    case 45: 
      var $103=$C0;
      var $104=$103;
      var $105=$m_addr;
      var $least_addr113=(($105+16)|0);
      var $106=HEAP32[(($least_addr113)>>2)];
      var $cmp114=(($104)>>>0) >= (($106)>>>0);
      var $conv115=(($cmp114)&1);
      var $expval116=($conv115);
      var $tobool117=(($expval116)|0)!=0;
      if ($tobool117) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $107=$C0;
      var $108=$R;
      var $child119=(($108+16)|0);
      var $arrayidx120=(($child119)|0);
      HEAP32[(($arrayidx120)>>2)]=$107;
      var $109=$R;
      var $110=$C0;
      var $parent121=(($110+24)|0);
      HEAP32[(($parent121)>>2)]=$109;
      label = 48; break;
    case 47: 
      _abort();
      throw "Reached an unreachable!"
    case 48: 
      label = 49; break;
    case 49: 
      var $111=$tp;
      var $child125=(($111+16)|0);
      var $arrayidx126=(($child125+4)|0);
      var $112=HEAP32[(($arrayidx126)>>2)];
      $C1=$112;
      var $cmp127=(($112)|0)!=0;
      if ($cmp127) { label = 50; break; } else { label = 54; break; }
    case 50: 
      var $113=$C1;
      var $114=$113;
      var $115=$m_addr;
      var $least_addr130=(($115+16)|0);
      var $116=HEAP32[(($least_addr130)>>2)];
      var $cmp131=(($114)>>>0) >= (($116)>>>0);
      var $conv132=(($cmp131)&1);
      var $expval133=($conv132);
      var $tobool134=(($expval133)|0)!=0;
      if ($tobool134) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $117=$C1;
      var $118=$R;
      var $child136=(($118+16)|0);
      var $arrayidx137=(($child136+4)|0);
      HEAP32[(($arrayidx137)>>2)]=$117;
      var $119=$R;
      var $120=$C1;
      var $parent138=(($120+24)|0);
      HEAP32[(($parent138)>>2)]=$119;
      label = 53; break;
    case 52: 
      _abort();
      throw "Reached an unreachable!"
    case 53: 
      label = 54; break;
    case 54: 
      label = 56; break;
    case 55: 
      _abort();
      throw "Reached an unreachable!"
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $121=$psize;
      var $shr=$121 >>> 8;
      $X=$shr;
      var $122=$X;
      var $cmp148=(($122)|0)==0;
      if ($cmp148) { label = 60; break; } else { label = 61; break; }
    case 60: 
      $I=0;
      label = 65; break;
    case 61: 
      var $123=$X;
      var $cmp152=(($123)>>>0) > 65535;
      if ($cmp152) { label = 62; break; } else { label = 63; break; }
    case 62: 
      $I=31;
      label = 64; break;
    case 63: 
      var $124=$X;
      $Y=$124;
      var $125=$Y;
      var $sub156=((($125)-(256))|0);
      var $shr157=$sub156 >>> 16;
      var $and158=$shr157 & 8;
      $N=$and158;
      var $126=$N;
      var $127=$Y;
      var $shl159=$127 << $126;
      $Y=$shl159;
      var $sub160=((($shl159)-(4096))|0);
      var $shr161=$sub160 >>> 16;
      var $and162=$shr161 & 4;
      $K=$and162;
      var $128=$K;
      var $129=$N;
      var $add=((($129)+($128))|0);
      $N=$add;
      var $130=$K;
      var $131=$Y;
      var $shl163=$131 << $130;
      $Y=$shl163;
      var $sub164=((($shl163)-(16384))|0);
      var $shr165=$sub164 >>> 16;
      var $and166=$shr165 & 2;
      $K=$and166;
      var $132=$N;
      var $add167=((($132)+($and166))|0);
      $N=$add167;
      var $133=$N;
      var $sub168=(((14)-($133))|0);
      var $134=$K;
      var $135=$Y;
      var $shl169=$135 << $134;
      $Y=$shl169;
      var $shr170=$shl169 >>> 15;
      var $add171=((($sub168)+($shr170))|0);
      $K=$add171;
      var $136=$K;
      var $shl172=$136 << 1;
      var $137=$psize;
      var $138=$K;
      var $add173=((($138)+(7))|0);
      var $shr174=$137 >>> (($add173)>>>0);
      var $and175=$shr174 & 1;
      var $add176=((($shl172)+($and175))|0);
      $I=$add176;
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $139=$I;
      var $140=$m_addr;
      var $treebins179=(($140+304)|0);
      var $arrayidx180=(($treebins179+($139<<2))|0);
      $H147=$arrayidx180;
      var $141=$I;
      var $142=$tp;
      var $index181=(($142+28)|0);
      HEAP32[(($index181)>>2)]=$141;
      var $143=$tp;
      var $child182=(($143+16)|0);
      var $arrayidx183=(($child182+4)|0);
      HEAP32[(($arrayidx183)>>2)]=0;
      var $144=$tp;
      var $child184=(($144+16)|0);
      var $arrayidx185=(($child184)|0);
      HEAP32[(($arrayidx185)>>2)]=0;
      var $145=$m_addr;
      var $treemap186=(($145+4)|0);
      var $146=HEAP32[(($treemap186)>>2)];
      var $147=$I;
      var $shl187=1 << $147;
      var $and188=$146 & $shl187;
      var $tobool189=(($and188)|0)!=0;
      if ($tobool189) { label = 67; break; } else { label = 66; break; }
    case 66: 
      var $148=$I;
      var $shl191=1 << $148;
      var $149=$m_addr;
      var $treemap192=(($149+4)|0);
      var $150=HEAP32[(($treemap192)>>2)];
      var $or=$150 | $shl191;
      HEAP32[(($treemap192)>>2)]=$or;
      var $151=$tp;
      var $152=$H147;
      HEAP32[(($152)>>2)]=$151;
      var $153=$H147;
      var $154=$153;
      var $155=$tp;
      var $parent193=(($155+24)|0);
      HEAP32[(($parent193)>>2)]=$154;
      var $156=$tp;
      var $157=$tp;
      var $bk194=(($157+12)|0);
      HEAP32[(($bk194)>>2)]=$156;
      var $158=$tp;
      var $fd195=(($158+8)|0);
      HEAP32[(($fd195)>>2)]=$156;
      label = 85; break;
    case 67: 
      var $159=$H147;
      var $160=HEAP32[(($159)>>2)];
      $T=$160;
      var $161=$psize;
      var $162=$I;
      var $cmp198=(($162)|0)==31;
      if ($cmp198) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $cond207 = 0;label = 70; break;
    case 69: 
      var $163=$I;
      var $shr202=$163 >>> 1;
      var $add203=((($shr202)+(8))|0);
      var $sub204=((($add203)-(2))|0);
      var $sub205=(((31)-($sub204))|0);
      var $cond207 = $sub205;label = 70; break;
    case 70: 
      var $cond207;
      var $shl208=$161 << $cond207;
      $K197=$shl208;
      label = 71; break;
    case 71: 
      var $164=$T;
      var $head209=(($164+4)|0);
      var $165=HEAP32[(($head209)>>2)];
      var $and210=$165 & -8;
      var $166=$psize;
      var $cmp211=(($and210)|0)!=(($166)|0);
      if ($cmp211) { label = 72; break; } else { label = 78; break; }
    case 72: 
      var $167=$K197;
      var $shr214=$167 >>> 31;
      var $and215=$shr214 & 1;
      var $168=$T;
      var $child216=(($168+16)|0);
      var $arrayidx217=(($child216+($and215<<2))|0);
      $C=$arrayidx217;
      var $169=$K197;
      var $shl218=$169 << 1;
      $K197=$shl218;
      var $170=$C;
      var $171=HEAP32[(($170)>>2)];
      var $cmp219=(($171)|0)!=0;
      if ($cmp219) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $172=$C;
      var $173=HEAP32[(($172)>>2)];
      $T=$173;
      label = 77; break;
    case 74: 
      var $174=$C;
      var $175=$174;
      var $176=$m_addr;
      var $least_addr223=(($176+16)|0);
      var $177=HEAP32[(($least_addr223)>>2)];
      var $cmp224=(($175)>>>0) >= (($177)>>>0);
      var $conv225=(($cmp224)&1);
      var $expval226=($conv225);
      var $tobool227=(($expval226)|0)!=0;
      if ($tobool227) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $178=$tp;
      var $179=$C;
      HEAP32[(($179)>>2)]=$178;
      var $180=$T;
      var $181=$tp;
      var $parent229=(($181+24)|0);
      HEAP32[(($parent229)>>2)]=$180;
      var $182=$tp;
      var $183=$tp;
      var $bk230=(($183+12)|0);
      HEAP32[(($bk230)>>2)]=$182;
      var $184=$tp;
      var $fd231=(($184+8)|0);
      HEAP32[(($fd231)>>2)]=$182;
      label = 84; break;
    case 76: 
      _abort();
      throw "Reached an unreachable!"
    case 77: 
      label = 83; break;
    case 78: 
      var $185=$T;
      var $fd236=(($185+8)|0);
      var $186=HEAP32[(($fd236)>>2)];
      $F235=$186;
      var $187=$T;
      var $188=$187;
      var $189=$m_addr;
      var $least_addr237=(($189+16)|0);
      var $190=HEAP32[(($least_addr237)>>2)];
      var $cmp238=(($188)>>>0) >= (($190)>>>0);
      if ($cmp238) { label = 79; break; } else { var $195 = 0;label = 80; break; }
    case 79: 
      var $191=$F235;
      var $192=$191;
      var $193=$m_addr;
      var $least_addr240=(($193+16)|0);
      var $194=HEAP32[(($least_addr240)>>2)];
      var $cmp241=(($192)>>>0) >= (($194)>>>0);
      var $195 = $cmp241;label = 80; break;
    case 80: 
      var $195;
      var $land_ext=(($195)&1);
      var $expval243=($land_ext);
      var $tobool244=(($expval243)|0)!=0;
      if ($tobool244) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $196=$tp;
      var $197=$F235;
      var $bk246=(($197+12)|0);
      HEAP32[(($bk246)>>2)]=$196;
      var $198=$T;
      var $fd247=(($198+8)|0);
      HEAP32[(($fd247)>>2)]=$196;
      var $199=$F235;
      var $200=$tp;
      var $fd248=(($200+8)|0);
      HEAP32[(($fd248)>>2)]=$199;
      var $201=$T;
      var $202=$tp;
      var $bk249=(($202+12)|0);
      HEAP32[(($bk249)>>2)]=$201;
      var $203=$tp;
      var $parent250=(($203+24)|0);
      HEAP32[(($parent250)>>2)]=0;
      label = 84; break;
    case 82: 
      _abort();
      throw "Reached an unreachable!"
    case 83: 
      label = 71; break;
    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      var $204=$sp;
      $pred=$204;
      var $205=$next3;
      $sp=$205;
      label = 3; break;
    case 88: 
      var $206=$nsegs;
      var $cmp257=(($206)>>>0) > 4294967295;
      if ($cmp257) { label = 89; break; } else { label = 90; break; }
    case 89: 
      var $207=$nsegs;
      var $cond262 = $207;label = 91; break;
    case 90: 
      var $cond262 = -1;label = 91; break;
    case 91: 
      var $cond262;
      var $208=$m_addr;
      var $release_checks=(($208+32)|0);
      HEAP32[(($release_checks)>>2)]=$cond262;
      var $209=$released;

      return $209;
    default: assert(0, "bad label: " + label);
  }

}
_release_unused_segments["X"]=1;

function _init_mparams() {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $magic;
      var $psize;
      var $gsize;
      var $0=HEAP32[((((5242880)|0))>>2)];
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $call=_sysconf(8);
      $psize=$call;
      var $1=$psize;
      $gsize=$1;
      var $2=$gsize;
      var $3=$gsize;
      var $sub=((($3)-(1))|0);
      var $and=$2 & $sub;
      var $cmp1=(($and)|0)!=0;
      if ($cmp1) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $4=$psize;
      var $5=$psize;
      var $sub2=((($5)-(1))|0);
      var $and3=$4 & $sub2;
      var $cmp4=(($and3)|0)!=0;
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      _abort();
      throw "Reached an unreachable!"
    case 6: 
      var $6=$gsize;
      HEAP32[((((5242888)|0))>>2)]=$6;
      var $7=$psize;
      HEAP32[((((5242884)|0))>>2)]=$7;
      HEAP32[((((5242892)|0))>>2)]=-1;
      HEAP32[((((5242896)|0))>>2)]=2097152;
      HEAP32[((((5242900)|0))>>2)]=0;
      var $8=HEAP32[((((5242900)|0))>>2)];
      HEAP32[((((5244524)|0))>>2)]=$8;
      var $call6=_time(0);
      var $xor=$call6 ^ 1431655765;
      $magic=$xor;
      var $9=$magic;
      var $or=$9 | 8;
      $magic=$or;
      var $10=$magic;
      var $and7=$10 & -8;
      $magic=$and7;
      var $11=$magic;
      HEAP32[((((5242880)|0))>>2)]=$11;
      label = 7; break;
    case 7: 

      return 1;
    default: assert(0, "bad label: " + label);
  }

}


// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;

// === Auto-generated postamble setup entry stuff ===

Module.callMain = function callMain(args) {
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_STATIC);


  var ret;

  ret = Module['_main'](argc, argv, 0);


  return ret;
}




function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return 0;
  }

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    var toRun = Module['preRun'];
    Module['preRun'] = [];
    for (var i = toRun.length-1; i >= 0; i--) {
      toRun[i]();
    }
    if (runDependencies > 0) {
      // a preRun added a dependency, run will be called later
      return 0;
    }
  }

  function doRun() {
    var ret = 0;
    calledRun = true;
    if (Module['_main']) {
      preMain();
      ret = Module.callMain(args);
      if (!Module['noExitRuntime']) {
        exitRuntime();
      }
    }
    if (Module['postRun']) {
      if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
      while (Module['postRun'].length > 0) {
        Module['postRun'].pop()();
      }
    }
    return ret;
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
    return 0;
  } else {
    return doRun();
  }
}
Module['run'] = Module.run = run;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

initRuntime();

var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

if (shouldRunNow) {
  var ret = run();
}

// {{POST_RUN_ADDITIONS}}






  // {{MODULE_ADDITIONS}}


// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_sys_trim","__ZL15lua_strx2numberPKcPPc","__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib","__Z11luaV_concatP9lua_Statei","__Z17luaF_getlocalnamePK5Protoii","__ZL10stackinuseP9lua_State","__ZL6callTMP9lua_StatePK10lua_TValueS3_S3_PS1_i","__Z17luaD_reallocstackP9lua_Statei","__ZL9traceexecP9lua_State","__ZL11get_equalTMP9lua_StateP5TableS2_3TMS","__ZL9newshrstrP9lua_StatePKcjj","__Z10luaO_arithidd","__ZL13propagatemarkP12global_State","__ZL6f_callP9lua_StatePv","__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv","_init_mparams","__ZL10index2addrP9lua_Statei","__ZL7hashnumPK5Tabled","__ZL8markrootP12global_State","__Z15luaG_ordererrorP9lua_StatePK10lua_TValueS3_","__ZL17traverseephemeronP12global_StateP5Table","__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv","__ZL12remarkupvalsP12global_State","__ZL11seterrorobjP9lua_StateiP10lua_TValue","__ZL5knameP5ProtoiiPPKc","__ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i","__ZL9clearkeysP12global_StateP8GCObjectS2_","__ZL15separatetobefnzP9lua_Statei","__Z11luaE_freeCIP9lua_State","__ZL9tryfuncTMP9lua_StateP10lua_TValue","_release_unused_segments","__ZdlPv","__ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi","_free","__ZN10__cxxabiv120__si_class_type_infoD0Ev","__ZL16traverseCclosureP12global_StateP8CClosure","__Z11luaM_toobigP9lua_State","__ZL13traversetableP12global_StateP5Table","__ZL9getcachedP5ProtoPP5UpValP10lua_TValue","__ZL17traverseweakvalueP12global_StateP5Table","__ZN10__cxxabiv123__fundamental_type_infoD0Ev","__Z11luaH_newkeyP9lua_StateP5TablePK10lua_TValue","__Z13luaV_settableP9lua_StatePK10lua_TValuePS1_S4_","__Z14luaD_growstackP9lua_Statei","__ZL12call_orderTMP9lua_StatePK10lua_TValueS3_3TMS","__ZL13propagatelistP12global_StateP8GCObject","___dynamic_cast","__ZL16traverseLclosureP12global_StateP8LClosure","__ZL7freeobjP9lua_StateP8GCObject","__Z14luaF_freeupvalP9lua_StateP5UpVal","__ZL14udata2finalizeP12global_State","__Z11luaO_fb2inti","__Z13luaG_runerrorP9lua_StatePKcz","__ZL11numusearrayPK5TablePi","__Z18luaC_barrierproto_P9lua_StateP5ProtoP7Closure","__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi","__Z16luaF_newLclosureP9lua_Statei","__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib","__Z13luaV_tonumberPK10lua_TValuePS_","__ZL15retraversegraysP12global_State","__Z14luaZ_openspaceP9lua_StateP7Mbufferj","__ZL10getobjnameP5ProtoiiPPKc","__ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi","__ZL10numusehashPK5TablePiS2_","__ZL8callhookP9lua_StateP8CallInfo","__ZNK10__cxxabiv116__shim_type_info5noop2Ev","__Z16luaC_runtilstateP9lua_Statei","__Z11luaS_resizeP9lua_Statei","__Z9luaS_hashPKcjj","__ZL10getfreeposP5Table","__Z14luaV_equalobj_P9lua_StatePK10lua_TValueS3_","__ZL10entersweepP9lua_State","__Z10luaD_pcallP9lua_StatePFvS0_PvES1_ii","__Z11luaH_setintP9lua_StateP5TableiP10lua_TValue","__Z14luaF_findupvalP9lua_StateP10lua_TValue","__ZL22generationalcollectionP9lua_State","__Z10luaD_throwP9lua_Statei","__Z10luaV_arithP9lua_StateP10lua_TValuePKS1_S4_3TMS","__ZL12markbeingfnzP12global_State","__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib","__Z14luaG_typeerrorP9lua_StatePK10lua_TValuePKc","__ZL11unlinkupvalP5UpVal","__ZN10__cxxabiv119__pointer_type_infoD0Ev","__Z9luaC_stepP9lua_State","__ZL8readhexaPPKcdPi","__ZNSt9type_infoD2Ev","__ZL11removeentryP4Node","__ZL10arrayindexPK10lua_TValue","__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib","__ZL12getupvalnameP8CallInfoPK10lua_TValuePPKc","__Z10luaO_str2dPKcjPd","__Z12luaS_newlstrP9lua_StatePKcj","__ZL9upvalnameP5Protoi","__ZL9dothecallP9lua_StatePv","__Z12luaO_chunkidPcPKcj","__ZL12createstrobjP9lua_StatePKcjijPP8GCObject","__ZL9sweeplistP9lua_StatePP8GCObjectj","__Z16luaO_pushfstringP9lua_StatePKcz","__ZL19traversestrongtableP12global_StateP5Table","__Z16luaG_concaterrorP9lua_StateP10lua_TValueS2_","__ZL6atomicP9lua_State","__Z9luaH_freeP9lua_StateP5Table","__Z12luaV_executeP9lua_State","__Z15luaG_aritherrorP9lua_StatePK10lua_TValueS3_","__Z9luaH_getnP5Table","__Z11luaH_getintP5Tablei","__Z20luaC_checkupvalcolorP12global_StateP5UpVal","__ZL12internshrstrP9lua_StatePKcj","__ZL5isnegPPKc","__Z16luaH_resizearrayP9lua_StateP5Tablei","__ZL7addinfoP9lua_StatePKc","__ZL13setnodevectorP9lua_StateP5Tablei","__Z13luaC_barrier_P9lua_StateP8GCObjectS2_","__ZL9freestackP9lua_State","__ZL9isinstackP8CallInfoPK10lua_TValue","__ZL12mainpositionPK5TablePK10lua_TValue","__ZL7pushstrP9lua_StatePKcj","__ZL10checkSizesP9lua_State","__Z11luaV_objlenP9lua_StateP10lua_TValuePKS1_","__ZL9isclearedP12global_StatePK10lua_TValue","__Z15luaT_gettmbyobjP9lua_StatePK10lua_TValue3TMS","__Z10luaF_closeP9lua_StateP10lua_TValue","__Z9luaD_callP9lua_StateP10lua_TValueii","__Z20luaD_rawrunprotectedP9lua_StatePFvS0_PvES1_","__ZL11clearvaluesP12global_StateP8GCObjectS2_","__Z8luaH_getP5TablePK10lua_TValue","__Z14luaF_freeprotoP9lua_StateP5Proto","__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv","__Z15luaE_freethreadP9lua_StateS0_","__ZL16reallymarkobjectP12global_StateP8GCObject","__ZL13traverseprotoP12global_StateP5Proto","__ZL14adjust_varargsP9lua_StateP5Protoi","__Z13luaO_ceillog2j","__ZL11sweeptoliveP9lua_StatePP8GCObjectPi","__ZL8l_strcmpPK7TStringS1_","__Z10lua_pcallkP9lua_StateiiiiPFiS0_E","__Z12luaD_precallP9lua_StateP10lua_TValuei","__ZL14unbound_searchP5Tablej","__ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv","__Z12luaE_setdebtP12global_Statei","__Z13luaG_errormsgP9lua_State","__ZL10findsetregP5Protoii","__ZN10__cxxabiv117__class_type_infoD0Ev","__Z9luaD_hookP9lua_Stateii","__Z11luaC_newobjP9lua_StateijPP8GCObjecti","__Z11luaC_fullgcP9lua_Statei","__ZL24callallpendingfinalizersP9lua_Statei","__Z17luaO_pushvfstringP9lua_StatePKcPc","__ZL12propagateallP12global_State","_init_top","__ZL18convergeephemeronsP12global_State","__ZL6markmtP12global_State","__Z11luaH_resizeP9lua_StateP5Tableii","__Z12luaD_poscallP9lua_StateP10lua_TValue","__ZN10__cxxabiv116__shim_type_infoD2Ev","__ZL12correctstackP9lua_StateP10lua_TValue","__ZL13traversestackP12global_StateP9lua_State","__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi","__Z14luaO_hexavaluei","__ZL11sweepthreadP9lua_StateS0_","__Z13luaS_eqlngstrP7TStringS0_","_segment_holding","__ZL11pushclosureP9lua_StateP5ProtoPP5UpValP10lua_TValueS7_","__ZL10call_binTMP9lua_StatePK10lua_TValueS3_PS1_3TMS","__ZNK10__cxxabiv116__shim_type_info5noop1Ev","__ZL14setarrayvectorP9lua_StateP5Tablei","__ZL8countintPK10lua_TValuePi","__Z13luaE_extendCIP9lua_State","__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b","__Z8luaH_setP9lua_StateP5TablePK10lua_TValue","__ZL7incstepP9lua_State","__Z10luaT_gettmP5Table3TMSP7TString","__Z14luaC_forcestepP9lua_State","__ZL11currentlineP8CallInfo","__Z13luaV_tostringP9lua_StateP10lua_TValue","__Z8luaH_newP9lua_State","__Z11luaH_getstrP5TableP7TString","__Z14luaV_lessequalP9lua_StatePK10lua_TValueS3_","__ZL12computesizesPiS_","__Z13luaM_realloc_P9lua_StatePvjj","__Z17luaC_barrierback_P9lua_StateP8GCObject","__Z13luaV_gettableP9lua_StatePK10lua_TValuePS1_S4_","__ZL4GCTMP9lua_Statei","__ZL9currentpcP8CallInfo","__ZL6rehashP9lua_StateP5TablePK10lua_TValue","__Z13luaV_lessthanP9lua_StatePK10lua_TValueS3_","__Z16luaD_shrinkstackP9lua_State","__ZL10singlestepP9lua_State"]


