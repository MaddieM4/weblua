// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function(filename) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename).toString();
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename).toString();
    }
    return ret;
  };

  Module['load'] = function(f) {
    globalEval(read(f));
  };

  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
}

if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  // Polyfill over SpiderMonkey/V8 differences
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function(f) { snarf(f) };
  }

  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }

  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }
}

if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...
  var TRY_USE_DUMP = false;
  if (!Module['print']) {
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  Module['load'] = importScripts;
}

if (!ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_SHELL) {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
if (!Module['preRun']) Module['preRun'] = [];
if (!Module['postRun']) Module['postRun'] = [];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (/^\[\d+\ x\ (.*)\]/.test(type)) return true; // [15 x ?] blocks. Like structs
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  BITSHIFT64_SHL: 0,
  BITSHIFT64_ASHR: 1,
  BITSHIFT64_LSHR: 2,
  bitshift64: function (low, high, op, bits) {
    var ret;
    var ander = Math.pow(2, bits)-1;
    if (bits < 32) {
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [low << bits, (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [(((low >>> bits ) | ((high&ander) << (32 - bits))) >> 0) >>> 0, (high >> bits) >>> 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [((low >>> bits) | ((high&ander) << (32 - bits))) >>> 0, high >>> bits];
          break;
      }
    } else if (bits == 32) {
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [0, low];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [high, (high|0) < 0 ? ander : 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [high, 0];
          break;
      }
    } else { // bits > 32
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [0, low << (bits - 32)];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [(high >> (bits - 32)) >>> 0, (high|0) < 0 ? ander : 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [high >>>  (bits - 32) , 0];
          break;
      }
    }
    HEAP32[tempDoublePtr>>2] = ret[0]; // cannot use utility functions since we are in runtime itself
    HEAP32[tempDoublePtr+4>>2] = ret[1];
  },
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type.charAt(type.length-1) == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func, sig) {
    //assert(sig); // TODO: support asm
    var table = FUNCTION_TABLE; // TODO: support asm
    var ret = table.length;
    table.push(func);
    table.push(0);
    return ret;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function stackAlloc(size) { var ret = STACKTOP;_memset(STACKTOP, 0, size);STACKTOP = (STACKTOP + size)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2); return ret; },
  staticAlloc: function staticAlloc(size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = ((((STATICTOP)+3)>>2)<<2); if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function alignMemory(size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  makeBigInt: function makeBigInt(low,high,unsigned) { var ret = (unsigned ? (((low)>>>0)+(((high)>>>0)*4294967296)) : (((low)>>>0)+(((high)|0)*4294967296))); return ret; },
  QUANTUM_SIZE: 4,
  __dummy__: 0
}







//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};

var ABORT = false;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = eval('_' + ident);
  } catch(e) {
    try {
      func = globalScope['Module']['_' + ident]; // closure exported function
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,Math.min(Math.floor((value)/4294967296), 4294967295)>>>0],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': (HEAPF64[(tempDoublePtr)>>3]=value,HEAP32[((ptr)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((ptr)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return (HEAP32[((tempDoublePtr)>>2)]=HEAP32[((ptr)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((ptr)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_NONE = 3; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// Simple unoptimized memset - necessary during startup
var _memset = function(ptr, value, num) {
  var stop = ptr + num;
  while (ptr < stop) {
    HEAP8[((ptr++)|0)]=value;
  }
}

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    _memset(ret, 0, size);
    return ret;
  }

  if (singleType === 'i8') {
    HEAPU8.set(new Uint8Array(slab), ret);
    return ret;
  }

  var i = 0, type;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);
    i += Runtime.getNativeTypeSize(type);
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  var utf8 = new Runtime.UTF8Processor();
  var nullTerminated = typeof(length) == "undefined";
  var ret = "";
  var i = 0;
  var t;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (nullTerminated && t == 0) break;
    ret += utf8.processCChar(t);
    i += 1;
    if (!nullTerminated && i == length) break;
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}
Module['Array_stringify'] = Array_stringify;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STACK_ROOT, STACKTOP, STACK_MAX;
var STATICTOP;
function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value, (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

STACK_ROOT = STACKTOP = Runtime.alignMemory(1);
STACK_MAX = TOTAL_STACK; // we lose a little stack here, but TOTAL_STACK is nice and round so use that as the max

var tempDoublePtr = Runtime.alignMemory(allocate(12, 'i8', ALLOC_STACK), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

STATICTOP = STACK_MAX;
assert(STATICTOP < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY

var nullString = allocate(intArrayFromString('(null)'), 'i8', ALLOC_STACK);

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown

function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

if (!Math.imul) Math.imul = function(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 6000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!calledRun && shouldRunNow) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

// === Body ===



assert(STATICTOP == STACK_MAX); assert(STACK_MAX == TOTAL_STACK);

STATICTOP += 11364;

assert(STATICTOP < TOTAL_MEMORY);





var _stdout;
var _stdin;
var _stderr;


































































































































































































































































































































































































































































































































































































































































allocate([117,115,101,114,100,97,116,97,0] /* userdata\00 */, "i8", ALLOC_NONE, 5242880);
allocate([0,0,0,0,278,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,126,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,334,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 5242892);
allocate([0,0,0,0,48,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,212,0,0,0,0,0,0,0,330,0,0,0,0,0,0,0,296,0,0,0,0,0,0,0,252,0,0,0,0,0,0,0,68,0,0,0,0,0,0,0,276,0,0,0,0,0,0,0,232,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,132,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 5242948);
allocate([0,0,0,0,230,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,70,0,0,0,0,0,0,0,142,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,150,0,0,0,0,0,0,0,226,0,0,0,0,0,0,0,218,0,0,0,0,0,0,0,80,0,0,0,0,0,0,0,130,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,264,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 5243044);
allocate([6,6,6,6,7,7,7,7,7,7,10,9,5,4,3,3,3,3,3,3,3,3,3,3,3,3,2,2,1,1], "i8", ALLOC_NONE, 5243164);
allocate(8, "i8", ALLOC_NONE, 5243196);
allocate([0,0,0,0,82,0,0,0,0,0,0,0,216,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 5243204);
allocate(28, "i8", ALLOC_NONE, 5243228);
allocate([0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0], "i8", ALLOC_NONE, 5243256);
allocate(24, "i8", ALLOC_NONE, 5243280);
allocate([0,0,0,0,36,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,164,0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,190,0,0,0,0,0,0,0,326,0,0,0,0,0,0,0,198,0,0,0,0,0,0,0,74,0,0,0,0,0,0,0,98,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,244,0,0,0,0,0,0,0,188,0,0,0,0,0,0,0,248,0,0,0,0,0,0,0,258,0,0,0,0,0,0,0,228,0,0,0,0,0,0,0,220,0,0,0,0,0,0,0,118,0,0,0,0,0,0,0,170,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,154,0,0,0,0,0,0,0,234,0,0,0,0,0,0,0,34,0,0,0,0,0,0,0,288,0,0,0,0,0,0,0,324,0,0,0,0,0,0,0,200,0,0,0,0,0,0,0,180,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 5243304);
allocate([0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,22,22,22,22,22,22,22,22,22,22,4,4,4,4,4,4,4,21,21,21,21,21,21,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,5,4,21,21,21,21,21,21,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] /* \00\00\00\00\00\00\0 */, "i8", ALLOC_NONE, 5243528);
allocate([0,0,0,0,0,96,127,64], "i8", ALLOC_NONE, 5243788);
allocate([33,0,0,0,0,0,56,195], "i8", ALLOC_NONE, 5243796);
allocate(132, "i8", ALLOC_NONE, 5243804);
allocate(48, "i8", ALLOC_NONE, 5243936);
allocate(68, "i8", ALLOC_NONE, 5243984);
allocate([96,113,65,84,80,80,92,108,60,16,60,84,108,124,124,124,124,124,124,96,96,96,104,34,188,188,188,132,228,84,84,16,98,98,4,98,20,81,80,23] /* `qATPP\5Cl_\10_Tl||| */, "i8", ALLOC_NONE, 5244052);
allocate(12, "i8", ALLOC_NONE, 5244092);
allocate([0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8] /* \00\01\02\02\03\03\0 */, "i8", ALLOC_NONE, 5244104);
allocate([33,0,0,0,0,0,56,195], "i8", ALLOC_NONE, 5244360);
allocate([0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0], "i8", ALLOC_NONE, 5244368);
allocate(48, "i8", ALLOC_NONE, 5244412);
allocate([0,0,0,0,282,0,0,0,0,0,0,0,168,0,0,0,0,0,0,0,318,0,0,0,0,0,0,0,314,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,124,0,0,0,0,0,0,0,86,0,0,0,0,0,0,0,290,0,0,0,0,0,0,0,54,0,0,0,0,0,0,0,186,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 5244460);
allocate([0,0,0,0,144,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 5244548);
allocate([0,0,0,0,148,0,0,0,0,0,0,0,342,0,0,0,0,0,0,0,300,0,0,0,0,0,0,0,104,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,202,0,0,0,0,0,0,0,184,0,0,0,0,0,0,0,246,0,0,0,0,0,0,0,66,0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 5244564);
allocate(20, "i8", ALLOC_NONE, 5244660);
allocate([0,0,0,0,148,0,0,0,0,0,0,0,240,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,158,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,346,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,332,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 5244680);
allocate(16, "i8", ALLOC_NONE, 5244760);
allocate([2,0,0,0,0,0,0,0,1,0,0,0], "i8", ALLOC_NONE, 5244776);
allocate(16, "i8", ALLOC_NONE, 5244788);
allocate([0,0,0,0,1,0,0,0,2,0,0,0], "i8", ALLOC_NONE, 5244804);
allocate(28, "i8", ALLOC_NONE, 5244816);
allocate([0,0,0,0,272,0,0,0,0,0,0,0,344,0,0,0,0,0,0,0,38,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,302,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,134,0,0,0,0,0,0,0,136,0,0,0,0,0,0,0,42,0,0,0,0,0,0,0,294,0,0,0,0,0,0,0,210,0,0,0,0,0,0,0,266,0,0,0,0,0,0,0,110,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,340,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 5244844);
allocate([116,0,0,0,30,0,0,0,312,0,0,0,6,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 5244980);
allocate([0,0,0,0,140,0,0,0,0,0,0,0,268,0,0,0,0,0,0,0,162,0,0,0,0,0,0,0,262,0,0,0,0,0,0,0,160,0,0,0,0,0,0,0,208,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 5245000);
allocate(8, "i8", ALLOC_NONE, 5245056);
allocate([0,0,0,0,336,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,322,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,112,0,0,0,0,0,0,0,304,0,0,0,0,0,0,0,176,0,0,0,0,0,0,0,204,0,0,0,0,0,0,0,292,0,0,0,0,0,0,0,114,0,0,0,0,0,0,0,308,0,0,0,0,0,0,0,174,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 5245064);
allocate([0,0,0,0,88,0,0,0,0,0,0,0,310,0,0,0,0,0,0,0,224,0,0,0,0,0,0,0,260,0,0,0,0,0,0,0,242,0,0,0,0,0,0,0,280,0,0,0,0,0,0,0,250,0,0,0,0,0,0,0,316,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,196,0,0,0,0,0,0,0,254,0,0,0,0,0,0,0,238,0,0,0,0,0,0,0,206,0,0,0,0,0,0,0,328,0,0,0,0,0,0,0,306,0,0,0,0,0,0,0,298,0,0,0,0,0,0,0,274,0,0,0,0,0,0,0,138,0,0,0,0,0,0,0,92,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,156,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 5245168);
allocate([33,0,0,0,0,0,56,195], "i8", ALLOC_NONE, 5245352);
allocate([33,0,0,0,0,0,56,195], "i8", ALLOC_NONE, 5245360);
allocate([43,45,0] /* +-\00 */, "i8", ALLOC_NONE, 5245368);
allocate([109,97,116,104,0] /* math\00 */, "i8", ALLOC_NONE, 5245372);
allocate([76,85,65,95,67,80,65,84,72,0] /* LUA_CPATH\00 */, "i8", ALLOC_NONE, 5245380);
allocate([110,0] /* n\00 */, "i8", ALLOC_NONE, 5245392);
allocate([108,101,110,0] /* len\00 */, "i8", ALLOC_NONE, 5245396);
allocate([116,105,109,101,0] /* time\00 */, "i8", ALLOC_NONE, 5245400);
allocate([99,111,115,0] /* cos\00 */, "i8", ALLOC_NONE, 5245408);
allocate([102,108,117,115,104,0] /* flush\00 */, "i8", ALLOC_NONE, 5245412);
allocate([117,112,118,97,108,117,101,105,100,0] /* upvalueid\00 */, "i8", ALLOC_NONE, 5245420);
allocate([99,111,114,111,117,116,105,110,101,32,101,120,112,101,99,116,101,100,0] /* coroutine expected\0 */, "i8", ALLOC_NONE, 5245432);
allocate([114,101,112,108,97,99,101,0] /* replace\00 */, "i8", ALLOC_NONE, 5245452);
allocate([108,111,97,100,102,105,108,101,0] /* loadfile\00 */, "i8", ALLOC_NONE, 5245460);
allocate([110,0] /* n\00 */, "i8", ALLOC_NONE, 5245472);
allocate([99,97,110,110,111,116,32,114,101,115,117,109,101,32,110,111,110,45,115,117,115,112,101,110,100,101,100,32,99,111,114,111,117,116,105,110,101,0] /* cannot resume non-su */, "i8", ALLOC_NONE, 5245476);
allocate([118,101,114,115,105,111,110,32,109,105,115,109,97,116,99,104,32,105,110,0] /* version mismatch in\ */, "i8", ALLOC_NONE, 5245516);
allocate([117,112,118,97,108,0] /* upval\00 */, "i8", ALLOC_NONE, 5245536);
allocate([115,101,108,102,0] /* self\00 */, "i8", ALLOC_NONE, 5245544);
allocate([103,108,111,98,97,108,0] /* global\00 */, "i8", ALLOC_NONE, 5245552);
allocate([80,112,0] /* Pp\00 */, "i8", ALLOC_NONE, 5245560);
allocate([98,105,116,51,50,0] /* bit32\00 */, "i8", ALLOC_NONE, 5245564);
allocate([76,85,65,95,67,80,65,84,72,95,53,95,50,0] /* LUA_CPATH_5_2\00 */, "i8", ALLOC_NONE, 5245572);
allocate([116,111,111,32,109,97,110,121,32,114,101,115,117,108,116,115,32,116,111,32,117,110,112,97,99,107,0] /* too many results to  */, "i8", ALLOC_NONE, 5245588);
allocate([103,115,117,98,0] /* gsub\00 */, "i8", ALLOC_NONE, 5245616);
allocate([115,101,116,108,111,99,97,108,101,0] /* setlocale\00 */, "i8", ALLOC_NONE, 5245624);
allocate([99,111,115,104,0] /* cosh\00 */, "i8", ALLOC_NONE, 5245636);
allocate([99,108,111,115,101,0] /* close\00 */, "i8", ALLOC_NONE, 5245644);
allocate([117,112,118,97,108,117,101,106,111,105,110,0] /* upvaluejoin\00 */, "i8", ALLOC_NONE, 5245652);
allocate([116,111,111,32,109,97,110,121,32,114,101,115,117,108,116,115,32,116,111,32,114,101,115,117,109,101,0] /* too many results to  */, "i8", ALLOC_NONE, 5245664);
allocate([108,115,104,105,102,116,0] /* lshift\00 */, "i8", ALLOC_NONE, 5245692);
allocate([105,112,97,105,114,115,0] /* ipairs\00 */, "i8", ALLOC_NONE, 5245700);
allocate([98,97,100,32,97,114,103,117,109,101,110,116,32,35,37,100,32,40,37,115,41,0] /* bad argument #%d (%s */, "i8", ALLOC_NONE, 5245708);
allocate([101,114,114,111,114,32,105,110,32,101,114,114,111,114,32,104,97,110,100,108,105,110,103,0] /* error in error handl */, "i8", ALLOC_NONE, 5245732);
allocate([39,102,111,114,39,32,115,116,101,112,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0] /* 'for' step must be a */, "i8", ALLOC_NONE, 5245756);
allocate([110,111,116,32,97,0] /* not a\00 */, "i8", ALLOC_NONE, 5245784);
allocate([112,114,111,116,111,0] /* proto\00 */, "i8", ALLOC_NONE, 5245792);
allocate([99,97,110,110,111,116,32,117,115,101,32,39,46,46,46,39,32,111,117,116,115,105,100,101,32,97,32,118,97,114,97,114,103,32,102,117,110,99,116,105,111,110,0] /* cannot use '...' out */, "i8", ALLOC_NONE, 5245800);
allocate([34,93,0] /* \22]\00 */, "i8", ALLOC_NONE, 5245844);
allocate([95,69,78,86,0] /* _ENV\00 */, "i8", ALLOC_NONE, 5245848);
allocate([39,37,99,39,0] /* '%c'\00 */, "i8", ALLOC_NONE, 5245856);
allocate([88,120,0] /* Xx\00 */, "i8", ALLOC_NONE, 5245864);
allocate([115,116,114,105,110,103,0] /* string\00 */, "i8", ALLOC_NONE, 5245868);
allocate([99,112,97,116,104,0] /* cpath\00 */, "i8", ALLOC_NONE, 5245876);
allocate([105,110,118,97,108,105,100,32,111,114,100,101,114,32,102,117,110,99,116,105,111,110,32,102,111,114,32,115,111,114,116,105,110,103,0] /* invalid order functi */, "i8", ALLOC_NONE, 5245884);
allocate([103,109,97,116,99,104,0] /* gmatch\00 */, "i8", ALLOC_NONE, 5245920);
allocate([114,101,110,97,109,101,0] /* rename\00 */, "i8", ALLOC_NONE, 5245928);
allocate([99,101,105,108,0] /* ceil\00 */, "i8", ALLOC_NONE, 5245936);
allocate([95,95,105,110,100,101,120,0] /* __index\00 */, "i8", ALLOC_NONE, 5245944);
allocate([103,101,116,117,112,118,97,108,117,101,0] /* getupvalue\00 */, "i8", ALLOC_NONE, 5245952);
allocate([95,80,82,69,76,79,65,68,0] /* _PRELOAD\00 */, "i8", ALLOC_NONE, 5245964);
allocate([99,97,110,110,111,116,32,114,101,115,117,109,101,32,100,101,97,100,32,99,111,114,111,117,116,105,110,101,0] /* cannot resume dead c */, "i8", ALLOC_NONE, 5245976);
allocate([108,114,111,116,97,116,101,0] /* lrotate\00 */, "i8", ALLOC_NONE, 5246008);
allocate([103,101,116,109,101,116,97,116,97,98,108,101,0] /* getmetatable\00 */, "i8", ALLOC_NONE, 5246016);
allocate([10,9,40,46,46,46,116,97,105,108,32,99,97,108,108,115,46,46,46,41,0] /* \0A\09(...tail calls */, "i8", ALLOC_NONE, 5246032);
allocate([97,116,116,101,109,112,116,32,116,111,32,108,111,97,100,32,97,32,37,115,32,99,104,117,110,107,32,40,109,111,100,101,32,105,115,32,39,37,115,39,41,0] /* attempt to load a %s */, "i8", ALLOC_NONE, 5246056);
allocate([39,102,111,114,39,32,108,105,109,105,116,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0] /* 'for' limit must be  */, "i8", ALLOC_NONE, 5246100);
allocate([99,111,114,114,117,112,116,101,100,0] /* corrupted\00 */, "i8", ALLOC_NONE, 5246132);
allocate([116,104,114,101,97,100,0] /* thread\00 */, "i8", ALLOC_NONE, 5246144);
allocate([67,32,108,101,118,101,108,115,0] /* C levels\00 */, "i8", ALLOC_NONE, 5246152);
allocate([91,115,116,114,105,110,103,32,34,0] /* [string \22\00 */, "i8", ALLOC_NONE, 5246164);
allocate([95,67,76,73,66,83,0] /* _CLIBS\00 */, "i8", ALLOC_NONE, 5246176);
allocate([108,111,99,97,108,0] /* local\00 */, "i8", ALLOC_NONE, 5246184);
allocate([99,111,110,99,97,116,0] /* concat\00 */, "i8", ALLOC_NONE, 5246192);
allocate([69,101,0] /* Ee\00 */, "i8", ALLOC_NONE, 5246200);
allocate([111,115,0] /* os\00 */, "i8", ALLOC_NONE, 5246204);
allocate([47,117,115,114,47,108,111,99,97,108,47,115,104,97,114,101,47,108,117,97,47,53,46,50,47,63,46,108,117,97,59,47,117,115,114,47,108,111,99,97,108,47,115,104,97,114,101,47,108,117,97,47,53,46,50,47,63,47,105,110,105,116,46,108,117,97,59,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,50,47,63,46,108,117,97,59,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,50,47,63,47,105,110,105,116,46,108,117,97,59,46,47,63,46,108,117,97,0] /* /usr/local/share/lua */, "i8", ALLOC_NONE, 5246208);
allocate(1, "i8", ALLOC_NONE, 5246348);
allocate([102,111,114,109,97,116,0] /* format\00 */, "i8", ALLOC_NONE, 5246352);
allocate([114,101,109,111,118,101,0] /* remove\00 */, "i8", ALLOC_NONE, 5246360);
allocate([97,116,97,110,0] /* atan\00 */, "i8", ALLOC_NONE, 5246368);
allocate([99,97,110,110,111,116,32,99,108,111,115,101,32,115,116,97,110,100,97,114,100,32,102,105,108,101,0] /* cannot close standar */, "i8", ALLOC_NONE, 5246376);
allocate(1, "i8", ALLOC_NONE, 5246404);
allocate([103,101,116,109,101,116,97,116,97,98,108,101,0] /* getmetatable\00 */, "i8", ALLOC_NONE, 5246408);
allocate([116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,32,116,111,32,114,101,115,117,109,101,0] /* too many arguments t */, "i8", ALLOC_NONE, 5246424);
allocate([101,120,116,114,97,99,116,0] /* extract\00 */, "i8", ALLOC_NONE, 5246456);
allocate([101,114,114,111,114,0] /* error\00 */, "i8", ALLOC_NONE, 5246464);
allocate([32,105,110,32,0] /*  in \00 */, "i8", ALLOC_NONE, 5246472);
allocate([39,102,111,114,39,32,105,110,105,116,105,97,108,32,118,97,108,117,101,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0] /* 'for' initial value  */, "i8", ALLOC_NONE, 5246480);
allocate([116,101,120,116,0] /* text\00 */, "i8", ALLOC_NONE, 5246520);
allocate([37,115,58,32,37,115,32,112,114,101,99,111,109,112,105,108,101,100,32,99,104,117,110,107,0] /* %s: %s precompiled c */, "i8", ALLOC_NONE, 5246528);
allocate([102,117,110,99,116,105,111,110,0] /* function\00 */, "i8", ALLOC_NONE, 5246556);
allocate([99,108,111,99,107,0] /* clock\00 */, "i8", ALLOC_NONE, 5246568);
allocate([115,121,110,116,97,120,32,101,114,114,111,114,0] /* syntax error\00 */, "i8", ALLOC_NONE, 5246576);
allocate([46,46,46,0] /* ...\00 */, "i8", ALLOC_NONE, 5246592);
allocate([37,115,58,37,100,58,32,37,115,0] /* %s:%d: %s\00 */, "i8", ALLOC_NONE, 5246596);
allocate([110,111,32,109,101,115,115,97,103,101,0] /* no message\00 */, "i8", ALLOC_NONE, 5246608);
allocate([112,105,0] /* pi\00 */, "i8", ALLOC_NONE, 5246620);
allocate([46,0] /* .\00 */, "i8", ALLOC_NONE, 5246624);
allocate([105,111,0] /* io\00 */, "i8", ALLOC_NONE, 5246628);
allocate([76,85,65,95,80,65,84,72,0] /* LUA_PATH\00 */, "i8", ALLOC_NONE, 5246632);
allocate([115,111,114,116,0] /* sort\00 */, "i8", ALLOC_NONE, 5246644);
allocate([102,105,110,100,0] /* find\00 */, "i8", ALLOC_NONE, 5246652);
allocate([103,101,116,101,110,118,0] /* getenv\00 */, "i8", ALLOC_NONE, 5246660);
allocate([97,116,97,110,50,0] /* atan2\00 */, "i8", ALLOC_NONE, 5246668);
allocate([70,73,76,69,42,0] /* FILE_\00 */, "i8", ALLOC_NONE, 5246676);
allocate([97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,33,0] /* assertion failed!\00 */, "i8", ALLOC_NONE, 5246684);
allocate([103,101,116,114,101,103,105,115,116,114,121,0] /* getregistry\00 */, "i8", ALLOC_NONE, 5246704);
allocate([121,105,101,108,100,0] /* yield\00 */, "i8", ALLOC_NONE, 5246716);
allocate([98,116,101,115,116,0] /* btest\00 */, "i8", ALLOC_NONE, 5246724);
allocate([100,111,102,105,108,101,0] /* dofile\00 */, "i8", ALLOC_NONE, 5246732);
allocate([37,115,0] /* %s\00 */, "i8", ALLOC_NONE, 5246740);
allocate([95,73,79,95,105,110,112,117,116,0] /* _IO_input\00 */, "i8", ALLOC_NONE, 5246744);
allocate([37,115,10,0] /* %s\0A\00 */, "i8", ALLOC_NONE, 5246756);
allocate([37,100,58,0] /* %d:\00 */, "i8", ALLOC_NONE, 5246760);
allocate([105,110,99,114,101,109,101,110,116,97,108,0] /* incremental\00 */, "i8", ALLOC_NONE, 5246764);
allocate([103,101,116,32,108,101,110,103,116,104,32,111,102,0] /* get length of\00 */, "i8", ALLOC_NONE, 5246776);
allocate([98,105,110,97,114,121,0] /* binary\00 */, "i8", ALLOC_NONE, 5246792);
allocate([60,115,116,114,105,110,103,62,0] /* _string_\00 */, "i8", ALLOC_NONE, 5246800);
allocate([116,114,117,110,99,97,116,101,100,0] /* truncated\00 */, "i8", ALLOC_NONE, 5246812);
allocate([116,97,98,108,101,0] /* table\00 */, "i8", ALLOC_NONE, 5246824);
allocate([61,40,100,101,98,117,103,32,99,111,109,109,97,110,100,41,0] /* =(debug command)\00 */, "i8", ALLOC_NONE, 5246832);
allocate([103,101,110,101,114,97,116,105,111,110,97,108,0] /* generational\00 */, "i8", ALLOC_NONE, 5246852);
allocate([102,117,110,99,116,105,111,110,32,60,37,115,58,37,100,62,0] /* function _%s:%d_\00 */, "i8", ALLOC_NONE, 5246868);
allocate([60,110,97,109,101,62,0] /* _name_\00 */, "i8", ALLOC_NONE, 5246888);
allocate([37,115,32,101,120,112,101,99,116,101,100,0] /* %s expected\00 */, "i8", ALLOC_NONE, 5246896);
allocate([99,111,110,116,10,0] /* cont\0A\00 */, "i8", ALLOC_NONE, 5246908);
allocate([105,115,114,117,110,110,105,110,103,0] /* isrunning\00 */, "i8", ALLOC_NONE, 5246916);
allocate([109,97,105,110,32,99,104,117,110,107,0] /* main chunk\00 */, "i8", ALLOC_NONE, 5246928);
allocate([105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,39,37,37,37,99,39,32,116,111,32,39,108,117,97,95,112,117,115,104,102,115,116,114,105,110,103,39,0] /* invalid option '%%%c */, "i8", ALLOC_NONE, 5246940);
allocate([97,116,116,101,109,112,116,32,116,111,32,99,111,109,112,97,114,101,32,37,115,32,119,105,116,104,32,37,115,0] /* attempt to compare % */, "i8", ALLOC_NONE, 5246984);
allocate([60,110,117,109,98,101,114,62,0] /* _number_\00 */, "i8", ALLOC_NONE, 5247016);
allocate([108,117,97,95,100,101,98,117,103,62,32,0] /* lua_debug_ \00 */, "i8", ALLOC_NONE, 5247028);
allocate([115,101,116,109,97,106,111,114,105,110,99,0] /* setmajorinc\00 */, "i8", ALLOC_NONE, 5247040);
allocate([102,117,110,99,116,105,111,110,32,39,37,115,39,0] /* function '%s'\00 */, "i8", ALLOC_NONE, 5247052);
allocate([60,101,111,102,62,0] /* _eof_\00 */, "i8", ALLOC_NONE, 5247068);
allocate([97,116,116,101,109,112,116,32,116,111,32,37,115,32,37,115,32,39,37,115,39,32,40,97,32,37,115,32,118,97,108,117,101,41,0] /* attempt to %s %s '%s */, "i8", ALLOC_NONE, 5247076);
allocate([105,110,118,97,108,105,100,32,109,111,100,101,32,39,37,115,39,32,40,115,104,111,117,108,100,32,109,97,116,99,104,32,39,91,114,119,97,93,37,37,43,63,98,63,39,41,0] /* invalid mode '%s' (s */, "i8", ALLOC_NONE, 5247112);
allocate([37,115,0] /* %s\00 */, "i8", ALLOC_NONE, 5247160);
allocate([115,101,116,115,116,101,112,109,117,108,0] /* setstepmul\00 */, "i8", ALLOC_NONE, 5247164);
allocate([46,0] /* .\00 */, "i8", ALLOC_NONE, 5247176);
allocate([58,58,0] /* ::\00 */, "i8", ALLOC_NONE, 5247180);
allocate([97,116,116,101,109,112,116,32,116,111,32,99,111,109,112,97,114,101,32,116,119,111,32,37,115,32,118,97,108,117,101,115,0] /* attempt to compare t */, "i8", ALLOC_NONE, 5247184);
allocate([114,119,97,0] /* rwa\00 */, "i8", ALLOC_NONE, 5247220);
allocate([101,120,116,101,114,110,97,108,32,104,111,111,107,0] /* external hook\00 */, "i8", ALLOC_NONE, 5247224);
allocate([115,101,116,112,97,117,115,101,0] /* setpause\00 */, "i8", ALLOC_NONE, 5247240);
allocate([100,101,98,117,103,0] /* debug\00 */, "i8", ALLOC_NONE, 5247252);
allocate([102,0] /* f\00 */, "i8", ALLOC_NONE, 5247260);
allocate([105,110,118,97,108,105,100,32,108,111,110,103,32,115,116,114,105,110,103,32,100,101,108,105,109,105,116,101,114,0] /* invalid long string  */, "i8", ALLOC_NONE, 5247264);
allocate([126,61,0] /* ~=\00 */, "i8", ALLOC_NONE, 5247296);
allocate([99,97,110,110,111,116,32,111,112,101,110,32,102,105,108,101,32,39,37,115,39,32,40,37,115,41,0] /* cannot open file '%s */, "i8", ALLOC_NONE, 5247300);
allocate([102,117,110,99,0] /* func\00 */, "i8", ALLOC_NONE, 5247328);
allocate([116,97,98,108,101,0] /* table\00 */, "i8", ALLOC_NONE, 5247336);
allocate([115,116,101,112,0] /* step\00 */, "i8", ALLOC_NONE, 5247344);
allocate([37,115,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,37,115,0] /* %s expected, got %s\ */, "i8", ALLOC_NONE, 5247352);
allocate([76,85,65,95,80,65,84,72,95,53,95,50,0] /* LUA_PATH_5_2\00 */, "i8", ALLOC_NONE, 5247372);
allocate([99,114,101,97,116,101,0] /* create\00 */, "i8", ALLOC_NONE, 5247388);
allocate([60,61,0] /* _=\00 */, "i8", ALLOC_NONE, 5247396);
allocate([114,101,109,111,118,101,0] /* remove\00 */, "i8", ALLOC_NONE, 5247400);
allocate([119,0] /* w\00 */, "i8", ALLOC_NONE, 5247408);
allocate([100,117,109,112,0] /* dump\00 */, "i8", ALLOC_NONE, 5247412);
allocate([97,99,116,105,118,101,108,105,110,101,115,0] /* activelines\00 */, "i8", ALLOC_NONE, 5247420);
allocate([99,111,117,110,116,0] /* count\00 */, "i8", ALLOC_NONE, 5247432);
allocate([99,97,110,110,111,116,32,37,115,32,37,115,58,32,37,115,0] /* cannot %s %s: %s\00 */, "i8", ALLOC_NONE, 5247440);
allocate([101,120,105,116,0] /* exit\00 */, "i8", ALLOC_NONE, 5247460);
allocate([62,61,0] /* _=\00 */, "i8", ALLOC_NONE, 5247468);
allocate([97,115,105,110,0] /* asin\00 */, "i8", ALLOC_NONE, 5247472);
allocate([39,112,111,112,101,110,39,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0] /* 'popen' not supporte */, "i8", ALLOC_NONE, 5247480);
allocate([105,115,116,97,105,108,99,97,108,108,0] /* istailcall\00 */, "i8", ALLOC_NONE, 5247504);
allocate([97,114,115,104,105,102,116,0] /* arshift\00 */, "i8", ALLOC_NONE, 5247516);
allocate([99,111,108,108,101,99,116,0] /* collect\00 */, "i8", ALLOC_NONE, 5247524);
allocate([115,116,100,101,114,114,0] /* stderr\00 */, "i8", ALLOC_NONE, 5247532);
allocate([239,187,191,0] /* \EF\BB\BF\00 */, "i8", ALLOC_NONE, 5247540);
allocate([61,61,0] /* ==\00 */, "i8", ALLOC_NONE, 5247544);
allocate([103,101,116,108,111,99,97,108,0] /* getlocal\00 */, "i8", ALLOC_NONE, 5247548);
allocate([119,114,97,112,0] /* wrap\00 */, "i8", ALLOC_NONE, 5247560);
allocate([98,120,111,114,0] /* bxor\00 */, "i8", ALLOC_NONE, 5247568);
allocate([114,0] /* r\00 */, "i8", ALLOC_NONE, 5247576);
allocate([110,97,109,101,119,104,97,116,0] /* namewhat\00 */, "i8", ALLOC_NONE, 5247580);
allocate([114,101,115,116,97,114,116,0] /* restart\00 */, "i8", ALLOC_NONE, 5247592);
allocate([80,65,78,73,67,58,32,117,110,112,114,111,116,101,99,116,101,100,32,101,114,114,111,114,32,105,110,32,99,97,108,108,32,116,111,32,76,117,97,32,65,80,73,32,40,37,115,41,10,0] /* PANIC: unprotected e */, "i8", ALLOC_NONE, 5247600);
allocate([99,111,108,108,101,99,116,103,97,114,98,97,103,101,0] /* collectgarbage\00 */, "i8", ALLOC_NONE, 5247652);
allocate([46,46,46,0] /* ...\00 */, "i8", ALLOC_NONE, 5247668);
allocate([102,105,108,101,0] /* file\00 */, "i8", ALLOC_NONE, 5247672);
allocate([110,97,109,101,0] /* name\00 */, "i8", ALLOC_NONE, 5247680);
allocate([10,9,37,115,58,0] /* \0A\09%s:\00 */, "i8", ALLOC_NONE, 5247688);
allocate([115,116,111,112,0] /* stop\00 */, "i8", ALLOC_NONE, 5247696);
allocate([98,97,100,32,99,111,110,118,101,114,115,105,111,110,32,110,117,109,98,101,114,45,62,105,110,116,59,32,109,117,115,116,32,114,101,99,111,109,112,105,108,101,32,76,117,97,32,119,105,116,104,32,112,114,111,112,101,114,32,115,101,116,116,105,110,103,115,0] /* bad conversion numbe */, "i8", ALLOC_NONE, 5247704);
allocate([115,116,114,105,110,103,32,108,101,110,103,116,104,32,111,118,101,114,102,108,111,119,0] /* string length overfl */, "i8", ALLOC_NONE, 5247772);
allocate([46,46,0] /* ..\00 */, "i8", ALLOC_NONE, 5247796);
allocate([25,147,13,10,26,10,0] /* \19\93\0D\0A\1A\0A\0 */, "i8", ALLOC_NONE, 5247800);
allocate([27,76,117,97,0] /* \1BLua\00 */, "i8", ALLOC_NONE, 5247808);
allocate([115,116,114,105,110,103,32,115,108,105,99,101,32,116,111,111,32,108,111,110,103,0] /* string slice too lon */, "i8", ALLOC_NONE, 5247816);
allocate([115,116,114,105,110,103,0] /* string\00 */, "i8", ALLOC_NONE, 5247840);
allocate([99,108,111,115,101,100,32,102,105,108,101,0] /* closed file\00 */, "i8", ALLOC_NONE, 5247848);
allocate([105,115,118,97,114,97,114,103,0] /* isvararg\00 */, "i8", ALLOC_NONE, 5247860);
allocate([95,95,105,112,97,105,114,115,0] /* __ipairs\00 */, "i8", ALLOC_NONE, 5247872);
allocate([118,101,114,115,105,111,110,32,109,105,115,109,97,116,99,104,58,32,97,112,112,46,32,110,101,101,100,115,32,37,102,44,32,76,117,97,32,99,111,114,101,32,112,114,111,118,105,100,101,115,32,37,102,0] /* version mismatch: ap */, "i8", ALLOC_NONE, 5247884);
allocate([119,104,105,108,101,0] /* while\00 */, "i8", ALLOC_NONE, 5247940);
allocate([108,97,98,101,108,115,47,103,111,116,111,115,0] /* labels/gotos\00 */, "i8", ALLOC_NONE, 5247948);
allocate([105,110,105,116,0] /* init\00 */, "i8", ALLOC_NONE, 5247964);
allocate([118,97,108,117,101,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* value out of range\0 */, "i8", ALLOC_NONE, 5247972);
allocate([115,116,97,110,100,97,114,100,32,37,115,32,102,105,108,101,32,105,115,32,99,108,111,115,101,100,0] /* standard %s file is  */, "i8", ALLOC_NONE, 5247992);
allocate([110,112,97,114,97,109,115,0] /* nparams\00 */, "i8", ALLOC_NONE, 5248020);
allocate([114,101,97,100,101,114,32,102,117,110,99,116,105,111,110,32,109,117,115,116,32,114,101,116,117,114,110,32,97,32,115,116,114,105,110,103,0] /* reader function must */, "i8", ALLOC_NONE, 5248028);
allocate([109,117,108,116,105,112,108,101,32,76,117,97,32,86,77,115,32,100,101,116,101,99,116,101,100,0] /* multiple Lua VMs det */, "i8", ALLOC_NONE, 5248068);
allocate([37,0] /* %\00 */, "i8", ALLOC_NONE, 5248096);
allocate([117,110,116,105,108,0] /* until\00 */, "i8", ALLOC_NONE, 5248100);
allocate([97,98,115,101,110,116,0] /* absent\00 */, "i8", ALLOC_NONE, 5248108);
allocate([117,110,97,98,108,101,32,116,111,32,100,117,109,112,32,103,105,118,101,110,32,102,117,110,99,116,105,111,110,0] /* unable to dump given */, "i8", ALLOC_NONE, 5248116);
allocate([116,121,112,101,0] /* type\00 */, "i8", ALLOC_NONE, 5248148);
allocate([110,117,112,115,0] /* nups\00 */, "i8", ALLOC_NONE, 5248156);
allocate([116,111,111,32,109,97,110,121,32,110,101,115,116,101,100,32,102,117,110,99,116,105,111,110,115,0] /* too many nested func */, "i8", ALLOC_NONE, 5248164);
allocate([95,76,79,65,68,69,68,0] /* _LOADED\00 */, "i8", ALLOC_NONE, 5248192);
allocate([95,71,0] /* _G\00 */, "i8", ALLOC_NONE, 5248200);
allocate([116,114,117,101,0] /* true\00 */, "i8", ALLOC_NONE, 5248204);
allocate([99,111,110,116,114,111,108,32,115,116,114,117,99,116,117,114,101,32,116,111,111,32,108,111,110,103,0] /* control structure to */, "i8", ALLOC_NONE, 5248212);
allocate([115,101,97,114,99,104,112,97,116,104,0] /* searchpath\00 */, "i8", ALLOC_NONE, 5248240);
allocate([105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,40,119,105,100,116,104,32,111,114,32,112,114,101,99,105,115,105,111,110,32,116,111,111,32,108,111,110,103,41,0] /* invalid format (widt */, "i8", ALLOC_NONE, 5248252);
allocate([116,109,112,102,105,108,101,0] /* tmpfile\00 */, "i8", ALLOC_NONE, 5248300);
allocate([99,117,114,114,101,110,116,108,105,110,101,0] /* currentline\00 */, "i8", ALLOC_NONE, 5248308);
allocate([61,40,108,111,97,100,41,0] /* =(load)\00 */, "i8", ALLOC_NONE, 5248320);
allocate([116,111,111,32,109,97,110,121,32,117,112,118,97,108,117,101,115,0] /* too many upvalues\00 */, "i8", ALLOC_NONE, 5248328);
allocate([116,104,101,110,0] /* then\00 */, "i8", ALLOC_NONE, 5248348);
allocate([108,111,97,100,108,105,98,0] /* loadlib\00 */, "i8", ALLOC_NONE, 5248356);
allocate([105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,40,114,101,112,101,97,116,101,100,32,102,108,97,103,115,41,0] /* invalid format (repe */, "i8", ALLOC_NONE, 5248364);
allocate([112,111,112,101,110,0] /* popen\00 */, "i8", ALLOC_NONE, 5248396);
allocate([119,104,97,116,0] /* what\00 */, "i8", ALLOC_NONE, 5248404);
allocate([98,116,0] /* bt\00 */, "i8", ALLOC_NONE, 5248412);
allocate([37,115,58,32,37,112,0] /* %s: %p\00 */, "i8", ALLOC_NONE, 5248416);
allocate([95,69,78,86,0] /* _ENV\00 */, "i8", ALLOC_NONE, 5248424);
allocate([114,101,116,117,114,110,0] /* return\00 */, "i8", ALLOC_NONE, 5248432);
allocate([112,101,114,102,111,114,109,32,97,114,105,116,104,109,101,116,105,99,32,111,110,0] /* perform arithmetic o */, "i8", ALLOC_NONE, 5248440);
allocate([10,9,110,111,32,102,105,101,108,100,32,112,97,99,107,97,103,101,46,112,114,101,108,111,97,100,91,39,37,115,39,93,0] /* \0A\09no field packa */, "i8", ALLOC_NONE, 5248464);
allocate([45,43,32,35,48,0] /* -+ #0\00 */, "i8", ALLOC_NONE, 5248500);
allocate([111,117,116,112,117,116,0] /* output\00 */, "i8", ALLOC_NONE, 5248508);
allocate([108,97,115,116,108,105,110,101,100,101,102,105,110,101,100,0] /* lastlinedefined\00 */, "i8", ALLOC_NONE, 5248516);
allocate([99,111,114,111,117,116,105,110,101,0] /* coroutine\00 */, "i8", ALLOC_NONE, 5248532);
allocate([95,95,112,97,105,114,115,0] /* __pairs\00 */, "i8", ALLOC_NONE, 5248544);
allocate([110,105,108,0] /* nil\00 */, "i8", ALLOC_NONE, 5248552);
allocate([112,97,116,104,0] /* path\00 */, "i8", ALLOC_NONE, 5248556);
allocate([114,101,112,101,97,116,0] /* repeat\00 */, "i8", ALLOC_NONE, 5248564);
allocate([117,110,112,97,99,107,0] /* unpack\00 */, "i8", ALLOC_NONE, 5248572);
allocate([59,0] /* ;\00 */, "i8", ALLOC_NONE, 5248580);
allocate([92,37,48,51,100,0] /* \5C%03d\00 */, "i8", ALLOC_NONE, 5248584);
allocate([111,112,101,110,0] /* open\00 */, "i8", ALLOC_NONE, 5248592);
allocate([99,104,97,114,0] /* char\00 */, "i8", ALLOC_NONE, 5248600);
allocate([108,105,110,101,100,101,102,105,110,101,100,0] /* linedefined\00 */, "i8", ALLOC_NONE, 5248608);
allocate([10,0] /* \0A\00 */, "i8", ALLOC_NONE, 5248620);
allocate([102,97,108,115,101,0] /* false\00 */, "i8", ALLOC_NONE, 5248624);
allocate([101,120,101,99,117,116,101,0] /* execute\00 */, "i8", ALLOC_NONE, 5248632);
allocate([111,114,0] /* or\00 */, "i8", ALLOC_NONE, 5248640);
allocate([97,99,111,115,0] /* acos\00 */, "i8", ALLOC_NONE, 5248644);
allocate([114,0] /* r\00 */, "i8", ALLOC_NONE, 5248652);
allocate([92,37,100,0] /* \5C%d\00 */, "i8", ALLOC_NONE, 5248656);
allocate([105,110,112,117,116,0] /* input\00 */, "i8", ALLOC_NONE, 5248660);
allocate([115,104,111,114,116,95,115,114,99,0] /* short_src\00 */, "i8", ALLOC_NONE, 5248668);
allocate([9,0] /* \09\00 */, "i8", ALLOC_NONE, 5248680);
allocate([115,116,100,111,117,116,0] /* stdout\00 */, "i8", ALLOC_NONE, 5248684);
allocate([116,114,117,101,0] /* true\00 */, "i8", ALLOC_NONE, 5248692);
allocate([110,111,116,0] /* not\00 */, "i8", ALLOC_NONE, 5248700);
allocate([103,101,116,105,110,102,111,0] /* getinfo\00 */, "i8", ALLOC_NONE, 5248704);
allocate([37,115,10,0] /* %s\0A\00 */, "i8", ALLOC_NONE, 5248712);
allocate([10,9,110,111,32,102,105,108,101,32,39,37,115,39,0] /* \0A\09no file '%s'\0 */, "i8", ALLOC_NONE, 5248716);
allocate([115,116,97,116,117,115,0] /* status\00 */, "i8", ALLOC_NONE, 5248732);
allocate([105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,39,37,37,37,99,39,32,116,111,32,39,102,111,114,109,97,116,39,0] /* invalid option '%%%c */, "i8", ALLOC_NONE, 5248740);
allocate([98,111,114,0] /* bor\00 */, "i8", ALLOC_NONE, 5248776);
allocate([37,115,0] /* %s\00 */, "i8", ALLOC_NONE, 5248780);
allocate([115,111,117,114,99,101,0] /* source\00 */, "i8", ALLOC_NONE, 5248784);
allocate([39,116,111,115,116,114,105,110,103,39,32,109,117,115,116,32,114,101,116,117,114,110,32,97,32,115,116,114,105,110,103,32,116,111,32,39,112,114,105,110,116,39,0] /* 'tostring' must retu */, "i8", ALLOC_NONE, 5248792);
allocate([95,95,116,111,115,116,114,105,110,103,0] /* __tostring\00 */, "i8", ALLOC_NONE, 5248836);
allocate([97,115,115,101,114,116,0] /* assert\00 */, "i8", ALLOC_NONE, 5248848);
allocate([110,105,108,0] /* nil\00 */, "i8", ALLOC_NONE, 5248856);
allocate([63,0] /* ?\00 */, "i8", ALLOC_NONE, 5248860);
allocate([110,111,116,32,97,32,110,111,110,45,110,101,103,97,116,105,118,101,32,110,117,109,98,101,114,32,105,110,32,112,114,111,112,101,114,32,114,97,110,103,101,0] /* not a non-negative n */, "i8", ALLOC_NONE, 5248864);
allocate([102,105,108,101,32,105,115,32,97,108,114,101,97,100,121,32,99,108,111,115,101,100,0] /* file is already clos */, "i8", ALLOC_NONE, 5248908);
allocate([105,110,118,97,108,105,100,32,111,112,116,105,111,110,0] /* invalid option\00 */, "i8", ALLOC_NONE, 5248932);
allocate([83,108,110,116,0] /* Slnt\00 */, "i8", ALLOC_NONE, 5248948);
allocate([116,97,98,108,101,32,111,114,32,115,116,114,105,110,103,32,101,120,112,101,99,116,101,100,0] /* table or string expe */, "i8", ALLOC_NONE, 5248956);
allocate([111,98,106,101,99,116,32,108,101,110,103,116,104,32,105,115,32,110,111,116,32,97,32,110,117,109,98,101,114,0] /* object length is not */, "i8", ALLOC_NONE, 5248984);
allocate([108,111,111,112,32,105,110,32,115,101,116,116,97,98,108,101,0] /* loop in settable\00 */, "i8", ALLOC_NONE, 5249016);
allocate([108,111,99,97,108,0] /* local\00 */, "i8", ALLOC_NONE, 5249036);
allocate([50,0] /* 2\00 */, "i8", ALLOC_NONE, 5249044);
allocate([97,116,116,101,109,112,116,32,116,111,32,121,105,101,108,100,32,102,114,111,109,32,111,117,116,115,105,100,101,32,97,32,99,111,114,111,117,116,105,110,101,0] /* attempt to yield fro */, "i8", ALLOC_NONE, 5249048);
allocate([39,112,97,99,107,97,103,101,46,37,115,39,32,109,117,115,116,32,98,101,32,97,32,115,116,114,105,110,103,0] /* 'package.%s' must be */, "i8", ALLOC_NONE, 5249092);
allocate([108,0] /* l\00 */, "i8", ALLOC_NONE, 5249124);
allocate([110,117,109,98,101,114,0] /* number\00 */, "i8", ALLOC_NONE, 5249128);
allocate([116,111,111,32,109,97,110,121,32,111,112,116,105,111,110,115,0] /* too many options\00 */, "i8", ALLOC_NONE, 5249136);
allocate([102,117,110,99,116,105,111,110,32,111,114,32,108,101,118,101,108,32,101,120,112,101,99,116,101,100,0] /* function or level ex */, "i8", ALLOC_NONE, 5249156);
allocate([105,110,100,101,120,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* index out of range\0 */, "i8", ALLOC_NONE, 5249184);
allocate([114,101,97,100,0] /* read\00 */, "i8", ALLOC_NONE, 5249204);
allocate([105,110,118,97,108,105,100,32,107,101,121,32,116,111,32,39,110,101,120,116,39,0] /* invalid key to 'next */, "i8", ALLOC_NONE, 5249212);
allocate([105,110,0] /* in\00 */, "i8", ALLOC_NONE, 5249236);
allocate([98,114,101,97,107,0] /* break\00 */, "i8", ALLOC_NONE, 5249240);
allocate([100,121,110,97,109,105,99,32,108,105,98,114,97,114,105,101,115,32,110,111,116,32,101,110,97,98,108,101,100,59,32,99,104,101,99,107,32,121,111,117,114,32,76,117,97,32,105,110,115,116,97,108,108,97,116,105,111,110,0] /* dynamic libraries no */, "i8", ALLOC_NONE, 5249248);
allocate([110,111,116,32,97,32,110,117,109,98,101,114,32,105,110,32,112,114,111,112,101,114,32,114,97,110,103,101,0] /* not a number in prop */, "i8", ALLOC_NONE, 5249308);
allocate([105,110,118,97,108,105,100,32,99,111,110,118,101,114,115,105,111,110,32,115,112,101,99,105,102,105,101,114,32,39,37,37,37,115,39,0] /* invalid conversion s */, "i8", ALLOC_NONE, 5249340);
allocate([37,108,102,0] /* %lf\00 */, "i8", ALLOC_NONE, 5249376);
allocate([62,37,115,0] /* _%s\00 */, "i8", ALLOC_NONE, 5249380);
allocate([99,97,110,110,111,116,32,99,104,97,110,103,101,32,97,32,112,114,111,116,101,99,116,101,100,32,109,101,116,97,116,97,98,108,101,0] /* cannot change a prot */, "i8", ALLOC_NONE, 5249384);
allocate([114,101,111,112,101,110,0] /* reopen\00 */, "i8", ALLOC_NONE, 5249420);
allocate([37,112,0] /* %p\00 */, "i8", ALLOC_NONE, 5249428);
allocate([105,102,0] /* if\00 */, "i8", ALLOC_NONE, 5249432);
allocate([108,117,97,111,112,101,110,95,37,115,0] /* luaopen_%s\00 */, "i8", ALLOC_NONE, 5249436);
allocate([37,46,49,52,103,0] /* %.14g\00 */, "i8", ALLOC_NONE, 5249448);
allocate([110,111,32,118,97,108,117,101,0] /* no value\00 */, "i8", ALLOC_NONE, 5249456);
allocate(1, "i8", ALLOC_NONE, 5249468);
allocate([119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0] /* wrong number of argu */, "i8", ALLOC_NONE, 5249472);
allocate([105,110,118,97,108,105,100,32,102,111,114,109,97,116,0] /* invalid format\00 */, "i8", ALLOC_NONE, 5249500);
allocate([102,108,110,83,116,117,0] /* flnStu\00 */, "i8", ALLOC_NONE, 5249516);
allocate([95,95,109,101,116,97,116,97,98,108,101,0] /* __metatable\00 */, "i8", ALLOC_NONE, 5249524);
allocate([114,98,0] /* rb\00 */, "i8", ALLOC_NONE, 5249536);
allocate([103,111,116,111,0] /* goto\00 */, "i8", ALLOC_NONE, 5249540);
allocate([111,112,99,111,100,101,115,0] /* opcodes\00 */, "i8", ALLOC_NONE, 5249548);
allocate([45,0] /* -\00 */, "i8", ALLOC_NONE, 5249556);
allocate([105,110,118,97,108,105,100,32,117,115,101,32,111,102,32,39,37,99,39,32,105,110,32,114,101,112,108,97,99,101,109,101,110,116,32,115,116,114,105,110,103,0] /* invalid use of '%c'  */, "i8", ALLOC_NONE, 5249560);
allocate([97,65,98,66,99,100,72,73,106,109,77,112,83,85,119,87,120,88,121,89,122,37,0] /* aAbBcdHIjmMpSUwWxXyY */, "i8", ALLOC_NONE, 5249604);
allocate([105,110,116,101,114,118,97,108,32,105,115,32,101,109,112,116,121,0] /* interval is empty\00 */, "i8", ALLOC_NONE, 5249628);
allocate([105,110,118,97,108,105,100,32,111,112,116,105,111,110,0] /* invalid option\00 */, "i8", ALLOC_NONE, 5249648);
allocate([76,117,97,32,102,117,110,99,116,105,111,110,32,101,120,112,101,99,116,101,100,0] /* Lua function expecte */, "i8", ALLOC_NONE, 5249664);
allocate([110,105,108,32,111,114,32,116,97,98,108,101,32,101,120,112,101,99,116,101,100,0] /* nil or table expecte */, "i8", ALLOC_NONE, 5249688);
allocate([27,76,117,97,0] /* \1BLua\00 */, "i8", ALLOC_NONE, 5249712);
allocate([27,76,117,97,0] /* \1BLua\00 */, "i8", ALLOC_NONE, 5249720);
allocate([102,117,110,99,116,105,111,110,0] /* function\00 */, "i8", ALLOC_NONE, 5249728);
allocate([95,0] /* _\00 */, "i8", ALLOC_NONE, 5249740);
allocate([105,110,118,97,108,105,100,32,114,101,112,108,97,99,101,109,101,110,116,32,118,97,108,117,101,32,40,97,32,37,115,41,0] /* invalid replacement  */, "i8", ALLOC_NONE, 5249744);
allocate([121,100,97,121,0] /* yday\00 */, "i8", ALLOC_NONE, 5249780);
allocate([116,97,110,0] /* tan\00 */, "i8", ALLOC_NONE, 5249788);
allocate([116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,0] /* too many arguments\0 */, "i8", ALLOC_NONE, 5249792);
allocate([105,110,118,97,108,105,100,32,117,112,118,97,108,117,101,32,105,110,100,101,120,0] /* invalid upvalue inde */, "i8", ALLOC_NONE, 5249812);
allocate([32,12,10,13,9,11,0] /*  \0C\0A\0D\09\0B\00 */, "i8", ALLOC_NONE, 5249836);
allocate([111,112,101,110,0] /* open\00 */, "i8", ALLOC_NONE, 5249844);
allocate([117,112,118,97,108,117,101,115,0] /* upvalues\00 */, "i8", ALLOC_NONE, 5249852);
allocate([39,37,115,39,0] /* '%s'\00 */, "i8", ALLOC_NONE, 5249864);
allocate([102,111,114,0] /* for\00 */, "i8", ALLOC_NONE, 5249872);
allocate([46,0] /* .\00 */, "i8", ALLOC_NONE, 5249876);
allocate([115,116,114,105,110,103,47,102,117,110,99,116,105,111,110,47,116,97,98,108,101,32,101,120,112,101,99,116,101,100,0] /* string/function/tabl */, "i8", ALLOC_NONE, 5249880);
allocate([119,100,97,121,0] /* wday\00 */, "i8", ALLOC_NONE, 5249912);
allocate([116,97,110,104,0] /* tanh\00 */, "i8", ALLOC_NONE, 5249920);
allocate([110,111,116,32,97,110,32,105,110,116,101,103,101,114,32,105,110,32,112,114,111,112,101,114,32,114,97,110,103,101,0] /* not an integer in pr */, "i8", ALLOC_NONE, 5249928);
allocate([62,117,0] /* _u\00 */, "i8", ALLOC_NONE, 5249960);
allocate([112,97,99,107,97,103,101,0] /* package\00 */, "i8", ALLOC_NONE, 5249964);
allocate([98,97,115,101,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* base out of range\00 */, "i8", ALLOC_NONE, 5249972);
allocate([114,0] /* r\00 */, "i8", ALLOC_NONE, 5249992);
allocate([37,115,32,101,120,112,101,99,116,101,100,32,40,116,111,32,99,108,111,115,101,32,37,115,32,97,116,32,108,105,110,101,32,37,100,41,0] /* %s expected (to clos */, "i8", ALLOC_NONE, 5249996);
allocate([102,97,108,115,101,0] /* false\00 */, "i8", ALLOC_NONE, 5250036);
allocate([115,101,97,114,99,104,101,114,115,0] /* searchers\00 */, "i8", ALLOC_NONE, 5250044);
allocate([99,111,110,99,97,116,101,110,97,116,101,0] /* concatenate\00 */, "i8", ALLOC_NONE, 5250056);
allocate([112,97,99,107,0] /* pack\00 */, "i8", ALLOC_NONE, 5250068);
allocate([101,114,114,111,114,32,108,111,97,100,105,110,103,32,109,111,100,117,108,101,32,39,37,115,39,32,102,114,111,109,32,102,105,108,101,32,39,37,115,39,58,10,9,37,115,0] /* error loading module */, "i8", ALLOC_NONE, 5250076);
allocate([94,36,42,43,63,46,40,91,37,45,0] /* ^$_+?.([%-\00 */, "i8", ALLOC_NONE, 5250124);
allocate([42,116,0] /* _t\00 */, "i8", ALLOC_NONE, 5250136);
allocate([115,113,114,116,0] /* sqrt\00 */, "i8", ALLOC_NONE, 5250140);
allocate([101,110,100,0] /* end\00 */, "i8", ALLOC_NONE, 5250148);
allocate([98,121,116,101,0] /* byte\00 */, "i8", ALLOC_NONE, 5250152);
allocate([102,117,108,108,32,117,115,101,114,100,97,116,97,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,108,105,103,104,116,32,117,115,101,114,100,97,116,97,0] /* full userdata expect */, "i8", ALLOC_NONE, 5250160);
allocate([115,116,97,99,107,32,111,118,101,114,102,108,111,119,0] /* stack overflow\00 */, "i8", ALLOC_NONE, 5250204);
allocate([64,37,115,0] /* @%s\00 */, "i8", ALLOC_NONE, 5250220);
allocate([95,95,99,97,108,108,0] /* __call\00 */, "i8", ALLOC_NONE, 5250224);
allocate([100,105,102,102,116,105,109,101,0] /* difftime\00 */, "i8", ALLOC_NONE, 5250232);
allocate([40,102,111,114,32,115,116,101,112,41,0] /* (for step)\00 */, "i8", ALLOC_NONE, 5250244);
allocate([101,110,100,0] /* end\00 */, "i8", ALLOC_NONE, 5250256);
allocate([97,98,115,0] /* abs\00 */, "i8", ALLOC_NONE, 5250260);
allocate([10,9,110,111,32,109,111,100,117,108,101,32,39,37,115,39,32,105,110,32,102,105,108,101,32,39,37,115,39,0] /* \0A\09no module '%s' */, "i8", ALLOC_NONE, 5250264);
allocate([110,111,32,118,97,108,117,101,0] /* no value\00 */, "i8", ALLOC_NONE, 5250296);
allocate([105,110,118,97,108,105,100,32,112,97,116,116,101,114,110,32,99,97,112,116,117,114,101,0] /* invalid pattern capt */, "i8", ALLOC_NONE, 5250308);
allocate([37,99,0] /* %c\00 */, "i8", ALLOC_NONE, 5250332);
allocate([115,105,110,0] /* sin\00 */, "i8", ALLOC_NONE, 5250336);
allocate([99,117,114,0] /* cur\00 */, "i8", ALLOC_NONE, 5250340);
allocate([116,97,105,108,32,99,97,108,108,0] /* tail call\00 */, "i8", ALLOC_NONE, 5250344);
allocate([118,97,108,117,101,32,101,120,112,101,99,116,101,100,0] /* value expected\00 */, "i8", ALLOC_NONE, 5250356);
allocate([95,73,79,95,111,117,116,112,117,116,0] /* _IO_output\00 */, "i8", ALLOC_NONE, 5250372);
allocate([61,115,116,100,105,110,0] /* =stdin\00 */, "i8", ALLOC_NONE, 5250384);
allocate([95,95,99,111,110,99,97,116,0] /* __concat\00 */, "i8", ALLOC_NONE, 5250392);
allocate([40,102,111,114,32,108,105,109,105,116,41,0] /* (for limit)\00 */, "i8", ALLOC_NONE, 5250404);
allocate([101,108,115,101,105,102,0] /* elseif\00 */, "i8", ALLOC_NONE, 5250416);
allocate([115,116,97,99,107,32,111,118,101,114,102,108,111,119,0] /* stack overflow\00 */, "i8", ALLOC_NONE, 5250424);
allocate([103,101,116,104,111,111,107,0] /* gethook\00 */, "i8", ALLOC_NONE, 5250440);
allocate([47,0] /* /\00 */, "i8", ALLOC_NONE, 5250448);
allocate([114,117,110,110,105,110,103,0] /* running\00 */, "i8", ALLOC_NONE, 5250452);
allocate([109,97,108,102,111,114,109,101,100,32,112,97,116,116,101,114,110,32,40,109,105,115,115,105,110,103,32,97,114,103,117,109,101,110,116,115,32,116,111,32,39,37,37,98,39,41,0] /* malformed pattern (m */, "i8", ALLOC_NONE, 5250460);
allocate([110,117,109,101,114,105,99,0] /* numeric\00 */, "i8", ALLOC_NONE, 5250508);
allocate([115,105,110,104,0] /* sinh\00 */, "i8", ALLOC_NONE, 5250516);
allocate([98,110,111,116,0] /* bnot\00 */, "i8", ALLOC_NONE, 5250524);
allocate([115,101,116,0] /* set\00 */, "i8", ALLOC_NONE, 5250532);
allocate([99,111,117,110,116,0] /* count\00 */, "i8", ALLOC_NONE, 5250536);
allocate([120,112,99,97,108,108,0] /* xpcall\00 */, "i8", ALLOC_NONE, 5250544);
allocate([98,117,102,102,101,114,32,116,111,111,32,108,97,114,103,101,0] /* buffer too large\00 */, "i8", ALLOC_NONE, 5250552);
allocate([95,95,108,101,0] /* __le\00 */, "i8", ALLOC_NONE, 5250572);
allocate([40,102,111,114,32,105,110,100,101,120,41,0] /* (for index)\00 */, "i8", ALLOC_NONE, 5250580);
allocate([40,42,118,97,114,97,114,103,41,0] /* (_vararg)\00 */, "i8", ALLOC_NONE, 5250592);
allocate([101,108,115,101,0] /* else\00 */, "i8", ALLOC_NONE, 5250604);
allocate([95,86,69,82,83,73,79,78,0] /* _VERSION\00 */, "i8", ALLOC_NONE, 5250612);
allocate([99,111,110,115,116,97,110,116,115,0] /* constants\00 */, "i8", ALLOC_NONE, 5250624);
allocate([76,85,65,95,78,79,69,78,86,0] /* LUA_NOENV\00 */, "i8", ALLOC_NONE, 5250636);
allocate([109,97,108,102,111,114,109,101,100,32,112,97,116,116,101,114,110,32,40,109,105,115,115,105,110,103,32,39,93,39,41,0] /* malformed pattern (m */, "i8", ALLOC_NONE, 5250648);
allocate([109,111,110,101,116,97,114,121,0] /* monetary\00 */, "i8", ALLOC_NONE, 5250680);
allocate([114,97,110,100,111,109,115,101,101,100,0] /* randomseed\00 */, "i8", ALLOC_NONE, 5250692);
allocate([108,105,110,101,0] /* line\00 */, "i8", ALLOC_NONE, 5250704);
allocate([108,105,110,101,0] /* line\00 */, "i8", ALLOC_NONE, 5250712);
allocate([10,9,46,46,46,0] /* \0A\09...\00 */, "i8", ALLOC_NONE, 5250720);
allocate([116,97,98,108,101,32,105,110,100,101,120,32,105,115,32,110,105,108,0] /* table index is nil\0 */, "i8", ALLOC_NONE, 5250728);
allocate([116,121,112,101,0] /* type\00 */, "i8", ALLOC_NONE, 5250748);
allocate([118,97,108,117,101,32,101,120,112,101,99,116,101,100,0] /* value expected\00 */, "i8", ALLOC_NONE, 5250756);
allocate([95,95,108,116,0] /* __lt\00 */, "i8", ALLOC_NONE, 5250772);
allocate([40,102,111,114,32,99,111,110,116,114,111,108,41,0] /* (for control)\00 */, "i8", ALLOC_NONE, 5250780);
allocate([100,111,0] /* do\00 */, "i8", ALLOC_NONE, 5250796);
allocate([108,111,111,112,32,105,110,32,103,101,116,116,97,98,108,101,0] /* loop in gettable\00 */, "i8", ALLOC_NONE, 5250800);
allocate([40,42,116,101,109,112,111,114,97,114,121,41,0] /* (_temporary)\00 */, "i8", ALLOC_NONE, 5250820);
allocate([53,0] /* 5\00 */, "i8", ALLOC_NONE, 5250836);
allocate([1,0] /* \01\00 */, "i8", ALLOC_NONE, 5250840);
allocate([97,116,116,101,109,112,116,32,116,111,32,121,105,101,108,100,32,97,99,114,111,115,115,32,109,101,116,97,109,101,116,104,111,100,47,67,45,99,97,108,108,32,98,111,117,110,100,97,114,121,0] /* attempt to yield acr */, "i8", ALLOC_NONE, 5250844);
allocate([109,97,108,102,111,114,109,101,100,32,112,97,116,116,101,114,110,32,40,101,110,100,115,32,119,105,116,104,32,39,37,37,39,41,0] /* malformed pattern (e */, "i8", ALLOC_NONE, 5250896);
allocate([99,116,121,112,101,0] /* ctype\00 */, "i8", ALLOC_NONE, 5250932);
allocate([114,97,110,100,111,109,0] /* random\00 */, "i8", ALLOC_NONE, 5250940);
allocate([98,111,111,108,101,97,110,0] /* boolean\00 */, "i8", ALLOC_NONE, 5250948);
allocate([102,117,108,108,0] /* full\00 */, "i8", ALLOC_NONE, 5250956);
allocate([114,101,116,117,114,110,0] /* return\00 */, "i8", ALLOC_NONE, 5250964);
allocate([116,111,115,116,114,105,110,103,0] /* tostring\00 */, "i8", ALLOC_NONE, 5250972);
allocate([115,116,97,99,107,32,111,118,101,114,102,108,111,119,0] /* stack overflow\00 */, "i8", ALLOC_NONE, 5250984);
allocate([116,97,98,108,101,32,111,118,101,114,102,108,111,119,0] /* table overflow\00 */, "i8", ALLOC_NONE, 5251000);
allocate([95,95,117,110,109,0] /* __unm\00 */, "i8", ALLOC_NONE, 5251016);
allocate([40,102,111,114,32,115,116,97,116,101,41,0] /* (for state)\00 */, "i8", ALLOC_NONE, 5251024);
allocate([98,114,101,97,107,0] /* break\00 */, "i8", ALLOC_NONE, 5251036);
allocate([76,117,97,0] /* Lua\00 */, "i8", ALLOC_NONE, 5251044);
allocate([60,103,111,116,111,32,37,115,62,32,97,116,32,108,105,110,101,32,37,100,32,106,117,109,112,115,32,105,110,116,111,32,116,104,101,32,115,99,111,112,101,32,111,102,32,108,111,99,97,108,32,39,37,115,39,0] /* _goto %s_ at line %d */, "i8", ALLOC_NONE, 5251048);
allocate([59,1,59,0] /* ;\01;\00 */, "i8", ALLOC_NONE, 5251104);
allocate([105,110,118,97,108,105,100,32,99,97,112,116,117,114,101,32,105,110,100,101,120,32,37,37,37,100,0] /* invalid capture inde */, "i8", ALLOC_NONE, 5251108);
allocate([99,111,108,108,97,116,101,0] /* collate\00 */, "i8", ALLOC_NONE, 5251136);
allocate([114,97,100,0] /* rad\00 */, "i8", ALLOC_NONE, 5251144);
allocate([110,111,0] /* no\00 */, "i8", ALLOC_NONE, 5251148);
allocate([99,97,108,108,0] /* call\00 */, "i8", ALLOC_NONE, 5251152);
allocate([116,111,110,117,109,98,101,114,0] /* tonumber\00 */, "i8", ALLOC_NONE, 5251160);
allocate([110,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,0] /* not enough memory\00 */, "i8", ALLOC_NONE, 5251172);
allocate([115,116,97,99,107,32,111,118,101,114,102,108,111,119,32,40,37,115,41,0] /* stack overflow (%s)\ */, "i8", ALLOC_NONE, 5251192);
allocate([95,95,112,111,119,0] /* __pow\00 */, "i8", ALLOC_NONE, 5251212);
allocate([40,110,117,108,108,41,0] /* (null)\00 */, "i8", ALLOC_NONE, 5251220);
allocate([40,102,111,114,32,103,101,110,101,114,97,116,111,114,41,0] /* (for generator)\00 */, "i8", ALLOC_NONE, 5251228);
allocate([97,110,100,0] /* and\00 */, "i8", ALLOC_NONE, 5251244);
allocate([109,97,105,110,0] /* main\00 */, "i8", ALLOC_NONE, 5251248);
allocate([37,115,32,110,101,97,114,32,37,115,0] /* %s near %s\00 */, "i8", ALLOC_NONE, 5251256);
allocate([59,59,0] /* ;;\00 */, "i8", ALLOC_NONE, 5251268);
allocate([109,105,115,115,105,110,103,32,39,91,39,32,97,102,116,101,114,32,39,37,37,102,39,32,105,110,32,112,97,116,116,101,114,110,0] /* missing '[' after '% */, "i8", ALLOC_NONE, 5251272);
allocate([97,108,108,0] /* all\00 */, "i8", ALLOC_NONE, 5251308);
allocate([112,111,119,0] /* pow\00 */, "i8", ALLOC_NONE, 5251312);
allocate([97,116,116,101,109,112,116,32,116,111,32,117,115,101,32,97,32,99,108,111,115,101,100,32,102,105,108,101,0] /* attempt to use a clo */, "i8", ALLOC_NONE, 5251316);
allocate([95,95,109,111,100,101,0] /* __mode\00 */, "i8", ALLOC_NONE, 5251348);
allocate([115,101,116,109,101,116,97,116,97,98,108,101,0] /* setmetatable\00 */, "i8", ALLOC_NONE, 5251356);
allocate([105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,39,37,115,39,0] /* invalid option '%s'\ */, "i8", ALLOC_NONE, 5251372);
allocate([95,95,109,111,100,0] /* __mod\00 */, "i8", ALLOC_NONE, 5251392);
allocate([39,61,39,32,111,114,32,39,105,110,39,32,101,120,112,101,99,116,101,100,0] /* '=' or 'in' expected */, "i8", ALLOC_NONE, 5251400);
allocate([61,63,0] /* =?\00 */, "i8", ALLOC_NONE, 5251424);
allocate([102,117,110,99,116,105,111,110,32,111,114,32,101,120,112,114,101,115,115,105,111,110,32,116,111,111,32,99,111,109,112,108,101,120,0] /* function or expressi */, "i8", ALLOC_NONE, 5251428);
allocate([37,115,58,37,100,58,32,37,115,0] /* %s:%d: %s\00 */, "i8", ALLOC_NONE, 5251464);
allocate([109,111,100,117,108,101,32,39,37,115,39,32,110,111,116,32,102,111,117,110,100,58,37,115,0] /* module '%s' not foun */, "i8", ALLOC_NONE, 5251476);
allocate([117,110,102,105,110,105,115,104,101,100,32,99,97,112,116,117,114,101,0] /* unfinished capture\0 */, "i8", ALLOC_NONE, 5251504);
allocate([102,105,101,108,100,32,39,37,115,39,32,109,105,115,115,105,110,103,32,105,110,32,100,97,116,101,32,116,97,98,108,101,0] /* field '%s' missing i */, "i8", ALLOC_NONE, 5251524);
allocate([109,111,100,102,0] /* modf\00 */, "i8", ALLOC_NONE, 5251560);
allocate([37,46,49,52,103,0] /* %.14g\00 */, "i8", ALLOC_NONE, 5251568);
allocate([107,0] /* k\00 */, "i8", ALLOC_NONE, 5251576);
allocate([115,101,108,101,99,116,0] /* select\00 */, "i8", ALLOC_NONE, 5251580);
allocate([101,120,105,116,0] /* exit\00 */, "i8", ALLOC_NONE, 5251588);
allocate([95,95,100,105,118,0] /* __div\00 */, "i8", ALLOC_NONE, 5251596);
allocate([108,97,98,101,108,32,39,37,115,39,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,32,111,110,32,108,105,110,101,32,37,100,0] /* label '%s' already d */, "i8", ALLOC_NONE, 5251604);
allocate([67,0] /* C\00 */, "i8", ALLOC_NONE, 5251644);
allocate([99,104,117,110,107,32,104,97,115,32,116,111,111,32,109,97,110,121,32,108,105,110,101,115,0] /* chunk has too many l */, "i8", ALLOC_NONE, 5251648);
allocate([39,112,97,99,107,97,103,101,46,115,101,97,114,99,104,101,114,115,39,32,109,117,115,116,32,98,101,32,97,32,116,97,98,108,101,0] /* 'package.searchers'  */, "i8", ALLOC_NONE, 5251676);
allocate([105,110,118,97,108,105,100,32,99,97,112,116,117,114,101,32,105,110,100,101,120,0] /* invalid capture inde */, "i8", ALLOC_NONE, 5251712);
allocate([105,115,100,115,116,0] /* isdst\00 */, "i8", ALLOC_NONE, 5251736);
allocate([109,105,110,0] /* min\00 */, "i8", ALLOC_NONE, 5251744);
allocate([102,105,108,101,32,40,37,112,41,0] /* file (%p)\00 */, "i8", ALLOC_NONE, 5251748);
allocate([95,72,75,69,89,0] /* _HKEY\00 */, "i8", ALLOC_NONE, 5251760);
allocate([114,97,119,115,101,116,0] /* rawset\00 */, "i8", ALLOC_NONE, 5251768);
allocate([37,115,0] /* %s\00 */, "i8", ALLOC_NONE, 5251776);
allocate([60,37,115,62,32,97,116,32,108,105,110,101,32,37,100,32,110,111,116,32,105,110,115,105,100,101,32,97,32,108,111,111,112,0] /* _%s_ at line %d not  */, "i8", ALLOC_NONE, 5251780);
allocate([95,95,109,117,108,0] /* __mul\00 */, "i8", ALLOC_NONE, 5251816);
allocate([117,110,101,120,112,101,99,116,101,100,32,115,121,109,98,111,108,0] /* unexpected symbol\00 */, "i8", ALLOC_NONE, 5251824);
allocate([99,104,97,114,40,37,100,41,0] /* char(%d)\00 */, "i8", ALLOC_NONE, 5251844);
allocate([61,91,67,93,0] /* =[C]\00 */, "i8", ALLOC_NONE, 5251856);
allocate([117,110,102,105,110,105,115,104,101,100,32,108,111,110,103,32,99,111,109,109,101,110,116,0] /* unfinished long comm */, "i8", ALLOC_NONE, 5251864);
allocate([114,101,113,117,105,114,101,0] /* require\00 */, "i8", ALLOC_NONE, 5251888);
allocate([116,111,111,32,109,97,110,121,32,99,97,112,116,117,114,101,115,0] /* too many captures\00 */, "i8", ALLOC_NONE, 5251896);
allocate([121,101,97,114,0] /* year\00 */, "i8", ALLOC_NONE, 5251916);
allocate([109,97,120,0] /* max\00 */, "i8", ALLOC_NONE, 5251924);
allocate([102,105,108,101,32,40,99,108,111,115,101,100,41,0] /* file (closed)\00 */, "i8", ALLOC_NONE, 5251928);
allocate([108,101,118,101,108,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* level out of range\0 */, "i8", ALLOC_NONE, 5251944);
allocate([95,71,0] /* _G\00 */, "i8", ALLOC_NONE, 5251964);
allocate([114,97,119,103,101,116,0] /* rawget\00 */, "i8", ALLOC_NONE, 5251968);
allocate([37,115,58,32,37,115,0] /* %s: %s\00 */, "i8", ALLOC_NONE, 5251976);
allocate([95,95,115,117,98,0] /* __sub\00 */, "i8", ALLOC_NONE, 5251984);
allocate([102,117,110,99,116,105,111,110,32,97,114,103,117,109,101,110,116,115,32,101,120,112,101,99,116,101,100,0] /* function arguments e */, "i8", ALLOC_NONE, 5251992);
allocate([95,95,103,99,0] /* __gc\00 */, "i8", ALLOC_NONE, 5252020);
allocate([109,101,116,97,109,101,116,104,111,100,0] /* metamethod\00 */, "i8", ALLOC_NONE, 5252028);
allocate([105,110,115,101,114,116,0] /* insert\00 */, "i8", ALLOC_NONE, 5252040);
allocate([117,110,102,105,110,105,115,104,101,100,32,108,111,110,103,32,115,116,114,105,110,103,0] /* unfinished long stri */, "i8", ALLOC_NONE, 5252048);
allocate([112,114,101,108,111,97,100,0] /* preload\00 */, "i8", ALLOC_NONE, 5252072);
allocate([114,101,115,117,108,116,105,110,103,32,115,116,114,105,110,103,32,116,111,111,32,108,97,114,103,101,0] /* resulting string too */, "i8", ALLOC_NONE, 5252080);
allocate([109,111,110,116,104,0] /* month\00 */, "i8", ALLOC_NONE, 5252108);
allocate([108,111,103,0] /* log\00 */, "i8", ALLOC_NONE, 5252116);
allocate([95,95,116,111,115,116,114,105,110,103,0] /* __tostring\00 */, "i8", ALLOC_NONE, 5252120);
allocate([95,95,105,110,100,101,120,0] /* __index\00 */, "i8", ALLOC_NONE, 5252132);
allocate([110,105,108,32,111,114,32,116,97,98,108,101,32,101,120,112,101,99,116,101,100,0] /* nil or table expecte */, "i8", ALLOC_NONE, 5252140);
allocate([114,97,119,108,101,110,0] /* rawlen\00 */, "i8", ALLOC_NONE, 5252164);
allocate(1, "i8", ALLOC_NONE, 5252172);
allocate([95,95,97,100,100,0] /* __add\00 */, "i8", ALLOC_NONE, 5252176);
allocate([100,97,116,101,0] /* date\00 */, "i8", ALLOC_NONE, 5252184);
allocate([116,111,111,32,109,97,110,121,32,37,115,32,40,108,105,109,105,116,32,105,115,32,37,100,41,32,105,110,32,37,115,0] /* too many %s (limit i */, "i8", ALLOC_NONE, 5252192);
allocate([102,111,114,32,105,116,101,114,97,116,111,114,0] /* for iterator\00 */, "i8", ALLOC_NONE, 5252224);
allocate([101,114,114,111,114,32,105,110,32,95,95,103,99,32,109,101,116,97,109,101,116,104,111,100,32,40,37,115,41,0] /* error in __gc metame */, "i8", ALLOC_NONE, 5252240);
allocate([97,116,116,101,109,112,116,32,116,111,32,37,115,32,97,32,37,115,32,118,97,108,117,101,0] /* attempt to %s a %s v */, "i8", ALLOC_NONE, 5252272);
allocate([104,101,120,97,100,101,99,105,109,97,108,32,100,105,103,105,116,32,101,120,112,101,99,116,101,100,0] /* hexadecimal digit ex */, "i8", ALLOC_NONE, 5252300);
allocate([104,117,103,101,0] /* huge\00 */, "i8", ALLOC_NONE, 5252328);
allocate([95,80,82,69,76,79,65,68,0] /* _PRELOAD\00 */, "i8", ALLOC_NONE, 5252336);
allocate([117,112,112,101,114,0] /* upper\00 */, "i8", ALLOC_NONE, 5252348);
allocate([100,97,121,0] /* day\00 */, "i8", ALLOC_NONE, 5252356);
allocate([108,100,101,120,112,0] /* ldexp\00 */, "i8", ALLOC_NONE, 5252360);
allocate([95,95,103,99,0] /* __gc\00 */, "i8", ALLOC_NONE, 5252368);
allocate([116,114,97,99,101,98,97,99,107,0] /* traceback\00 */, "i8", ALLOC_NONE, 5252376);
allocate([114,97,119,101,113,117,97,108,0] /* rawequal\00 */, "i8", ALLOC_NONE, 5252388);
allocate([115,116,100,105,110,0] /* stdin\00 */, "i8", ALLOC_NONE, 5252400);
allocate([37,115,58,37,100,58,32,0] /* %s:%d: \00 */, "i8", ALLOC_NONE, 5252408);
allocate([95,95,101,113,0] /* __eq\00 */, "i8", ALLOC_NONE, 5252416);
allocate([102,117,110,99,116,105,111,110,32,97,116,32,108,105,110,101,32,37,100,0] /* function at line %d\ */, "i8", ALLOC_NONE, 5252424);
allocate(1, "i8", ALLOC_NONE, 5252444);
allocate([100,101,99,105,109,97,108,32,101,115,99,97,112,101,32,116,111,111,32,108,97,114,103,101,0] /* decimal escape too l */, "i8", ALLOC_NONE, 5252448);
allocate([103,101,116,117,115,101,114,118,97,108,117,101,0] /* getuservalue\00 */, "i8", ALLOC_NONE, 5252476);
allocate([108,111,97,100,101,100,0] /* loaded\00 */, "i8", ALLOC_NONE, 5252492);
allocate([114,101,115,117,109,101,0] /* resume\00 */, "i8", ALLOC_NONE, 5252500);
allocate([115,117,98,0] /* sub\00 */, "i8", ALLOC_NONE, 5252508);
allocate([104,111,117,114,0] /* hour\00 */, "i8", ALLOC_NONE, 5252512);
allocate([102,114,101,120,112,0] /* frexp\00 */, "i8", ALLOC_NONE, 5252520);
allocate([98,97,110,100,0] /* band\00 */, "i8", ALLOC_NONE, 5252528);
allocate([119,114,105,116,101,0] /* write\00 */, "i8", ALLOC_NONE, 5252536);
allocate([115,101,116,117,112,118,97,108,117,101,0] /* setupvalue\00 */, "i8", ALLOC_NONE, 5252544);
allocate([116,114,121,105,110,103,32,116,111,32,97,99,99,101,115,115,32,110,111,110,45,101,120,105,115,116,101,110,116,32,98,105,116,115,0] /* trying to access non */, "i8", ALLOC_NONE, 5252556);
allocate([112,114,105,110,116,0] /* print\00 */, "i8", ALLOC_NONE, 5252592);
allocate([83,108,0] /* Sl\00 */, "i8", ALLOC_NONE, 5252600);
allocate([95,95,108,101,110,0] /* __len\00 */, "i8", ALLOC_NONE, 5252604);
allocate([109,97,105,110,32,102,117,110,99,116,105,111,110,0] /* main function\00 */, "i8", ALLOC_NONE, 5252612);
allocate([76,117,97,32,53,46,50,0] /* Lua 5.2\00 */, "i8", ALLOC_NONE, 5252628);
allocate([63,0] /* ?\00 */, "i8", ALLOC_NONE, 5252636);
allocate([105,110,118,97,108,105,100,32,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,0] /* invalid escape seque */, "i8", ALLOC_NONE, 5252640);
allocate([95,76,79,65,68,69,68,0] /* _LOADED\00 */, "i8", ALLOC_NONE, 5252664);
allocate([114,101,118,101,114,115,101,0] /* reverse\00 */, "i8", ALLOC_NONE, 5252672);
allocate([109,105,110,0] /* min\00 */, "i8", ALLOC_NONE, 5252680);
allocate([102,109,111,100,0] /* fmod\00 */, "i8", ALLOC_NONE, 5252684);
allocate([115,101,116,118,98,117,102,0] /* setvbuf\00 */, "i8", ALLOC_NONE, 5252692);
allocate([115,101,116,109,101,116,97,116,97,98,108,101,0] /* setmetatable\00 */, "i8", ALLOC_NONE, 5252700);
allocate([115,116,97,99,107,32,116,114,97,99,101,98,97,99,107,58,0] /* stack traceback:\00 */, "i8", ALLOC_NONE, 5252716);
allocate([119,105,100,116,104,32,109,117,115,116,32,98,101,32,112,111,115,105,116,105,118,101,0] /* width must be positi */, "i8", ALLOC_NONE, 5252736);
allocate([112,99,97,108,108,0] /* pcall\00 */, "i8", ALLOC_NONE, 5252760);
allocate([98,97,100,32,97,114,103,117,109,101,110,116,32,35,37,100,32,116,111,32,39,37,115,39,32,40,37,115,41,0] /* bad argument #%d to  */, "i8", ALLOC_NONE, 5252768);
allocate([95,95,109,111,100,101,0] /* __mode\00 */, "i8", ALLOC_NONE, 5252800);
allocate([105,116,101,109,115,32,105,110,32,97,32,99,111,110,115,116,114,117,99,116,111,114,0] /* items in a construct */, "i8", ALLOC_NONE, 5252808);
allocate([109,101,116,104,111,100,0] /* method\00 */, "i8", ALLOC_NONE, 5252832);
allocate([105,110,100,101,120,0] /* index\00 */, "i8", ALLOC_NONE, 5252840);
allocate([99,111,110,115,116,114,117,99,116,111,114,32,116,111,111,32,108,111,110,103,0] /* constructor too long */, "i8", ALLOC_NONE, 5252848);
allocate([98,105,110,97,114,121,32,115,116,114,105,110,103,0] /* binary string\00 */, "i8", ALLOC_NONE, 5252872);
allocate([117,110,102,105,110,105,115,104,101,100,32,115,116,114,105,110,103,0] /* unfinished string\00 */, "i8", ALLOC_NONE, 5252888);
allocate([99,111,110,102,105,103,0] /* config\00 */, "i8", ALLOC_NONE, 5252908);
allocate([114,101,112,0] /* rep\00 */, "i8", ALLOC_NONE, 5252916);
allocate([115,101,99,0] /* sec\00 */, "i8", ALLOC_NONE, 5252920);
allocate([102,108,111,111,114,0] /* floor\00 */, "i8", ALLOC_NONE, 5252924);
allocate([67,32,115,116,97,99,107,32,111,118,101,114,102,108,111,119,0] /* C stack overflow\00 */, "i8", ALLOC_NONE, 5252932);
allocate([110,105,108,0] /* nil\00 */, "i8", ALLOC_NONE, 5252952);
allocate([115,101,101,107,0] /* seek\00 */, "i8", ALLOC_NONE, 5252956);
allocate([115,101,116,108,111,99,97,108,0] /* setlocal\00 */, "i8", ALLOC_NONE, 5252964);
allocate([100,101,97,100,0] /* dead\00 */, "i8", ALLOC_NONE, 5252976);
allocate([102,105,101,108,100,32,99,97,110,110,111,116,32,98,101,32,110,101,103,97,116,105,118,101,0] /* field cannot be nega */, "i8", ALLOC_NONE, 5252984);
allocate([112,97,105,114,115,0] /* pairs\00 */, "i8", ALLOC_NONE, 5253012);
allocate([63,0] /* ?\00 */, "i8", ALLOC_NONE, 5253020);
allocate([116,97,98,108,101,32,105,110,100,101,120,32,105,115,32,78,97,78,0] /* table index is NaN\0 */, "i8", ALLOC_NONE, 5253024);
allocate([95,95,103,99,0] /* __gc\00 */, "i8", ALLOC_NONE, 5253044);
allocate([102,117,110,99,116,105,111,110,115,0] /* functions\00 */, "i8", ALLOC_NONE, 5253052);
allocate([110,78,0] /* nN\00 */, "i8", ALLOC_NONE, 5253064);
allocate([99,111,110,115,116,97,110,116,0] /* constant\00 */, "i8", ALLOC_NONE, 5253068);
allocate([108,101,120,105,99,97,108,32,101,108,101,109,101,110,116,32,116,111,111,32,108,111,110,103,0] /* lexical element too  */, "i8", ALLOC_NONE, 5253080);
allocate([110,111,32,118,105,115,105,98,108,101,32,108,97,98,101,108,32,39,37,115,39,32,102,111,114,32,60,103,111,116,111,62,32,97,116,32,108,105,110,101,32,37,100,0] /* no visible label '%s */, "i8", ALLOC_NONE, 5253108);
allocate([47,10,59,10,63,10,33,10,45,10,0] /* /\0A;\0A?\0A!\0A-\0A */, "i8", ALLOC_NONE, 5253152);
allocate([105,110,118,97,108,105,100,32,118,97,108,117,101,32,40,37,115,41,32,97,116,32,105,110,100,101,120,32,37,100,32,105,110,32,116,97,98,108,101,32,102,111,114,32,39,99,111,110,99,97,116,39,0] /* invalid value (%s) a */, "i8", ALLOC_NONE, 5253164);
allocate([109,97,116,99,104,0] /* match\00 */, "i8", ALLOC_NONE, 5253220);
allocate([117,110,97,98,108,101,32,116,111,32,103,101,110,101,114,97,116,101,32,97,32,117,110,105,113,117,101,32,102,105,108,101,110,97,109,101,0] /* unable to generate a */, "i8", ALLOC_NONE, 5253228);
allocate([101,120,112,0] /* exp\00 */, "i8", ALLOC_NONE, 5253268);
allocate([114,101,97,100,0] /* read\00 */, "i8", ALLOC_NONE, 5253272);
allocate([115,101,116,104,111,111,107,0] /* sethook\00 */, "i8", ALLOC_NONE, 5253280);
allocate([110,111,114,109,97,108,0] /* normal\00 */, "i8", ALLOC_NONE, 5253288);
allocate([114,115,104,105,102,116,0] /* rshift\00 */, "i8", ALLOC_NONE, 5253296);
allocate([110,101,120,116,0] /* next\00 */, "i8", ALLOC_NONE, 5253304);
allocate([99,97,108,108,0] /* call\00 */, "i8", ALLOC_NONE, 5253312);
allocate([99,97,108,108,105,110,103,32,39,37,115,39,32,111,110,32,98,97,100,32,115,101,108,102,0] /* calling '%s' on bad  */, "i8", ALLOC_NONE, 5253320);
allocate([95,95,110,101,119,105,110,100,101,120,0] /* __newindex\00 */, "i8", ALLOC_NONE, 5253348);
allocate([120,88,0] /* xX\00 */, "i8", ALLOC_NONE, 5253360);
allocate([108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,0] /* local variables\00 */, "i8", ALLOC_NONE, 5253364);
allocate([109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,101,114,114,111,114,58,32,98,108,111,99,107,32,116,111,111,32,98,105,103,0] /* memory allocation er */, "i8", ALLOC_NONE, 5253380);
allocate([116,111,111,32,109,97,110,121,32,37,115,32,40,108,105,109,105,116,32,105,115,32,37,100,41,0] /* too many %s (limit i */, "i8", ALLOC_NONE, 5253420);
allocate([117,112,118,97,108,117,101,0] /* upvalue\00 */, "i8", ALLOC_NONE, 5253448);
allocate([109,97,108,102,111,114,109,101,100,32,110,117,109,98,101,114,0] /* malformed number\00 */, "i8", ALLOC_NONE, 5253456);
allocate([100,101,98,117,103,0] /* debug\00 */, "i8", ALLOC_NONE, 5253476);
allocate([47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,50,47,63,46,115,111,59,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,50,47,108,111,97,100,97,108,108,46,115,111,59,46,47,63,46,115,111,0] /* /usr/local/lib/lua/5 */, "i8", ALLOC_NONE, 5253484);
allocate([119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,116,111,32,39,105,110,115,101,114,116,39,0] /* wrong number of argu */, "i8", ALLOC_NONE, 5253556);
allocate([108,111,119,101,114,0] /* lower\00 */, "i8", ALLOC_NONE, 5253596);
allocate([116,109,112,110,97,109,101,0] /* tmpname\00 */, "i8", ALLOC_NONE, 5253604);
allocate([100,101,103,0] /* deg\00 */, "i8", ALLOC_NONE, 5253612);
allocate([108,105,110,101,115,0] /* lines\00 */, "i8", ALLOC_NONE, 5253616);
allocate([115,101,116,117,115,101,114,118,97,108,117,101,0] /* setuservalue\00 */, "i8", ALLOC_NONE, 5253624);
allocate([115,117,115,112,101,110,100,101,100,0] /* suspended\00 */, "i8", ALLOC_NONE, 5253640);
allocate([114,114,111,116,97,116,101,0] /* rrotate\00 */, "i8", ALLOC_NONE, 5253652);
allocate([108,111,97,100,0] /* load\00 */, "i8", ALLOC_NONE, 5253660);
allocate([109,101,116,104,111,100,0] /* method\00 */, "i8", ALLOC_NONE, 5253668);
allocate([99,97,110,110,111,116,32,114,101,115,117,109,101,32,100,101,97,100,32,99,111,114,111,117,116,105,110,101,0] /* cannot resume dead c */, "i8", ALLOC_NONE, 5253676);
allocate([105,110,99,111,109,112,97,116,105,98,108,101,0] /* incompatible\00 */, "i8", ALLOC_NONE, 5253708);
allocate([95,95,105,110,100,101,120,0] /* __index\00 */, "i8", ALLOC_NONE, 5253724);
allocate([60,110,97,109,101,62,32,111,114,32,39,46,46,46,39,32,101,120,112,101,99,116,101,100,0] /* _name_ or '...' expe */, "i8", ALLOC_NONE, 5253732);
allocate([102,105,101,108,100,0] /* field\00 */, "i8", ALLOC_NONE, 5253760);
allocate(1, "i8", ALLOC_NONE, 5253768);
allocate([63,0] /* ?\00 */, "i8", ALLOC_NONE, 5253772);
allocate(468, "i8", ALLOC_NONE, 5253776);
HEAP32[((5242892)>>2)]=((5246192)|0);
HEAP32[((5242900)>>2)]=((5252040)|0);
HEAP32[((5242908)>>2)]=((5250068)|0);
HEAP32[((5242916)>>2)]=((5248572)|0);
HEAP32[((5242924)>>2)]=((5247400)|0);
HEAP32[((5242932)>>2)]=((5246644)|0);
HEAP32[((5242948)>>2)]=((5246568)|0);
HEAP32[((5242956)>>2)]=((5252184)|0);
HEAP32[((5242964)>>2)]=((5250232)|0);
HEAP32[((5242972)>>2)]=((5248632)|0);
HEAP32[((5242980)>>2)]=((5247460)|0);
HEAP32[((5242988)>>2)]=((5246660)|0);
HEAP32[((5242996)>>2)]=((5246360)|0);
HEAP32[((5243004)>>2)]=((5245928)|0);
HEAP32[((5243012)>>2)]=((5245624)|0);
HEAP32[((5243020)>>2)]=((5245400)|0);
HEAP32[((5243028)>>2)]=((5253604)|0);
HEAP32[((5243044)>>2)]=((5250152)|0);
HEAP32[((5243052)>>2)]=((5248600)|0);
HEAP32[((5243060)>>2)]=((5247412)|0);
HEAP32[((5243068)>>2)]=((5246652)|0);
HEAP32[((5243076)>>2)]=((5246352)|0);
HEAP32[((5243084)>>2)]=((5245920)|0);
HEAP32[((5243092)>>2)]=((5245616)|0);
HEAP32[((5243100)>>2)]=((5245396)|0);
HEAP32[((5243108)>>2)]=((5253596)|0);
HEAP32[((5243116)>>2)]=((5253220)|0);
HEAP32[((5243124)>>2)]=((5252916)|0);
HEAP32[((5243132)>>2)]=((5252672)|0);
HEAP32[((5243140)>>2)]=((5252508)|0);
HEAP32[((5243148)>>2)]=((5252348)|0);
HEAP32[((5243204)>>2)]=((5248356)|0);
HEAP32[((5243212)>>2)]=((5248240)|0);
HEAP32[((5243228)>>2)]=((5251308)|0);
HEAP32[((5243232)>>2)]=((5251136)|0);
HEAP32[((5243236)>>2)]=((5250932)|0);
HEAP32[((5243240)>>2)]=((5250680)|0);
HEAP32[((5243244)>>2)]=((5250508)|0);
HEAP32[((5243248)>>2)]=((5245400)|0);
HEAP32[((5243304)>>2)]=((5250260)|0);
HEAP32[((5243312)>>2)]=((5248644)|0);
HEAP32[((5243320)>>2)]=((5247472)|0);
HEAP32[((5243328)>>2)]=((5246668)|0);
HEAP32[((5243336)>>2)]=((5246368)|0);
HEAP32[((5243344)>>2)]=((5245936)|0);
HEAP32[((5243352)>>2)]=((5245636)|0);
HEAP32[((5243360)>>2)]=((5245408)|0);
HEAP32[((5243368)>>2)]=((5253612)|0);
HEAP32[((5243376)>>2)]=((5253268)|0);
HEAP32[((5243384)>>2)]=((5252924)|0);
HEAP32[((5243392)>>2)]=((5252684)|0);
HEAP32[((5243400)>>2)]=((5252520)|0);
HEAP32[((5243408)>>2)]=((5252360)|0);
HEAP32[((5243416)>>2)]=((5252116)|0);
HEAP32[((5243424)>>2)]=((5251924)|0);
HEAP32[((5243432)>>2)]=((5251744)|0);
HEAP32[((5243440)>>2)]=((5251560)|0);
HEAP32[((5243448)>>2)]=((5251312)|0);
HEAP32[((5243456)>>2)]=((5251144)|0);
HEAP32[((5243464)>>2)]=((5250940)|0);
HEAP32[((5243472)>>2)]=((5250692)|0);
HEAP32[((5243480)>>2)]=((5250516)|0);
HEAP32[((5243488)>>2)]=((5250336)|0);
HEAP32[((5243496)>>2)]=((5250140)|0);
HEAP32[((5243504)>>2)]=((5249920)|0);
HEAP32[((5243512)>>2)]=((5249788)|0);
HEAP32[((5243804)>>2)]=((5251244)|0);
HEAP32[((5243808)>>2)]=((5251036)|0);
HEAP32[((5243812)>>2)]=((5250796)|0);
HEAP32[((5243816)>>2)]=((5250604)|0);
HEAP32[((5243820)>>2)]=((5250416)|0);
HEAP32[((5243824)>>2)]=((5250256)|0);
HEAP32[((5243828)>>2)]=((5250036)|0);
HEAP32[((5243832)>>2)]=((5249872)|0);
HEAP32[((5243836)>>2)]=((5249728)|0);
HEAP32[((5243840)>>2)]=((5249540)|0);
HEAP32[((5243844)>>2)]=((5249432)|0);
HEAP32[((5243848)>>2)]=((5249236)|0);
HEAP32[((5243852)>>2)]=((5249036)|0);
HEAP32[((5243856)>>2)]=((5248856)|0);
HEAP32[((5243860)>>2)]=((5248700)|0);
HEAP32[((5243864)>>2)]=((5248640)|0);
HEAP32[((5243868)>>2)]=((5248564)|0);
HEAP32[((5243872)>>2)]=((5248432)|0);
HEAP32[((5243876)>>2)]=((5248348)|0);
HEAP32[((5243880)>>2)]=((5248204)|0);
HEAP32[((5243884)>>2)]=((5248100)|0);
HEAP32[((5243888)>>2)]=((5247940)|0);
HEAP32[((5243892)>>2)]=((5247796)|0);
HEAP32[((5243896)>>2)]=((5247668)|0);
HEAP32[((5243900)>>2)]=((5247544)|0);
HEAP32[((5243904)>>2)]=((5247468)|0);
HEAP32[((5243908)>>2)]=((5247396)|0);
HEAP32[((5243912)>>2)]=((5247296)|0);
HEAP32[((5243916)>>2)]=((5247180)|0);
HEAP32[((5243920)>>2)]=((5247068)|0);
HEAP32[((5243924)>>2)]=((5247016)|0);
HEAP32[((5243928)>>2)]=((5246888)|0);
HEAP32[((5243932)>>2)]=((5246800)|0);
HEAP32[((5243936)>>2)]=((5250296)|0);
HEAP32[((5243940)>>2)]=((5252952)|0);
HEAP32[((5243944)>>2)]=((5250948)|0);
HEAP32[((5243948)>>2)]=((5242880)|0);
HEAP32[((5243952)>>2)]=((5249128)|0);
HEAP32[((5243956)>>2)]=((5247840)|0);
HEAP32[((5243960)>>2)]=((5246824)|0);
HEAP32[((5243964)>>2)]=((5246556)|0);
HEAP32[((5243968)>>2)]=((5242880)|0);
HEAP32[((5243972)>>2)]=((5246144)|0);
HEAP32[((5243976)>>2)]=((5245792)|0);
HEAP32[((5243980)>>2)]=((5245536)|0);
HEAP32[((5243984)>>2)]=((5253724)|0);
HEAP32[((5243988)>>2)]=((5253348)|0);
HEAP32[((5243992)>>2)]=((5253044)|0);
HEAP32[((5243996)>>2)]=((5252800)|0);
HEAP32[((5244000)>>2)]=((5252604)|0);
HEAP32[((5244004)>>2)]=((5252416)|0);
HEAP32[((5244008)>>2)]=((5252176)|0);
HEAP32[((5244012)>>2)]=((5251984)|0);
HEAP32[((5244016)>>2)]=((5251816)|0);
HEAP32[((5244020)>>2)]=((5251596)|0);
HEAP32[((5244024)>>2)]=((5251392)|0);
HEAP32[((5244028)>>2)]=((5251212)|0);
HEAP32[((5244032)>>2)]=((5251016)|0);
HEAP32[((5244036)>>2)]=((5250772)|0);
HEAP32[((5244040)>>2)]=((5250572)|0);
HEAP32[((5244044)>>2)]=((5250392)|0);
HEAP32[((5244048)>>2)]=((5250224)|0);
HEAP32[((5244412)>>2)]=((5247696)|0);
HEAP32[((5244416)>>2)]=((5247592)|0);
HEAP32[((5244420)>>2)]=((5247524)|0);
HEAP32[((5244424)>>2)]=((5247432)|0);
HEAP32[((5244428)>>2)]=((5247344)|0);
HEAP32[((5244432)>>2)]=((5247240)|0);
HEAP32[((5244436)>>2)]=((5247164)|0);
HEAP32[((5244440)>>2)]=((5247040)|0);
HEAP32[((5244444)>>2)]=((5246916)|0);
HEAP32[((5244448)>>2)]=((5246852)|0);
HEAP32[((5244452)>>2)]=((5246764)|0);
HEAP32[((5244460)>>2)]=((5251964)|0);
HEAP32[((5244468)>>2)]=((5249964)|0);
HEAP32[((5244476)>>2)]=((5248532)|0);
HEAP32[((5244484)>>2)]=((5247336)|0);
HEAP32[((5244492)>>2)]=((5246628)|0);
HEAP32[((5244500)>>2)]=((5246204)|0);
HEAP32[((5244508)>>2)]=((5245868)|0);
HEAP32[((5244516)>>2)]=((5245564)|0);
HEAP32[((5244524)>>2)]=((5245372)|0);
HEAP32[((5244532)>>2)]=((5253476)|0);
HEAP32[((5244548)>>2)]=((5251888)|0);
HEAP32[((5244564)>>2)]=((5245644)|0);
HEAP32[((5244572)>>2)]=((5245412)|0);
HEAP32[((5244580)>>2)]=((5248660)|0);
HEAP32[((5244588)>>2)]=((5253616)|0);
HEAP32[((5244596)>>2)]=((5248592)|0);
HEAP32[((5244604)>>2)]=((5248508)|0);
HEAP32[((5244612)>>2)]=((5248396)|0);
HEAP32[((5244620)>>2)]=((5253272)|0);
HEAP32[((5244628)>>2)]=((5248300)|0);
HEAP32[((5244636)>>2)]=((5248148)|0);
HEAP32[((5244644)>>2)]=((5252536)|0);
HEAP32[((5244660)>>2)]=((5251152)|0);
HEAP32[((5244664)>>2)]=((5250964)|0);
HEAP32[((5244668)>>2)]=((5250712)|0);
HEAP32[((5244672)>>2)]=((5250536)|0);
HEAP32[((5244676)>>2)]=((5250344)|0);
HEAP32[((5244680)>>2)]=((5245644)|0);
HEAP32[((5244688)>>2)]=((5245412)|0);
HEAP32[((5244696)>>2)]=((5253616)|0);
HEAP32[((5244704)>>2)]=((5253272)|0);
HEAP32[((5244712)>>2)]=((5252956)|0);
HEAP32[((5244720)>>2)]=((5252692)|0);
HEAP32[((5244728)>>2)]=((5252536)|0);
HEAP32[((5244736)>>2)]=((5252368)|0);
HEAP32[((5244744)>>2)]=((5252120)|0);
HEAP32[((5244760)>>2)]=((5251148)|0);
HEAP32[((5244764)>>2)]=((5250956)|0);
HEAP32[((5244768)>>2)]=((5250704)|0);
HEAP32[((5244788)>>2)]=((5250532)|0);
HEAP32[((5244792)>>2)]=((5250340)|0);
HEAP32[((5244796)>>2)]=((5250148)|0);
HEAP32[((5244844)>>2)]=((5247252)|0);
HEAP32[((5244852)>>2)]=((5252476)|0);
HEAP32[((5244860)>>2)]=((5250440)|0);
HEAP32[((5244868)>>2)]=((5248704)|0);
HEAP32[((5244876)>>2)]=((5247548)|0);
HEAP32[((5244884)>>2)]=((5246704)|0);
HEAP32[((5244892)>>2)]=((5246408)|0);
HEAP32[((5244900)>>2)]=((5245952)|0);
HEAP32[((5244908)>>2)]=((5245652)|0);
HEAP32[((5244916)>>2)]=((5245420)|0);
HEAP32[((5244924)>>2)]=((5253624)|0);
HEAP32[((5244932)>>2)]=((5253280)|0);
HEAP32[((5244940)>>2)]=((5252964)|0);
HEAP32[((5244948)>>2)]=((5252700)|0);
HEAP32[((5244956)>>2)]=((5252544)|0);
HEAP32[((5244964)>>2)]=((5252376)|0);
HEAP32[((5245000)>>2)]=((5247388)|0);
HEAP32[((5245008)>>2)]=((5252500)|0);
HEAP32[((5245016)>>2)]=((5250452)|0);
HEAP32[((5245024)>>2)]=((5248732)|0);
HEAP32[((5245032)>>2)]=((5247560)|0);
HEAP32[((5245040)>>2)]=((5246716)|0);
HEAP32[((5245056)>>2)]=((5249604)|0);
HEAP32[((5245060)>>2)]=((5249468)|0);
HEAP32[((5245064)>>2)]=((5247516)|0);
HEAP32[((5245072)>>2)]=((5252528)|0);
HEAP32[((5245080)>>2)]=((5250524)|0);
HEAP32[((5245088)>>2)]=((5248776)|0);
HEAP32[((5245096)>>2)]=((5247568)|0);
HEAP32[((5245104)>>2)]=((5246724)|0);
HEAP32[((5245112)>>2)]=((5246456)|0);
HEAP32[((5245120)>>2)]=((5246008)|0);
HEAP32[((5245128)>>2)]=((5245692)|0);
HEAP32[((5245136)>>2)]=((5245452)|0);
HEAP32[((5245144)>>2)]=((5253652)|0);
HEAP32[((5245152)>>2)]=((5253296)|0);
HEAP32[((5245168)>>2)]=((5248848)|0);
HEAP32[((5245176)>>2)]=((5247652)|0);
HEAP32[((5245184)>>2)]=((5246732)|0);
HEAP32[((5245192)>>2)]=((5246464)|0);
HEAP32[((5245200)>>2)]=((5246016)|0);
HEAP32[((5245208)>>2)]=((5245700)|0);
HEAP32[((5245216)>>2)]=((5245460)|0);
HEAP32[((5245224)>>2)]=((5253660)|0);
HEAP32[((5245232)>>2)]=((5253304)|0);
HEAP32[((5245240)>>2)]=((5253012)|0);
HEAP32[((5245248)>>2)]=((5252760)|0);
HEAP32[((5245256)>>2)]=((5252592)|0);
HEAP32[((5245264)>>2)]=((5252388)|0);
HEAP32[((5245272)>>2)]=((5252164)|0);
HEAP32[((5245280)>>2)]=((5251968)|0);
HEAP32[((5245288)>>2)]=((5251768)|0);
HEAP32[((5245296)>>2)]=((5251580)|0);
HEAP32[((5245304)>>2)]=((5251356)|0);
HEAP32[((5245312)>>2)]=((5251160)|0);
HEAP32[((5245320)>>2)]=((5250972)|0);
HEAP32[((5245328)>>2)]=((5250748)|0);
HEAP32[((5245336)>>2)]=((5250544)|0);

  
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
var _llvm_va_start; // stub for _llvm_va_start

  function _llvm_va_end() {}

  var _abs=Math.abs;

  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }

  
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[(((px)+(i))|0)];
        var y = HEAPU8[(((py)+(i))|0)];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }

  function _longjmp(env, value) {
      throw { longjmp: true, id: HEAP32[((env)>>2)], value: value || 1 };
    }

  function _abort() {
      ABORT = true;
      throw 'abort() at ' + (new Error().stack);
    }
var _setjmp; // stub for _setjmp

  function _localeconv() {
      // %struct.timeval = type { char* decimal point, other stuff... }
      // var indexes = Runtime.calculateStructAlignment({ fields: ['i32', 'i32'] });
      var me = _localeconv;
      if (!me.ret) {
        me.ret = allocate([allocate(intArrayFromString('.'), 'i8', ALLOC_NORMAL)], 'i8*', ALLOC_NORMAL); // just decimal point, for now
      }
      return me.ret;
    }

  var _floor=Math.floor;

  var _llvm_pow_f64=Math.pow;

  function _strpbrk(ptr1, ptr2) {
      var curr;
      var searchSet = {};
      while (1) {
        var curr = HEAP8[((ptr2++)|0)];
        if (!curr) break;
        searchSet[curr] = 1;
      }
      while (1) {
        curr = HEAP8[(ptr1)];
        if (!curr) break;
        if (curr in searchSet) return ptr1;
        ptr1++;
      }
      return 0;
    }

  
  function _isspace(chr) {
      return chr in { 32: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0 };
    }
  
  function _isdigit(chr) {
      return chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0);
    }function _strtod(str, endptr) {
      var origin = str;
  
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == '-'.charCodeAt(0)) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == '+'.charCodeAt(0)) {
        str++;
      }
  
      var chr;
      var ret = 0;
  
      // Get whole part.
      var whole = false;
      while(1) {
        chr = HEAP8[(str)];
        if (!_isdigit(chr)) break;
        whole = true;
        ret = ret*10 + chr - '0'.charCodeAt(0);
        str++;
      }
  
      // Get fractional part.
      var fraction = false;
      if (HEAP8[(str)] == '.'.charCodeAt(0)) {
        str++;
        var mul = 1/10;
        while(1) {
          chr = HEAP8[(str)];
          if (!_isdigit(chr)) break;
          fraction = true;
          ret += mul*(chr - '0'.charCodeAt(0));
          mul /= 10;
          str++;
        }
      }
  
      if (!whole && !fraction) {
        if (endptr) {
          HEAP32[((endptr)>>2)]=origin
        }
        return 0;
      }
  
      // Get exponent part.
      chr = HEAP8[(str)];
      if (chr == 'e'.charCodeAt(0) || chr == 'E'.charCodeAt(0)) {
        str++;
        var exponent = 0;
        var expNegative = false;
        chr = HEAP8[(str)];
        if (chr == '-'.charCodeAt(0)) {
          expNegative = true;
          str++;
        } else if (chr == '+'.charCodeAt(0)) {
          str++;
        }
        chr = HEAP8[(str)];
        while(1) {
          if (!_isdigit(chr)) break;
          exponent = exponent*10 + chr - '0'.charCodeAt(0);
          str++;
          chr = HEAP8[(str)];
        }
        if (expNegative) exponent = -exponent;
        ret *= Math.pow(10, exponent);
      }
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
  
      return ret * multiplier;
    }

  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]|0 != 0) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }

  
  
  function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],HEAPF64[(tempDoublePtr)>>3]);
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == '%'.charCodeAt(0)) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case '+'.charCodeAt(0):
                flagAlwaysSigned = true;
                break;
              case '-'.charCodeAt(0):
                flagLeftAlign = true;
                break;
              case '#'.charCodeAt(0):
                flagAlternative = true;
                break;
              case '0'.charCodeAt(0):
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == '*'.charCodeAt(0)) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) {
              width = width * 10 + (next - '0'.charCodeAt(0));
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false;
          if (next == '.'.charCodeAt(0)) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == '*'.charCodeAt(0)) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < '0'.charCodeAt(0) ||
                    precisionChr > '9'.charCodeAt(0)) break;
                precision = precision * 10 + (precisionChr - '0'.charCodeAt(0));
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 'h'.charCodeAt(0)) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 'l'.charCodeAt(0)) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
  
          // Handle type specifier.
          if (['d', 'i', 'u', 'o', 'x', 'X', 'p'].indexOf(String.fromCharCode(next)) != -1) {
            // Integer.
            var signed = next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0);
            argSize = argSize || 4;
            var currArg = getNextArg('i' + (argSize * 8));
            var origArg = currArg;
            var argText;
            // Flatten i64-1 [low, high] into a (slightly rounded) double
            if (argSize == 8) {
              currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 'u'.charCodeAt(0));
            }
            // Truncate to requested size.
            if (argSize <= 4) {
              var limit = Math.pow(256, argSize) - 1;
              currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
            }
            // Format the number.
            var currAbsArg = Math.abs(currArg);
            var prefix = '';
            if (next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
              argText = reSign(currArg, 8 * argSize, 1).toString(10);
            } else if (next == 'u'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
              argText = unSign(currArg, 8 * argSize, 1).toString(10);
              currArg = Math.abs(currArg);
            } else if (next == 'o'.charCodeAt(0)) {
              argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
            } else if (next == 'x'.charCodeAt(0) || next == 'X'.charCodeAt(0)) {
              prefix = flagAlternative ? '0x' : '';
              if (argSize == 8 && i64Math) argText = (origArg[1]>>>0).toString(16) + (origArg[0]>>>0).toString(16); else
              if (currArg < 0) {
                // Represent negative numbers in hex as 2's complement.
                currArg = -currArg;
                argText = (currAbsArg - 1).toString(16);
                var buffer = [];
                for (var i = 0; i < argText.length; i++) {
                  buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                }
                argText = buffer.join('');
                while (argText.length < argSize * 2) argText = 'f' + argText;
              } else {
                argText = currAbsArg.toString(16);
              }
              if (next == 'X'.charCodeAt(0)) {
                prefix = prefix.toUpperCase();
                argText = argText.toUpperCase();
              }
            } else if (next == 'p'.charCodeAt(0)) {
              if (currAbsArg === 0) {
                argText = '(nil)';
              } else {
                prefix = '0x';
                argText = currAbsArg.toString(16);
              }
            }
            if (precisionSet) {
              while (argText.length < precision) {
                argText = '0' + argText;
              }
            }
  
            // Add sign if needed
            if (flagAlwaysSigned) {
              if (currArg < 0) {
                prefix = '-' + prefix;
              } else {
                prefix = '+' + prefix;
              }
            }
  
            // Add padding.
            while (prefix.length + argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad) {
                  argText = '0' + argText;
                } else {
                  prefix = ' ' + prefix;
                }
              }
            }
  
            // Insert the result into the buffer.
            argText = prefix + argText;
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (['f', 'F', 'e', 'E', 'g', 'G'].indexOf(String.fromCharCode(next)) != -1) {
            // Float.
            var currArg = getNextArg('double');
            var argText;
  
            if (isNaN(currArg)) {
              argText = 'nan';
              flagZeroPad = false;
            } else if (!isFinite(currArg)) {
              argText = (currArg < 0 ? '-' : '') + 'inf';
              flagZeroPad = false;
            } else {
              var isGeneral = false;
              var effectivePrecision = Math.min(precision, 20);
  
              // Convert g/G to f/F or e/E, as per:
              // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
              if (next == 'g'.charCodeAt(0) || next == 'G'.charCodeAt(0)) {
                isGeneral = true;
                precision = precision || 1;
                var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                if (precision > exponent && exponent >= -4) {
                  next = ((next == 'g'.charCodeAt(0)) ? 'f' : 'F').charCodeAt(0);
                  precision -= exponent + 1;
                } else {
                  next = ((next == 'g'.charCodeAt(0)) ? 'e' : 'E').charCodeAt(0);
                  precision--;
                }
                effectivePrecision = Math.min(precision, 20);
              }
  
              if (next == 'e'.charCodeAt(0) || next == 'E'.charCodeAt(0)) {
                argText = currArg.toExponential(effectivePrecision);
                // Make sure the exponent has at least 2 digits.
                if (/[eE][-+]\d$/.test(argText)) {
                  argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                }
              } else if (next == 'f'.charCodeAt(0) || next == 'F'.charCodeAt(0)) {
                argText = currArg.toFixed(effectivePrecision);
              }
  
              var parts = argText.split('e');
              if (isGeneral && !flagAlternative) {
                // Discard trailing zeros and periods.
                while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                       (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                  parts[0] = parts[0].slice(0, -1);
                }
              } else {
                // Make sure we have a period in alternative mode.
                if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                // Zero pad until required precision.
                while (precision > effectivePrecision++) parts[0] += '0';
              }
              argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
              // Capitalize 'E' if needed.
              if (next == 'E'.charCodeAt(0)) argText = argText.toUpperCase();
  
              // Add sign.
              if (flagAlwaysSigned && currArg >= 0) {
                argText = '+' + argText;
              }
            }
  
            // Add padding.
            while (argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                  argText = argText[0] + '0' + argText.slice(1);
                } else {
                  argText = (flagZeroPad ? '0' : ' ') + argText;
                }
              }
            }
  
            // Adjust case.
            if (next < 'a'.charCodeAt(0)) argText = argText.toUpperCase();
  
            // Insert the result into the buffer.
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (next == 's'.charCodeAt(0)) {
            // String.
            var arg = getNextArg('i8*') || nullString;
            var argLength = _strlen(arg);
            if (precisionSet) argLength = Math.min(argLength, precision);
            if (!flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
            for (var i = 0; i < argLength; i++) {
              ret.push(HEAPU8[((arg++)|0)]);
            }
            if (flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
          } else if (next == 'c'.charCodeAt(0)) {
            // Character.
            if (flagLeftAlign) ret.push(getNextArg('i8'));
            while (--width > 0) {
              ret.push(' '.charCodeAt(0));
            }
            if (!flagLeftAlign) ret.push(getNextArg('i8'));
          } else if (next == 'n'.charCodeAt(0)) {
            // Write the length written so far to the next parameter.
            var ptr = getNextArg('i32*');
            HEAP32[((ptr)>>2)]=ret.length
          } else if (next == '%'.charCodeAt(0)) {
            // Literal percent sign.
            ret.push(curr);
          } else {
            // Unknown specifiers remain untouched.
            for (var i = startTextIndex; i < textIndex + 2; i++) {
              ret.push(HEAP8[(i)]);
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }

  function _ldexp(x, exp_) {
      return x * Math.pow(2, exp_);
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }

  function _memcmp(p1, p2, num) {
      p1 = p1|0; p2 = p2|0; num = num|0;
      var i = 0, v1 = 0, v2 = 0;
      while ((i|0) < (num|0)) {
        var v1 = HEAPU8[(((p1)+(i))|0)];
        var v2 = HEAPU8[(((p2)+(i))|0)];
        if ((v1|0) != (v2|0)) return ((v1|0) > (v2|0) ? 1 : -1)|0;
        i = (i+1)|0;
      }
      return 0;
    }

  var _strcoll=_strcmp;

  
  
  function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      if (!___setErrNo.ret) ___setErrNo.ret = allocate([0], 'i32', ALLOC_STATIC);
      HEAP32[((___setErrNo.ret)>>2)]=value
      return value;
    }function ___errno_location() {
      return ___setErrNo.ret;
    }var ___errno=___errno_location;

  
  
  var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};
  
  var ERRNO_MESSAGES={1:"Operation not permitted",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"Input/output error",6:"No such device or address",8:"Exec format error",9:"Bad file descriptor",10:"No child processes",11:"Resource temporarily unavailable",12:"Cannot allocate memory",13:"Permission denied",14:"Bad address",16:"Device or resource busy",17:"File exists",18:"Invalid cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Inappropriate ioctl for device",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read-only file system",31:"Too many links",32:"Broken pipe",33:"Numerical argument out of domain",34:"Numerical result out of range",35:"Resource deadlock avoided",36:"File name too long",37:"No locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many levels of symbolic links",42:"No message of desired type",43:"Identifier removed",60:"Device not a stream",61:"No data available",62:"Timer expired",63:"Out of streams resources",67:"Link has been severed",71:"Protocol error",72:"Multihop attempted",74:"Bad message",75:"Value too large for defined data type",84:"Invalid or incomplete multibyte or wide character",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Protocol not supported",95:"Operation not supported",97:"Address family not supported by protocol",98:"Address already in use",99:"Cannot assign requested address",100:"Network is down",101:"Network is unreachable",102:"Network dropped connection on reset",103:"Software caused connection abort",104:"Connection reset by peer",105:"No buffer space available",106:"Transport endpoint is already connected",107:"Transport endpoint is not connected",110:"Connection timed out",111:"Connection refused",113:"No route to host",114:"Operation already in progress",115:"Operation now in progress",116:"Stale NFS file handle",122:"Disk quota exceeded",125:"Operation canceled",130:"Owner died",131:"State not recoverable"};function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          for (var i = 0; i < msg.length; i++) {
            HEAP8[(((strerrbuf)+(i))|0)]=msg.charCodeAt(i)
          }
          HEAP8[(((strerrbuf)+(i))|0)]=0
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  
  
  var _stdin=allocate(1, "i32*", ALLOC_STACK);
  
  var _stdout=allocate(1, "i32*", ALLOC_STACK);
  
  var _stderr=allocate(1, "i32*", ALLOC_STACK);
  
  var __impure_ptr=allocate(1, "i32*", ALLOC_STACK);var FS={currentPath:"/",nextInode:2,streams:[null],ignorePermissions:true,joinPath:function (parts, forceRelative) {
        var ret = parts[0];
        for (var i = 1; i < parts.length; i++) {
          if (ret[ret.length-1] != '/') ret += '/';
          ret += parts[i];
        }
        if (forceRelative && ret[0] == '/') ret = ret.substr(1);
        return ret;
      },absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
  
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
  
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
  
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {
          isDevice: false,
          contents: data.subarray ? data.subarray(0) : data // as an optimization, create a new array wrapper (not buffer) here, to help JS engines understand this object
        };
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
  
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function(chunkSize, length) {
            this.length = length;
            this.chunkSize = chunkSize;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % chunkSize;
            var chunkNum = Math.floor(idx / chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
    
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
          if (!hasByteServing) chunkSize = datalength;
    
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
    
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
    
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
    
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
    
          var lazyArray = new LazyUint8Array(chunkSize, datalength);
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * lazyArray.chunkSize;
            var end = (chunkNum+1) * lazyArray.chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile) {
        Browser.ensureObjects();
        var fullname = FS.joinPath([parent, name], true);
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureRoot();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
  
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
                if (result === null) result = String.fromCharCode(0); // cancel ==> EOF
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        var utf8 = new Runtime.UTF8Processor();
        function simpleOutput(val) {
          if (val === null || val === '\n'.charCodeAt(0)) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(utf8.processCChar(val));
          }
        }
        if (!output) {
          stdoutOverridden = false;
          output = simpleOutput;
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = simpleOutput;
        }
        if (!error.printer) error.printer = Module['print'];
        if (!error.buffer) error.buffer = [];
  
        // Create the temporary folder, if not already created
        try {
          FS.createFolder('/', 'tmp', true, true);
        } catch(e) {}
  
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
  
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          isTerminal: !stdinOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stdoutOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stderrOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        assert(Math.max(_stdin, _stdout, _stderr) < 128); // make sure these are low, we flatten arrays with these
        HEAP32[((_stdin)>>2)]=1;
        HEAP32[((_stdout)>>2)]=2;
        HEAP32[((_stderr)>>2)]=3;
  
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
  
        // Newlib initialization
        for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
          FS.streams[i] = null; // Make sure to keep FS.streams dense
        }
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_STATIC) ], 'void*', ALLOC_NONE, __impure_ptr);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output('\n'.charCodeAt(0));
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output('\n'.charCodeAt(0));
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};
  
  
  var ___dirent_struct_layout={__size__:1040,d_ino:0,d_name:4,d_off:1028,d_reclen:1032,d_type:1036};function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      // NOTE: This implementation tries to mimic glibc rather than strictly
      // following the POSIX standard.
  
      var mode = HEAP32[((varargs)>>2)];
  
      // Simplify flags.
      var accessMode = oflag & 3;
      var isWrite = accessMode != 0;
      var isRead = accessMode != 1;
      var isCreate = Boolean(oflag & 512);
      var isExistCheck = Boolean(oflag & 2048);
      var isTruncate = Boolean(oflag & 1024);
      var isAppend = Boolean(oflag & 8);
  
      // Verify path.
      var origPath = path;
      path = FS.analyzePath(Pointer_stringify(path));
      if (!path.parentExists) {
        ___setErrNo(path.error);
        return -1;
      }
      var target = path.object || null;
      var finalPath;
  
      // Verify the file exists, create if needed and allowed.
      if (target) {
        if (isCreate && isExistCheck) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          return -1;
        }
        if ((isWrite || isCreate || isTruncate) && target.isFolder) {
          ___setErrNo(ERRNO_CODES.EISDIR);
          return -1;
        }
        if (isRead && !target.read || isWrite && !target.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        if (isTruncate && !target.isDevice) {
          target.contents = [];
        } else {
          if (!FS.forceLoadFile(target)) {
            ___setErrNo(ERRNO_CODES.EIO);
            return -1;
          }
        }
        finalPath = path.path;
      } else {
        if (!isCreate) {
          ___setErrNo(ERRNO_CODES.ENOENT);
          return -1;
        }
        if (!path.parentObject.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        target = FS.createDataFile(path.parentObject, path.name, [],
                                   mode & 0x100, mode & 0x80);  // S_IRUSR, S_IWUSR.
        finalPath = path.parentPath + '/' + path.name;
      }
      // Actually create an open stream.
      var id = FS.streams.length; // Keep dense
      if (target.isFolder) {
        var entryBuffer = 0;
        if (___dirent_struct_layout) {
          entryBuffer = _malloc(___dirent_struct_layout.__size__);
        }
        var contents = [];
        for (var key in target.contents) contents.push(key);
        FS.streams[id] = {
          path: finalPath,
          object: target,
          // An index into contents. Special values: -2 is ".", -1 is "..".
          position: -2,
          isRead: true,
          isWrite: false,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: [],
          // Folder-specific properties:
          // Remember the contents at the time of opening in an array, so we can
          // seek between them relying on a single order.
          contents: contents,
          // Each stream has its own area for readdir() returns.
          currentEntry: entryBuffer
        };
      } else {
        FS.streams[id] = {
          path: finalPath,
          object: target,
          position: 0,
          isRead: isRead,
          isWrite: isWrite,
          isAppend: isAppend,
          error: false,
          eof: false,
          ungotten: []
        };
      }
      return id;
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 1024;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 8;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }

  
  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      if (FS.streams[fildes]) {
        if (FS.streams[fildes].currentEntry) {
          _free(FS.streams[fildes].currentEntry);
        }
        FS.streams[fildes] = null;
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      if (FS.streams[fildes]) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }function _freopen(filename, mode, stream) {
      // FILE *freopen(const char *restrict filename, const char *restrict mode, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/freopen.html
      if (!filename) {
        if (!FS.streams[stream]) {
          ___setErrNo(ERRNO_CODES.EBADF);
          return 0;
        }
        if (_freopen.buffer) _free(_freopen.buffer);
        filename = intArrayFromString(FS.streams[stream].path);
        filename = allocate(filename, 'i8', ALLOC_NORMAL);
      }
      _fclose(stream);
      return _fopen(filename, mode);
    }

  function _ferror(stream) {
      // int ferror(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ferror.html
      return Number(FS.streams[stream] && FS.streams[stream].error);
    }


  function _strstr(ptr1, ptr2) {
      var check = 0, start;
      do {
        if (!check) {
          start = ptr1;
          check = ptr2;
        }
        var curr1 = HEAP8[((ptr1++)|0)];
        var curr2 = HEAP8[((check++)|0)];
        if (curr2 == 0) return start;
        if (curr2 != curr1) {
          // rewind to one character after start, to find ez in eeez
          ptr1 = start + 1;
          check = 0;
        }
      } while (curr1);
      return 0;
    }

  
  
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[(((buf)+(i))|0)];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[(((buf)+(i))|0)]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      var flush = function(filedes) {
        // Right now we write all data directly, except for output devices.
        if (FS.streams[filedes] && FS.streams[filedes].object.output) {
          if (!FS.streams[filedes].isTerminal) { // don't flush terminals, it would cause a \n to also appear
            FS.streams[filedes].object.output(null);
          }
        }
      };
      try {
        if (stream === 0) {
          for (var i = 0; i < FS.streams.length; i++) if (FS.streams[i]) flush(i);
        } else {
          flush(stream);
        }
        return 0;
      } catch (e) {
        ___setErrNo(ERRNO_CODES.EIO);
        return -1;
      }
    }

  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      return Number(FS.streams[stream] && FS.streams[stream].eof);
    }

  
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead = 0;
        while (stream.ungotten.length && nbyte > 0) {
          HEAP8[((buf++)|0)]=stream.ungotten.pop()
          nbyte--;
          bytesRead++;
        }
        var contents = stream.object.contents;
        var size = Math.min(contents.length - offset, nbyte);
        if (contents.subarray || contents.slice) { // typed array or normal array
          for (var i = 0; i < size; i++) {
            HEAP8[(((buf)+(i))|0)]=contents[offset + i]
          }
        } else {
          for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
            HEAP8[(((buf)+(i))|0)]=contents.get(offset + i)
          }
        }
        bytesRead += size;
        return bytesRead;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead;
        if (stream.object.isDevice) {
          if (stream.object.input) {
            bytesRead = 0;
            while (stream.ungotten.length && nbyte > 0) {
              HEAP8[((buf++)|0)]=stream.ungotten.pop()
              nbyte--;
              bytesRead++;
            }
            for (var i = 0; i < nbyte; i++) {
              try {
                var result = stream.object.input();
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              HEAP8[(((buf)+(i))|0)]=result
            }
            return bytesRead;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var ungotSize = stream.ungotten.length;
          bytesRead = _pread(fildes, buf, nbyte, stream.position);
          if (bytesRead != -1) {
            stream.position += (stream.ungotten.length - ungotSize) + bytesRead;
          }
          return bytesRead;
        }
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) return 0;
      var bytesRead = _read(stream, ptr, bytesToRead);
      var streamObj = FS.streams[stream];
      if (bytesRead == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        if (bytesRead < bytesToRead) streamObj.eof = true;
        return Math.floor(bytesRead / size);
      }
    }

  
  function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      if (!FS.streams[stream]) return -1;
      var streamObj = FS.streams[stream];
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _read(stream, _fgetc.ret, 1);
      if (ret == 0) {
        streamObj.eof = true;
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }var _getc=_fgetc;

  function _strspn(pstr, pset) {
      var str = pstr, set, strcurr, setcurr;
      while (1) {
        strcurr = HEAP8[(str)];
        if (!strcurr) return str - pstr;
        set = pset;
        while (1) {
          setcurr = HEAP8[(set)];
          if (!setcurr || setcurr == strcurr) break;
          set++;
        }
        if (!setcurr) return str - pstr;
        str++;
      }
    }

  function _isalnum(chr) {
      return (chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0)) ||
             (chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0)) ||
             (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0));
    }


  function _toupper(chr) {
      if (chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0)) {
        return chr - 'a'.charCodeAt(0) + 'A'.charCodeAt(0);
      } else {
        return chr;
      }
    }


  function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      if (!FS.streams[stream]) return 0;
      var streamObj = FS.streams[stream];
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != '\n'.charCodeAt(0); i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[(((s)+(i))|0)]=byte_
      }
      HEAP8[(((s)+(i))|0)]=0
      return s;
    }

  function _setvbuf(stream, buf, type, size) {
      // int setvbuf(FILE *restrict stream, char *restrict buf, int type, size_t size);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/setvbuf.html
      // TODO: Implement custom buffering.
      return 0;
    }

  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      if (FS.streams[fildes] && !FS.streams[fildes].object.isDevice) {
        var stream = FS.streams[fildes];
        var position = offset;
        if (whence === 1) {  // SEEK_CUR.
          position += stream.position;
        } else if (whence === 2) {  // SEEK_END.
          position += stream.object.contents.length;
        }
        if (position < 0) {
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        } else {
          stream.ungotten = [];
          stream.position = position;
          return position;
        }
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var ret = _lseek(stream, offset, whence);
      if (ret == -1) {
        return -1;
      } else {
        FS.streams[stream].eof = false;
        return 0;
      }
    }

  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      if (FS.streams[stream]) {
        stream = FS.streams[stream];
        if (stream.object.isDevice) {
          ___setErrNo(ERRNO_CODES.ESPIPE);
          return -1;
        } else {
          return stream.position;
        }
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }

  function _clearerr(stream) {
      // void clearerr(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/clearerr.html
      if (FS.streams[stream]) FS.streams[stream].error = false;
    }

  
  
  function __isFloat(text) {
      return !!(/^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?$/.exec(text));
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[' '.charCodeAt(0)] = 1;
        __scanString.whiteSpace['\t'.charCodeAt(0)] = 1;
        __scanString.whiteSpace['\n'.charCodeAt(0)] = 1;
        __scanString.whiteSpace[' '] = 1;
        __scanString.whiteSpace['\t'] = 1;
        __scanString.whiteSpace['\n'] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
  
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getNativeFieldSize('void*');
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
  
        // TODO: Support strings like "%5c" etc.
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'c') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getNativeFieldSize('void*');
          fields++;
          next = get();
          HEAP8[(argPtr)]=next
          formatIndex += 2;
          continue;
        }
  
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
  
        if (format[formatIndex] === '%') {
          formatIndex++;
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= '0'.charCodeAt(0) &&
                 format[formatIndex].charCodeAt(0) <= '9'.charCodeAt(0)) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if(format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' || type == 'E') {
            var last = 0;
            next = get();
            while (next > 0) {
              buffer.push(String.fromCharCode(next));
              if (__isFloat(buffer.join(''))) {
                last = buffer.length;
              }
              next = get();
            }
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) ||
                                                                     (first && next == '-'.charCodeAt(0)))) ||
                   (type === 'x' && (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0) ||
                                     next >= 'a'.charCodeAt(0) && next <= 'f'.charCodeAt(0) ||
                                     next >= 'A'.charCodeAt(0) && next <= 'F'.charCodeAt(0)))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getNativeFieldSize('void*');
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if(longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,Math.min(Math.floor((parseInt(text, 10))/4294967296), 4294967295)>>>0],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16)
              break;
            case 'f':
            case 'e':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                (HEAPF64[(tempDoublePtr)>>3]=parseFloat(text),HEAP32[((argPtr)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((argPtr)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)])
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text)
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j]
              }
              break;
          }
          fields++;
        } else if (format[formatIndex] in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }
  
  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      if (FS.streams[stream]) {
        c = unSign(c & 0xFF);
        FS.streams[stream].ungotten.push(c);
        return c;
      } else {
        return -1;
      }
    }function _fscanf(stream, format, varargs) {
      // int fscanf(FILE *restrict stream, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      if (FS.streams[stream]) {
        var stack = [];
        var get = function() { var ret = _fgetc(stream); stack.push(ret); return ret };
        var unget = function(c) { return _ungetc(stack.pop(), stream) };
        return __scanString(format, get, unget, varargs);
      } else {
        return -1;
      }
    }


  
  function _tmpnam(s, dir, prefix) {
      // char *tmpnam(char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpnam.html
      // NOTE: The dir and prefix arguments are for internal use only.
      var folder = FS.findObject(dir || '/tmp');
      if (!folder || !folder.isFolder) {
        dir = '/tmp';
        folder = FS.findObject(dir);
        if (!folder || !folder.isFolder) return 0;
      }
      var name = prefix || 'file';
      do {
        name += String.fromCharCode(65 + Math.floor(Math.random() * 25));
      } while (name in folder.contents);
      var result = dir + '/' + name;
      if (!_tmpnam.buffer) _tmpnam.buffer = _malloc(256);
      if (!s) s = _tmpnam.buffer;
      for (var i = 0; i < result.length; i++) {
        HEAP8[(((s)+(i))|0)]=result.charCodeAt(i);
      }
      HEAP8[(((s)+(i))|0)]=0;
      return s;
    }function _tmpfile() {
      // FILE *tmpfile(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpfile.html
      // TODO: Delete the created file on closing.
      if (_tmpfile.mode) {
        _tmpfile.mode = allocate(intArrayFromString('w+'), 'i8', ALLOC_NORMAL);
      }
      return _fopen(_tmpnam(0), _tmpfile.mode);
    }

  var _tan=Math.tan;

  
  function _sinh(x) {
      var p = Math.pow(Math.E, x);
      return (p - (1 / p)) / 2;
    }
  
  function _cosh(x) {
      var p = Math.pow(Math.E, x);
      return (p + (1 / p)) / 2;
    }function _tanh(x) {
      return _sinh(x) / _cosh(x);
    }

  var _sqrt=Math.sqrt;

  var _sin=Math.sin;


  function _srand(seed) {}

  function _rand() {
      return Math.floor(Math.random()*0x80000000);
    }

  function _modf(x, intpart) {
      (HEAPF64[(tempDoublePtr)>>3]=Math.floor(x),HEAP32[((intpart)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((intpart)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)])
      return x - (HEAP32[((tempDoublePtr)>>2)]=HEAP32[((intpart)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((intpart)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
    }

  var _log=Math.log;

  function _log10(x) {
      return Math.log(x) / Math.LN10;
    }

  function _frexp(x, exp_addr) {
      var sig = 0, exp_ = 0;
      if (x !== 0) {
        var raw_exp = Math.log(x)/Math.log(2);
        exp_ = Math.ceil(raw_exp);
        if (exp_ === raw_exp) exp_ += 1;
        sig = x/Math.pow(2, exp_);
      }
      HEAP32[((exp_addr)>>2)]=exp_
      return sig;
    }

  function _fmod(x, y) {
      return x % y;
    }

  var _exp=Math.exp;

  var _cos=Math.cos;


  var _ceil=Math.ceil;

  var _atan=Math.atan;

  var _atan2=Math.atan2;

  var _asin=Math.asin;

  var _acos=Math.acos;

  var _fabs=Math.abs;


  
  var ___tm_struct_layout={__size__:44,tm_sec:0,tm_min:4,tm_hour:8,tm_mday:12,tm_mon:16,tm_year:20,tm_wday:24,tm_yday:28,tm_isdst:32,tm_gmtoff:36,tm_zone:40};
  
  
  var __tzname=allocate(8, "i32*", ALLOC_STACK);
  
  var __daylight=allocate(1, "i32*", ALLOC_STACK);
  
  var __timezone=allocate(1, "i32*", ALLOC_STACK);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((__timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((__daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset())
  
      var winterName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | winter.toString().match(/\(([A-Z]+)\)/)[1];
      var summerName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | summer.toString().match(/\(([A-Z]+)\)/)[1];
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      HEAP32[((__tzname)>>2)]=winterNamePtr
      HEAP32[(((__tzname)+(4))>>2)]=summerNamePtr
    }function _mktime(tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var year = HEAP32[(((tmPtr)+(offsets.tm_year))>>2)];
      var timestamp = new Date(year >= 1900 ? year : year + 1900,
                               HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_min))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)],
                               0).getTime() / 1000;
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=new Date(timestamp).getDay()
      var yday = Math.round((timestamp - (new Date(year, 0, 1)).getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      return timestamp;
    }

  function _setlocale(category, locale) {
      if (!_setlocale.ret) _setlocale.ret = allocate([0], 'i8', ALLOC_NORMAL);
      return _setlocale.ret;
    }

  function _rename(old, new_) {
      // int rename(const char *old, const char *new);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rename.html
      var oldObj = FS.analyzePath(Pointer_stringify(old));
      var newObj = FS.analyzePath(Pointer_stringify(new_));
      if (newObj.path == oldObj.path) {
        return 0;
      } else if (!oldObj.exists) {
        ___setErrNo(oldObj.error);
        return -1;
      } else if (oldObj.isRoot || oldObj.path == FS.currentPath) {
        ___setErrNo(ERRNO_CODES.EBUSY);
        return -1;
      } else if (newObj.path && newObj.path.indexOf(oldObj.path) == 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else if (newObj.exists && newObj.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else {
        delete oldObj.parentObject.contents[oldObj.name];
        newObj.parentObject.contents[newObj.name] = oldObj.object;
        return 0;
      }
    }

  
  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = FS.analyzePath(Pointer_stringify(path));
      if (!path.parentExists || !path.exists) {
        ___setErrNo(path.error);
        return -1;
      } else if (path.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (!path.object.write) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else {
        delete path.parentObject.contents[path.name];
        return 0;
      }
    }
  
  function _rmdir(path) {
      // int rmdir(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rmdir.html
      path = FS.analyzePath(Pointer_stringify(path));
      if (!path.parentExists || !path.exists) {
        ___setErrNo(path.error);
        return -1;
      } else if (!path.object.write || path.isRoot) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (!path.object.isFolder) {
        ___setErrNo(ERRNO_CODES.ENOTDIR);
        return -1;
      } else {
        for (var i in path.object.contents) {
          ___setErrNo(ERRNO_CODES.ENOTEMPTY);
          return -1;
        }
        if (path.path == FS.currentPath) {
          ___setErrNo(ERRNO_CODES.EBUSY);
          return -1;
        } else {
          delete path.parentObject.contents[path.name];
          return 0;
        }
      }
    }function _remove(path) {
      // int remove(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/remove.html
      var ret = _unlink(path);
      if (ret == -1) ret = _rmdir(path);
      return ret;
    }

  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STACK);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'root';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/emscripten';
        ENV['LANG'] = 'en_US.UTF-8';
        ENV['_'] = './this.program';
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        for (var j = 0; j < line.length; j++) {
          HEAP8[(((poolPtr)+(j))|0)]=line.charCodeAt(j);
        }
        HEAP8[(((poolPtr)+(j))|0)]=0;
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
  
  
      exitRuntime();
      ABORT = true;
  
      throw 'exit(' + status + ') called, at ' + new Error().stack;
    }function _exit(status) {
      __exit(status);
    }

  function _system(command) {
      // int system(const char *command);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/system.html
      // Can't call external programs.
      ___setErrNo(ERRNO_CODES.EAGAIN);
      return -1;
    }

  function _difftime(time1, time0) {
      return time1 - time0;
    }

  
  var ___tm_current=allocate(4*26, "i8", ALLOC_STACK);
  
  
  var ___tm_timezones={};function _gmtime_r(time, tmPtr) {
      var date = new Date(HEAP32[((time)>>2)]*1000);
      var offsets = ___tm_struct_layout;
      HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)]=date.getUTCSeconds()
      HEAP32[(((tmPtr)+(offsets.tm_min))>>2)]=date.getUTCMinutes()
      HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)]=date.getUTCHours()
      HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)]=date.getUTCDate()
      HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)]=date.getUTCMonth()
      HEAP32[(((tmPtr)+(offsets.tm_year))>>2)]=date.getUTCFullYear()-1900
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=date.getUTCDay()
      HEAP32[(((tmPtr)+(offsets.tm_gmtoff))>>2)]=0
      HEAP32[(((tmPtr)+(offsets.tm_isdst))>>2)]=0
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.round((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
  
      var timezone = "GMT";
      if (!(timezone in ___tm_timezones)) {
        ___tm_timezones[timezone] = allocate(intArrayFromString(timezone), 'i8', ALLOC_NORMAL);
      }
      HEAP32[(((tmPtr)+(offsets.tm_zone))>>2)]=___tm_timezones[timezone]
  
      return tmPtr;
    }function _gmtime(time) {
      return _gmtime_r(time, ___tm_current);
    }

  
  function _localtime_r(time, tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)]=date.getSeconds()
      HEAP32[(((tmPtr)+(offsets.tm_min))>>2)]=date.getMinutes()
      HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)]=date.getHours()
      HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)]=date.getDate()
      HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)]=date.getMonth()
      HEAP32[(((tmPtr)+(offsets.tm_year))>>2)]=date.getFullYear()-1900
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=date.getDay()
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      HEAP32[(((tmPtr)+(offsets.tm_gmtoff))>>2)]=start.getTimezoneOffset() * 60
  
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      HEAP32[(((tmPtr)+(offsets.tm_isdst))>>2)]=dst
  
      var timezone = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | date.toString().match(/\(([A-Z]+)\)/)[1];
      if (!(timezone in ___tm_timezones)) {
        ___tm_timezones[timezone] = allocate(intArrayFromString(timezone), 'i8', ALLOC_NORMAL);
      }
      HEAP32[(((tmPtr)+(offsets.tm_zone))>>2)]=___tm_timezones[timezone]
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

  function _strftime(s, maxsize, format, timeptr) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      // TODO: Implement.
      return 0;
    }

  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return Math.floor((Date.now() - _clock.start) * (1000/1000));
    }

  function _tolower(chr) {
      if (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0)) {
        return chr - 'A'.charCodeAt(0) + 'a'.charCodeAt(0);
      } else {
        return chr;
      }
    }

  function _isalpha(chr) {
      return (chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0)) ||
             (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0));
    }

  function _iscntrl(chr) {
      return (0 <= chr && chr <= 0x1F) || chr === 0x7F;
    }

  
  function _isprint(chr) {
      return 0x1F < chr && chr < 0x7F;
    }var _isgraph=_isprint;

  function _islower(chr) {
      return chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0);
    }

  function _ispunct(chr) {
      return (chr >= '!'.charCodeAt(0) && chr <= '/'.charCodeAt(0)) ||
             (chr >= ':'.charCodeAt(0) && chr <= '@'.charCodeAt(0)) ||
             (chr >= '['.charCodeAt(0) && chr <= '`'.charCodeAt(0)) ||
             (chr >= '{'.charCodeAt(0) && chr <= '~'.charCodeAt(0));
    }


  function _isupper(chr) {
      return chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0);
    }

  function _isxdigit(chr) {
      return (chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0)) ||
             (chr >= 'a'.charCodeAt(0) && chr <= 'f'.charCodeAt(0)) ||
             (chr >= 'A'.charCodeAt(0) && chr <= 'F'.charCodeAt(0));
    }

  function _memchr(ptr, chr, num) {
      chr = unSign(chr);
      for (var i = 0; i < num; i++) {
        if (HEAP8[(ptr)] == chr) return ptr;
        ptr++;
      }
      return 0;
    }

  function _strcpy(pdest, psrc) {
      var i = 0;
      do {
        HEAP8[((pdest+i)|0)]=HEAP8[((psrc+i)|0)];
        i ++;
      } while (HEAP8[(((psrc)+(i-1))|0)] != 0);
      return pdest;
    }
var _llvm_expect_i32; // stub for _llvm_expect_i32

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
  
      // We need to make sure no one else allocates unfreeable memory!
      // We must control this entirely. So we don't even need to do
      // unfreeable allocations - the HEAP is ours, from STATICTOP up.
      // TODO: We could in theory slice off the top of the HEAP when
      //       sbrk gets a negative increment in |bytes|...
      var self = _sbrk;
      if (!self.called) {
        STATICTOP = alignMemoryPage(STATICTOP); // make sure we start out aligned
        self.called = true;
        _sbrk.DYNAMIC_START = STATICTOP;
      }
      var ret = STATICTOP;
      if (bytes != 0) Runtime.staticAlloc(bytes);
      return ret;  // Previous break location.
    }


  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if (num|0 >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
    }



  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],ensureObjects:function () {
        if (Browser.ensured) return;
        Browser.ensured = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        function getMimetype(name) {
          return {
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
          }[name.substr(-3)];
          return ret;
        }
  
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/.exec(name);
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            setTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
      },createContext:function (canvas, useWebGL, setInModule) {
        var ctx;
        try {
          if (useWebGL) {
            ctx = canvas.getContext('experimental-webgl', {
              alpha: false,
            });
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},requestFullScreen:function () {
        var canvas = Module['canvas'];
        function fullScreenChange() {
          var isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                        canvas['mozRequestPointerLock'] ||
                                        canvas['webkitRequestPointerLock'];
            canvas.requestPointerLock();
            isFullScreen = true;
          }
          if (Module['onFullScreen']) Module['onFullScreen'](isFullScreen);
        }
  
        document.addEventListener('fullscreenchange', fullScreenChange, false);
        document.addEventListener('mozfullscreenchange', fullScreenChange, false);
        document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
  
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen(); 
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200) {
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      }};
___setErrNo(0);
__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
___buildEnvironment(ENV);
Module["requestFullScreen"] = function() { Browser.requestFullScreen() };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
  


var FUNCTION_TABLE = [0,0,_f_seek,0,_luaB_pairs,0,_searcher_Croot,0,_luaB_type,0,_f_tostring,0,_io_write,0,_gctm,0,_b_or,0,_db_getmetatable,0,_dothecall,0,_math_atan,0,_b_and,0,_pcallcont,0,_luaB_next,0,_searcher_Lua,0,_pack,0,_math_sinh,0,_math_abs,0,_db_gethook,0,_math_acos,0,_db_upvalueid,0,_luaopen_io,0,_f_lines,0,_os_clock,0,_db_getlocal,0,_f_write,0,_luaopen_math,0,_str_reverse,0,_str_char,0,_os_time,0,_db_setupvalue,0,_f_call,0,_io_tmpfile,0,_os_remove,0,_str_find,0,_os_date,0,_math_deg,0,_luaB_auxwrap,0,_writer,0,_str_match,0,_ll_loadlib,0,_math_rad,0,_luaopen_string,0,_luaB_assert,0,_f_luaopen,0,_luaB_tostring,0,_math_floor,0,_panic,0,_math_exp,0,_tinsert,0,_str_upper,0,_io_lines,0,_str_dump,0,_db_getinfo,0,_db_setmetatable,0,_b_xor,0,_b_replace,0,_searcher_preload,0,_math_modf,0,_f_parser,0,_gmatch,0,_luaopen_os,0,_unpack,0,_math_asin,0,_str_rep,0,_os_tmpname,0,_db_getupvalue,0,_db_upvaluejoin,0,_luaB_tonumber,0,_luaB_cocreate,0,_str_format,0,_ll_require,0,_hookf,0,_io_close,0,_str_gsub,0,_resume,0,_math_random,0,_luaB_xpcall,0,_f_read,0,_luaB_cowrap,0,_luaB_corunning,0,_math_atan2,0,_io_readline,0,_luaopen_package,0,_math_pow,0,_io_noclose,0,_b_rshift,0,_b_extract,0,_ipairsaux,0,_math_tan,0,_gmatch_aux,0,_io_popen,0,_luaopen_debug,0,_math_frexp,0,_math_ceil,0,_l_alloc,0,_dofilecont,0,_luaB_pcall,0,_math_cos,0,_math_tanh,0,_io_output,0,_b_lrot,0,_luaB_rawlen,0,_luaB_yield,0,_db_sethook,0,_os_difftime,0,_tremove,0,_ll_searchpath,0,_str_lower,0,_math_min,0,_lua_newstate,0,_luaB_dofile,0,_str_len,0,_math_max,0,_str_byte,0,_os_setlocale,0,_math_randomseed,0,_unroll,0,_luaB_rawequal,0,_f_flush,0,_luaB_getmetatable,0,_math_fmod,0,_io_read,0,_math_ldexp,0,_luaB_loadfile,0,_os_getenv,0,_luaB_print,0,_io_open,0,_math_log,0,_luaB_error,0,_luaB_costatus,0,_str_sub,0,_db_setlocal,0,_luaB_coresume,0,_growstack,0,_db_debug,0,_luaB_setmetatable,0,_os_rename,0,_tconcat,0,_luaB_ipairs,0,_luaopen_base,0,_io_fclose,0,_io_type,0,_math_sin,0,_luaopen_bit32,0,_b_lshift,0,_db_setuservalue,0,_os_exit,0,_luaB_select,0,_io_input,0,_db_getregistry,0,_b_test,0,_luaB_rawset,0,_b_rrot,0,_luaB_collectgarbage,0,_searcher_C,0,_luaopen_table,0,_luaB_load,0,_luaopen_coroutine,0,_io_pclose,0,_b_not,0,_math_sqrt,0,_math_cosh,0,_luaB_rawget,0,_os_execute,0,_f_gc,0,_sort,0,_b_arshift,0,_getS,0,_db_traceback,0,_io_flush,0,_db_getuservalue,0,_f_setvbuf,0,_getF,0,_generic_reader,0];

function _lua_atpanic($L, $panicf) {
  var label = 0;


  var $L_addr;
  var $panicf_addr;
  var $old;
  $L_addr=$L;
  $panicf_addr=$panicf;
  var $0=$L_addr;
  var $l_G=(($0+12)|0);
  var $1=HEAP32[(($l_G)>>2)];
  var $panic=(($1+148)|0);
  var $2=HEAP32[(($panic)>>2)];
  $old=$2;
  var $3=$panicf_addr;
  var $4=$L_addr;
  var $l_G1=(($4+12)|0);
  var $5=HEAP32[(($l_G1)>>2)];
  var $panic2=(($5+148)|0);
  HEAP32[(($panic2)>>2)]=$3;
  var $6=$old;

  return $6;
}


function _lua_version($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      $L_addr=$L;
      var $0=$L_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=5243788;
      label = 5; break;
    case 4: 
      var $1=$L_addr;
      var $l_G=(($1+12)|0);
      var $2=HEAP32[(($l_G)>>2)];
      var $version=(($2+156)|0);
      var $3=HEAP32[(($version)>>2)];
      $retval=$3;
      label = 5; break;
    case 5: 
      var $4=$retval;

      return $4;
  }

}


function _lua_absindex($L, $idx) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $idx_addr;
      $L_addr=$L;
      $idx_addr=$idx;
      var $0=$idx_addr;
      var $cmp=(($0)|0) > 0;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $1=$idx_addr;
      var $cmp1=(($1)|0) <= -1001000;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $2=$idx_addr;
      var $cond = $2;label = 6; break;
    case 5: 
      var $3=$L_addr;
      var $top=(($3+8)|0);
      var $4=HEAP32[(($top)>>2)];
      var $5=$L_addr;
      var $ci=(($5+16)|0);
      var $6=HEAP32[(($ci)>>2)];
      var $func=(($6)|0);
      var $7=HEAP32[(($func)>>2)];
      var $sub_ptr_lhs_cast=$4;
      var $sub_ptr_rhs_cast=$7;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(12))&-1);
      var $8=$idx_addr;
      var $add=((($sub_ptr_div)+($8))|0);
      var $cond = $add;label = 6; break;
    case 6: 
      var $cond;

      return $cond;
  }

}


function _lua_gettop($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $top=(($0+8)|0);
  var $1=HEAP32[(($top)>>2)];
  var $2=$L_addr;
  var $ci=(($2+16)|0);
  var $3=HEAP32[(($ci)>>2)];
  var $func=(($3)|0);
  var $4=HEAP32[(($func)>>2)];
  var $add_ptr=(($4+12)|0);
  var $sub_ptr_lhs_cast=$1;
  var $sub_ptr_rhs_cast=$add_ptr;
  var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
  var $sub_ptr_div=((((($sub_ptr_sub)|0))/(12))&-1);

  return $sub_ptr_div;
}
Module["_lua_gettop"] = _lua_gettop;

function _lua_settop($L, $idx) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $idx_addr;
      var $func;
      $L_addr=$L;
      $idx_addr=$idx;
      var $0=$L_addr;
      var $ci=(($0+16)|0);
      var $1=HEAP32[(($ci)>>2)];
      var $func1=(($1)|0);
      var $2=HEAP32[(($func1)>>2)];
      $func=$2;
      var $3=$idx_addr;
      var $cmp=(($3)|0) >= 0;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      label = 4; break;
    case 4: 
      var $4=$L_addr;
      var $top=(($4+8)|0);
      var $5=HEAP32[(($top)>>2)];
      var $6=$func;
      var $add_ptr=(($6+12)|0);
      var $7=$idx_addr;
      var $add_ptr2=(($add_ptr+((($7)*(12))&-1))|0);
      var $cmp3=(($5)>>>0) < (($add_ptr2)>>>0);
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=$L_addr;
      var $top4=(($8+8)|0);
      var $9=HEAP32[(($top4)>>2)];
      var $incdec_ptr=(($9+12)|0);
      HEAP32[(($top4)>>2)]=$incdec_ptr;
      var $tt_=(($9+8)|0);
      HEAP32[(($tt_)>>2)]=0;
      label = 4; break;
    case 6: 
      var $10=$func;
      var $add_ptr5=(($10+12)|0);
      var $11=$idx_addr;
      var $add_ptr6=(($add_ptr5+((($11)*(12))&-1))|0);
      var $12=$L_addr;
      var $top7=(($12+8)|0);
      HEAP32[(($top7)>>2)]=$add_ptr6;
      label = 8; break;
    case 7: 
      var $13=$idx_addr;
      var $add=((($13)+(1))|0);
      var $14=$L_addr;
      var $top8=(($14+8)|0);
      var $15=HEAP32[(($top8)>>2)];
      var $add_ptr9=(($15+((($add)*(12))&-1))|0);
      HEAP32[(($top8)>>2)]=$add_ptr9;
      label = 8; break;
    case 8: 

      return;
  }

}
Module["_lua_settop"] = _lua_settop;

function _index2addr($L, $idx) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $idx_addr;
      var $ci;
      var $o;
      var $func17;
      $L_addr=$L;
      $idx_addr=$idx;
      var $0=$L_addr;
      var $ci1=(($0+16)|0);
      var $1=HEAP32[(($ci1)>>2)];
      $ci=$1;
      var $2=$idx_addr;
      var $cmp=(($2)|0) > 0;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $3=$ci;
      var $func=(($3)|0);
      var $4=HEAP32[(($func)>>2)];
      var $5=$idx_addr;
      var $add_ptr=(($4+((($5)*(12))&-1))|0);
      $o=$add_ptr;
      var $6=$o;
      var $7=$L_addr;
      var $top=(($7+8)|0);
      var $8=HEAP32[(($top)>>2)];
      var $cmp2=(($6)>>>0) >= (($8)>>>0);
      if ($cmp2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $retval=5244092;
      label = 16; break;
    case 5: 
      var $9=$o;
      $retval=$9;
      label = 16; break;
    case 6: 
      var $10=$idx_addr;
      var $cmp5=(($10)|0) > -1001000;
      if ($cmp5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $11=$L_addr;
      var $top7=(($11+8)|0);
      var $12=HEAP32[(($top7)>>2)];
      var $13=$idx_addr;
      var $add_ptr8=(($12+((($13)*(12))&-1))|0);
      $retval=$add_ptr8;
      label = 16; break;
    case 8: 
      var $14=$idx_addr;
      var $cmp10=(($14)|0)==-1001000;
      if ($cmp10) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $15=$L_addr;
      var $l_G=(($15+12)|0);
      var $16=HEAP32[(($l_G)>>2)];
      var $l_registry=(($16+36)|0);
      $retval=$l_registry;
      label = 16; break;
    case 10: 
      var $17=$idx_addr;
      var $sub=(((-1001000)-($17))|0);
      $idx_addr=$sub;
      var $18=$ci;
      var $func13=(($18)|0);
      var $19=HEAP32[(($func13)>>2)];
      var $tt_=(($19+8)|0);
      var $20=HEAP32[(($tt_)>>2)];
      var $cmp14=(($20)|0)==22;
      if ($cmp14) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $retval=5244092;
      label = 16; break;
    case 12: 
      var $21=$ci;
      var $func18=(($21)|0);
      var $22=HEAP32[(($func18)>>2)];
      var $value_=(($22)|0);
      var $gc=$value_;
      var $23=HEAP32[(($gc)>>2)];
      var $cl=$23;
      var $c=$cl;
      $func17=$c;
      var $24=$idx_addr;
      var $25=$func17;
      var $nupvalues=(($25+6)|0);
      var $26=HEAP8[($nupvalues)];
      var $conv=(($26)&255);
      var $cmp19=(($24)|0) <= (($conv)|0);
      if ($cmp19) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $27=$idx_addr;
      var $sub21=((($27)-(1))|0);
      var $28=$func17;
      var $upvalue=(($28+16)|0);
      var $arrayidx=(($upvalue+((($sub21)*(12))&-1))|0);
      var $cond = $arrayidx;label = 15; break;
    case 14: 
      var $cond = 5244092;label = 15; break;
    case 15: 
      var $cond;
      $retval=$cond;
      label = 16; break;
    case 16: 
      var $29=$retval;

      return $29;
  }

}
_index2addr["X"]=1;

function _lua_typename($L, $t) {
  var label = 0;


  var $L_addr;
  var $t_addr;
  $L_addr=$L;
  $t_addr=$t;
  var $0=$L_addr;
  var $1=$t_addr;
  var $add=((($1)+(1))|0);
  var $arrayidx=((5243936+($add<<2))|0);
  var $2=HEAP32[(($arrayidx)>>2)];

  return $2;
}
Module["_lua_typename"] = _lua_typename;

function _lua_checkstack($L, $size) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $size_addr=__stackBase__;
      var $res;
      var $ci;
      var $inuse;
      $L_addr=$L;
      HEAP32[(($size_addr)>>2)]=$size;
      var $0=$L_addr;
      var $ci1=(($0+16)|0);
      var $1=HEAP32[(($ci1)>>2)];
      $ci=$1;
      var $2=$L_addr;
      var $stack_last=(($2+24)|0);
      var $3=HEAP32[(($stack_last)>>2)];
      var $4=$L_addr;
      var $top=(($4+8)|0);
      var $5=HEAP32[(($top)>>2)];
      var $sub_ptr_lhs_cast=$3;
      var $sub_ptr_rhs_cast=$5;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(12))&-1);
      var $6=HEAP32[(($size_addr)>>2)];
      var $cmp=(($sub_ptr_div)|0) > (($6)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $res=1;
      label = 8; break;
    case 4: 
      var $7=$L_addr;
      var $top2=(($7+8)|0);
      var $8=HEAP32[(($top2)>>2)];
      var $9=$L_addr;
      var $stack=(($9+28)|0);
      var $10=HEAP32[(($stack)>>2)];
      var $sub_ptr_lhs_cast3=$8;
      var $sub_ptr_rhs_cast4=$10;
      var $sub_ptr_sub5=((($sub_ptr_lhs_cast3)-($sub_ptr_rhs_cast4))|0);
      var $sub_ptr_div6=((((($sub_ptr_sub5)|0))/(12))&-1);
      var $add=((($sub_ptr_div6)+(5))|0);
      $inuse=$add;
      var $11=$inuse;
      var $12=HEAP32[(($size_addr)>>2)];
      var $sub=(((1000000)-($12))|0);
      var $cmp7=(($11)|0) > (($sub)|0);
      if ($cmp7) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $res=0;
      label = 7; break;
    case 6: 
      var $13=$L_addr;
      var $14=$size_addr;
      var $call=_luaD_rawrunprotected($13, 270, $14);
      var $cmp10=(($call)|0)==0;
      var $conv=(($cmp10)&1);
      $res=$conv;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $15=$res;
      var $tobool=(($15)|0)!=0;
      if ($tobool) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $16=$ci;
      var $top12=(($16+4)|0);
      var $17=HEAP32[(($top12)>>2)];
      var $18=$L_addr;
      var $top13=(($18+8)|0);
      var $19=HEAP32[(($top13)>>2)];
      var $20=HEAP32[(($size_addr)>>2)];
      var $add_ptr=(($19+((($20)*(12))&-1))|0);
      var $cmp14=(($17)>>>0) < (($add_ptr)>>>0);
      if ($cmp14) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $21=$L_addr;
      var $top17=(($21+8)|0);
      var $22=HEAP32[(($top17)>>2)];
      var $23=HEAP32[(($size_addr)>>2)];
      var $add_ptr18=(($22+((($23)*(12))&-1))|0);
      var $24=$ci;
      var $top19=(($24+4)|0);
      HEAP32[(($top19)>>2)]=$add_ptr18;
      label = 11; break;
    case 11: 
      var $25=$res;
      STACKTOP = __stackBase__;
      return $25;
  }

}
_lua_checkstack["X"]=1;

function _growstack($L, $ud) {
  var label = 0;


  var $L_addr;
  var $ud_addr;
  var $size;
  $L_addr=$L;
  $ud_addr=$ud;
  var $0=$ud_addr;
  var $1=$0;
  var $2=HEAP32[(($1)>>2)];
  $size=$2;
  var $3=$L_addr;
  var $4=$size;
  _luaD_growstack($3, $4);

  return;
}


function _lua_xmove($from, $to, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $from_addr;
      var $to_addr;
      var $n_addr;
      var $i;
      var $io2;
      var $io1;
      $from_addr=$from;
      $to_addr=$to;
      $n_addr=$n;
      var $0=$from_addr;
      var $1=$to_addr;
      var $cmp=(($0)|0)==(($1)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 8; break;
    case 4: 
      var $2=$n_addr;
      var $3=$from_addr;
      var $top=(($3+8)|0);
      var $4=HEAP32[(($top)>>2)];
      var $idx_neg=(((-$2))|0);
      var $add_ptr=(($4+((($idx_neg)*(12))&-1))|0);
      HEAP32[(($top)>>2)]=$add_ptr;
      $i=0;
      label = 5; break;
    case 5: 
      var $5=$i;
      var $6=$n_addr;
      var $cmp1=(($5)|0) < (($6)|0);
      if ($cmp1) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $7=$from_addr;
      var $top2=(($7+8)|0);
      var $8=HEAP32[(($top2)>>2)];
      var $9=$i;
      var $add_ptr3=(($8+((($9)*(12))&-1))|0);
      $io2=$add_ptr3;
      var $10=$to_addr;
      var $top4=(($10+8)|0);
      var $11=HEAP32[(($top4)>>2)];
      var $incdec_ptr=(($11+12)|0);
      HEAP32[(($top4)>>2)]=$incdec_ptr;
      $io1=$11;
      var $12=$io1;
      var $value_=(($12)|0);
      var $13=$io2;
      var $value_5=(($13)|0);
      var $14=$value_;
      var $15=$value_5;
      HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];
      var $16=$io2;
      var $tt_=(($16+8)|0);
      var $17=HEAP32[(($tt_)>>2)];
      var $18=$io1;
      var $tt_6=(($18+8)|0);
      HEAP32[(($tt_6)>>2)]=$17;
      label = 7; break;
    case 7: 
      var $19=$i;
      var $inc=((($19)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 

      return;
  }

}
_lua_xmove["X"]=1;

function _lua_remove($L, $idx) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $idx_addr;
      var $p;
      var $io2;
      var $io1;
      $L_addr=$L;
      $idx_addr=$idx;
      var $0=$L_addr;
      var $1=$idx_addr;
      var $call=_index2addr($0, $1);
      $p=$call;
      label = 3; break;
    case 3: 
      var $2=$p;
      var $incdec_ptr=(($2+12)|0);
      $p=$incdec_ptr;
      var $3=$L_addr;
      var $top=(($3+8)|0);
      var $4=HEAP32[(($top)>>2)];
      var $cmp=(($incdec_ptr)>>>0) < (($4)>>>0);
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $5=$p;
      $io2=$5;
      var $6=$p;
      var $add_ptr=((($6)-(12))|0);
      $io1=$add_ptr;
      var $7=$io1;
      var $value_=(($7)|0);
      var $8=$io2;
      var $value_1=(($8)|0);
      var $9=$value_;
      var $10=$value_1;
      HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];
      var $11=$io2;
      var $tt_=(($11+8)|0);
      var $12=HEAP32[(($tt_)>>2)];
      var $13=$io1;
      var $tt_2=(($13+8)|0);
      HEAP32[(($tt_2)>>2)]=$12;
      label = 3; break;
    case 5: 
      var $14=$L_addr;
      var $top3=(($14+8)|0);
      var $15=HEAP32[(($top3)>>2)];
      var $incdec_ptr4=((($15)-(12))|0);
      HEAP32[(($top3)>>2)]=$incdec_ptr4;

      return;
  }

}


function _lua_insert($L, $idx) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $idx_addr;
      var $p;
      var $q;
      var $io2;
      var $io1;
      var $io23;
      var $io15;
      $L_addr=$L;
      $idx_addr=$idx;
      var $0=$L_addr;
      var $1=$idx_addr;
      var $call=_index2addr($0, $1);
      $p=$call;
      var $2=$L_addr;
      var $top=(($2+8)|0);
      var $3=HEAP32[(($top)>>2)];
      $q=$3;
      label = 3; break;
    case 3: 
      var $4=$q;
      var $5=$p;
      var $cmp=(($4)>>>0) > (($5)>>>0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $6=$q;
      var $add_ptr=((($6)-(12))|0);
      $io2=$add_ptr;
      var $7=$q;
      $io1=$7;
      var $8=$io1;
      var $value_=(($8)|0);
      var $9=$io2;
      var $value_1=(($9)|0);
      var $10=$value_;
      var $11=$value_1;
      HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];
      var $12=$io2;
      var $tt_=(($12+8)|0);
      var $13=HEAP32[(($tt_)>>2)];
      var $14=$io1;
      var $tt_2=(($14+8)|0);
      HEAP32[(($tt_2)>>2)]=$13;
      label = 5; break;
    case 5: 
      var $15=$q;
      var $incdec_ptr=((($15)-(12))|0);
      $q=$incdec_ptr;
      label = 3; break;
    case 6: 
      var $16=$L_addr;
      var $top4=(($16+8)|0);
      var $17=HEAP32[(($top4)>>2)];
      $io23=$17;
      var $18=$p;
      $io15=$18;
      var $19=$io15;
      var $value_6=(($19)|0);
      var $20=$io23;
      var $value_7=(($20)|0);
      var $21=$value_6;
      var $22=$value_7;
      HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];
      var $23=$io23;
      var $tt_8=(($23+8)|0);
      var $24=HEAP32[(($tt_8)>>2)];
      var $25=$io15;
      var $tt_9=(($25+8)|0);
      HEAP32[(($tt_9)>>2)]=$24;

      return;
  }

}
_lua_insert["X"]=1;

function _lua_replace($L, $idx) {
  var label = 0;


  var $L_addr;
  var $idx_addr;
  $L_addr=$L;
  $idx_addr=$idx;
  var $0=$L_addr;
  var $1=$L_addr;
  var $top=(($1+8)|0);
  var $2=HEAP32[(($top)>>2)];
  var $add_ptr=((($2)-(12))|0);
  var $3=$idx_addr;
  _moveto($0, $add_ptr, $3);
  var $4=$L_addr;
  var $top1=(($4+8)|0);
  var $5=HEAP32[(($top1)>>2)];
  var $incdec_ptr=((($5)-(12))|0);
  HEAP32[(($top1)>>2)]=$incdec_ptr;

  return;
}


function _moveto($L, $fr, $idx) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $fr_addr;
      var $idx_addr;
      var $to;
      var $io2;
      var $io1;
      $L_addr=$L;
      $fr_addr=$fr;
      $idx_addr=$idx;
      var $0=$L_addr;
      var $1=$idx_addr;
      var $call=_index2addr($0, $1);
      $to=$call;
      var $2=$fr_addr;
      $io2=$2;
      var $3=$to;
      $io1=$3;
      var $4=$io1;
      var $value_=(($4)|0);
      var $5=$io2;
      var $value_1=(($5)|0);
      var $6=$value_;
      var $7=$value_1;
      HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
      var $8=$io2;
      var $tt_=(($8+8)|0);
      var $9=HEAP32[(($tt_)>>2)];
      var $10=$io1;
      var $tt_2=(($10+8)|0);
      HEAP32[(($tt_2)>>2)]=$9;
      var $11=$idx_addr;
      var $cmp=(($11)|0) < -1001000;
      if ($cmp) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $12=$fr_addr;
      var $tt_3=(($12+8)|0);
      var $13=HEAP32[(($tt_3)>>2)];
      var $and=$13 & 64;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $14=$fr_addr;
      var $value_4=(($14)|0);
      var $gc=$value_4;
      var $15=HEAP32[(($gc)>>2)];
      var $gch=$15;
      var $marked=(($gch+5)|0);
      var $16=HEAP8[($marked)];
      var $conv=(($16)&255);
      var $and5=$conv & 3;
      var $tobool6=(($and5)|0)!=0;
      if ($tobool6) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $17=$L_addr;
      var $ci=(($17+16)|0);
      var $18=HEAP32[(($ci)>>2)];
      var $func=(($18)|0);
      var $19=HEAP32[(($func)>>2)];
      var $value_8=(($19)|0);
      var $gc9=$value_8;
      var $20=HEAP32[(($gc9)>>2)];
      var $cl=$20;
      var $c=$cl;
      var $21=$c;
      var $gch10=$21;
      var $marked11=(($gch10+5)|0);
      var $22=HEAP8[($marked11)];
      var $conv12=(($22)&255);
      var $and13=$conv12 & 4;
      var $tobool14=(($and13)|0)!=0;
      if ($tobool14) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $23=$L_addr;
      var $24=$L_addr;
      var $ci16=(($24+16)|0);
      var $25=HEAP32[(($ci16)>>2)];
      var $func17=(($25)|0);
      var $26=HEAP32[(($func17)>>2)];
      var $value_18=(($26)|0);
      var $gc19=$value_18;
      var $27=HEAP32[(($gc19)>>2)];
      var $cl20=$27;
      var $c21=$cl20;
      var $28=$c21;
      var $29=$fr_addr;
      var $value_22=(($29)|0);
      var $gc23=$value_22;
      var $30=HEAP32[(($gc23)>>2)];
      _luaC_barrier_($23, $28, $30);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 

      return;
  }

}
_moveto["X"]=1;

function _lua_copy($L, $fromidx, $toidx) {
  var label = 0;


  var $L_addr;
  var $fromidx_addr;
  var $toidx_addr;
  var $fr;
  $L_addr=$L;
  $fromidx_addr=$fromidx;
  $toidx_addr=$toidx;
  var $0=$L_addr;
  var $1=$fromidx_addr;
  var $call=_index2addr($0, $1);
  $fr=$call;
  var $2=$L_addr;
  var $3=$fr;
  var $4=$toidx_addr;
  _moveto($2, $3, $4);

  return;
}


function _lua_pushvalue($L, $idx) {
  var label = 0;


  var $L_addr;
  var $idx_addr;
  var $io2;
  var $io1;
  $L_addr=$L;
  $idx_addr=$idx;
  var $0=$L_addr;
  var $1=$idx_addr;
  var $call=_index2addr($0, $1);
  $io2=$call;
  var $2=$L_addr;
  var $top=(($2+8)|0);
  var $3=HEAP32[(($top)>>2)];
  $io1=$3;
  var $4=$io1;
  var $value_=(($4)|0);
  var $5=$io2;
  var $value_1=(($5)|0);
  var $6=$value_;
  var $7=$value_1;
  HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  var $8=$io2;
  var $tt_=(($8+8)|0);
  var $9=HEAP32[(($tt_)>>2)];
  var $10=$io1;
  var $tt_2=(($10+8)|0);
  HEAP32[(($tt_2)>>2)]=$9;
  var $11=$L_addr;
  var $top3=(($11+8)|0);
  var $12=HEAP32[(($top3)>>2)];
  var $incdec_ptr=(($12+12)|0);
  HEAP32[(($top3)>>2)]=$incdec_ptr;

  return;
}
Module["_lua_pushvalue"] = _lua_pushvalue;

function _lua_type($L, $idx) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $idx_addr;
      var $o;
      $L_addr=$L;
      $idx_addr=$idx;
      var $0=$L_addr;
      var $1=$idx_addr;
      var $call=_index2addr($0, $1);
      $o=$call;
      var $2=$o;
      var $cmp=(($2)|0)!=5244092;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$o;
      var $tt_=(($3+8)|0);
      var $4=HEAP32[(($tt_)>>2)];
      var $and=$4 & 15;
      var $cond = $and;label = 5; break;
    case 4: 
      var $cond = -1;label = 5; break;
    case 5: 
      var $cond;

      return $cond;
  }

}
Module["_lua_type"] = _lua_type;

function _lua_iscfunction($L, $idx) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $idx_addr;
      var $o;
      $L_addr=$L;
      $idx_addr=$idx;
      var $0=$L_addr;
      var $1=$idx_addr;
      var $call=_index2addr($0, $1);
      $o=$call;
      var $2=$o;
      var $tt_=(($2+8)|0);
      var $3=HEAP32[(($tt_)>>2)];
      var $cmp=(($3)|0)==22;
      if ($cmp) { var $6 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $4=$o;
      var $tt_1=(($4+8)|0);
      var $5=HEAP32[(($tt_1)>>2)];
      var $cmp2=(($5)|0)==102;
      var $6 = $cmp2;label = 4; break;
    case 4: 
      var $6;
      var $lor_ext=(($6)&1);

      return $lor_ext;
  }

}
Module["_lua_iscfunction"] = _lua_iscfunction;

function _lua_isnumber($L, $idx) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; _memset(__stackBase__, 0, 12);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $idx_addr;
      var $n=__stackBase__;
      var $o;
      $L_addr=$L;
      $idx_addr=$idx;
      var $0=$L_addr;
      var $1=$idx_addr;
      var $call=_index2addr($0, $1);
      $o=$call;
      var $2=$o;
      var $tt_=(($2+8)|0);
      var $3=HEAP32[(($tt_)>>2)];
      var $cmp=(($3)|0)==3;
      if ($cmp) { var $5 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $4=$o;
      var $call1=_luaV_tonumber($4, $n);
      $o=$call1;
      var $cmp2=(($call1)|0)!=0;
      var $5 = $cmp2;label = 4; break;
    case 4: 
      var $5;
      var $lor_ext=(($5)&1);
      STACKTOP = __stackBase__;
      return $lor_ext;
  }

}


function _lua_isstring($L, $idx) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $idx_addr;
      var $t;
      $L_addr=$L;
      $idx_addr=$idx;
      var $0=$L_addr;
      var $1=$idx_addr;
      var $call=_lua_type($0, $1);
      $t=$call;
      var $2=$t;
      var $cmp=(($2)|0)==4;
      if ($cmp) { var $4 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $3=$t;
      var $cmp1=(($3)|0)==3;
      var $4 = $cmp1;label = 4; break;
    case 4: 
      var $4;
      var $lor_ext=(($4)&1);

      return $lor_ext;
  }

}


function _lua_rawequal($L, $index1, $index2) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $index1_addr;
      var $index2_addr;
      var $o1;
      var $o2;
      $L_addr=$L;
      $index1_addr=$index1;
      $index2_addr=$index2;
      var $0=$L_addr;
      var $1=$index1_addr;
      var $call=_index2addr($0, $1);
      $o1=$call;
      var $2=$L_addr;
      var $3=$index2_addr;
      var $call1=_index2addr($2, $3);
      $o2=$call1;
      var $4=$o1;
      var $cmp=(($4)|0)!=5244092;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $5=$o2;
      var $cmp2=(($5)|0)!=5244092;
      if ($cmp2) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $6=$o1;
      var $tt_=(($6+8)|0);
      var $7=HEAP32[(($tt_)>>2)];
      var $8=$o2;
      var $tt_3=(($8+8)|0);
      var $9=HEAP32[(($tt_3)>>2)];
      var $cmp4=(($7)|0)==(($9)|0);
      if ($cmp4) { label = 5; break; } else { var $12 = 0;label = 6; break; }
    case 5: 
      var $10=$o1;
      var $11=$o2;
      var $call5=_luaV_equalobj_(0, $10, $11);
      var $tobool=(($call5)|0)!=0;
      var $12 = $tobool;label = 6; break;
    case 6: 
      var $12;
      var $land_ext=(($12)&1);
      var $cond = $land_ext;label = 8; break;
    case 7: 
      var $cond = 0;label = 8; break;
    case 8: 
      var $cond;

      return $cond;
  }

}


function _lua_pushnil($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $top=(($0+8)|0);
  var $1=HEAP32[(($top)>>2)];
  var $tt_=(($1+8)|0);
  HEAP32[(($tt_)>>2)]=0;
  var $2=$L_addr;
  var $top1=(($2+8)|0);
  var $3=HEAP32[(($top1)>>2)];
  var $incdec_ptr=(($3+12)|0);
  HEAP32[(($top1)>>2)]=$incdec_ptr;

  return;
}
Module["_lua_pushnil"] = _lua_pushnil;

function _lua_pushnumber($L, $n) {
  var label = 0;


  var $L_addr;
  var $n_addr;
  var $io;
  $L_addr=$L;
  $n_addr=$n;
  var $0=$L_addr;
  var $top=(($0+8)|0);
  var $1=HEAP32[(($top)>>2)];
  $io=$1;
  var $2=$n_addr;
  var $3=$io;
  var $value_=(($3)|0);
  var $n1=$value_;
  (HEAPF64[(tempDoublePtr)>>3]=$2,HEAP32[(($n1)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n1)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $4=$io;
  var $tt_=(($4+8)|0);
  HEAP32[(($tt_)>>2)]=3;
  var $5=$L_addr;
  var $top2=(($5+8)|0);
  var $6=HEAP32[(($top2)>>2)];
  var $incdec_ptr=(($6+12)|0);
  HEAP32[(($top2)>>2)]=$incdec_ptr;

  return;
}
Module["_lua_pushnumber"] = _lua_pushnumber;

function _lua_pushinteger($L, $n) {
  var label = 0;


  var $L_addr;
  var $n_addr;
  var $io;
  $L_addr=$L;
  $n_addr=$n;
  var $0=$L_addr;
  var $top=(($0+8)|0);
  var $1=HEAP32[(($top)>>2)];
  $io=$1;
  var $2=$n_addr;
  var $conv=(($2)|0);
  var $3=$io;
  var $value_=(($3)|0);
  var $n1=$value_;
  (HEAPF64[(tempDoublePtr)>>3]=$conv,HEAP32[(($n1)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n1)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $4=$io;
  var $tt_=(($4+8)|0);
  HEAP32[(($tt_)>>2)]=3;
  var $5=$L_addr;
  var $top2=(($5+8)|0);
  var $6=HEAP32[(($top2)>>2)];
  var $incdec_ptr=(($6+12)|0);
  HEAP32[(($top2)>>2)]=$incdec_ptr;

  return;
}


function _lua_pushunsigned($L, $u) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $u_addr;
      var $n;
      var $io;
      $L_addr=$L;
      $u_addr=$u;
      var $0=$u_addr;
      var $cmp=(($0)>>>0) <= 2147483647;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$u_addr;
      var $conv=(($1)|0);
      var $cond = $conv;label = 5; break;
    case 4: 
      var $2=$u_addr;
      var $conv1=(($2)>>>0);
      var $cond = $conv1;label = 5; break;
    case 5: 
      var $cond;
      $n=$cond;
      var $3=$L_addr;
      var $top=(($3+8)|0);
      var $4=HEAP32[(($top)>>2)];
      $io=$4;
      var $5=$n;
      var $6=$io;
      var $value_=(($6)|0);
      var $n2=$value_;
      (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($n2)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n2)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $7=$io;
      var $tt_=(($7+8)|0);
      HEAP32[(($tt_)>>2)]=3;
      var $8=$L_addr;
      var $top3=(($8+8)|0);
      var $9=HEAP32[(($top3)>>2)];
      var $incdec_ptr=(($9+12)|0);
      HEAP32[(($top3)>>2)]=$incdec_ptr;

      return;
  }

}


function _lua_compare($L, $index1, $index2, $op) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $index1_addr;
      var $index2_addr;
      var $op_addr;
      var $o1;
      var $o2;
      var $i;
      $L_addr=$L;
      $index1_addr=$index1;
      $index2_addr=$index2;
      $op_addr=$op;
      $i=0;
      var $0=$L_addr;
      var $1=$index1_addr;
      var $call=_index2addr($0, $1);
      $o1=$call;
      var $2=$L_addr;
      var $3=$index2_addr;
      var $call1=_index2addr($2, $3);
      $o2=$call1;
      var $4=$o1;
      var $cmp=(($4)|0)!=5244092;
      if ($cmp) { label = 3; break; } else { label = 12; break; }
    case 3: 
      var $5=$o2;
      var $cmp2=(($5)|0)!=5244092;
      if ($cmp2) { label = 4; break; } else { label = 12; break; }
    case 4: 
      var $6=$op_addr;
      if ((($6)|0)==0) {
        label = 5; break;
      }
      else if ((($6)|0)==1) {
        label = 8; break;
      }
      else if ((($6)|0)==2) {
        label = 9; break;
      }
      else {
      label = 10; break;
      }
      
    case 5: 
      var $7=$o1;
      var $tt_=(($7+8)|0);
      var $8=HEAP32[(($tt_)>>2)];
      var $9=$o2;
      var $tt_3=(($9+8)|0);
      var $10=HEAP32[(($tt_3)>>2)];
      var $cmp4=(($8)|0)==(($10)|0);
      if ($cmp4) { label = 6; break; } else { var $14 = 0;label = 7; break; }
    case 6: 
      var $11=$L_addr;
      var $12=$o1;
      var $13=$o2;
      var $call5=_luaV_equalobj_($11, $12, $13);
      var $tobool=(($call5)|0)!=0;
      var $14 = $tobool;label = 7; break;
    case 7: 
      var $14;
      var $land_ext=(($14)&1);
      $i=$land_ext;
      label = 11; break;
    case 8: 
      var $15=$L_addr;
      var $16=$o1;
      var $17=$o2;
      var $call7=_luaV_lessthan($15, $16, $17);
      $i=$call7;
      label = 11; break;
    case 9: 
      var $18=$L_addr;
      var $19=$o1;
      var $20=$o2;
      var $call9=_luaV_lessequal($18, $19, $20);
      $i=$call9;
      label = 11; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $21=$i;

      return $21;
  }

}
_lua_compare["X"]=1;

function _lua_tonumberx($L, $idx, $isnum) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; _memset(__stackBase__, 0, 12);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $idx_addr;
      var $isnum_addr;
      var $n=__stackBase__;
      var $o;
      $L_addr=$L;
      $idx_addr=$idx;
      $isnum_addr=$isnum;
      var $0=$L_addr;
      var $1=$idx_addr;
      var $call=_index2addr($0, $1);
      $o=$call;
      var $2=$o;
      var $tt_=(($2+8)|0);
      var $3=HEAP32[(($tt_)>>2)];
      var $cmp=(($3)|0)==3;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $4=$o;
      var $call1=_luaV_tonumber($4, $n);
      $o=$call1;
      var $cmp2=(($call1)|0)!=0;
      if ($cmp2) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $5=$isnum_addr;
      var $tobool=(($5)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$isnum_addr;
      HEAP32[(($6)>>2)]=1;
      label = 6; break;
    case 6: 
      var $7=$o;
      var $value_=(($7)|0);
      var $n4=$value_;
      var $8=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n4)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n4)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $retval=$8;
      label = 10; break;
    case 7: 
      var $9=$isnum_addr;
      var $tobool5=(($9)|0)!=0;
      if ($tobool5) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $10=$isnum_addr;
      HEAP32[(($10)>>2)]=0;
      label = 9; break;
    case 9: 
      $retval=0;
      label = 10; break;
    case 10: 
      var $11=$retval;
      STACKTOP = __stackBase__;
      return $11;
  }

}
Module["_lua_tonumberx"] = _lua_tonumberx;

function _lua_tointegerx($L, $idx, $isnum) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; _memset(__stackBase__, 0, 12);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $idx_addr;
      var $isnum_addr;
      var $n=__stackBase__;
      var $o;
      var $res;
      var $num;
      $L_addr=$L;
      $idx_addr=$idx;
      $isnum_addr=$isnum;
      var $0=$L_addr;
      var $1=$idx_addr;
      var $call=_index2addr($0, $1);
      $o=$call;
      var $2=$o;
      var $tt_=(($2+8)|0);
      var $3=HEAP32[(($tt_)>>2)];
      var $cmp=(($3)|0)==3;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $4=$o;
      var $call1=_luaV_tonumber($4, $n);
      $o=$call1;
      var $cmp2=(($call1)|0)!=0;
      if ($cmp2) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $5=$o;
      var $value_=(($5)|0);
      var $n3=$value_;
      var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $num=$6;
      var $7=$num;
      var $conv=(($7)&-1);
      $res=$conv;
      var $8=$isnum_addr;
      var $tobool=(($8)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $9=$isnum_addr;
      HEAP32[(($9)>>2)]=1;
      label = 6; break;
    case 6: 
      var $10=$res;
      $retval=$10;
      label = 10; break;
    case 7: 
      var $11=$isnum_addr;
      var $tobool5=(($11)|0)!=0;
      if ($tobool5) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $12=$isnum_addr;
      HEAP32[(($12)>>2)]=0;
      label = 9; break;
    case 9: 
      $retval=0;
      label = 10; break;
    case 10: 
      var $13=$retval;
      STACKTOP = __stackBase__;
      return $13;
  }

}
_lua_tointegerx["X"]=1;

function _lua_tounsignedx($L, $idx, $isnum) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; _memset(__stackBase__, 0, 20);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $idx_addr;
      var $isnum_addr;
      var $n=__stackBase__;
      var $o;
      var $res;
      var $num;
      var $u=(__stackBase__)+(12);
      $L_addr=$L;
      $idx_addr=$idx;
      $isnum_addr=$isnum;
      var $0=$L_addr;
      var $1=$idx_addr;
      var $call=_index2addr($0, $1);
      $o=$call;
      var $2=$o;
      var $tt_=(($2+8)|0);
      var $3=HEAP32[(($tt_)>>2)];
      var $cmp=(($3)|0)==3;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $4=$o;
      var $call1=_luaV_tonumber($4, $n);
      $o=$call1;
      var $cmp2=(($call1)|0)!=0;
      if ($cmp2) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $5=$o;
      var $value_=(($5)|0);
      var $n3=$value_;
      var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $num=$6;
      var $7=$num;
      var $add=($7)+(6755399441055744);
      var $l_d=$u;
      (HEAPF64[(tempDoublePtr)>>3]=$add,HEAP32[(($l_d)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($l_d)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $8=HEAP32[((((5243800)|0))>>2)];
      var $cmp4=(($8)|0)==33;
      var $conv=(($cmp4)&1);
      var $l_p=$u;
      var $arrayidx=(($l_p+($conv<<2))|0);
      var $9=HEAP32[(($arrayidx)>>2)];
      $res=$9;
      var $10=$isnum_addr;
      var $tobool=(($10)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $11=$isnum_addr;
      HEAP32[(($11)>>2)]=1;
      label = 6; break;
    case 6: 
      var $12=$res;
      $retval=$12;
      label = 10; break;
    case 7: 
      var $13=$isnum_addr;
      var $tobool6=(($13)|0)!=0;
      if ($tobool6) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $14=$isnum_addr;
      HEAP32[(($14)>>2)]=0;
      label = 9; break;
    case 9: 
      $retval=0;
      label = 10; break;
    case 10: 
      var $15=$retval;
      STACKTOP = __stackBase__;
      return $15;
  }

}
_lua_tounsignedx["X"]=1;

function _lua_toboolean($L, $idx) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $idx_addr;
      var $o;
      $L_addr=$L;
      $idx_addr=$idx;
      var $0=$L_addr;
      var $1=$idx_addr;
      var $call=_index2addr($0, $1);
      $o=$call;
      var $2=$o;
      var $tt_=(($2+8)|0);
      var $3=HEAP32[(($tt_)>>2)];
      var $cmp=(($3)|0)==0;
      if ($cmp) { var $9 = 1;label = 6; break; } else { label = 3; break; }
    case 3: 
      var $4=$o;
      var $tt_1=(($4+8)|0);
      var $5=HEAP32[(($tt_1)>>2)];
      var $cmp2=(($5)|0)==1;
      if ($cmp2) { label = 4; break; } else { var $8 = 0;label = 5; break; }
    case 4: 
      var $6=$o;
      var $value_=(($6)|0);
      var $b=$value_;
      var $7=HEAP32[(($b)>>2)];
      var $cmp3=(($7)|0)==0;
      var $8 = $cmp3;label = 5; break;
    case 5: 
      var $8;
      var $9 = $8;label = 6; break;
    case 6: 
      var $9;
      var $lnot=$9 ^ 1;
      var $lnot_ext=(($lnot)&1);

      return $lnot_ext;
  }

}
Module["_lua_toboolean"] = _lua_toboolean;

function _lua_tolstring($L, $idx, $len) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $idx_addr;
      var $len_addr;
      var $o;
      $L_addr=$L;
      $idx_addr=$idx;
      $len_addr=$len;
      var $0=$L_addr;
      var $1=$idx_addr;
      var $call=_index2addr($0, $1);
      $o=$call;
      var $2=$o;
      var $tt_=(($2+8)|0);
      var $3=HEAP32[(($tt_)>>2)];
      var $and=$3 & 15;
      var $cmp=(($and)|0)==4;
      if ($cmp) { label = 10; break; } else { label = 3; break; }
    case 3: 
      var $4=$L_addr;
      var $5=$o;
      var $call1=_luaV_tostring($4, $5);
      var $tobool=(($call1)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 4; break; }
    case 4: 
      var $6=$len_addr;
      var $cmp3=(($6)|0)!=0;
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$len_addr;
      HEAP32[(($7)>>2)]=0;
      label = 6; break;
    case 6: 
      $retval=0;
      label = 13; break;
    case 7: 
      var $8=$L_addr;
      var $l_G=(($8+12)|0);
      var $9=HEAP32[(($l_G)>>2)];
      var $GCdebt=(($9+12)|0);
      var $10=HEAP32[(($GCdebt)>>2)];
      var $cmp6=(($10)|0) > 0;
      if ($cmp6) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $11=$L_addr;
      _luaC_step($11);
      label = 9; break;
    case 9: 
      var $12=$L_addr;
      var $13=$idx_addr;
      var $call9=_index2addr($12, $13);
      $o=$call9;
      label = 10; break;
    case 10: 
      var $14=$len_addr;
      var $cmp11=(($14)|0)!=0;
      if ($cmp11) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $15=$o;
      var $value_=(($15)|0);
      var $gc=$value_;
      var $16=HEAP32[(($gc)>>2)];
      var $ts=$16;
      var $tsv=$ts;
      var $len13=(($tsv+12)|0);
      var $17=HEAP32[(($len13)>>2)];
      var $18=$len_addr;
      HEAP32[(($18)>>2)]=$17;
      label = 12; break;
    case 12: 
      var $19=$o;
      var $value_15=(($19)|0);
      var $gc16=$value_15;
      var $20=HEAP32[(($gc16)>>2)];
      var $ts17=$20;
      var $add_ptr=(($ts17+16)|0);
      var $21=$add_ptr;
      $retval=$21;
      label = 13; break;
    case 13: 
      var $22=$retval;

      return $22;
  }

}
Module["_lua_tolstring"] = _lua_tolstring;_lua_tolstring["X"]=1;

function _lua_rawlen($L, $idx) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $idx_addr;
      var $o;
      $L_addr=$L;
      $idx_addr=$idx;
      var $0=$L_addr;
      var $1=$idx_addr;
      var $call=_index2addr($0, $1);
      $o=$call;
      var $2=$o;
      var $tt_=(($2+8)|0);
      var $3=HEAP32[(($tt_)>>2)];
      var $and=$3 & 15;
      if ((($and)|0)==4) {
        label = 3; break;
      }
      else if ((($and)|0)==7) {
        label = 4; break;
      }
      else if ((($and)|0)==5) {
        label = 5; break;
      }
      else {
      label = 6; break;
      }
      
    case 3: 
      var $4=$o;
      var $value_=(($4)|0);
      var $gc=$value_;
      var $5=HEAP32[(($gc)>>2)];
      var $ts=$5;
      var $tsv=$ts;
      var $len=(($tsv+12)|0);
      var $6=HEAP32[(($len)>>2)];
      $retval=$6;
      label = 7; break;
    case 4: 
      var $7=$o;
      var $value_2=(($7)|0);
      var $gc3=$value_2;
      var $8=HEAP32[(($gc3)>>2)];
      var $u=$8;
      var $uv=$u;
      var $len4=(($uv+16)|0);
      var $9=HEAP32[(($len4)>>2)];
      $retval=$9;
      label = 7; break;
    case 5: 
      var $10=$o;
      var $value_6=(($10)|0);
      var $gc7=$value_6;
      var $11=HEAP32[(($gc7)>>2)];
      var $h=$11;
      var $call8=_luaH_getn($h);
      $retval=$call8;
      label = 7; break;
    case 6: 
      $retval=0;
      label = 7; break;
    case 7: 
      var $12=$retval;

      return $12;
  }

}
Module["_lua_rawlen"] = _lua_rawlen;

function _lua_touserdata($L, $idx) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $idx_addr;
      var $o;
      $L_addr=$L;
      $idx_addr=$idx;
      var $0=$L_addr;
      var $1=$idx_addr;
      var $call=_index2addr($0, $1);
      $o=$call;
      var $2=$o;
      var $tt_=(($2+8)|0);
      var $3=HEAP32[(($tt_)>>2)];
      var $and=$3 & 15;
      if ((($and)|0)==7) {
        label = 3; break;
      }
      else if ((($and)|0)==2) {
        label = 4; break;
      }
      else {
      label = 5; break;
      }
      
    case 3: 
      var $4=$o;
      var $value_=(($4)|0);
      var $gc=$value_;
      var $5=HEAP32[(($gc)>>2)];
      var $u=$5;
      var $add_ptr=(($u+20)|0);
      var $6=$add_ptr;
      $retval=$6;
      label = 6; break;
    case 4: 
      var $7=$o;
      var $value_2=(($7)|0);
      var $p=$value_2;
      var $8=HEAP32[(($p)>>2)];
      $retval=$8;
      label = 6; break;
    case 5: 
      $retval=0;
      label = 6; break;
    case 6: 
      var $9=$retval;

      return $9;
  }

}


function _lua_tothread($L, $idx) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $idx_addr;
      var $o;
      $L_addr=$L;
      $idx_addr=$idx;
      var $0=$L_addr;
      var $1=$idx_addr;
      var $call=_index2addr($0, $1);
      $o=$call;
      var $2=$o;
      var $tt_=(($2+8)|0);
      var $3=HEAP32[(($tt_)>>2)];
      var $cmp=(($3)|0)==72;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $cond = 0;label = 5; break;
    case 4: 
      var $4=$o;
      var $value_=(($4)|0);
      var $gc=$value_;
      var $5=HEAP32[(($gc)>>2)];
      var $th=$5;
      var $cond = $th;label = 5; break;
    case 5: 
      var $cond;

      return $cond;
  }

}


function _lua_topointer($L, $idx) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $idx_addr;
      var $o;
      $L_addr=$L;
      $idx_addr=$idx;
      var $0=$L_addr;
      var $1=$idx_addr;
      var $call=_index2addr($0, $1);
      $o=$call;
      var $2=$o;
      var $tt_=(($2+8)|0);
      var $3=HEAP32[(($tt_)>>2)];
      var $and=$3 & 63;
      if ((($and)|0)==5) {
        label = 3; break;
      }
      else if ((($and)|0)==6) {
        label = 4; break;
      }
      else if ((($and)|0)==38) {
        label = 5; break;
      }
      else if ((($and)|0)==22) {
        label = 6; break;
      }
      else if ((($and)|0)==8) {
        label = 7; break;
      }
      else if ((($and)|0)==7 | (($and)|0)==2) {
        label = 8; break;
      }
      else {
      label = 9; break;
      }
      
    case 3: 
      var $4=$o;
      var $value_=(($4)|0);
      var $gc=$value_;
      var $5=HEAP32[(($gc)>>2)];
      var $h=$5;
      var $6=$h;
      $retval=$6;
      label = 10; break;
    case 4: 
      var $7=$o;
      var $value_2=(($7)|0);
      var $gc3=$value_2;
      var $8=HEAP32[(($gc3)>>2)];
      var $cl=$8;
      var $l=$cl;
      var $9=$l;
      $retval=$9;
      label = 10; break;
    case 5: 
      var $10=$o;
      var $value_5=(($10)|0);
      var $gc6=$value_5;
      var $11=HEAP32[(($gc6)>>2)];
      var $cl7=$11;
      var $c=$cl7;
      var $12=$c;
      $retval=$12;
      label = 10; break;
    case 6: 
      var $13=$o;
      var $value_9=(($13)|0);
      var $f=$value_9;
      var $14=HEAP32[(($f)>>2)];
      var $15=$14;
      var $16=$15;
      $retval=$16;
      label = 10; break;
    case 7: 
      var $17=$o;
      var $value_11=(($17)|0);
      var $gc12=$value_11;
      var $18=HEAP32[(($gc12)>>2)];
      var $th=$18;
      var $19=$th;
      $retval=$19;
      label = 10; break;
    case 8: 
      var $20=$L_addr;
      var $21=$idx_addr;
      var $call14=_lua_touserdata($20, $21);
      $retval=$call14;
      label = 10; break;
    case 9: 
      $retval=0;
      label = 10; break;
    case 10: 
      var $22=$retval;

      return $22;
  }

}
Module["_lua_topointer"] = _lua_topointer;_lua_topointer["X"]=1;

function _lua_pushlstring($L, $s, $len) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $s_addr;
      var $len_addr;
      var $ts;
      var $io;
      var $x_;
      $L_addr=$L;
      $s_addr=$s;
      $len_addr=$len;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      var $GCdebt=(($1+12)|0);
      var $2=HEAP32[(($GCdebt)>>2)];
      var $cmp=(($2)|0) > 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$L_addr;
      _luaC_step($3);
      label = 4; break;
    case 4: 
      var $4=$L_addr;
      var $5=$s_addr;
      var $6=$len_addr;
      var $call=_luaS_newlstr($4, $5, $6);
      $ts=$call;
      var $7=$L_addr;
      var $top=(($7+8)|0);
      var $8=HEAP32[(($top)>>2)];
      $io=$8;
      var $9=$ts;
      $x_=$9;
      var $10=$x_;
      var $11=$10;
      var $12=$io;
      var $value_=(($12)|0);
      var $gc=$value_;
      HEAP32[(($gc)>>2)]=$11;
      var $13=$x_;
      var $tsv=$13;
      var $tt=(($tsv+4)|0);
      var $14=HEAP8[($tt)];
      var $conv=(($14)&255);
      var $or=$conv | 64;
      var $15=$io;
      var $tt_=(($15+8)|0);
      HEAP32[(($tt_)>>2)]=$or;
      var $16=$L_addr;
      var $top1=(($16+8)|0);
      var $17=HEAP32[(($top1)>>2)];
      var $incdec_ptr=(($17+12)|0);
      HEAP32[(($top1)>>2)]=$incdec_ptr;
      var $18=$ts;
      var $add_ptr=(($18+16)|0);
      var $19=$add_ptr;

      return $19;
  }

}
_lua_pushlstring["X"]=1;

function _lua_pushstring($L, $s) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $s_addr;
      var $ts;
      var $io;
      var $x_;
      $L_addr=$L;
      $s_addr=$s;
      var $0=$s_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$L_addr;
      _lua_pushnil($1);
      $retval=0;
      label = 7; break;
    case 4: 
      var $2=$L_addr;
      var $l_G=(($2+12)|0);
      var $3=HEAP32[(($l_G)>>2)];
      var $GCdebt=(($3+12)|0);
      var $4=HEAP32[(($GCdebt)>>2)];
      var $cmp1=(($4)|0) > 0;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $5=$L_addr;
      _luaC_step($5);
      label = 6; break;
    case 6: 
      var $6=$L_addr;
      var $7=$s_addr;
      var $call=_luaS_new($6, $7);
      $ts=$call;
      var $8=$L_addr;
      var $top=(($8+8)|0);
      var $9=HEAP32[(($top)>>2)];
      $io=$9;
      var $10=$ts;
      $x_=$10;
      var $11=$x_;
      var $12=$11;
      var $13=$io;
      var $value_=(($13)|0);
      var $gc=$value_;
      HEAP32[(($gc)>>2)]=$12;
      var $14=$x_;
      var $tsv=$14;
      var $tt=(($tsv+4)|0);
      var $15=HEAP8[($tt)];
      var $conv=(($15)&255);
      var $or=$conv | 64;
      var $16=$io;
      var $tt_=(($16+8)|0);
      HEAP32[(($tt_)>>2)]=$or;
      var $17=$L_addr;
      var $top3=(($17+8)|0);
      var $18=HEAP32[(($top3)>>2)];
      var $incdec_ptr=(($18+12)|0);
      HEAP32[(($top3)>>2)]=$incdec_ptr;
      var $19=$ts;
      var $add_ptr=(($19+16)|0);
      var $20=$add_ptr;
      $retval=$20;
      label = 7; break;
    case 7: 
      var $21=$retval;

      return $21;
  }

}
Module["_lua_pushstring"] = _lua_pushstring;_lua_pushstring["X"]=1;

function _lua_pushvfstring($L, $fmt, $argp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $fmt_addr;
      var $argp_addr;
      var $ret;
      $L_addr=$L;
      $fmt_addr=$fmt;
      $argp_addr=$argp;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      var $GCdebt=(($1+12)|0);
      var $2=HEAP32[(($GCdebt)>>2)];
      var $cmp=(($2)|0) > 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$L_addr;
      _luaC_step($3);
      label = 4; break;
    case 4: 
      var $4=$L_addr;
      var $5=$fmt_addr;
      var $6=$argp_addr;
      var $call=_luaO_pushvfstring($4, $5, $6);
      $ret=$call;
      var $7=$ret;

      return $7;
  }

}


function _lua_pushfstring($L, $fmt, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $fmt_addr;
      var $ret;
      var $argp=__stackBase__;
      $L_addr=$L;
      $fmt_addr=$fmt;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      var $GCdebt=(($1+12)|0);
      var $2=HEAP32[(($GCdebt)>>2)];
      var $cmp=(($2)|0) > 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$L_addr;
      _luaC_step($3);
      label = 4; break;
    case 4: 
      var $argp1=$argp;
      HEAP32[(($argp1)>>2)]=varrp;
      var $4=$L_addr;
      var $5=$fmt_addr;
      var $6=HEAP32[(($argp)>>2)];
      var $call=_luaO_pushvfstring($4, $5, $6);
      $ret=$call;
      var $argp2=$argp;

      var $7=$ret;
      STACKTOP = __stackBase__;
      return $7;
  }

}


function _lua_pushboolean($L, $b) {
  var label = 0;


  var $L_addr;
  var $b_addr;
  var $io;
  $L_addr=$L;
  $b_addr=$b;
  var $0=$L_addr;
  var $top=(($0+8)|0);
  var $1=HEAP32[(($top)>>2)];
  $io=$1;
  var $2=$b_addr;
  var $cmp=(($2)|0)!=0;
  var $conv=(($cmp)&1);
  var $3=$io;
  var $value_=(($3)|0);
  var $b1=$value_;
  HEAP32[(($b1)>>2)]=$conv;
  var $4=$io;
  var $tt_=(($4+8)|0);
  HEAP32[(($tt_)>>2)]=1;
  var $5=$L_addr;
  var $top2=(($5+8)|0);
  var $6=HEAP32[(($top2)>>2)];
  var $incdec_ptr=(($6+12)|0);
  HEAP32[(($top2)>>2)]=$incdec_ptr;

  return;
}
Module["_lua_pushboolean"] = _lua_pushboolean;

function _lua_pushlightuserdata($L, $p) {
  var label = 0;


  var $L_addr;
  var $p_addr;
  var $io;
  $L_addr=$L;
  $p_addr=$p;
  var $0=$L_addr;
  var $top=(($0+8)|0);
  var $1=HEAP32[(($top)>>2)];
  $io=$1;
  var $2=$p_addr;
  var $3=$io;
  var $value_=(($3)|0);
  var $p1=$value_;
  HEAP32[(($p1)>>2)]=$2;
  var $4=$io;
  var $tt_=(($4+8)|0);
  HEAP32[(($tt_)>>2)]=2;
  var $5=$L_addr;
  var $top2=(($5+8)|0);
  var $6=HEAP32[(($top2)>>2)];
  var $incdec_ptr=(($6+12)|0);
  HEAP32[(($top2)>>2)]=$incdec_ptr;

  return;
}


function _lua_pushthread($L) {
  var label = 0;


  var $L_addr;
  var $io;
  $L_addr=$L;
  var $0=$L_addr;
  var $top=(($0+8)|0);
  var $1=HEAP32[(($top)>>2)];
  $io=$1;
  var $2=$L_addr;
  var $3=$2;
  var $4=$io;
  var $value_=(($4)|0);
  var $gc=$value_;
  HEAP32[(($gc)>>2)]=$3;
  var $5=$io;
  var $tt_=(($5+8)|0);
  HEAP32[(($tt_)>>2)]=72;
  var $6=$L_addr;
  var $top1=(($6+8)|0);
  var $7=HEAP32[(($top1)>>2)];
  var $incdec_ptr=(($7+12)|0);
  HEAP32[(($top1)>>2)]=$incdec_ptr;
  var $8=$L_addr;
  var $l_G=(($8+12)|0);
  var $9=HEAP32[(($l_G)>>2)];
  var $mainthread=(($9+152)|0);
  var $10=HEAP32[(($mainthread)>>2)];
  var $11=$L_addr;
  var $cmp=(($10)|0)==(($11)|0);
  var $conv=(($cmp)&1);

  return $conv;
}


function _lua_pushcclosure($L, $fn, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $fn_addr;
      var $n_addr;
      var $io;
      var $cl;
      var $io2;
      var $io1;
      var $io12;
      $L_addr=$L;
      $fn_addr=$fn;
      $n_addr=$n;
      var $0=$n_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$L_addr;
      var $top=(($1+8)|0);
      var $2=HEAP32[(($top)>>2)];
      $io=$2;
      var $3=$fn_addr;
      var $4=$io;
      var $value_=(($4)|0);
      var $f=$value_;
      HEAP32[(($f)>>2)]=$3;
      var $5=$io;
      var $tt_=(($5+8)|0);
      HEAP32[(($tt_)>>2)]=22;
      label = 10; break;
    case 4: 
      var $6=$L_addr;
      var $l_G=(($6+12)|0);
      var $7=HEAP32[(($l_G)>>2)];
      var $GCdebt=(($7+12)|0);
      var $8=HEAP32[(($GCdebt)>>2)];
      var $cmp1=(($8)|0) > 0;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $9=$L_addr;
      _luaC_step($9);
      label = 6; break;
    case 6: 
      var $10=$L_addr;
      var $11=$n_addr;
      var $call=_luaF_newCclosure($10, $11);
      $cl=$call;
      var $12=$fn_addr;
      var $13=$cl;
      var $c=$13;
      var $f3=(($c+12)|0);
      HEAP32[(($f3)>>2)]=$12;
      var $14=$n_addr;
      var $15=$L_addr;
      var $top4=(($15+8)|0);
      var $16=HEAP32[(($top4)>>2)];
      var $idx_neg=(((-$14))|0);
      var $add_ptr=(($16+((($idx_neg)*(12))&-1))|0);
      HEAP32[(($top4)>>2)]=$add_ptr;
      label = 7; break;
    case 7: 
      var $17=$n_addr;
      var $dec=((($17)-(1))|0);
      $n_addr=$dec;
      var $tobool=(($17)|0)!=0;
      if ($tobool) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $18=$L_addr;
      var $top5=(($18+8)|0);
      var $19=HEAP32[(($top5)>>2)];
      var $20=$n_addr;
      var $add_ptr6=(($19+((($20)*(12))&-1))|0);
      $io2=$add_ptr6;
      var $21=$n_addr;
      var $22=$cl;
      var $c7=$22;
      var $upvalue=(($c7+16)|0);
      var $arrayidx=(($upvalue+((($21)*(12))&-1))|0);
      $io1=$arrayidx;
      var $23=$io1;
      var $value_8=(($23)|0);
      var $24=$io2;
      var $value_9=(($24)|0);
      var $25=$value_8;
      var $26=$value_9;
      HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];
      var $27=$io2;
      var $tt_10=(($27+8)|0);
      var $28=HEAP32[(($tt_10)>>2)];
      var $29=$io1;
      var $tt_11=(($29+8)|0);
      HEAP32[(($tt_11)>>2)]=$28;
      label = 7; break;
    case 9: 
      var $30=$L_addr;
      var $top13=(($30+8)|0);
      var $31=HEAP32[(($top13)>>2)];
      $io12=$31;
      var $32=$cl;
      var $33=$32;
      var $34=$io12;
      var $value_14=(($34)|0);
      var $gc=$value_14;
      HEAP32[(($gc)>>2)]=$33;
      var $35=$io12;
      var $tt_15=(($35+8)|0);
      HEAP32[(($tt_15)>>2)]=102;
      label = 10; break;
    case 10: 
      var $36=$L_addr;
      var $top17=(($36+8)|0);
      var $37=HEAP32[(($top17)>>2)];
      var $incdec_ptr=(($37+12)|0);
      HEAP32[(($top17)>>2)]=$incdec_ptr;

      return;
  }

}
Module["_lua_pushcclosure"] = _lua_pushcclosure;_lua_pushcclosure["X"]=1;

function _lua_getglobal($L, $var) {
  var label = 0;


  var $L_addr;
  var $var_addr;
  var $reg;
  var $gt;
  var $io;
  var $x_;
  $L_addr=$L;
  $var_addr=$var;
  var $0=$L_addr;
  var $l_G=(($0+12)|0);
  var $1=HEAP32[(($l_G)>>2)];
  var $l_registry=(($1+36)|0);
  var $value_=(($l_registry)|0);
  var $gc=$value_;
  var $2=HEAP32[(($gc)>>2)];
  var $h=$2;
  $reg=$h;
  var $3=$reg;
  var $call=_luaH_getint($3, 2);
  $gt=$call;
  var $4=$L_addr;
  var $top=(($4+8)|0);
  var $5=HEAP32[(($top)>>2)];
  var $incdec_ptr=(($5+12)|0);
  HEAP32[(($top)>>2)]=$incdec_ptr;
  $io=$5;
  var $6=$L_addr;
  var $7=$var_addr;
  var $call1=_luaS_new($6, $7);
  $x_=$call1;
  var $8=$x_;
  var $9=$8;
  var $10=$io;
  var $value_2=(($10)|0);
  var $gc3=$value_2;
  HEAP32[(($gc3)>>2)]=$9;
  var $11=$x_;
  var $tsv=$11;
  var $tt=(($tsv+4)|0);
  var $12=HEAP8[($tt)];
  var $conv=(($12)&255);
  var $or=$conv | 64;
  var $13=$io;
  var $tt_=(($13+8)|0);
  HEAP32[(($tt_)>>2)]=$or;
  var $14=$L_addr;
  var $15=$gt;
  var $16=$L_addr;
  var $top4=(($16+8)|0);
  var $17=HEAP32[(($top4)>>2)];
  var $add_ptr=((($17)-(12))|0);
  var $18=$L_addr;
  var $top5=(($18+8)|0);
  var $19=HEAP32[(($top5)>>2)];
  var $add_ptr6=((($19)-(12))|0);
  _luaV_gettable($14, $15, $add_ptr, $add_ptr6);

  return;
}
Module["_lua_getglobal"] = _lua_getglobal;_lua_getglobal["X"]=1;

function _lua_gettable($L, $idx) {
  var label = 0;


  var $L_addr;
  var $idx_addr;
  var $t;
  $L_addr=$L;
  $idx_addr=$idx;
  var $0=$L_addr;
  var $1=$idx_addr;
  var $call=_index2addr($0, $1);
  $t=$call;
  var $2=$L_addr;
  var $3=$t;
  var $4=$L_addr;
  var $top=(($4+8)|0);
  var $5=HEAP32[(($top)>>2)];
  var $add_ptr=((($5)-(12))|0);
  var $6=$L_addr;
  var $top1=(($6+8)|0);
  var $7=HEAP32[(($top1)>>2)];
  var $add_ptr2=((($7)-(12))|0);
  _luaV_gettable($2, $3, $add_ptr, $add_ptr2);

  return;
}


function _lua_getfield($L, $idx, $k) {
  var label = 0;


  var $L_addr;
  var $idx_addr;
  var $k_addr;
  var $t;
  var $io;
  var $x_;
  $L_addr=$L;
  $idx_addr=$idx;
  $k_addr=$k;
  var $0=$L_addr;
  var $1=$idx_addr;
  var $call=_index2addr($0, $1);
  $t=$call;
  var $2=$L_addr;
  var $top=(($2+8)|0);
  var $3=HEAP32[(($top)>>2)];
  $io=$3;
  var $4=$L_addr;
  var $5=$k_addr;
  var $call1=_luaS_new($4, $5);
  $x_=$call1;
  var $6=$x_;
  var $7=$6;
  var $8=$io;
  var $value_=(($8)|0);
  var $gc=$value_;
  HEAP32[(($gc)>>2)]=$7;
  var $9=$x_;
  var $tsv=$9;
  var $tt=(($tsv+4)|0);
  var $10=HEAP8[($tt)];
  var $conv=(($10)&255);
  var $or=$conv | 64;
  var $11=$io;
  var $tt_=(($11+8)|0);
  HEAP32[(($tt_)>>2)]=$or;
  var $12=$L_addr;
  var $top2=(($12+8)|0);
  var $13=HEAP32[(($top2)>>2)];
  var $incdec_ptr=(($13+12)|0);
  HEAP32[(($top2)>>2)]=$incdec_ptr;
  var $14=$L_addr;
  var $15=$t;
  var $16=$L_addr;
  var $top3=(($16+8)|0);
  var $17=HEAP32[(($top3)>>2)];
  var $add_ptr=((($17)-(12))|0);
  var $18=$L_addr;
  var $top4=(($18+8)|0);
  var $19=HEAP32[(($top4)>>2)];
  var $add_ptr5=((($19)-(12))|0);
  _luaV_gettable($14, $15, $add_ptr, $add_ptr5);

  return;
}
_lua_getfield["X"]=1;

function _lua_rawget($L, $idx) {
  var label = 0;


  var $L_addr;
  var $idx_addr;
  var $t;
  var $io2;
  var $io1;
  $L_addr=$L;
  $idx_addr=$idx;
  var $0=$L_addr;
  var $1=$idx_addr;
  var $call=_index2addr($0, $1);
  $t=$call;
  var $2=$t;
  var $value_=(($2)|0);
  var $gc=$value_;
  var $3=HEAP32[(($gc)>>2)];
  var $h=$3;
  var $4=$L_addr;
  var $top=(($4+8)|0);
  var $5=HEAP32[(($top)>>2)];
  var $add_ptr=((($5)-(12))|0);
  var $call1=_luaH_get($h, $add_ptr);
  $io2=$call1;
  var $6=$L_addr;
  var $top2=(($6+8)|0);
  var $7=HEAP32[(($top2)>>2)];
  var $add_ptr3=((($7)-(12))|0);
  $io1=$add_ptr3;
  var $8=$io1;
  var $value_4=(($8)|0);
  var $9=$io2;
  var $value_5=(($9)|0);
  var $10=$value_4;
  var $11=$value_5;
  HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];
  var $12=$io2;
  var $tt_=(($12+8)|0);
  var $13=HEAP32[(($tt_)>>2)];
  var $14=$io1;
  var $tt_6=(($14+8)|0);
  HEAP32[(($tt_6)>>2)]=$13;

  return;
}
Module["_lua_rawget"] = _lua_rawget;

function _lua_rawgeti($L, $idx, $n) {
  var label = 0;


  var $L_addr;
  var $idx_addr;
  var $n_addr;
  var $t;
  var $io2;
  var $io1;
  $L_addr=$L;
  $idx_addr=$idx;
  $n_addr=$n;
  var $0=$L_addr;
  var $1=$idx_addr;
  var $call=_index2addr($0, $1);
  $t=$call;
  var $2=$t;
  var $value_=(($2)|0);
  var $gc=$value_;
  var $3=HEAP32[(($gc)>>2)];
  var $h=$3;
  var $4=$n_addr;
  var $call1=_luaH_getint($h, $4);
  $io2=$call1;
  var $5=$L_addr;
  var $top=(($5+8)|0);
  var $6=HEAP32[(($top)>>2)];
  $io1=$6;
  var $7=$io1;
  var $value_2=(($7)|0);
  var $8=$io2;
  var $value_3=(($8)|0);
  var $9=$value_2;
  var $10=$value_3;
  HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];
  var $11=$io2;
  var $tt_=(($11+8)|0);
  var $12=HEAP32[(($tt_)>>2)];
  var $13=$io1;
  var $tt_4=(($13+8)|0);
  HEAP32[(($tt_4)>>2)]=$12;
  var $14=$L_addr;
  var $top5=(($14+8)|0);
  var $15=HEAP32[(($top5)>>2)];
  var $incdec_ptr=(($15+12)|0);
  HEAP32[(($top5)>>2)]=$incdec_ptr;

  return;
}


function _lua_createtable($L, $narray, $nrec) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $narray_addr;
      var $nrec_addr;
      var $t;
      var $io;
      $L_addr=$L;
      $narray_addr=$narray;
      $nrec_addr=$nrec;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      var $GCdebt=(($1+12)|0);
      var $2=HEAP32[(($GCdebt)>>2)];
      var $cmp=(($2)|0) > 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$L_addr;
      _luaC_step($3);
      label = 4; break;
    case 4: 
      var $4=$L_addr;
      var $call=_luaH_new($4);
      $t=$call;
      var $5=$L_addr;
      var $top=(($5+8)|0);
      var $6=HEAP32[(($top)>>2)];
      $io=$6;
      var $7=$t;
      var $8=$7;
      var $9=$io;
      var $value_=(($9)|0);
      var $gc=$value_;
      HEAP32[(($gc)>>2)]=$8;
      var $10=$io;
      var $tt_=(($10+8)|0);
      HEAP32[(($tt_)>>2)]=69;
      var $11=$L_addr;
      var $top1=(($11+8)|0);
      var $12=HEAP32[(($top1)>>2)];
      var $incdec_ptr=(($12+12)|0);
      HEAP32[(($top1)>>2)]=$incdec_ptr;
      var $13=$narray_addr;
      var $cmp2=(($13)|0) > 0;
      if ($cmp2) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $14=$nrec_addr;
      var $cmp3=(($14)|0) > 0;
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $15=$L_addr;
      var $16=$t;
      var $17=$narray_addr;
      var $18=$nrec_addr;
      _luaH_resize($15, $16, $17, $18);
      label = 7; break;
    case 7: 

      return;
  }

}
Module["_lua_createtable"] = _lua_createtable;_lua_createtable["X"]=1;

function _lua_getmetatable($L, $objindex) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $objindex_addr;
      var $obj;
      var $mt;
      var $res;
      var $io;
      $L_addr=$L;
      $objindex_addr=$objindex;
      $mt=0;
      var $0=$L_addr;
      var $1=$objindex_addr;
      var $call=_index2addr($0, $1);
      $obj=$call;
      var $2=$obj;
      var $tt_=(($2+8)|0);
      var $3=HEAP32[(($tt_)>>2)];
      var $and=$3 & 15;
      if ((($and)|0)==5) {
        label = 3; break;
      }
      else if ((($and)|0)==7) {
        label = 4; break;
      }
      else {
      label = 5; break;
      }
      
    case 3: 
      var $4=$obj;
      var $value_=(($4)|0);
      var $gc=$value_;
      var $5=HEAP32[(($gc)>>2)];
      var $h=$5;
      var $metatable=(($h+8)|0);
      var $6=HEAP32[(($metatable)>>2)];
      $mt=$6;
      label = 6; break;
    case 4: 
      var $7=$obj;
      var $value_2=(($7)|0);
      var $gc3=$value_2;
      var $8=HEAP32[(($gc3)>>2)];
      var $u=$8;
      var $uv=$u;
      var $metatable4=(($uv+8)|0);
      var $9=HEAP32[(($metatable4)>>2)];
      $mt=$9;
      label = 6; break;
    case 5: 
      var $10=$obj;
      var $tt_5=(($10+8)|0);
      var $11=HEAP32[(($tt_5)>>2)];
      var $and6=$11 & 15;
      var $12=$L_addr;
      var $l_G=(($12+12)|0);
      var $13=HEAP32[(($l_G)>>2)];
      var $mt7=(($13+232)|0);
      var $arrayidx=(($mt7+($and6<<2))|0);
      var $14=HEAP32[(($arrayidx)>>2)];
      $mt=$14;
      label = 6; break;
    case 6: 
      var $15=$mt;
      var $cmp=(($15)|0)==0;
      if ($cmp) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $res=0;
      label = 9; break;
    case 8: 
      var $16=$L_addr;
      var $top=(($16+8)|0);
      var $17=HEAP32[(($top)>>2)];
      $io=$17;
      var $18=$mt;
      var $19=$18;
      var $20=$io;
      var $value_8=(($20)|0);
      var $gc9=$value_8;
      HEAP32[(($gc9)>>2)]=$19;
      var $21=$io;
      var $tt_10=(($21+8)|0);
      HEAP32[(($tt_10)>>2)]=69;
      var $22=$L_addr;
      var $top11=(($22+8)|0);
      var $23=HEAP32[(($top11)>>2)];
      var $incdec_ptr=(($23+12)|0);
      HEAP32[(($top11)>>2)]=$incdec_ptr;
      $res=1;
      label = 9; break;
    case 9: 
      var $24=$res;

      return $24;
  }

}
_lua_getmetatable["X"]=1;

function _lua_getuservalue($L, $idx) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $idx_addr;
      var $o;
      var $io;
      $L_addr=$L;
      $idx_addr=$idx;
      var $0=$L_addr;
      var $1=$idx_addr;
      var $call=_index2addr($0, $1);
      $o=$call;
      var $2=$o;
      var $value_=(($2)|0);
      var $gc=$value_;
      var $3=HEAP32[(($gc)>>2)];
      var $u=$3;
      var $uv=$u;
      var $env=(($uv+12)|0);
      var $4=HEAP32[(($env)>>2)];
      var $tobool=(($4)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$L_addr;
      var $top=(($5+8)|0);
      var $6=HEAP32[(($top)>>2)];
      $io=$6;
      var $7=$o;
      var $value_1=(($7)|0);
      var $gc2=$value_1;
      var $8=HEAP32[(($gc2)>>2)];
      var $u3=$8;
      var $uv4=$u3;
      var $env5=(($uv4+12)|0);
      var $9=HEAP32[(($env5)>>2)];
      var $10=$9;
      var $11=$io;
      var $value_6=(($11)|0);
      var $gc7=$value_6;
      HEAP32[(($gc7)>>2)]=$10;
      var $12=$io;
      var $tt_=(($12+8)|0);
      HEAP32[(($tt_)>>2)]=69;
      label = 5; break;
    case 4: 
      var $13=$L_addr;
      var $top8=(($13+8)|0);
      var $14=HEAP32[(($top8)>>2)];
      var $tt_9=(($14+8)|0);
      HEAP32[(($tt_9)>>2)]=0;
      label = 5; break;
    case 5: 
      var $15=$L_addr;
      var $top10=(($15+8)|0);
      var $16=HEAP32[(($top10)>>2)];
      var $incdec_ptr=(($16+12)|0);
      HEAP32[(($top10)>>2)]=$incdec_ptr;

      return;
  }

}
_lua_getuservalue["X"]=1;

function _lua_setglobal($L, $var) {
  var label = 0;


  var $L_addr;
  var $var_addr;
  var $reg;
  var $gt;
  var $io;
  var $x_;
  $L_addr=$L;
  $var_addr=$var;
  var $0=$L_addr;
  var $l_G=(($0+12)|0);
  var $1=HEAP32[(($l_G)>>2)];
  var $l_registry=(($1+36)|0);
  var $value_=(($l_registry)|0);
  var $gc=$value_;
  var $2=HEAP32[(($gc)>>2)];
  var $h=$2;
  $reg=$h;
  var $3=$reg;
  var $call=_luaH_getint($3, 2);
  $gt=$call;
  var $4=$L_addr;
  var $top=(($4+8)|0);
  var $5=HEAP32[(($top)>>2)];
  var $incdec_ptr=(($5+12)|0);
  HEAP32[(($top)>>2)]=$incdec_ptr;
  $io=$5;
  var $6=$L_addr;
  var $7=$var_addr;
  var $call1=_luaS_new($6, $7);
  $x_=$call1;
  var $8=$x_;
  var $9=$8;
  var $10=$io;
  var $value_2=(($10)|0);
  var $gc3=$value_2;
  HEAP32[(($gc3)>>2)]=$9;
  var $11=$x_;
  var $tsv=$11;
  var $tt=(($tsv+4)|0);
  var $12=HEAP8[($tt)];
  var $conv=(($12)&255);
  var $or=$conv | 64;
  var $13=$io;
  var $tt_=(($13+8)|0);
  HEAP32[(($tt_)>>2)]=$or;
  var $14=$L_addr;
  var $15=$gt;
  var $16=$L_addr;
  var $top4=(($16+8)|0);
  var $17=HEAP32[(($top4)>>2)];
  var $add_ptr=((($17)-(12))|0);
  var $18=$L_addr;
  var $top5=(($18+8)|0);
  var $19=HEAP32[(($top5)>>2)];
  var $add_ptr6=((($19)-(24))|0);
  _luaV_settable($14, $15, $add_ptr, $add_ptr6);
  var $20=$L_addr;
  var $top7=(($20+8)|0);
  var $21=HEAP32[(($top7)>>2)];
  var $add_ptr8=((($21)-(24))|0);
  HEAP32[(($top7)>>2)]=$add_ptr8;

  return;
}
Module["_lua_setglobal"] = _lua_setglobal;_lua_setglobal["X"]=1;

function _lua_setfield($L, $idx, $k) {
  var label = 0;


  var $L_addr;
  var $idx_addr;
  var $k_addr;
  var $t;
  var $io;
  var $x_;
  $L_addr=$L;
  $idx_addr=$idx;
  $k_addr=$k;
  var $0=$L_addr;
  var $1=$idx_addr;
  var $call=_index2addr($0, $1);
  $t=$call;
  var $2=$L_addr;
  var $top=(($2+8)|0);
  var $3=HEAP32[(($top)>>2)];
  var $incdec_ptr=(($3+12)|0);
  HEAP32[(($top)>>2)]=$incdec_ptr;
  $io=$3;
  var $4=$L_addr;
  var $5=$k_addr;
  var $call1=_luaS_new($4, $5);
  $x_=$call1;
  var $6=$x_;
  var $7=$6;
  var $8=$io;
  var $value_=(($8)|0);
  var $gc=$value_;
  HEAP32[(($gc)>>2)]=$7;
  var $9=$x_;
  var $tsv=$9;
  var $tt=(($tsv+4)|0);
  var $10=HEAP8[($tt)];
  var $conv=(($10)&255);
  var $or=$conv | 64;
  var $11=$io;
  var $tt_=(($11+8)|0);
  HEAP32[(($tt_)>>2)]=$or;
  var $12=$L_addr;
  var $13=$t;
  var $14=$L_addr;
  var $top2=(($14+8)|0);
  var $15=HEAP32[(($top2)>>2)];
  var $add_ptr=((($15)-(12))|0);
  var $16=$L_addr;
  var $top3=(($16+8)|0);
  var $17=HEAP32[(($top3)>>2)];
  var $add_ptr4=((($17)-(24))|0);
  _luaV_settable($12, $13, $add_ptr, $add_ptr4);
  var $18=$L_addr;
  var $top5=(($18+8)|0);
  var $19=HEAP32[(($top5)>>2)];
  var $add_ptr6=((($19)-(24))|0);
  HEAP32[(($top5)>>2)]=$add_ptr6;

  return;
}
_lua_setfield["X"]=1;

function _lua_rawset($L, $idx) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $idx_addr;
      var $t;
      var $io2;
      var $io1;
      $L_addr=$L;
      $idx_addr=$idx;
      var $0=$L_addr;
      var $1=$idx_addr;
      var $call=_index2addr($0, $1);
      $t=$call;
      var $2=$L_addr;
      var $top=(($2+8)|0);
      var $3=HEAP32[(($top)>>2)];
      var $add_ptr=((($3)-(12))|0);
      $io2=$add_ptr;
      var $4=$L_addr;
      var $5=$t;
      var $value_=(($5)|0);
      var $gc=$value_;
      var $6=HEAP32[(($gc)>>2)];
      var $h=$6;
      var $7=$L_addr;
      var $top1=(($7+8)|0);
      var $8=HEAP32[(($top1)>>2)];
      var $add_ptr2=((($8)-(24))|0);
      var $call3=_luaH_set($4, $h, $add_ptr2);
      $io1=$call3;
      var $9=$io1;
      var $value_4=(($9)|0);
      var $10=$io2;
      var $value_5=(($10)|0);
      var $11=$value_4;
      var $12=$value_5;
      HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
      var $13=$io2;
      var $tt_=(($13+8)|0);
      var $14=HEAP32[(($tt_)>>2)];
      var $15=$io1;
      var $tt_6=(($15+8)|0);
      HEAP32[(($tt_6)>>2)]=$14;
      var $16=$t;
      var $value_7=(($16)|0);
      var $gc8=$value_7;
      var $17=HEAP32[(($gc8)>>2)];
      var $h9=$17;
      var $flags=(($h9+6)|0);
      HEAP8[($flags)]=0;
      var $18=$L_addr;
      var $top10=(($18+8)|0);
      var $19=HEAP32[(($top10)>>2)];
      var $add_ptr11=((($19)-(12))|0);
      var $tt_12=(($add_ptr11+8)|0);
      var $20=HEAP32[(($tt_12)>>2)];
      var $and=$20 & 64;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $21=$L_addr;
      var $top13=(($21+8)|0);
      var $22=HEAP32[(($top13)>>2)];
      var $add_ptr14=((($22)-(12))|0);
      var $value_15=(($add_ptr14)|0);
      var $gc16=$value_15;
      var $23=HEAP32[(($gc16)>>2)];
      var $gch=$23;
      var $marked=(($gch+5)|0);
      var $24=HEAP8[($marked)];
      var $conv=(($24)&255);
      var $and17=$conv & 3;
      var $tobool18=(($and17)|0)!=0;
      if ($tobool18) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $25=$t;
      var $value_20=(($25)|0);
      var $gc21=$value_20;
      var $26=HEAP32[(($gc21)>>2)];
      var $gch22=$26;
      var $marked23=(($gch22+5)|0);
      var $27=HEAP8[($marked23)];
      var $conv24=(($27)&255);
      var $and25=$conv24 & 4;
      var $tobool26=(($and25)|0)!=0;
      if ($tobool26) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $28=$L_addr;
      var $29=$t;
      var $value_27=(($29)|0);
      var $gc28=$value_27;
      var $30=HEAP32[(($gc28)>>2)];
      _luaC_barrierback_($28, $30);
      label = 6; break;
    case 6: 
      var $31=$L_addr;
      var $top29=(($31+8)|0);
      var $32=HEAP32[(($top29)>>2)];
      var $add_ptr30=((($32)-(24))|0);
      HEAP32[(($top29)>>2)]=$add_ptr30;

      return;
  }

}
Module["_lua_rawset"] = _lua_rawset;_lua_rawset["X"]=1;

function _lua_rawseti($L, $idx, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $idx_addr;
      var $n_addr;
      var $t;
      $L_addr=$L;
      $idx_addr=$idx;
      $n_addr=$n;
      var $0=$L_addr;
      var $1=$idx_addr;
      var $call=_index2addr($0, $1);
      $t=$call;
      var $2=$L_addr;
      var $3=$t;
      var $value_=(($3)|0);
      var $gc=$value_;
      var $4=HEAP32[(($gc)>>2)];
      var $h=$4;
      var $5=$n_addr;
      var $6=$L_addr;
      var $top=(($6+8)|0);
      var $7=HEAP32[(($top)>>2)];
      var $add_ptr=((($7)-(12))|0);
      _luaH_setint($2, $h, $5, $add_ptr);
      var $8=$L_addr;
      var $top1=(($8+8)|0);
      var $9=HEAP32[(($top1)>>2)];
      var $add_ptr2=((($9)-(12))|0);
      var $tt_=(($add_ptr2+8)|0);
      var $10=HEAP32[(($tt_)>>2)];
      var $and=$10 & 64;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$L_addr;
      var $top3=(($11+8)|0);
      var $12=HEAP32[(($top3)>>2)];
      var $add_ptr4=((($12)-(12))|0);
      var $value_5=(($add_ptr4)|0);
      var $gc6=$value_5;
      var $13=HEAP32[(($gc6)>>2)];
      var $gch=$13;
      var $marked=(($gch+5)|0);
      var $14=HEAP8[($marked)];
      var $conv=(($14)&255);
      var $and7=$conv & 3;
      var $tobool8=(($and7)|0)!=0;
      if ($tobool8) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $15=$t;
      var $value_10=(($15)|0);
      var $gc11=$value_10;
      var $16=HEAP32[(($gc11)>>2)];
      var $gch12=$16;
      var $marked13=(($gch12+5)|0);
      var $17=HEAP8[($marked13)];
      var $conv14=(($17)&255);
      var $and15=$conv14 & 4;
      var $tobool16=(($and15)|0)!=0;
      if ($tobool16) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $18=$L_addr;
      var $19=$t;
      var $value_17=(($19)|0);
      var $gc18=$value_17;
      var $20=HEAP32[(($gc18)>>2)];
      _luaC_barrierback_($18, $20);
      label = 6; break;
    case 6: 
      var $21=$L_addr;
      var $top19=(($21+8)|0);
      var $22=HEAP32[(($top19)>>2)];
      var $incdec_ptr=((($22)-(12))|0);
      HEAP32[(($top19)>>2)]=$incdec_ptr;

      return;
  }

}
_lua_rawseti["X"]=1;

function _lua_getctx($L, $ctx) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $ctx_addr;
      $L_addr=$L;
      $ctx_addr=$ctx;
      var $0=$L_addr;
      var $ci=(($0+16)|0);
      var $1=HEAP32[(($ci)>>2)];
      var $callstatus=(($1+18)|0);
      var $2=HEAP8[($callstatus)];
      var $conv=(($2)&255);
      var $and=$conv & 8;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $3=$ctx_addr;
      var $tobool1=(($3)|0)!=0;
      if ($tobool1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$L_addr;
      var $ci3=(($4+16)|0);
      var $5=HEAP32[(($ci3)>>2)];
      var $u=(($5+24)|0);
      var $c=$u;
      var $ctx4=(($c)|0);
      var $6=HEAP32[(($ctx4)>>2)];
      var $7=$ctx_addr;
      HEAP32[(($7)>>2)]=$6;
      label = 5; break;
    case 5: 
      var $8=$L_addr;
      var $ci5=(($8+16)|0);
      var $9=HEAP32[(($ci5)>>2)];
      var $u6=(($9+24)|0);
      var $c7=$u6;
      var $status=(($c7+13)|0);
      var $10=HEAP8[($status)];
      var $conv8=(($10)&255);
      $retval=$conv8;
      label = 7; break;
    case 6: 
      $retval=0;
      label = 7; break;
    case 7: 
      var $11=$retval;

      return $11;
  }

}


function _lua_status($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $status=(($0+6)|0);
  var $1=HEAP8[($status)];
  var $conv=(($1)&255);

  return $conv;
}


function _lua_setmetatable($L, $objindex) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $objindex_addr;
      var $obj;
      var $mt;
      $L_addr=$L;
      $objindex_addr=$objindex;
      var $0=$L_addr;
      var $1=$objindex_addr;
      var $call=_index2addr($0, $1);
      $obj=$call;
      var $2=$L_addr;
      var $top=(($2+8)|0);
      var $3=HEAP32[(($top)>>2)];
      var $add_ptr=((($3)-(12))|0);
      var $tt_=(($add_ptr+8)|0);
      var $4=HEAP32[(($tt_)>>2)];
      var $cmp=(($4)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $mt=0;
      label = 5; break;
    case 4: 
      var $5=$L_addr;
      var $top1=(($5+8)|0);
      var $6=HEAP32[(($top1)>>2)];
      var $add_ptr2=((($6)-(12))|0);
      var $value_=(($add_ptr2)|0);
      var $gc=$value_;
      var $7=HEAP32[(($gc)>>2)];
      var $h=$7;
      $mt=$h;
      label = 5; break;
    case 5: 
      var $8=$obj;
      var $tt_3=(($8+8)|0);
      var $9=HEAP32[(($tt_3)>>2)];
      var $and=$9 & 15;
      if ((($and)|0)==5) {
        label = 6; break;
      }
      else if ((($and)|0)==7) {
        label = 12; break;
      }
      else {
      label = 18; break;
      }
      
    case 6: 
      var $10=$mt;
      var $11=$obj;
      var $value_4=(($11)|0);
      var $gc5=$value_4;
      var $12=HEAP32[(($gc5)>>2)];
      var $h6=$12;
      var $metatable=(($h6+8)|0);
      HEAP32[(($metatable)>>2)]=$10;
      var $13=$mt;
      var $tobool=(($13)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $14=$mt;
      var $15=$14;
      var $gch=$15;
      var $marked=(($gch+5)|0);
      var $16=HEAP8[($marked)];
      var $conv=(($16)&255);
      var $and8=$conv & 3;
      var $tobool9=(($and8)|0)!=0;
      if ($tobool9) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $17=$obj;
      var $value_10=(($17)|0);
      var $gc11=$value_10;
      var $18=HEAP32[(($gc11)>>2)];
      var $gch12=$18;
      var $marked13=(($gch12+5)|0);
      var $19=HEAP8[($marked13)];
      var $conv14=(($19)&255);
      var $and15=$conv14 & 4;
      var $tobool16=(($and15)|0)!=0;
      if ($tobool16) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $20=$L_addr;
      var $21=$obj;
      var $value_18=(($21)|0);
      var $gc19=$value_18;
      var $22=HEAP32[(($gc19)>>2)];
      _luaC_barrierback_($20, $22);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $23=$L_addr;
      var $24=$obj;
      var $value_22=(($24)|0);
      var $gc23=$value_22;
      var $25=HEAP32[(($gc23)>>2)];
      var $26=$mt;
      _luaC_checkfinalizer($23, $25, $26);
      label = 19; break;
    case 12: 
      var $27=$mt;
      var $28=$obj;
      var $value_25=(($28)|0);
      var $gc26=$value_25;
      var $29=HEAP32[(($gc26)>>2)];
      var $u=$29;
      var $uv=$u;
      var $metatable27=(($uv+8)|0);
      HEAP32[(($metatable27)>>2)]=$27;
      var $30=$mt;
      var $tobool28=(($30)|0)!=0;
      if ($tobool28) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $31=$mt;
      var $32=$31;
      var $gch30=$32;
      var $marked31=(($gch30+5)|0);
      var $33=HEAP8[($marked31)];
      var $conv32=(($33)&255);
      var $and33=$conv32 & 3;
      var $tobool34=(($and33)|0)!=0;
      if ($tobool34) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $34=$obj;
      var $value_36=(($34)|0);
      var $gc37=$value_36;
      var $35=HEAP32[(($gc37)>>2)];
      var $u38=$35;
      var $36=$u38;
      var $gch39=$36;
      var $marked40=(($gch39+5)|0);
      var $37=HEAP8[($marked40)];
      var $conv41=(($37)&255);
      var $and42=$conv41 & 4;
      var $tobool43=(($and42)|0)!=0;
      if ($tobool43) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $38=$L_addr;
      var $39=$obj;
      var $value_45=(($39)|0);
      var $gc46=$value_45;
      var $40=HEAP32[(($gc46)>>2)];
      var $u47=$40;
      var $41=$u47;
      var $42=$mt;
      var $43=$42;
      _luaC_barrier_($38, $41, $43);
      label = 16; break;
    case 16: 
      var $44=$L_addr;
      var $45=$obj;
      var $value_49=(($45)|0);
      var $gc50=$value_49;
      var $46=HEAP32[(($gc50)>>2)];
      var $47=$mt;
      _luaC_checkfinalizer($44, $46, $47);
      label = 17; break;
    case 17: 
      label = 19; break;
    case 18: 
      var $48=$mt;
      var $49=$obj;
      var $tt_52=(($49+8)|0);
      var $50=HEAP32[(($tt_52)>>2)];
      var $and53=$50 & 15;
      var $51=$L_addr;
      var $l_G=(($51+12)|0);
      var $52=HEAP32[(($l_G)>>2)];
      var $mt54=(($52+232)|0);
      var $arrayidx=(($mt54+($and53<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$48;
      label = 19; break;
    case 19: 
      var $53=$L_addr;
      var $top55=(($53+8)|0);
      var $54=HEAP32[(($top55)>>2)];
      var $incdec_ptr=((($54)-(12))|0);
      HEAP32[(($top55)>>2)]=$incdec_ptr;

      return 1;
  }

}
Module["_lua_setmetatable"] = _lua_setmetatable;_lua_setmetatable["X"]=1;

function _lua_setuservalue($L, $idx) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $idx_addr;
      var $o;
      $L_addr=$L;
      $idx_addr=$idx;
      var $0=$L_addr;
      var $1=$idx_addr;
      var $call=_index2addr($0, $1);
      $o=$call;
      var $2=$L_addr;
      var $top=(($2+8)|0);
      var $3=HEAP32[(($top)>>2)];
      var $add_ptr=((($3)-(12))|0);
      var $tt_=(($add_ptr+8)|0);
      var $4=HEAP32[(($tt_)>>2)];
      var $cmp=(($4)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$o;
      var $value_=(($5)|0);
      var $gc=$value_;
      var $6=HEAP32[(($gc)>>2)];
      var $u=$6;
      var $uv=$u;
      var $env=(($uv+12)|0);
      HEAP32[(($env)>>2)]=0;
      label = 8; break;
    case 4: 
      var $7=$L_addr;
      var $top1=(($7+8)|0);
      var $8=HEAP32[(($top1)>>2)];
      var $add_ptr2=((($8)-(12))|0);
      var $value_3=(($add_ptr2)|0);
      var $gc4=$value_3;
      var $9=HEAP32[(($gc4)>>2)];
      var $h=$9;
      var $10=$o;
      var $value_5=(($10)|0);
      var $gc6=$value_5;
      var $11=HEAP32[(($gc6)>>2)];
      var $u7=$11;
      var $uv8=$u7;
      var $env9=(($uv8+12)|0);
      HEAP32[(($env9)>>2)]=$h;
      var $12=$L_addr;
      var $top10=(($12+8)|0);
      var $13=HEAP32[(($top10)>>2)];
      var $add_ptr11=((($13)-(12))|0);
      var $value_12=(($add_ptr11)|0);
      var $gc13=$value_12;
      var $14=HEAP32[(($gc13)>>2)];
      var $h14=$14;
      var $15=$h14;
      var $gch=$15;
      var $marked=(($gch+5)|0);
      var $16=HEAP8[($marked)];
      var $conv=(($16)&255);
      var $and=$conv & 3;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $17=$o;
      var $value_15=(($17)|0);
      var $gc16=$value_15;
      var $18=HEAP32[(($gc16)>>2)];
      var $gch17=$18;
      var $marked18=(($gch17+5)|0);
      var $19=HEAP8[($marked18)];
      var $conv19=(($19)&255);
      var $and20=$conv19 & 4;
      var $tobool21=(($and20)|0)!=0;
      if ($tobool21) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $20=$L_addr;
      var $21=$o;
      var $value_23=(($21)|0);
      var $gc24=$value_23;
      var $22=HEAP32[(($gc24)>>2)];
      var $23=$L_addr;
      var $top25=(($23+8)|0);
      var $24=HEAP32[(($top25)>>2)];
      var $add_ptr26=((($24)-(12))|0);
      var $value_27=(($add_ptr26)|0);
      var $gc28=$value_27;
      var $25=HEAP32[(($gc28)>>2)];
      var $h29=$25;
      var $26=$h29;
      _luaC_barrier_($20, $22, $26);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $27=$L_addr;
      var $top31=(($27+8)|0);
      var $28=HEAP32[(($top31)>>2)];
      var $incdec_ptr=((($28)-(12))|0);
      HEAP32[(($top31)>>2)]=$incdec_ptr;

      return;
  }

}
_lua_setuservalue["X"]=1;

function _lua_callk($L, $nargs, $nresults, $ctx, $k) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $nargs_addr;
      var $nresults_addr;
      var $ctx_addr;
      var $k_addr;
      var $func;
      $L_addr=$L;
      $nargs_addr=$nargs;
      $nresults_addr=$nresults;
      $ctx_addr=$ctx;
      $k_addr=$k;
      var $0=$L_addr;
      var $top=(($0+8)|0);
      var $1=HEAP32[(($top)>>2)];
      var $2=$nargs_addr;
      var $add=((($2)+(1))|0);
      var $idx_neg=(((-$add))|0);
      var $add_ptr=(($1+((($idx_neg)*(12))&-1))|0);
      $func=$add_ptr;
      var $3=$k_addr;
      var $cmp=(($3)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $4=$L_addr;
      var $nny=(($4+36)|0);
      var $5=HEAP16[(($nny)>>1)];
      var $conv=(($5)&65535);
      var $cmp1=(($conv)|0)==0;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $6=$k_addr;
      var $7=$L_addr;
      var $ci=(($7+16)|0);
      var $8=HEAP32[(($ci)>>2)];
      var $u=(($8+24)|0);
      var $c=$u;
      var $k3=(($c+4)|0);
      HEAP32[(($k3)>>2)]=$6;
      var $9=$ctx_addr;
      var $10=$L_addr;
      var $ci4=(($10+16)|0);
      var $11=HEAP32[(($ci4)>>2)];
      var $u5=(($11+24)|0);
      var $c6=$u5;
      var $ctx7=(($c6)|0);
      HEAP32[(($ctx7)>>2)]=$9;
      var $12=$L_addr;
      var $13=$func;
      var $14=$nresults_addr;
      _luaD_call($12, $13, $14, 1);
      label = 6; break;
    case 5: 
      var $15=$L_addr;
      var $16=$func;
      var $17=$nresults_addr;
      _luaD_call($15, $16, $17, 0);
      label = 6; break;
    case 6: 
      var $18=$nresults_addr;
      var $cmp8=(($18)|0)==-1;
      if ($cmp8) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $19=$L_addr;
      var $ci11=(($19+16)|0);
      var $20=HEAP32[(($ci11)>>2)];
      var $top12=(($20+4)|0);
      var $21=HEAP32[(($top12)>>2)];
      var $22=$L_addr;
      var $top13=(($22+8)|0);
      var $23=HEAP32[(($top13)>>2)];
      var $cmp14=(($21)>>>0) < (($23)>>>0);
      if ($cmp14) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $24=$L_addr;
      var $top17=(($24+8)|0);
      var $25=HEAP32[(($top17)>>2)];
      var $26=$L_addr;
      var $ci18=(($26+16)|0);
      var $27=HEAP32[(($ci18)>>2)];
      var $top19=(($27+4)|0);
      HEAP32[(($top19)>>2)]=$25;
      label = 9; break;
    case 9: 

      return;
  }

}
_lua_callk["X"]=1;

function _lua_pcallk($L, $nargs, $nresults, $errfunc, $ctx, $k) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; _memset(__stackBase__, 0, 8);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $nargs_addr;
      var $nresults_addr;
      var $errfunc_addr;
      var $ctx_addr;
      var $k_addr;
      var $c=__stackBase__;
      var $status;
      var $func;
      var $o;
      var $ci;
      $L_addr=$L;
      $nargs_addr=$nargs;
      $nresults_addr=$nresults;
      $errfunc_addr=$errfunc;
      $ctx_addr=$ctx;
      $k_addr=$k;
      var $0=$errfunc_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $func=0;
      label = 5; break;
    case 4: 
      var $1=$L_addr;
      var $2=$errfunc_addr;
      var $call=_index2addr($1, $2);
      $o=$call;
      var $3=$o;
      var $4=$3;
      var $5=$L_addr;
      var $stack=(($5+28)|0);
      var $6=HEAP32[(($stack)>>2)];
      var $7=$6;
      var $sub_ptr_lhs_cast=$4;
      var $sub_ptr_rhs_cast=$7;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $func=$sub_ptr_sub;
      label = 5; break;
    case 5: 
      var $8=$L_addr;
      var $top=(($8+8)|0);
      var $9=HEAP32[(($top)>>2)];
      var $10=$nargs_addr;
      var $add=((($10)+(1))|0);
      var $idx_neg=(((-$add))|0);
      var $add_ptr=(($9+((($idx_neg)*(12))&-1))|0);
      var $func1=(($c)|0);
      HEAP32[(($func1)>>2)]=$add_ptr;
      var $11=$k_addr;
      var $cmp2=(($11)|0)==0;
      if ($cmp2) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $12=$L_addr;
      var $nny=(($12+36)|0);
      var $13=HEAP16[(($nny)>>1)];
      var $conv=(($13)&65535);
      var $cmp3=(($conv)|0) > 0;
      if ($cmp3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $14=$nresults_addr;
      var $nresults6=(($c+4)|0);
      HEAP32[(($nresults6)>>2)]=$14;
      var $15=$L_addr;
      var $16=$c;
      var $func7=(($c)|0);
      var $17=HEAP32[(($func7)>>2)];
      var $18=$17;
      var $19=$L_addr;
      var $stack8=(($19+28)|0);
      var $20=HEAP32[(($stack8)>>2)];
      var $21=$20;
      var $sub_ptr_lhs_cast9=$18;
      var $sub_ptr_rhs_cast10=$21;
      var $sub_ptr_sub11=((($sub_ptr_lhs_cast9)-($sub_ptr_rhs_cast10))|0);
      var $22=$func;
      var $call12=_luaD_pcall($15, 64, $16, $sub_ptr_sub11, $22);
      $status=$call12;
      label = 9; break;
    case 8: 
      var $23=$L_addr;
      var $ci14=(($23+16)|0);
      var $24=HEAP32[(($ci14)>>2)];
      $ci=$24;
      var $25=$k_addr;
      var $26=$ci;
      var $u=(($26+24)|0);
      var $c15=$u;
      var $k16=(($c15+4)|0);
      HEAP32[(($k16)>>2)]=$25;
      var $27=$ctx_addr;
      var $28=$ci;
      var $u17=(($28+24)|0);
      var $c18=$u17;
      var $ctx19=(($c18)|0);
      HEAP32[(($ctx19)>>2)]=$27;
      var $func20=(($c)|0);
      var $29=HEAP32[(($func20)>>2)];
      var $30=$29;
      var $31=$L_addr;
      var $stack21=(($31+28)|0);
      var $32=HEAP32[(($stack21)>>2)];
      var $33=$32;
      var $sub_ptr_lhs_cast22=$30;
      var $sub_ptr_rhs_cast23=$33;
      var $sub_ptr_sub24=((($sub_ptr_lhs_cast22)-($sub_ptr_rhs_cast23))|0);
      var $34=$ci;
      var $extra=(($34+20)|0);
      HEAP32[(($extra)>>2)]=$sub_ptr_sub24;
      var $35=$L_addr;
      var $allowhook=(($35+41)|0);
      var $36=HEAP8[($allowhook)];
      var $37=$ci;
      var $u25=(($37+24)|0);
      var $c26=$u25;
      var $old_allowhook=(($c26+12)|0);
      HEAP8[($old_allowhook)]=$36;
      var $38=$L_addr;
      var $errfunc27=(($38+68)|0);
      var $39=HEAP32[(($errfunc27)>>2)];
      var $40=$ci;
      var $u28=(($40+24)|0);
      var $c29=$u28;
      var $old_errfunc=(($c29+8)|0);
      HEAP32[(($old_errfunc)>>2)]=$39;
      var $41=$func;
      var $42=$L_addr;
      var $errfunc30=(($42+68)|0);
      HEAP32[(($errfunc30)>>2)]=$41;
      var $43=$ci;
      var $callstatus=(($43+18)|0);
      var $44=HEAP8[($callstatus)];
      var $conv31=(($44)&255);
      var $or=$conv31 | 16;
      var $conv32=(($or) & 255);
      HEAP8[($callstatus)]=$conv32;
      var $45=$L_addr;
      var $func33=(($c)|0);
      var $46=HEAP32[(($func33)>>2)];
      var $47=$nresults_addr;
      _luaD_call($45, $46, $47, 1);
      var $48=$ci;
      var $callstatus34=(($48+18)|0);
      var $49=HEAP8[($callstatus34)];
      var $conv35=(($49)&255);
      var $and=$conv35 & -17;
      var $conv36=(($and) & 255);
      HEAP8[($callstatus34)]=$conv36;
      var $50=$ci;
      var $u37=(($50+24)|0);
      var $c38=$u37;
      var $old_errfunc39=(($c38+8)|0);
      var $51=HEAP32[(($old_errfunc39)>>2)];
      var $52=$L_addr;
      var $errfunc40=(($52+68)|0);
      HEAP32[(($errfunc40)>>2)]=$51;
      $status=0;
      label = 9; break;
    case 9: 
      var $53=$nresults_addr;
      var $cmp42=(($53)|0)==-1;
      if ($cmp42) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $54=$L_addr;
      var $ci44=(($54+16)|0);
      var $55=HEAP32[(($ci44)>>2)];
      var $top45=(($55+4)|0);
      var $56=HEAP32[(($top45)>>2)];
      var $57=$L_addr;
      var $top46=(($57+8)|0);
      var $58=HEAP32[(($top46)>>2)];
      var $cmp47=(($56)>>>0) < (($58)>>>0);
      if ($cmp47) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $59=$L_addr;
      var $top50=(($59+8)|0);
      var $60=HEAP32[(($top50)>>2)];
      var $61=$L_addr;
      var $ci51=(($61+16)|0);
      var $62=HEAP32[(($ci51)>>2)];
      var $top52=(($62+4)|0);
      HEAP32[(($top52)>>2)]=$60;
      label = 12; break;
    case 12: 
      var $63=$status;
      STACKTOP = __stackBase__;
      return $63;
  }

}
Module["_lua_pcallk"] = _lua_pcallk;_lua_pcallk["X"]=1;

function _f_call($L, $ud) {
  var label = 0;


  var $L_addr;
  var $ud_addr;
  var $c;
  $L_addr=$L;
  $ud_addr=$ud;
  var $0=$ud_addr;
  var $1=$0;
  $c=$1;
  var $2=$L_addr;
  var $3=$c;
  var $func=(($3)|0);
  var $4=HEAP32[(($func)>>2)];
  var $5=$c;
  var $nresults=(($5+4)|0);
  var $6=HEAP32[(($nresults)>>2)];
  _luaD_call($2, $4, $6, 0);

  return;
}


function _lua_load($L, $reader, $data, $chunkname, $mode) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; _memset(__stackBase__, 0, 20);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $reader_addr;
      var $data_addr;
      var $chunkname_addr;
      var $mode_addr;
      var $z=__stackBase__;
      var $status;
      var $f;
      var $reg;
      var $gt;
      var $io2;
      var $io1;
      $L_addr=$L;
      $reader_addr=$reader;
      $data_addr=$data;
      $chunkname_addr=$chunkname;
      $mode_addr=$mode;
      var $0=$chunkname_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $chunkname_addr=((5253772)|0);
      label = 4; break;
    case 4: 
      var $1=$L_addr;
      var $2=$reader_addr;
      var $3=$data_addr;
      _luaZ_init($1, $z, $2, $3);
      var $4=$L_addr;
      var $5=$chunkname_addr;
      var $6=$mode_addr;
      var $call=_luaD_protectedparser($4, $z, $5, $6);
      $status=$call;
      var $7=$status;
      var $cmp=(($7)|0)==0;
      if ($cmp) { label = 5; break; } else { label = 12; break; }
    case 5: 
      var $8=$L_addr;
      var $top=(($8+8)|0);
      var $9=HEAP32[(($top)>>2)];
      var $add_ptr=((($9)-(12))|0);
      var $value_=(($add_ptr)|0);
      var $gc=$value_;
      var $10=HEAP32[(($gc)>>2)];
      var $cl=$10;
      var $l=$cl;
      $f=$l;
      var $11=$f;
      var $nupvalues=(($11+6)|0);
      var $12=HEAP8[($nupvalues)];
      var $conv=(($12)&255);
      var $cmp2=(($conv)|0)==1;
      if ($cmp2) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $13=$L_addr;
      var $l_G=(($13+12)|0);
      var $14=HEAP32[(($l_G)>>2)];
      var $l_registry=(($14+36)|0);
      var $value_5=(($l_registry)|0);
      var $gc6=$value_5;
      var $15=HEAP32[(($gc6)>>2)];
      var $h=$15;
      $reg=$h;
      var $16=$reg;
      var $call7=_luaH_getint($16, 2);
      $gt=$call7;
      var $17=$gt;
      $io2=$17;
      var $18=$f;
      var $upvals=(($18+16)|0);
      var $arrayidx=(($upvals)|0);
      var $19=HEAP32[(($arrayidx)>>2)];
      var $v=(($19+8)|0);
      var $20=HEAP32[(($v)>>2)];
      $io1=$20;
      var $21=$io1;
      var $value_8=(($21)|0);
      var $22=$io2;
      var $value_9=(($22)|0);
      var $23=$value_8;
      var $24=$value_9;
      HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];
      var $25=$io2;
      var $tt_=(($25+8)|0);
      var $26=HEAP32[(($tt_)>>2)];
      var $27=$io1;
      var $tt_10=(($27+8)|0);
      HEAP32[(($tt_10)>>2)]=$26;
      var $28=$gt;
      var $tt_11=(($28+8)|0);
      var $29=HEAP32[(($tt_11)>>2)];
      var $and=$29 & 64;
      var $tobool12=(($and)|0)!=0;
      if ($tobool12) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $30=$gt;
      var $value_13=(($30)|0);
      var $gc14=$value_13;
      var $31=HEAP32[(($gc14)>>2)];
      var $gch=$31;
      var $marked=(($gch+5)|0);
      var $32=HEAP8[($marked)];
      var $conv15=(($32)&255);
      var $and16=$conv15 & 3;
      var $tobool17=(($and16)|0)!=0;
      if ($tobool17) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $33=$f;
      var $upvals19=(($33+16)|0);
      var $arrayidx20=(($upvals19)|0);
      var $34=HEAP32[(($arrayidx20)>>2)];
      var $35=$34;
      var $gch21=$35;
      var $marked22=(($gch21+5)|0);
      var $36=HEAP8[($marked22)];
      var $conv23=(($36)&255);
      var $and24=$conv23 & 4;
      var $tobool25=(($and24)|0)!=0;
      if ($tobool25) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $37=$L_addr;
      var $38=$f;
      var $upvals27=(($38+16)|0);
      var $arrayidx28=(($upvals27)|0);
      var $39=HEAP32[(($arrayidx28)>>2)];
      var $40=$39;
      var $41=$gt;
      var $value_29=(($41)|0);
      var $gc30=$value_29;
      var $42=HEAP32[(($gc30)>>2)];
      _luaC_barrier_($37, $40, $42);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $43=$status;
      STACKTOP = __stackBase__;
      return $43;
  }

}
_lua_load["X"]=1;

function _lua_dump($L, $writer, $data) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $writer_addr;
      var $data_addr;
      var $status;
      var $o;
      $L_addr=$L;
      $writer_addr=$writer;
      $data_addr=$data;
      var $0=$L_addr;
      var $top=(($0+8)|0);
      var $1=HEAP32[(($top)>>2)];
      var $add_ptr=((($1)-(12))|0);
      $o=$add_ptr;
      var $2=$o;
      var $tt_=(($2+8)|0);
      var $3=HEAP32[(($tt_)>>2)];
      var $cmp=(($3)|0)==70;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$L_addr;
      var $5=$o;
      var $value_=(($5)|0);
      var $gc=$value_;
      var $6=HEAP32[(($gc)>>2)];
      var $cl=$6;
      var $l=$cl;
      var $p=(($l+12)|0);
      var $7=HEAP32[(($p)>>2)];
      var $8=$writer_addr;
      var $9=$data_addr;
      var $call=_luaU_dump($4, $7, $8, $9, 0);
      $status=$call;
      label = 5; break;
    case 4: 
      $status=1;
      label = 5; break;
    case 5: 
      var $10=$status;

      return $10;
  }

}


function _aux_upvalue($fi, $n, $val, $owner) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $fi_addr;
      var $n_addr;
      var $val_addr;
      var $owner_addr;
      var $f;
      var $f6;
      var $name;
      var $p;
      $fi_addr=$fi;
      $n_addr=$n;
      $val_addr=$val;
      $owner_addr=$owner;
      var $0=$fi_addr;
      var $tt_=(($0+8)|0);
      var $1=HEAP32[(($tt_)>>2)];
      var $and=$1 & 63;
      if ((($and)|0)==38) {
        label = 3; break;
      }
      else if ((($and)|0)==6) {
        label = 9; break;
      }
      else {
      label = 18; break;
      }
      
    case 3: 
      var $2=$fi_addr;
      var $value_=(($2)|0);
      var $gc=$value_;
      var $3=HEAP32[(($gc)>>2)];
      var $cl=$3;
      var $c=$cl;
      $f=$c;
      var $4=$n_addr;
      var $cmp=1 <= (($4)|0);
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $5=$n_addr;
      var $6=$f;
      var $nupvalues=(($6+6)|0);
      var $7=HEAP8[($nupvalues)];
      var $conv=(($7)&255);
      var $cmp1=(($5)|0) <= (($conv)|0);
      if ($cmp1) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $retval=0;
      label = 19; break;
    case 6: 
      var $8=$n_addr;
      var $sub=((($8)-(1))|0);
      var $9=$f;
      var $upvalue=(($9+16)|0);
      var $arrayidx=(($upvalue+((($sub)*(12))&-1))|0);
      var $10=$val_addr;
      HEAP32[(($10)>>2)]=$arrayidx;
      var $11=$owner_addr;
      var $tobool=(($11)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $12=$f;
      var $13=$12;
      var $14=$owner_addr;
      HEAP32[(($14)>>2)]=$13;
      label = 8; break;
    case 8: 
      $retval=((5253768)|0);
      label = 19; break;
    case 9: 
      var $15=$fi_addr;
      var $value_7=(($15)|0);
      var $gc8=$value_7;
      var $16=HEAP32[(($gc8)>>2)];
      var $cl9=$16;
      var $l=$cl9;
      $f6=$l;
      var $17=$f6;
      var $p10=(($17+12)|0);
      var $18=HEAP32[(($p10)>>2)];
      $p=$18;
      var $19=$n_addr;
      var $cmp11=1 <= (($19)|0);
      if ($cmp11) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $20=$n_addr;
      var $21=$p;
      var $sizeupvalues=(($21+40)|0);
      var $22=HEAP32[(($sizeupvalues)>>2)];
      var $cmp14=(($20)|0) <= (($22)|0);
      if ($cmp14) { label = 12; break; } else { label = 11; break; }
    case 11: 
      $retval=0;
      label = 19; break;
    case 12: 
      var $23=$n_addr;
      var $sub18=((($23)-(1))|0);
      var $24=$f6;
      var $upvals=(($24+16)|0);
      var $arrayidx19=(($upvals+($sub18<<2))|0);
      var $25=HEAP32[(($arrayidx19)>>2)];
      var $v=(($25+8)|0);
      var $26=HEAP32[(($v)>>2)];
      var $27=$val_addr;
      HEAP32[(($27)>>2)]=$26;
      var $28=$owner_addr;
      var $tobool20=(($28)|0)!=0;
      if ($tobool20) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $29=$n_addr;
      var $sub22=((($29)-(1))|0);
      var $30=$f6;
      var $upvals23=(($30+16)|0);
      var $arrayidx24=(($upvals23+($sub22<<2))|0);
      var $31=HEAP32[(($arrayidx24)>>2)];
      var $32=$31;
      var $33=$owner_addr;
      HEAP32[(($33)>>2)]=$32;
      label = 14; break;
    case 14: 
      var $34=$n_addr;
      var $sub26=((($34)-(1))|0);
      var $35=$p;
      var $upvalues=(($35+28)|0);
      var $36=HEAP32[(($upvalues)>>2)];
      var $arrayidx27=(($36+($sub26<<3))|0);
      var $name28=(($arrayidx27)|0);
      var $37=HEAP32[(($name28)>>2)];
      $name=$37;
      var $38=$name;
      var $cmp29=(($38)|0)==0;
      if ($cmp29) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $cond = ((5253768)|0);label = 17; break;
    case 16: 
      var $39=$name;
      var $add_ptr=(($39+16)|0);
      var $40=$add_ptr;
      var $cond = $40;label = 17; break;
    case 17: 
      var $cond;
      $retval=$cond;
      label = 19; break;
    case 18: 
      $retval=0;
      label = 19; break;
    case 19: 
      var $41=$retval;

      return $41;
  }

}
_aux_upvalue["X"]=1;

function _lua_gc($L, $what, $data) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $what_addr;
      var $data_addr;
      var $res;
      var $g;
      var $debt;
      $L_addr=$L;
      $what_addr=$what;
      $data_addr=$data;
      $res=0;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      $g=$1;
      var $2=$what_addr;
      if ((($2)|0)==0) {
        label = 3; break;
      }
      else if ((($2)|0)==1) {
        label = 4; break;
      }
      else if ((($2)|0)==2) {
        label = 5; break;
      }
      else if ((($2)|0)==3) {
        label = 6; break;
      }
      else if ((($2)|0)==4) {
        label = 7; break;
      }
      else if ((($2)|0)==5) {
        label = 8; break;
      }
      else if ((($2)|0)==6) {
        label = 16; break;
      }
      else if ((($2)|0)==8) {
        label = 17; break;
      }
      else if ((($2)|0)==7) {
        label = 18; break;
      }
      else if ((($2)|0)==9) {
        label = 19; break;
      }
      else if ((($2)|0)==10) {
        label = 20; break;
      }
      else if ((($2)|0)==11) {
        label = 21; break;
      }
      else {
      label = 22; break;
      }
      
    case 3: 
      var $3=$g;
      var $gcrunning=(($3+55)|0);
      HEAP8[($gcrunning)]=0;
      label = 23; break;
    case 4: 
      var $4=$g;
      _luaE_setdebt($4, 0);
      var $5=$g;
      var $gcrunning2=(($5+55)|0);
      HEAP8[($gcrunning2)]=1;
      label = 23; break;
    case 5: 
      var $6=$L_addr;
      _luaC_fullgc($6, 0);
      label = 23; break;
    case 6: 
      var $7=$g;
      var $totalbytes=(($7+8)|0);
      var $8=HEAP32[(($totalbytes)>>2)];
      var $9=$g;
      var $GCdebt=(($9+12)|0);
      var $10=HEAP32[(($GCdebt)>>2)];
      var $add=((($8)+($10))|0);
      var $shr=$add >>> 10;
      $res=$shr;
      label = 23; break;
    case 7: 
      var $11=$g;
      var $totalbytes6=(($11+8)|0);
      var $12=HEAP32[(($totalbytes6)>>2)];
      var $13=$g;
      var $GCdebt7=(($13+12)|0);
      var $14=HEAP32[(($GCdebt7)>>2)];
      var $add8=((($12)+($14))|0);
      var $and=$add8 & 1023;
      $res=$and;
      label = 23; break;
    case 8: 
      var $15=$g;
      var $gckind=(($15+54)|0);
      var $16=HEAP8[($gckind)];
      var $conv=(($16)&255);
      var $cmp=(($conv)|0)==2;
      if ($cmp) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $17=$g;
      var $GCestimate=(($17+20)|0);
      var $18=HEAP32[(($GCestimate)>>2)];
      var $cmp11=(($18)|0)==0;
      var $conv12=(($cmp11)&1);
      $res=$conv12;
      var $19=$L_addr;
      _luaC_forcestep($19);
      label = 15; break;
    case 10: 
      var $20=$data_addr;
      var $mul=($20<<10);
      var $sub=((($mul)-(1600))|0);
      $debt=$sub;
      var $21=$g;
      var $gcrunning13=(($21+55)|0);
      var $22=HEAP8[($gcrunning13)];
      var $tobool=(($22 << 24) >> 24)!=0;
      if ($tobool) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $23=$g;
      var $GCdebt15=(($23+12)|0);
      var $24=HEAP32[(($GCdebt15)>>2)];
      var $25=$debt;
      var $add16=((($25)+($24))|0);
      $debt=$add16;
      label = 12; break;
    case 12: 
      var $26=$g;
      var $27=$debt;
      _luaE_setdebt($26, $27);
      var $28=$L_addr;
      _luaC_forcestep($28);
      var $29=$g;
      var $gcstate=(($29+53)|0);
      var $30=HEAP8[($gcstate)];
      var $conv17=(($30)&255);
      var $cmp18=(($conv17)|0)==5;
      if ($cmp18) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $res=1;
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 23; break;
    case 16: 
      var $31=$g;
      var $gcpause=(($31+136)|0);
      var $32=HEAP32[(($gcpause)>>2)];
      $res=$32;
      var $33=$data_addr;
      var $34=$g;
      var $gcpause24=(($34+136)|0);
      HEAP32[(($gcpause24)>>2)]=$33;
      label = 23; break;
    case 17: 
      var $35=$g;
      var $gcmajorinc=(($35+140)|0);
      var $36=HEAP32[(($gcmajorinc)>>2)];
      $res=$36;
      var $37=$data_addr;
      var $38=$g;
      var $gcmajorinc26=(($38+140)|0);
      HEAP32[(($gcmajorinc26)>>2)]=$37;
      label = 23; break;
    case 18: 
      var $39=$g;
      var $gcstepmul=(($39+144)|0);
      var $40=HEAP32[(($gcstepmul)>>2)];
      $res=$40;
      var $41=$data_addr;
      var $42=$g;
      var $gcstepmul28=(($42+144)|0);
      HEAP32[(($gcstepmul28)>>2)]=$41;
      label = 23; break;
    case 19: 
      var $43=$g;
      var $gcrunning30=(($43+55)|0);
      var $44=HEAP8[($gcrunning30)];
      var $conv31=(($44)&255);
      $res=$conv31;
      label = 23; break;
    case 20: 
      var $45=$L_addr;
      _luaC_changemode($45, 2);
      label = 23; break;
    case 21: 
      var $46=$L_addr;
      _luaC_changemode($46, 0);
      label = 23; break;
    case 22: 
      $res=-1;
      label = 23; break;
    case 23: 
      var $47=$res;

      return $47;
  }

}
_lua_gc["X"]=1;

function _lua_next($L, $idx) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $idx_addr;
      var $t;
      var $more;
      $L_addr=$L;
      $idx_addr=$idx;
      var $0=$L_addr;
      var $1=$idx_addr;
      var $call=_index2addr($0, $1);
      $t=$call;
      var $2=$L_addr;
      var $3=$t;
      var $value_=(($3)|0);
      var $gc=$value_;
      var $4=HEAP32[(($gc)>>2)];
      var $h=$4;
      var $5=$L_addr;
      var $top=(($5+8)|0);
      var $6=HEAP32[(($top)>>2)];
      var $add_ptr=((($6)-(12))|0);
      var $call1=_luaH_next($2, $h, $add_ptr);
      $more=$call1;
      var $7=$more;
      var $tobool=(($7)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $8=$L_addr;
      var $top2=(($8+8)|0);
      var $9=HEAP32[(($top2)>>2)];
      var $incdec_ptr=(($9+12)|0);
      HEAP32[(($top2)>>2)]=$incdec_ptr;
      label = 5; break;
    case 4: 
      var $10=$L_addr;
      var $top3=(($10+8)|0);
      var $11=HEAP32[(($top3)>>2)];
      var $add_ptr4=((($11)-(12))|0);
      HEAP32[(($top3)>>2)]=$add_ptr4;
      label = 5; break;
    case 5: 
      var $12=$more;

      return $12;
  }

}
Module["_lua_next"] = _lua_next;

function _lua_concat($L, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $n_addr;
      var $io;
      var $x_;
      $L_addr=$L;
      $n_addr=$n;
      var $0=$n_addr;
      var $cmp=(($0)|0) >= 2;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $1=$L_addr;
      var $l_G=(($1+12)|0);
      var $2=HEAP32[(($l_G)>>2)];
      var $GCdebt=(($2+12)|0);
      var $3=HEAP32[(($GCdebt)>>2)];
      var $cmp1=(($3)|0) > 0;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$L_addr;
      _luaC_step($4);
      label = 5; break;
    case 5: 
      var $5=$L_addr;
      var $6=$n_addr;
      _luaV_concat($5, $6);
      label = 9; break;
    case 6: 
      var $7=$n_addr;
      var $cmp3=(($7)|0)==0;
      if ($cmp3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $8=$L_addr;
      var $top=(($8+8)|0);
      var $9=HEAP32[(($top)>>2)];
      $io=$9;
      var $10=$L_addr;
      var $call=_luaS_newlstr($10, ((5253768)|0), 0);
      $x_=$call;
      var $11=$x_;
      var $12=$11;
      var $13=$io;
      var $value_=(($13)|0);
      var $gc=$value_;
      HEAP32[(($gc)>>2)]=$12;
      var $14=$x_;
      var $tsv=$14;
      var $tt=(($tsv+4)|0);
      var $15=HEAP8[($tt)];
      var $conv=(($15)&255);
      var $or=$conv | 64;
      var $16=$io;
      var $tt_=(($16+8)|0);
      HEAP32[(($tt_)>>2)]=$or;
      var $17=$L_addr;
      var $top5=(($17+8)|0);
      var $18=HEAP32[(($top5)>>2)];
      var $incdec_ptr=(($18+12)|0);
      HEAP32[(($top5)>>2)]=$incdec_ptr;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 

      return;
  }

}
_lua_concat["X"]=1;

function _lua_len($L, $idx) {
  var label = 0;


  var $L_addr;
  var $idx_addr;
  var $t;
  $L_addr=$L;
  $idx_addr=$idx;
  var $0=$L_addr;
  var $1=$idx_addr;
  var $call=_index2addr($0, $1);
  $t=$call;
  var $2=$L_addr;
  var $3=$L_addr;
  var $top=(($3+8)|0);
  var $4=HEAP32[(($top)>>2)];
  var $5=$t;
  _luaV_objlen($2, $4, $5);
  var $6=$L_addr;
  var $top1=(($6+8)|0);
  var $7=HEAP32[(($top1)>>2)];
  var $incdec_ptr=(($7+12)|0);
  HEAP32[(($top1)>>2)]=$incdec_ptr;

  return;
}


function _lua_newuserdata($L, $size) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $size_addr;
      var $u;
      var $io;
      $L_addr=$L;
      $size_addr=$size;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      var $GCdebt=(($1+12)|0);
      var $2=HEAP32[(($GCdebt)>>2)];
      var $cmp=(($2)|0) > 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$L_addr;
      _luaC_step($3);
      label = 4; break;
    case 4: 
      var $4=$L_addr;
      var $5=$size_addr;
      var $call=_luaS_newudata($4, $5, 0);
      $u=$call;
      var $6=$L_addr;
      var $top=(($6+8)|0);
      var $7=HEAP32[(($top)>>2)];
      $io=$7;
      var $8=$u;
      var $9=$8;
      var $10=$io;
      var $value_=(($10)|0);
      var $gc=$value_;
      HEAP32[(($gc)>>2)]=$9;
      var $11=$io;
      var $tt_=(($11+8)|0);
      HEAP32[(($tt_)>>2)]=71;
      var $12=$L_addr;
      var $top1=(($12+8)|0);
      var $13=HEAP32[(($top1)>>2)];
      var $incdec_ptr=(($13+12)|0);
      HEAP32[(($top1)>>2)]=$incdec_ptr;
      var $14=$u;
      var $add_ptr=(($14+20)|0);
      var $15=$add_ptr;

      return $15;
  }

}


function _lua_getupvalue($L, $funcindex, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $funcindex_addr;
      var $n_addr;
      var $name;
      var $val=__stackBase__;
      var $io2;
      var $io1;
      $L_addr=$L;
      $funcindex_addr=$funcindex;
      $n_addr=$n;
      HEAP32[(($val)>>2)]=0;
      var $0=$L_addr;
      var $1=$funcindex_addr;
      var $call=_index2addr($0, $1);
      var $2=$n_addr;
      var $call1=_aux_upvalue($call, $2, $val, 0);
      $name=$call1;
      var $3=$name;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=HEAP32[(($val)>>2)];
      $io2=$4;
      var $5=$L_addr;
      var $top=(($5+8)|0);
      var $6=HEAP32[(($top)>>2)];
      $io1=$6;
      var $7=$io1;
      var $value_=(($7)|0);
      var $8=$io2;
      var $value_2=(($8)|0);
      var $9=$value_;
      var $10=$value_2;
      HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];
      var $11=$io2;
      var $tt_=(($11+8)|0);
      var $12=HEAP32[(($tt_)>>2)];
      var $13=$io1;
      var $tt_3=(($13+8)|0);
      HEAP32[(($tt_3)>>2)]=$12;
      var $14=$L_addr;
      var $top4=(($14+8)|0);
      var $15=HEAP32[(($top4)>>2)];
      var $incdec_ptr=(($15+12)|0);
      HEAP32[(($top4)>>2)]=$incdec_ptr;
      label = 4; break;
    case 4: 
      var $16=$name;
      STACKTOP = __stackBase__;
      return $16;
  }

}


function _lua_setupvalue($L, $funcindex, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; _memset(__stackBase__, 0, 8);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $funcindex_addr;
      var $n_addr;
      var $name;
      var $val=__stackBase__;
      var $owner=(__stackBase__)+(4);
      var $fi;
      var $io2;
      var $io1;
      $L_addr=$L;
      $funcindex_addr=$funcindex;
      $n_addr=$n;
      HEAP32[(($val)>>2)]=0;
      HEAP32[(($owner)>>2)]=0;
      var $0=$L_addr;
      var $1=$funcindex_addr;
      var $call=_index2addr($0, $1);
      $fi=$call;
      var $2=$fi;
      var $3=$n_addr;
      var $call1=_aux_upvalue($2, $3, $val, $owner);
      $name=$call1;
      var $4=$name;
      var $tobool=(($4)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $5=$L_addr;
      var $top=(($5+8)|0);
      var $6=HEAP32[(($top)>>2)];
      var $incdec_ptr=((($6)-(12))|0);
      HEAP32[(($top)>>2)]=$incdec_ptr;
      var $7=$L_addr;
      var $top2=(($7+8)|0);
      var $8=HEAP32[(($top2)>>2)];
      $io2=$8;
      var $9=HEAP32[(($val)>>2)];
      $io1=$9;
      var $10=$io1;
      var $value_=(($10)|0);
      var $11=$io2;
      var $value_3=(($11)|0);
      var $12=$value_;
      var $13=$value_3;
      HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];
      var $14=$io2;
      var $tt_=(($14+8)|0);
      var $15=HEAP32[(($tt_)>>2)];
      var $16=$io1;
      var $tt_4=(($16+8)|0);
      HEAP32[(($tt_4)>>2)]=$15;
      var $17=$L_addr;
      var $top5=(($17+8)|0);
      var $18=HEAP32[(($top5)>>2)];
      var $tt_6=(($18+8)|0);
      var $19=HEAP32[(($tt_6)>>2)];
      var $and=$19 & 64;
      var $tobool7=(($and)|0)!=0;
      if ($tobool7) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $20=$L_addr;
      var $top8=(($20+8)|0);
      var $21=HEAP32[(($top8)>>2)];
      var $value_9=(($21)|0);
      var $gc=$value_9;
      var $22=HEAP32[(($gc)>>2)];
      var $gch=$22;
      var $marked=(($gch+5)|0);
      var $23=HEAP8[($marked)];
      var $conv=(($23)&255);
      var $and10=$conv & 3;
      var $tobool11=(($and10)|0)!=0;
      if ($tobool11) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $24=HEAP32[(($owner)>>2)];
      var $gch13=$24;
      var $marked14=(($gch13+5)|0);
      var $25=HEAP8[($marked14)];
      var $conv15=(($25)&255);
      var $and16=$conv15 & 4;
      var $tobool17=(($and16)|0)!=0;
      if ($tobool17) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $26=$L_addr;
      var $27=HEAP32[(($owner)>>2)];
      var $28=$L_addr;
      var $top19=(($28+8)|0);
      var $29=HEAP32[(($top19)>>2)];
      var $value_20=(($29)|0);
      var $gc21=$value_20;
      var $30=HEAP32[(($gc21)>>2)];
      _luaC_barrier_($26, $27, $30);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $31=$name;
      STACKTOP = __stackBase__;
      return $31;
  }

}
_lua_setupvalue["X"]=1;

function _lua_upvalueid($L, $fidx, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $fidx_addr;
      var $n_addr;
      var $fi;
      var $f;
      $L_addr=$L;
      $fidx_addr=$fidx;
      $n_addr=$n;
      var $0=$L_addr;
      var $1=$fidx_addr;
      var $call=_index2addr($0, $1);
      $fi=$call;
      var $2=$fi;
      var $tt_=(($2+8)|0);
      var $3=HEAP32[(($tt_)>>2)];
      var $and=$3 & 63;
      if ((($and)|0)==6) {
        label = 3; break;
      }
      else if ((($and)|0)==38) {
        label = 4; break;
      }
      else {
      label = 5; break;
      }
      
    case 3: 
      var $4=$L_addr;
      var $5=$fidx_addr;
      var $6=$n_addr;
      var $call1=_getupvalref($4, $5, $6, 0);
      var $7=HEAP32[(($call1)>>2)];
      var $8=$7;
      $retval=$8;
      label = 6; break;
    case 4: 
      var $9=$fi;
      var $value_=(($9)|0);
      var $gc=$value_;
      var $10=HEAP32[(($gc)>>2)];
      var $cl=$10;
      var $c=$cl;
      $f=$c;
      var $11=$n_addr;
      var $sub=((($11)-(1))|0);
      var $12=$f;
      var $upvalue=(($12+16)|0);
      var $arrayidx=(($upvalue+((($sub)*(12))&-1))|0);
      var $13=$arrayidx;
      $retval=$13;
      label = 6; break;
    case 5: 
      $retval=0;
      label = 6; break;
    case 6: 
      var $14=$retval;

      return $14;
  }

}


function _getupvalref($L, $fidx, $n, $pf) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $fidx_addr;
      var $n_addr;
      var $pf_addr;
      var $f;
      var $fi;
      $L_addr=$L;
      $fidx_addr=$fidx;
      $n_addr=$n;
      $pf_addr=$pf;
      var $0=$L_addr;
      var $1=$fidx_addr;
      var $call=_index2addr($0, $1);
      $fi=$call;
      var $2=$fi;
      var $value_=(($2)|0);
      var $gc=$value_;
      var $3=HEAP32[(($gc)>>2)];
      var $cl=$3;
      var $l=$cl;
      $f=$l;
      var $4=$pf_addr;
      var $tobool=(($4)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$f;
      var $6=$pf_addr;
      HEAP32[(($6)>>2)]=$5;
      label = 4; break;
    case 4: 
      var $7=$n_addr;
      var $sub=((($7)-(1))|0);
      var $8=$f;
      var $upvals=(($8+16)|0);
      var $arrayidx=(($upvals+($sub<<2))|0);

      return $arrayidx;
  }

}


function _lua_upvaluejoin($L, $fidx1, $n1, $fidx2, $n2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $fidx1_addr;
      var $n1_addr;
      var $fidx2_addr;
      var $n2_addr;
      var $f1=__stackBase__;
      var $up1;
      var $up2;
      $L_addr=$L;
      $fidx1_addr=$fidx1;
      $n1_addr=$n1;
      $fidx2_addr=$fidx2;
      $n2_addr=$n2;
      var $0=$L_addr;
      var $1=$fidx1_addr;
      var $2=$n1_addr;
      var $call=_getupvalref($0, $1, $2, $f1);
      $up1=$call;
      var $3=$L_addr;
      var $4=$fidx2_addr;
      var $5=$n2_addr;
      var $call1=_getupvalref($3, $4, $5, 0);
      $up2=$call1;
      var $6=$up2;
      var $7=HEAP32[(($6)>>2)];
      var $8=$up1;
      HEAP32[(($8)>>2)]=$7;
      var $9=$up2;
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      var $gch=$11;
      var $marked=(($gch+5)|0);
      var $12=HEAP8[($marked)];
      var $conv=(($12)&255);
      var $and=$conv & 3;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $13=HEAP32[(($f1)>>2)];
      var $14=$13;
      var $gch2=$14;
      var $marked3=(($gch2+5)|0);
      var $15=HEAP8[($marked3)];
      var $conv4=(($15)&255);
      var $and5=$conv4 & 4;
      var $tobool6=(($and5)|0)!=0;
      if ($tobool6) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $16=$L_addr;
      var $17=HEAP32[(($f1)>>2)];
      var $18=$17;
      var $19=$up2;
      var $20=HEAP32[(($19)>>2)];
      var $21=$20;
      _luaC_barrier_($16, $18, $21);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
  }

}
_lua_upvaluejoin["X"]=1;

function _lua_error($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      $L_addr=$L;
      var $0=$L_addr;
      _luaG_errormsg($0);

    case 3: 
      var $1=$retval;

      return $1;
  }

}


function _luaK_getlabel($fs) {
  var label = 0;


  var $fs_addr;
  $fs_addr=$fs;
  var $0=$fs_addr;
  var $pc=(($0+20)|0);
  var $1=HEAP32[(($pc)>>2)];
  var $2=$fs_addr;
  var $lasttarget=(($2+24)|0);
  HEAP32[(($lasttarget)>>2)]=$1;
  var $3=$fs_addr;
  var $pc1=(($3+20)|0);
  var $4=HEAP32[(($pc1)>>2)];

  return $4;
}


function _getjump($fs, $pc) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $fs_addr;
      var $pc_addr;
      var $offset;
      $fs_addr=$fs;
      $pc_addr=$pc;
      var $0=$pc_addr;
      var $1=$fs_addr;
      var $f=(($1)|0);
      var $2=HEAP32[(($f)>>2)];
      var $code=(($2+12)|0);
      var $3=HEAP32[(($code)>>2)];
      var $arrayidx=(($3+($0<<2))|0);
      var $4=HEAP32[(($arrayidx)>>2)];
      var $shr=$4 >>> 14;
      var $and=$shr & 262143;
      var $sub=((($and)-(131071))|0);
      $offset=$sub;
      var $5=$offset;
      var $cmp=(($5)|0)==-1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=-1;
      label = 5; break;
    case 4: 
      var $6=$pc_addr;
      var $add=((($6)+(1))|0);
      var $7=$offset;
      var $add1=((($add)+($7))|0);
      $retval=$add1;
      label = 5; break;
    case 5: 
      var $8=$retval;

      return $8;
  }

}


function _luaK_nil($fs, $from, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $from_addr;
      var $n_addr;
      var $previous;
      var $l;
      var $pfrom;
      var $pl;
      $fs_addr=$fs;
      $from_addr=$from;
      $n_addr=$n;
      var $0=$from_addr;
      var $1=$n_addr;
      var $add=((($0)+($1))|0);
      var $sub=((($add)-(1))|0);
      $l=$sub;
      var $2=$fs_addr;
      var $pc=(($2+20)|0);
      var $3=HEAP32[(($pc)>>2)];
      var $4=$fs_addr;
      var $lasttarget=(($4+24)|0);
      var $5=HEAP32[(($lasttarget)>>2)];
      var $cmp=(($3)|0) > (($5)|0);
      if ($cmp) { label = 3; break; } else { label = 15; break; }
    case 3: 
      var $6=$fs_addr;
      var $pc1=(($6+20)|0);
      var $7=HEAP32[(($pc1)>>2)];
      var $sub2=((($7)-(1))|0);
      var $8=$fs_addr;
      var $f=(($8)|0);
      var $9=HEAP32[(($f)>>2)];
      var $code=(($9+12)|0);
      var $10=HEAP32[(($code)>>2)];
      var $arrayidx=(($10+($sub2<<2))|0);
      $previous=$arrayidx;
      var $11=$previous;
      var $12=HEAP32[(($11)>>2)];
      var $shr=$12 >>> 0;
      var $and=$shr & 63;
      var $cmp3=(($and)|0)==4;
      if ($cmp3) { label = 4; break; } else { label = 14; break; }
    case 4: 
      var $13=$previous;
      var $14=HEAP32[(($13)>>2)];
      var $shr5=$14 >>> 6;
      var $and6=$shr5 & 255;
      $pfrom=$and6;
      var $15=$pfrom;
      var $16=$previous;
      var $17=HEAP32[(($16)>>2)];
      var $shr7=$17 >>> 23;
      var $and8=$shr7 & 511;
      var $add9=((($15)+($and8))|0);
      $pl=$add9;
      var $18=$pfrom;
      var $19=$from_addr;
      var $cmp10=(($18)|0) <= (($19)|0);
      if ($cmp10) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $20=$from_addr;
      var $21=$pl;
      var $add11=((($21)+(1))|0);
      var $cmp12=(($20)|0) <= (($add11)|0);
      if ($cmp12) { label = 8; break; } else { label = 6; break; }
    case 6: 
      var $22=$from_addr;
      var $23=$pfrom;
      var $cmp13=(($22)|0) <= (($23)|0);
      if ($cmp13) { label = 7; break; } else { label = 13; break; }
    case 7: 
      var $24=$pfrom;
      var $25=$l;
      var $add15=((($25)+(1))|0);
      var $cmp16=(($24)|0) <= (($add15)|0);
      if ($cmp16) { label = 8; break; } else { label = 13; break; }
    case 8: 
      var $26=$pfrom;
      var $27=$from_addr;
      var $cmp18=(($26)|0) < (($27)|0);
      if ($cmp18) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $28=$pfrom;
      $from_addr=$28;
      label = 10; break;
    case 10: 
      var $29=$pl;
      var $30=$l;
      var $cmp20=(($29)|0) > (($30)|0);
      if ($cmp20) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $31=$pl;
      $l=$31;
      label = 12; break;
    case 12: 
      var $32=$previous;
      var $33=HEAP32[(($32)>>2)];
      var $and23=$33 & -16321;
      var $34=$from_addr;
      var $shl=$34 << 6;
      var $and24=$shl & 16320;
      var $or=$and23 | $and24;
      var $35=$previous;
      HEAP32[(($35)>>2)]=$or;
      var $36=$previous;
      var $37=HEAP32[(($36)>>2)];
      var $and25=$37 & 8388607;
      var $38=$l;
      var $39=$from_addr;
      var $sub26=((($38)-($39))|0);
      var $shl27=$sub26 << 23;
      var $and28=$shl27 & -8388608;
      var $or29=$and25 | $and28;
      var $40=$previous;
      HEAP32[(($40)>>2)]=$or29;
      label = 16; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $41=$fs_addr;
      var $42=$from_addr;
      var $43=$n_addr;
      var $sub33=((($43)-(1))|0);
      var $call=_luaK_codeABC($41, 4, $42, $sub33, 0);
      label = 16; break;
    case 16: 

      return;
  }

}
_luaK_nil["X"]=1;

function _luaK_codeABC($fs, $o, $a, $b, $c) {
  var label = 0;


  var $fs_addr;
  var $o_addr;
  var $a_addr;
  var $b_addr;
  var $c_addr;
  $fs_addr=$fs;
  $o_addr=$o;
  $a_addr=$a;
  $b_addr=$b;
  $c_addr=$c;
  var $0=$fs_addr;
  var $1=$o_addr;
  var $shl=$1 << 0;
  var $2=$a_addr;
  var $shl1=$2 << 6;
  var $or=$shl | $shl1;
  var $3=$b_addr;
  var $shl2=$3 << 23;
  var $or3=$or | $shl2;
  var $4=$c_addr;
  var $shl4=$4 << 14;
  var $or5=$or3 | $shl4;
  var $call=_luaK_code($0, $or5);

  return $call;
}


function _luaK_jump($fs) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);

  var $fs_addr;
  var $jpc;
  var $j=__stackBase__;
  $fs_addr=$fs;
  var $0=$fs_addr;
  var $jpc1=(($0+28)|0);
  var $1=HEAP32[(($jpc1)>>2)];
  $jpc=$1;
  var $2=$fs_addr;
  var $jpc2=(($2+28)|0);
  HEAP32[(($jpc2)>>2)]=-1;
  var $3=$fs_addr;
  var $call=_luaK_codeABx($3, 23, 0, 131070);
  HEAP32[(($j)>>2)]=$call;
  var $4=$fs_addr;
  var $5=$jpc;
  _luaK_concat($4, $j, $5);
  var $6=HEAP32[(($j)>>2)];
  STACKTOP = __stackBase__;
  return $6;
}


function _luaK_codeABx($fs, $o, $a, $bc) {
  var label = 0;


  var $fs_addr;
  var $o_addr;
  var $a_addr;
  var $bc_addr;
  $fs_addr=$fs;
  $o_addr=$o;
  $a_addr=$a;
  $bc_addr=$bc;
  var $0=$fs_addr;
  var $1=$o_addr;
  var $shl=$1 << 0;
  var $2=$a_addr;
  var $shl1=$2 << 6;
  var $or=$shl | $shl1;
  var $3=$bc_addr;
  var $shl2=$3 << 14;
  var $or3=$or | $shl2;
  var $call=_luaK_code($0, $or3);

  return $call;
}


function _luaK_concat($fs, $l1, $l2) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $l1_addr;
      var $l2_addr;
      var $list;
      var $next;
      $fs_addr=$fs;
      $l1_addr=$l1;
      $l2_addr=$l2;
      var $0=$l2_addr;
      var $cmp=(($0)|0)==-1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 11; break;
    case 4: 
      var $1=$l1_addr;
      var $2=HEAP32[(($1)>>2)];
      var $cmp1=(($2)|0)==-1;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=$l2_addr;
      var $4=$l1_addr;
      HEAP32[(($4)>>2)]=$3;
      label = 10; break;
    case 6: 
      var $5=$l1_addr;
      var $6=HEAP32[(($5)>>2)];
      $list=$6;
      label = 7; break;
    case 7: 
      var $7=$fs_addr;
      var $8=$list;
      var $call=_getjump($7, $8);
      $next=$call;
      var $cmp4=(($call)|0)!=-1;
      if ($cmp4) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $9=$next;
      $list=$9;
      label = 7; break;
    case 9: 
      var $10=$fs_addr;
      var $11=$list;
      var $12=$l2_addr;
      _fixjump($10, $11, $12);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 

      return;
  }

}


function _luaK_ret($fs, $first, $nret) {
  var label = 0;


  var $fs_addr;
  var $first_addr;
  var $nret_addr;
  $fs_addr=$fs;
  $first_addr=$first;
  $nret_addr=$nret;
  var $0=$fs_addr;
  var $1=$first_addr;
  var $2=$nret_addr;
  var $add=((($2)+(1))|0);
  var $call=_luaK_codeABC($0, 31, $1, $add, 0);

  return;
}


function _luaK_patchlist($fs, $list, $target) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $list_addr;
      var $target_addr;
      $fs_addr=$fs;
      $list_addr=$list;
      $target_addr=$target;
      var $0=$target_addr;
      var $1=$fs_addr;
      var $pc=(($1+20)|0);
      var $2=HEAP32[(($pc)>>2)];
      var $cmp=(($0)|0)==(($2)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$fs_addr;
      var $4=$list_addr;
      _luaK_patchtohere($3, $4);
      label = 5; break;
    case 4: 
      var $5=$fs_addr;
      var $6=$list_addr;
      var $7=$target_addr;
      var $8=$target_addr;
      _patchlistaux($5, $6, $7, 255, $8);
      label = 5; break;
    case 5: 

      return;
  }

}


function _luaK_patchtohere($fs, $list) {
  var label = 0;


  var $fs_addr;
  var $list_addr;
  $fs_addr=$fs;
  $list_addr=$list;
  var $0=$fs_addr;
  var $call=_luaK_getlabel($0);
  var $1=$fs_addr;
  var $2=$fs_addr;
  var $jpc=(($2+28)|0);
  var $3=$list_addr;
  _luaK_concat($1, $jpc, $3);

  return;
}


function _patchlistaux($fs, $list, $vtarget, $reg, $dtarget) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $list_addr;
      var $vtarget_addr;
      var $reg_addr;
      var $dtarget_addr;
      var $next;
      $fs_addr=$fs;
      $list_addr=$list;
      $vtarget_addr=$vtarget;
      $reg_addr=$reg;
      $dtarget_addr=$dtarget;
      label = 3; break;
    case 3: 
      var $0=$list_addr;
      var $cmp=(($0)|0)!=-1;
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $1=$fs_addr;
      var $2=$list_addr;
      var $call=_getjump($1, $2);
      $next=$call;
      var $3=$fs_addr;
      var $4=$list_addr;
      var $5=$reg_addr;
      var $call1=_patchtestreg($3, $4, $5);
      var $tobool=(($call1)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$fs_addr;
      var $7=$list_addr;
      var $8=$vtarget_addr;
      _fixjump($6, $7, $8);
      label = 7; break;
    case 6: 
      var $9=$fs_addr;
      var $10=$list_addr;
      var $11=$dtarget_addr;
      _fixjump($9, $10, $11);
      label = 7; break;
    case 7: 
      var $12=$next;
      $list_addr=$12;
      label = 3; break;
    case 8: 

      return;
  }

}


function _luaK_patchclose($fs, $list, $level) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $list_addr;
      var $level_addr;
      var $next;
      $fs_addr=$fs;
      $list_addr=$list;
      $level_addr=$level;
      var $0=$level_addr;
      var $inc=((($0)+(1))|0);
      $level_addr=$inc;
      label = 3; break;
    case 3: 
      var $1=$list_addr;
      var $cmp=(($1)|0)!=-1;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $2=$fs_addr;
      var $3=$list_addr;
      var $call=_getjump($2, $3);
      $next=$call;
      var $4=$list_addr;
      var $5=$fs_addr;
      var $f=(($5)|0);
      var $6=HEAP32[(($f)>>2)];
      var $code=(($6+12)|0);
      var $7=HEAP32[(($code)>>2)];
      var $arrayidx=(($7+($4<<2))|0);
      var $8=HEAP32[(($arrayidx)>>2)];
      var $and=$8 & -16321;
      var $9=$level_addr;
      var $shl=$9 << 6;
      var $and1=$shl & 16320;
      var $or=$and | $and1;
      var $10=$list_addr;
      var $11=$fs_addr;
      var $f2=(($11)|0);
      var $12=HEAP32[(($f2)>>2)];
      var $code3=(($12+12)|0);
      var $13=HEAP32[(($code3)>>2)];
      var $arrayidx4=(($13+($10<<2))|0);
      HEAP32[(($arrayidx4)>>2)]=$or;
      var $14=$next;
      $list_addr=$14;
      label = 3; break;
    case 5: 

      return;
  }

}


function _luaK_code($fs, $i) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $i_addr;
      var $f;
      $fs_addr=$fs;
      $i_addr=$i;
      var $0=$fs_addr;
      var $f1=(($0)|0);
      var $1=HEAP32[(($f1)>>2)];
      $f=$1;
      var $2=$fs_addr;
      _dischargejpc($2);
      var $3=$fs_addr;
      var $pc=(($3+20)|0);
      var $4=HEAP32[(($pc)>>2)];
      var $add=((($4)+(1))|0);
      var $5=$f;
      var $sizecode=(($5+48)|0);
      var $6=HEAP32[(($sizecode)>>2)];
      var $cmp=(($add)|0) > (($6)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=$fs_addr;
      var $ls=(($7+12)|0);
      var $8=HEAP32[(($ls)>>2)];
      var $L=(($8+40)|0);
      var $9=HEAP32[(($L)>>2)];
      var $10=$f;
      var $code=(($10+12)|0);
      var $11=HEAP32[(($code)>>2)];
      var $12=$11;
      var $13=$f;
      var $sizecode2=(($13+48)|0);
      var $call=_luaM_growaux_($9, $12, $sizecode2, 4, 2147483645, ((5249548)|0));
      var $14=$call;
      var $15=$f;
      var $code3=(($15+12)|0);
      HEAP32[(($code3)>>2)]=$14;
      label = 4; break;
    case 4: 
      var $16=$i_addr;
      var $17=$fs_addr;
      var $pc4=(($17+20)|0);
      var $18=HEAP32[(($pc4)>>2)];
      var $19=$f;
      var $code5=(($19+12)|0);
      var $20=HEAP32[(($code5)>>2)];
      var $arrayidx=(($20+($18<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$16;
      var $21=$fs_addr;
      var $pc6=(($21+20)|0);
      var $22=HEAP32[(($pc6)>>2)];
      var $add7=((($22)+(1))|0);
      var $23=$f;
      var $sizelineinfo=(($23+52)|0);
      var $24=HEAP32[(($sizelineinfo)>>2)];
      var $cmp8=(($add7)|0) > (($24)|0);
      if ($cmp8) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $25=$fs_addr;
      var $ls10=(($25+12)|0);
      var $26=HEAP32[(($ls10)>>2)];
      var $L11=(($26+40)|0);
      var $27=HEAP32[(($L11)>>2)];
      var $28=$f;
      var $lineinfo=(($28+20)|0);
      var $29=HEAP32[(($lineinfo)>>2)];
      var $30=$29;
      var $31=$f;
      var $sizelineinfo12=(($31+52)|0);
      var $call13=_luaM_growaux_($27, $30, $sizelineinfo12, 4, 2147483645, ((5249548)|0));
      var $32=$call13;
      var $33=$f;
      var $lineinfo14=(($33+20)|0);
      HEAP32[(($lineinfo14)>>2)]=$32;
      label = 6; break;
    case 6: 
      var $34=$fs_addr;
      var $ls16=(($34+12)|0);
      var $35=HEAP32[(($ls16)>>2)];
      var $lastline=(($35+8)|0);
      var $36=HEAP32[(($lastline)>>2)];
      var $37=$fs_addr;
      var $pc17=(($37+20)|0);
      var $38=HEAP32[(($pc17)>>2)];
      var $39=$f;
      var $lineinfo18=(($39+20)|0);
      var $40=HEAP32[(($lineinfo18)>>2)];
      var $arrayidx19=(($40+($38<<2))|0);
      HEAP32[(($arrayidx19)>>2)]=$36;
      var $41=$fs_addr;
      var $pc20=(($41+20)|0);
      var $42=HEAP32[(($pc20)>>2)];
      var $inc=((($42)+(1))|0);
      HEAP32[(($pc20)>>2)]=$inc;

      return $42;
  }

}
_luaK_code["X"]=1;

function _luaK_codek($fs, $reg, $k) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $fs_addr;
      var $reg_addr;
      var $k_addr;
      var $p;
      $fs_addr=$fs;
      $reg_addr=$reg;
      $k_addr=$k;
      var $0=$k_addr;
      var $cmp=(($0)|0) <= 262143;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$fs_addr;
      var $2=$reg_addr;
      var $3=$k_addr;
      var $call=_luaK_codeABx($1, 1, $2, $3);
      $retval=$call;
      label = 5; break;
    case 4: 
      var $4=$fs_addr;
      var $5=$reg_addr;
      var $call1=_luaK_codeABx($4, 2, $5, 0);
      $p=$call1;
      var $6=$fs_addr;
      var $7=$k_addr;
      var $call2=_codeextraarg($6, $7);
      var $8=$p;
      $retval=$8;
      label = 5; break;
    case 5: 
      var $9=$retval;

      return $9;
  }

}


function _codeextraarg($fs, $a) {
  var label = 0;


  var $fs_addr;
  var $a_addr;
  $fs_addr=$fs;
  $a_addr=$a;
  var $0=$fs_addr;
  var $1=$a_addr;
  var $shl=$1 << 6;
  var $or=39 | $shl;
  var $call=_luaK_code($0, $or);

  return $call;
}


function _luaK_reserveregs($fs, $n) {
  var label = 0;


  var $fs_addr;
  var $n_addr;
  $fs_addr=$fs;
  $n_addr=$n;
  var $0=$fs_addr;
  var $1=$n_addr;
  _luaK_checkstack($0, $1);
  var $2=$n_addr;
  var $3=$fs_addr;
  var $freereg=(($3+48)|0);
  var $4=HEAP8[($freereg)];
  var $conv=(($4)&255);
  var $add=((($conv)+($2))|0);
  var $conv1=(($add) & 255);
  HEAP8[($freereg)]=$conv1;

  return;
}


function _luaK_stringK($fs, $s) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; _memset(__stackBase__, 0, 12);

  var $fs_addr;
  var $s_addr;
  var $o=__stackBase__;
  var $io;
  var $x_;
  $fs_addr=$fs;
  $s_addr=$s;
  $io=$o;
  var $0=$s_addr;
  $x_=$0;
  var $1=$x_;
  var $2=$1;
  var $3=$io;
  var $value_=(($3)|0);
  var $gc=$value_;
  HEAP32[(($gc)>>2)]=$2;
  var $4=$x_;
  var $tsv=$4;
  var $tt=(($tsv+4)|0);
  var $5=HEAP8[($tt)];
  var $conv=(($5)&255);
  var $or=$conv | 64;
  var $6=$io;
  var $tt_=(($6+8)|0);
  HEAP32[(($tt_)>>2)]=$or;
  var $7=$fs_addr;
  var $call=_addk($7, $o, $o);
  STACKTOP = __stackBase__;
  return $call;
}


function _fixjump($fs, $pc, $dest) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $pc_addr;
      var $dest_addr;
      var $jmp;
      var $offset;
      $fs_addr=$fs;
      $pc_addr=$pc;
      $dest_addr=$dest;
      var $0=$pc_addr;
      var $1=$fs_addr;
      var $f=(($1)|0);
      var $2=HEAP32[(($f)>>2)];
      var $code=(($2+12)|0);
      var $3=HEAP32[(($code)>>2)];
      var $arrayidx=(($3+($0<<2))|0);
      $jmp=$arrayidx;
      var $4=$dest_addr;
      var $5=$pc_addr;
      var $add=((($5)+(1))|0);
      var $sub=((($4)-($add))|0);
      $offset=$sub;
      var $6=$offset;
      var $call=Math.abs($6);
      var $cmp=(($call)|0) > 131071;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=$fs_addr;
      var $ls=(($7+12)|0);
      var $8=HEAP32[(($ls)>>2)];
      _luaX_syntaxerror($8, ((5248212)|0));

    case 4: 
      var $9=$jmp;
      var $10=HEAP32[(($9)>>2)];
      var $and=$10 & 16383;
      var $11=$offset;
      var $add1=((($11)+(131071))|0);
      var $shl=$add1 << 14;
      var $and2=$shl & -16384;
      var $or=$and | $and2;
      var $12=$jmp;
      HEAP32[(($12)>>2)]=$or;

      return;
  }

}


function _luaK_checkstack($fs, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $n_addr;
      var $newstack;
      $fs_addr=$fs;
      $n_addr=$n;
      var $0=$fs_addr;
      var $freereg=(($0+48)|0);
      var $1=HEAP8[($freereg)];
      var $conv=(($1)&255);
      var $2=$n_addr;
      var $add=((($conv)+($2))|0);
      $newstack=$add;
      var $3=$newstack;
      var $4=$fs_addr;
      var $f=(($4)|0);
      var $5=HEAP32[(($f)>>2)];
      var $maxstacksize=(($5+78)|0);
      var $6=HEAP8[($maxstacksize)];
      var $conv1=(($6)&255);
      var $cmp=(($3)|0) > (($conv1)|0);
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $7=$newstack;
      var $cmp3=(($7)|0) >= 250;
      if ($cmp3) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $8=$fs_addr;
      var $ls=(($8+12)|0);
      var $9=HEAP32[(($ls)>>2)];
      _luaX_syntaxerror($9, ((5251428)|0));

    case 5: 
      var $10=$newstack;
      var $conv6=(($10) & 255);
      var $11=$fs_addr;
      var $f7=(($11)|0);
      var $12=HEAP32[(($f7)>>2)];
      var $maxstacksize8=(($12+78)|0);
      HEAP8[($maxstacksize8)]=$conv6;
      label = 6; break;
    case 6: 

      return;
  }

}


function _luaK_setoneret($fs, $e) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $e_addr;
      $fs_addr=$fs;
      $e_addr=$e;
      var $0=$e_addr;
      var $k=(($0)|0);
      var $1=HEAP32[(($k)>>2)];
      var $cmp=(($1)|0)==12;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$e_addr;
      var $k1=(($2)|0);
      HEAP32[(($k1)>>2)]=6;
      var $3=$e_addr;
      var $u=(($3+4)|0);
      var $info=$u;
      var $4=HEAP32[(($info)>>2)];
      var $5=$fs_addr;
      var $f=(($5)|0);
      var $6=HEAP32[(($f)>>2)];
      var $code=(($6+12)|0);
      var $7=HEAP32[(($code)>>2)];
      var $arrayidx=(($7+($4<<2))|0);
      var $8=HEAP32[(($arrayidx)>>2)];
      var $shr=$8 >>> 6;
      var $and=$shr & 255;
      var $9=$e_addr;
      var $u2=(($9+4)|0);
      var $info3=$u2;
      HEAP32[(($info3)>>2)]=$and;
      label = 7; break;
    case 4: 
      var $10=$e_addr;
      var $k4=(($10)|0);
      var $11=HEAP32[(($k4)>>2)];
      var $cmp5=(($11)|0)==13;
      if ($cmp5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $12=$e_addr;
      var $u7=(($12+4)|0);
      var $info8=$u7;
      var $13=HEAP32[(($info8)>>2)];
      var $14=$fs_addr;
      var $f9=(($14)|0);
      var $15=HEAP32[(($f9)>>2)];
      var $code10=(($15+12)|0);
      var $16=HEAP32[(($code10)>>2)];
      var $arrayidx11=(($16+($13<<2))|0);
      var $17=HEAP32[(($arrayidx11)>>2)];
      var $and12=$17 & 8388607;
      var $or=$and12 | 16777216;
      var $18=$e_addr;
      var $u13=(($18+4)|0);
      var $info14=$u13;
      var $19=HEAP32[(($info14)>>2)];
      var $20=$fs_addr;
      var $f15=(($20)|0);
      var $21=HEAP32[(($f15)>>2)];
      var $code16=(($21+12)|0);
      var $22=HEAP32[(($code16)>>2)];
      var $arrayidx17=(($22+($19<<2))|0);
      HEAP32[(($arrayidx17)>>2)]=$or;
      var $23=$e_addr;
      var $k18=(($23)|0);
      HEAP32[(($k18)>>2)]=11;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 

      return;
  }

}
_luaK_setoneret["X"]=1;

function _freereg($fs, $reg) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $reg_addr;
      $fs_addr=$fs;
      $reg_addr=$reg;
      var $0=$reg_addr;
      var $and=$0 & 256;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 3; break; }
    case 3: 
      var $1=$reg_addr;
      var $2=$fs_addr;
      var $nactvar=(($2+46)|0);
      var $3=HEAP8[($nactvar)];
      var $conv=(($3)&255);
      var $cmp=(($1)|0) >= (($conv)|0);
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$fs_addr;
      var $freereg=(($4+48)|0);
      var $5=HEAP8[($freereg)];
      var $dec=((($5)-(1))&255);
      HEAP8[($freereg)]=$dec;
      label = 5; break;
    case 5: 

      return;
  }

}


function _addk($fs, $key, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; _memset(__stackBase__, 0, 8);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $fs_addr;
      var $key_addr;
      var $v_addr;
      var $L;
      var $idx;
      var $f;
      var $k;
      var $oldsize;
      var $n;
      var $u=__stackBase__;
      var $io;
      var $io2;
      var $io1;
      $fs_addr=$fs;
      $key_addr=$key;
      $v_addr=$v;
      var $0=$fs_addr;
      var $ls=(($0+12)|0);
      var $1=HEAP32[(($ls)>>2)];
      var $L1=(($1+40)|0);
      var $2=HEAP32[(($L1)>>2)];
      $L=$2;
      var $3=$L;
      var $4=$fs_addr;
      var $h=(($4+4)|0);
      var $5=HEAP32[(($h)>>2)];
      var $6=$key_addr;
      var $call=_luaH_set($3, $5, $6);
      $idx=$call;
      var $7=$fs_addr;
      var $f2=(($7)|0);
      var $8=HEAP32[(($f2)>>2)];
      $f=$8;
      var $9=$idx;
      var $tt_=(($9+8)|0);
      var $10=HEAP32[(($tt_)>>2)];
      var $cmp=(($10)|0)==3;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $11=$idx;
      var $value_=(($11)|0);
      var $n3=$value_;
      var $12=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $n=$12;
      var $13=$n;
      var $add=($13)+(6755399441055744);
      var $l_d=$u;
      (HEAPF64[(tempDoublePtr)>>3]=$add,HEAP32[(($l_d)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($l_d)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $14=HEAP32[((((5245364)|0))>>2)];
      var $cmp4=(($14)|0)==33;
      var $conv=(($cmp4)&1);
      var $l_p=$u;
      var $arrayidx=(($l_p+($conv<<2))|0);
      var $15=HEAP32[(($arrayidx)>>2)];
      $k=$15;
      var $16=$k;
      var $17=$f;
      var $k5=(($17+8)|0);
      var $18=HEAP32[(($k5)>>2)];
      var $arrayidx6=(($18+((($16)*(12))&-1))|0);
      var $tt_7=(($arrayidx6+8)|0);
      var $19=HEAP32[(($tt_7)>>2)];
      var $20=$v_addr;
      var $tt_8=(($20+8)|0);
      var $21=HEAP32[(($tt_8)>>2)];
      var $cmp9=(($19)|0)==(($21)|0);
      if ($cmp9) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $22=$k;
      var $23=$f;
      var $k11=(($23+8)|0);
      var $24=HEAP32[(($k11)>>2)];
      var $arrayidx12=(($24+((($22)*(12))&-1))|0);
      var $25=$v_addr;
      var $call13=_luaV_equalobj_(0, $arrayidx12, $25);
      var $tobool=(($call13)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $26=$k;
      $retval=$26;
      label = 17; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $27=$f;
      var $sizek=(($27+44)|0);
      var $28=HEAP32[(($sizek)>>2)];
      $oldsize=$28;
      var $29=$fs_addr;
      var $nk=(($29+32)|0);
      var $30=HEAP32[(($nk)>>2)];
      $k=$30;
      var $31=$idx;
      $io=$31;
      var $32=$k;
      var $conv16=(($32)|0);
      var $33=$io;
      var $value_17=(($33)|0);
      var $n18=$value_17;
      (HEAPF64[(tempDoublePtr)>>3]=$conv16,HEAP32[(($n18)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n18)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $34=$io;
      var $tt_19=(($34+8)|0);
      HEAP32[(($tt_19)>>2)]=3;
      var $35=$k;
      var $add20=((($35)+(1))|0);
      var $36=$f;
      var $sizek21=(($36+44)|0);
      var $37=HEAP32[(($sizek21)>>2)];
      var $cmp22=(($add20)|0) > (($37)|0);
      if ($cmp22) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $38=$L;
      var $39=$f;
      var $k25=(($39+8)|0);
      var $40=HEAP32[(($k25)>>2)];
      var $41=$40;
      var $42=$f;
      var $sizek26=(($42+44)|0);
      var $call27=_luaM_growaux_($38, $41, $sizek26, 12, 67108863, ((5250624)|0));
      var $43=$call27;
      var $44=$f;
      var $k28=(($44+8)|0);
      HEAP32[(($k28)>>2)]=$43;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $45=$oldsize;
      var $46=$f;
      var $sizek30=(($46+44)|0);
      var $47=HEAP32[(($sizek30)>>2)];
      var $cmp31=(($45)|0) < (($47)|0);
      if ($cmp31) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $48=$oldsize;
      var $inc=((($48)+(1))|0);
      $oldsize=$inc;
      var $49=$f;
      var $k33=(($49+8)|0);
      var $50=HEAP32[(($k33)>>2)];
      var $arrayidx34=(($50+((($48)*(12))&-1))|0);
      var $tt_35=(($arrayidx34+8)|0);
      HEAP32[(($tt_35)>>2)]=0;
      label = 10; break;
    case 12: 
      var $51=$v_addr;
      $io2=$51;
      var $52=$k;
      var $53=$f;
      var $k36=(($53+8)|0);
      var $54=HEAP32[(($k36)>>2)];
      var $arrayidx37=(($54+((($52)*(12))&-1))|0);
      $io1=$arrayidx37;
      var $55=$io1;
      var $value_38=(($55)|0);
      var $56=$io2;
      var $value_39=(($56)|0);
      var $57=$value_38;
      var $58=$value_39;
      HEAP32[(($57)>>2)]=HEAP32[(($58)>>2)];HEAP32[((($57)+(4))>>2)]=HEAP32[((($58)+(4))>>2)];
      var $59=$io2;
      var $tt_40=(($59+8)|0);
      var $60=HEAP32[(($tt_40)>>2)];
      var $61=$io1;
      var $tt_41=(($61+8)|0);
      HEAP32[(($tt_41)>>2)]=$60;
      var $62=$fs_addr;
      var $nk42=(($62+32)|0);
      var $63=HEAP32[(($nk42)>>2)];
      var $inc43=((($63)+(1))|0);
      HEAP32[(($nk42)>>2)]=$inc43;
      var $64=$v_addr;
      var $tt_44=(($64+8)|0);
      var $65=HEAP32[(($tt_44)>>2)];
      var $and=$65 & 64;
      var $tobool45=(($and)|0)!=0;
      if ($tobool45) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $66=$v_addr;
      var $value_47=(($66)|0);
      var $gc=$value_47;
      var $67=HEAP32[(($gc)>>2)];
      var $gch=$67;
      var $marked=(($gch+5)|0);
      var $68=HEAP8[($marked)];
      var $conv48=(($68)&255);
      var $and49=$conv48 & 3;
      var $tobool50=(($and49)|0)!=0;
      if ($tobool50) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $69=$f;
      var $70=$69;
      var $gch52=$70;
      var $marked53=(($gch52+5)|0);
      var $71=HEAP8[($marked53)];
      var $conv54=(($71)&255);
      var $and55=$conv54 & 4;
      var $tobool56=(($and55)|0)!=0;
      if ($tobool56) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $72=$L;
      var $73=$f;
      var $74=$73;
      var $75=$v_addr;
      var $value_58=(($75)|0);
      var $gc59=$value_58;
      var $76=HEAP32[(($gc59)>>2)];
      _luaC_barrier_($72, $74, $76);
      label = 16; break;
    case 16: 
      var $77=$k;
      $retval=$77;
      label = 17; break;
    case 17: 
      var $78=$retval;
      STACKTOP = __stackBase__;
      return $78;
  }

}
_addk["X"]=1;

function _luaK_numberK($fs, $r) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; _memset(__stackBase__, 0, 20);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $r_addr=__stackBase__;
      var $n;
      var $L;
      var $o=(__stackBase__)+(8);
      var $io;
      var $io4;
      var $x_;
      $fs_addr=$fs;
      (HEAPF64[(tempDoublePtr)>>3]=$r,HEAP32[(($r_addr)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($r_addr)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $0=$fs_addr;
      var $ls=(($0+12)|0);
      var $1=HEAP32[(($ls)>>2)];
      var $L1=(($1+40)|0);
      var $2=HEAP32[(($L1)>>2)];
      $L=$2;
      $io=$o;
      var $3=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($r_addr)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($r_addr)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $4=$io;
      var $value_=(($4)|0);
      var $n2=$value_;
      (HEAPF64[(tempDoublePtr)>>3]=$3,HEAP32[(($n2)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n2)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $5=$io;
      var $tt_=(($5+8)|0);
      HEAP32[(($tt_)>>2)]=3;
      var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($r_addr)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($r_addr)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp=$6 == 0;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($r_addr)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($r_addr)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $8=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($r_addr)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($r_addr)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp3=$7 == $8;
      if ($cmp3) { label = 8; break; } else { label = 4; break; }
    case 4: 
      var $9=$L;
      var $top=(($9+8)|0);
      var $10=HEAP32[(($top)>>2)];
      $io4=$10;
      var $11=$L;
      var $12=$r_addr;
      var $call=_luaS_newlstr($11, $12, 8);
      $x_=$call;
      var $13=$x_;
      var $14=$13;
      var $15=$io4;
      var $value_5=(($15)|0);
      var $gc=$value_5;
      HEAP32[(($gc)>>2)]=$14;
      var $16=$x_;
      var $tsv=$16;
      var $tt=(($tsv+4)|0);
      var $17=HEAP8[($tt)];
      var $conv=(($17)&255);
      var $or=$conv | 64;
      var $18=$io4;
      var $tt_6=(($18+8)|0);
      HEAP32[(($tt_6)>>2)]=$or;
      var $19=$L;
      var $top7=(($19+8)|0);
      var $20=HEAP32[(($top7)>>2)];
      var $incdec_ptr=(($20+12)|0);
      HEAP32[(($top7)>>2)]=$incdec_ptr;
      var $21=$L;
      var $stack_last=(($21+24)|0);
      var $22=HEAP32[(($stack_last)>>2)];
      var $23=$L;
      var $top8=(($23+8)|0);
      var $24=HEAP32[(($top8)>>2)];
      var $sub_ptr_lhs_cast=$22;
      var $sub_ptr_rhs_cast=$24;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(12))&-1);
      var $cmp9=(($sub_ptr_div)|0) <= 0;
      if ($cmp9) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $25=$L;
      _luaD_growstack($25, 0);
      label = 7; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $26=$fs_addr;
      var $27=$L;
      var $top12=(($27+8)|0);
      var $28=HEAP32[(($top12)>>2)];
      var $add_ptr=((($28)-(12))|0);
      var $call13=_addk($26, $add_ptr, $o);
      $n=$call13;
      var $29=$L;
      var $top14=(($29+8)|0);
      var $30=HEAP32[(($top14)>>2)];
      var $incdec_ptr15=((($30)-(12))|0);
      HEAP32[(($top14)>>2)]=$incdec_ptr15;
      label = 9; break;
    case 8: 
      var $31=$fs_addr;
      var $call17=_addk($31, $o, $o);
      $n=$call17;
      label = 9; break;
    case 9: 
      var $32=$n;
      STACKTOP = __stackBase__;
      return $32;
  }

}
_luaK_numberK["X"]=1;

function _luaK_setreturns($fs, $e, $nresults) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $e_addr;
      var $nresults_addr;
      $fs_addr=$fs;
      $e_addr=$e;
      $nresults_addr=$nresults;
      var $0=$e_addr;
      var $k=(($0)|0);
      var $1=HEAP32[(($k)>>2)];
      var $cmp=(($1)|0)==12;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$e_addr;
      var $u=(($2+4)|0);
      var $info=$u;
      var $3=HEAP32[(($info)>>2)];
      var $4=$fs_addr;
      var $f=(($4)|0);
      var $5=HEAP32[(($f)>>2)];
      var $code=(($5+12)|0);
      var $6=HEAP32[(($code)>>2)];
      var $arrayidx=(($6+($3<<2))|0);
      var $7=HEAP32[(($arrayidx)>>2)];
      var $and=$7 & -8372225;
      var $8=$nresults_addr;
      var $add=((($8)+(1))|0);
      var $shl=$add << 14;
      var $and1=$shl & 8372224;
      var $or=$and | $and1;
      var $9=$e_addr;
      var $u2=(($9+4)|0);
      var $info3=$u2;
      var $10=HEAP32[(($info3)>>2)];
      var $11=$fs_addr;
      var $f4=(($11)|0);
      var $12=HEAP32[(($f4)>>2)];
      var $code5=(($12+12)|0);
      var $13=HEAP32[(($code5)>>2)];
      var $arrayidx6=(($13+($10<<2))|0);
      HEAP32[(($arrayidx6)>>2)]=$or;
      label = 7; break;
    case 4: 
      var $14=$e_addr;
      var $k7=(($14)|0);
      var $15=HEAP32[(($k7)>>2)];
      var $cmp8=(($15)|0)==13;
      if ($cmp8) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $16=$e_addr;
      var $u10=(($16+4)|0);
      var $info11=$u10;
      var $17=HEAP32[(($info11)>>2)];
      var $18=$fs_addr;
      var $f12=(($18)|0);
      var $19=HEAP32[(($f12)>>2)];
      var $code13=(($19+12)|0);
      var $20=HEAP32[(($code13)>>2)];
      var $arrayidx14=(($20+($17<<2))|0);
      var $21=HEAP32[(($arrayidx14)>>2)];
      var $and15=$21 & 8388607;
      var $22=$nresults_addr;
      var $add16=((($22)+(1))|0);
      var $shl17=$add16 << 23;
      var $and18=$shl17 & -8388608;
      var $or19=$and15 | $and18;
      var $23=$e_addr;
      var $u20=(($23+4)|0);
      var $info21=$u20;
      var $24=HEAP32[(($info21)>>2)];
      var $25=$fs_addr;
      var $f22=(($25)|0);
      var $26=HEAP32[(($f22)>>2)];
      var $code23=(($26+12)|0);
      var $27=HEAP32[(($code23)>>2)];
      var $arrayidx24=(($27+($24<<2))|0);
      HEAP32[(($arrayidx24)>>2)]=$or19;
      var $28=$e_addr;
      var $u25=(($28+4)|0);
      var $info26=$u25;
      var $29=HEAP32[(($info26)>>2)];
      var $30=$fs_addr;
      var $f27=(($30)|0);
      var $31=HEAP32[(($f27)>>2)];
      var $code28=(($31+12)|0);
      var $32=HEAP32[(($code28)>>2)];
      var $arrayidx29=(($32+($29<<2))|0);
      var $33=HEAP32[(($arrayidx29)>>2)];
      var $and30=$33 & -16321;
      var $34=$fs_addr;
      var $freereg=(($34+48)|0);
      var $35=HEAP8[($freereg)];
      var $conv=(($35)&255);
      var $shl31=$conv << 6;
      var $and32=$shl31 & 16320;
      var $or33=$and30 | $and32;
      var $36=$e_addr;
      var $u34=(($36+4)|0);
      var $info35=$u34;
      var $37=HEAP32[(($info35)>>2)];
      var $38=$fs_addr;
      var $f36=(($38)|0);
      var $39=HEAP32[(($f36)>>2)];
      var $code37=(($39+12)|0);
      var $40=HEAP32[(($code37)>>2)];
      var $arrayidx38=(($40+($37<<2))|0);
      HEAP32[(($arrayidx38)>>2)]=$or33;
      var $41=$fs_addr;
      _luaK_reserveregs($41, 1);
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 

      return;
  }

}
_luaK_setreturns["X"]=1;

function _luaK_dischargevars($fs, $e) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $e_addr;
      var $op;
      $fs_addr=$fs;
      $e_addr=$e;
      var $0=$e_addr;
      var $k=(($0)|0);
      var $1=HEAP32[(($k)>>2)];
      if ((($1)|0)==7) {
        label = 3; break;
      }
      else if ((($1)|0)==8) {
        label = 4; break;
      }
      else if ((($1)|0)==9) {
        label = 5; break;
      }
      else if ((($1)|0)==13 | (($1)|0)==12) {
        label = 8; break;
      }
      else {
      label = 9; break;
      }
      
    case 3: 
      var $2=$e_addr;
      var $k1=(($2)|0);
      HEAP32[(($k1)>>2)]=6;
      label = 10; break;
    case 4: 
      var $3=$fs_addr;
      var $4=$e_addr;
      var $u=(($4+4)|0);
      var $info=$u;
      var $5=HEAP32[(($info)>>2)];
      var $call=_luaK_codeABC($3, 5, 0, $5, 0);
      var $6=$e_addr;
      var $u3=(($6+4)|0);
      var $info4=$u3;
      HEAP32[(($info4)>>2)]=$call;
      var $7=$e_addr;
      var $k5=(($7)|0);
      HEAP32[(($k5)>>2)]=11;
      label = 10; break;
    case 5: 
      $op=6;
      var $8=$fs_addr;
      var $9=$e_addr;
      var $u7=(($9+4)|0);
      var $ind=$u7;
      var $idx=(($ind)|0);
      var $10=HEAP16[(($idx)>>1)];
      var $conv=(($10 << 16) >> 16);
      _freereg($8, $conv);
      var $11=$e_addr;
      var $u8=(($11+4)|0);
      var $ind9=$u8;
      var $vt=(($ind9+3)|0);
      var $12=HEAP8[($vt)];
      var $conv10=(($12)&255);
      var $cmp=(($conv10)|0)==7;
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $13=$fs_addr;
      var $14=$e_addr;
      var $u12=(($14+4)|0);
      var $ind13=$u12;
      var $t=(($ind13+2)|0);
      var $15=HEAP8[($t)];
      var $conv14=(($15)&255);
      _freereg($13, $conv14);
      $op=7;
      label = 7; break;
    case 7: 
      var $16=$fs_addr;
      var $17=$op;
      var $18=$e_addr;
      var $u15=(($18+4)|0);
      var $ind16=$u15;
      var $t17=(($ind16+2)|0);
      var $19=HEAP8[($t17)];
      var $conv18=(($19)&255);
      var $20=$e_addr;
      var $u19=(($20+4)|0);
      var $ind20=$u19;
      var $idx21=(($ind20)|0);
      var $21=HEAP16[(($idx21)>>1)];
      var $conv22=(($21 << 16) >> 16);
      var $call23=_luaK_codeABC($16, $17, 0, $conv18, $conv22);
      var $22=$e_addr;
      var $u24=(($22+4)|0);
      var $info25=$u24;
      HEAP32[(($info25)>>2)]=$call23;
      var $23=$e_addr;
      var $k26=(($23)|0);
      HEAP32[(($k26)>>2)]=11;
      label = 10; break;
    case 8: 
      var $24=$fs_addr;
      var $25=$e_addr;
      _luaK_setoneret($24, $25);
      label = 10; break;
    case 9: 
      label = 10; break;
    case 10: 

      return;
  }

}
_luaK_dischargevars["X"]=1;

function _luaK_exp2nextreg($fs, $e) {
  var label = 0;


  var $fs_addr;
  var $e_addr;
  $fs_addr=$fs;
  $e_addr=$e;
  var $0=$fs_addr;
  var $1=$e_addr;
  _luaK_dischargevars($0, $1);
  var $2=$fs_addr;
  var $3=$e_addr;
  _freeexp($2, $3);
  var $4=$fs_addr;
  _luaK_reserveregs($4, 1);
  var $5=$fs_addr;
  var $6=$e_addr;
  var $7=$fs_addr;
  var $freereg=(($7+48)|0);
  var $8=HEAP8[($freereg)];
  var $conv=(($8)&255);
  var $sub=((($conv)-(1))|0);
  _exp2reg($5, $6, $sub);

  return;
}


function _freeexp($fs, $e) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $e_addr;
      $fs_addr=$fs;
      $e_addr=$e;
      var $0=$e_addr;
      var $k=(($0)|0);
      var $1=HEAP32[(($k)>>2)];
      var $cmp=(($1)|0)==6;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$fs_addr;
      var $3=$e_addr;
      var $u=(($3+4)|0);
      var $info=$u;
      var $4=HEAP32[(($info)>>2)];
      _freereg($2, $4);
      label = 4; break;
    case 4: 

      return;
  }

}


function _exp2reg($fs, $e, $reg) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $e_addr;
      var $reg_addr;
      var $final;
      var $p_f;
      var $p_t;
      var $fj;
      $fs_addr=$fs;
      $e_addr=$e;
      $reg_addr=$reg;
      var $0=$fs_addr;
      var $1=$e_addr;
      var $2=$reg_addr;
      _discharge2reg($0, $1, $2);
      var $3=$e_addr;
      var $k=(($3)|0);
      var $4=HEAP32[(($k)>>2)];
      var $cmp=(($4)|0)==10;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$fs_addr;
      var $6=$e_addr;
      var $t=(($6+12)|0);
      var $7=$e_addr;
      var $u=(($7+4)|0);
      var $info=$u;
      var $8=HEAP32[(($info)>>2)];
      _luaK_concat($5, $t, $8);
      label = 4; break;
    case 4: 
      var $9=$e_addr;
      var $t1=(($9+12)|0);
      var $10=HEAP32[(($t1)>>2)];
      var $11=$e_addr;
      var $f=(($11+16)|0);
      var $12=HEAP32[(($f)>>2)];
      var $cmp2=(($10)|0)!=(($12)|0);
      if ($cmp2) { label = 5; break; } else { label = 12; break; }
    case 5: 
      $p_f=-1;
      $p_t=-1;
      var $13=$fs_addr;
      var $14=$e_addr;
      var $t4=(($14+12)|0);
      var $15=HEAP32[(($t4)>>2)];
      var $call=_need_value($13, $15);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $16=$fs_addr;
      var $17=$e_addr;
      var $f5=(($17+16)|0);
      var $18=HEAP32[(($f5)>>2)];
      var $call6=_need_value($16, $18);
      var $tobool7=(($call6)|0)!=0;
      if ($tobool7) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $19=$e_addr;
      var $k9=(($19)|0);
      var $20=HEAP32[(($k9)>>2)];
      var $cmp10=(($20)|0)==10;
      if ($cmp10) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $cond = -1;label = 10; break;
    case 9: 
      var $21=$fs_addr;
      var $call11=_luaK_jump($21);
      var $cond = $call11;label = 10; break;
    case 10: 
      var $cond;
      $fj=$cond;
      var $22=$fs_addr;
      var $23=$reg_addr;
      var $call12=_code_label($22, $23, 0, 1);
      $p_f=$call12;
      var $24=$fs_addr;
      var $25=$reg_addr;
      var $call13=_code_label($24, $25, 1, 0);
      $p_t=$call13;
      var $26=$fs_addr;
      var $27=$fj;
      _luaK_patchtohere($26, $27);
      label = 11; break;
    case 11: 
      var $28=$fs_addr;
      var $call15=_luaK_getlabel($28);
      $final=$call15;
      var $29=$fs_addr;
      var $30=$e_addr;
      var $f16=(($30+16)|0);
      var $31=HEAP32[(($f16)>>2)];
      var $32=$final;
      var $33=$reg_addr;
      var $34=$p_f;
      _patchlistaux($29, $31, $32, $33, $34);
      var $35=$fs_addr;
      var $36=$e_addr;
      var $t17=(($36+12)|0);
      var $37=HEAP32[(($t17)>>2)];
      var $38=$final;
      var $39=$reg_addr;
      var $40=$p_t;
      _patchlistaux($35, $37, $38, $39, $40);
      label = 12; break;
    case 12: 
      var $41=$e_addr;
      var $t19=(($41+12)|0);
      HEAP32[(($t19)>>2)]=-1;
      var $42=$e_addr;
      var $f20=(($42+16)|0);
      HEAP32[(($f20)>>2)]=-1;
      var $43=$reg_addr;
      var $44=$e_addr;
      var $u21=(($44+4)|0);
      var $info22=$u21;
      HEAP32[(($info22)>>2)]=$43;
      var $45=$e_addr;
      var $k23=(($45)|0);
      HEAP32[(($k23)>>2)]=6;

      return;
  }

}
_exp2reg["X"]=1;

function _luaK_exp2anyreg($fs, $e) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $fs_addr;
      var $e_addr;
      $fs_addr=$fs;
      $e_addr=$e;
      var $0=$fs_addr;
      var $1=$e_addr;
      _luaK_dischargevars($0, $1);
      var $2=$e_addr;
      var $k=(($2)|0);
      var $3=HEAP32[(($k)>>2)];
      var $cmp=(($3)|0)==6;
      if ($cmp) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $4=$e_addr;
      var $t=(($4+12)|0);
      var $5=HEAP32[(($t)>>2)];
      var $6=$e_addr;
      var $f=(($6+16)|0);
      var $7=HEAP32[(($f)>>2)];
      var $cmp1=(($5)|0)!=(($7)|0);
      if ($cmp1) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $8=$e_addr;
      var $u=(($8+4)|0);
      var $info=$u;
      var $9=HEAP32[(($info)>>2)];
      $retval=$9;
      label = 9; break;
    case 5: 
      var $10=$e_addr;
      var $u3=(($10+4)|0);
      var $info4=$u3;
      var $11=HEAP32[(($info4)>>2)];
      var $12=$fs_addr;
      var $nactvar=(($12+46)|0);
      var $13=HEAP8[($nactvar)];
      var $conv=(($13)&255);
      var $cmp5=(($11)|0) >= (($conv)|0);
      if ($cmp5) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $14=$fs_addr;
      var $15=$e_addr;
      var $16=$e_addr;
      var $u8=(($16+4)|0);
      var $info9=$u8;
      var $17=HEAP32[(($info9)>>2)];
      _exp2reg($14, $15, $17);
      var $18=$e_addr;
      var $u10=(($18+4)|0);
      var $info11=$u10;
      var $19=HEAP32[(($info11)>>2)];
      $retval=$19;
      label = 9; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $20=$fs_addr;
      var $21=$e_addr;
      _luaK_exp2nextreg($20, $21);
      var $22=$e_addr;
      var $u14=(($22+4)|0);
      var $info15=$u14;
      var $23=HEAP32[(($info15)>>2)];
      $retval=$23;
      label = 9; break;
    case 9: 
      var $24=$retval;

      return $24;
  }

}
_luaK_exp2anyreg["X"]=1;

function _luaK_exp2anyregup($fs, $e) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $e_addr;
      $fs_addr=$fs;
      $e_addr=$e;
      var $0=$e_addr;
      var $k=(($0)|0);
      var $1=HEAP32[(($k)>>2)];
      var $cmp=(($1)|0)!=8;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$e_addr;
      var $t=(($2+12)|0);
      var $3=HEAP32[(($t)>>2)];
      var $4=$e_addr;
      var $f=(($4+16)|0);
      var $5=HEAP32[(($f)>>2)];
      var $cmp1=(($3)|0)!=(($5)|0);
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $6=$fs_addr;
      var $7=$e_addr;
      var $call=_luaK_exp2anyreg($6, $7);
      label = 5; break;
    case 5: 

      return;
  }

}


function _isnumeral($e) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $e_addr;
      $e_addr=$e;
      var $0=$e_addr;
      var $k=(($0)|0);
      var $1=HEAP32[(($k)>>2)];
      var $cmp=(($1)|0)==5;
      if ($cmp) { label = 3; break; } else { var $6 = 0;label = 5; break; }
    case 3: 
      var $2=$e_addr;
      var $t=(($2+12)|0);
      var $3=HEAP32[(($t)>>2)];
      var $cmp1=(($3)|0)==-1;
      if ($cmp1) { label = 4; break; } else { var $6 = 0;label = 5; break; }
    case 4: 
      var $4=$e_addr;
      var $f=(($4+16)|0);
      var $5=HEAP32[(($f)>>2)];
      var $cmp2=(($5)|0)==-1;
      var $6 = $cmp2;label = 5; break;
    case 5: 
      var $6;
      var $land_ext=(($6)&1);

      return $land_ext;
  }

}


function _luaK_exp2val($fs, $e) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $e_addr;
      $fs_addr=$fs;
      $e_addr=$e;
      var $0=$e_addr;
      var $t=(($0+12)|0);
      var $1=HEAP32[(($t)>>2)];
      var $2=$e_addr;
      var $f=(($2+16)|0);
      var $3=HEAP32[(($f)>>2)];
      var $cmp=(($1)|0)!=(($3)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$fs_addr;
      var $5=$e_addr;
      var $call=_luaK_exp2anyreg($4, $5);
      label = 5; break;
    case 4: 
      var $6=$fs_addr;
      var $7=$e_addr;
      _luaK_dischargevars($6, $7);
      label = 5; break;
    case 5: 

      return;
  }

}


function _luaK_exp2RK($fs, $e) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $fs_addr;
      var $e_addr;
      $fs_addr=$fs;
      $e_addr=$e;
      var $0=$fs_addr;
      var $1=$e_addr;
      _luaK_exp2val($0, $1);
      var $2=$e_addr;
      var $k=(($2)|0);
      var $3=HEAP32[(($k)>>2)];
      if ((($3)|0)==2 | (($3)|0)==3 | (($3)|0)==1) {
        label = 3; break;
      }
      else if ((($3)|0)==5) {
        label = 9; break;
      }
      else if ((($3)|0)==4) {
        label = 10; break;
      }
      else {
      label = 13; break;
      }
      
    case 3: 
      var $4=$fs_addr;
      var $nk=(($4+32)|0);
      var $5=HEAP32[(($nk)>>2)];
      var $cmp=(($5)|0) <= 255;
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $6=$e_addr;
      var $k1=(($6)|0);
      var $7=HEAP32[(($k1)>>2)];
      var $cmp2=(($7)|0)==1;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=$fs_addr;
      var $call=_nilK($8);
      var $cond = $call;label = 7; break;
    case 6: 
      var $9=$fs_addr;
      var $10=$e_addr;
      var $k3=(($10)|0);
      var $11=HEAP32[(($k3)>>2)];
      var $cmp4=(($11)|0)==2;
      var $conv=(($cmp4)&1);
      var $call5=_boolK($9, $conv);
      var $cond = $call5;label = 7; break;
    case 7: 
      var $cond;
      var $12=$e_addr;
      var $u=(($12+4)|0);
      var $info=$u;
      HEAP32[(($info)>>2)]=$cond;
      var $13=$e_addr;
      var $k6=(($13)|0);
      HEAP32[(($k6)>>2)]=4;
      var $14=$e_addr;
      var $u7=(($14+4)|0);
      var $info8=$u7;
      var $15=HEAP32[(($info8)>>2)];
      var $or=$15 | 256;
      $retval=$or;
      label = 15; break;
    case 8: 
      label = 14; break;
    case 9: 
      var $16=$fs_addr;
      var $17=$e_addr;
      var $u10=(($17+4)|0);
      var $nval=$u10;
      var $18=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($nval)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($nval)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call11=_luaK_numberK($16, $18);
      var $19=$e_addr;
      var $u12=(($19+4)|0);
      var $info13=$u12;
      HEAP32[(($info13)>>2)]=$call11;
      var $20=$e_addr;
      var $k14=(($20)|0);
      HEAP32[(($k14)>>2)]=4;
      label = 10; break;
    case 10: 
      var $21=$e_addr;
      var $u16=(($21+4)|0);
      var $info17=$u16;
      var $22=HEAP32[(($info17)>>2)];
      var $cmp18=(($22)|0) <= 255;
      if ($cmp18) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $23=$e_addr;
      var $u21=(($23+4)|0);
      var $info22=$u21;
      var $24=HEAP32[(($info22)>>2)];
      var $or23=$24 | 256;
      $retval=$or23;
      label = 15; break;
    case 12: 
      label = 14; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $25=$fs_addr;
      var $26=$e_addr;
      var $call25=_luaK_exp2anyreg($25, $26);
      $retval=$call25;
      label = 15; break;
    case 15: 
      var $27=$retval;

      return $27;
  }

}
_luaK_exp2RK["X"]=1;

function _nilK($fs) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; _memset(__stackBase__, 0, 24);

  var $fs_addr;
  var $k=__stackBase__;
  var $v=(__stackBase__)+(12);
  var $io;
  $fs_addr=$fs;
  var $tt_=(($v+8)|0);
  HEAP32[(($tt_)>>2)]=0;
  $io=$k;
  var $0=$fs_addr;
  var $h=(($0+4)|0);
  var $1=HEAP32[(($h)>>2)];
  var $2=$1;
  var $3=$io;
  var $value_=(($3)|0);
  var $gc=$value_;
  HEAP32[(($gc)>>2)]=$2;
  var $4=$io;
  var $tt_1=(($4+8)|0);
  HEAP32[(($tt_1)>>2)]=69;
  var $5=$fs_addr;
  var $call=_addk($5, $k, $v);
  STACKTOP = __stackBase__;
  return $call;
}


function _boolK($fs, $b) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; _memset(__stackBase__, 0, 12);

  var $fs_addr;
  var $b_addr;
  var $o=__stackBase__;
  var $io;
  $fs_addr=$fs;
  $b_addr=$b;
  $io=$o;
  var $0=$b_addr;
  var $1=$io;
  var $value_=(($1)|0);
  var $b1=$value_;
  HEAP32[(($b1)>>2)]=$0;
  var $2=$io;
  var $tt_=(($2+8)|0);
  HEAP32[(($tt_)>>2)]=1;
  var $3=$fs_addr;
  var $call=_addk($3, $o, $o);
  STACKTOP = __stackBase__;
  return $call;
}


function _luaK_storevar($fs, $var, $ex) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $var_addr;
      var $ex_addr;
      var $e;
      var $op;
      var $e8;
      $fs_addr=$fs;
      $var_addr=$var;
      $ex_addr=$ex;
      var $0=$var_addr;
      var $k=(($0)|0);
      var $1=HEAP32[(($k)>>2)];
      if ((($1)|0)==7) {
        label = 3; break;
      }
      else if ((($1)|0)==8) {
        label = 4; break;
      }
      else if ((($1)|0)==9) {
        label = 5; break;
      }
      else {
      label = 6; break;
      }
      
    case 3: 
      var $2=$fs_addr;
      var $3=$ex_addr;
      _freeexp($2, $3);
      var $4=$fs_addr;
      var $5=$ex_addr;
      var $6=$var_addr;
      var $u=(($6+4)|0);
      var $info=$u;
      var $7=HEAP32[(($info)>>2)];
      _exp2reg($4, $5, $7);
      label = 8; break;
    case 4: 
      var $8=$fs_addr;
      var $9=$ex_addr;
      var $call=_luaK_exp2anyreg($8, $9);
      $e=$call;
      var $10=$fs_addr;
      var $11=$e;
      var $12=$var_addr;
      var $u2=(($12+4)|0);
      var $info3=$u2;
      var $13=HEAP32[(($info3)>>2)];
      var $call4=_luaK_codeABC($10, 9, $11, $13, 0);
      label = 7; break;
    case 5: 
      var $14=$var_addr;
      var $u6=(($14+4)|0);
      var $ind=$u6;
      var $vt=(($ind+3)|0);
      var $15=HEAP8[($vt)];
      var $conv=(($15)&255);
      var $cmp=(($conv)|0)==7;
      var $cond=$cmp ? 10 : 8;
      $op=$cond;
      var $16=$fs_addr;
      var $17=$ex_addr;
      var $call9=_luaK_exp2RK($16, $17);
      $e8=$call9;
      var $18=$fs_addr;
      var $19=$op;
      var $20=$var_addr;
      var $u10=(($20+4)|0);
      var $ind11=$u10;
      var $t=(($ind11+2)|0);
      var $21=HEAP8[($t)];
      var $conv12=(($21)&255);
      var $22=$var_addr;
      var $u13=(($22+4)|0);
      var $ind14=$u13;
      var $idx=(($ind14)|0);
      var $23=HEAP16[(($idx)>>1)];
      var $conv15=(($23 << 16) >> 16);
      var $24=$e8;
      var $call16=_luaK_codeABC($18, $19, $conv12, $conv15, $24);
      label = 7; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $25=$fs_addr;
      var $26=$ex_addr;
      _freeexp($25, $26);
      label = 8; break;
    case 8: 

      return;
  }

}
_luaK_storevar["X"]=1;

function _luaK_self($fs, $e, $key) {
  var label = 0;


  var $fs_addr;
  var $e_addr;
  var $key_addr;
  var $ereg;
  $fs_addr=$fs;
  $e_addr=$e;
  $key_addr=$key;
  var $0=$fs_addr;
  var $1=$e_addr;
  var $call=_luaK_exp2anyreg($0, $1);
  var $2=$e_addr;
  var $u=(($2+4)|0);
  var $info=$u;
  var $3=HEAP32[(($info)>>2)];
  $ereg=$3;
  var $4=$fs_addr;
  var $5=$e_addr;
  _freeexp($4, $5);
  var $6=$fs_addr;
  var $freereg=(($6+48)|0);
  var $7=HEAP8[($freereg)];
  var $conv=(($7)&255);
  var $8=$e_addr;
  var $u1=(($8+4)|0);
  var $info2=$u1;
  HEAP32[(($info2)>>2)]=$conv;
  var $9=$e_addr;
  var $k=(($9)|0);
  HEAP32[(($k)>>2)]=6;
  var $10=$fs_addr;
  _luaK_reserveregs($10, 2);
  var $11=$fs_addr;
  var $12=$e_addr;
  var $u3=(($12+4)|0);
  var $info4=$u3;
  var $13=HEAP32[(($info4)>>2)];
  var $14=$ereg;
  var $15=$fs_addr;
  var $16=$key_addr;
  var $call5=_luaK_exp2RK($15, $16);
  var $call6=_luaK_codeABC($11, 12, $13, $14, $call5);
  var $17=$fs_addr;
  var $18=$key_addr;
  _freeexp($17, $18);

  return;
}


function _luaK_goiftrue($fs, $e) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $e_addr;
      var $pc;
      $fs_addr=$fs;
      $e_addr=$e;
      var $0=$fs_addr;
      var $1=$e_addr;
      _luaK_dischargevars($0, $1);
      var $2=$e_addr;
      var $k=(($2)|0);
      var $3=HEAP32[(($k)>>2)];
      if ((($3)|0)==10) {
        label = 3; break;
      }
      else if ((($3)|0)==4 | (($3)|0)==5 | (($3)|0)==2) {
        label = 4; break;
      }
      else {
      label = 5; break;
      }
      
    case 3: 
      var $4=$fs_addr;
      var $5=$e_addr;
      _invertjump($4, $5);
      var $6=$e_addr;
      var $u=(($6+4)|0);
      var $info=$u;
      var $7=HEAP32[(($info)>>2)];
      $pc=$7;
      label = 6; break;
    case 4: 
      $pc=-1;
      label = 6; break;
    case 5: 
      var $8=$fs_addr;
      var $9=$e_addr;
      var $call=_jumponcond($8, $9, 0);
      $pc=$call;
      label = 6; break;
    case 6: 
      var $10=$fs_addr;
      var $11=$e_addr;
      var $f=(($11+16)|0);
      var $12=$pc;
      _luaK_concat($10, $f, $12);
      var $13=$fs_addr;
      var $14=$e_addr;
      var $t=(($14+12)|0);
      var $15=HEAP32[(($t)>>2)];
      _luaK_patchtohere($13, $15);
      var $16=$e_addr;
      var $t2=(($16+12)|0);
      HEAP32[(($t2)>>2)]=-1;

      return;
  }

}


function _invertjump($fs, $e) {
  var label = 0;


  var $fs_addr;
  var $e_addr;
  var $pc;
  $fs_addr=$fs;
  $e_addr=$e;
  var $0=$fs_addr;
  var $1=$e_addr;
  var $u=(($1+4)|0);
  var $info=$u;
  var $2=HEAP32[(($info)>>2)];
  var $call=_getjumpcontrol($0, $2);
  $pc=$call;
  var $3=$pc;
  var $4=HEAP32[(($3)>>2)];
  var $and=$4 & -16321;
  var $5=$pc;
  var $6=HEAP32[(($5)>>2)];
  var $shr=$6 >>> 6;
  var $and1=$shr & 255;
  var $tobool=(($and1)|0)!=0;
  var $lnot=$tobool ^ 1;
  var $lnot_ext=(($lnot)&1);
  var $shl=$lnot_ext << 6;
  var $and2=$shl & 16320;
  var $or=$and | $and2;
  var $7=$pc;
  HEAP32[(($7)>>2)]=$or;

  return;
}


function _jumponcond($fs, $e, $cond) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $fs_addr;
      var $e_addr;
      var $cond_addr;
      var $ie;
      $fs_addr=$fs;
      $e_addr=$e;
      $cond_addr=$cond;
      var $0=$e_addr;
      var $k=(($0)|0);
      var $1=HEAP32[(($k)>>2)];
      var $cmp=(($1)|0)==11;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $2=$e_addr;
      var $u=(($2+4)|0);
      var $info=$u;
      var $3=HEAP32[(($info)>>2)];
      var $4=$fs_addr;
      var $f=(($4)|0);
      var $5=HEAP32[(($f)>>2)];
      var $code=(($5+12)|0);
      var $6=HEAP32[(($code)>>2)];
      var $arrayidx=(($6+($3<<2))|0);
      var $7=HEAP32[(($arrayidx)>>2)];
      $ie=$7;
      var $8=$ie;
      var $shr=$8 >>> 0;
      var $and=$shr & 63;
      var $cmp1=(($and)|0)==20;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $9=$fs_addr;
      var $pc=(($9+20)|0);
      var $10=HEAP32[(($pc)>>2)];
      var $dec=((($10)-(1))|0);
      HEAP32[(($pc)>>2)]=$dec;
      var $11=$fs_addr;
      var $12=$ie;
      var $shr3=$12 >>> 23;
      var $and4=$shr3 & 511;
      var $13=$cond_addr;
      var $tobool=(($13)|0)!=0;
      var $lnot=$tobool ^ 1;
      var $lnot_ext=(($lnot)&1);
      var $call=_condjump($11, 27, $and4, 0, $lnot_ext);
      $retval=$call;
      label = 7; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $14=$fs_addr;
      var $15=$e_addr;
      _discharge2anyreg($14, $15);
      var $16=$fs_addr;
      var $17=$e_addr;
      _freeexp($16, $17);
      var $18=$fs_addr;
      var $19=$e_addr;
      var $u6=(($19+4)|0);
      var $info7=$u6;
      var $20=HEAP32[(($info7)>>2)];
      var $21=$cond_addr;
      var $call8=_condjump($18, 28, 255, $20, $21);
      $retval=$call8;
      label = 7; break;
    case 7: 
      var $22=$retval;

      return $22;
  }

}
_jumponcond["X"]=1;

function _luaK_goiffalse($fs, $e) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $e_addr;
      var $pc;
      $fs_addr=$fs;
      $e_addr=$e;
      var $0=$fs_addr;
      var $1=$e_addr;
      _luaK_dischargevars($0, $1);
      var $2=$e_addr;
      var $k=(($2)|0);
      var $3=HEAP32[(($k)>>2)];
      if ((($3)|0)==10) {
        label = 3; break;
      }
      else if ((($3)|0)==1 | (($3)|0)==3) {
        label = 4; break;
      }
      else {
      label = 5; break;
      }
      
    case 3: 
      var $4=$e_addr;
      var $u=(($4+4)|0);
      var $info=$u;
      var $5=HEAP32[(($info)>>2)];
      $pc=$5;
      label = 6; break;
    case 4: 
      $pc=-1;
      label = 6; break;
    case 5: 
      var $6=$fs_addr;
      var $7=$e_addr;
      var $call=_jumponcond($6, $7, 1);
      $pc=$call;
      label = 6; break;
    case 6: 
      var $8=$fs_addr;
      var $9=$e_addr;
      var $t=(($9+12)|0);
      var $10=$pc;
      _luaK_concat($8, $t, $10);
      var $11=$fs_addr;
      var $12=$e_addr;
      var $f=(($12+16)|0);
      var $13=HEAP32[(($f)>>2)];
      _luaK_patchtohere($11, $13);
      var $14=$e_addr;
      var $f2=(($14+16)|0);
      HEAP32[(($f2)>>2)]=-1;

      return;
  }

}


function _luaK_indexed($fs, $t, $k) {
  var label = 0;


  var $fs_addr;
  var $t_addr;
  var $k_addr;
  $fs_addr=$fs;
  $t_addr=$t;
  $k_addr=$k;
  var $0=$t_addr;
  var $u=(($0+4)|0);
  var $info=$u;
  var $1=HEAP32[(($info)>>2)];
  var $conv=(($1) & 255);
  var $2=$t_addr;
  var $u1=(($2+4)|0);
  var $ind=$u1;
  var $t2=(($ind+2)|0);
  HEAP8[($t2)]=$conv;
  var $3=$fs_addr;
  var $4=$k_addr;
  var $call=_luaK_exp2RK($3, $4);
  var $conv3=(($call) & 65535);
  var $5=$t_addr;
  var $u4=(($5+4)|0);
  var $ind5=$u4;
  var $idx=(($ind5)|0);
  HEAP16[(($idx)>>1)]=$conv3;
  var $6=$t_addr;
  var $k6=(($6)|0);
  var $7=HEAP32[(($k6)>>2)];
  var $cmp=(($7)|0)==8;
  var $cond=$cmp ? 8 : 7;
  var $conv8=(($cond) & 255);
  var $8=$t_addr;
  var $u9=(($8+4)|0);
  var $ind10=$u9;
  var $vt=(($ind10+3)|0);
  HEAP8[($vt)]=$conv8;
  var $9=$t_addr;
  var $k11=(($9)|0);
  HEAP32[(($k11)>>2)]=9;

  return;
}


function _luaK_prefix($fs, $op, $e, $line) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; _memset(__stackBase__, 0, 20);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $op_addr;
      var $e_addr;
      var $line_addr;
      var $e2=__stackBase__;
      $fs_addr=$fs;
      $op_addr=$op;
      $e_addr=$e;
      $line_addr=$line;
      var $f=(($e2+16)|0);
      HEAP32[(($f)>>2)]=-1;
      var $t=(($e2+12)|0);
      HEAP32[(($t)>>2)]=-1;
      var $k=(($e2)|0);
      HEAP32[(($k)>>2)]=5;
      var $u=(($e2+4)|0);
      var $nval=$u;
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($nval)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($nval)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $0=$op_addr;
      if ((($0)|0)==0) {
        label = 3; break;
      }
      else if ((($0)|0)==1) {
        label = 7; break;
      }
      else if ((($0)|0)==2) {
        label = 8; break;
      }
      else {
      label = 9; break;
      }
      
    case 3: 
      var $1=$e_addr;
      var $call=_isnumeral($1);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $2=$e_addr;
      var $u1=(($2+4)|0);
      var $nval2=$u1;
      var $3=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($nval2)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($nval2)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub=(-$3);
      var $4=$e_addr;
      var $u3=(($4+4)|0);
      var $nval4=$u3;
      (HEAPF64[(tempDoublePtr)>>3]=$sub,HEAP32[(($nval4)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($nval4)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 6; break;
    case 5: 
      var $5=$fs_addr;
      var $6=$e_addr;
      var $call5=_luaK_exp2anyreg($5, $6);
      var $7=$fs_addr;
      var $8=$e_addr;
      var $9=$line_addr;
      _codearith($7, 19, $8, $e2, $9);
      label = 6; break;
    case 6: 
      label = 10; break;
    case 7: 
      var $10=$fs_addr;
      var $11=$e_addr;
      _codenot($10, $11);
      label = 10; break;
    case 8: 
      var $12=$fs_addr;
      var $13=$e_addr;
      var $call8=_luaK_exp2anyreg($12, $13);
      var $14=$fs_addr;
      var $15=$e_addr;
      var $16=$line_addr;
      _codearith($14, 21, $15, $e2, $16);
      label = 10; break;
    case 9: 
      label = 10; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
  }

}
_luaK_prefix["X"]=1;

function _codearith($fs, $op, $e1, $e2, $line) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $op_addr;
      var $e1_addr;
      var $e2_addr;
      var $line_addr;
      var $o2;
      var $o1;
      $fs_addr=$fs;
      $op_addr=$op;
      $e1_addr=$e1;
      $e2_addr=$e2;
      $line_addr=$line;
      var $0=$op_addr;
      var $1=$e1_addr;
      var $2=$e2_addr;
      var $call=_constfolding($0, $1, $2);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 12; break;
    case 4: 
      var $3=$op_addr;
      var $cmp=(($3)|0)!=19;
      if ($cmp) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $4=$op_addr;
      var $cmp1=(($4)|0)!=21;
      if ($cmp1) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $5=$fs_addr;
      var $6=$e2_addr;
      var $call2=_luaK_exp2RK($5, $6);
      var $cond = $call2;label = 8; break;
    case 7: 
      var $cond = 0;label = 8; break;
    case 8: 
      var $cond;
      $o2=$cond;
      var $7=$fs_addr;
      var $8=$e1_addr;
      var $call3=_luaK_exp2RK($7, $8);
      $o1=$call3;
      var $9=$o1;
      var $10=$o2;
      var $cmp4=(($9)|0) > (($10)|0);
      if ($cmp4) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $11=$fs_addr;
      var $12=$e1_addr;
      _freeexp($11, $12);
      var $13=$fs_addr;
      var $14=$e2_addr;
      _freeexp($13, $14);
      label = 11; break;
    case 10: 
      var $15=$fs_addr;
      var $16=$e2_addr;
      _freeexp($15, $16);
      var $17=$fs_addr;
      var $18=$e1_addr;
      _freeexp($17, $18);
      label = 11; break;
    case 11: 
      var $19=$fs_addr;
      var $20=$op_addr;
      var $21=$o1;
      var $22=$o2;
      var $call7=_luaK_codeABC($19, $20, 0, $21, $22);
      var $23=$e1_addr;
      var $u=(($23+4)|0);
      var $info=$u;
      HEAP32[(($info)>>2)]=$call7;
      var $24=$e1_addr;
      var $k=(($24)|0);
      HEAP32[(($k)>>2)]=11;
      var $25=$fs_addr;
      var $26=$line_addr;
      _luaK_fixline($25, $26);
      label = 12; break;
    case 12: 

      return;
  }

}
_codearith["X"]=1;

function _codenot($fs, $e) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $e_addr;
      var $temp;
      $fs_addr=$fs;
      $e_addr=$e;
      var $0=$fs_addr;
      var $1=$e_addr;
      _luaK_dischargevars($0, $1);
      var $2=$e_addr;
      var $k=(($2)|0);
      var $3=HEAP32[(($k)>>2)];
      if ((($3)|0)==1 | (($3)|0)==3) {
        label = 3; break;
      }
      else if ((($3)|0)==4 | (($3)|0)==5 | (($3)|0)==2) {
        label = 4; break;
      }
      else if ((($3)|0)==10) {
        label = 5; break;
      }
      else if ((($3)|0)==11 | (($3)|0)==6) {
        label = 6; break;
      }
      else {
      label = 7; break;
      }
      
    case 3: 
      var $4=$e_addr;
      var $k1=(($4)|0);
      HEAP32[(($k1)>>2)]=2;
      label = 8; break;
    case 4: 
      var $5=$e_addr;
      var $k3=(($5)|0);
      HEAP32[(($k3)>>2)]=3;
      label = 8; break;
    case 5: 
      var $6=$fs_addr;
      var $7=$e_addr;
      _invertjump($6, $7);
      label = 8; break;
    case 6: 
      var $8=$fs_addr;
      var $9=$e_addr;
      _discharge2anyreg($8, $9);
      var $10=$fs_addr;
      var $11=$e_addr;
      _freeexp($10, $11);
      var $12=$fs_addr;
      var $13=$e_addr;
      var $u=(($13+4)|0);
      var $info=$u;
      var $14=HEAP32[(($info)>>2)];
      var $call=_luaK_codeABC($12, 20, 0, $14, 0);
      var $15=$e_addr;
      var $u6=(($15+4)|0);
      var $info7=$u6;
      HEAP32[(($info7)>>2)]=$call;
      var $16=$e_addr;
      var $k8=(($16)|0);
      HEAP32[(($k8)>>2)]=11;
      label = 8; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $17=$e_addr;
      var $f=(($17+16)|0);
      var $18=HEAP32[(($f)>>2)];
      $temp=$18;
      var $19=$e_addr;
      var $t=(($19+12)|0);
      var $20=HEAP32[(($t)>>2)];
      var $21=$e_addr;
      var $f9=(($21+16)|0);
      HEAP32[(($f9)>>2)]=$20;
      var $22=$temp;
      var $23=$e_addr;
      var $t10=(($23+12)|0);
      HEAP32[(($t10)>>2)]=$22;
      var $24=$fs_addr;
      var $25=$e_addr;
      var $f11=(($25+16)|0);
      var $26=HEAP32[(($f11)>>2)];
      _removevalues($24, $26);
      var $27=$fs_addr;
      var $28=$e_addr;
      var $t12=(($28+12)|0);
      var $29=HEAP32[(($t12)>>2)];
      _removevalues($27, $29);

      return;
  }

}
_codenot["X"]=1;

function _luaK_infix($fs, $op, $v) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $op_addr;
      var $v_addr;
      $fs_addr=$fs;
      $op_addr=$op;
      $v_addr=$v;
      var $0=$op_addr;
      if ((($0)|0)==13) {
        label = 3; break;
      }
      else if ((($0)|0)==14) {
        label = 4; break;
      }
      else if ((($0)|0)==6) {
        label = 5; break;
      }
      else if ((($0)|0)==0 | (($0)|0)==1 | (($0)|0)==2 | (($0)|0)==3 | (($0)|0)==4 | (($0)|0)==5) {
        label = 6; break;
      }
      else {
      label = 9; break;
      }
      
    case 3: 
      var $1=$fs_addr;
      var $2=$v_addr;
      _luaK_goiftrue($1, $2);
      label = 10; break;
    case 4: 
      var $3=$fs_addr;
      var $4=$v_addr;
      _luaK_goiffalse($3, $4);
      label = 10; break;
    case 5: 
      var $5=$fs_addr;
      var $6=$v_addr;
      _luaK_exp2nextreg($5, $6);
      label = 10; break;
    case 6: 
      var $7=$v_addr;
      var $call=_isnumeral($7);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $8=$fs_addr;
      var $9=$v_addr;
      var $call4=_luaK_exp2RK($8, $9);
      label = 8; break;
    case 8: 
      label = 10; break;
    case 9: 
      var $10=$fs_addr;
      var $11=$v_addr;
      var $call5=_luaK_exp2RK($10, $11);
      label = 10; break;
    case 10: 

      return;
  }

}


function _luaK_fixline($fs, $line) {
  var label = 0;


  var $fs_addr;
  var $line_addr;
  $fs_addr=$fs;
  $line_addr=$line;
  var $0=$line_addr;
  var $1=$fs_addr;
  var $pc=(($1+20)|0);
  var $2=HEAP32[(($pc)>>2)];
  var $sub=((($2)-(1))|0);
  var $3=$fs_addr;
  var $f=(($3)|0);
  var $4=HEAP32[(($f)>>2)];
  var $lineinfo=(($4+20)|0);
  var $5=HEAP32[(($lineinfo)>>2)];
  var $arrayidx=(($5+($sub<<2))|0);
  HEAP32[(($arrayidx)>>2)]=$0;

  return;
}


function _getjumpcontrol($fs, $pc) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $fs_addr;
      var $pc_addr;
      var $pi;
      $fs_addr=$fs;
      $pc_addr=$pc;
      var $0=$pc_addr;
      var $1=$fs_addr;
      var $f=(($1)|0);
      var $2=HEAP32[(($f)>>2)];
      var $code=(($2+12)|0);
      var $3=HEAP32[(($code)>>2)];
      var $arrayidx=(($3+($0<<2))|0);
      $pi=$arrayidx;
      var $4=$pc_addr;
      var $cmp=(($4)|0) >= 1;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $5=$pi;
      var $add_ptr=((($5)-(4))|0);
      var $6=HEAP32[(($add_ptr)>>2)];
      var $shr=$6 >>> 0;
      var $and=$shr & 63;
      var $arrayidx1=((5244052+$and)|0);
      var $7=HEAP8[($arrayidx1)];
      var $conv=(($7)&255);
      var $and2=$conv & 128;
      var $tobool=(($and2)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $8=$pi;
      var $add_ptr3=((($8)-(4))|0);
      $retval=$add_ptr3;
      label = 6; break;
    case 5: 
      var $9=$pi;
      $retval=$9;
      label = 6; break;
    case 6: 
      var $10=$retval;

      return $10;
  }

}


function _lua_sethook($L, $func, $mask, $count) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $func_addr;
      var $mask_addr;
      var $count_addr;
      $L_addr=$L;
      $func_addr=$func;
      $mask_addr=$mask;
      $count_addr=$count;
      var $0=$func_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $1=$mask_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $mask_addr=0;
      $func_addr=0;
      label = 5; break;
    case 5: 
      var $2=$L_addr;
      var $ci=(($2+16)|0);
      var $3=HEAP32[(($ci)>>2)];
      var $callstatus=(($3+18)|0);
      var $4=HEAP8[($callstatus)];
      var $conv=(($4)&255);
      var $and=$conv & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $5=$L_addr;
      var $ci3=(($5+16)|0);
      var $6=HEAP32[(($ci3)>>2)];
      var $u=(($6+24)|0);
      var $l=$u;
      var $savedpc=(($l+4)|0);
      var $7=HEAP32[(($savedpc)>>2)];
      var $8=$L_addr;
      var $oldpc=(($8+20)|0);
      HEAP32[(($oldpc)>>2)]=$7;
      label = 7; break;
    case 7: 
      var $9=$func_addr;
      var $10=$L_addr;
      var $hook=(($10+52)|0);
      HEAP32[(($hook)>>2)]=$9;
      var $11=$count_addr;
      var $12=$L_addr;
      var $basehookcount=(($12+44)|0);
      HEAP32[(($basehookcount)>>2)]=$11;
      var $13=$L_addr;
      var $basehookcount5=(($13+44)|0);
      var $14=HEAP32[(($basehookcount5)>>2)];
      var $15=$L_addr;
      var $hookcount=(($15+48)|0);
      HEAP32[(($hookcount)>>2)]=$14;
      var $16=$mask_addr;
      var $conv6=(($16) & 255);
      var $17=$L_addr;
      var $hookmask=(($17+40)|0);
      HEAP8[($hookmask)]=$conv6;

      return 1;
  }

}
_lua_sethook["X"]=1;

function _lua_gethook($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $hook=(($0+52)|0);
  var $1=HEAP32[(($hook)>>2)];

  return $1;
}


function _lua_gethookmask($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $hookmask=(($0+40)|0);
  var $1=HEAP8[($hookmask)];
  var $conv=(($1)&255);

  return $conv;
}


function _lua_gethookcount($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $basehookcount=(($0+44)|0);
  var $1=HEAP32[(($basehookcount)>>2)];

  return $1;
}


function _luaK_posfix($fs, $op, $e1, $e2, $line) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $op_addr;
      var $e1_addr;
      var $e2_addr;
      var $line_addr;
      $fs_addr=$fs;
      $op_addr=$op;
      $e1_addr=$e1;
      $e2_addr=$e2;
      $line_addr=$line;
      var $0=$op_addr;
      if ((($0)|0)==13) {
        label = 3; break;
      }
      else if ((($0)|0)==14) {
        label = 4; break;
      }
      else if ((($0)|0)==6) {
        label = 5; break;
      }
      else if ((($0)|0)==0 | (($0)|0)==1 | (($0)|0)==2 | (($0)|0)==3 | (($0)|0)==4 | (($0)|0)==5) {
        label = 10; break;
      }
      else if ((($0)|0)==7 | (($0)|0)==8 | (($0)|0)==9) {
        label = 11; break;
      }
      else if ((($0)|0)==10 | (($0)|0)==11 | (($0)|0)==12) {
        label = 12; break;
      }
      else {
      label = 13; break;
      }
      
    case 3: 
      var $1=$fs_addr;
      var $2=$e2_addr;
      _luaK_dischargevars($1, $2);
      var $3=$fs_addr;
      var $4=$e2_addr;
      var $f=(($4+16)|0);
      var $5=$e1_addr;
      var $f1=(($5+16)|0);
      var $6=HEAP32[(($f1)>>2)];
      _luaK_concat($3, $f, $6);
      var $7=$e1_addr;
      var $8=$e2_addr;
      var $9=$7;
      var $10=$8;
      HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];HEAP32[((($9)+(12))>>2)]=HEAP32[((($10)+(12))>>2)];HEAP32[((($9)+(16))>>2)]=HEAP32[((($10)+(16))>>2)];
      label = 14; break;
    case 4: 
      var $11=$fs_addr;
      var $12=$e2_addr;
      _luaK_dischargevars($11, $12);
      var $13=$fs_addr;
      var $14=$e2_addr;
      var $t=(($14+12)|0);
      var $15=$e1_addr;
      var $t3=(($15+12)|0);
      var $16=HEAP32[(($t3)>>2)];
      _luaK_concat($13, $t, $16);
      var $17=$e1_addr;
      var $18=$e2_addr;
      var $19=$17;
      var $20=$18;
      HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];HEAP32[((($19)+(12))>>2)]=HEAP32[((($20)+(12))>>2)];HEAP32[((($19)+(16))>>2)]=HEAP32[((($20)+(16))>>2)];
      label = 14; break;
    case 5: 
      var $21=$fs_addr;
      var $22=$e2_addr;
      _luaK_exp2val($21, $22);
      var $23=$e2_addr;
      var $k=(($23)|0);
      var $24=HEAP32[(($k)>>2)];
      var $cmp=(($24)|0)==11;
      if ($cmp) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $25=$e2_addr;
      var $u=(($25+4)|0);
      var $info=$u;
      var $26=HEAP32[(($info)>>2)];
      var $27=$fs_addr;
      var $f5=(($27)|0);
      var $28=HEAP32[(($f5)>>2)];
      var $code=(($28+12)|0);
      var $29=HEAP32[(($code)>>2)];
      var $arrayidx=(($29+($26<<2))|0);
      var $30=HEAP32[(($arrayidx)>>2)];
      var $shr=$30 >>> 0;
      var $and=$shr & 63;
      var $cmp6=(($and)|0)==22;
      if ($cmp6) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $31=$fs_addr;
      var $32=$e1_addr;
      _freeexp($31, $32);
      var $33=$e2_addr;
      var $u7=(($33+4)|0);
      var $info8=$u7;
      var $34=HEAP32[(($info8)>>2)];
      var $35=$fs_addr;
      var $f9=(($35)|0);
      var $36=HEAP32[(($f9)>>2)];
      var $code10=(($36+12)|0);
      var $37=HEAP32[(($code10)>>2)];
      var $arrayidx11=(($37+($34<<2))|0);
      var $38=HEAP32[(($arrayidx11)>>2)];
      var $and12=$38 & 8388607;
      var $39=$e1_addr;
      var $u13=(($39+4)|0);
      var $info14=$u13;
      var $40=HEAP32[(($info14)>>2)];
      var $shl=$40 << 23;
      var $and15=$shl & -8388608;
      var $or=$and12 | $and15;
      var $41=$e2_addr;
      var $u16=(($41+4)|0);
      var $info17=$u16;
      var $42=HEAP32[(($info17)>>2)];
      var $43=$fs_addr;
      var $f18=(($43)|0);
      var $44=HEAP32[(($f18)>>2)];
      var $code19=(($44+12)|0);
      var $45=HEAP32[(($code19)>>2)];
      var $arrayidx20=(($45+($42<<2))|0);
      HEAP32[(($arrayidx20)>>2)]=$or;
      var $46=$e1_addr;
      var $k21=(($46)|0);
      HEAP32[(($k21)>>2)]=11;
      var $47=$e2_addr;
      var $u22=(($47+4)|0);
      var $info23=$u22;
      var $48=HEAP32[(($info23)>>2)];
      var $49=$e1_addr;
      var $u24=(($49+4)|0);
      var $info25=$u24;
      HEAP32[(($info25)>>2)]=$48;
      label = 9; break;
    case 8: 
      var $50=$fs_addr;
      var $51=$e2_addr;
      _luaK_exp2nextreg($50, $51);
      var $52=$fs_addr;
      var $53=$e1_addr;
      var $54=$e2_addr;
      var $55=$line_addr;
      _codearith($52, 22, $53, $54, $55);
      label = 9; break;
    case 9: 
      label = 14; break;
    case 10: 
      var $56=$fs_addr;
      var $57=$op_addr;
      var $sub=(($57)|0);
      var $add=((($sub)+(13))|0);
      var $58=$e1_addr;
      var $59=$e2_addr;
      var $60=$line_addr;
      _codearith($56, $add, $58, $59, $60);
      label = 14; break;
    case 11: 
      var $61=$fs_addr;
      var $62=$op_addr;
      var $sub28=((($62)-(7))|0);
      var $add29=((($sub28)+(24))|0);
      var $63=$e1_addr;
      var $64=$e2_addr;
      _codecomp($61, $add29, 1, $63, $64);
      label = 14; break;
    case 12: 
      var $65=$fs_addr;
      var $66=$op_addr;
      var $sub31=((($66)-(10))|0);
      var $add32=((($sub31)+(24))|0);
      var $67=$e1_addr;
      var $68=$e2_addr;
      _codecomp($65, $add32, 0, $67, $68);
      label = 14; break;
    case 13: 
      label = 14; break;
    case 14: 

      return;
  }

}
_luaK_posfix["X"]=1;

function _codecomp($fs, $op, $cond, $e1, $e2) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $op_addr;
      var $cond_addr;
      var $e1_addr;
      var $e2_addr;
      var $o1;
      var $o2;
      var $temp;
      $fs_addr=$fs;
      $op_addr=$op;
      $cond_addr=$cond;
      $e1_addr=$e1;
      $e2_addr=$e2;
      var $0=$fs_addr;
      var $1=$e1_addr;
      var $call=_luaK_exp2RK($0, $1);
      $o1=$call;
      var $2=$fs_addr;
      var $3=$e2_addr;
      var $call1=_luaK_exp2RK($2, $3);
      $o2=$call1;
      var $4=$fs_addr;
      var $5=$e2_addr;
      _freeexp($4, $5);
      var $6=$fs_addr;
      var $7=$e1_addr;
      _freeexp($6, $7);
      var $8=$cond_addr;
      var $cmp=(($8)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $9=$op_addr;
      var $cmp2=(($9)|0)!=24;
      if ($cmp2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $10=$o1;
      $temp=$10;
      var $11=$o2;
      $o1=$11;
      var $12=$temp;
      $o2=$12;
      $cond_addr=1;
      label = 5; break;
    case 5: 
      var $13=$fs_addr;
      var $14=$op_addr;
      var $15=$cond_addr;
      var $16=$o1;
      var $17=$o2;
      var $call3=_condjump($13, $14, $15, $16, $17);
      var $18=$e1_addr;
      var $u=(($18+4)|0);
      var $info=$u;
      HEAP32[(($info)>>2)]=$call3;
      var $19=$e1_addr;
      var $k=(($19)|0);
      HEAP32[(($k)>>2)]=10;

      return;
  }

}
_codecomp["X"]=1;

function _condjump($fs, $op, $A, $B, $C) {
  var label = 0;


  var $fs_addr;
  var $op_addr;
  var $A_addr;
  var $B_addr;
  var $C_addr;
  $fs_addr=$fs;
  $op_addr=$op;
  $A_addr=$A;
  $B_addr=$B;
  $C_addr=$C;
  var $0=$fs_addr;
  var $1=$op_addr;
  var $2=$A_addr;
  var $3=$B_addr;
  var $4=$C_addr;
  var $call=_luaK_codeABC($0, $1, $2, $3, $4);
  var $5=$fs_addr;
  var $call1=_luaK_jump($5);

  return $call1;
}


function _discharge2anyreg($fs, $e) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $e_addr;
      $fs_addr=$fs;
      $e_addr=$e;
      var $0=$e_addr;
      var $k=(($0)|0);
      var $1=HEAP32[(($k)>>2)];
      var $cmp=(($1)|0)!=6;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$fs_addr;
      _luaK_reserveregs($2, 1);
      var $3=$fs_addr;
      var $4=$e_addr;
      var $5=$fs_addr;
      var $freereg=(($5+48)|0);
      var $6=HEAP8[($freereg)];
      var $conv=(($6)&255);
      var $sub=((($conv)-(1))|0);
      _discharge2reg($3, $4, $sub);
      label = 4; break;
    case 4: 

      return;
  }

}


function _removevalues($fs, $list) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $list_addr;
      $fs_addr=$fs;
      $list_addr=$list;
      label = 3; break;
    case 3: 
      var $0=$list_addr;
      var $cmp=(($0)|0)!=-1;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$fs_addr;
      var $2=$list_addr;
      var $call=_patchtestreg($1, $2, 255);
      label = 5; break;
    case 5: 
      var $3=$fs_addr;
      var $4=$list_addr;
      var $call1=_getjump($3, $4);
      $list_addr=$call1;
      label = 3; break;
    case 6: 

      return;
  }

}


function _patchtestreg($fs, $node, $reg) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $fs_addr;
      var $node_addr;
      var $reg_addr;
      var $i;
      $fs_addr=$fs;
      $node_addr=$node;
      $reg_addr=$reg;
      var $0=$fs_addr;
      var $1=$node_addr;
      var $call=_getjumpcontrol($0, $1);
      $i=$call;
      var $2=$i;
      var $3=HEAP32[(($2)>>2)];
      var $shr=$3 >>> 0;
      var $and=$shr & 63;
      var $cmp=(($and)|0)!=28;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 9; break;
    case 4: 
      var $4=$reg_addr;
      var $cmp1=(($4)|0)!=255;
      if ($cmp1) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $5=$reg_addr;
      var $6=$i;
      var $7=HEAP32[(($6)>>2)];
      var $shr2=$7 >>> 23;
      var $and3=$shr2 & 511;
      var $cmp4=(($5)|0)!=(($and3)|0);
      if ($cmp4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $8=$i;
      var $9=HEAP32[(($8)>>2)];
      var $and6=$9 & -16321;
      var $10=$reg_addr;
      var $shl=$10 << 6;
      var $and7=$shl & 16320;
      var $or=$and6 | $and7;
      var $11=$i;
      HEAP32[(($11)>>2)]=$or;
      label = 8; break;
    case 7: 
      var $12=$i;
      var $13=HEAP32[(($12)>>2)];
      var $shr8=$13 >>> 23;
      var $and9=$shr8 & 511;
      var $shl10=$and9 << 6;
      var $or11=27 | $shl10;
      var $14=$i;
      var $15=HEAP32[(($14)>>2)];
      var $shr12=$15 >>> 14;
      var $and13=$shr12 & 511;
      var $shl14=$and13 << 14;
      var $or15=$or11 | $shl14;
      var $16=$i;
      HEAP32[(($16)>>2)]=$or15;
      label = 8; break;
    case 8: 
      $retval=1;
      label = 9; break;
    case 9: 
      var $17=$retval;

      return $17;
  }

}
_patchtestreg["X"]=1;

function _discharge2reg($fs, $e, $reg) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $e_addr;
      var $reg_addr;
      var $pc;
      $fs_addr=$fs;
      $e_addr=$e;
      $reg_addr=$reg;
      var $0=$fs_addr;
      var $1=$e_addr;
      _luaK_dischargevars($0, $1);
      var $2=$e_addr;
      var $k=(($2)|0);
      var $3=HEAP32[(($k)>>2)];
      if ((($3)|0)==1) {
        label = 3; break;
      }
      else if ((($3)|0)==3 | (($3)|0)==2) {
        label = 4; break;
      }
      else if ((($3)|0)==4) {
        label = 5; break;
      }
      else if ((($3)|0)==5) {
        label = 6; break;
      }
      else if ((($3)|0)==11) {
        label = 7; break;
      }
      else if ((($3)|0)==6) {
        label = 8; break;
      }
      else {
      label = 11; break;
      }
      
    case 3: 
      var $4=$fs_addr;
      var $5=$reg_addr;
      _luaK_nil($4, $5, 1);
      label = 12; break;
    case 4: 
      var $6=$fs_addr;
      var $7=$reg_addr;
      var $8=$e_addr;
      var $k2=(($8)|0);
      var $9=HEAP32[(($k2)>>2)];
      var $cmp=(($9)|0)==2;
      var $conv=(($cmp)&1);
      var $call=_luaK_codeABC($6, 3, $7, $conv, 0);
      label = 12; break;
    case 5: 
      var $10=$fs_addr;
      var $11=$reg_addr;
      var $12=$e_addr;
      var $u=(($12+4)|0);
      var $info=$u;
      var $13=HEAP32[(($info)>>2)];
      var $call4=_luaK_codek($10, $11, $13);
      label = 12; break;
    case 6: 
      var $14=$fs_addr;
      var $15=$reg_addr;
      var $16=$fs_addr;
      var $17=$e_addr;
      var $u6=(($17+4)|0);
      var $nval=$u6;
      var $18=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($nval)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($nval)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call7=_luaK_numberK($16, $18);
      var $call8=_luaK_codek($14, $15, $call7);
      label = 12; break;
    case 7: 
      var $19=$e_addr;
      var $u10=(($19+4)|0);
      var $info11=$u10;
      var $20=HEAP32[(($info11)>>2)];
      var $21=$fs_addr;
      var $f=(($21)|0);
      var $22=HEAP32[(($f)>>2)];
      var $code=(($22+12)|0);
      var $23=HEAP32[(($code)>>2)];
      var $arrayidx=(($23+($20<<2))|0);
      $pc=$arrayidx;
      var $24=$pc;
      var $25=HEAP32[(($24)>>2)];
      var $and=$25 & -16321;
      var $26=$reg_addr;
      var $shl=$26 << 6;
      var $and12=$shl & 16320;
      var $or=$and | $and12;
      var $27=$pc;
      HEAP32[(($27)>>2)]=$or;
      label = 12; break;
    case 8: 
      var $28=$reg_addr;
      var $29=$e_addr;
      var $u14=(($29+4)|0);
      var $info15=$u14;
      var $30=HEAP32[(($info15)>>2)];
      var $cmp16=(($28)|0)!=(($30)|0);
      if ($cmp16) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $31=$fs_addr;
      var $32=$reg_addr;
      var $33=$e_addr;
      var $u18=(($33+4)|0);
      var $info19=$u18;
      var $34=HEAP32[(($info19)>>2)];
      var $call20=_luaK_codeABC($31, 0, $32, $34, 0);
      label = 10; break;
    case 10: 
      label = 12; break;
    case 11: 
      label = 13; break;
    case 12: 
      var $35=$reg_addr;
      var $36=$e_addr;
      var $u21=(($36+4)|0);
      var $info22=$u21;
      HEAP32[(($info22)>>2)]=$35;
      var $37=$e_addr;
      var $k23=(($37)|0);
      HEAP32[(($k23)>>2)]=6;
      label = 13; break;
    case 13: 

      return;
  }

}
_discharge2reg["X"]=1;

function _constfolding($op, $e1, $e2) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $op_addr;
      var $e1_addr;
      var $e2_addr;
      var $r;
      $op_addr=$op;
      $e1_addr=$e1;
      $e2_addr=$e2;
      var $0=$e1_addr;
      var $call=_isnumeral($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$e2_addr;
      var $call1=_isnumeral($1);
      var $tobool2=(($call1)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $retval=0;
      label = 10; break;
    case 5: 
      var $2=$op_addr;
      var $cmp=(($2)|0)==16;
      if ($cmp) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $3=$op_addr;
      var $cmp4=(($3)|0)==17;
      if ($cmp4) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $4=$e2_addr;
      var $u=(($4+4)|0);
      var $nval=$u;
      var $5=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($nval)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($nval)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp5=$5 == 0;
      if ($cmp5) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $retval=0;
      label = 10; break;
    case 9: 
      var $6=$op_addr;
      var $sub=((($6)-(13))|0);
      var $add=(($sub)|0);
      var $7=$e1_addr;
      var $u8=(($7+4)|0);
      var $nval9=$u8;
      var $8=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($nval9)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($nval9)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $9=$e2_addr;
      var $u10=(($9+4)|0);
      var $nval11=$u10;
      var $10=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($nval11)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($nval11)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call12=_luaO_arith($add, $8, $10);
      $r=$call12;
      var $11=$r;
      var $12=$e1_addr;
      var $u13=(($12+4)|0);
      var $nval14=$u13;
      (HEAPF64[(tempDoublePtr)>>3]=$11,HEAP32[(($nval14)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($nval14)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      $retval=1;
      label = 10; break;
    case 10: 
      var $13=$retval;

      return $13;
  }

}
_constfolding["X"]=1;

function _need_value($fs, $list) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $fs_addr;
      var $list_addr;
      var $i;
      $fs_addr=$fs;
      $list_addr=$list;
      label = 3; break;
    case 3: 
      var $0=$list_addr;
      var $cmp=(($0)|0)!=-1;
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $1=$fs_addr;
      var $2=$list_addr;
      var $call=_getjumpcontrol($1, $2);
      var $3=HEAP32[(($call)>>2)];
      $i=$3;
      var $4=$i;
      var $shr=$4 >>> 0;
      var $and=$shr & 63;
      var $cmp1=(($and)|0)!=28;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=1;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $5=$fs_addr;
      var $6=$list_addr;
      var $call2=_getjump($5, $6);
      $list_addr=$call2;
      label = 3; break;
    case 8: 
      $retval=0;
      label = 9; break;
    case 9: 
      var $7=$retval;

      return $7;
  }

}


function _code_label($fs, $A, $b, $jump) {
  var label = 0;


  var $fs_addr;
  var $A_addr;
  var $b_addr;
  var $jump_addr;
  $fs_addr=$fs;
  $A_addr=$A;
  $b_addr=$b;
  $jump_addr=$jump;
  var $0=$fs_addr;
  var $call=_luaK_getlabel($0);
  var $1=$fs_addr;
  var $2=$A_addr;
  var $3=$b_addr;
  var $4=$jump_addr;
  var $call1=_luaK_codeABC($1, 3, $2, $3, $4);

  return $call1;
}


function _dischargejpc($fs) {
  var label = 0;


  var $fs_addr;
  $fs_addr=$fs;
  var $0=$fs_addr;
  var $1=$fs_addr;
  var $jpc=(($1+28)|0);
  var $2=HEAP32[(($jpc)>>2)];
  var $3=$fs_addr;
  var $pc=(($3+20)|0);
  var $4=HEAP32[(($pc)>>2)];
  var $5=$fs_addr;
  var $pc1=(($5+20)|0);
  var $6=HEAP32[(($pc1)>>2)];
  _patchlistaux($0, $2, $4, 255, $6);
  var $7=$fs_addr;
  var $jpc2=(($7+28)|0);
  HEAP32[(($jpc2)>>2)]=-1;

  return;
}


function _luaK_setlist($fs, $base, $nelems, $tostore) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $base_addr;
      var $nelems_addr;
      var $tostore_addr;
      var $c;
      var $b;
      $fs_addr=$fs;
      $base_addr=$base;
      $nelems_addr=$nelems;
      $tostore_addr=$tostore;
      var $0=$nelems_addr;
      var $sub=((($0)-(1))|0);
      var $div=((((($sub)|0))/(50))&-1);
      var $add=((($div)+(1))|0);
      $c=$add;
      var $1=$tostore_addr;
      var $cmp=(($1)|0)==-1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $cond = 0;label = 5; break;
    case 4: 
      var $2=$tostore_addr;
      var $cond = $2;label = 5; break;
    case 5: 
      var $cond;
      $b=$cond;
      var $3=$c;
      var $cmp1=(($3)|0) <= 511;
      if ($cmp1) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $4=$fs_addr;
      var $5=$base_addr;
      var $6=$b;
      var $7=$c;
      var $call=_luaK_codeABC($4, 36, $5, $6, $7);
      label = 11; break;
    case 7: 
      var $8=$c;
      var $cmp2=(($8)|0) <= 67108863;
      if ($cmp2) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $9=$fs_addr;
      var $10=$base_addr;
      var $11=$b;
      var $call4=_luaK_codeABC($9, 36, $10, $11, 0);
      var $12=$fs_addr;
      var $13=$c;
      var $call5=_codeextraarg($12, $13);
      label = 10; break;
    case 9: 
      var $14=$fs_addr;
      var $ls=(($14+12)|0);
      var $15=HEAP32[(($ls)>>2)];
      _luaX_syntaxerror($15, ((5252848)|0));

    case 10: 
      label = 11; break;
    case 11: 
      var $16=$base_addr;
      var $add8=((($16)+(1))|0);
      var $conv=(($add8) & 255);
      var $17=$fs_addr;
      var $freereg=(($17+48)|0);
      HEAP8[($freereg)]=$conv;

      return;
  }

}
_luaK_setlist["X"]=1;

function _lua_getstack($L, $level, $ar) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $level_addr;
      var $ar_addr;
      var $status;
      var $ci;
      $L_addr=$L;
      $level_addr=$level;
      $ar_addr=$ar;
      var $0=$level_addr;
      var $cmp=(($0)|0) < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 15; break;
    case 4: 
      var $1=$L_addr;
      var $ci1=(($1+16)|0);
      var $2=HEAP32[(($ci1)>>2)];
      $ci=$2;
      label = 5; break;
    case 5: 
      var $3=$level_addr;
      var $cmp2=(($3)|0) > 0;
      if ($cmp2) { label = 6; break; } else { var $6 = 0;label = 7; break; }
    case 6: 
      var $4=$ci;
      var $5=$L_addr;
      var $base_ci=(($5+72)|0);
      var $cmp3=(($4)|0)!=(($base_ci)|0);
      var $6 = $cmp3;label = 7; break;
    case 7: 
      var $6;
      if ($6) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $7=$level_addr;
      var $dec=((($7)-(1))|0);
      $level_addr=$dec;
      label = 9; break;
    case 9: 
      var $8=$ci;
      var $previous=(($8+8)|0);
      var $9=HEAP32[(($previous)>>2)];
      $ci=$9;
      label = 5; break;
    case 10: 
      var $10=$level_addr;
      var $cmp4=(($10)|0)==0;
      if ($cmp4) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $11=$ci;
      var $12=$L_addr;
      var $base_ci5=(($12+72)|0);
      var $cmp6=(($11)|0)!=(($base_ci5)|0);
      if ($cmp6) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $status=1;
      var $13=$ci;
      var $14=$ar_addr;
      var $i_ci=(($14+96)|0);
      HEAP32[(($i_ci)>>2)]=$13;
      label = 14; break;
    case 13: 
      $status=0;
      label = 14; break;
    case 14: 
      var $15=$status;
      $retval=$15;
      label = 15; break;
    case 15: 
      var $16=$retval;

      return $16;
  }

}
_lua_getstack["X"]=1;

function _lua_getlocal($L, $ar, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $ar_addr;
      var $n_addr;
      var $name;
      var $pos=__stackBase__;
      var $io2;
      var $io1;
      $L_addr=$L;
      $ar_addr=$ar;
      $n_addr=$n;
      var $0=$ar_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$L_addr;
      var $top=(($1+8)|0);
      var $2=HEAP32[(($top)>>2)];
      var $add_ptr=((($2)-(12))|0);
      var $tt_=(($add_ptr+8)|0);
      var $3=HEAP32[(($tt_)>>2)];
      var $cmp1=(($3)|0)==70;
      if ($cmp1) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $name=0;
      label = 6; break;
    case 5: 
      var $4=$L_addr;
      var $top3=(($4+8)|0);
      var $5=HEAP32[(($top3)>>2)];
      var $add_ptr4=((($5)-(12))|0);
      var $value_=(($add_ptr4)|0);
      var $gc=$value_;
      var $6=HEAP32[(($gc)>>2)];
      var $cl=$6;
      var $l=$cl;
      var $p=(($l+12)|0);
      var $7=HEAP32[(($p)>>2)];
      var $8=$n_addr;
      var $call=_luaF_getlocalname($7, $8, 0);
      $name=$call;
      label = 6; break;
    case 6: 
      label = 10; break;
    case 7: 
      HEAP32[(($pos)>>2)]=0;
      var $9=$L_addr;
      var $10=$ar_addr;
      var $i_ci=(($10+96)|0);
      var $11=HEAP32[(($i_ci)>>2)];
      var $12=$n_addr;
      var $call6=_findlocal($9, $11, $12, $pos);
      $name=$call6;
      var $13=$name;
      var $tobool=(($13)|0)!=0;
      if ($tobool) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $14=HEAP32[(($pos)>>2)];
      $io2=$14;
      var $15=$L_addr;
      var $top8=(($15+8)|0);
      var $16=HEAP32[(($top8)>>2)];
      $io1=$16;
      var $17=$io1;
      var $value_9=(($17)|0);
      var $18=$io2;
      var $value_10=(($18)|0);
      var $19=$value_9;
      var $20=$value_10;
      HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];
      var $21=$io2;
      var $tt_11=(($21+8)|0);
      var $22=HEAP32[(($tt_11)>>2)];
      var $23=$io1;
      var $tt_12=(($23+8)|0);
      HEAP32[(($tt_12)>>2)]=$22;
      var $24=$L_addr;
      var $top13=(($24+8)|0);
      var $25=HEAP32[(($top13)>>2)];
      var $incdec_ptr=(($25+12)|0);
      HEAP32[(($top13)>>2)]=$incdec_ptr;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $26=$name;
      STACKTOP = __stackBase__;
      return $26;
  }

}
_lua_getlocal["X"]=1;

function _findlocal($L, $ci, $n, $pos) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $ci_addr;
      var $n_addr;
      var $pos_addr;
      var $name;
      var $base;
      var $limit;
      $L_addr=$L;
      $ci_addr=$ci;
      $n_addr=$n;
      $pos_addr=$pos;
      $name=0;
      var $0=$ci_addr;
      var $callstatus=(($0+18)|0);
      var $1=HEAP8[($callstatus)];
      var $conv=(($1)&255);
      var $and=$conv & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $2=$n_addr;
      var $cmp=(($2)|0) < 0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$ci_addr;
      var $4=$n_addr;
      var $sub=(((-$4))|0);
      var $5=$pos_addr;
      var $call=_findvararg($3, $sub, $5);
      $retval=$call;
      label = 18; break;
    case 5: 
      var $6=$ci_addr;
      var $u=(($6+24)|0);
      var $l=$u;
      var $base3=(($l)|0);
      var $7=HEAP32[(($base3)>>2)];
      $base=$7;
      var $8=$ci_addr;
      var $func=(($8)|0);
      var $9=HEAP32[(($func)>>2)];
      var $value_=(($9)|0);
      var $gc=$value_;
      var $10=HEAP32[(($gc)>>2)];
      var $cl=$10;
      var $l4=$cl;
      var $p=(($l4+12)|0);
      var $11=HEAP32[(($p)>>2)];
      var $12=$n_addr;
      var $13=$ci_addr;
      var $call5=_currentpc($13);
      var $call6=_luaF_getlocalname($11, $12, $call5);
      $name=$call6;
      label = 6; break;
    case 6: 
      label = 8; break;
    case 7: 
      var $14=$ci_addr;
      var $func8=(($14)|0);
      var $15=HEAP32[(($func8)>>2)];
      var $add_ptr=(($15+12)|0);
      $base=$add_ptr;
      label = 8; break;
    case 8: 
      var $16=$name;
      var $cmp10=(($16)|0)==0;
      if ($cmp10) { label = 9; break; } else { label = 17; break; }
    case 9: 
      var $17=$ci_addr;
      var $18=$L_addr;
      var $ci13=(($18+16)|0);
      var $19=HEAP32[(($ci13)>>2)];
      var $cmp14=(($17)|0)==(($19)|0);
      if ($cmp14) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $20=$L_addr;
      var $top=(($20+8)|0);
      var $21=HEAP32[(($top)>>2)];
      var $cond = $21;label = 12; break;
    case 11: 
      var $22=$ci_addr;
      var $next=(($22+12)|0);
      var $23=HEAP32[(($next)>>2)];
      var $func16=(($23)|0);
      var $24=HEAP32[(($func16)>>2)];
      var $cond = $24;label = 12; break;
    case 12: 
      var $cond;
      $limit=$cond;
      var $25=$limit;
      var $26=$base;
      var $sub_ptr_lhs_cast=$25;
      var $sub_ptr_rhs_cast=$26;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(12))&-1);
      var $27=$n_addr;
      var $cmp17=(($sub_ptr_div)|0) >= (($27)|0);
      if ($cmp17) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $28=$n_addr;
      var $cmp19=(($28)|0) > 0;
      if ($cmp19) { label = 14; break; } else { label = 15; break; }
    case 14: 
      $name=((5250820)|0);
      label = 16; break;
    case 15: 
      $retval=0;
      label = 18; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $29=$base;
      var $30=$n_addr;
      var $sub25=((($30)-(1))|0);
      var $add_ptr26=(($29+((($sub25)*(12))&-1))|0);
      var $31=$pos_addr;
      HEAP32[(($31)>>2)]=$add_ptr26;
      var $32=$name;
      $retval=$32;
      label = 18; break;
    case 18: 
      var $33=$retval;

      return $33;
  }

}
_findlocal["X"]=1;

function _lua_setlocal($L, $ar, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $ar_addr;
      var $n_addr;
      var $pos=__stackBase__;
      var $name;
      var $io2;
      var $io1;
      $L_addr=$L;
      $ar_addr=$ar;
      $n_addr=$n;
      HEAP32[(($pos)>>2)]=0;
      var $0=$L_addr;
      var $1=$ar_addr;
      var $i_ci=(($1+96)|0);
      var $2=HEAP32[(($i_ci)>>2)];
      var $3=$n_addr;
      var $call=_findlocal($0, $2, $3, $pos);
      $name=$call;
      var $4=$name;
      var $tobool=(($4)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$L_addr;
      var $top=(($5+8)|0);
      var $6=HEAP32[(($top)>>2)];
      var $add_ptr=((($6)-(12))|0);
      $io2=$add_ptr;
      var $7=HEAP32[(($pos)>>2)];
      $io1=$7;
      var $8=$io1;
      var $value_=(($8)|0);
      var $9=$io2;
      var $value_1=(($9)|0);
      var $10=$value_;
      var $11=$value_1;
      HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];
      var $12=$io2;
      var $tt_=(($12+8)|0);
      var $13=HEAP32[(($tt_)>>2)];
      var $14=$io1;
      var $tt_2=(($14+8)|0);
      HEAP32[(($tt_2)>>2)]=$13;
      label = 4; break;
    case 4: 
      var $15=$L_addr;
      var $top3=(($15+8)|0);
      var $16=HEAP32[(($top3)>>2)];
      var $incdec_ptr=((($16)-(12))|0);
      HEAP32[(($top3)>>2)]=$incdec_ptr;
      var $17=$name;
      STACKTOP = __stackBase__;
      return $17;
  }

}


function _lua_getinfo($L, $what, $ar) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $what_addr;
      var $ar_addr;
      var $status;
      var $cl;
      var $ci;
      var $func;
      var $io2;
      var $io1;
      $L_addr=$L;
      $what_addr=$what;
      $ar_addr=$ar;
      var $0=$what_addr;
      var $1=HEAP8[($0)];
      var $conv=(($1 << 24) >> 24);
      var $cmp=(($conv)|0)==62;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $ci=0;
      var $2=$L_addr;
      var $top=(($2+8)|0);
      var $3=HEAP32[(($top)>>2)];
      var $add_ptr=((($3)-(12))|0);
      $func=$add_ptr;
      var $4=$what_addr;
      var $incdec_ptr=(($4+1)|0);
      $what_addr=$incdec_ptr;
      var $5=$L_addr;
      var $top2=(($5+8)|0);
      var $6=HEAP32[(($top2)>>2)];
      var $incdec_ptr3=((($6)-(12))|0);
      HEAP32[(($top2)>>2)]=$incdec_ptr3;
      label = 5; break;
    case 4: 
      var $7=$ar_addr;
      var $i_ci=(($7+96)|0);
      var $8=HEAP32[(($i_ci)>>2)];
      $ci=$8;
      var $9=$ci;
      var $func4=(($9)|0);
      var $10=HEAP32[(($func4)>>2)];
      $func=$10;
      label = 5; break;
    case 5: 
      var $11=$func;
      var $tt_=(($11+8)|0);
      var $12=HEAP32[(($tt_)>>2)];
      var $and=$12 & 31;
      var $cmp5=(($and)|0)==6;
      if ($cmp5) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $13=$func;
      var $value_=(($13)|0);
      var $gc=$value_;
      var $14=HEAP32[(($gc)>>2)];
      var $cl7=$14;
      var $cond = $cl7;label = 8; break;
    case 7: 
      var $cond = 0;label = 8; break;
    case 8: 
      var $cond;
      $cl=$cond;
      var $15=$L_addr;
      var $16=$what_addr;
      var $17=$ar_addr;
      var $18=$cl;
      var $19=$ci;
      var $call=_auxgetinfo($15, $16, $17, $18, $19);
      $status=$call;
      var $20=$what_addr;
      var $call8=_strchr($20, 102);
      var $tobool=(($call8)|0)!=0;
      if ($tobool) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $21=$func;
      $io2=$21;
      var $22=$L_addr;
      var $top10=(($22+8)|0);
      var $23=HEAP32[(($top10)>>2)];
      $io1=$23;
      var $24=$io1;
      var $value_11=(($24)|0);
      var $25=$io2;
      var $value_12=(($25)|0);
      var $26=$value_11;
      var $27=$value_12;
      HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];
      var $28=$io2;
      var $tt_13=(($28+8)|0);
      var $29=HEAP32[(($tt_13)>>2)];
      var $30=$io1;
      var $tt_14=(($30+8)|0);
      HEAP32[(($tt_14)>>2)]=$29;
      var $31=$L_addr;
      var $top15=(($31+8)|0);
      var $32=HEAP32[(($top15)>>2)];
      var $incdec_ptr16=(($32+12)|0);
      HEAP32[(($top15)>>2)]=$incdec_ptr16;
      var $33=$L_addr;
      var $stack_last=(($33+24)|0);
      var $34=HEAP32[(($stack_last)>>2)];
      var $35=$L_addr;
      var $top17=(($35+8)|0);
      var $36=HEAP32[(($top17)>>2)];
      var $sub_ptr_lhs_cast=$34;
      var $sub_ptr_rhs_cast=$36;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(12))&-1);
      var $cmp18=(($sub_ptr_div)|0) <= 0;
      if ($cmp18) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $37=$L_addr;
      _luaD_growstack($37, 0);
      label = 12; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $38=$what_addr;
      var $call24=_strchr($38, 76);
      var $tobool25=(($call24)|0)!=0;
      if ($tobool25) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $39=$L_addr;
      var $40=$cl;
      _collectvalidlines($39, $40);
      label = 15; break;
    case 15: 
      var $41=$status;

      return $41;
  }

}
_lua_getinfo["X"]=1;

function _auxgetinfo($L, $what, $ar, $f, $ci) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $what_addr;
      var $ar_addr;
      var $f_addr;
      var $ci_addr;
      var $status;
      $L_addr=$L;
      $what_addr=$what;
      $ar_addr=$ar;
      $f_addr=$f;
      $ci_addr=$ci;
      $status=1;
      label = 3; break;
    case 3: 
      var $0=$what_addr;
      var $1=HEAP8[($0)];
      var $tobool=(($1 << 24) >> 24)!=0;
      if ($tobool) { label = 4; break; } else { label = 35; break; }
    case 4: 
      var $2=$what_addr;
      var $3=HEAP8[($2)];
      var $conv=(($3 << 24) >> 24);
      if ((($conv)|0)==83) {
        label = 5; break;
      }
      else if ((($conv)|0)==108) {
        label = 6; break;
      }
      else if ((($conv)|0)==117) {
        label = 11; break;
      }
      else if ((($conv)|0)==116) {
        label = 19; break;
      }
      else if ((($conv)|0)==110) {
        label = 23; break;
      }
      else if ((($conv)|0)==76 | (($conv)|0)==102) {
        label = 31; break;
      }
      else {
      label = 32; break;
      }
      
    case 5: 
      var $4=$ar_addr;
      var $5=$f_addr;
      _funcinfo($4, $5);
      label = 33; break;
    case 6: 
      var $6=$ci_addr;
      var $tobool2=(($6)|0)!=0;
      if ($tobool2) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $7=$ci_addr;
      var $callstatus=(($7+18)|0);
      var $8=HEAP8[($callstatus)];
      var $conv3=(($8)&255);
      var $and=$conv3 & 1;
      var $tobool4=(($and)|0)!=0;
      if ($tobool4) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $9=$ci_addr;
      var $call=_currentline($9);
      var $cond = $call;label = 10; break;
    case 9: 
      var $cond = -1;label = 10; break;
    case 10: 
      var $cond;
      var $10=$ar_addr;
      var $currentline=(($10+20)|0);
      HEAP32[(($currentline)>>2)]=$cond;
      label = 33; break;
    case 11: 
      var $11=$f_addr;
      var $cmp=(($11)|0)==0;
      if ($cmp) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $cond11 = 0;label = 14; break;
    case 13: 
      var $12=$f_addr;
      var $c=$12;
      var $nupvalues=(($c+6)|0);
      var $13=HEAP8[($nupvalues)];
      var $conv9=(($13)&255);
      var $cond11 = $conv9;label = 14; break;
    case 14: 
      var $cond11;
      var $conv12=(($cond11) & 255);
      var $14=$ar_addr;
      var $nups=(($14+32)|0);
      HEAP8[($nups)]=$conv12;
      var $15=$f_addr;
      var $cmp13=(($15)|0)==0;
      if ($cmp13) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $16=$f_addr;
      var $c15=$16;
      var $tt=(($c15+4)|0);
      var $17=HEAP8[($tt)];
      var $conv16=(($17)&255);
      var $cmp17=(($conv16)|0)==38;
      if ($cmp17) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $18=$ar_addr;
      var $isvararg=(($18+34)|0);
      HEAP8[($isvararg)]=1;
      var $19=$ar_addr;
      var $nparams=(($19+33)|0);
      HEAP8[($nparams)]=0;
      label = 18; break;
    case 17: 
      var $20=$f_addr;
      var $l=$20;
      var $p=(($l+12)|0);
      var $21=HEAP32[(($p)>>2)];
      var $is_vararg=(($21+77)|0);
      var $22=HEAP8[($is_vararg)];
      var $23=$ar_addr;
      var $isvararg19=(($23+34)|0);
      HEAP8[($isvararg19)]=$22;
      var $24=$f_addr;
      var $l20=$24;
      var $p21=(($l20+12)|0);
      var $25=HEAP32[(($p21)>>2)];
      var $numparams=(($25+76)|0);
      var $26=HEAP8[($numparams)];
      var $27=$ar_addr;
      var $nparams22=(($27+33)|0);
      HEAP8[($nparams22)]=$26;
      label = 18; break;
    case 18: 
      label = 33; break;
    case 19: 
      var $28=$ci_addr;
      var $tobool24=(($28)|0)!=0;
      if ($tobool24) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $29=$ci_addr;
      var $callstatus26=(($29+18)|0);
      var $30=HEAP8[($callstatus26)];
      var $conv27=(($30)&255);
      var $and28=$conv27 & 64;
      var $cond31 = $and28;label = 22; break;
    case 21: 
      var $cond31 = 0;label = 22; break;
    case 22: 
      var $cond31;
      var $conv32=(($cond31) & 255);
      var $31=$ar_addr;
      var $istailcall=(($31+35)|0);
      HEAP8[($istailcall)]=$conv32;
      label = 33; break;
    case 23: 
      var $32=$ci_addr;
      var $tobool34=(($32)|0)!=0;
      if ($tobool34) { label = 24; break; } else { label = 27; break; }
    case 24: 
      var $33=$ci_addr;
      var $callstatus36=(($33+18)|0);
      var $34=HEAP8[($callstatus36)];
      var $conv37=(($34)&255);
      var $and38=$conv37 & 64;
      var $tobool39=(($and38)|0)!=0;
      if ($tobool39) { label = 27; break; } else { label = 25; break; }
    case 25: 
      var $35=$ci_addr;
      var $previous=(($35+8)|0);
      var $36=HEAP32[(($previous)>>2)];
      var $callstatus41=(($36+18)|0);
      var $37=HEAP8[($callstatus41)];
      var $conv42=(($37)&255);
      var $and43=$conv42 & 1;
      var $tobool44=(($and43)|0)!=0;
      if ($tobool44) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $38=$L_addr;
      var $39=$ci_addr;
      var $previous46=(($39+8)|0);
      var $40=HEAP32[(($previous46)>>2)];
      var $41=$ar_addr;
      var $name=(($41+4)|0);
      var $call47=_getfuncname($38, $40, $name);
      var $42=$ar_addr;
      var $namewhat=(($42+8)|0);
      HEAP32[(($namewhat)>>2)]=$call47;
      label = 28; break;
    case 27: 
      var $43=$ar_addr;
      var $namewhat49=(($43+8)|0);
      HEAP32[(($namewhat49)>>2)]=0;
      label = 28; break;
    case 28: 
      var $44=$ar_addr;
      var $namewhat51=(($44+8)|0);
      var $45=HEAP32[(($namewhat51)>>2)];
      var $cmp52=(($45)|0)==0;
      if ($cmp52) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $46=$ar_addr;
      var $namewhat55=(($46+8)|0);
      HEAP32[(($namewhat55)>>2)]=((5252444)|0);
      var $47=$ar_addr;
      var $name56=(($47+4)|0);
      HEAP32[(($name56)>>2)]=0;
      label = 30; break;
    case 30: 
      label = 33; break;
    case 31: 
      label = 33; break;
    case 32: 
      $status=0;
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $48=$what_addr;
      var $incdec_ptr=(($48+1)|0);
      $what_addr=$incdec_ptr;
      label = 3; break;
    case 35: 
      var $49=$status;

      return $49;
  }

}
_auxgetinfo["X"]=1;

function _collectvalidlines($L, $f) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; _memset(__stackBase__, 0, 12);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $f_addr;
      var $i;
      var $v=__stackBase__;
      var $lineinfo;
      var $t;
      var $io;
      var $io25;
      $L_addr=$L;
      $f_addr=$f;
      var $0=$f_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $1=$f_addr;
      var $c=$1;
      var $tt=(($c+4)|0);
      var $2=HEAP8[($tt)];
      var $conv=(($2)&255);
      var $cmp1=(($conv)|0)==38;
      if ($cmp1) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $3=$L_addr;
      var $top=(($3+8)|0);
      var $4=HEAP32[(($top)>>2)];
      var $tt_=(($4+8)|0);
      HEAP32[(($tt_)>>2)]=0;
      var $5=$L_addr;
      var $top3=(($5+8)|0);
      var $6=HEAP32[(($top3)>>2)];
      var $incdec_ptr=(($6+12)|0);
      HEAP32[(($top3)>>2)]=$incdec_ptr;
      var $7=$L_addr;
      var $stack_last=(($7+24)|0);
      var $8=HEAP32[(($stack_last)>>2)];
      var $9=$L_addr;
      var $top4=(($9+8)|0);
      var $10=HEAP32[(($top4)>>2)];
      var $sub_ptr_lhs_cast=$8;
      var $sub_ptr_rhs_cast=$10;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(12))&-1);
      var $cmp5=(($sub_ptr_div)|0) <= 0;
      if ($cmp5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $11=$L_addr;
      _luaD_growstack($11, 0);
      label = 7; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 16; break;
    case 8: 
      var $12=$f_addr;
      var $l=$12;
      var $p=(($l+12)|0);
      var $13=HEAP32[(($p)>>2)];
      var $lineinfo9=(($13+20)|0);
      var $14=HEAP32[(($lineinfo9)>>2)];
      $lineinfo=$14;
      var $15=$L_addr;
      var $call=_luaH_new($15);
      $t=$call;
      var $16=$L_addr;
      var $top10=(($16+8)|0);
      var $17=HEAP32[(($top10)>>2)];
      $io=$17;
      var $18=$t;
      var $19=$18;
      var $20=$io;
      var $value_=(($20)|0);
      var $gc=$value_;
      HEAP32[(($gc)>>2)]=$19;
      var $21=$io;
      var $tt_11=(($21+8)|0);
      HEAP32[(($tt_11)>>2)]=69;
      var $22=$L_addr;
      var $top12=(($22+8)|0);
      var $23=HEAP32[(($top12)>>2)];
      var $incdec_ptr13=(($23+12)|0);
      HEAP32[(($top12)>>2)]=$incdec_ptr13;
      var $24=$L_addr;
      var $stack_last14=(($24+24)|0);
      var $25=HEAP32[(($stack_last14)>>2)];
      var $26=$L_addr;
      var $top15=(($26+8)|0);
      var $27=HEAP32[(($top15)>>2)];
      var $sub_ptr_lhs_cast16=$25;
      var $sub_ptr_rhs_cast17=$27;
      var $sub_ptr_sub18=((($sub_ptr_lhs_cast16)-($sub_ptr_rhs_cast17))|0);
      var $sub_ptr_div19=((((($sub_ptr_sub18)|0))/(12))&-1);
      var $cmp20=(($sub_ptr_div19)|0) <= 0;
      if ($cmp20) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $28=$L_addr;
      _luaD_growstack($28, 0);
      label = 11; break;
    case 10: 
      label = 11; break;
    case 11: 
      $io25=$v;
      var $29=$io25;
      var $value_26=(($29)|0);
      var $b=$value_26;
      HEAP32[(($b)>>2)]=1;
      var $30=$io25;
      var $tt_27=(($30+8)|0);
      HEAP32[(($tt_27)>>2)]=1;
      $i=0;
      label = 12; break;
    case 12: 
      var $31=$i;
      var $32=$f_addr;
      var $l28=$32;
      var $p29=(($l28+12)|0);
      var $33=HEAP32[(($p29)>>2)];
      var $sizelineinfo=(($33+52)|0);
      var $34=HEAP32[(($sizelineinfo)>>2)];
      var $cmp30=(($31)|0) < (($34)|0);
      if ($cmp30) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $35=$L_addr;
      var $36=$t;
      var $37=$i;
      var $38=$lineinfo;
      var $arrayidx=(($38+($37<<2))|0);
      var $39=HEAP32[(($arrayidx)>>2)];
      _luaH_setint($35, $36, $39, $v);
      label = 14; break;
    case 14: 
      var $40=$i;
      var $inc=((($40)+(1))|0);
      $i=$inc;
      label = 12; break;
    case 15: 
      label = 16; break;
    case 16: 
      STACKTOP = __stackBase__;
      return;
  }

}
_collectvalidlines["X"]=1;

function _isinstack($ci, $o) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $ci_addr;
      var $o_addr;
      var $p;
      $ci_addr=$ci;
      $o_addr=$o;
      var $0=$ci_addr;
      var $u=(($0+24)|0);
      var $l=$u;
      var $base=(($l)|0);
      var $1=HEAP32[(($base)>>2)];
      $p=$1;
      label = 3; break;
    case 3: 
      var $2=$p;
      var $3=$ci_addr;
      var $top=(($3+4)|0);
      var $4=HEAP32[(($top)>>2)];
      var $cmp=(($2)>>>0) < (($4)>>>0);
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $5=$o_addr;
      var $6=$p;
      var $cmp1=(($5)|0)==(($6)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=1;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $7=$p;
      var $incdec_ptr=(($7+12)|0);
      $p=$incdec_ptr;
      label = 3; break;
    case 8: 
      $retval=0;
      label = 9; break;
    case 9: 
      var $8=$retval;

      return $8;
  }

}


function _currentpc($ci) {
  var label = 0;


  var $ci_addr;
  $ci_addr=$ci;
  var $0=$ci_addr;
  var $u=(($0+24)|0);
  var $l=$u;
  var $savedpc=(($l+4)|0);
  var $1=HEAP32[(($savedpc)>>2)];
  var $2=$ci_addr;
  var $func=(($2)|0);
  var $3=HEAP32[(($func)>>2)];
  var $value_=(($3)|0);
  var $gc=$value_;
  var $4=HEAP32[(($gc)>>2)];
  var $cl=$4;
  var $l1=$cl;
  var $p=(($l1+12)|0);
  var $5=HEAP32[(($p)>>2)];
  var $code=(($5+12)|0);
  var $6=HEAP32[(($code)>>2)];
  var $sub_ptr_lhs_cast=$1;
  var $sub_ptr_rhs_cast=$6;
  var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
  var $sub_ptr_div=((((($sub_ptr_sub)|0))/(4))&-1);
  var $sub=((($sub_ptr_div)-(1))|0);

  return $sub;
}


function _getupvalname($ci, $o, $name) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $ci_addr;
      var $o_addr;
      var $name_addr;
      var $c;
      var $i;
      $ci_addr=$ci;
      $o_addr=$o;
      $name_addr=$name;
      var $0=$ci_addr;
      var $func=(($0)|0);
      var $1=HEAP32[(($func)>>2)];
      var $value_=(($1)|0);
      var $gc=$value_;
      var $2=HEAP32[(($gc)>>2)];
      var $cl=$2;
      var $l=$cl;
      $c=$l;
      $i=0;
      label = 3; break;
    case 3: 
      var $3=$i;
      var $4=$c;
      var $nupvalues=(($4+6)|0);
      var $5=HEAP8[($nupvalues)];
      var $conv=(($5)&255);
      var $cmp=(($3)|0) < (($conv)|0);
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $6=$i;
      var $7=$c;
      var $upvals=(($7+16)|0);
      var $arrayidx=(($upvals+($6<<2))|0);
      var $8=HEAP32[(($arrayidx)>>2)];
      var $v=(($8+8)|0);
      var $9=HEAP32[(($v)>>2)];
      var $10=$o_addr;
      var $cmp2=(($9)|0)==(($10)|0);
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $11=$c;
      var $p=(($11+12)|0);
      var $12=HEAP32[(($p)>>2)];
      var $13=$i;
      var $call=_upvalname($12, $13);
      var $14=$name_addr;
      HEAP32[(($14)>>2)]=$call;
      $retval=((5253448)|0);
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $15=$i;
      var $inc=((($15)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 
      $retval=0;
      label = 9; break;
    case 9: 
      var $16=$retval;

      return $16;
  }

}
_getupvalname["X"]=1;

function _getobjname($p, $lastpc, $reg, $name) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p_addr;
      var $lastpc_addr;
      var $reg_addr;
      var $name_addr;
      var $pc;
      var $i;
      var $op;
      var $b;
      var $k;
      var $t;
      var $vn;
      var $b29;
      var $k51;
      $p_addr=$p;
      $lastpc_addr=$lastpc;
      $reg_addr=$reg;
      $name_addr=$name;
      var $0=$p_addr;
      var $1=$reg_addr;
      var $add=((($1)+(1))|0);
      var $2=$lastpc_addr;
      var $call=_luaF_getlocalname($0, $add, $2);
      var $3=$name_addr;
      HEAP32[(($3)>>2)]=$call;
      var $4=$name_addr;
      var $5=HEAP32[(($4)>>2)];
      var $tobool=(($5)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=((5246184)|0);
      label = 26; break;
    case 4: 
      var $6=$p_addr;
      var $7=$lastpc_addr;
      var $8=$reg_addr;
      var $call1=_findsetreg($6, $7, $8);
      $pc=$call1;
      var $9=$pc;
      var $cmp=(($9)|0)!=-1;
      if ($cmp) { label = 5; break; } else { label = 25; break; }
    case 5: 
      var $10=$pc;
      var $11=$p_addr;
      var $code=(($11+12)|0);
      var $12=HEAP32[(($code)>>2)];
      var $arrayidx=(($12+($10<<2))|0);
      var $13=HEAP32[(($arrayidx)>>2)];
      $i=$13;
      var $14=$i;
      var $shr=$14 >>> 0;
      var $and=$shr & 63;
      $op=$and;
      var $15=$op;
      if ((($15)|0)==0) {
        label = 6; break;
      }
      else if ((($15)|0)==6 | (($15)|0)==7) {
        label = 9; break;
      }
      else if ((($15)|0)==5) {
        label = 15; break;
      }
      else if ((($15)|0)==1 | (($15)|0)==2) {
        label = 16; break;
      }
      else if ((($15)|0)==12) {
        label = 22; break;
      }
      else {
      label = 23; break;
      }
      
    case 6: 
      var $16=$i;
      var $shr3=$16 >>> 23;
      var $and4=$shr3 & 511;
      $b=$and4;
      var $17=$b;
      var $18=$i;
      var $shr5=$18 >>> 6;
      var $and6=$shr5 & 255;
      var $cmp7=(($17)|0) < (($and6)|0);
      if ($cmp7) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $19=$p_addr;
      var $20=$pc;
      var $21=$b;
      var $22=$name_addr;
      var $call9=_getobjname($19, $20, $21, $22);
      $retval=$call9;
      label = 26; break;
    case 8: 
      label = 24; break;
    case 9: 
      var $23=$i;
      var $shr12=$23 >>> 14;
      var $and13=$shr12 & 511;
      $k=$and13;
      var $24=$i;
      var $shr14=$24 >>> 23;
      var $and15=$shr14 & 511;
      $t=$and15;
      var $25=$op;
      var $cmp16=(($25)|0)==7;
      if ($cmp16) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $26=$p_addr;
      var $27=$t;
      var $add17=((($27)+(1))|0);
      var $28=$pc;
      var $call18=_luaF_getlocalname($26, $add17, $28);
      var $cond = $call18;label = 12; break;
    case 11: 
      var $29=$p_addr;
      var $30=$t;
      var $call19=_upvalname($29, $30);
      var $cond = $call19;label = 12; break;
    case 12: 
      var $cond;
      $vn=$cond;
      var $31=$p_addr;
      var $32=$pc;
      var $33=$k;
      var $34=$name_addr;
      _kname($31, $32, $33, $34);
      var $35=$vn;
      var $tobool20=(($35)|0)!=0;
      if ($tobool20) { label = 13; break; } else { var $37 = 0;label = 14; break; }
    case 13: 
      var $36=$vn;
      var $call21=_strcmp($36, ((5245848)|0));
      var $cmp22=(($call21)|0)==0;
      var $37 = $cmp22;label = 14; break;
    case 14: 
      var $37;
      var $cond23=$37 ? (((5245552)|0)) : (((5253760)|0));
      $retval=$cond23;
      label = 26; break;
    case 15: 
      var $38=$p_addr;
      var $39=$i;
      var $shr25=$39 >>> 23;
      var $and26=$shr25 & 511;
      var $call27=_upvalname($38, $and26);
      var $40=$name_addr;
      HEAP32[(($40)>>2)]=$call27;
      $retval=((5253448)|0);
      label = 26; break;
    case 16: 
      var $41=$op;
      var $cmp30=(($41)|0)==1;
      if ($cmp30) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $42=$i;
      var $shr32=$42 >>> 14;
      var $and33=$shr32 & 262143;
      var $cond41 = $and33;label = 19; break;
    case 18: 
      var $43=$pc;
      var $add35=((($43)+(1))|0);
      var $44=$p_addr;
      var $code36=(($44+12)|0);
      var $45=HEAP32[(($code36)>>2)];
      var $arrayidx37=(($45+($add35<<2))|0);
      var $46=HEAP32[(($arrayidx37)>>2)];
      var $shr38=$46 >>> 6;
      var $and39=$shr38 & 67108863;
      var $cond41 = $and39;label = 19; break;
    case 19: 
      var $cond41;
      $b29=$cond41;
      var $47=$b29;
      var $48=$p_addr;
      var $k42=(($48+8)|0);
      var $49=HEAP32[(($k42)>>2)];
      var $arrayidx43=(($49+((($47)*(12))&-1))|0);
      var $tt_=(($arrayidx43+8)|0);
      var $50=HEAP32[(($tt_)>>2)];
      var $and44=$50 & 15;
      var $cmp45=(($and44)|0)==4;
      if ($cmp45) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $51=$b29;
      var $52=$p_addr;
      var $k47=(($52+8)|0);
      var $53=HEAP32[(($k47)>>2)];
      var $arrayidx48=(($53+((($51)*(12))&-1))|0);
      var $value_=(($arrayidx48)|0);
      var $gc=$value_;
      var $54=HEAP32[(($gc)>>2)];
      var $ts=$54;
      var $add_ptr=(($ts+16)|0);
      var $55=$add_ptr;
      var $56=$name_addr;
      HEAP32[(($56)>>2)]=$55;
      $retval=((5253068)|0);
      label = 26; break;
    case 21: 
      label = 24; break;
    case 22: 
      var $57=$i;
      var $shr52=$57 >>> 14;
      var $and53=$shr52 & 511;
      $k51=$and53;
      var $58=$p_addr;
      var $59=$pc;
      var $60=$k51;
      var $61=$name_addr;
      _kname($58, $59, $60, $61);
      $retval=((5252832)|0);
      label = 26; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      $retval=0;
      label = 26; break;
    case 26: 
      var $62=$retval;

      return $62;
  }

}
_getobjname["X"]=1;

function _addinfo($L, $msg) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; _memset(__stackBase__, 0, 60);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $msg_addr;
      var $ci;
      var $buff=__stackBase__;
      var $line;
      var $src;
      $L_addr=$L;
      $msg_addr=$msg;
      var $0=$L_addr;
      var $ci1=(($0+16)|0);
      var $1=HEAP32[(($ci1)>>2)];
      $ci=$1;
      var $2=$ci;
      var $callstatus=(($2+18)|0);
      var $3=HEAP8[($callstatus)];
      var $conv=(($3)&255);
      var $and=$conv & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $4=$ci;
      var $call=_currentline($4);
      $line=$call;
      var $5=$ci;
      var $func=(($5)|0);
      var $6=HEAP32[(($func)>>2)];
      var $value_=(($6)|0);
      var $gc=$value_;
      var $7=HEAP32[(($gc)>>2)];
      var $cl=$7;
      var $l=$cl;
      var $p=(($l+12)|0);
      var $8=HEAP32[(($p)>>2)];
      var $source=(($8+36)|0);
      var $9=HEAP32[(($source)>>2)];
      $src=$9;
      var $10=$src;
      var $tobool2=(($10)|0)!=0;
      if ($tobool2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $arraydecay=(($buff)|0);
      var $11=$src;
      var $add_ptr=(($11+16)|0);
      var $12=$add_ptr;
      _luaO_chunkid($arraydecay, $12, 60);
      label = 6; break;
    case 5: 
      var $arrayidx=(($buff)|0);
      HEAP8[($arrayidx)]=63;
      var $arrayidx4=(($buff+1)|0);
      HEAP8[($arrayidx4)]=0;
      label = 6; break;
    case 6: 
      var $13=$L_addr;
      var $arraydecay5=(($buff)|0);
      var $14=$line;
      var $15=$msg_addr;
      var $call6=_luaO_pushfstring($13, ((5246596)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 12),STACKTOP = (STACKTOP + 12)|0,HEAP32[((tempInt)>>2)]=$arraydecay5,HEAP32[(((tempInt)+(4))>>2)]=$14,HEAP32[(((tempInt)+(8))>>2)]=$15,tempInt));
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
  }

}
_addinfo["X"]=1;

function _currentline($ci) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ci_addr;
      $ci_addr=$ci;
      var $0=$ci_addr;
      var $func=(($0)|0);
      var $1=HEAP32[(($func)>>2)];
      var $value_=(($1)|0);
      var $gc=$value_;
      var $2=HEAP32[(($gc)>>2)];
      var $cl=$2;
      var $l=$cl;
      var $p=(($l+12)|0);
      var $3=HEAP32[(($p)>>2)];
      var $lineinfo=(($3+20)|0);
      var $4=HEAP32[(($lineinfo)>>2)];
      var $tobool=(($4)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$ci_addr;
      var $call=_currentpc($5);
      var $6=$ci_addr;
      var $func1=(($6)|0);
      var $7=HEAP32[(($func1)>>2)];
      var $value_2=(($7)|0);
      var $gc3=$value_2;
      var $8=HEAP32[(($gc3)>>2)];
      var $cl4=$8;
      var $l5=$cl4;
      var $p6=(($l5+12)|0);
      var $9=HEAP32[(($p6)>>2)];
      var $lineinfo7=(($9+20)|0);
      var $10=HEAP32[(($lineinfo7)>>2)];
      var $arrayidx=(($10+($call<<2))|0);
      var $11=HEAP32[(($arrayidx)>>2)];
      var $cond = $11;label = 5; break;
    case 4: 
      var $cond = 0;label = 5; break;
    case 5: 
      var $cond;

      return $cond;
  }

}


function _luaG_typeerror($L, $o, $op) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $o_addr;
      var $op_addr;
      var $ci;
      var $name=__stackBase__;
      var $t;
      var $kind;
      $L_addr=$L;
      $o_addr=$o;
      $op_addr=$op;
      var $0=$L_addr;
      var $ci1=(($0+16)|0);
      var $1=HEAP32[(($ci1)>>2)];
      $ci=$1;
      HEAP32[(($name)>>2)]=0;
      var $2=$o_addr;
      var $tt_=(($2+8)|0);
      var $3=HEAP32[(($tt_)>>2)];
      var $and=$3 & 15;
      var $add=((($and)+(1))|0);
      var $arrayidx=((5243936+($add<<2))|0);
      var $4=HEAP32[(($arrayidx)>>2)];
      $t=$4;
      $kind=0;
      var $5=$ci;
      var $callstatus=(($5+18)|0);
      var $6=HEAP8[($callstatus)];
      var $conv=(($6)&255);
      var $and2=$conv & 1;
      var $tobool=(($and2)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $7=$ci;
      var $8=$o_addr;
      var $call=_getupvalname($7, $8, $name);
      $kind=$call;
      var $9=$kind;
      var $tobool3=(($9)|0)!=0;
      if ($tobool3) { label = 6; break; } else { label = 4; break; }
    case 4: 
      var $10=$ci;
      var $11=$o_addr;
      var $call4=_isinstack($10, $11);
      var $tobool5=(($call4)|0)!=0;
      if ($tobool5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $12=$ci;
      var $func=(($12)|0);
      var $13=HEAP32[(($func)>>2)];
      var $value_=(($13)|0);
      var $gc=$value_;
      var $14=HEAP32[(($gc)>>2)];
      var $cl=$14;
      var $l=$cl;
      var $p=(($l+12)|0);
      var $15=HEAP32[(($p)>>2)];
      var $16=$ci;
      var $call7=_currentpc($16);
      var $17=$o_addr;
      var $18=$ci;
      var $u=(($18+24)|0);
      var $l8=$u;
      var $base=(($l8)|0);
      var $19=HEAP32[(($base)>>2)];
      var $sub_ptr_lhs_cast=$17;
      var $sub_ptr_rhs_cast=$19;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(12))&-1);
      var $call9=_getobjname($15, $call7, $sub_ptr_div, $name);
      $kind=$call9;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $20=$kind;
      var $tobool11=(($20)|0)!=0;
      if ($tobool11) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $21=$L_addr;
      var $22=$op_addr;
      var $23=$kind;
      var $24=HEAP32[(($name)>>2)];
      var $25=$t;
      _luaG_runerror($21, ((5247076)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 16),STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempInt)>>2)]=$22,HEAP32[(((tempInt)+(4))>>2)]=$23,HEAP32[(((tempInt)+(8))>>2)]=$24,HEAP32[(((tempInt)+(12))>>2)]=$25,tempInt));

    case 9: 
      var $26=$L_addr;
      var $27=$op_addr;
      var $28=$t;
      _luaG_runerror($26, ((5252272)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempInt)>>2)]=$27,HEAP32[(((tempInt)+(4))>>2)]=$28,tempInt));

    case 10: 
      STACKTOP = __stackBase__;
      return;
  }

}
_luaG_typeerror["X"]=1;

function _luaG_runerror($L, $fmt, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $fmt_addr;
      var $argp=__stackBase__;
      $L_addr=$L;
      $fmt_addr=$fmt;
      var $argp1=$argp;
      HEAP32[(($argp1)>>2)]=varrp;
      var $0=$L_addr;
      var $1=$L_addr;
      var $2=$fmt_addr;
      var $3=HEAP32[(($argp)>>2)];
      var $call=_luaO_pushvfstring($1, $2, $3);
      _addinfo($0, $call);
      var $argp2=$argp;

      var $4=$L_addr;
      _luaG_errormsg($4);

    case 3: 
      STACKTOP = __stackBase__;
      return;
  }

}


function _luaG_concaterror($L, $p1, $p2) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $p1_addr;
      var $p2_addr;
      $L_addr=$L;
      $p1_addr=$p1;
      $p2_addr=$p2;
      var $0=$p1_addr;
      var $tt_=(($0+8)|0);
      var $1=HEAP32[(($tt_)>>2)];
      var $and=$1 & 15;
      var $cmp=(($and)|0)==4;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$p1_addr;
      var $tt_1=(($2+8)|0);
      var $3=HEAP32[(($tt_1)>>2)];
      var $cmp2=(($3)|0)==3;
      if ($cmp2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$p2_addr;
      $p1_addr=$4;
      label = 5; break;
    case 5: 
      var $5=$L_addr;
      var $6=$p1_addr;
      _luaG_typeerror($5, $6, ((5250056)|0));

    case 6: 

      return;
  }

}


function _luaG_aritherror($L, $p1, $p2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; _memset(__stackBase__, 0, 12);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $p1_addr;
      var $p2_addr;
      var $temp=__stackBase__;
      $L_addr=$L;
      $p1_addr=$p1;
      $p2_addr=$p2;
      var $0=$p1_addr;
      var $call=_luaV_tonumber($0, $temp);
      var $cmp=(($call)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$p1_addr;
      $p2_addr=$1;
      label = 4; break;
    case 4: 
      var $2=$L_addr;
      var $3=$p2_addr;
      _luaG_typeerror($2, $3, ((5248440)|0));

    case 5: 
      STACKTOP = __stackBase__;
      return;
  }

}


function _luaG_ordererror($L, $p1, $p2) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $p1_addr;
      var $p2_addr;
      var $t1;
      var $t2;
      $L_addr=$L;
      $p1_addr=$p1;
      $p2_addr=$p2;
      var $0=$p1_addr;
      var $tt_=(($0+8)|0);
      var $1=HEAP32[(($tt_)>>2)];
      var $and=$1 & 15;
      var $add=((($and)+(1))|0);
      var $arrayidx=((5243936+($add<<2))|0);
      var $2=HEAP32[(($arrayidx)>>2)];
      $t1=$2;
      var $3=$p2_addr;
      var $tt_1=(($3+8)|0);
      var $4=HEAP32[(($tt_1)>>2)];
      var $and2=$4 & 15;
      var $add3=((($and2)+(1))|0);
      var $arrayidx4=((5243936+($add3<<2))|0);
      var $5=HEAP32[(($arrayidx4)>>2)];
      $t2=$5;
      var $6=$t1;
      var $7=$t2;
      var $cmp=(($6)|0)==(($7)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $8=$L_addr;
      var $9=$t1;
      _luaG_runerror($8, ((5247184)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$9,tempInt));

    case 4: 
      var $10=$L_addr;
      var $11=$t1;
      var $12=$t2;
      _luaG_runerror($10, ((5246984)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempInt)>>2)]=$11,HEAP32[(((tempInt)+(4))>>2)]=$12,tempInt));

    case 5: 
      STACKTOP = __stackBase__;
      return;
  }

}


function _luaG_errormsg($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $errfunc1;
      var $io2;
      var $io1;
      var $io210;
      var $io111;
      $L_addr=$L;
      var $0=$L_addr;
      var $errfunc=(($0+68)|0);
      var $1=HEAP32[(($errfunc)>>2)];
      var $cmp=(($1)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $2=$L_addr;
      var $stack=(($2+28)|0);
      var $3=HEAP32[(($stack)>>2)];
      var $4=$3;
      var $5=$L_addr;
      var $errfunc2=(($5+68)|0);
      var $6=HEAP32[(($errfunc2)>>2)];
      var $add_ptr=(($4+$6)|0);
      var $7=$add_ptr;
      $errfunc1=$7;
      var $8=$errfunc1;
      var $tt_=(($8+8)|0);
      var $9=HEAP32[(($tt_)>>2)];
      var $and=$9 & 15;
      var $cmp3=(($and)|0)==6;
      if ($cmp3) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $10=$L_addr;
      _luaD_throw($10, 6);

    case 5: 
      var $11=$L_addr;
      var $top=(($11+8)|0);
      var $12=HEAP32[(($top)>>2)];
      var $add_ptr5=((($12)-(12))|0);
      $io2=$add_ptr5;
      var $13=$L_addr;
      var $top6=(($13+8)|0);
      var $14=HEAP32[(($top6)>>2)];
      $io1=$14;
      var $15=$io1;
      var $value_=(($15)|0);
      var $16=$io2;
      var $value_7=(($16)|0);
      var $17=$value_;
      var $18=$value_7;
      HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];
      var $19=$io2;
      var $tt_8=(($19+8)|0);
      var $20=HEAP32[(($tt_8)>>2)];
      var $21=$io1;
      var $tt_9=(($21+8)|0);
      HEAP32[(($tt_9)>>2)]=$20;
      var $22=$errfunc1;
      $io210=$22;
      var $23=$L_addr;
      var $top12=(($23+8)|0);
      var $24=HEAP32[(($top12)>>2)];
      var $add_ptr13=((($24)-(12))|0);
      $io111=$add_ptr13;
      var $25=$io111;
      var $value_14=(($25)|0);
      var $26=$io210;
      var $value_15=(($26)|0);
      var $27=$value_14;
      var $28=$value_15;
      HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];
      var $29=$io210;
      var $tt_16=(($29+8)|0);
      var $30=HEAP32[(($tt_16)>>2)];
      var $31=$io111;
      var $tt_17=(($31+8)|0);
      HEAP32[(($tt_17)>>2)]=$30;
      var $32=$L_addr;
      var $top18=(($32+8)|0);
      var $33=HEAP32[(($top18)>>2)];
      var $incdec_ptr=(($33+12)|0);
      HEAP32[(($top18)>>2)]=$incdec_ptr;
      var $34=$L_addr;
      var $stack_last=(($34+24)|0);
      var $35=HEAP32[(($stack_last)>>2)];
      var $36=$L_addr;
      var $top19=(($36+8)|0);
      var $37=HEAP32[(($top19)>>2)];
      var $sub_ptr_lhs_cast=$35;
      var $sub_ptr_rhs_cast=$37;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(12))&-1);
      var $cmp20=(($sub_ptr_div)|0) <= 0;
      if ($cmp20) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $38=$L_addr;
      _luaD_growstack($38, 0);
      label = 8; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $39=$L_addr;
      var $40=$L_addr;
      var $top23=(($40+8)|0);
      var $41=HEAP32[(($top23)>>2)];
      var $add_ptr24=((($41)-(24))|0);
      _luaD_call($39, $add_ptr24, 1, 0);
      label = 9; break;
    case 9: 
      var $42=$L_addr;
      _luaD_throw($42, 2);

    case 10: 

      return;
  }

}
_luaG_errormsg["X"]=1;

function _findsetreg($p, $lastpc, $reg) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $lastpc_addr;
      var $reg_addr;
      var $pc;
      var $setreg;
      var $i;
      var $op;
      var $a;
      var $b;
      var $b17;
      var $dest;
      $p_addr=$p;
      $lastpc_addr=$lastpc;
      $reg_addr=$reg;
      $setreg=-1;
      $pc=0;
      label = 3; break;
    case 3: 
      var $0=$pc;
      var $1=$lastpc_addr;
      var $cmp=(($0)|0) < (($1)|0);
      if ($cmp) { label = 4; break; } else { label = 28; break; }
    case 4: 
      var $2=$pc;
      var $3=$p_addr;
      var $code=(($3+12)|0);
      var $4=HEAP32[(($code)>>2)];
      var $arrayidx=(($4+($2<<2))|0);
      var $5=HEAP32[(($arrayidx)>>2)];
      $i=$5;
      var $6=$i;
      var $shr=$6 >>> 0;
      var $and=$shr & 63;
      $op=$and;
      var $7=$i;
      var $shr1=$7 >>> 6;
      var $and2=$shr1 & 255;
      $a=$and2;
      var $8=$op;
      if ((($8)|0)==4) {
        label = 5; break;
      }
      else if ((($8)|0)==34) {
        label = 9; break;
      }
      else if ((($8)|0)==29 | (($8)|0)==30) {
        label = 12; break;
      }
      else if ((($8)|0)==23) {
        label = 15; break;
      }
      else if ((($8)|0)==27) {
        label = 19; break;
      }
      else {
      label = 22; break;
      }
      
    case 5: 
      var $9=$i;
      var $shr3=$9 >>> 23;
      var $and4=$shr3 & 511;
      $b=$and4;
      var $10=$a;
      var $11=$reg_addr;
      var $cmp5=(($10)|0) <= (($11)|0);
      if ($cmp5) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $12=$reg_addr;
      var $13=$a;
      var $14=$b;
      var $add=((($13)+($14))|0);
      var $cmp6=(($12)|0) <= (($add)|0);
      if ($cmp6) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $15=$pc;
      $setreg=$15;
      label = 8; break;
    case 8: 
      label = 26; break;
    case 9: 
      var $16=$reg_addr;
      var $17=$a;
      var $add8=((($17)+(2))|0);
      var $cmp9=(($16)|0) >= (($add8)|0);
      if ($cmp9) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $18=$pc;
      $setreg=$18;
      label = 11; break;
    case 11: 
      label = 26; break;
    case 12: 
      var $19=$reg_addr;
      var $20=$a;
      var $cmp13=(($19)|0) >= (($20)|0);
      if ($cmp13) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $21=$pc;
      $setreg=$21;
      label = 14; break;
    case 14: 
      label = 26; break;
    case 15: 
      var $22=$i;
      var $shr18=$22 >>> 14;
      var $and19=$shr18 & 262143;
      var $sub=((($and19)-(131071))|0);
      $b17=$sub;
      var $23=$pc;
      var $add20=((($23)+(1))|0);
      var $24=$b17;
      var $add21=((($add20)+($24))|0);
      $dest=$add21;
      var $25=$pc;
      var $26=$dest;
      var $cmp22=(($25)|0) < (($26)|0);
      if ($cmp22) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $27=$dest;
      var $28=$lastpc_addr;
      var $cmp24=(($27)|0) <= (($28)|0);
      if ($cmp24) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $29=$b17;
      var $30=$pc;
      var $add26=((($30)+($29))|0);
      $pc=$add26;
      label = 18; break;
    case 18: 
      label = 26; break;
    case 19: 
      var $31=$reg_addr;
      var $32=$a;
      var $cmp29=(($31)|0)==(($32)|0);
      if ($cmp29) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $33=$pc;
      $setreg=$33;
      label = 21; break;
    case 21: 
      label = 26; break;
    case 22: 
      var $34=$op;
      var $arrayidx32=((5244052+$34)|0);
      var $35=HEAP8[($arrayidx32)];
      var $conv=(($35)&255);
      var $and33=$conv & 64;
      var $tobool=(($and33)|0)!=0;
      if ($tobool) { label = 23; break; } else { label = 25; break; }
    case 23: 
      var $36=$reg_addr;
      var $37=$a;
      var $cmp35=(($36)|0)==(($37)|0);
      if ($cmp35) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $38=$pc;
      $setreg=$38;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $39=$pc;
      var $inc=((($39)+(1))|0);
      $pc=$inc;
      label = 3; break;
    case 28: 
      var $40=$setreg;

      return $40;
  }

}
_findsetreg["X"]=1;

function _upvalname($p, $uv) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p_addr;
      var $uv_addr;
      var $s;
      $p_addr=$p;
      $uv_addr=$uv;
      var $0=$uv_addr;
      var $1=$p_addr;
      var $upvalues=(($1+28)|0);
      var $2=HEAP32[(($upvalues)>>2)];
      var $arrayidx=(($2+($0<<3))|0);
      var $name=(($arrayidx)|0);
      var $3=HEAP32[(($name)>>2)];
      $s=$3;
      var $4=$s;
      var $cmp=(($4)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=((5252636)|0);
      label = 5; break;
    case 4: 
      var $5=$s;
      var $add_ptr=(($5+16)|0);
      var $6=$add_ptr;
      $retval=$6;
      label = 5; break;
    case 5: 
      var $7=$retval;

      return $7;
  }

}


function _findvararg($ci, $n, $pos) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $ci_addr;
      var $n_addr;
      var $pos_addr;
      var $nparams;
      $ci_addr=$ci;
      $n_addr=$n;
      $pos_addr=$pos;
      var $0=$ci_addr;
      var $func=(($0)|0);
      var $1=HEAP32[(($func)>>2)];
      var $value_=(($1)|0);
      var $gc=$value_;
      var $2=HEAP32[(($gc)>>2)];
      var $cl=$2;
      var $l=$cl;
      var $p=(($l+12)|0);
      var $3=HEAP32[(($p)>>2)];
      var $numparams=(($3+76)|0);
      var $4=HEAP8[($numparams)];
      var $conv=(($4)&255);
      $nparams=$conv;
      var $5=$n_addr;
      var $6=$ci_addr;
      var $u=(($6+24)|0);
      var $l1=$u;
      var $base=(($l1)|0);
      var $7=HEAP32[(($base)>>2)];
      var $8=$ci_addr;
      var $func2=(($8)|0);
      var $9=HEAP32[(($func2)>>2)];
      var $sub_ptr_lhs_cast=$7;
      var $sub_ptr_rhs_cast=$9;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(12))&-1);
      var $10=$nparams;
      var $sub=((($sub_ptr_div)-($10))|0);
      var $cmp=(($5)|0) >= (($sub)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 5; break;
    case 4: 
      var $11=$ci_addr;
      var $func4=(($11)|0);
      var $12=HEAP32[(($func4)>>2)];
      var $13=$nparams;
      var $add_ptr=(($12+((($13)*(12))&-1))|0);
      var $14=$n_addr;
      var $add_ptr5=(($add_ptr+((($14)*(12))&-1))|0);
      var $15=$pos_addr;
      HEAP32[(($15)>>2)]=$add_ptr5;
      $retval=((5250592)|0);
      label = 5; break;
    case 5: 
      var $16=$retval;

      return $16;
  }

}
_findvararg["X"]=1;

function _kname($p, $pc, $c, $name) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $pc_addr;
      var $c_addr;
      var $name_addr;
      var $kvalue;
      var $what;
      $p_addr=$p;
      $pc_addr=$pc;
      $c_addr=$c;
      $name_addr=$name;
      var $0=$c_addr;
      var $and=$0 & 256;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $1=$c_addr;
      var $and1=$1 & -257;
      var $2=$p_addr;
      var $k=(($2+8)|0);
      var $3=HEAP32[(($k)>>2)];
      var $arrayidx=(($3+((($and1)*(12))&-1))|0);
      $kvalue=$arrayidx;
      var $4=$kvalue;
      var $tt_=(($4+8)|0);
      var $5=HEAP32[(($tt_)>>2)];
      var $and2=$5 & 15;
      var $cmp=(($and2)|0)==4;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $6=$kvalue;
      var $value_=(($6)|0);
      var $gc=$value_;
      var $7=HEAP32[(($gc)>>2)];
      var $ts=$7;
      var $add_ptr=(($ts+16)|0);
      var $8=$add_ptr;
      var $9=$name_addr;
      HEAP32[(($9)>>2)]=$8;
      label = 11; break;
    case 5: 
      label = 10; break;
    case 6: 
      var $10=$p_addr;
      var $11=$pc_addr;
      var $12=$c_addr;
      var $13=$name_addr;
      var $call=_getobjname($10, $11, $12, $13);
      $what=$call;
      var $14=$what;
      var $tobool4=(($14)|0)!=0;
      if ($tobool4) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $15=$what;
      var $16=HEAP8[($15)];
      var $conv=(($16 << 24) >> 24);
      var $cmp5=(($conv)|0)==99;
      if ($cmp5) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 11; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $17=$name_addr;
      HEAP32[(($17)>>2)]=((5252636)|0);
      label = 11; break;
    case 11: 

      return;
  }

}
_kname["X"]=1;

function _funcinfo($ar, $cl) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ar_addr;
      var $cl_addr;
      var $p;
      $ar_addr=$ar;
      $cl_addr=$cl;
      var $0=$cl_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $1=$cl_addr;
      var $c=$1;
      var $tt=(($c+4)|0);
      var $2=HEAP8[($tt)];
      var $conv=(($2)&255);
      var $cmp1=(($conv)|0)==38;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$ar_addr;
      var $source=(($3+16)|0);
      HEAP32[(($source)>>2)]=((5251856)|0);
      var $4=$ar_addr;
      var $linedefined=(($4+24)|0);
      HEAP32[(($linedefined)>>2)]=-1;
      var $5=$ar_addr;
      var $lastlinedefined=(($5+28)|0);
      HEAP32[(($lastlinedefined)>>2)]=-1;
      var $6=$ar_addr;
      var $what=(($6+12)|0);
      HEAP32[(($what)>>2)]=((5251644)|0);
      label = 9; break;
    case 5: 
      var $7=$cl_addr;
      var $l=$7;
      var $p3=(($l+12)|0);
      var $8=HEAP32[(($p3)>>2)];
      $p=$8;
      var $9=$p;
      var $source4=(($9+36)|0);
      var $10=HEAP32[(($source4)>>2)];
      var $tobool=(($10)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $11=$p;
      var $source5=(($11+36)|0);
      var $12=HEAP32[(($source5)>>2)];
      var $add_ptr=(($12+16)|0);
      var $13=$add_ptr;
      var $cond = $13;label = 8; break;
    case 7: 
      var $cond = ((5251424)|0);label = 8; break;
    case 8: 
      var $cond;
      var $14=$ar_addr;
      var $source6=(($14+16)|0);
      HEAP32[(($source6)>>2)]=$cond;
      var $15=$p;
      var $linedefined7=(($15+64)|0);
      var $16=HEAP32[(($linedefined7)>>2)];
      var $17=$ar_addr;
      var $linedefined8=(($17+24)|0);
      HEAP32[(($linedefined8)>>2)]=$16;
      var $18=$p;
      var $lastlinedefined9=(($18+68)|0);
      var $19=HEAP32[(($lastlinedefined9)>>2)];
      var $20=$ar_addr;
      var $lastlinedefined10=(($20+28)|0);
      HEAP32[(($lastlinedefined10)>>2)]=$19;
      var $21=$ar_addr;
      var $linedefined11=(($21+24)|0);
      var $22=HEAP32[(($linedefined11)>>2)];
      var $cmp12=(($22)|0)==0;
      var $cond14=$cmp12 ? (((5251248)|0)) : (((5251044)|0));
      var $23=$ar_addr;
      var $what15=(($23+12)|0);
      HEAP32[(($what15)>>2)]=$cond14;
      label = 9; break;
    case 9: 
      var $24=$ar_addr;
      var $short_src=(($24+36)|0);
      var $arraydecay=(($short_src)|0);
      var $25=$ar_addr;
      var $source16=(($25+16)|0);
      var $26=HEAP32[(($source16)>>2)];
      _luaO_chunkid($arraydecay, $26, 60);

      return;
  }

}
_funcinfo["X"]=1;

function _getfuncname($L, $ci, $name) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $ci_addr;
      var $name_addr;
      var $tm;
      var $p;
      var $pc;
      var $i;
      $L_addr=$L;
      $ci_addr=$ci;
      $name_addr=$name;
      var $0=$ci_addr;
      var $func=(($0)|0);
      var $1=HEAP32[(($func)>>2)];
      var $value_=(($1)|0);
      var $gc=$value_;
      var $2=HEAP32[(($gc)>>2)];
      var $cl=$2;
      var $l=$cl;
      var $p1=(($l+12)|0);
      var $3=HEAP32[(($p1)>>2)];
      $p=$3;
      var $4=$ci_addr;
      var $call=_currentpc($4);
      $pc=$call;
      var $5=$pc;
      var $6=$p;
      var $code=(($6+12)|0);
      var $7=HEAP32[(($code)>>2)];
      var $arrayidx=(($7+($5<<2))|0);
      var $8=HEAP32[(($arrayidx)>>2)];
      $i=$8;
      var $9=$i;
      var $shr=$9 >>> 0;
      var $and=$shr & 63;
      if ((($and)|0)==29 | (($and)|0)==30) {
        label = 3; break;
      }
      else if ((($and)|0)==34) {
        label = 4; break;
      }
      else if ((($and)|0)==12 | (($and)|0)==6 | (($and)|0)==7) {
        label = 5; break;
      }
      else if ((($and)|0)==8 | (($and)|0)==10) {
        label = 6; break;
      }
      else if ((($and)|0)==24) {
        label = 7; break;
      }
      else if ((($and)|0)==13) {
        label = 8; break;
      }
      else if ((($and)|0)==14) {
        label = 9; break;
      }
      else if ((($and)|0)==15) {
        label = 10; break;
      }
      else if ((($and)|0)==16) {
        label = 11; break;
      }
      else if ((($and)|0)==17) {
        label = 12; break;
      }
      else if ((($and)|0)==18) {
        label = 13; break;
      }
      else if ((($and)|0)==19) {
        label = 14; break;
      }
      else if ((($and)|0)==21) {
        label = 15; break;
      }
      else if ((($and)|0)==25) {
        label = 16; break;
      }
      else if ((($and)|0)==26) {
        label = 17; break;
      }
      else if ((($and)|0)==22) {
        label = 18; break;
      }
      else {
      label = 19; break;
      }
      
    case 3: 
      var $10=$p;
      var $11=$pc;
      var $12=$i;
      var $shr2=$12 >>> 6;
      var $and3=$shr2 & 255;
      var $13=$name_addr;
      var $call4=_getobjname($10, $11, $and3, $13);
      $retval=$call4;
      label = 21; break;
    case 4: 
      var $14=$name_addr;
      HEAP32[(($14)>>2)]=((5252224)|0);
      $retval=((5252224)|0);
      label = 21; break;
    case 5: 
      $tm=0;
      label = 20; break;
    case 6: 
      $tm=1;
      label = 20; break;
    case 7: 
      $tm=5;
      label = 20; break;
    case 8: 
      $tm=6;
      label = 20; break;
    case 9: 
      $tm=7;
      label = 20; break;
    case 10: 
      $tm=8;
      label = 20; break;
    case 11: 
      $tm=9;
      label = 20; break;
    case 12: 
      $tm=10;
      label = 20; break;
    case 13: 
      $tm=11;
      label = 20; break;
    case 14: 
      $tm=12;
      label = 20; break;
    case 15: 
      $tm=4;
      label = 20; break;
    case 16: 
      $tm=13;
      label = 20; break;
    case 17: 
      $tm=14;
      label = 20; break;
    case 18: 
      $tm=15;
      label = 20; break;
    case 19: 
      $retval=0;
      label = 21; break;
    case 20: 
      var $15=$tm;
      var $16=$L_addr;
      var $l_G=(($16+12)|0);
      var $17=HEAP32[(($l_G)>>2)];
      var $tmname=(($17+164)|0);
      var $arrayidx20=(($tmname+($15<<2))|0);
      var $18=HEAP32[(($arrayidx20)>>2)];
      var $add_ptr=(($18+16)|0);
      var $19=$add_ptr;
      var $20=$name_addr;
      HEAP32[(($20)>>2)]=$19;
      $retval=((5252028)|0);
      label = 21; break;
    case 21: 
      var $21=$retval;

      return $21;
  }

}
_getfuncname["X"]=1;

function _luaD_rawrunprotected($L, $f, $ud) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; _memset(__stackBase__, 0, 48);
  label = 2; 
  var mySetjmpIds = {};
  var setjmpTable = {"2": function(value) { label = 5; $call = value },dummy: 0};
  while(1) try { switch(label) {
    case 2: 
      var $L_addr;
      var $f_addr;
      var $ud_addr;
      var $oldnCcalls;
      var $lj=__stackBase__;
      $L_addr=$L;
      $f_addr=$f;
      $ud_addr=$ud;
      var $0=$L_addr;
      var $nCcalls=(($0+38)|0);
      var $1=HEAP16[(($nCcalls)>>1)];
      $oldnCcalls=$1;
      var $status=(($lj+44)|0);
      HEAP32[(($status)>>2)]=0;
      var $2=$L_addr;
      var $errorJmp=(($2+64)|0);
      var $3=HEAP32[(($errorJmp)>>2)];
      var $previous=(($lj)|0);
      HEAP32[(($previous)>>2)]=$3;
      var $4=$L_addr;
      var $errorJmp1=(($4+64)|0);
      HEAP32[(($errorJmp1)>>2)]=$lj;
      var $b=(($lj+4)|0);
      var $arraydecay=(($b)|0);
      var $call=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[(($arraydecay)>>2)]=tempInt, 0);
      label = 5; break;
    case 5: 
      var $cmp=(($call)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$f_addr;
      var $6=$L_addr;
      var $7=$ud_addr;
      FUNCTION_TABLE[$5]($6, $7);
      label = 4; break;
    case 4: 
      var $previous2=(($lj)|0);
      var $8=HEAP32[(($previous2)>>2)];
      var $9=$L_addr;
      var $errorJmp3=(($9+64)|0);
      HEAP32[(($errorJmp3)>>2)]=$8;
      var $10=$oldnCcalls;
      var $11=$L_addr;
      var $nCcalls4=(($11+38)|0);
      HEAP16[(($nCcalls4)>>1)]=$10;
      var $status5=(($lj+44)|0);
      var $12=HEAP32[(($status5)>>2)];
      STACKTOP = __stackBase__;
      return $12;
  }
 } catch(e) { if (!e.longjmp || !(e.id in mySetjmpIds)) throw(e); setjmpTable[setjmpLabels[e.id]](e.value) }
}


function _luaD_throw($L, $errcode) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $errcode_addr;
      var $io2;
      var $io1;
      $L_addr=$L;
      $errcode_addr=$errcode;
      var $0=$L_addr;
      var $errorJmp=(($0+64)|0);
      var $1=HEAP32[(($errorJmp)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$errcode_addr;
      var $3=$L_addr;
      var $errorJmp1=(($3+64)|0);
      var $4=HEAP32[(($errorJmp1)>>2)];
      var $status=(($4+44)|0);
      HEAP32[(($status)>>2)]=$2;
      var $5=$L_addr;
      var $errorJmp2=(($5+64)|0);
      var $6=HEAP32[(($errorJmp2)>>2)];
      var $b=(($6+4)|0);
      var $arraydecay=(($b)|0);
      _longjmp($arraydecay, 1);

    case 4: 
      var $7=$errcode_addr;
      var $conv=(($7) & 255);
      var $8=$L_addr;
      var $status3=(($8+6)|0);
      HEAP8[($status3)]=$conv;
      var $9=$L_addr;
      var $l_G=(($9+12)|0);
      var $10=HEAP32[(($l_G)>>2)];
      var $mainthread=(($10+152)|0);
      var $11=HEAP32[(($mainthread)>>2)];
      var $errorJmp4=(($11+64)|0);
      var $12=HEAP32[(($errorJmp4)>>2)];
      var $tobool5=(($12)|0)!=0;
      if ($tobool5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $13=$L_addr;
      var $top=(($13+8)|0);
      var $14=HEAP32[(($top)>>2)];
      var $add_ptr=((($14)-(12))|0);
      $io2=$add_ptr;
      var $15=$L_addr;
      var $l_G7=(($15+12)|0);
      var $16=HEAP32[(($l_G7)>>2)];
      var $mainthread8=(($16+152)|0);
      var $17=HEAP32[(($mainthread8)>>2)];
      var $top9=(($17+8)|0);
      var $18=HEAP32[(($top9)>>2)];
      var $incdec_ptr=(($18+12)|0);
      HEAP32[(($top9)>>2)]=$incdec_ptr;
      $io1=$18;
      var $19=$io1;
      var $value_=(($19)|0);
      var $20=$io2;
      var $value_10=(($20)|0);
      var $21=$value_;
      var $22=$value_10;
      HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];
      var $23=$io2;
      var $tt_=(($23+8)|0);
      var $24=HEAP32[(($tt_)>>2)];
      var $25=$io1;
      var $tt_11=(($25+8)|0);
      HEAP32[(($tt_11)>>2)]=$24;
      var $26=$L_addr;
      var $l_G12=(($26+12)|0);
      var $27=HEAP32[(($l_G12)>>2)];
      var $mainthread13=(($27+152)|0);
      var $28=HEAP32[(($mainthread13)>>2)];
      var $29=$errcode_addr;
      _luaD_throw($28, $29);

    case 6: 
      var $30=$L_addr;
      var $l_G15=(($30+12)|0);
      var $31=HEAP32[(($l_G15)>>2)];
      var $panic=(($31+148)|0);
      var $32=HEAP32[(($panic)>>2)];
      var $tobool16=(($32)|0)!=0;
      if ($tobool16) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $33=$L_addr;
      var $l_G18=(($33+12)|0);
      var $34=HEAP32[(($l_G18)>>2)];
      var $panic19=(($34+148)|0);
      var $35=HEAP32[(($panic19)>>2)];
      var $36=$L_addr;
      var $call=FUNCTION_TABLE[$35]($36);
      label = 8; break;
    case 8: 
      _abort();

    case 9: 

      return;
  }

}
_luaD_throw["X"]=1;

function _luaD_reallocstack($L, $newsize) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $newsize_addr;
      var $oldstack;
      var $lim;
      $L_addr=$L;
      $newsize_addr=$newsize;
      var $0=$L_addr;
      var $stack=(($0+28)|0);
      var $1=HEAP32[(($stack)>>2)];
      $oldstack=$1;
      var $2=$L_addr;
      var $stacksize=(($2+32)|0);
      var $3=HEAP32[(($stacksize)>>2)];
      $lim=$3;
      var $4=$newsize_addr;
      var $add=((($4)+(1))|0);
      var $cmp=(($add)>>>0) > 357913941;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$L_addr;
      _luaM_toobig($5);

      label = 5; break;
    case 4: 
      var $7=$L_addr;
      var $8=$L_addr;
      var $stack1=(($8+28)|0);
      var $9=HEAP32[(($stack1)>>2)];
      var $10=$9;
      var $11=$L_addr;
      var $stacksize2=(($11+32)|0);
      var $12=HEAP32[(($stacksize2)>>2)];
      var $mul=((($12)*(12))&-1);
      var $13=$newsize_addr;
      var $mul3=((($13)*(12))&-1);
      var $call=_luaM_realloc_($7, $10, $mul, $mul3);
      var $cond = $call;label = 5; break;
    case 5: 
      var $cond;
      var $14=$cond;
      var $15=$L_addr;
      var $stack4=(($15+28)|0);
      HEAP32[(($stack4)>>2)]=$14;
      label = 6; break;
    case 6: 
      var $16=$lim;
      var $17=$newsize_addr;
      var $cmp5=(($16)|0) < (($17)|0);
      if ($cmp5) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $18=$L_addr;
      var $stack6=(($18+28)|0);
      var $19=HEAP32[(($stack6)>>2)];
      var $20=$lim;
      var $add_ptr=(($19+((($20)*(12))&-1))|0);
      var $tt_=(($add_ptr+8)|0);
      HEAP32[(($tt_)>>2)]=0;
      label = 8; break;
    case 8: 
      var $21=$lim;
      var $inc=((($21)+(1))|0);
      $lim=$inc;
      label = 6; break;
    case 9: 
      var $22=$newsize_addr;
      var $23=$L_addr;
      var $stacksize7=(($23+32)|0);
      HEAP32[(($stacksize7)>>2)]=$22;
      var $24=$L_addr;
      var $stack8=(($24+28)|0);
      var $25=HEAP32[(($stack8)>>2)];
      var $26=$newsize_addr;
      var $add_ptr9=(($25+((($26)*(12))&-1))|0);
      var $add_ptr10=((($add_ptr9)-(60))|0);
      var $27=$L_addr;
      var $stack_last=(($27+24)|0);
      HEAP32[(($stack_last)>>2)]=$add_ptr10;
      var $28=$L_addr;
      var $29=$oldstack;
      _correctstack($28, $29);

      return;
  }

}
_luaD_reallocstack["X"]=1;

function _correctstack($L, $oldstack) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $oldstack_addr;
      var $ci;
      var $up;
      $L_addr=$L;
      $oldstack_addr=$oldstack;
      var $0=$L_addr;
      var $top=(($0+8)|0);
      var $1=HEAP32[(($top)>>2)];
      var $2=$oldstack_addr;
      var $sub_ptr_lhs_cast=$1;
      var $sub_ptr_rhs_cast=$2;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(12))&-1);
      var $3=$L_addr;
      var $stack=(($3+28)|0);
      var $4=HEAP32[(($stack)>>2)];
      var $add_ptr=(($4+((($sub_ptr_div)*(12))&-1))|0);
      var $5=$L_addr;
      var $top1=(($5+8)|0);
      HEAP32[(($top1)>>2)]=$add_ptr;
      var $6=$L_addr;
      var $openupval=(($6+56)|0);
      var $7=HEAP32[(($openupval)>>2)];
      $up=$7;
      label = 3; break;
    case 3: 
      var $8=$up;
      var $cmp=(($8)|0)!=0;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $9=$up;
      var $uv=$9;
      var $v=(($uv+8)|0);
      var $10=HEAP32[(($v)>>2)];
      var $11=$oldstack_addr;
      var $sub_ptr_lhs_cast2=$10;
      var $sub_ptr_rhs_cast3=$11;
      var $sub_ptr_sub4=((($sub_ptr_lhs_cast2)-($sub_ptr_rhs_cast3))|0);
      var $sub_ptr_div5=((((($sub_ptr_sub4)|0))/(12))&-1);
      var $12=$L_addr;
      var $stack6=(($12+28)|0);
      var $13=HEAP32[(($stack6)>>2)];
      var $add_ptr7=(($13+((($sub_ptr_div5)*(12))&-1))|0);
      var $14=$up;
      var $uv8=$14;
      var $v9=(($uv8+8)|0);
      HEAP32[(($v9)>>2)]=$add_ptr7;
      label = 5; break;
    case 5: 
      var $15=$up;
      var $gch=$15;
      var $next=(($gch)|0);
      var $16=HEAP32[(($next)>>2)];
      $up=$16;
      label = 3; break;
    case 6: 
      var $17=$L_addr;
      var $ci10=(($17+16)|0);
      var $18=HEAP32[(($ci10)>>2)];
      $ci=$18;
      label = 7; break;
    case 7: 
      var $19=$ci;
      var $cmp12=(($19)|0)!=0;
      if ($cmp12) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $20=$ci;
      var $top14=(($20+4)|0);
      var $21=HEAP32[(($top14)>>2)];
      var $22=$oldstack_addr;
      var $sub_ptr_lhs_cast15=$21;
      var $sub_ptr_rhs_cast16=$22;
      var $sub_ptr_sub17=((($sub_ptr_lhs_cast15)-($sub_ptr_rhs_cast16))|0);
      var $sub_ptr_div18=((((($sub_ptr_sub17)|0))/(12))&-1);
      var $23=$L_addr;
      var $stack19=(($23+28)|0);
      var $24=HEAP32[(($stack19)>>2)];
      var $add_ptr20=(($24+((($sub_ptr_div18)*(12))&-1))|0);
      var $25=$ci;
      var $top21=(($25+4)|0);
      HEAP32[(($top21)>>2)]=$add_ptr20;
      var $26=$ci;
      var $func=(($26)|0);
      var $27=HEAP32[(($func)>>2)];
      var $28=$oldstack_addr;
      var $sub_ptr_lhs_cast22=$27;
      var $sub_ptr_rhs_cast23=$28;
      var $sub_ptr_sub24=((($sub_ptr_lhs_cast22)-($sub_ptr_rhs_cast23))|0);
      var $sub_ptr_div25=((((($sub_ptr_sub24)|0))/(12))&-1);
      var $29=$L_addr;
      var $stack26=(($29+28)|0);
      var $30=HEAP32[(($stack26)>>2)];
      var $add_ptr27=(($30+((($sub_ptr_div25)*(12))&-1))|0);
      var $31=$ci;
      var $func28=(($31)|0);
      HEAP32[(($func28)>>2)]=$add_ptr27;
      var $32=$ci;
      var $callstatus=(($32+18)|0);
      var $33=HEAP8[($callstatus)];
      var $conv=(($33)&255);
      var $and=$conv & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $34=$ci;
      var $u=(($34+24)|0);
      var $l=$u;
      var $base=(($l)|0);
      var $35=HEAP32[(($base)>>2)];
      var $36=$oldstack_addr;
      var $sub_ptr_lhs_cast29=$35;
      var $sub_ptr_rhs_cast30=$36;
      var $sub_ptr_sub31=((($sub_ptr_lhs_cast29)-($sub_ptr_rhs_cast30))|0);
      var $sub_ptr_div32=((((($sub_ptr_sub31)|0))/(12))&-1);
      var $37=$L_addr;
      var $stack33=(($37+28)|0);
      var $38=HEAP32[(($stack33)>>2)];
      var $add_ptr34=(($38+((($sub_ptr_div32)*(12))&-1))|0);
      var $39=$ci;
      var $u35=(($39+24)|0);
      var $l36=$u35;
      var $base37=(($l36)|0);
      HEAP32[(($base37)>>2)]=$add_ptr34;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $40=$ci;
      var $previous=(($40+8)|0);
      var $41=HEAP32[(($previous)>>2)];
      $ci=$41;
      label = 7; break;
    case 12: 

      return;
  }

}
_correctstack["X"]=1;

function _stackinuse($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $ci;
      var $lim;
      $L_addr=$L;
      var $0=$L_addr;
      var $top=(($0+8)|0);
      var $1=HEAP32[(($top)>>2)];
      $lim=$1;
      var $2=$L_addr;
      var $ci1=(($2+16)|0);
      var $3=HEAP32[(($ci1)>>2)];
      $ci=$3;
      label = 3; break;
    case 3: 
      var $4=$ci;
      var $cmp=(($4)|0)!=0;
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $5=$lim;
      var $6=$ci;
      var $top2=(($6+4)|0);
      var $7=HEAP32[(($top2)>>2)];
      var $cmp3=(($5)>>>0) < (($7)>>>0);
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=$ci;
      var $top4=(($8+4)|0);
      var $9=HEAP32[(($top4)>>2)];
      $lim=$9;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $10=$ci;
      var $previous=(($10+8)|0);
      var $11=HEAP32[(($previous)>>2)];
      $ci=$11;
      label = 3; break;
    case 8: 
      var $12=$lim;
      var $13=$L_addr;
      var $stack=(($13+28)|0);
      var $14=HEAP32[(($stack)>>2)];
      var $sub_ptr_lhs_cast=$12;
      var $sub_ptr_rhs_cast=$14;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(12))&-1);
      var $add=((($sub_ptr_div)+(1))|0);

      return $add;
  }

}


function _luaD_shrinkstack($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $inuse;
      var $goodsize;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_stackinuse($0);
      $inuse=$call;
      var $1=$inuse;
      var $2=$inuse;
      var $div=((((($2)|0))/(8))&-1);
      var $add=((($1)+($div))|0);
      var $add1=((($add)+(10))|0);
      $goodsize=$add1;
      var $3=$goodsize;
      var $cmp=(($3)|0) > 1000000;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $goodsize=1000000;
      label = 4; break;
    case 4: 
      var $4=$inuse;
      var $cmp2=(($4)|0) > 1000000;
      if ($cmp2) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $5=$goodsize;
      var $6=$L_addr;
      var $stacksize=(($6+32)|0);
      var $7=HEAP32[(($stacksize)>>2)];
      var $cmp3=(($5)|0) >= (($7)|0);
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $8=$L_addr;
      var $9=$goodsize;
      _luaD_reallocstack($8, $9);
      label = 8; break;
    case 8: 

      return;
  }

}


function _luaD_hook($L, $event, $line) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 100)|0; _memset(__stackBase__, 0, 100);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $event_addr;
      var $line_addr;
      var $hook;
      var $ci;
      var $top;
      var $ci_top;
      var $ar=__stackBase__;
      $L_addr=$L;
      $event_addr=$event;
      $line_addr=$line;
      var $0=$L_addr;
      var $hook1=(($0+52)|0);
      var $1=HEAP32[(($hook1)>>2)];
      $hook=$1;
      var $2=$hook;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $3=$L_addr;
      var $allowhook=(($3+41)|0);
      var $4=HEAP8[($allowhook)];
      var $conv=(($4)&255);
      var $tobool2=(($conv)|0)!=0;
      if ($tobool2) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $5=$L_addr;
      var $ci3=(($5+16)|0);
      var $6=HEAP32[(($ci3)>>2)];
      $ci=$6;
      var $7=$L_addr;
      var $top4=(($7+8)|0);
      var $8=HEAP32[(($top4)>>2)];
      var $9=$8;
      var $10=$L_addr;
      var $stack=(($10+28)|0);
      var $11=HEAP32[(($stack)>>2)];
      var $12=$11;
      var $sub_ptr_lhs_cast=$9;
      var $sub_ptr_rhs_cast=$12;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $top=$sub_ptr_sub;
      var $13=$ci;
      var $top5=(($13+4)|0);
      var $14=HEAP32[(($top5)>>2)];
      var $15=$14;
      var $16=$L_addr;
      var $stack6=(($16+28)|0);
      var $17=HEAP32[(($stack6)>>2)];
      var $18=$17;
      var $sub_ptr_lhs_cast7=$15;
      var $sub_ptr_rhs_cast8=$18;
      var $sub_ptr_sub9=((($sub_ptr_lhs_cast7)-($sub_ptr_rhs_cast8))|0);
      $ci_top=$sub_ptr_sub9;
      var $19=$event_addr;
      var $event10=(($ar)|0);
      HEAP32[(($event10)>>2)]=$19;
      var $20=$line_addr;
      var $currentline=(($ar+20)|0);
      HEAP32[(($currentline)>>2)]=$20;
      var $21=$ci;
      var $i_ci=(($ar+96)|0);
      HEAP32[(($i_ci)>>2)]=$21;
      var $22=$L_addr;
      var $stack_last=(($22+24)|0);
      var $23=HEAP32[(($stack_last)>>2)];
      var $24=$L_addr;
      var $top11=(($24+8)|0);
      var $25=HEAP32[(($top11)>>2)];
      var $sub_ptr_lhs_cast12=$23;
      var $sub_ptr_rhs_cast13=$25;
      var $sub_ptr_sub14=((($sub_ptr_lhs_cast12)-($sub_ptr_rhs_cast13))|0);
      var $sub_ptr_div=((((($sub_ptr_sub14)|0))/(12))&-1);
      var $cmp=(($sub_ptr_div)|0) <= 20;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $26=$L_addr;
      _luaD_growstack($26, 20);
      label = 7; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $27=$L_addr;
      var $top17=(($27+8)|0);
      var $28=HEAP32[(($top17)>>2)];
      var $add_ptr=(($28+240)|0);
      var $29=$ci;
      var $top18=(($29+4)|0);
      HEAP32[(($top18)>>2)]=$add_ptr;
      var $30=$L_addr;
      var $allowhook19=(($30+41)|0);
      HEAP8[($allowhook19)]=0;
      var $31=$ci;
      var $callstatus=(($31+18)|0);
      var $32=HEAP8[($callstatus)];
      var $conv20=(($32)&255);
      var $or=$conv20 | 2;
      var $conv21=(($or) & 255);
      HEAP8[($callstatus)]=$conv21;
      var $33=$hook;
      var $34=$L_addr;
      FUNCTION_TABLE[$33]($34, $ar);
      var $35=$L_addr;
      var $allowhook22=(($35+41)|0);
      HEAP8[($allowhook22)]=1;
      var $36=$L_addr;
      var $stack23=(($36+28)|0);
      var $37=HEAP32[(($stack23)>>2)];
      var $38=$37;
      var $39=$ci_top;
      var $add_ptr24=(($38+$39)|0);
      var $40=$add_ptr24;
      var $41=$ci;
      var $top25=(($41+4)|0);
      HEAP32[(($top25)>>2)]=$40;
      var $42=$L_addr;
      var $stack26=(($42+28)|0);
      var $43=HEAP32[(($stack26)>>2)];
      var $44=$43;
      var $45=$top;
      var $add_ptr27=(($44+$45)|0);
      var $46=$add_ptr27;
      var $47=$L_addr;
      var $top28=(($47+8)|0);
      HEAP32[(($top28)>>2)]=$46;
      var $48=$ci;
      var $callstatus29=(($48+18)|0);
      var $49=HEAP8[($callstatus29)];
      var $conv30=(($49)&255);
      var $and=$conv30 & -3;
      var $conv31=(($and) & 255);
      HEAP8[($callstatus29)]=$conv31;
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
  }

}
_luaD_hook["X"]=1;

function _luaD_precall($L, $func, $nresults) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $func_addr;
      var $nresults_addr;
      var $f;
      var $ci;
      var $n;
      var $funcr;
      var $base;
      var $p;
      $L_addr=$L;
      $func_addr=$func;
      $nresults_addr=$nresults;
      var $0=$func_addr;
      var $1=$0;
      var $2=$L_addr;
      var $stack=(($2+28)|0);
      var $3=HEAP32[(($stack)>>2)];
      var $4=$3;
      var $sub_ptr_lhs_cast=$1;
      var $sub_ptr_rhs_cast=$4;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $funcr=$sub_ptr_sub;
      var $5=$func_addr;
      var $tt_=(($5+8)|0);
      var $6=HEAP32[(($tt_)>>2)];
      var $and=$6 & 63;
      if ((($and)|0)==22) {
        label = 3; break;
      }
      else if ((($and)|0)==38) {
        label = 4; break;
      }
      else if ((($and)|0)==6) {
        label = 14; break;
      }
      else {
      label = 30; break;
      }
      
    case 3: 
      var $7=$func_addr;
      var $value_=(($7)|0);
      var $f1=$value_;
      var $8=HEAP32[(($f1)>>2)];
      $f=$8;
      label = 5; break;
    case 4: 
      var $9=$func_addr;
      var $value_3=(($9)|0);
      var $gc=$value_3;
      var $10=HEAP32[(($gc)>>2)];
      var $cl=$10;
      var $c=$cl;
      var $f4=(($c+12)|0);
      var $11=HEAP32[(($f4)>>2)];
      $f=$11;
      label = 5; break;
    case 5: 
      var $12=$L_addr;
      var $stack_last=(($12+24)|0);
      var $13=HEAP32[(($stack_last)>>2)];
      var $14=$L_addr;
      var $top=(($14+8)|0);
      var $15=HEAP32[(($top)>>2)];
      var $sub_ptr_lhs_cast5=$13;
      var $sub_ptr_rhs_cast6=$15;
      var $sub_ptr_sub7=((($sub_ptr_lhs_cast5)-($sub_ptr_rhs_cast6))|0);
      var $sub_ptr_div=((((($sub_ptr_sub7)|0))/(12))&-1);
      var $cmp=(($sub_ptr_div)|0) <= 20;
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $16=$L_addr;
      _luaD_growstack($16, 20);
      label = 8; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $17=$L_addr;
      var $ci8=(($17+16)|0);
      var $18=HEAP32[(($ci8)>>2)];
      var $next=(($18+12)|0);
      var $19=HEAP32[(($next)>>2)];
      var $tobool=(($19)|0)!=0;
      if ($tobool) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $20=$L_addr;
      var $ci9=(($20+16)|0);
      var $21=HEAP32[(($ci9)>>2)];
      var $next10=(($21+12)|0);
      var $22=HEAP32[(($next10)>>2)];
      var $cond = $22;label = 11; break;
    case 10: 
      var $23=$L_addr;
      var $call=_luaE_extendCI($23);
      var $cond = $call;label = 11; break;
    case 11: 
      var $cond;
      var $24=$L_addr;
      var $ci11=(($24+16)|0);
      HEAP32[(($ci11)>>2)]=$cond;
      $ci=$cond;
      var $25=$nresults_addr;
      var $conv=(($25) & 65535);
      var $26=$ci;
      var $nresults12=(($26+16)|0);
      HEAP16[(($nresults12)>>1)]=$conv;
      var $27=$L_addr;
      var $stack13=(($27+28)|0);
      var $28=HEAP32[(($stack13)>>2)];
      var $29=$28;
      var $30=$funcr;
      var $add_ptr=(($29+$30)|0);
      var $31=$add_ptr;
      var $32=$ci;
      var $func14=(($32)|0);
      HEAP32[(($func14)>>2)]=$31;
      var $33=$L_addr;
      var $top15=(($33+8)|0);
      var $34=HEAP32[(($top15)>>2)];
      var $add_ptr16=(($34+240)|0);
      var $35=$ci;
      var $top17=(($35+4)|0);
      HEAP32[(($top17)>>2)]=$add_ptr16;
      var $36=$ci;
      var $callstatus=(($36+18)|0);
      HEAP8[($callstatus)]=0;
      var $37=$L_addr;
      var $hookmask=(($37+40)|0);
      var $38=HEAP8[($hookmask)];
      var $conv18=(($38)&255);
      var $and19=$conv18 & 1;
      var $tobool20=(($and19)|0)!=0;
      if ($tobool20) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $39=$L_addr;
      _luaD_hook($39, 0, -1);
      label = 13; break;
    case 13: 
      var $40=$f;
      var $41=$L_addr;
      var $call23=FUNCTION_TABLE[$40]($41);
      $n=$call23;
      var $42=$L_addr;
      var $43=$L_addr;
      var $top24=(($43+8)|0);
      var $44=HEAP32[(($top24)>>2)];
      var $45=$n;
      var $idx_neg=(((-$45))|0);
      var $add_ptr25=(($44+((($idx_neg)*(12))&-1))|0);
      var $call26=_luaD_poscall($42, $add_ptr25);
      $retval=1;
      label = 31; break;
    case 14: 
      var $46=$func_addr;
      var $value_28=(($46)|0);
      var $gc29=$value_28;
      var $47=HEAP32[(($gc29)>>2)];
      var $cl30=$47;
      var $l=$cl30;
      var $p31=(($l+12)|0);
      var $48=HEAP32[(($p31)>>2)];
      $p=$48;
      var $49=$L_addr;
      var $stack_last32=(($49+24)|0);
      var $50=HEAP32[(($stack_last32)>>2)];
      var $51=$L_addr;
      var $top33=(($51+8)|0);
      var $52=HEAP32[(($top33)>>2)];
      var $sub_ptr_lhs_cast34=$50;
      var $sub_ptr_rhs_cast35=$52;
      var $sub_ptr_sub36=((($sub_ptr_lhs_cast34)-($sub_ptr_rhs_cast35))|0);
      var $sub_ptr_div37=((((($sub_ptr_sub36)|0))/(12))&-1);
      var $53=$p;
      var $maxstacksize=(($53+78)|0);
      var $54=HEAP8[($maxstacksize)];
      var $conv38=(($54)&255);
      var $cmp39=(($sub_ptr_div37)|0) <= (($conv38)|0);
      if ($cmp39) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $55=$L_addr;
      var $56=$p;
      var $maxstacksize42=(($56+78)|0);
      var $57=HEAP8[($maxstacksize42)];
      var $conv43=(($57)&255);
      _luaD_growstack($55, $conv43);
      label = 17; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $58=$L_addr;
      var $stack46=(($58+28)|0);
      var $59=HEAP32[(($stack46)>>2)];
      var $60=$59;
      var $61=$funcr;
      var $add_ptr47=(($60+$61)|0);
      var $62=$add_ptr47;
      $func_addr=$62;
      var $63=$L_addr;
      var $top48=(($63+8)|0);
      var $64=HEAP32[(($top48)>>2)];
      var $65=$func_addr;
      var $sub_ptr_lhs_cast49=$64;
      var $sub_ptr_rhs_cast50=$65;
      var $sub_ptr_sub51=((($sub_ptr_lhs_cast49)-($sub_ptr_rhs_cast50))|0);
      var $sub_ptr_div52=((((($sub_ptr_sub51)|0))/(12))&-1);
      var $sub=((($sub_ptr_div52)-(1))|0);
      $n=$sub;
      label = 18; break;
    case 18: 
      var $66=$n;
      var $67=$p;
      var $numparams=(($67+76)|0);
      var $68=HEAP8[($numparams)];
      var $conv53=(($68)&255);
      var $cmp54=(($66)|0) < (($conv53)|0);
      if ($cmp54) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $69=$L_addr;
      var $top56=(($69+8)|0);
      var $70=HEAP32[(($top56)>>2)];
      var $incdec_ptr=(($70+12)|0);
      HEAP32[(($top56)>>2)]=$incdec_ptr;
      var $tt_57=(($70+8)|0);
      HEAP32[(($tt_57)>>2)]=0;
      label = 20; break;
    case 20: 
      var $71=$n;
      var $inc=((($71)+(1))|0);
      $n=$inc;
      label = 18; break;
    case 21: 
      var $72=$p;
      var $is_vararg=(($72+77)|0);
      var $73=HEAP8[($is_vararg)];
      var $tobool58=(($73 << 24) >> 24)!=0;
      if ($tobool58) { label = 23; break; } else { label = 22; break; }
    case 22: 
      var $74=$func_addr;
      var $add_ptr60=(($74+12)|0);
      var $cond64 = $add_ptr60;label = 24; break;
    case 23: 
      var $75=$L_addr;
      var $76=$p;
      var $77=$n;
      var $call62=_adjust_varargs($75, $76, $77);
      var $cond64 = $call62;label = 24; break;
    case 24: 
      var $cond64;
      $base=$cond64;
      var $78=$L_addr;
      var $ci65=(($78+16)|0);
      var $79=HEAP32[(($ci65)>>2)];
      var $next66=(($79+12)|0);
      var $80=HEAP32[(($next66)>>2)];
      var $tobool67=(($80)|0)!=0;
      if ($tobool67) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $81=$L_addr;
      var $ci69=(($81+16)|0);
      var $82=HEAP32[(($ci69)>>2)];
      var $next70=(($82+12)|0);
      var $83=HEAP32[(($next70)>>2)];
      var $cond74 = $83;label = 27; break;
    case 26: 
      var $84=$L_addr;
      var $call72=_luaE_extendCI($84);
      var $cond74 = $call72;label = 27; break;
    case 27: 
      var $cond74;
      var $85=$L_addr;
      var $ci75=(($85+16)|0);
      HEAP32[(($ci75)>>2)]=$cond74;
      $ci=$cond74;
      var $86=$nresults_addr;
      var $conv76=(($86) & 65535);
      var $87=$ci;
      var $nresults77=(($87+16)|0);
      HEAP16[(($nresults77)>>1)]=$conv76;
      var $88=$func_addr;
      var $89=$ci;
      var $func78=(($89)|0);
      HEAP32[(($func78)>>2)]=$88;
      var $90=$base;
      var $91=$ci;
      var $u=(($91+24)|0);
      var $l79=$u;
      var $base80=(($l79)|0);
      HEAP32[(($base80)>>2)]=$90;
      var $92=$base;
      var $93=$p;
      var $maxstacksize81=(($93+78)|0);
      var $94=HEAP8[($maxstacksize81)];
      var $conv82=(($94)&255);
      var $add_ptr83=(($92+((($conv82)*(12))&-1))|0);
      var $95=$ci;
      var $top84=(($95+4)|0);
      HEAP32[(($top84)>>2)]=$add_ptr83;
      var $96=$p;
      var $code=(($96+12)|0);
      var $97=HEAP32[(($code)>>2)];
      var $98=$ci;
      var $u85=(($98+24)|0);
      var $l86=$u85;
      var $savedpc=(($l86+4)|0);
      HEAP32[(($savedpc)>>2)]=$97;
      var $99=$ci;
      var $callstatus87=(($99+18)|0);
      HEAP8[($callstatus87)]=1;
      var $100=$ci;
      var $top88=(($100+4)|0);
      var $101=HEAP32[(($top88)>>2)];
      var $102=$L_addr;
      var $top89=(($102+8)|0);
      HEAP32[(($top89)>>2)]=$101;
      var $103=$L_addr;
      var $hookmask90=(($103+40)|0);
      var $104=HEAP8[($hookmask90)];
      var $conv91=(($104)&255);
      var $and92=$conv91 & 1;
      var $tobool93=(($and92)|0)!=0;
      if ($tobool93) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $105=$L_addr;
      var $106=$ci;
      _callhook($105, $106);
      label = 29; break;
    case 29: 
      $retval=0;
      label = 31; break;
    case 30: 
      var $107=$L_addr;
      var $108=$func_addr;
      var $call96=_tryfuncTM($107, $108);
      $func_addr=$call96;
      var $109=$L_addr;
      var $110=$func_addr;
      var $111=$nresults_addr;
      var $call97=_luaD_precall($109, $110, $111);
      $retval=$call97;
      label = 31; break;
    case 31: 
      var $112=$retval;

      return $112;
  }

}
_luaD_precall["X"]=1;

function _luaD_growstack($L, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $n_addr;
      var $size;
      var $needed;
      var $newsize;
      $L_addr=$L;
      $n_addr=$n;
      var $0=$L_addr;
      var $stacksize=(($0+32)|0);
      var $1=HEAP32[(($stacksize)>>2)];
      $size=$1;
      var $2=$size;
      var $cmp=(($2)|0) > 1000000;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$L_addr;
      _luaD_throw($3, 6);

    case 4: 
      var $4=$L_addr;
      var $top=(($4+8)|0);
      var $5=HEAP32[(($top)>>2)];
      var $6=$L_addr;
      var $stack=(($6+28)|0);
      var $7=HEAP32[(($stack)>>2)];
      var $sub_ptr_lhs_cast=$5;
      var $sub_ptr_rhs_cast=$7;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(12))&-1);
      var $8=$n_addr;
      var $add=((($sub_ptr_div)+($8))|0);
      var $add1=((($add)+(5))|0);
      $needed=$add1;
      var $9=$size;
      var $mul=($9<<1);
      $newsize=$mul;
      var $10=$newsize;
      var $cmp2=(($10)|0) > 1000000;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $newsize=1000000;
      label = 6; break;
    case 6: 
      var $11=$newsize;
      var $12=$needed;
      var $cmp4=(($11)|0) < (($12)|0);
      if ($cmp4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $13=$needed;
      $newsize=$13;
      label = 8; break;
    case 8: 
      var $14=$newsize;
      var $cmp7=(($14)|0) > 1000000;
      if ($cmp7) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $15=$L_addr;
      _luaD_reallocstack($15, 1000200);
      var $16=$L_addr;
      _luaG_runerror($16, ((5250424)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));

    case 10: 
      var $17=$L_addr;
      var $18=$newsize;
      _luaD_reallocstack($17, $18);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      STACKTOP = __stackBase__;
      return;
  }

}
_luaD_growstack["X"]=1;

function _luaD_poscall($L, $firstResult) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $firstResult_addr;
      var $res;
      var $wanted;
      var $i;
      var $ci;
      var $fr;
      var $io2;
      var $io1;
      $L_addr=$L;
      $firstResult_addr=$firstResult;
      var $0=$L_addr;
      var $ci1=(($0+16)|0);
      var $1=HEAP32[(($ci1)>>2)];
      $ci=$1;
      var $2=$L_addr;
      var $hookmask=(($2+40)|0);
      var $3=HEAP8[($hookmask)];
      var $conv=(($3)&255);
      var $and=$conv & 6;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $4=$L_addr;
      var $hookmask2=(($4+40)|0);
      var $5=HEAP8[($hookmask2)];
      var $conv3=(($5)&255);
      var $and4=$conv3 & 2;
      var $tobool5=(($and4)|0)!=0;
      if ($tobool5) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $6=$firstResult_addr;
      var $7=$6;
      var $8=$L_addr;
      var $stack=(($8+28)|0);
      var $9=HEAP32[(($stack)>>2)];
      var $10=$9;
      var $sub_ptr_lhs_cast=$7;
      var $sub_ptr_rhs_cast=$10;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $fr=$sub_ptr_sub;
      var $11=$L_addr;
      _luaD_hook($11, 1, -1);
      var $12=$L_addr;
      var $stack7=(($12+28)|0);
      var $13=HEAP32[(($stack7)>>2)];
      var $14=$13;
      var $15=$fr;
      var $add_ptr=(($14+$15)|0);
      var $16=$add_ptr;
      $firstResult_addr=$16;
      label = 5; break;
    case 5: 
      var $17=$ci;
      var $previous=(($17+8)|0);
      var $18=HEAP32[(($previous)>>2)];
      var $u=(($18+24)|0);
      var $l=$u;
      var $savedpc=(($l+4)|0);
      var $19=HEAP32[(($savedpc)>>2)];
      var $20=$L_addr;
      var $oldpc=(($20+20)|0);
      HEAP32[(($oldpc)>>2)]=$19;
      label = 6; break;
    case 6: 
      var $21=$ci;
      var $func=(($21)|0);
      var $22=HEAP32[(($func)>>2)];
      $res=$22;
      var $23=$ci;
      var $nresults=(($23+16)|0);
      var $24=HEAP16[(($nresults)>>1)];
      var $conv9=(($24 << 16) >> 16);
      $wanted=$conv9;
      var $25=$ci;
      var $previous10=(($25+8)|0);
      var $26=HEAP32[(($previous10)>>2)];
      $ci=$26;
      var $27=$L_addr;
      var $ci11=(($27+16)|0);
      HEAP32[(($ci11)>>2)]=$26;
      var $28=$wanted;
      $i=$28;
      label = 7; break;
    case 7: 
      var $29=$i;
      var $cmp=(($29)|0)!=0;
      if ($cmp) { label = 8; break; } else { var $33 = 0;label = 9; break; }
    case 8: 
      var $30=$firstResult_addr;
      var $31=$L_addr;
      var $top=(($31+8)|0);
      var $32=HEAP32[(($top)>>2)];
      var $cmp13=(($30)>>>0) < (($32)>>>0);
      var $33 = $cmp13;label = 9; break;
    case 9: 
      var $33;
      if ($33) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $34=$firstResult_addr;
      var $incdec_ptr=(($34+12)|0);
      $firstResult_addr=$incdec_ptr;
      $io2=$34;
      var $35=$res;
      var $incdec_ptr15=(($35+12)|0);
      $res=$incdec_ptr15;
      $io1=$35;
      var $36=$io1;
      var $value_=(($36)|0);
      var $37=$io2;
      var $value_16=(($37)|0);
      var $38=$value_;
      var $39=$value_16;
      HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];HEAP32[((($38)+(4))>>2)]=HEAP32[((($39)+(4))>>2)];
      var $40=$io2;
      var $tt_=(($40+8)|0);
      var $41=HEAP32[(($tt_)>>2)];
      var $42=$io1;
      var $tt_17=(($42+8)|0);
      HEAP32[(($tt_17)>>2)]=$41;
      label = 11; break;
    case 11: 
      var $43=$i;
      var $dec=((($43)-(1))|0);
      $i=$dec;
      label = 7; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $44=$i;
      var $dec18=((($44)-(1))|0);
      $i=$dec18;
      var $cmp19=(($44)|0) > 0;
      if ($cmp19) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $45=$res;
      var $incdec_ptr21=(($45+12)|0);
      $res=$incdec_ptr21;
      var $tt_22=(($45+8)|0);
      HEAP32[(($tt_22)>>2)]=0;
      label = 13; break;
    case 15: 
      var $46=$res;
      var $47=$L_addr;
      var $top23=(($47+8)|0);
      HEAP32[(($top23)>>2)]=$46;
      var $48=$wanted;
      var $sub=((($48)+(1))|0);

      return $sub;
  }

}
_luaD_poscall["X"]=1;

function _adjust_varargs($L, $p, $actual) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $p_addr;
      var $actual_addr;
      var $i;
      var $nfixargs;
      var $base;
      var $fixed;
      var $io2;
      var $io1;
      $L_addr=$L;
      $p_addr=$p;
      $actual_addr=$actual;
      var $0=$p_addr;
      var $numparams=(($0+76)|0);
      var $1=HEAP8[($numparams)];
      var $conv=(($1)&255);
      $nfixargs=$conv;
      var $2=$L_addr;
      var $top=(($2+8)|0);
      var $3=HEAP32[(($top)>>2)];
      var $4=$actual_addr;
      var $idx_neg=(((-$4))|0);
      var $add_ptr=(($3+((($idx_neg)*(12))&-1))|0);
      $fixed=$add_ptr;
      var $5=$L_addr;
      var $top1=(($5+8)|0);
      var $6=HEAP32[(($top1)>>2)];
      $base=$6;
      $i=0;
      label = 3; break;
    case 3: 
      var $7=$i;
      var $8=$nfixargs;
      var $cmp=(($7)|0) < (($8)|0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $9=$fixed;
      var $10=$i;
      var $add_ptr3=(($9+((($10)*(12))&-1))|0);
      $io2=$add_ptr3;
      var $11=$L_addr;
      var $top4=(($11+8)|0);
      var $12=HEAP32[(($top4)>>2)];
      var $incdec_ptr=(($12+12)|0);
      HEAP32[(($top4)>>2)]=$incdec_ptr;
      $io1=$12;
      var $13=$io1;
      var $value_=(($13)|0);
      var $14=$io2;
      var $value_5=(($14)|0);
      var $15=$value_;
      var $16=$value_5;
      HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];
      var $17=$io2;
      var $tt_=(($17+8)|0);
      var $18=HEAP32[(($tt_)>>2)];
      var $19=$io1;
      var $tt_6=(($19+8)|0);
      HEAP32[(($tt_6)>>2)]=$18;
      var $20=$fixed;
      var $21=$i;
      var $add_ptr7=(($20+((($21)*(12))&-1))|0);
      var $tt_8=(($add_ptr7+8)|0);
      HEAP32[(($tt_8)>>2)]=0;
      label = 5; break;
    case 5: 
      var $22=$i;
      var $inc=((($22)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $23=$base;

      return $23;
  }

}
_adjust_varargs["X"]=1;

function _callhook($L, $ci) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $ci_addr;
      var $hook;
      $L_addr=$L;
      $ci_addr=$ci;
      $hook=0;
      var $0=$ci_addr;
      var $u=(($0+24)|0);
      var $l=$u;
      var $savedpc=(($l+4)|0);
      var $1=HEAP32[(($savedpc)>>2)];
      var $incdec_ptr=(($1+4)|0);
      HEAP32[(($savedpc)>>2)]=$incdec_ptr;
      var $2=$ci_addr;
      var $previous=(($2+8)|0);
      var $3=HEAP32[(($previous)>>2)];
      var $callstatus=(($3+18)|0);
      var $4=HEAP8[($callstatus)];
      var $conv=(($4)&255);
      var $and=$conv & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $5=$ci_addr;
      var $previous1=(($5+8)|0);
      var $6=HEAP32[(($previous1)>>2)];
      var $u2=(($6+24)|0);
      var $l3=$u2;
      var $savedpc4=(($l3+4)|0);
      var $7=HEAP32[(($savedpc4)>>2)];
      var $add_ptr=((($7)-(4))|0);
      var $8=HEAP32[(($add_ptr)>>2)];
      var $shr=$8 >>> 0;
      var $and5=$shr & 63;
      var $cmp=(($and5)|0)==30;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $9=$ci_addr;
      var $callstatus7=(($9+18)|0);
      var $10=HEAP8[($callstatus7)];
      var $conv8=(($10)&255);
      var $or=$conv8 | 64;
      var $conv9=(($or) & 255);
      HEAP8[($callstatus7)]=$conv9;
      $hook=4;
      label = 5; break;
    case 5: 
      var $11=$L_addr;
      var $12=$hook;
      _luaD_hook($11, $12, -1);
      var $13=$ci_addr;
      var $u10=(($13+24)|0);
      var $l11=$u10;
      var $savedpc12=(($l11+4)|0);
      var $14=HEAP32[(($savedpc12)>>2)];
      var $incdec_ptr13=((($14)-(4))|0);
      HEAP32[(($savedpc12)>>2)]=$incdec_ptr13;

      return;
  }

}
_callhook["X"]=1;

function _lua_resume($L, $from, $nargs) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $from_addr;
      var $nargs_addr;
      var $status;
      $L_addr=$L;
      $from_addr=$from;
      $nargs_addr=$nargs;
      var $0=$L_addr;
      var $1=$from_addr;
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$from_addr;
      var $nCcalls=(($2+38)|0);
      var $3=HEAP16[(($nCcalls)>>1)];
      var $conv=(($3)&65535);
      var $add=((($conv)+(1))|0);
      var $cond = $add;label = 5; break;
    case 4: 
      var $cond = 1;label = 5; break;
    case 5: 
      var $cond;
      var $conv1=(($cond) & 65535);
      var $4=$L_addr;
      var $nCcalls2=(($4+38)|0);
      HEAP16[(($nCcalls2)>>1)]=$conv1;
      var $5=$L_addr;
      var $nny=(($5+36)|0);
      HEAP16[(($nny)>>1)]=0;
      var $6=$L_addr;
      var $7=$L_addr;
      var $top=(($7+8)|0);
      var $8=HEAP32[(($top)>>2)];
      var $9=$nargs_addr;
      var $idx_neg=(((-$9))|0);
      var $add_ptr=(($8+((($idx_neg)*(12))&-1))|0);
      var $10=$add_ptr;
      var $call=_luaD_rawrunprotected($6, 152, $10);
      $status=$call;
      var $11=$status;
      var $cmp=(($11)|0)==-1;
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $status=2;
      label = 16; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $12=$status;
      var $cmp4=(($12)|0)!=0;
      if ($cmp4) { label = 9; break; } else { var $14 = 0;label = 10; break; }
    case 9: 
      var $13=$status;
      var $cmp6=(($13)|0)!=1;
      var $14 = $cmp6;label = 10; break;
    case 10: 
      var $14;
      if ($14) { label = 11; break; } else { label = 15; break; }
    case 11: 
      var $15=$L_addr;
      var $16=$status;
      var $call8=_recover($15, $16);
      var $tobool9=(($call8)|0)!=0;
      if ($tobool9) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $17=$L_addr;
      var $call11=_luaD_rawrunprotected($17, 236, 0);
      $status=$call11;
      label = 14; break;
    case 13: 
      var $18=$status;
      var $conv13=(($18) & 255);
      var $19=$L_addr;
      var $status14=(($19+6)|0);
      HEAP8[($status14)]=$conv13;
      var $20=$L_addr;
      var $21=$status;
      var $22=$L_addr;
      var $top15=(($22+8)|0);
      var $23=HEAP32[(($top15)>>2)];
      _seterrorobj($20, $21, $23);
      var $24=$L_addr;
      var $top16=(($24+8)|0);
      var $25=HEAP32[(($top16)>>2)];
      var $26=$L_addr;
      var $ci=(($26+16)|0);
      var $27=HEAP32[(($ci)>>2)];
      var $top17=(($27+4)|0);
      HEAP32[(($top17)>>2)]=$25;
      label = 15; break;
    case 14: 
      label = 8; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $28=$L_addr;
      var $nny19=(($28+36)|0);
      HEAP16[(($nny19)>>1)]=1;
      var $29=$L_addr;
      var $nCcalls20=(($29+38)|0);
      var $30=HEAP16[(($nCcalls20)>>1)];
      var $dec=((($30)-(1))&65535);
      HEAP16[(($nCcalls20)>>1)]=$dec;
      var $31=$status;

      return $31;
  }

}
_lua_resume["X"]=1;

function _recover($L, $status) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $status_addr;
      var $oldtop;
      var $ci;
      $L_addr=$L;
      $status_addr=$status;
      var $0=$L_addr;
      var $call=_findpcall($0);
      $ci=$call;
      var $1=$ci;
      var $cmp=(($1)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 5; break;
    case 4: 
      var $2=$L_addr;
      var $stack=(($2+28)|0);
      var $3=HEAP32[(($stack)>>2)];
      var $4=$3;
      var $5=$ci;
      var $extra=(($5+20)|0);
      var $6=HEAP32[(($extra)>>2)];
      var $add_ptr=(($4+$6)|0);
      var $7=$add_ptr;
      $oldtop=$7;
      var $8=$L_addr;
      var $9=$oldtop;
      _luaF_close($8, $9);
      var $10=$L_addr;
      var $11=$status_addr;
      var $12=$oldtop;
      _seterrorobj($10, $11, $12);
      var $13=$ci;
      var $14=$L_addr;
      var $ci1=(($14+16)|0);
      HEAP32[(($ci1)>>2)]=$13;
      var $15=$ci;
      var $u=(($15+24)|0);
      var $c=$u;
      var $old_allowhook=(($c+12)|0);
      var $16=HEAP8[($old_allowhook)];
      var $17=$L_addr;
      var $allowhook=(($17+41)|0);
      HEAP8[($allowhook)]=$16;
      var $18=$L_addr;
      var $nny=(($18+36)|0);
      HEAP16[(($nny)>>1)]=0;
      var $19=$L_addr;
      _luaD_shrinkstack($19);
      var $20=$ci;
      var $u2=(($20+24)|0);
      var $c3=$u2;
      var $old_errfunc=(($c3+8)|0);
      var $21=HEAP32[(($old_errfunc)>>2)];
      var $22=$L_addr;
      var $errfunc=(($22+68)|0);
      HEAP32[(($errfunc)>>2)]=$21;
      var $23=$ci;
      var $callstatus=(($23+18)|0);
      var $24=HEAP8[($callstatus)];
      var $conv=(($24)&255);
      var $or=$conv | 32;
      var $conv4=(($or) & 255);
      HEAP8[($callstatus)]=$conv4;
      var $25=$status_addr;
      var $conv5=(($25) & 255);
      var $26=$ci;
      var $u6=(($26+24)|0);
      var $c7=$u6;
      var $status8=(($c7+13)|0);
      HEAP8[($status8)]=$conv5;
      $retval=1;
      label = 5; break;
    case 5: 
      var $27=$retval;

      return $27;
  }

}
_recover["X"]=1;

function _unroll($L, $ud) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $ud_addr;
      $L_addr=$L;
      $ud_addr=$ud;
      var $0=$ud_addr;
      label = 3; break;
    case 3: 
      var $1=$L_addr;
      var $ci=(($1+16)|0);
      var $2=HEAP32[(($ci)>>2)];
      var $3=$L_addr;
      var $base_ci=(($3+72)|0);
      var $cmp=(($2)|0)==(($base_ci)|0);
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 

      return;
    case 5: 
      var $4=$L_addr;
      var $ci1=(($4+16)|0);
      var $5=HEAP32[(($ci1)>>2)];
      var $callstatus=(($5+18)|0);
      var $6=HEAP8[($callstatus)];
      var $conv=(($6)&255);
      var $and=$conv & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $7=$L_addr;
      _finishCcall($7);
      label = 8; break;
    case 7: 
      var $8=$L_addr;
      _luaV_finishOp($8);
      var $9=$L_addr;
      _luaV_execute($9);
      label = 8; break;
    case 8: 
      label = 3; break;
  }

}


function _tryfuncTM($L, $func) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $func_addr;
      var $tm;
      var $p;
      var $funcr;
      var $io2;
      var $io1;
      var $io216;
      var $io117;
      $L_addr=$L;
      $func_addr=$func;
      var $0=$L_addr;
      var $1=$func_addr;
      var $call=_luaT_gettmbyobj($0, $1, 16);
      $tm=$call;
      var $2=$func_addr;
      var $3=$2;
      var $4=$L_addr;
      var $stack=(($4+28)|0);
      var $5=HEAP32[(($stack)>>2)];
      var $6=$5;
      var $sub_ptr_lhs_cast=$3;
      var $sub_ptr_rhs_cast=$6;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $funcr=$sub_ptr_sub;
      var $7=$tm;
      var $tt_=(($7+8)|0);
      var $8=HEAP32[(($tt_)>>2)];
      var $and=$8 & 15;
      var $cmp=(($and)|0)==6;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $9=$L_addr;
      var $10=$func_addr;
      _luaG_typeerror($9, $10, ((5253312)|0));

    case 4: 
      var $11=$L_addr;
      var $top=(($11+8)|0);
      var $12=HEAP32[(($top)>>2)];
      $p=$12;
      label = 5; break;
    case 5: 
      var $13=$p;
      var $14=$func_addr;
      var $cmp1=(($13)>>>0) > (($14)>>>0);
      if ($cmp1) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $15=$p;
      var $add_ptr=((($15)-(12))|0);
      $io2=$add_ptr;
      var $16=$p;
      $io1=$16;
      var $17=$io1;
      var $value_=(($17)|0);
      var $18=$io2;
      var $value_2=(($18)|0);
      var $19=$value_;
      var $20=$value_2;
      HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];
      var $21=$io2;
      var $tt_3=(($21+8)|0);
      var $22=HEAP32[(($tt_3)>>2)];
      var $23=$io1;
      var $tt_4=(($23+8)|0);
      HEAP32[(($tt_4)>>2)]=$22;
      label = 7; break;
    case 7: 
      var $24=$p;
      var $incdec_ptr=((($24)-(12))|0);
      $p=$incdec_ptr;
      label = 5; break;
    case 8: 
      var $25=$L_addr;
      var $top5=(($25+8)|0);
      var $26=HEAP32[(($top5)>>2)];
      var $incdec_ptr6=(($26+12)|0);
      HEAP32[(($top5)>>2)]=$incdec_ptr6;
      var $27=$L_addr;
      var $stack_last=(($27+24)|0);
      var $28=HEAP32[(($stack_last)>>2)];
      var $29=$L_addr;
      var $top7=(($29+8)|0);
      var $30=HEAP32[(($top7)>>2)];
      var $sub_ptr_lhs_cast8=$28;
      var $sub_ptr_rhs_cast9=$30;
      var $sub_ptr_sub10=((($sub_ptr_lhs_cast8)-($sub_ptr_rhs_cast9))|0);
      var $sub_ptr_div=((((($sub_ptr_sub10)|0))/(12))&-1);
      var $cmp11=(($sub_ptr_div)|0) <= 0;
      if ($cmp11) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $31=$L_addr;
      _luaD_growstack($31, 0);
      label = 11; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $32=$L_addr;
      var $stack14=(($32+28)|0);
      var $33=HEAP32[(($stack14)>>2)];
      var $34=$33;
      var $35=$funcr;
      var $add_ptr15=(($34+$35)|0);
      var $36=$add_ptr15;
      $func_addr=$36;
      var $37=$tm;
      $io216=$37;
      var $38=$func_addr;
      $io117=$38;
      var $39=$io117;
      var $value_18=(($39)|0);
      var $40=$io216;
      var $value_19=(($40)|0);
      var $41=$value_18;
      var $42=$value_19;
      HEAP32[(($41)>>2)]=HEAP32[(($42)>>2)];HEAP32[((($41)+(4))>>2)]=HEAP32[((($42)+(4))>>2)];
      var $43=$io216;
      var $tt_20=(($43+8)|0);
      var $44=HEAP32[(($tt_20)>>2)];
      var $45=$io117;
      var $tt_21=(($45+8)|0);
      HEAP32[(($tt_21)>>2)]=$44;
      var $46=$func_addr;

      return $46;
  }

}
_tryfuncTM["X"]=1;

function _luaD_call($L, $func, $nResults, $allowyield) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $func_addr;
      var $nResults_addr;
      var $allowyield_addr;
      $L_addr=$L;
      $func_addr=$func;
      $nResults_addr=$nResults;
      $allowyield_addr=$allowyield;
      var $0=$L_addr;
      var $nCcalls=(($0+38)|0);
      var $1=HEAP16[(($nCcalls)>>1)];
      var $inc=((($1)+(1))&65535);
      HEAP16[(($nCcalls)>>1)]=$inc;
      var $conv=(($inc)&65535);
      var $cmp=(($conv)|0) >= 200;
      if ($cmp) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $2=$L_addr;
      var $nCcalls2=(($2+38)|0);
      var $3=HEAP16[(($nCcalls2)>>1)];
      var $conv3=(($3)&65535);
      var $cmp4=(($conv3)|0)==200;
      if ($cmp4) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$L_addr;
      _luaG_runerror($4, ((5252932)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));

    case 5: 
      var $5=$L_addr;
      var $nCcalls7=(($5+38)|0);
      var $6=HEAP16[(($nCcalls7)>>1)];
      var $conv8=(($6)&65535);
      var $cmp9=(($conv8)|0) >= 225;
      if ($cmp9) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $7=$L_addr;
      _luaD_throw($7, 6);

    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $8=$allowyield_addr;
      var $tobool=(($8)|0)!=0;
      if ($tobool) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $9=$L_addr;
      var $nny=(($9+36)|0);
      var $10=HEAP16[(($nny)>>1)];
      var $inc15=((($10)+(1))&65535);
      HEAP16[(($nny)>>1)]=$inc15;
      label = 11; break;
    case 11: 
      var $11=$L_addr;
      var $12=$func_addr;
      var $13=$nResults_addr;
      var $call=_luaD_precall($11, $12, $13);
      var $tobool17=(($call)|0)!=0;
      if ($tobool17) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $14=$L_addr;
      _luaV_execute($14);
      label = 13; break;
    case 13: 
      var $15=$allowyield_addr;
      var $tobool20=(($15)|0)!=0;
      if ($tobool20) { label = 15; break; } else { label = 14; break; }
    case 14: 
      var $16=$L_addr;
      var $nny22=(($16+36)|0);
      var $17=HEAP16[(($nny22)>>1)];
      var $dec=((($17)-(1))&65535);
      HEAP16[(($nny22)>>1)]=$dec;
      label = 15; break;
    case 15: 
      var $18=$L_addr;
      var $nCcalls24=(($18+38)|0);
      var $19=HEAP16[(($nCcalls24)>>1)];
      var $dec25=((($19)-(1))&65535);
      HEAP16[(($nCcalls24)>>1)]=$dec25;
      var $20=$L_addr;
      var $l_G=(($20+12)|0);
      var $21=HEAP32[(($l_G)>>2)];
      var $GCdebt=(($21+12)|0);
      var $22=HEAP32[(($GCdebt)>>2)];
      var $cmp26=(($22)|0) > 0;
      if ($cmp26) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $23=$L_addr;
      _luaC_step($23);
      label = 17; break;
    case 17: 
      STACKTOP = __stackBase__;
      return;
  }

}
_luaD_call["X"]=1;

function _resume($L, $ud) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $ud_addr;
      var $nCcalls;
      var $firstArg;
      var $ci;
      var $n;
      $L_addr=$L;
      $ud_addr=$ud;
      var $0=$L_addr;
      var $nCcalls1=(($0+38)|0);
      var $1=HEAP16[(($nCcalls1)>>1)];
      var $conv=(($1)&65535);
      $nCcalls=$conv;
      var $2=$ud_addr;
      var $3=$2;
      $firstArg=$3;
      var $4=$L_addr;
      var $ci2=(($4+16)|0);
      var $5=HEAP32[(($ci2)>>2)];
      $ci=$5;
      var $6=$nCcalls;
      var $cmp=(($6)|0) >= 200;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=$L_addr;
      var $8=$firstArg;
      _resume_error($7, ((5252932)|0), $8);

    case 4: 
      var $9=$L_addr;
      var $status=(($9+6)|0);
      var $10=HEAP8[($status)];
      var $conv4=(($10)&255);
      var $cmp5=(($conv4)|0)==0;
      if ($cmp5) { label = 5; break; } else { label = 10; break; }
    case 5: 
      var $11=$ci;
      var $12=$L_addr;
      var $base_ci=(($12+72)|0);
      var $cmp8=(($11)|0)!=(($base_ci)|0);
      if ($cmp8) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $13=$L_addr;
      var $14=$firstArg;
      _resume_error($13, ((5245476)|0), $14);

    case 7: 
      var $15=$L_addr;
      var $16=$firstArg;
      var $add_ptr=((($16)-(12))|0);
      var $call=_luaD_precall($15, $add_ptr, -1);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $17=$L_addr;
      _luaV_execute($17);
      label = 9; break;
    case 9: 
      label = 19; break;
    case 10: 
      var $18=$L_addr;
      var $status14=(($18+6)|0);
      var $19=HEAP8[($status14)];
      var $conv15=(($19)&255);
      var $cmp16=(($conv15)|0)!=1;
      if ($cmp16) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $20=$L_addr;
      var $21=$firstArg;
      _resume_error($20, ((5253676)|0), $21);

    case 12: 
      var $22=$L_addr;
      var $status20=(($22+6)|0);
      HEAP8[($status20)]=0;
      var $23=$L_addr;
      var $stack=(($23+28)|0);
      var $24=HEAP32[(($stack)>>2)];
      var $25=$24;
      var $26=$ci;
      var $extra=(($26+20)|0);
      var $27=HEAP32[(($extra)>>2)];
      var $add_ptr21=(($25+$27)|0);
      var $28=$add_ptr21;
      var $29=$ci;
      var $func=(($29)|0);
      HEAP32[(($func)>>2)]=$28;
      var $30=$ci;
      var $callstatus=(($30+18)|0);
      var $31=HEAP8[($callstatus)];
      var $conv22=(($31)&255);
      var $and=$conv22 & 1;
      var $tobool23=(($and)|0)!=0;
      if ($tobool23) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $32=$L_addr;
      _luaV_execute($32);
      label = 17; break;
    case 14: 
      var $33=$ci;
      var $u=(($33+24)|0);
      var $c=$u;
      var $k=(($c+4)|0);
      var $34=HEAP32[(($k)>>2)];
      var $cmp26=(($34)|0)!=0;
      if ($cmp26) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $35=$ci;
      var $u29=(($35+24)|0);
      var $c30=$u29;
      var $status31=(($c30+13)|0);
      HEAP8[($status31)]=1;
      var $36=$ci;
      var $callstatus32=(($36+18)|0);
      var $37=HEAP8[($callstatus32)];
      var $conv33=(($37)&255);
      var $or=$conv33 | 8;
      var $conv34=(($or) & 255);
      HEAP8[($callstatus32)]=$conv34;
      var $38=$ci;
      var $u35=(($38+24)|0);
      var $c36=$u35;
      var $k37=(($c36+4)|0);
      var $39=HEAP32[(($k37)>>2)];
      var $40=$L_addr;
      var $call38=FUNCTION_TABLE[$39]($40);
      $n=$call38;
      var $41=$L_addr;
      var $top=(($41+8)|0);
      var $42=HEAP32[(($top)>>2)];
      var $43=$n;
      var $idx_neg=(((-$43))|0);
      var $add_ptr39=(($42+((($idx_neg)*(12))&-1))|0);
      $firstArg=$add_ptr39;
      label = 16; break;
    case 16: 
      var $44=$L_addr;
      var $45=$firstArg;
      var $call41=_luaD_poscall($44, $45);
      label = 17; break;
    case 17: 
      var $46=$L_addr;
      _unroll($46, 0);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 

      return;
  }

}
_resume["X"]=1;

function _findpcall($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $ci;
      $L_addr=$L;
      var $0=$L_addr;
      var $ci1=(($0+16)|0);
      var $1=HEAP32[(($ci1)>>2)];
      $ci=$1;
      label = 3; break;
    case 3: 
      var $2=$ci;
      var $cmp=(($2)|0)!=0;
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $3=$ci;
      var $callstatus=(($3+18)|0);
      var $4=HEAP8[($callstatus)];
      var $conv=(($4)&255);
      var $and=$conv & 16;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $5=$ci;
      $retval=$5;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $6=$ci;
      var $previous=(($6+8)|0);
      var $7=HEAP32[(($previous)>>2)];
      $ci=$7;
      label = 3; break;
    case 8: 
      $retval=0;
      label = 9; break;
    case 9: 
      var $8=$retval;

      return $8;
  }

}


function _seterrorobj($L, $errcode, $oldtop) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $errcode_addr;
      var $oldtop_addr;
      var $io;
      var $x_;
      var $io2;
      var $x_3;
      var $io211;
      var $io1;
      $L_addr=$L;
      $errcode_addr=$errcode;
      $oldtop_addr=$oldtop;
      var $0=$errcode_addr;
      if ((($0)|0)==4) {
        label = 3; break;
      }
      else if ((($0)|0)==6) {
        label = 4; break;
      }
      else {
      label = 5; break;
      }
      
    case 3: 
      var $1=$oldtop_addr;
      $io=$1;
      var $2=$L_addr;
      var $l_G=(($2+12)|0);
      var $3=HEAP32[(($l_G)>>2)];
      var $memerrmsg=(($3+160)|0);
      var $4=HEAP32[(($memerrmsg)>>2)];
      $x_=$4;
      var $5=$x_;
      var $6=$5;
      var $7=$io;
      var $value_=(($7)|0);
      var $gc=$value_;
      HEAP32[(($gc)>>2)]=$6;
      var $8=$x_;
      var $tsv=$8;
      var $tt=(($tsv+4)|0);
      var $9=HEAP8[($tt)];
      var $conv=(($9)&255);
      var $or=$conv | 64;
      var $10=$io;
      var $tt_=(($10+8)|0);
      HEAP32[(($tt_)>>2)]=$or;
      label = 6; break;
    case 4: 
      var $11=$oldtop_addr;
      $io2=$11;
      var $12=$L_addr;
      var $call=_luaS_newlstr($12, ((5245732)|0), 23);
      $x_3=$call;
      var $13=$x_3;
      var $14=$13;
      var $15=$io2;
      var $value_4=(($15)|0);
      var $gc5=$value_4;
      HEAP32[(($gc5)>>2)]=$14;
      var $16=$x_3;
      var $tsv6=$16;
      var $tt7=(($tsv6+4)|0);
      var $17=HEAP8[($tt7)];
      var $conv8=(($17)&255);
      var $or9=$conv8 | 64;
      var $18=$io2;
      var $tt_10=(($18+8)|0);
      HEAP32[(($tt_10)>>2)]=$or9;
      label = 6; break;
    case 5: 
      var $19=$L_addr;
      var $top=(($19+8)|0);
      var $20=HEAP32[(($top)>>2)];
      var $add_ptr=((($20)-(12))|0);
      $io211=$add_ptr;
      var $21=$oldtop_addr;
      $io1=$21;
      var $22=$io1;
      var $value_12=(($22)|0);
      var $23=$io211;
      var $value_13=(($23)|0);
      var $24=$value_12;
      var $25=$value_13;
      HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];
      var $26=$io211;
      var $tt_14=(($26+8)|0);
      var $27=HEAP32[(($tt_14)>>2)];
      var $28=$io1;
      var $tt_15=(($28+8)|0);
      HEAP32[(($tt_15)>>2)]=$27;
      label = 6; break;
    case 6: 
      var $29=$oldtop_addr;
      var $add_ptr16=(($29+12)|0);
      var $30=$L_addr;
      var $top17=(($30+8)|0);
      HEAP32[(($top17)>>2)]=$add_ptr16;

      return;
  }

}
_seterrorobj["X"]=1;

function _luaD_pcall($L, $func, $u, $old_top, $ef) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $func_addr;
      var $u_addr;
      var $old_top_addr;
      var $ef_addr;
      var $status;
      var $old_ci;
      var $old_allowhooks;
      var $old_nny;
      var $old_errfunc;
      var $oldtop;
      $L_addr=$L;
      $func_addr=$func;
      $u_addr=$u;
      $old_top_addr=$old_top;
      $ef_addr=$ef;
      var $0=$L_addr;
      var $ci=(($0+16)|0);
      var $1=HEAP32[(($ci)>>2)];
      $old_ci=$1;
      var $2=$L_addr;
      var $allowhook=(($2+41)|0);
      var $3=HEAP8[($allowhook)];
      $old_allowhooks=$3;
      var $4=$L_addr;
      var $nny=(($4+36)|0);
      var $5=HEAP16[(($nny)>>1)];
      $old_nny=$5;
      var $6=$L_addr;
      var $errfunc=(($6+68)|0);
      var $7=HEAP32[(($errfunc)>>2)];
      $old_errfunc=$7;
      var $8=$ef_addr;
      var $9=$L_addr;
      var $errfunc1=(($9+68)|0);
      HEAP32[(($errfunc1)>>2)]=$8;
      var $10=$L_addr;
      var $11=$func_addr;
      var $12=$u_addr;
      var $call=_luaD_rawrunprotected($10, $11, $12);
      $status=$call;
      var $13=$status;
      var $cmp=(($13)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=$L_addr;
      var $stack=(($14+28)|0);
      var $15=HEAP32[(($stack)>>2)];
      var $16=$15;
      var $17=$old_top_addr;
      var $add_ptr=(($16+$17)|0);
      var $18=$add_ptr;
      $oldtop=$18;
      var $19=$L_addr;
      var $20=$oldtop;
      _luaF_close($19, $20);
      var $21=$L_addr;
      var $22=$status;
      var $23=$oldtop;
      _seterrorobj($21, $22, $23);
      var $24=$old_ci;
      var $25=$L_addr;
      var $ci2=(($25+16)|0);
      HEAP32[(($ci2)>>2)]=$24;
      var $26=$old_allowhooks;
      var $27=$L_addr;
      var $allowhook3=(($27+41)|0);
      HEAP8[($allowhook3)]=$26;
      var $28=$old_nny;
      var $29=$L_addr;
      var $nny4=(($29+36)|0);
      HEAP16[(($nny4)>>1)]=$28;
      var $30=$L_addr;
      _luaD_shrinkstack($30);
      label = 4; break;
    case 4: 
      var $31=$old_errfunc;
      var $32=$L_addr;
      var $errfunc5=(($32+68)|0);
      HEAP32[(($errfunc5)>>2)]=$31;
      var $33=$status;

      return $33;
  }

}
_luaD_pcall["X"]=1;

function _luaD_protectedparser($L, $z, $name, $mode) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; _memset(__stackBase__, 0, 60);

  var $L_addr;
  var $z_addr;
  var $name_addr;
  var $mode_addr;
  var $p=__stackBase__;
  var $status;
  $L_addr=$L;
  $z_addr=$z;
  $name_addr=$name;
  $mode_addr=$mode;
  var $0=$L_addr;
  var $nny=(($0+36)|0);
  var $1=HEAP16[(($nny)>>1)];
  var $inc=((($1)+(1))&65535);
  HEAP16[(($nny)>>1)]=$inc;
  var $2=$z_addr;
  var $z1=(($p)|0);
  HEAP32[(($z1)>>2)]=$2;
  var $3=$name_addr;
  var $name2=(($p+56)|0);
  HEAP32[(($name2)>>2)]=$3;
  var $4=$mode_addr;
  var $mode3=(($p+52)|0);
  HEAP32[(($mode3)>>2)]=$4;
  var $dyd=(($p+16)|0);
  var $actvar=(($dyd)|0);
  var $arr=(($actvar)|0);
  HEAP32[(($arr)>>2)]=0;
  var $dyd4=(($p+16)|0);
  var $actvar5=(($dyd4)|0);
  var $size=(($actvar5+8)|0);
  HEAP32[(($size)>>2)]=0;
  var $dyd6=(($p+16)|0);
  var $gt=(($dyd6+12)|0);
  var $arr7=(($gt)|0);
  HEAP32[(($arr7)>>2)]=0;
  var $dyd8=(($p+16)|0);
  var $gt9=(($dyd8+12)|0);
  var $size10=(($gt9+8)|0);
  HEAP32[(($size10)>>2)]=0;
  var $dyd11=(($p+16)|0);
  var $label=(($dyd11+24)|0);
  var $arr12=(($label)|0);
  HEAP32[(($arr12)>>2)]=0;
  var $dyd13=(($p+16)|0);
  var $label14=(($dyd13+24)|0);
  var $size15=(($label14+8)|0);
  HEAP32[(($size15)>>2)]=0;
  var $buff=(($p+4)|0);
  var $buffer=(($buff)|0);
  HEAP32[(($buffer)>>2)]=0;
  var $buff16=(($p+4)|0);
  var $buffsize=(($buff16+8)|0);
  HEAP32[(($buffsize)>>2)]=0;
  var $5=$L_addr;
  var $6=$p;
  var $7=$L_addr;
  var $top=(($7+8)|0);
  var $8=HEAP32[(($top)>>2)];
  var $9=$8;
  var $10=$L_addr;
  var $stack=(($10+28)|0);
  var $11=HEAP32[(($stack)>>2)];
  var $12=$11;
  var $sub_ptr_lhs_cast=$9;
  var $sub_ptr_rhs_cast=$12;
  var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
  var $13=$L_addr;
  var $errfunc=(($13+68)|0);
  var $14=HEAP32[(($errfunc)>>2)];
  var $call=_luaD_pcall($5, 120, $6, $sub_ptr_sub, $14);
  $status=$call;
  var $15=$L_addr;
  var $buff17=(($p+4)|0);
  var $buffer18=(($buff17)|0);
  var $16=HEAP32[(($buffer18)>>2)];
  var $buff19=(($p+4)|0);
  var $buffsize20=(($buff19+8)|0);
  var $17=HEAP32[(($buffsize20)>>2)];
  var $mul=$17;
  var $call21=_luaM_realloc_($15, $16, $mul, 0);
  var $buff22=(($p+4)|0);
  var $buffer23=(($buff22)|0);
  HEAP32[(($buffer23)>>2)]=$call21;
  var $buff24=(($p+4)|0);
  var $buffsize25=(($buff24+8)|0);
  HEAP32[(($buffsize25)>>2)]=0;
  var $18=$L_addr;
  var $dyd26=(($p+16)|0);
  var $actvar27=(($dyd26)|0);
  var $arr28=(($actvar27)|0);
  var $19=HEAP32[(($arr28)>>2)];
  var $20=$19;
  var $dyd29=(($p+16)|0);
  var $actvar30=(($dyd29)|0);
  var $size31=(($actvar30+8)|0);
  var $21=HEAP32[(($size31)>>2)];
  var $mul32=($21<<1);
  var $call33=_luaM_realloc_($18, $20, $mul32, 0);
  var $22=$L_addr;
  var $dyd34=(($p+16)|0);
  var $gt35=(($dyd34+12)|0);
  var $arr36=(($gt35)|0);
  var $23=HEAP32[(($arr36)>>2)];
  var $24=$23;
  var $dyd37=(($p+16)|0);
  var $gt38=(($dyd37+12)|0);
  var $size39=(($gt38+8)|0);
  var $25=HEAP32[(($size39)>>2)];
  var $mul40=($25<<4);
  var $call41=_luaM_realloc_($22, $24, $mul40, 0);
  var $26=$L_addr;
  var $dyd42=(($p+16)|0);
  var $label43=(($dyd42+24)|0);
  var $arr44=(($label43)|0);
  var $27=HEAP32[(($arr44)>>2)];
  var $28=$27;
  var $dyd45=(($p+16)|0);
  var $label46=(($dyd45+24)|0);
  var $size47=(($label46+8)|0);
  var $29=HEAP32[(($size47)>>2)];
  var $mul48=($29<<4);
  var $call49=_luaM_realloc_($26, $28, $mul48, 0);
  var $30=$L_addr;
  var $nny50=(($30+36)|0);
  var $31=HEAP16[(($nny50)>>1)];
  var $dec=((($31)-(1))&65535);
  HEAP16[(($nny50)>>1)]=$dec;
  var $32=$status;
  STACKTOP = __stackBase__;
  return $32;
}
_luaD_protectedparser["X"]=1;

function _f_parser($L, $ud) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $ud_addr;
      var $i;
      var $cl;
      var $p;
      var $c;
      var $up;
      $L_addr=$L;
      $ud_addr=$ud;
      var $0=$ud_addr;
      var $1=$0;
      $p=$1;
      var $2=$p;
      var $z=(($2)|0);
      var $3=HEAP32[(($z)>>2)];
      var $n=(($3)|0);
      var $4=HEAP32[(($n)>>2)];
      var $dec=((($4)-(1))|0);
      HEAP32[(($n)>>2)]=$dec;
      var $cmp=(($4)>>>0) > 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$p;
      var $z1=(($5)|0);
      var $6=HEAP32[(($z1)>>2)];
      var $p2=(($6+4)|0);
      var $7=HEAP32[(($p2)>>2)];
      var $incdec_ptr=(($7+1)|0);
      HEAP32[(($p2)>>2)]=$incdec_ptr;
      var $8=HEAP8[($7)];
      var $conv=(($8)&255);
      var $cond = $conv;label = 5; break;
    case 4: 
      var $9=$p;
      var $z3=(($9)|0);
      var $10=HEAP32[(($z3)>>2)];
      var $call=_luaZ_fill($10);
      var $cond = $call;label = 5; break;
    case 5: 
      var $cond;
      $c=$cond;
      var $11=$c;
      var $12=HEAP8[((((5247808)|0))|0)];
      var $conv4=(($12 << 24) >> 24);
      var $cmp5=(($11)|0)==(($conv4)|0);
      if ($cmp5) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $13=$L_addr;
      var $14=$p;
      var $mode=(($14+52)|0);
      var $15=HEAP32[(($mode)>>2)];
      _checkmode($13, $15, ((5246792)|0));
      var $16=$L_addr;
      var $17=$p;
      var $z7=(($17)|0);
      var $18=HEAP32[(($z7)>>2)];
      var $19=$p;
      var $buff=(($19+4)|0);
      var $20=$p;
      var $name=(($20+56)|0);
      var $21=HEAP32[(($name)>>2)];
      var $call8=_luaU_undump($16, $18, $buff, $21);
      $cl=$call8;
      label = 8; break;
    case 7: 
      var $22=$L_addr;
      var $23=$p;
      var $mode9=(($23+52)|0);
      var $24=HEAP32[(($mode9)>>2)];
      _checkmode($22, $24, ((5246520)|0));
      var $25=$L_addr;
      var $26=$p;
      var $z10=(($26)|0);
      var $27=HEAP32[(($z10)>>2)];
      var $28=$p;
      var $buff11=(($28+4)|0);
      var $29=$p;
      var $dyd=(($29+16)|0);
      var $30=$p;
      var $name12=(($30+56)|0);
      var $31=HEAP32[(($name12)>>2)];
      var $32=$c;
      var $call13=_luaY_parser($25, $27, $buff11, $dyd, $31, $32);
      $cl=$call13;
      label = 8; break;
    case 8: 
      $i=0;
      label = 9; break;
    case 9: 
      var $33=$i;
      var $34=$cl;
      var $l=$34;
      var $nupvalues=(($l+6)|0);
      var $35=HEAP8[($nupvalues)];
      var $conv14=(($35)&255);
      var $cmp15=(($33)|0) < (($conv14)|0);
      if ($cmp15) { label = 10; break; } else { label = 15; break; }
    case 10: 
      var $36=$L_addr;
      var $call17=_luaF_newupval($36);
      $up=$call17;
      var $37=$up;
      var $38=$i;
      var $39=$cl;
      var $l18=$39;
      var $upvals=(($l18+16)|0);
      var $arrayidx=(($upvals+($38<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$37;
      var $40=$up;
      var $41=$40;
      var $gch=$41;
      var $marked=(($gch+5)|0);
      var $42=HEAP8[($marked)];
      var $conv19=(($42)&255);
      var $and=$conv19 & 3;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $43=$cl;
      var $44=$43;
      var $gch20=$44;
      var $marked21=(($gch20+5)|0);
      var $45=HEAP8[($marked21)];
      var $conv22=(($45)&255);
      var $and23=$conv22 & 4;
      var $tobool24=(($and23)|0)!=0;
      if ($tobool24) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $46=$L_addr;
      var $47=$cl;
      var $48=$47;
      var $49=$up;
      var $50=$49;
      _luaC_barrier_($46, $48, $50);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $51=$i;
      var $inc=((($51)+(1))|0);
      $i=$inc;
      label = 9; break;
    case 15: 

      return;
  }

}
_f_parser["X"]=1;

function _finishCcall($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $ci;
      var $n;
      $L_addr=$L;
      var $0=$L_addr;
      var $ci1=(($0+16)|0);
      var $1=HEAP32[(($ci1)>>2)];
      $ci=$1;
      var $2=$ci;
      var $nresults=(($2+16)|0);
      var $3=HEAP16[(($nresults)>>1)];
      var $conv=(($3 << 16) >> 16);
      var $cmp=(($conv)|0)==-1;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $4=$L_addr;
      var $ci3=(($4+16)|0);
      var $5=HEAP32[(($ci3)>>2)];
      var $top=(($5+4)|0);
      var $6=HEAP32[(($top)>>2)];
      var $7=$L_addr;
      var $top4=(($7+8)|0);
      var $8=HEAP32[(($top4)>>2)];
      var $cmp5=(($6)>>>0) < (($8)>>>0);
      if ($cmp5) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $9=$L_addr;
      var $top7=(($9+8)|0);
      var $10=HEAP32[(($top7)>>2)];
      var $11=$L_addr;
      var $ci8=(($11+16)|0);
      var $12=HEAP32[(($ci8)>>2)];
      var $top9=(($12+4)|0);
      HEAP32[(($top9)>>2)]=$10;
      label = 5; break;
    case 5: 
      var $13=$ci;
      var $callstatus=(($13+18)|0);
      var $14=HEAP8[($callstatus)];
      var $conv10=(($14)&255);
      var $and=$conv10 & 32;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $15=$ci;
      var $u=(($15+24)|0);
      var $c=$u;
      var $status=(($c+13)|0);
      HEAP8[($status)]=1;
      label = 7; break;
    case 7: 
      var $16=$ci;
      var $callstatus13=(($16+18)|0);
      var $17=HEAP8[($callstatus13)];
      var $conv14=(($17)&255);
      var $and15=$conv14 & -49;
      var $or=$and15 | 8;
      var $conv16=(($or) & 255);
      var $18=$ci;
      var $callstatus17=(($18+18)|0);
      HEAP8[($callstatus17)]=$conv16;
      var $19=$ci;
      var $u18=(($19+24)|0);
      var $c19=$u18;
      var $k=(($c19+4)|0);
      var $20=HEAP32[(($k)>>2)];
      var $21=$L_addr;
      var $call=FUNCTION_TABLE[$20]($21);
      $n=$call;
      var $22=$L_addr;
      var $23=$L_addr;
      var $top20=(($23+8)|0);
      var $24=HEAP32[(($top20)>>2)];
      var $25=$n;
      var $idx_neg=(((-$25))|0);
      var $add_ptr=(($24+((($idx_neg)*(12))&-1))|0);
      var $call21=_luaD_poscall($22, $add_ptr);

      return;
  }

}
_finishCcall["X"]=1;

function _luaU_dump($L, $f, $w, $data, $strip) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; _memset(__stackBase__, 0, 20);

  var $L_addr;
  var $f_addr;
  var $w_addr;
  var $data_addr;
  var $strip_addr;
  var $D=__stackBase__;
  $L_addr=$L;
  $f_addr=$f;
  $w_addr=$w;
  $data_addr=$data;
  $strip_addr=$strip;
  var $0=$L_addr;
  var $L1=(($D)|0);
  HEAP32[(($L1)>>2)]=$0;
  var $1=$w_addr;
  var $writer=(($D+4)|0);
  HEAP32[(($writer)>>2)]=$1;
  var $2=$data_addr;
  var $data2=(($D+8)|0);
  HEAP32[(($data2)>>2)]=$2;
  var $3=$strip_addr;
  var $strip3=(($D+12)|0);
  HEAP32[(($strip3)>>2)]=$3;
  var $status=(($D+16)|0);
  HEAP32[(($status)>>2)]=0;
  _DumpHeader($D);
  var $4=$f_addr;
  _DumpFunction($4, $D);
  var $status4=(($D+16)|0);
  var $5=HEAP32[(($status4)>>2)];
  STACKTOP = __stackBase__;
  return $5;
}


function _DumpHeader($D) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; _memset(__stackBase__, 0, 20);

  var $D_addr;
  var $h=__stackBase__;
  $D_addr=$D;
  var $arraydecay=(($h)|0);
  _luaU_header($arraydecay);
  var $arraydecay1=(($h)|0);
  var $0=$D_addr;
  _DumpBlock($arraydecay1, 18, $0);
  STACKTOP = __stackBase__;
  return;
}


function _DumpFunction($f, $D) {
  var label = 0;


  var $f_addr;
  var $D_addr;
  $f_addr=$f;
  $D_addr=$D;
  var $0=$f_addr;
  var $linedefined=(($0+64)|0);
  var $1=HEAP32[(($linedefined)>>2)];
  var $2=$D_addr;
  _DumpInt($1, $2);
  var $3=$f_addr;
  var $lastlinedefined=(($3+68)|0);
  var $4=HEAP32[(($lastlinedefined)>>2)];
  var $5=$D_addr;
  _DumpInt($4, $5);
  var $6=$f_addr;
  var $numparams=(($6+76)|0);
  var $7=HEAP8[($numparams)];
  var $conv=(($7)&255);
  var $8=$D_addr;
  _DumpChar($conv, $8);
  var $9=$f_addr;
  var $is_vararg=(($9+77)|0);
  var $10=HEAP8[($is_vararg)];
  var $conv1=(($10)&255);
  var $11=$D_addr;
  _DumpChar($conv1, $11);
  var $12=$f_addr;
  var $maxstacksize=(($12+78)|0);
  var $13=HEAP8[($maxstacksize)];
  var $conv2=(($13)&255);
  var $14=$D_addr;
  _DumpChar($conv2, $14);
  var $15=$f_addr;
  var $code=(($15+12)|0);
  var $16=HEAP32[(($code)>>2)];
  var $17=$16;
  var $18=$f_addr;
  var $sizecode=(($18+48)|0);
  var $19=HEAP32[(($sizecode)>>2)];
  var $20=$D_addr;
  _DumpVector($17, $19, 4, $20);
  var $21=$f_addr;
  var $22=$D_addr;
  _DumpConstants($21, $22);
  var $23=$f_addr;
  var $24=$D_addr;
  _DumpUpvalues($23, $24);
  var $25=$f_addr;
  var $26=$D_addr;
  _DumpDebug($25, $26);

  return;
}
_DumpFunction["X"]=1;

function _DumpInt($x, $D) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);

  var $x_addr=__stackBase__;
  var $D_addr;
  HEAP32[(($x_addr)>>2)]=$x;
  $D_addr=$D;
  var $0=$x_addr;
  var $1=$D_addr;
  _DumpBlock($0, 4, $1);
  STACKTOP = __stackBase__;
  return;
}


function _DumpChar($y, $D) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);

  var $y_addr;
  var $D_addr;
  var $x=__stackBase__;
  $y_addr=$y;
  $D_addr=$D;
  var $0=$y_addr;
  var $conv=(($0) & 255);
  HEAP8[($x)]=$conv;
  var $1=$D_addr;
  _DumpBlock($x, 1, $1);
  STACKTOP = __stackBase__;
  return;
}


function _DumpVector($b, $n, $size, $D) {
  var label = 0;


  var $b_addr;
  var $n_addr;
  var $size_addr;
  var $D_addr;
  $b_addr=$b;
  $n_addr=$n;
  $size_addr=$size;
  $D_addr=$D;
  var $0=$n_addr;
  var $1=$D_addr;
  _DumpInt($0, $1);
  var $2=$b_addr;
  var $3=$n_addr;
  var $4=$size_addr;
  var $mul=Math.imul($3,$4);
  var $5=$D_addr;
  _DumpBlock($2, $mul, $5);

  return;
}


function _lua_yieldk($L, $nresults, $ctx, $k) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $nresults_addr;
      var $ctx_addr;
      var $k_addr;
      var $ci;
      $L_addr=$L;
      $nresults_addr=$nresults;
      $ctx_addr=$ctx;
      $k_addr=$k;
      var $0=$L_addr;
      var $ci1=(($0+16)|0);
      var $1=HEAP32[(($ci1)>>2)];
      $ci=$1;
      var $2=$L_addr;
      var $3=$L_addr;
      var $nny=(($3+36)|0);
      var $4=HEAP16[(($nny)>>1)];
      var $conv=(($4)&65535);
      var $cmp=(($conv)|0) > 0;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $5=$L_addr;
      var $6=$L_addr;
      var $l_G=(($6+12)|0);
      var $7=HEAP32[(($l_G)>>2)];
      var $mainthread=(($7+152)|0);
      var $8=HEAP32[(($mainthread)>>2)];
      var $cmp3=(($5)|0)!=(($8)|0);
      if ($cmp3) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $9=$L_addr;
      _luaG_runerror($9, ((5250844)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));

    case 5: 
      var $10=$L_addr;
      _luaG_runerror($10, ((5249048)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));

    case 6: 
      var $11=$L_addr;
      var $status=(($11+6)|0);
      HEAP8[($status)]=1;
      var $12=$ci;
      var $func=(($12)|0);
      var $13=HEAP32[(($func)>>2)];
      var $14=$13;
      var $15=$L_addr;
      var $stack=(($15+28)|0);
      var $16=HEAP32[(($stack)>>2)];
      var $17=$16;
      var $sub_ptr_lhs_cast=$14;
      var $sub_ptr_rhs_cast=$17;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $18=$ci;
      var $extra=(($18+20)|0);
      HEAP32[(($extra)>>2)]=$sub_ptr_sub;
      var $19=$ci;
      var $callstatus=(($19+18)|0);
      var $20=HEAP8[($callstatus)];
      var $conv6=(($20)&255);
      var $and=$conv6 & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 11; break;
    case 8: 
      var $21=$k_addr;
      var $22=$ci;
      var $u=(($22+24)|0);
      var $c=$u;
      var $k9=(($c+4)|0);
      HEAP32[(($k9)>>2)]=$21;
      var $cmp10=(($21)|0)!=0;
      if ($cmp10) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $23=$ctx_addr;
      var $24=$ci;
      var $u13=(($24+24)|0);
      var $c14=$u13;
      var $ctx15=(($c14)|0);
      HEAP32[(($ctx15)>>2)]=$23;
      label = 10; break;
    case 10: 
      var $25=$L_addr;
      var $top=(($25+8)|0);
      var $26=HEAP32[(($top)>>2)];
      var $27=$nresults_addr;
      var $idx_neg=(((-$27))|0);
      var $add_ptr=(($26+((($idx_neg)*(12))&-1))|0);
      var $add_ptr17=((($add_ptr)-(12))|0);
      var $28=$ci;
      var $func18=(($28)|0);
      HEAP32[(($func18)>>2)]=$add_ptr17;
      var $29=$L_addr;
      _luaD_throw($29, 1);

    case 11: 
      STACKTOP = __stackBase__;
      return 0;
  }

}
_lua_yieldk["X"]=1;

function _checkmode($L, $mode, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $mode_addr;
      var $x_addr;
      $L_addr=$L;
      $mode_addr=$mode;
      $x_addr=$x;
      var $0=$mode_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $1=$mode_addr;
      var $2=$x_addr;
      var $arrayidx=(($2)|0);
      var $3=HEAP8[($arrayidx)];
      var $conv=(($3 << 24) >> 24);
      var $call=_strchr($1, $conv);
      var $cmp=(($call)|0)==0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$L_addr;
      var $5=$x_addr;
      var $6=$mode_addr;
      var $call2=_luaO_pushfstring($4, ((5246056)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempInt)>>2)]=$5,HEAP32[(((tempInt)+(4))>>2)]=$6,tempInt));
      var $7=$L_addr;
      _luaD_throw($7, 3);

    case 5: 
      STACKTOP = __stackBase__;
      return;
  }

}


function _resume_error($L, $msg, $firstArg) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $msg_addr;
      var $firstArg_addr;
      var $io;
      var $x_;
      $L_addr=$L;
      $msg_addr=$msg;
      $firstArg_addr=$firstArg;
      var $0=$firstArg_addr;
      var $1=$L_addr;
      var $top=(($1+8)|0);
      HEAP32[(($top)>>2)]=$0;
      var $2=$L_addr;
      var $top1=(($2+8)|0);
      var $3=HEAP32[(($top1)>>2)];
      $io=$3;
      var $4=$L_addr;
      var $5=$msg_addr;
      var $call=_luaS_new($4, $5);
      $x_=$call;
      var $6=$x_;
      var $7=$6;
      var $8=$io;
      var $value_=(($8)|0);
      var $gc=$value_;
      HEAP32[(($gc)>>2)]=$7;
      var $9=$x_;
      var $tsv=$9;
      var $tt=(($tsv+4)|0);
      var $10=HEAP8[($tt)];
      var $conv=(($10)&255);
      var $or=$conv | 64;
      var $11=$io;
      var $tt_=(($11+8)|0);
      HEAP32[(($tt_)>>2)]=$or;
      var $12=$L_addr;
      var $top2=(($12+8)|0);
      var $13=HEAP32[(($top2)>>2)];
      var $incdec_ptr=(($13+12)|0);
      HEAP32[(($top2)>>2)]=$incdec_ptr;
      var $14=$L_addr;
      var $stack_last=(($14+24)|0);
      var $15=HEAP32[(($stack_last)>>2)];
      var $16=$L_addr;
      var $top3=(($16+8)|0);
      var $17=HEAP32[(($top3)>>2)];
      var $sub_ptr_lhs_cast=$15;
      var $sub_ptr_rhs_cast=$17;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(12))&-1);
      var $cmp=(($sub_ptr_div)|0) <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $18=$L_addr;
      _luaD_growstack($18, 0);
      label = 5; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $19=$L_addr;
      _luaD_throw($19, -1);

    case 6: 

      return;
  }

}
_resume_error["X"]=1;

function _unlinkupval($uv) {
  var label = 0;


  var $uv_addr;
  $uv_addr=$uv;
  var $0=$uv_addr;
  var $u=(($0+12)|0);
  var $l=$u;
  var $prev=(($l)|0);
  var $1=HEAP32[(($prev)>>2)];
  var $2=$uv_addr;
  var $u1=(($2+12)|0);
  var $l2=$u1;
  var $next=(($l2+4)|0);
  var $3=HEAP32[(($next)>>2)];
  var $u3=(($3+12)|0);
  var $l4=$u3;
  var $prev5=(($l4)|0);
  HEAP32[(($prev5)>>2)]=$1;
  var $4=$uv_addr;
  var $u6=(($4+12)|0);
  var $l7=$u6;
  var $next8=(($l7+4)|0);
  var $5=HEAP32[(($next8)>>2)];
  var $6=$uv_addr;
  var $u9=(($6+12)|0);
  var $l10=$u9;
  var $prev11=(($l10)|0);
  var $7=HEAP32[(($prev11)>>2)];
  var $u12=(($7+12)|0);
  var $l13=$u12;
  var $next14=(($l13+4)|0);
  HEAP32[(($next14)>>2)]=$5;

  return;
}


function _DumpConstants($f, $D) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $f_addr;
      var $D_addr;
      var $i;
      var $n;
      var $o;
      $f_addr=$f;
      $D_addr=$D;
      var $0=$f_addr;
      var $sizek=(($0+44)|0);
      var $1=HEAP32[(($sizek)>>2)];
      $n=$1;
      var $2=$n;
      var $3=$D_addr;
      _DumpInt($2, $3);
      $i=0;
      label = 3; break;
    case 3: 
      var $4=$i;
      var $5=$n;
      var $cmp=(($4)|0) < (($5)|0);
      if ($cmp) { label = 4; break; } else { label = 12; break; }
    case 4: 
      var $6=$i;
      var $7=$f_addr;
      var $k=(($7+8)|0);
      var $8=HEAP32[(($k)>>2)];
      var $arrayidx=(($8+((($6)*(12))&-1))|0);
      $o=$arrayidx;
      var $9=$o;
      var $tt_=(($9+8)|0);
      var $10=HEAP32[(($tt_)>>2)];
      var $and=$10 & 15;
      var $11=$D_addr;
      _DumpChar($and, $11);
      var $12=$o;
      var $tt_1=(($12+8)|0);
      var $13=HEAP32[(($tt_1)>>2)];
      var $and2=$13 & 15;
      if ((($and2)|0)==0) {
        label = 5; break;
      }
      else if ((($and2)|0)==1) {
        label = 6; break;
      }
      else if ((($and2)|0)==3) {
        label = 7; break;
      }
      else if ((($and2)|0)==4) {
        label = 8; break;
      }
      else {
      label = 9; break;
      }
      
    case 5: 
      label = 10; break;
    case 6: 
      var $14=$o;
      var $value_=(($14)|0);
      var $b=$value_;
      var $15=HEAP32[(($b)>>2)];
      var $16=$D_addr;
      _DumpChar($15, $16);
      label = 10; break;
    case 7: 
      var $17=$o;
      var $value_5=(($17)|0);
      var $n6=$value_5;
      var $18=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n6)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n6)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $19=$D_addr;
      _DumpNumber($18, $19);
      label = 10; break;
    case 8: 
      var $20=$o;
      var $value_8=(($20)|0);
      var $gc=$value_8;
      var $21=HEAP32[(($gc)>>2)];
      var $ts=$21;
      var $22=$D_addr;
      _DumpString($ts, $22);
      label = 10; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $23=$i;
      var $inc=((($23)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 12: 
      var $24=$f_addr;
      var $sizep=(($24+56)|0);
      var $25=HEAP32[(($sizep)>>2)];
      $n=$25;
      var $26=$n;
      var $27=$D_addr;
      _DumpInt($26, $27);
      $i=0;
      label = 13; break;
    case 13: 
      var $28=$i;
      var $29=$n;
      var $cmp10=(($28)|0) < (($29)|0);
      if ($cmp10) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $30=$i;
      var $31=$f_addr;
      var $p=(($31+16)|0);
      var $32=HEAP32[(($p)>>2)];
      var $arrayidx12=(($32+($30<<2))|0);
      var $33=HEAP32[(($arrayidx12)>>2)];
      var $34=$D_addr;
      _DumpFunction($33, $34);
      label = 15; break;
    case 15: 
      var $35=$i;
      var $inc14=((($35)+(1))|0);
      $i=$inc14;
      label = 13; break;
    case 16: 

      return;
  }

}
_DumpConstants["X"]=1;

function _DumpUpvalues($f, $D) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $f_addr;
      var $D_addr;
      var $i;
      var $n;
      $f_addr=$f;
      $D_addr=$D;
      var $0=$f_addr;
      var $sizeupvalues=(($0+40)|0);
      var $1=HEAP32[(($sizeupvalues)>>2)];
      $n=$1;
      var $2=$n;
      var $3=$D_addr;
      _DumpInt($2, $3);
      $i=0;
      label = 3; break;
    case 3: 
      var $4=$i;
      var $5=$n;
      var $cmp=(($4)|0) < (($5)|0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $6=$i;
      var $7=$f_addr;
      var $upvalues=(($7+28)|0);
      var $8=HEAP32[(($upvalues)>>2)];
      var $arrayidx=(($8+($6<<3))|0);
      var $instack=(($arrayidx+4)|0);
      var $9=HEAP8[($instack)];
      var $conv=(($9)&255);
      var $10=$D_addr;
      _DumpChar($conv, $10);
      var $11=$i;
      var $12=$f_addr;
      var $upvalues1=(($12+28)|0);
      var $13=HEAP32[(($upvalues1)>>2)];
      var $arrayidx2=(($13+($11<<3))|0);
      var $idx=(($arrayidx2+5)|0);
      var $14=HEAP8[($idx)];
      var $conv3=(($14)&255);
      var $15=$D_addr;
      _DumpChar($conv3, $15);
      label = 5; break;
    case 5: 
      var $16=$i;
      var $inc=((($16)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 

      return;
  }

}


function _DumpDebug($f, $D) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $f_addr;
      var $D_addr;
      var $i;
      var $n;
      $f_addr=$f;
      $D_addr=$D;
      var $0=$D_addr;
      var $strip=(($0+12)|0);
      var $1=HEAP32[(($strip)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $cond = 0;label = 5; break;
    case 4: 
      var $2=$f_addr;
      var $source=(($2+36)|0);
      var $3=HEAP32[(($source)>>2)];
      var $cond = $3;label = 5; break;
    case 5: 
      var $cond;
      var $4=$D_addr;
      _DumpString($cond, $4);
      var $5=$D_addr;
      var $strip1=(($5+12)|0);
      var $6=HEAP32[(($strip1)>>2)];
      var $tobool2=(($6)|0)!=0;
      if ($tobool2) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $cond6 = 0;label = 8; break;
    case 7: 
      var $7=$f_addr;
      var $sizelineinfo=(($7+52)|0);
      var $8=HEAP32[(($sizelineinfo)>>2)];
      var $cond6 = $8;label = 8; break;
    case 8: 
      var $cond6;
      $n=$cond6;
      var $9=$f_addr;
      var $lineinfo=(($9+20)|0);
      var $10=HEAP32[(($lineinfo)>>2)];
      var $11=$10;
      var $12=$n;
      var $13=$D_addr;
      _DumpVector($11, $12, 4, $13);
      var $14=$D_addr;
      var $strip7=(($14+12)|0);
      var $15=HEAP32[(($strip7)>>2)];
      var $tobool8=(($15)|0)!=0;
      if ($tobool8) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $cond12 = 0;label = 11; break;
    case 10: 
      var $16=$f_addr;
      var $sizelocvars=(($16+60)|0);
      var $17=HEAP32[(($sizelocvars)>>2)];
      var $cond12 = $17;label = 11; break;
    case 11: 
      var $cond12;
      $n=$cond12;
      var $18=$n;
      var $19=$D_addr;
      _DumpInt($18, $19);
      $i=0;
      label = 12; break;
    case 12: 
      var $20=$i;
      var $21=$n;
      var $cmp=(($20)|0) < (($21)|0);
      if ($cmp) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $22=$i;
      var $23=$f_addr;
      var $locvars=(($23+24)|0);
      var $24=HEAP32[(($locvars)>>2)];
      var $arrayidx=(($24+((($22)*(12))&-1))|0);
      var $varname=(($arrayidx)|0);
      var $25=HEAP32[(($varname)>>2)];
      var $26=$D_addr;
      _DumpString($25, $26);
      var $27=$i;
      var $28=$f_addr;
      var $locvars13=(($28+24)|0);
      var $29=HEAP32[(($locvars13)>>2)];
      var $arrayidx14=(($29+((($27)*(12))&-1))|0);
      var $startpc=(($arrayidx14+4)|0);
      var $30=HEAP32[(($startpc)>>2)];
      var $31=$D_addr;
      _DumpInt($30, $31);
      var $32=$i;
      var $33=$f_addr;
      var $locvars15=(($33+24)|0);
      var $34=HEAP32[(($locvars15)>>2)];
      var $arrayidx16=(($34+((($32)*(12))&-1))|0);
      var $endpc=(($arrayidx16+8)|0);
      var $35=HEAP32[(($endpc)>>2)];
      var $36=$D_addr;
      _DumpInt($35, $36);
      label = 14; break;
    case 14: 
      var $37=$i;
      var $inc=((($37)+(1))|0);
      $i=$inc;
      label = 12; break;
    case 15: 
      var $38=$D_addr;
      var $strip17=(($38+12)|0);
      var $39=HEAP32[(($strip17)>>2)];
      var $tobool18=(($39)|0)!=0;
      if ($tobool18) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $cond22 = 0;label = 18; break;
    case 17: 
      var $40=$f_addr;
      var $sizeupvalues=(($40+40)|0);
      var $41=HEAP32[(($sizeupvalues)>>2)];
      var $cond22 = $41;label = 18; break;
    case 18: 
      var $cond22;
      $n=$cond22;
      var $42=$n;
      var $43=$D_addr;
      _DumpInt($42, $43);
      $i=0;
      label = 19; break;
    case 19: 
      var $44=$i;
      var $45=$n;
      var $cmp24=(($44)|0) < (($45)|0);
      if ($cmp24) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $46=$i;
      var $47=$f_addr;
      var $upvalues=(($47+28)|0);
      var $48=HEAP32[(($upvalues)>>2)];
      var $arrayidx26=(($48+($46<<3))|0);
      var $name=(($arrayidx26)|0);
      var $49=HEAP32[(($name)>>2)];
      var $50=$D_addr;
      _DumpString($49, $50);
      label = 21; break;
    case 21: 
      var $51=$i;
      var $inc28=((($51)+(1))|0);
      $i=$inc28;
      label = 19; break;
    case 22: 

      return;
  }

}
_DumpDebug["X"]=1;

function _DumpString($s, $D) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; _memset(__stackBase__, 0, 8);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      var $D_addr;
      var $size=__stackBase__;
      var $size1=(__stackBase__)+(4);
      $s_addr=$s;
      $D_addr=$D;
      var $0=$s_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      HEAP32[(($size)>>2)]=0;
      var $1=$size;
      var $2=$D_addr;
      _DumpBlock($1, 4, $2);
      label = 5; break;
    case 4: 
      var $3=$s_addr;
      var $tsv=$3;
      var $len=(($tsv+12)|0);
      var $4=HEAP32[(($len)>>2)];
      var $add=((($4)+(1))|0);
      HEAP32[(($size1)>>2)]=$add;
      var $5=$size1;
      var $6=$D_addr;
      _DumpBlock($5, 4, $6);
      var $7=$s_addr;
      var $add_ptr=(($7+16)|0);
      var $8=$add_ptr;
      var $9=HEAP32[(($size1)>>2)];
      var $mul=$9;
      var $10=$D_addr;
      _DumpBlock($8, $mul, $10);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
  }

}


function _DumpBlock($b, $size, $D) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $b_addr;
      var $size_addr;
      var $D_addr;
      $b_addr=$b;
      $size_addr=$size;
      $D_addr=$D;
      var $0=$D_addr;
      var $status=(($0+16)|0);
      var $1=HEAP32[(($status)>>2)];
      var $cmp=(($1)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$D_addr;
      var $writer=(($2+4)|0);
      var $3=HEAP32[(($writer)>>2)];
      var $4=$D_addr;
      var $L=(($4)|0);
      var $5=HEAP32[(($L)>>2)];
      var $6=$b_addr;
      var $7=$size_addr;
      var $8=$D_addr;
      var $data=(($8+8)|0);
      var $9=HEAP32[(($data)>>2)];
      var $call=FUNCTION_TABLE[$3]($5, $6, $7, $9);
      var $10=$D_addr;
      var $status1=(($10+16)|0);
      HEAP32[(($status1)>>2)]=$call;
      label = 4; break;
    case 4: 

      return;
  }

}


function _DumpNumber($x, $D) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; _memset(__stackBase__, 0, 8);

  var $x_addr=__stackBase__;
  var $D_addr;
  (HEAPF64[(tempDoublePtr)>>3]=$x,HEAP32[(($x_addr)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x_addr)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  $D_addr=$D;
  var $0=$x_addr;
  var $1=$D_addr;
  _DumpBlock($0, 8, $1);
  STACKTOP = __stackBase__;
  return;
}


function _luaF_newCclosure($L, $n) {
  var label = 0;


  var $L_addr;
  var $n_addr;
  var $c;
  $L_addr=$L;
  $n_addr=$n;
  var $0=$L_addr;
  var $1=$n_addr;
  var $sub=((($1)-(1))|0);
  var $mul=((($sub)*(12))&-1);
  var $add=((($mul)+(28))|0);
  var $call=_luaC_newobj($0, 38, $add, 0, 0);
  var $cl=$call;
  $c=$cl;
  var $2=$n_addr;
  var $conv=(($2) & 255);
  var $3=$c;
  var $c1=$3;
  var $nupvalues=(($c1+6)|0);
  HEAP8[($nupvalues)]=$conv;
  var $4=$c;

  return $4;
}


function _luaF_newLclosure($L, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $n_addr;
      var $c;
      $L_addr=$L;
      $n_addr=$n;
      var $0=$L_addr;
      var $1=$n_addr;
      var $sub=((($1)-(1))|0);
      var $mul=($sub<<2);
      var $add=((($mul)+(20))|0);
      var $call=_luaC_newobj($0, 6, $add, 0, 0);
      var $cl=$call;
      $c=$cl;
      var $2=$c;
      var $l=$2;
      var $p=(($l+12)|0);
      HEAP32[(($p)>>2)]=0;
      var $3=$n_addr;
      var $conv=(($3) & 255);
      var $4=$c;
      var $l1=$4;
      var $nupvalues=(($l1+6)|0);
      HEAP8[($nupvalues)]=$conv;
      label = 3; break;
    case 3: 
      var $5=$n_addr;
      var $dec=((($5)-(1))|0);
      $n_addr=$dec;
      var $tobool=(($5)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $6=$n_addr;
      var $7=$c;
      var $l2=$7;
      var $upvals=(($l2+16)|0);
      var $arrayidx=(($upvals+($6<<2))|0);
      HEAP32[(($arrayidx)>>2)]=0;
      label = 3; break;
    case 5: 
      var $8=$c;

      return $8;
  }

}


function _luaF_newupval($L) {
  var label = 0;


  var $L_addr;
  var $uv;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_luaC_newobj($0, 10, 24, 0, 0);
  var $uv1=$call;
  $uv=$uv1;
  var $1=$uv;
  var $u=(($1+12)|0);
  var $value=$u;
  var $2=$uv;
  var $v=(($2+8)|0);
  HEAP32[(($v)>>2)]=$value;
  var $3=$uv;
  var $v2=(($3+8)|0);
  var $4=HEAP32[(($v2)>>2)];
  var $tt_=(($4+8)|0);
  HEAP32[(($tt_)>>2)]=0;
  var $5=$uv;

  return $5;
}


function _luaF_findupval($L, $level) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $level_addr;
      var $g;
      var $pp;
      var $p;
      var $uv;
      var $o;
      $L_addr=$L;
      $level_addr=$level;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      $g=$1;
      var $2=$L_addr;
      var $openupval=(($2+56)|0);
      $pp=$openupval;
      label = 3; break;
    case 3: 
      var $3=$pp;
      var $4=HEAP32[(($3)>>2)];
      var $cmp=(($4)|0)!=0;
      if ($cmp) { label = 4; break; } else { var $9 = 0;label = 5; break; }
    case 4: 
      var $5=$pp;
      var $6=HEAP32[(($5)>>2)];
      var $uv1=$6;
      $p=$uv1;
      var $v=(($uv1+8)|0);
      var $7=HEAP32[(($v)>>2)];
      var $8=$level_addr;
      var $cmp2=(($7)>>>0) >= (($8)>>>0);
      var $9 = $cmp2;label = 5; break;
    case 5: 
      var $9;
      if ($9) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $10=$p;
      var $11=$10;
      $o=$11;
      var $12=$p;
      var $v3=(($12+8)|0);
      var $13=HEAP32[(($v3)>>2)];
      var $14=$level_addr;
      var $cmp4=(($13)|0)==(($14)|0);
      if ($cmp4) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $15=$o;
      var $gch=$15;
      var $marked=(($gch+5)|0);
      var $16=HEAP8[($marked)];
      var $conv=(($16)&255);
      var $xor=$conv ^ 3;
      var $17=$g;
      var $currentwhite=(($17+52)|0);
      var $18=HEAP8[($currentwhite)];
      var $conv5=(($18)&255);
      var $xor6=$conv5 ^ 3;
      var $and=$xor & $xor6;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $19=$o;
      var $gch8=$19;
      var $marked9=(($gch8+5)|0);
      var $20=HEAP8[($marked9)];
      var $conv10=(($20)&255);
      var $xor11=$conv10 ^ 3;
      var $conv12=(($xor11) & 255);
      HEAP8[($marked9)]=$conv12;
      label = 9; break;
    case 9: 
      var $21=$p;
      $retval=$21;
      label = 12; break;
    case 10: 
      var $22=$o;
      var $gch14=$22;
      var $marked15=(($gch14+5)|0);
      var $23=HEAP8[($marked15)];
      var $conv16=(($23)&255);
      var $and17=$conv16 & 191;
      var $conv18=(($and17) & 255);
      HEAP8[($marked15)]=$conv18;
      var $24=$p;
      var $next=(($24)|0);
      $pp=$next;
      label = 3; break;
    case 11: 
      var $25=$L_addr;
      var $26=$pp;
      var $call=_luaC_newobj($25, 10, 24, $26, 0);
      var $uv19=$call;
      $uv=$uv19;
      var $27=$level_addr;
      var $28=$uv;
      var $v20=(($28+8)|0);
      HEAP32[(($v20)>>2)]=$27;
      var $29=$g;
      var $uvhead=(($29+100)|0);
      var $30=$uv;
      var $u=(($30+12)|0);
      var $l=$u;
      var $prev=(($l)|0);
      HEAP32[(($prev)>>2)]=$uvhead;
      var $31=$g;
      var $uvhead21=(($31+100)|0);
      var $u22=(($uvhead21+12)|0);
      var $l23=$u22;
      var $next24=(($l23+4)|0);
      var $32=HEAP32[(($next24)>>2)];
      var $33=$uv;
      var $u25=(($33+12)|0);
      var $l26=$u25;
      var $next27=(($l26+4)|0);
      HEAP32[(($next27)>>2)]=$32;
      var $34=$uv;
      var $35=$uv;
      var $u28=(($35+12)|0);
      var $l29=$u28;
      var $next30=(($l29+4)|0);
      var $36=HEAP32[(($next30)>>2)];
      var $u31=(($36+12)|0);
      var $l32=$u31;
      var $prev33=(($l32)|0);
      HEAP32[(($prev33)>>2)]=$34;
      var $37=$uv;
      var $38=$g;
      var $uvhead34=(($38+100)|0);
      var $u35=(($uvhead34+12)|0);
      var $l36=$u35;
      var $next37=(($l36+4)|0);
      HEAP32[(($next37)>>2)]=$37;
      var $39=$uv;
      $retval=$39;
      label = 12; break;
    case 12: 
      var $40=$retval;

      return $40;
  }

}
_luaF_findupval["X"]=1;

function _luaF_freeupval($L, $uv) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $uv_addr;
      $L_addr=$L;
      $uv_addr=$uv;
      var $0=$uv_addr;
      var $v=(($0+8)|0);
      var $1=HEAP32[(($v)>>2)];
      var $2=$uv_addr;
      var $u=(($2+12)|0);
      var $value=$u;
      var $cmp=(($1)|0)!=(($value)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$uv_addr;
      _unlinkupval($3);
      label = 4; break;
    case 4: 
      var $4=$L_addr;
      var $5=$uv_addr;
      var $6=$5;
      var $call=_luaM_realloc_($4, $6, 24, 0);

      return;
  }

}


function _luaF_close($L, $level) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $level_addr;
      var $uv;
      var $g;
      var $o;
      var $io2;
      var $io1;
      $L_addr=$L;
      $level_addr=$level;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      $g=$1;
      label = 3; break;
    case 3: 
      var $2=$L_addr;
      var $openupval=(($2+56)|0);
      var $3=HEAP32[(($openupval)>>2)];
      var $cmp=(($3)|0)!=0;
      if ($cmp) { label = 4; break; } else { var $8 = 0;label = 5; break; }
    case 4: 
      var $4=$L_addr;
      var $openupval1=(($4+56)|0);
      var $5=HEAP32[(($openupval1)>>2)];
      var $uv2=$5;
      $uv=$uv2;
      var $v=(($uv2+8)|0);
      var $6=HEAP32[(($v)>>2)];
      var $7=$level_addr;
      var $cmp3=(($6)>>>0) >= (($7)>>>0);
      var $8 = $cmp3;label = 5; break;
    case 5: 
      var $8;
      if ($8) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $9=$uv;
      var $10=$9;
      $o=$10;
      var $11=$uv;
      var $next=(($11)|0);
      var $12=HEAP32[(($next)>>2)];
      var $13=$L_addr;
      var $openupval4=(($13+56)|0);
      HEAP32[(($openupval4)>>2)]=$12;
      var $14=$o;
      var $gch=$14;
      var $marked=(($gch+5)|0);
      var $15=HEAP8[($marked)];
      var $conv=(($15)&255);
      var $xor=$conv ^ 3;
      var $16=$g;
      var $currentwhite=(($16+52)|0);
      var $17=HEAP8[($currentwhite)];
      var $conv5=(($17)&255);
      var $xor6=$conv5 ^ 3;
      var $and=$xor & $xor6;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $18=$L_addr;
      var $19=$uv;
      _luaF_freeupval($18, $19);
      label = 9; break;
    case 8: 
      var $20=$uv;
      _unlinkupval($20);
      var $21=$uv;
      var $v7=(($21+8)|0);
      var $22=HEAP32[(($v7)>>2)];
      $io2=$22;
      var $23=$uv;
      var $u=(($23+12)|0);
      var $value=$u;
      $io1=$value;
      var $24=$io1;
      var $value_=(($24)|0);
      var $25=$io2;
      var $value_8=(($25)|0);
      var $26=$value_;
      var $27=$value_8;
      HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];
      var $28=$io2;
      var $tt_=(($28+8)|0);
      var $29=HEAP32[(($tt_)>>2)];
      var $30=$io1;
      var $tt_9=(($30+8)|0);
      HEAP32[(($tt_9)>>2)]=$29;
      var $31=$uv;
      var $u10=(($31+12)|0);
      var $value11=$u10;
      var $32=$uv;
      var $v12=(($32+8)|0);
      HEAP32[(($v12)>>2)]=$value11;
      var $33=$g;
      var $allgc=(($33+60)|0);
      var $34=HEAP32[(($allgc)>>2)];
      var $35=$o;
      var $gch13=$35;
      var $next14=(($gch13)|0);
      HEAP32[(($next14)>>2)]=$34;
      var $36=$o;
      var $37=$g;
      var $allgc15=(($37+60)|0);
      HEAP32[(($allgc15)>>2)]=$36;
      var $38=$g;
      var $39=$uv;
      _luaC_checkupvalcolor($38, $39);
      label = 9; break;
    case 9: 
      label = 3; break;
    case 10: 

      return;
  }

}
_luaF_close["X"]=1;

function _luaF_newproto($L) {
  var label = 0;


  var $L_addr;
  var $f;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_luaC_newobj($0, 9, 80, 0, 0);
  var $p=$call;
  $f=$p;
  var $1=$f;
  var $k=(($1+8)|0);
  HEAP32[(($k)>>2)]=0;
  var $2=$f;
  var $sizek=(($2+44)|0);
  HEAP32[(($sizek)>>2)]=0;
  var $3=$f;
  var $p1=(($3+16)|0);
  HEAP32[(($p1)>>2)]=0;
  var $4=$f;
  var $sizep=(($4+56)|0);
  HEAP32[(($sizep)>>2)]=0;
  var $5=$f;
  var $code=(($5+12)|0);
  HEAP32[(($code)>>2)]=0;
  var $6=$f;
  var $cache=(($6+32)|0);
  HEAP32[(($cache)>>2)]=0;
  var $7=$f;
  var $sizecode=(($7+48)|0);
  HEAP32[(($sizecode)>>2)]=0;
  var $8=$f;
  var $lineinfo=(($8+20)|0);
  HEAP32[(($lineinfo)>>2)]=0;
  var $9=$f;
  var $sizelineinfo=(($9+52)|0);
  HEAP32[(($sizelineinfo)>>2)]=0;
  var $10=$f;
  var $upvalues=(($10+28)|0);
  HEAP32[(($upvalues)>>2)]=0;
  var $11=$f;
  var $sizeupvalues=(($11+40)|0);
  HEAP32[(($sizeupvalues)>>2)]=0;
  var $12=$f;
  var $numparams=(($12+76)|0);
  HEAP8[($numparams)]=0;
  var $13=$f;
  var $is_vararg=(($13+77)|0);
  HEAP8[($is_vararg)]=0;
  var $14=$f;
  var $maxstacksize=(($14+78)|0);
  HEAP8[($maxstacksize)]=0;
  var $15=$f;
  var $locvars=(($15+24)|0);
  HEAP32[(($locvars)>>2)]=0;
  var $16=$f;
  var $sizelocvars=(($16+60)|0);
  HEAP32[(($sizelocvars)>>2)]=0;
  var $17=$f;
  var $linedefined=(($17+64)|0);
  HEAP32[(($linedefined)>>2)]=0;
  var $18=$f;
  var $lastlinedefined=(($18+68)|0);
  HEAP32[(($lastlinedefined)>>2)]=0;
  var $19=$f;
  var $source=(($19+36)|0);
  HEAP32[(($source)>>2)]=0;
  var $20=$f;

  return $20;
}
_luaF_newproto["X"]=1;

function _luaF_getlocalname($f, $local_number, $pc) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $f_addr;
      var $local_number_addr;
      var $pc_addr;
      var $i;
      $f_addr=$f;
      $local_number_addr=$local_number;
      $pc_addr=$pc;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$f_addr;
      var $sizelocvars=(($1+60)|0);
      var $2=HEAP32[(($sizelocvars)>>2)];
      var $cmp=(($0)|0) < (($2)|0);
      if ($cmp) { label = 4; break; } else { var $8 = 0;label = 5; break; }
    case 4: 
      var $3=$i;
      var $4=$f_addr;
      var $locvars=(($4+24)|0);
      var $5=HEAP32[(($locvars)>>2)];
      var $arrayidx=(($5+((($3)*(12))&-1))|0);
      var $startpc=(($arrayidx+4)|0);
      var $6=HEAP32[(($startpc)>>2)];
      var $7=$pc_addr;
      var $cmp1=(($6)|0) <= (($7)|0);
      var $8 = $cmp1;label = 5; break;
    case 5: 
      var $8;
      if ($8) { label = 6; break; } else { label = 12; break; }
    case 6: 
      var $9=$pc_addr;
      var $10=$i;
      var $11=$f_addr;
      var $locvars2=(($11+24)|0);
      var $12=HEAP32[(($locvars2)>>2)];
      var $arrayidx3=(($12+((($10)*(12))&-1))|0);
      var $endpc=(($arrayidx3+8)|0);
      var $13=HEAP32[(($endpc)>>2)];
      var $cmp4=(($9)|0) < (($13)|0);
      if ($cmp4) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $14=$local_number_addr;
      var $dec=((($14)-(1))|0);
      $local_number_addr=$dec;
      var $15=$local_number_addr;
      var $cmp5=(($15)|0)==0;
      if ($cmp5) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $16=$i;
      var $17=$f_addr;
      var $locvars7=(($17+24)|0);
      var $18=HEAP32[(($locvars7)>>2)];
      var $arrayidx8=(($18+((($16)*(12))&-1))|0);
      var $varname=(($arrayidx8)|0);
      var $19=HEAP32[(($varname)>>2)];
      var $add_ptr=(($19+16)|0);
      var $20=$add_ptr;
      $retval=$20;
      label = 13; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $21=$i;
      var $inc=((($21)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 12: 
      $retval=0;
      label = 13; break;
    case 13: 
      var $22=$retval;

      return $22;
  }

}
_luaF_getlocalname["X"]=1;

function _luaC_barrierback_($L, $o) {
  var label = 0;


  var $L_addr;
  var $o_addr;
  var $g;
  $L_addr=$L;
  $o_addr=$o;
  var $0=$L_addr;
  var $l_G=(($0+12)|0);
  var $1=HEAP32[(($l_G)>>2)];
  $g=$1;
  var $2=$o_addr;
  var $gch=$2;
  var $marked=(($gch+5)|0);
  var $3=HEAP8[($marked)];
  var $conv=(($3)&255);
  var $and=$conv & 251;
  var $conv1=(($and) & 255);
  HEAP8[($marked)]=$conv1;
  var $4=$g;
  var $grayagain=(($4+80)|0);
  var $5=HEAP32[(($grayagain)>>2)];
  var $6=$o_addr;
  var $h=$6;
  var $gclist=(($h+24)|0);
  HEAP32[(($gclist)>>2)]=$5;
  var $7=$o_addr;
  var $8=$g;
  var $grayagain2=(($8+80)|0);
  HEAP32[(($grayagain2)>>2)]=$7;

  return;
}


function _luaF_freeproto($L, $f) {
  var label = 0;


  var $L_addr;
  var $f_addr;
  $L_addr=$L;
  $f_addr=$f;
  var $0=$L_addr;
  var $1=$f_addr;
  var $code=(($1+12)|0);
  var $2=HEAP32[(($code)>>2)];
  var $3=$2;
  var $4=$f_addr;
  var $sizecode=(($4+48)|0);
  var $5=HEAP32[(($sizecode)>>2)];
  var $mul=($5<<2);
  var $call=_luaM_realloc_($0, $3, $mul, 0);
  var $6=$L_addr;
  var $7=$f_addr;
  var $p=(($7+16)|0);
  var $8=HEAP32[(($p)>>2)];
  var $9=$8;
  var $10=$f_addr;
  var $sizep=(($10+56)|0);
  var $11=HEAP32[(($sizep)>>2)];
  var $mul1=($11<<2);
  var $call2=_luaM_realloc_($6, $9, $mul1, 0);
  var $12=$L_addr;
  var $13=$f_addr;
  var $k=(($13+8)|0);
  var $14=HEAP32[(($k)>>2)];
  var $15=$14;
  var $16=$f_addr;
  var $sizek=(($16+44)|0);
  var $17=HEAP32[(($sizek)>>2)];
  var $mul3=((($17)*(12))&-1);
  var $call4=_luaM_realloc_($12, $15, $mul3, 0);
  var $18=$L_addr;
  var $19=$f_addr;
  var $lineinfo=(($19+20)|0);
  var $20=HEAP32[(($lineinfo)>>2)];
  var $21=$20;
  var $22=$f_addr;
  var $sizelineinfo=(($22+52)|0);
  var $23=HEAP32[(($sizelineinfo)>>2)];
  var $mul5=($23<<2);
  var $call6=_luaM_realloc_($18, $21, $mul5, 0);
  var $24=$L_addr;
  var $25=$f_addr;
  var $locvars=(($25+24)|0);
  var $26=HEAP32[(($locvars)>>2)];
  var $27=$26;
  var $28=$f_addr;
  var $sizelocvars=(($28+60)|0);
  var $29=HEAP32[(($sizelocvars)>>2)];
  var $mul7=((($29)*(12))&-1);
  var $call8=_luaM_realloc_($24, $27, $mul7, 0);
  var $30=$L_addr;
  var $31=$f_addr;
  var $upvalues=(($31+28)|0);
  var $32=HEAP32[(($upvalues)>>2)];
  var $33=$32;
  var $34=$f_addr;
  var $sizeupvalues=(($34+40)|0);
  var $35=HEAP32[(($sizeupvalues)>>2)];
  var $mul9=($35<<3);
  var $call10=_luaM_realloc_($30, $33, $mul9, 0);
  var $36=$L_addr;
  var $37=$f_addr;
  var $38=$37;
  var $call11=_luaM_realloc_($36, $38, 80, 0);

  return;
}
_luaF_freeproto["X"]=1;

function _luaC_barrier_($L, $o, $v) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $o_addr;
      var $v_addr;
      var $g;
      $L_addr=$L;
      $o_addr=$o;
      $v_addr=$v;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      $g=$1;
      var $2=$g;
      var $gckind=(($2+54)|0);
      var $3=HEAP8[($gckind)];
      var $conv=(($3)&255);
      var $cmp=(($conv)|0)==2;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $4=$g;
      var $gcstate=(($4+53)|0);
      var $5=HEAP8[($gcstate)];
      var $conv2=(($5)&255);
      var $cmp3=(($conv2)|0) <= 1;
      if ($cmp3) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $6=$g;
      var $7=$v_addr;
      _reallymarkobject($6, $7);
      label = 6; break;
    case 5: 
      var $8=$o_addr;
      var $gch=$8;
      var $marked=(($gch+5)|0);
      var $9=HEAP8[($marked)];
      var $conv5=(($9)&255);
      var $and=$conv5 & -72;
      var $10=$g;
      var $currentwhite=(($10+52)|0);
      var $11=HEAP8[($currentwhite)];
      var $conv6=(($11)&255);
      var $and7=$conv6 & 3;
      var $conv8=(($and7) & 255);
      var $conv9=(($conv8)&255);
      var $or=$and | $conv9;
      var $conv10=(($or) & 255);
      var $12=$o_addr;
      var $gch11=$12;
      var $marked12=(($gch11+5)|0);
      HEAP8[($marked12)]=$conv10;
      label = 6; break;
    case 6: 

      return;
  }

}


function _reallymarkobject($g, $o) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $o_addr;
      var $size;
      var $mt;
      var $uv33;
      $g_addr=$g;
      $o_addr=$o;
      var $0=$o_addr;
      var $gch=$0;
      var $marked=(($gch+5)|0);
      var $1=HEAP8[($marked)];
      var $conv=(($1)&255);
      var $and=$conv & 252;
      var $conv1=(($and) & 255);
      HEAP8[($marked)]=$conv1;
      var $2=$o_addr;
      var $gch2=$2;
      var $tt=(($gch2+4)|0);
      var $3=HEAP8[($tt)];
      var $conv3=(($3)&255);
      if ((($conv3)|0)==4 | (($conv3)|0)==20) {
        label = 3; break;
      }
      else if ((($conv3)|0)==7) {
        label = 4; break;
      }
      else if ((($conv3)|0)==10) {
        label = 11; break;
      }
      else if ((($conv3)|0)==6) {
        label = 17; break;
      }
      else if ((($conv3)|0)==38) {
        label = 18; break;
      }
      else if ((($conv3)|0)==5) {
        label = 19; break;
      }
      else if ((($conv3)|0)==8) {
        label = 20; break;
      }
      else if ((($conv3)|0)==9) {
        label = 21; break;
      }
      else {
      label = 22; break;
      }
      
    case 3: 
      var $4=$o_addr;
      var $ts=$4;
      var $tsv=$ts;
      var $len=(($tsv+12)|0);
      var $5=HEAP32[(($len)>>2)];
      var $add=((($5)+(1))|0);
      var $mul=$add;
      var $add4=((($mul)+(16))|0);
      $size=$add4;
      label = 23; break;
    case 4: 
      var $6=$o_addr;
      var $u=$6;
      var $uv=$u;
      var $metatable=(($uv+8)|0);
      var $7=HEAP32[(($metatable)>>2)];
      $mt=$7;
      var $8=$mt;
      var $tobool=(($8)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $9=$mt;
      var $10=$9;
      var $gch6=$10;
      var $marked7=(($gch6+5)|0);
      var $11=HEAP8[($marked7)];
      var $conv8=(($11)&255);
      var $and9=$conv8 & 3;
      var $tobool10=(($and9)|0)!=0;
      if ($tobool10) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $12=$g_addr;
      var $13=$mt;
      var $14=$13;
      _reallymarkobject($12, $14);
      label = 7; break;
    case 7: 
      var $15=$o_addr;
      var $u11=$15;
      var $uv12=$u11;
      var $env=(($uv12+12)|0);
      var $16=HEAP32[(($env)>>2)];
      var $tobool13=(($16)|0)!=0;
      if ($tobool13) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $17=$o_addr;
      var $u15=$17;
      var $uv16=$u15;
      var $env17=(($uv16+12)|0);
      var $18=HEAP32[(($env17)>>2)];
      var $19=$18;
      var $gch18=$19;
      var $marked19=(($gch18+5)|0);
      var $20=HEAP8[($marked19)];
      var $conv20=(($20)&255);
      var $and21=$conv20 & 3;
      var $tobool22=(($and21)|0)!=0;
      if ($tobool22) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $21=$g_addr;
      var $22=$o_addr;
      var $u24=$22;
      var $uv25=$u24;
      var $env26=(($uv25+12)|0);
      var $23=HEAP32[(($env26)>>2)];
      var $24=$23;
      _reallymarkobject($21, $24);
      label = 10; break;
    case 10: 
      var $25=$o_addr;
      var $u28=$25;
      var $uv29=$u28;
      var $len30=(($uv29+16)|0);
      var $26=HEAP32[(($len30)>>2)];
      var $add31=((($26)+(20))|0);
      $size=$add31;
      label = 23; break;
    case 11: 
      var $27=$o_addr;
      var $uv34=$27;
      $uv33=$uv34;
      var $28=$uv33;
      var $v=(($28+8)|0);
      var $29=HEAP32[(($v)>>2)];
      var $tt_=(($29+8)|0);
      var $30=HEAP32[(($tt_)>>2)];
      var $and35=$30 & 64;
      var $tobool36=(($and35)|0)!=0;
      if ($tobool36) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $31=$uv33;
      var $v38=(($31+8)|0);
      var $32=HEAP32[(($v38)>>2)];
      var $value_=(($32)|0);
      var $gc=$value_;
      var $33=HEAP32[(($gc)>>2)];
      var $gch39=$33;
      var $marked40=(($gch39+5)|0);
      var $34=HEAP8[($marked40)];
      var $conv41=(($34)&255);
      var $and42=$conv41 & 3;
      var $tobool43=(($and42)|0)!=0;
      if ($tobool43) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $35=$g_addr;
      var $36=$uv33;
      var $v45=(($36+8)|0);
      var $37=HEAP32[(($v45)>>2)];
      var $value_46=(($37)|0);
      var $gc47=$value_46;
      var $38=HEAP32[(($gc47)>>2)];
      _reallymarkobject($35, $38);
      label = 14; break;
    case 14: 
      var $39=$uv33;
      var $v49=(($39+8)|0);
      var $40=HEAP32[(($v49)>>2)];
      var $41=$uv33;
      var $u50=(($41+12)|0);
      var $value=$u50;
      var $cmp=(($40)|0)!=(($value)|0);
      if ($cmp) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 24; break;
    case 16: 
      $size=24;
      label = 23; break;
    case 17: 
      var $42=$g_addr;
      var $gray=(($42+76)|0);
      var $43=HEAP32[(($gray)>>2)];
      var $44=$o_addr;
      var $cl=$44;
      var $l=$cl;
      var $gclist=(($l+8)|0);
      HEAP32[(($gclist)>>2)]=$43;
      var $45=$o_addr;
      var $46=$g_addr;
      var $gray55=(($46+76)|0);
      HEAP32[(($gray55)>>2)]=$45;
      label = 24; break;
    case 18: 
      var $47=$g_addr;
      var $gray57=(($47+76)|0);
      var $48=HEAP32[(($gray57)>>2)];
      var $49=$o_addr;
      var $cl58=$49;
      var $c=$cl58;
      var $gclist59=(($c+8)|0);
      HEAP32[(($gclist59)>>2)]=$48;
      var $50=$o_addr;
      var $51=$g_addr;
      var $gray60=(($51+76)|0);
      HEAP32[(($gray60)>>2)]=$50;
      label = 24; break;
    case 19: 
      var $52=$g_addr;
      var $gray62=(($52+76)|0);
      var $53=HEAP32[(($gray62)>>2)];
      var $54=$o_addr;
      var $h=$54;
      var $gclist63=(($h+24)|0);
      HEAP32[(($gclist63)>>2)]=$53;
      var $55=$o_addr;
      var $h64=$55;
      var $56=$h64;
      var $57=$g_addr;
      var $gray65=(($57+76)|0);
      HEAP32[(($gray65)>>2)]=$56;
      label = 24; break;
    case 20: 
      var $58=$g_addr;
      var $gray67=(($58+76)|0);
      var $59=HEAP32[(($gray67)>>2)];
      var $60=$o_addr;
      var $th=$60;
      var $gclist68=(($th+60)|0);
      HEAP32[(($gclist68)>>2)]=$59;
      var $61=$o_addr;
      var $62=$g_addr;
      var $gray69=(($62+76)|0);
      HEAP32[(($gray69)>>2)]=$61;
      label = 24; break;
    case 21: 
      var $63=$g_addr;
      var $gray71=(($63+76)|0);
      var $64=HEAP32[(($gray71)>>2)];
      var $65=$o_addr;
      var $p=$65;
      var $gclist72=(($p+72)|0);
      HEAP32[(($gclist72)>>2)]=$64;
      var $66=$o_addr;
      var $67=$g_addr;
      var $gray73=(($67+76)|0);
      HEAP32[(($gray73)>>2)]=$66;
      label = 24; break;
    case 22: 
      label = 24; break;
    case 23: 
      var $68=$o_addr;
      var $gch74=$68;
      var $marked75=(($gch74+5)|0);
      var $69=HEAP8[($marked75)];
      var $conv76=(($69)&255);
      var $or=$conv76 | 4;
      var $conv77=(($or) & 255);
      HEAP8[($marked75)]=$conv77;
      var $70=$size;
      var $71=$g_addr;
      var $GCmemtrav=(($71+16)|0);
      var $72=HEAP32[(($GCmemtrav)>>2)];
      var $add78=((($72)+($70))|0);
      HEAP32[(($GCmemtrav)>>2)]=$add78;
      label = 24; break;
    case 24: 

      return;
  }

}
_reallymarkobject["X"]=1;

function _luaC_barrierproto_($L, $p, $c) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $p_addr;
      var $c_addr;
      var $g;
      $L_addr=$L;
      $p_addr=$p;
      $c_addr=$c;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      $g=$1;
      var $2=$p_addr;
      var $cache=(($2+32)|0);
      var $3=HEAP32[(($cache)>>2)];
      var $cmp=(($3)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $4=$c_addr;
      var $5=$4;
      var $gch=$5;
      var $marked=(($gch+5)|0);
      var $6=HEAP8[($marked)];
      var $conv=(($6)&255);
      var $and=$conv & 3;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $7=$p_addr;
      var $8=$7;
      var $gch1=$8;
      var $marked2=(($gch1+5)|0);
      var $9=HEAP8[($marked2)];
      var $conv3=(($9)&255);
      var $and4=$conv3 & 4;
      var $tobool5=(($and4)|0)!=0;
      if ($tobool5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $10=$L_addr;
      var $11=$p_addr;
      var $12=$11;
      var $13=$c_addr;
      var $14=$13;
      _luaC_barrier_($10, $12, $14);
      label = 6; break;
    case 6: 
      label = 8; break;
    case 7: 
      var $15=$p_addr;
      var $16=$15;
      var $gch7=$16;
      var $marked8=(($gch7+5)|0);
      var $17=HEAP8[($marked8)];
      var $conv9=(($17)&255);
      var $and10=$conv9 & 251;
      var $conv11=(($and10) & 255);
      HEAP8[($marked8)]=$conv11;
      var $18=$g;
      var $grayagain=(($18+80)|0);
      var $19=HEAP32[(($grayagain)>>2)];
      var $20=$p_addr;
      var $gclist=(($20+72)|0);
      HEAP32[(($gclist)>>2)]=$19;
      var $21=$p_addr;
      var $22=$21;
      var $23=$g;
      var $grayagain12=(($23+80)|0);
      HEAP32[(($grayagain12)>>2)]=$22;
      label = 8; break;
    case 8: 

      return;
  }

}
_luaC_barrierproto_["X"]=1;

function _luaC_checkupvalcolor($g, $uv) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $uv_addr;
      var $o;
      $g_addr=$g;
      $uv_addr=$uv;
      var $0=$uv_addr;
      var $1=$0;
      $o=$1;
      var $2=$o;
      var $gch=$2;
      var $marked=(($gch+5)|0);
      var $3=HEAP8[($marked)];
      var $conv=(($3)&255);
      var $and=$conv & 7;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 11; break; } else { label = 3; break; }
    case 3: 
      var $4=$g_addr;
      var $gckind=(($4+54)|0);
      var $5=HEAP8[($gckind)];
      var $conv1=(($5)&255);
      var $cmp=(($conv1)|0)==2;
      if ($cmp) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $6=$g_addr;
      var $gcstate=(($6+53)|0);
      var $7=HEAP8[($gcstate)];
      var $conv3=(($7)&255);
      var $cmp4=(($conv3)|0) <= 1;
      if ($cmp4) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $8=$o;
      var $gch7=$8;
      var $marked8=(($gch7+5)|0);
      var $9=HEAP8[($marked8)];
      var $conv9=(($9)&255);
      var $and10=$conv9 & 191;
      var $conv11=(($and10) & 255);
      HEAP8[($marked8)]=$conv11;
      var $10=$o;
      var $gch12=$10;
      var $marked13=(($gch12+5)|0);
      var $11=HEAP8[($marked13)];
      var $conv14=(($11)&255);
      var $or=$conv14 | 4;
      var $conv15=(($or) & 255);
      HEAP8[($marked13)]=$conv15;
      var $12=$uv_addr;
      var $v=(($12+8)|0);
      var $13=HEAP32[(($v)>>2)];
      var $tt_=(($13+8)|0);
      var $14=HEAP32[(($tt_)>>2)];
      var $and16=$14 & 64;
      var $tobool17=(($and16)|0)!=0;
      if ($tobool17) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $15=$uv_addr;
      var $v18=(($15+8)|0);
      var $16=HEAP32[(($v18)>>2)];
      var $value_=(($16)|0);
      var $gc=$value_;
      var $17=HEAP32[(($gc)>>2)];
      var $gch19=$17;
      var $marked20=(($gch19+5)|0);
      var $18=HEAP8[($marked20)];
      var $conv21=(($18)&255);
      var $and22=$conv21 & 3;
      var $tobool23=(($and22)|0)!=0;
      if ($tobool23) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $19=$g_addr;
      var $20=$uv_addr;
      var $v25=(($20+8)|0);
      var $21=HEAP32[(($v25)>>2)];
      var $value_26=(($21)|0);
      var $gc27=$value_26;
      var $22=HEAP32[(($gc27)>>2)];
      _reallymarkobject($19, $22);
      label = 8; break;
    case 8: 
      label = 10; break;
    case 9: 
      var $23=$o;
      var $gch28=$23;
      var $marked29=(($gch28+5)|0);
      var $24=HEAP8[($marked29)];
      var $conv30=(($24)&255);
      var $and31=$conv30 & -72;
      var $25=$g_addr;
      var $currentwhite=(($25+52)|0);
      var $26=HEAP8[($currentwhite)];
      var $conv32=(($26)&255);
      var $and33=$conv32 & 3;
      var $conv34=(($and33) & 255);
      var $conv35=(($conv34)&255);
      var $or36=$and31 | $conv35;
      var $conv37=(($or36) & 255);
      var $27=$o;
      var $gch38=$27;
      var $marked39=(($gch38+5)|0);
      HEAP8[($marked39)]=$conv37;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 

      return;
  }

}
_luaC_checkupvalcolor["X"]=1;

function _luaC_newobj($L, $tt, $sz, $list, $offset) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $tt_addr;
      var $sz_addr;
      var $list_addr;
      var $offset_addr;
      var $g;
      var $raw;
      var $o;
      $L_addr=$L;
      $tt_addr=$tt;
      $sz_addr=$sz;
      $list_addr=$list;
      $offset_addr=$offset;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      $g=$1;
      var $2=$L_addr;
      var $3=$tt_addr;
      var $and=$3 & 15;
      var $4=$sz_addr;
      var $call=_luaM_realloc_($2, 0, $and, $4);
      $raw=$call;
      var $5=$raw;
      var $6=$offset_addr;
      var $add_ptr=(($5+$6)|0);
      var $7=$add_ptr;
      $o=$7;
      var $8=$list_addr;
      var $cmp=(($8)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $9=$g;
      var $allgc=(($9+60)|0);
      $list_addr=$allgc;
      label = 4; break;
    case 4: 
      var $10=$g;
      var $currentwhite=(($10+52)|0);
      var $11=HEAP8[($currentwhite)];
      var $conv=(($11)&255);
      var $and1=$conv & 3;
      var $conv2=(($and1) & 255);
      var $12=$o;
      var $gch=$12;
      var $marked=(($gch+5)|0);
      HEAP8[($marked)]=$conv2;
      var $13=$tt_addr;
      var $conv3=(($13) & 255);
      var $14=$o;
      var $gch4=$14;
      var $tt5=(($gch4+4)|0);
      HEAP8[($tt5)]=$conv3;
      var $15=$list_addr;
      var $16=HEAP32[(($15)>>2)];
      var $17=$o;
      var $gch6=$17;
      var $next=(($gch6)|0);
      HEAP32[(($next)>>2)]=$16;
      var $18=$o;
      var $19=$list_addr;
      HEAP32[(($19)>>2)]=$18;
      var $20=$o;

      return $20;
  }

}
_luaC_newobj["X"]=1;

function _luaC_checkfinalizer($L, $o, $mt) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $o_addr;
      var $mt_addr;
      var $g;
      var $p;
      var $ho;
      $L_addr=$L;
      $o_addr=$o;
      $mt_addr=$mt;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      $g=$1;
      var $2=$o_addr;
      var $gch=$2;
      var $marked=(($gch+5)|0);
      var $3=HEAP8[($marked)];
      var $conv=(($3)&255);
      var $and=$conv & 16;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 11; break; } else { label = 3; break; }
    case 3: 
      var $4=$o_addr;
      var $gch1=$4;
      var $marked2=(($gch1+5)|0);
      var $5=HEAP8[($marked2)];
      var $conv3=(($5)&255);
      var $and4=$conv3 & 8;
      var $tobool5=(($and4)|0)!=0;
      if ($tobool5) { label = 11; break; } else { label = 4; break; }
    case 4: 
      var $6=$mt_addr;
      var $cmp=(($6)|0)==0;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $cond14 = 0;label = 10; break;
    case 6: 
      var $7=$mt_addr;
      var $flags=(($7+6)|0);
      var $8=HEAP8[($flags)];
      var $conv8=(($8)&255);
      var $and9=$conv8 & 4;
      var $tobool10=(($and9)|0)!=0;
      if ($tobool10) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $cond = 0;label = 9; break;
    case 8: 
      var $9=$mt_addr;
      var $10=$g;
      var $tmname=(($10+164)|0);
      var $arrayidx=(($tmname+8)|0);
      var $11=HEAP32[(($arrayidx)>>2)];
      var $call=_luaT_gettm($9, 2, $11);
      var $cond = $call;label = 9; break;
    case 9: 
      var $cond;
      var $cond14 = $cond;label = 10; break;
    case 10: 
      var $cond14;
      var $cmp15=(($cond14)|0)==0;
      if ($cmp15) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 23; break;
    case 12: 
      var $12=$o_addr;
      var $gch17=$12;
      $ho=$gch17;
      var $13=$g;
      var $sweepgc=(($13+68)|0);
      var $14=HEAP32[(($sweepgc)>>2)];
      var $15=$ho;
      var $next=(($15)|0);
      var $cmp18=(($14)|0)==(($next)|0);
      if ($cmp18) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $16=$L_addr;
      var $17=$g;
      var $sweepgc21=(($17+68)|0);
      var $18=HEAP32[(($sweepgc21)>>2)];
      var $call22=_sweeptolive($16, $18, 0);
      var $19=$g;
      var $sweepgc23=(($19+68)|0);
      HEAP32[(($sweepgc23)>>2)]=$call22;
      label = 14; break;
    case 14: 
      var $20=$g;
      var $allgc=(($20+60)|0);
      $p=$allgc;
      label = 15; break;
    case 15: 
      var $21=$p;
      var $22=HEAP32[(($21)>>2)];
      var $23=$o_addr;
      var $cmp24=(($22)|0)!=(($23)|0);
      if ($cmp24) { label = 16; break; } else { label = 18; break; }
    case 16: 
      label = 17; break;
    case 17: 
      var $24=$p;
      var $25=HEAP32[(($24)>>2)];
      var $gch26=$25;
      var $next27=(($gch26)|0);
      $p=$next27;
      label = 15; break;
    case 18: 
      var $26=$ho;
      var $next28=(($26)|0);
      var $27=HEAP32[(($next28)>>2)];
      var $28=$p;
      HEAP32[(($28)>>2)]=$27;
      var $29=$g;
      var $finobj=(($29+64)|0);
      var $30=HEAP32[(($finobj)>>2)];
      var $31=$ho;
      var $next29=(($31)|0);
      HEAP32[(($next29)>>2)]=$30;
      var $32=$o_addr;
      var $33=$g;
      var $finobj30=(($33+64)|0);
      HEAP32[(($finobj30)>>2)]=$32;
      var $34=$ho;
      var $marked31=(($34+5)|0);
      var $35=HEAP8[($marked31)];
      var $conv32=(($35)&255);
      var $or=$conv32 | 16;
      var $conv33=(($or) & 255);
      HEAP8[($marked31)]=$conv33;
      var $36=$g;
      var $gckind=(($36+54)|0);
      var $37=HEAP8[($gckind)];
      var $conv34=(($37)&255);
      var $cmp35=(($conv34)|0)==2;
      if ($cmp35) { label = 21; break; } else { label = 19; break; }
    case 19: 
      var $38=$g;
      var $gcstate=(($38+53)|0);
      var $39=HEAP8[($gcstate)];
      var $conv38=(($39)&255);
      var $cmp39=(($conv38)|0) <= 1;
      if ($cmp39) { label = 21; break; } else { label = 20; break; }
    case 20: 
      var $40=$o_addr;
      var $gch42=$40;
      var $marked43=(($gch42+5)|0);
      var $41=HEAP8[($marked43)];
      var $conv44=(($41)&255);
      var $and45=$conv44 & -72;
      var $42=$g;
      var $currentwhite=(($42+52)|0);
      var $43=HEAP8[($currentwhite)];
      var $conv46=(($43)&255);
      var $and47=$conv46 & 3;
      var $conv48=(($and47) & 255);
      var $conv49=(($conv48)&255);
      var $or50=$and45 | $conv49;
      var $conv51=(($or50) & 255);
      var $44=$o_addr;
      var $gch52=$44;
      var $marked53=(($gch52+5)|0);
      HEAP8[($marked53)]=$conv51;
      label = 22; break;
    case 21: 
      var $45=$o_addr;
      var $gch55=$45;
      var $marked56=(($gch55+5)|0);
      var $46=HEAP8[($marked56)];
      var $conv57=(($46)&255);
      var $and58=$conv57 & 191;
      var $conv59=(($and58) & 255);
      HEAP8[($marked56)]=$conv59;
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 

      return;
  }

}
_luaC_checkfinalizer["X"]=1;

function _separatetobefnz($L, $all) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $all_addr;
      var $g;
      var $p;
      var $curr;
      var $lastnext;
      $L_addr=$L;
      $all_addr=$all;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      $g=$1;
      var $2=$g;
      var $finobj=(($2+64)|0);
      $p=$finobj;
      var $3=$g;
      var $tobefnz=(($3+96)|0);
      $lastnext=$tobefnz;
      label = 3; break;
    case 3: 
      var $4=$lastnext;
      var $5=HEAP32[(($4)>>2)];
      var $cmp=(($5)|0)!=0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $6=$lastnext;
      var $7=HEAP32[(($6)>>2)];
      var $gch=$7;
      var $next=(($gch)|0);
      $lastnext=$next;
      label = 3; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $8=$p;
      var $9=HEAP32[(($8)>>2)];
      $curr=$9;
      var $cmp2=(($9)|0)!=0;
      if ($cmp2) { label = 7; break; } else { label = 12; break; }
    case 7: 
      var $10=$all_addr;
      var $tobool=(($10)|0)!=0;
      if ($tobool) { label = 10; break; } else { label = 8; break; }
    case 8: 
      var $11=$curr;
      var $gch4=$11;
      var $marked=(($gch4+5)|0);
      var $12=HEAP8[($marked)];
      var $conv=(($12)&255);
      var $and=$conv & 3;
      var $tobool5=(($and)|0)!=0;
      if ($tobool5) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $13=$curr;
      var $gch6=$13;
      var $next7=(($gch6)|0);
      $p=$next7;
      label = 11; break;
    case 10: 
      var $14=$curr;
      var $gch8=$14;
      var $marked9=(($gch8+5)|0);
      var $15=HEAP8[($marked9)];
      var $conv10=(($15)&255);
      var $or=$conv10 | 8;
      var $conv11=(($or) & 255);
      HEAP8[($marked9)]=$conv11;
      var $16=$curr;
      var $gch12=$16;
      var $next13=(($gch12)|0);
      var $17=HEAP32[(($next13)>>2)];
      var $18=$p;
      HEAP32[(($18)>>2)]=$17;
      var $19=$lastnext;
      var $20=HEAP32[(($19)>>2)];
      var $21=$curr;
      var $gch14=$21;
      var $next15=(($gch14)|0);
      HEAP32[(($next15)>>2)]=$20;
      var $22=$curr;
      var $23=$lastnext;
      HEAP32[(($23)>>2)]=$22;
      var $24=$curr;
      var $gch16=$24;
      var $next17=(($gch16)|0);
      $lastnext=$next17;
      label = 11; break;
    case 11: 
      label = 6; break;
    case 12: 

      return;
  }

}
_separatetobefnz["X"]=1;

function _sweeptolive($L, $p, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $p_addr;
      var $n_addr;
      var $old;
      var $i;
      $L_addr=$L;
      $p_addr=$p;
      $n_addr=$n;
      var $0=$p_addr;
      $old=$0;
      $i=0;
      label = 3; break;
    case 3: 
      var $1=$i;
      var $inc=((($1)+(1))|0);
      $i=$inc;
      var $2=$L_addr;
      var $3=$p_addr;
      var $call=_sweeplist($2, $3, 1);
      $p_addr=$call;
      label = 4; break;
    case 4: 
      var $4=$p_addr;
      var $5=$old;
      var $cmp=(($4)|0)==(($5)|0);
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 5: 
      var $6=$n_addr;
      var $tobool=(($6)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $7=$i;
      var $8=$n_addr;
      var $9=HEAP32[(($8)>>2)];
      var $add=((($9)+($7))|0);
      HEAP32[(($8)>>2)]=$add;
      label = 7; break;
    case 7: 
      var $10=$p_addr;

      return $10;
  }

}


function _luaC_changemode($L, $mode) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $mode_addr;
      var $g;
      $L_addr=$L;
      $mode_addr=$mode;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      $g=$1;
      var $2=$mode_addr;
      var $3=$g;
      var $gckind=(($3+54)|0);
      var $4=HEAP8[($gckind)];
      var $conv=(($4)&255);
      var $cmp=(($2)|0)==(($conv)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 7; break;
    case 4: 
      var $5=$mode_addr;
      var $cmp2=(($5)|0)==2;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$L_addr;
      _luaC_runtilstate($6, 1);
      var $7=$g;
      var $totalbytes=(($7+8)|0);
      var $8=HEAP32[(($totalbytes)>>2)];
      var $9=$g;
      var $GCdebt=(($9+12)|0);
      var $10=HEAP32[(($GCdebt)>>2)];
      var $add=((($8)+($10))|0);
      var $11=$g;
      var $GCestimate=(($11+20)|0);
      HEAP32[(($GCestimate)>>2)]=$add;
      var $12=$g;
      var $gckind5=(($12+54)|0);
      HEAP8[($gckind5)]=2;
      label = 7; break;
    case 6: 
      var $13=$g;
      var $gckind6=(($13+54)|0);
      HEAP8[($gckind6)]=0;
      var $14=$L_addr;
      var $call=_entersweep($14);
      var $15=$L_addr;
      _luaC_runtilstate($15, -29);
      label = 7; break;
    case 7: 

      return;
  }

}


function _luaC_runtilstate($L, $statesmask) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $statesmask_addr;
      var $g;
      $L_addr=$L;
      $statesmask_addr=$statesmask;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      $g=$1;
      label = 3; break;
    case 3: 
      var $2=$statesmask_addr;
      var $3=$g;
      var $gcstate=(($3+53)|0);
      var $4=HEAP8[($gcstate)];
      var $conv=(($4)&255);
      var $shl=1 << $conv;
      var $and=$2 & $shl;
      var $tobool=(($and)|0)!=0;
      var $lnot=$tobool ^ 1;
      if ($lnot) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $5=$L_addr;
      var $call=_singlestep($5);
      label = 3; break;
    case 5: 

      return;
  }

}


function _entersweep($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);

  var $L_addr;
  var $g;
  var $n=__stackBase__;
  $L_addr=$L;
  var $0=$L_addr;
  var $l_G=(($0+12)|0);
  var $1=HEAP32[(($l_G)>>2)];
  $g=$1;
  HEAP32[(($n)>>2)]=0;
  var $2=$g;
  var $gcstate=(($2+53)|0);
  HEAP8[($gcstate)]=2;
  var $3=$g;
  var $sweepstrgc=(($3+56)|0);
  HEAP32[(($sweepstrgc)>>2)]=0;
  var $4=$L_addr;
  var $5=$g;
  var $finobj=(($5+64)|0);
  var $call=_sweeptolive($4, $finobj, $n);
  var $6=$g;
  var $sweepfin=(($6+72)|0);
  HEAP32[(($sweepfin)>>2)]=$call;
  var $7=$L_addr;
  var $8=$g;
  var $allgc=(($8+60)|0);
  var $call1=_sweeptolive($7, $allgc, $n);
  var $9=$g;
  var $sweepgc=(($9+68)|0);
  HEAP32[(($sweepgc)>>2)]=$call1;
  var $10=HEAP32[(($n)>>2)];
  STACKTOP = __stackBase__;
  return $10;
}


function _luaC_freeallobjects($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $g;
      var $i;
      $L_addr=$L;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      $g=$1;
      var $2=$L_addr;
      _separatetobefnz($2, 1);
      var $3=$L_addr;
      _callallpendingfinalizers($3, 0);
      var $4=$g;
      var $currentwhite=(($4+52)|0);
      HEAP8[($currentwhite)]=3;
      var $5=$g;
      var $gckind=(($5+54)|0);
      HEAP8[($gckind)]=0;
      var $6=$L_addr;
      var $7=$g;
      var $finobj=(($7+64)|0);
      var $call=_sweeplist($6, $finobj, -3);
      var $8=$L_addr;
      var $9=$g;
      var $allgc=(($9+60)|0);
      var $call1=_sweeplist($8, $allgc, -3);
      $i=0;
      label = 3; break;
    case 3: 
      var $10=$i;
      var $11=$g;
      var $strt=(($11+24)|0);
      var $size=(($strt+8)|0);
      var $12=HEAP32[(($size)>>2)];
      var $cmp=(($10)|0) < (($12)|0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $13=$L_addr;
      var $14=$i;
      var $15=$g;
      var $strt2=(($15+24)|0);
      var $hash=(($strt2)|0);
      var $16=HEAP32[(($hash)>>2)];
      var $arrayidx=(($16+($14<<2))|0);
      var $call3=_sweeplist($13, $arrayidx, -3);
      label = 5; break;
    case 5: 
      var $17=$i;
      var $inc=((($17)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 

      return;
  }

}


function _callallpendingfinalizers($L, $propagateerrors) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $propagateerrors_addr;
      var $g;
      $L_addr=$L;
      $propagateerrors_addr=$propagateerrors;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      $g=$1;
      label = 3; break;
    case 3: 
      var $2=$g;
      var $tobefnz=(($2+96)|0);
      var $3=HEAP32[(($tobefnz)>>2)];
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$g;
      var $tobefnz1=(($4+96)|0);
      var $5=HEAP32[(($tobefnz1)>>2)];
      var $gch=$5;
      var $marked=(($gch+5)|0);
      var $6=HEAP8[($marked)];
      var $conv=(($6)&255);
      var $and=$conv & 191;
      var $conv2=(($and) & 255);
      HEAP8[($marked)]=$conv2;
      var $7=$L_addr;
      var $8=$propagateerrors_addr;
      _GCTM($7, $8);
      label = 3; break;
    case 5: 

      return;
  }

}


function _sweeplist($L, $p, $count) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $p_addr;
      var $count_addr;
      var $g;
      var $ow;
      var $toclear;
      var $toset;
      var $tostop;
      var $curr;
      var $marked;
      $L_addr=$L;
      $p_addr=$p;
      $count_addr=$count;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      $g=$1;
      var $2=$g;
      var $currentwhite=(($2+52)|0);
      var $3=HEAP8[($currentwhite)];
      var $conv=(($3)&255);
      var $xor=$conv ^ 3;
      $ow=$xor;
      var $4=$g;
      var $gckind=(($4+54)|0);
      var $5=HEAP8[($gckind)];
      var $conv1=(($5)&255);
      var $cmp=(($conv1)|0)==2;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $toclear=-1;
      $toset=64;
      $tostop=64;
      label = 5; break;
    case 4: 
      $toclear=-72;
      var $6=$g;
      var $currentwhite3=(($6+52)|0);
      var $7=HEAP8[($currentwhite3)];
      var $conv4=(($7)&255);
      var $and=$conv4 & 3;
      var $conv5=(($and) & 255);
      var $conv6=(($conv5)&255);
      $toset=$conv6;
      $tostop=0;
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $8=$p_addr;
      var $9=HEAP32[(($8)>>2)];
      var $cmp7=(($9)|0)!=0;
      if ($cmp7) { label = 7; break; } else { var $11 = 0;label = 8; break; }
    case 7: 
      var $10=$count_addr;
      var $dec=((($10)-(1))|0);
      $count_addr=$dec;
      var $cmp9=(($10)>>>0) > 0;
      var $11 = $cmp9;label = 8; break;
    case 8: 
      var $11;
      if ($11) { label = 9; break; } else { label = 17; break; }
    case 9: 
      var $12=$p_addr;
      var $13=HEAP32[(($12)>>2)];
      $curr=$13;
      var $14=$curr;
      var $gch=$14;
      var $marked11=(($gch+5)|0);
      var $15=HEAP8[($marked11)];
      var $conv12=(($15)&255);
      $marked=$conv12;
      var $16=$marked;
      var $xor13=$16 ^ 3;
      var $17=$ow;
      var $and14=$xor13 & $17;
      var $tobool=(($and14)|0)!=0;
      if ($tobool) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $18=$curr;
      var $gch16=$18;
      var $next=(($gch16)|0);
      var $19=HEAP32[(($next)>>2)];
      var $20=$p_addr;
      HEAP32[(($20)>>2)]=$19;
      var $21=$L_addr;
      var $22=$curr;
      _freeobj($21, $22);
      label = 16; break;
    case 11: 
      var $23=$marked;
      var $24=$tostop;
      var $and18=$23 & $24;
      var $tobool19=(($and18)|0)!=0;
      if ($tobool19) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $retval=0;
      label = 21; break;
    case 13: 
      var $25=$curr;
      var $gch22=$25;
      var $tt=(($gch22+4)|0);
      var $26=HEAP8[($tt)];
      var $conv23=(($26)&255);
      var $cmp24=(($conv23)|0)==8;
      if ($cmp24) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $27=$L_addr;
      var $28=$curr;
      var $th=$28;
      _sweepthread($27, $th);
      label = 15; break;
    case 15: 
      var $29=$marked;
      var $30=$toclear;
      var $and28=$29 & $30;
      var $31=$toset;
      var $or=$and28 | $31;
      var $conv29=(($or) & 255);
      var $32=$curr;
      var $gch30=$32;
      var $marked31=(($gch30+5)|0);
      HEAP8[($marked31)]=$conv29;
      var $33=$curr;
      var $gch32=$33;
      var $next33=(($gch32)|0);
      $p_addr=$next33;
      label = 16; break;
    case 16: 
      label = 6; break;
    case 17: 
      var $34=$p_addr;
      var $35=HEAP32[(($34)>>2)];
      var $cmp35=(($35)|0)==0;
      if ($cmp35) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $cond = 0;label = 20; break;
    case 19: 
      var $36=$p_addr;
      var $cond = $36;label = 20; break;
    case 20: 
      var $cond;
      $retval=$cond;
      label = 21; break;
    case 21: 
      var $37=$retval;

      return $37;
  }

}
_sweeplist["X"]=1;

function _singlestep($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $g;
      var $oldtrav;
      var $work;
      var $sw;
      var $i;
      var $mt=__stackBase__;
      $L_addr=$L;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      $g=$1;
      var $2=$g;
      var $gcstate=(($2+53)|0);
      var $3=HEAP8[($gcstate)];
      var $conv=(($3)&255);
      if ((($conv)|0)==5) {
        label = 3; break;
      }
      else if ((($conv)|0)==0) {
        label = 6; break;
      }
      else if ((($conv)|0)==2) {
        label = 9; break;
      }
      else if ((($conv)|0)==3) {
        label = 18; break;
      }
      else if ((($conv)|0)==4) {
        label = 21; break;
      }
      else {
      label = 24; break;
      }
      
    case 3: 
      var $4=$g;
      var $GCmemtrav=(($4+16)|0);
      HEAP32[(($GCmemtrav)>>2)]=0;
      var $5=$g;
      var $gckind=(($5+54)|0);
      var $6=HEAP8[($gckind)];
      var $conv1=(($6)&255);
      var $cmp=(($conv1)|0)==2;
      if ($cmp) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $7=$g;
      _markroot($7);
      label = 5; break;
    case 5: 
      var $8=$g;
      var $gcstate3=(($8+53)|0);
      HEAP8[($gcstate3)]=0;
      var $9=$g;
      var $GCmemtrav4=(($9+16)|0);
      var $10=HEAP32[(($GCmemtrav4)>>2)];
      $retval=$10;
      label = 25; break;
    case 6: 
      var $11=$g;
      var $gray=(($11+76)|0);
      var $12=HEAP32[(($gray)>>2)];
      var $tobool=(($12)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $13=$g;
      var $GCmemtrav7=(($13+16)|0);
      var $14=HEAP32[(($GCmemtrav7)>>2)];
      $oldtrav=$14;
      var $15=$g;
      _propagatemark($15);
      var $16=$g;
      var $GCmemtrav8=(($16+16)|0);
      var $17=HEAP32[(($GCmemtrav8)>>2)];
      var $18=$oldtrav;
      var $sub=((($17)-($18))|0);
      $retval=$sub;
      label = 25; break;
    case 8: 
      var $19=$g;
      var $gcstate9=(($19+53)|0);
      HEAP8[($gcstate9)]=1;
      var $20=$g;
      var $GCmemtrav10=(($20+16)|0);
      var $21=HEAP32[(($GCmemtrav10)>>2)];
      var $22=$g;
      var $GCestimate=(($22+20)|0);
      HEAP32[(($GCestimate)>>2)]=$21;
      var $23=$L_addr;
      var $call=_atomic($23);
      $work=$call;
      var $24=$work;
      var $25=$g;
      var $GCestimate11=(($25+20)|0);
      var $26=HEAP32[(($GCestimate11)>>2)];
      var $add=((($26)+($24))|0);
      HEAP32[(($GCestimate11)>>2)]=$add;
      var $27=$L_addr;
      var $call12=_entersweep($27);
      $sw=$call12;
      var $28=$work;
      var $29=$sw;
      var $mul=((($29)*(5))&-1);
      var $add13=((($28)+($mul))|0);
      $retval=$add13;
      label = 25; break;
    case 9: 
      $i=0;
      label = 10; break;
    case 10: 
      var $30=$i;
      var $cmp15=(($30)|0) < 80;
      if ($cmp15) { label = 11; break; } else { var $36 = 0;label = 12; break; }
    case 11: 
      var $31=$g;
      var $sweepstrgc=(($31+56)|0);
      var $32=HEAP32[(($sweepstrgc)>>2)];
      var $33=$i;
      var $add17=((($32)+($33))|0);
      var $34=$g;
      var $strt=(($34+24)|0);
      var $size=(($strt+8)|0);
      var $35=HEAP32[(($size)>>2)];
      var $cmp18=(($add17)|0) < (($35)|0);
      var $36 = $cmp18;label = 12; break;
    case 12: 
      var $36;
      if ($36) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $37=$L_addr;
      var $38=$g;
      var $sweepstrgc20=(($38+56)|0);
      var $39=HEAP32[(($sweepstrgc20)>>2)];
      var $40=$i;
      var $add21=((($39)+($40))|0);
      var $41=$g;
      var $strt22=(($41+24)|0);
      var $hash=(($strt22)|0);
      var $42=HEAP32[(($hash)>>2)];
      var $arrayidx=(($42+($add21<<2))|0);
      var $call23=_sweeplist($37, $arrayidx, -3);
      label = 14; break;
    case 14: 
      var $43=$i;
      var $inc=((($43)+(1))|0);
      $i=$inc;
      label = 10; break;
    case 15: 
      var $44=$i;
      var $45=$g;
      var $sweepstrgc24=(($45+56)|0);
      var $46=HEAP32[(($sweepstrgc24)>>2)];
      var $add25=((($46)+($44))|0);
      HEAP32[(($sweepstrgc24)>>2)]=$add25;
      var $47=$g;
      var $sweepstrgc26=(($47+56)|0);
      var $48=HEAP32[(($sweepstrgc26)>>2)];
      var $49=$g;
      var $strt27=(($49+24)|0);
      var $size28=(($strt27+8)|0);
      var $50=HEAP32[(($size28)>>2)];
      var $cmp29=(($48)|0) >= (($50)|0);
      if ($cmp29) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $51=$g;
      var $gcstate32=(($51+53)|0);
      HEAP8[($gcstate32)]=3;
      label = 17; break;
    case 17: 
      var $52=$i;
      var $mul34=((($52)*(5))&-1);
      $retval=$mul34;
      label = 25; break;
    case 18: 
      var $53=$g;
      var $sweepfin=(($53+72)|0);
      var $54=HEAP32[(($sweepfin)>>2)];
      var $tobool36=(($54)|0)!=0;
      if ($tobool36) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $55=$L_addr;
      var $56=$g;
      var $sweepfin38=(($56+72)|0);
      var $57=HEAP32[(($sweepfin38)>>2)];
      var $call39=_sweeplist($55, $57, 80);
      var $58=$g;
      var $sweepfin40=(($58+72)|0);
      HEAP32[(($sweepfin40)>>2)]=$call39;
      $retval=400;
      label = 25; break;
    case 20: 
      var $59=$g;
      var $gcstate42=(($59+53)|0);
      HEAP8[($gcstate42)]=4;
      $retval=0;
      label = 25; break;
    case 21: 
      var $60=$g;
      var $sweepgc=(($60+68)|0);
      var $61=HEAP32[(($sweepgc)>>2)];
      var $tobool44=(($61)|0)!=0;
      if ($tobool44) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $62=$L_addr;
      var $63=$g;
      var $sweepgc46=(($63+68)|0);
      var $64=HEAP32[(($sweepgc46)>>2)];
      var $call47=_sweeplist($62, $64, 80);
      var $65=$g;
      var $sweepgc48=(($65+68)|0);
      HEAP32[(($sweepgc48)>>2)]=$call47;
      $retval=400;
      label = 25; break;
    case 23: 
      var $66=$g;
      var $mainthread=(($66+152)|0);
      var $67=HEAP32[(($mainthread)>>2)];
      var $68=$67;
      HEAP32[(($mt)>>2)]=$68;
      var $69=$L_addr;
      var $call50=_sweeplist($69, $mt, 1);
      var $70=$L_addr;
      _checkSizes($70);
      var $71=$g;
      var $gcstate51=(($71+53)|0);
      HEAP8[($gcstate51)]=5;
      $retval=5;
      label = 25; break;
    case 24: 
      $retval=0;
      label = 25; break;
    case 25: 
      var $72=$retval;
      STACKTOP = __stackBase__;
      return $72;
  }

}
_singlestep["X"]=1;

function _luaC_forcestep($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $g;
      var $i;
      $L_addr=$L;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      $g=$1;
      var $2=$g;
      var $gckind=(($2+54)|0);
      var $3=HEAP8[($gckind)];
      var $conv=(($3)&255);
      var $cmp=(($conv)|0)==2;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$L_addr;
      _generationalcollection($4);
      label = 5; break;
    case 4: 
      var $5=$L_addr;
      _incstep($5);
      label = 5; break;
    case 5: 
      $i=0;
      label = 6; break;
    case 6: 
      var $6=$g;
      var $tobefnz=(($6+96)|0);
      var $7=HEAP32[(($tobefnz)>>2)];
      var $tobool=(($7)|0)!=0;
      if ($tobool) { label = 7; break; } else { var $12 = 0;label = 10; break; }
    case 7: 
      var $8=$i;
      var $cmp2=(($8)|0) < 4;
      if ($cmp2) { var $11 = 1;label = 9; break; } else { label = 8; break; }
    case 8: 
      var $9=$g;
      var $gcstate=(($9+53)|0);
      var $10=HEAP8[($gcstate)];
      var $conv4=(($10)&255);
      var $cmp5=(($conv4)|0)==5;
      var $11 = $cmp5;label = 9; break;
    case 9: 
      var $11;
      var $12 = $11;label = 10; break;
    case 10: 
      var $12;
      if ($12) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $13=$L_addr;
      _GCTM($13, 1);
      label = 12; break;
    case 12: 
      var $14=$i;
      var $inc=((($14)+(1))|0);
      $i=$inc;
      label = 6; break;
    case 13: 

      return;
  }

}


function _generationalcollection($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $g;
      var $estimate;
      $L_addr=$L;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      $g=$1;
      var $2=$g;
      var $GCestimate=(($2+20)|0);
      var $3=HEAP32[(($GCestimate)>>2)];
      var $cmp=(($3)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$L_addr;
      _luaC_fullgc($4, 0);
      var $5=$g;
      var $totalbytes=(($5+8)|0);
      var $6=HEAP32[(($totalbytes)>>2)];
      var $7=$g;
      var $GCdebt=(($7+12)|0);
      var $8=HEAP32[(($GCdebt)>>2)];
      var $add=((($6)+($8))|0);
      var $9=$g;
      var $GCestimate1=(($9+20)|0);
      HEAP32[(($GCestimate1)>>2)]=$add;
      label = 7; break;
    case 4: 
      var $10=$g;
      var $GCestimate2=(($10+20)|0);
      var $11=HEAP32[(($GCestimate2)>>2)];
      $estimate=$11;
      var $12=$L_addr;
      _luaC_runtilstate($12, -33);
      var $13=$L_addr;
      _luaC_runtilstate($13, 32);
      var $14=$g;
      var $totalbytes3=(($14+8)|0);
      var $15=HEAP32[(($totalbytes3)>>2)];
      var $16=$g;
      var $GCdebt4=(($16+12)|0);
      var $17=HEAP32[(($GCdebt4)>>2)];
      var $add5=((($15)+($17))|0);
      var $18=$estimate;
      var $div=Math.floor(((($18)>>>0))/(100));
      var $19=$g;
      var $gcmajorinc=(($19+140)|0);
      var $20=HEAP32[(($gcmajorinc)>>2)];
      var $mul=Math.imul($div,$20);
      var $cmp6=(($add5)>>>0) > (($mul)>>>0);
      if ($cmp6) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $21=$g;
      var $GCestimate8=(($21+20)|0);
      HEAP32[(($GCestimate8)>>2)]=0;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $22=$g;
      var $23=$g;
      var $totalbytes10=(($23+8)|0);
      var $24=HEAP32[(($totalbytes10)>>2)];
      var $25=$g;
      var $GCdebt11=(($25+12)|0);
      var $26=HEAP32[(($GCdebt11)>>2)];
      var $add12=((($24)+($26))|0);
      var $div13=Math.floor(((($add12)>>>0))/(200));
      var $sub=(((-$div13))|0);
      var $27=$g;
      var $gcpause=(($27+136)|0);
      var $28=HEAP32[(($gcpause)>>2)];
      var $mul14=Math.imul($sub,$28);
      _luaE_setdebt($22, $mul14);

      return;
  }

}
_generationalcollection["X"]=1;

function _udata2finalize($g) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $o;
      $g_addr=$g;
      var $0=$g_addr;
      var $tobefnz=(($0+96)|0);
      var $1=HEAP32[(($tobefnz)>>2)];
      $o=$1;
      var $2=$o;
      var $gch=$2;
      var $next=(($gch)|0);
      var $3=HEAP32[(($next)>>2)];
      var $4=$g_addr;
      var $tobefnz1=(($4+96)|0);
      HEAP32[(($tobefnz1)>>2)]=$3;
      var $5=$g_addr;
      var $allgc=(($5+60)|0);
      var $6=HEAP32[(($allgc)>>2)];
      var $7=$o;
      var $gch2=$7;
      var $next3=(($gch2)|0);
      HEAP32[(($next3)>>2)]=$6;
      var $8=$o;
      var $9=$g_addr;
      var $allgc4=(($9+60)|0);
      HEAP32[(($allgc4)>>2)]=$8;
      var $10=$o;
      var $gch5=$10;
      var $marked=(($gch5+5)|0);
      var $11=HEAP8[($marked)];
      var $conv=(($11)&255);
      var $and=$conv & 239;
      var $conv6=(($and) & 255);
      HEAP8[($marked)]=$conv6;
      var $12=$g_addr;
      var $gckind=(($12+54)|0);
      var $13=HEAP8[($gckind)];
      var $conv7=(($13)&255);
      var $cmp=(($conv7)|0)==2;
      if ($cmp) { label = 5; break; } else { label = 3; break; }
    case 3: 
      var $14=$g_addr;
      var $gcstate=(($14+53)|0);
      var $15=HEAP8[($gcstate)];
      var $conv9=(($15)&255);
      var $cmp10=(($conv9)|0) <= 1;
      if ($cmp10) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $16=$o;
      var $gch12=$16;
      var $marked13=(($gch12+5)|0);
      var $17=HEAP8[($marked13)];
      var $conv14=(($17)&255);
      var $and15=$conv14 & -72;
      var $18=$g_addr;
      var $currentwhite=(($18+52)|0);
      var $19=HEAP8[($currentwhite)];
      var $conv16=(($19)&255);
      var $and17=$conv16 & 3;
      var $conv18=(($and17) & 255);
      var $conv19=(($conv18)&255);
      var $or=$and15 | $conv19;
      var $conv20=(($or) & 255);
      var $20=$o;
      var $gch21=$20;
      var $marked22=(($gch21+5)|0);
      HEAP8[($marked22)]=$conv20;
      label = 5; break;
    case 5: 
      var $21=$o;

      return $21;
  }

}
_udata2finalize["X"]=1;

function _incstep($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $g;
      var $debt;
      var $stepmul;
      var $work;
      $L_addr=$L;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      $g=$1;
      var $2=$g;
      var $GCdebt=(($2+12)|0);
      var $3=HEAP32[(($GCdebt)>>2)];
      $debt=$3;
      var $4=$g;
      var $gcstepmul=(($4+144)|0);
      var $5=HEAP32[(($gcstepmul)>>2)];
      $stepmul=$5;
      var $6=$stepmul;
      var $cmp=(($6)|0) < 40;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $stepmul=40;
      label = 4; break;
    case 4: 
      var $7=$debt;
      var $div=((((($7)|0))/(200))&-1);
      var $add=((($div)+(1))|0);
      $debt=$add;
      var $8=$debt;
      var $9=$stepmul;
      var $div1=(((2147483644)/((($9)|0)))&-1);
      var $cmp2=(($8)|0) < (($div1)|0);
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $10=$debt;
      var $11=$stepmul;
      var $mul=Math.imul($10,$11);
      var $cond = $mul;label = 7; break;
    case 6: 
      var $cond = 2147483644;label = 7; break;
    case 7: 
      var $cond;
      $debt=$cond;
      label = 8; break;
    case 8: 
      var $12=$L_addr;
      var $call=_singlestep($12);
      $work=$call;
      var $13=$work;
      var $14=$debt;
      var $sub=((($14)-($13))|0);
      $debt=$sub;
      label = 9; break;
    case 9: 
      var $15=$debt;
      var $cmp3=(($15)|0) > -1600;
      if ($cmp3) { label = 10; break; } else { var $18 = 0;label = 11; break; }
    case 10: 
      var $16=$g;
      var $gcstate=(($16+53)|0);
      var $17=HEAP8[($gcstate)];
      var $conv=(($17)&255);
      var $cmp4=(($conv)|0)!=5;
      var $18 = $cmp4;label = 11; break;
    case 11: 
      var $18;
      if ($18) { label = 8; break; } else { label = 12; break; }
    case 12: 
      var $19=$g;
      var $gcstate6=(($19+53)|0);
      var $20=HEAP8[($gcstate6)];
      var $conv7=(($20)&255);
      var $cmp8=(($conv7)|0)==5;
      if ($cmp8) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $21=$g;
      var $GCestimate=(($21+20)|0);
      var $22=HEAP32[(($GCestimate)>>2)];
      var $div11=Math.floor(((($22)>>>0))/(200));
      var $sub12=(((-$div11))|0);
      var $23=$g;
      var $gcpause=(($23+136)|0);
      var $24=HEAP32[(($gcpause)>>2)];
      var $mul13=Math.imul($sub12,$24);
      $debt=$mul13;
      label = 15; break;
    case 14: 
      var $25=$debt;
      var $26=$stepmul;
      var $div14=((((($25)|0))/((($26)|0)))&-1);
      var $mul15=((($div14)*(200))&-1);
      $debt=$mul15;
      label = 15; break;
    case 15: 
      var $27=$g;
      var $28=$debt;
      _luaE_setdebt($27, $28);

      return;
  }

}
_incstep["X"]=1;

function _luaC_step($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $g;
      $L_addr=$L;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      $g=$1;
      var $2=$g;
      var $gcrunning=(($2+55)|0);
      var $3=HEAP8[($gcrunning)];
      var $tobool=(($3 << 24) >> 24)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$L_addr;
      _luaC_forcestep($4);
      label = 5; break;
    case 4: 
      var $5=$g;
      _luaE_setdebt($5, -1600);
      label = 5; break;
    case 5: 

      return;
  }

}


function _luaC_fullgc($L, $isemergency) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $isemergency_addr;
      var $g;
      var $origkind;
      var $someblack;
      $L_addr=$L;
      $isemergency_addr=$isemergency;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      $g=$1;
      var $2=$g;
      var $gckind=(($2+54)|0);
      var $3=HEAP8[($gckind)];
      var $conv=(($3)&255);
      $origkind=$conv;
      var $4=$g;
      var $gckind1=(($4+54)|0);
      var $5=HEAP8[($gckind1)];
      var $conv2=(($5)&255);
      var $cmp=(($conv2)|0)==2;
      if ($cmp) { var $8 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $6=$g;
      var $gcstate=(($6+53)|0);
      var $7=HEAP8[($gcstate)];
      var $conv4=(($7)&255);
      var $cmp5=(($conv4)|0) <= 1;
      var $8 = $cmp5;label = 4; break;
    case 4: 
      var $8;
      var $lor_ext=(($8)&1);
      $someblack=$lor_ext;
      var $9=$isemergency_addr;
      var $tobool=(($9)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $10=$g;
      var $gckind7=(($10+54)|0);
      HEAP8[($gckind7)]=1;
      label = 7; break;
    case 6: 
      var $11=$g;
      var $gckind8=(($11+54)|0);
      HEAP8[($gckind8)]=0;
      var $12=$L_addr;
      _callallpendingfinalizers($12, 1);
      label = 7; break;
    case 7: 
      var $13=$someblack;
      var $tobool9=(($13)|0)!=0;
      if ($tobool9) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $14=$L_addr;
      var $call=_entersweep($14);
      label = 9; break;
    case 9: 
      var $15=$L_addr;
      _luaC_runtilstate($15, 32);
      var $16=$L_addr;
      _luaC_runtilstate($16, -33);
      var $17=$L_addr;
      _luaC_runtilstate($17, 32);
      var $18=$origkind;
      var $cmp12=(($18)|0)==2;
      if ($cmp12) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $19=$L_addr;
      _luaC_runtilstate($19, 1);
      label = 11; break;
    case 11: 
      var $20=$origkind;
      var $conv16=(($20) & 255);
      var $21=$g;
      var $gckind17=(($21+54)|0);
      HEAP8[($gckind17)]=$conv16;
      var $22=$g;
      var $23=$g;
      var $totalbytes=(($23+8)|0);
      var $24=HEAP32[(($totalbytes)>>2)];
      var $25=$g;
      var $GCdebt=(($25+12)|0);
      var $26=HEAP32[(($GCdebt)>>2)];
      var $add=((($24)+($26))|0);
      var $div=Math.floor(((($add)>>>0))/(200));
      var $sub=(((-$div))|0);
      var $27=$g;
      var $gcpause=(($27+136)|0);
      var $28=HEAP32[(($gcpause)>>2)];
      var $mul=Math.imul($sub,$28);
      _luaE_setdebt($22, $mul);
      var $29=$isemergency_addr;
      var $tobool18=(($29)|0)!=0;
      if ($tobool18) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $30=$L_addr;
      _callallpendingfinalizers($30, 1);
      label = 13; break;
    case 13: 

      return;
  }

}
_luaC_fullgc["X"]=1;

function _dothecall($L, $ud) {
  var label = 0;


  var $L_addr;
  var $ud_addr;
  $L_addr=$L;
  $ud_addr=$ud;
  var $0=$ud_addr;
  var $1=$L_addr;
  var $2=$L_addr;
  var $top=(($2+8)|0);
  var $3=HEAP32[(($top)>>2)];
  var $add_ptr=((($3)-(24))|0);
  _luaD_call($1, $add_ptr, 0, 0);

  return;
}


function _markroot($g) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      $g_addr=$g;
      var $0=$g_addr;
      var $grayagain=(($0+80)|0);
      HEAP32[(($grayagain)>>2)]=0;
      var $1=$g_addr;
      var $gray=(($1+76)|0);
      HEAP32[(($gray)>>2)]=0;
      var $2=$g_addr;
      var $ephemeron=(($2+88)|0);
      HEAP32[(($ephemeron)>>2)]=0;
      var $3=$g_addr;
      var $allweak=(($3+92)|0);
      HEAP32[(($allweak)>>2)]=0;
      var $4=$g_addr;
      var $weak=(($4+84)|0);
      HEAP32[(($weak)>>2)]=0;
      var $5=$g_addr;
      var $mainthread=(($5+152)|0);
      var $6=HEAP32[(($mainthread)>>2)];
      var $tobool=(($6)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $7=$g_addr;
      var $mainthread1=(($7+152)|0);
      var $8=HEAP32[(($mainthread1)>>2)];
      var $9=$8;
      var $gch=$9;
      var $marked=(($gch+5)|0);
      var $10=HEAP8[($marked)];
      var $conv=(($10)&255);
      var $and=$conv & 3;
      var $tobool2=(($and)|0)!=0;
      if ($tobool2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $11=$g_addr;
      var $12=$g_addr;
      var $mainthread3=(($12+152)|0);
      var $13=HEAP32[(($mainthread3)>>2)];
      var $14=$13;
      _reallymarkobject($11, $14);
      label = 5; break;
    case 5: 
      var $15=$g_addr;
      var $l_registry=(($15+36)|0);
      var $tt_=(($l_registry+8)|0);
      var $16=HEAP32[(($tt_)>>2)];
      var $and4=$16 & 64;
      var $tobool5=(($and4)|0)!=0;
      if ($tobool5) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $17=$g_addr;
      var $l_registry7=(($17+36)|0);
      var $value_=(($l_registry7)|0);
      var $gc=$value_;
      var $18=HEAP32[(($gc)>>2)];
      var $gch8=$18;
      var $marked9=(($gch8+5)|0);
      var $19=HEAP8[($marked9)];
      var $conv10=(($19)&255);
      var $and11=$conv10 & 3;
      var $tobool12=(($and11)|0)!=0;
      if ($tobool12) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $20=$g_addr;
      var $21=$g_addr;
      var $l_registry14=(($21+36)|0);
      var $value_15=(($l_registry14)|0);
      var $gc16=$value_15;
      var $22=HEAP32[(($gc16)>>2)];
      _reallymarkobject($20, $22);
      label = 8; break;
    case 8: 
      var $23=$g_addr;
      _markmt($23);
      var $24=$g_addr;
      _markbeingfnz($24);

      return;
  }

}
_markroot["X"]=1;

function _propagatemark($g) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $size;
      var $o;
      var $h;
      var $cl;
      var $cl12;
      var $th;
      var $p;
      $g_addr=$g;
      var $0=$g_addr;
      var $gray=(($0+76)|0);
      var $1=HEAP32[(($gray)>>2)];
      $o=$1;
      var $2=$o;
      var $gch=$2;
      var $marked=(($gch+5)|0);
      var $3=HEAP8[($marked)];
      var $conv=(($3)&255);
      var $or=$conv | 4;
      var $conv1=(($or) & 255);
      HEAP8[($marked)]=$conv1;
      var $4=$o;
      var $gch2=$4;
      var $tt=(($gch2+4)|0);
      var $5=HEAP8[($tt)];
      var $conv3=(($5)&255);
      if ((($conv3)|0)==5) {
        label = 3; break;
      }
      else if ((($conv3)|0)==6) {
        label = 4; break;
      }
      else if ((($conv3)|0)==38) {
        label = 5; break;
      }
      else if ((($conv3)|0)==8) {
        label = 6; break;
      }
      else if ((($conv3)|0)==9) {
        label = 7; break;
      }
      else {
      label = 8; break;
      }
      
    case 3: 
      var $6=$o;
      var $h4=$6;
      $h=$h4;
      var $7=$h;
      var $gclist=(($7+24)|0);
      var $8=HEAP32[(($gclist)>>2)];
      var $9=$g_addr;
      var $gray5=(($9+76)|0);
      HEAP32[(($gray5)>>2)]=$8;
      var $10=$g_addr;
      var $11=$h;
      var $call=_traversetable($10, $11);
      $size=$call;
      label = 9; break;
    case 4: 
      var $12=$o;
      var $cl7=$12;
      var $l=$cl7;
      $cl=$l;
      var $13=$cl;
      var $gclist8=(($13+8)|0);
      var $14=HEAP32[(($gclist8)>>2)];
      var $15=$g_addr;
      var $gray9=(($15+76)|0);
      HEAP32[(($gray9)>>2)]=$14;
      var $16=$g_addr;
      var $17=$cl;
      var $call10=_traverseLclosure($16, $17);
      $size=$call10;
      label = 9; break;
    case 5: 
      var $18=$o;
      var $cl13=$18;
      var $c=$cl13;
      $cl12=$c;
      var $19=$cl12;
      var $gclist14=(($19+8)|0);
      var $20=HEAP32[(($gclist14)>>2)];
      var $21=$g_addr;
      var $gray15=(($21+76)|0);
      HEAP32[(($gray15)>>2)]=$20;
      var $22=$g_addr;
      var $23=$cl12;
      var $call16=_traverseCclosure($22, $23);
      $size=$call16;
      label = 9; break;
    case 6: 
      var $24=$o;
      var $th18=$24;
      $th=$th18;
      var $25=$th;
      var $gclist19=(($25+60)|0);
      var $26=HEAP32[(($gclist19)>>2)];
      var $27=$g_addr;
      var $gray20=(($27+76)|0);
      HEAP32[(($gray20)>>2)]=$26;
      var $28=$g_addr;
      var $grayagain=(($28+80)|0);
      var $29=HEAP32[(($grayagain)>>2)];
      var $30=$th;
      var $gclist21=(($30+60)|0);
      HEAP32[(($gclist21)>>2)]=$29;
      var $31=$o;
      var $32=$g_addr;
      var $grayagain22=(($32+80)|0);
      HEAP32[(($grayagain22)>>2)]=$31;
      var $33=$o;
      var $gch23=$33;
      var $marked24=(($gch23+5)|0);
      var $34=HEAP8[($marked24)];
      var $conv25=(($34)&255);
      var $and=$conv25 & 251;
      var $conv26=(($and) & 255);
      HEAP8[($marked24)]=$conv26;
      var $35=$g_addr;
      var $36=$th;
      var $call27=_traversestack($35, $36);
      $size=$call27;
      label = 9; break;
    case 7: 
      var $37=$o;
      var $p29=$37;
      $p=$p29;
      var $38=$p;
      var $gclist30=(($38+72)|0);
      var $39=HEAP32[(($gclist30)>>2)];
      var $40=$g_addr;
      var $gray31=(($40+76)|0);
      HEAP32[(($gray31)>>2)]=$39;
      var $41=$g_addr;
      var $42=$p;
      var $call32=_traverseproto($41, $42);
      $size=$call32;
      label = 9; break;
    case 8: 
      label = 10; break;
    case 9: 
      var $43=$size;
      var $44=$g_addr;
      var $GCmemtrav=(($44+16)|0);
      var $45=HEAP32[(($GCmemtrav)>>2)];
      var $add=((($45)+($43))|0);
      HEAP32[(($GCmemtrav)>>2)]=$add;
      label = 10; break;
    case 10: 

      return;
  }

}
_propagatemark["X"]=1;

function _atomic($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $g;
      var $work;
      var $origweak;
      var $origall;
      $L_addr=$L;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      $g=$1;
      var $2=$g;
      var $GCmemtrav=(($2+16)|0);
      var $3=HEAP32[(($GCmemtrav)>>2)];
      var $sub=(((-$3))|0);
      $work=$sub;
      var $4=$L_addr;
      var $tobool=(($4)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $5=$L_addr;
      var $6=$5;
      var $gch=$6;
      var $marked=(($gch+5)|0);
      var $7=HEAP8[($marked)];
      var $conv=(($7)&255);
      var $and=$conv & 3;
      var $tobool1=(($and)|0)!=0;
      if ($tobool1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $8=$g;
      var $9=$L_addr;
      var $10=$9;
      _reallymarkobject($8, $10);
      label = 5; break;
    case 5: 
      var $11=$g;
      var $l_registry=(($11+36)|0);
      var $tt_=(($l_registry+8)|0);
      var $12=HEAP32[(($tt_)>>2)];
      var $and2=$12 & 64;
      var $tobool3=(($and2)|0)!=0;
      if ($tobool3) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $13=$g;
      var $l_registry5=(($13+36)|0);
      var $value_=(($l_registry5)|0);
      var $gc=$value_;
      var $14=HEAP32[(($gc)>>2)];
      var $gch6=$14;
      var $marked7=(($gch6+5)|0);
      var $15=HEAP8[($marked7)];
      var $conv8=(($15)&255);
      var $and9=$conv8 & 3;
      var $tobool10=(($and9)|0)!=0;
      if ($tobool10) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $16=$g;
      var $17=$g;
      var $l_registry12=(($17+36)|0);
      var $value_13=(($l_registry12)|0);
      var $gc14=$value_13;
      var $18=HEAP32[(($gc14)>>2)];
      _reallymarkobject($16, $18);
      label = 8; break;
    case 8: 
      var $19=$g;
      _markmt($19);
      var $20=$g;
      _remarkupvals($20);
      var $21=$g;
      _propagateall($21);
      var $22=$g;
      var $GCmemtrav16=(($22+16)|0);
      var $23=HEAP32[(($GCmemtrav16)>>2)];
      var $24=$work;
      var $add=((($24)+($23))|0);
      $work=$add;
      var $25=$g;
      _retraversegrays($25);
      var $26=$g;
      var $GCmemtrav17=(($26+16)|0);
      var $27=HEAP32[(($GCmemtrav17)>>2)];
      var $28=$work;
      var $sub18=((($28)-($27))|0);
      $work=$sub18;
      var $29=$g;
      _convergeephemerons($29);
      var $30=$g;
      var $31=$g;
      var $weak=(($31+84)|0);
      var $32=HEAP32[(($weak)>>2)];
      _clearvalues($30, $32, 0);
      var $33=$g;
      var $34=$g;
      var $allweak=(($34+92)|0);
      var $35=HEAP32[(($allweak)>>2)];
      _clearvalues($33, $35, 0);
      var $36=$g;
      var $weak19=(($36+84)|0);
      var $37=HEAP32[(($weak19)>>2)];
      $origweak=$37;
      var $38=$g;
      var $allweak20=(($38+92)|0);
      var $39=HEAP32[(($allweak20)>>2)];
      $origall=$39;
      var $40=$g;
      var $GCmemtrav21=(($40+16)|0);
      var $41=HEAP32[(($GCmemtrav21)>>2)];
      var $42=$work;
      var $add22=((($42)+($41))|0);
      $work=$add22;
      var $43=$L_addr;
      _separatetobefnz($43, 0);
      var $44=$g;
      _markbeingfnz($44);
      var $45=$g;
      _propagateall($45);
      var $46=$g;
      var $GCmemtrav23=(($46+16)|0);
      var $47=HEAP32[(($GCmemtrav23)>>2)];
      var $48=$work;
      var $sub24=((($48)-($47))|0);
      $work=$sub24;
      var $49=$g;
      _convergeephemerons($49);
      var $50=$g;
      var $51=$g;
      var $ephemeron=(($51+88)|0);
      var $52=HEAP32[(($ephemeron)>>2)];
      _clearkeys($50, $52, 0);
      var $53=$g;
      var $54=$g;
      var $allweak25=(($54+92)|0);
      var $55=HEAP32[(($allweak25)>>2)];
      _clearkeys($53, $55, 0);
      var $56=$g;
      var $57=$g;
      var $weak26=(($57+84)|0);
      var $58=HEAP32[(($weak26)>>2)];
      var $59=$origweak;
      _clearvalues($56, $58, $59);
      var $60=$g;
      var $61=$g;
      var $allweak27=(($61+92)|0);
      var $62=HEAP32[(($allweak27)>>2)];
      var $63=$origall;
      _clearvalues($60, $62, $63);
      var $64=$g;
      var $currentwhite=(($64+52)|0);
      var $65=HEAP8[($currentwhite)];
      var $conv28=(($65)&255);
      var $xor=$conv28 ^ 3;
      var $conv29=(($xor) & 255);
      var $66=$g;
      var $currentwhite30=(($66+52)|0);
      HEAP8[($currentwhite30)]=$conv29;
      var $67=$g;
      var $GCmemtrav31=(($67+16)|0);
      var $68=HEAP32[(($GCmemtrav31)>>2)];
      var $69=$work;
      var $add32=((($69)+($68))|0);
      $work=$add32;
      var $70=$work;

      return $70;
  }

}
_atomic["X"]=1;

function _GCTM($L, $propagateerrors) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; _memset(__stackBase__, 0, 12);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $propagateerrors_addr;
      var $g;
      var $tm;
      var $v=__stackBase__;
      var $io;
      var $i_g;
      var $status;
      var $oldah;
      var $running;
      var $io2;
      var $io1;
      var $io213;
      var $io114;
      var $msg;
      $L_addr=$L;
      $propagateerrors_addr=$propagateerrors;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      $g=$1;
      $io=$v;
      var $2=$g;
      var $call=_udata2finalize($2);
      $i_g=$call;
      var $3=$i_g;
      var $4=$io;
      var $value_=(($4)|0);
      var $gc=$value_;
      HEAP32[(($gc)>>2)]=$3;
      var $5=$i_g;
      var $gch=$5;
      var $tt=(($gch+4)|0);
      var $6=HEAP8[($tt)];
      var $conv=(($6)&255);
      var $or=$conv | 64;
      var $7=$io;
      var $tt_=(($7+8)|0);
      HEAP32[(($tt_)>>2)]=$or;
      var $8=$L_addr;
      var $call1=_luaT_gettmbyobj($8, $v, 2);
      $tm=$call1;
      var $9=$tm;
      var $cmp=(($9)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 13; break; }
    case 3: 
      var $10=$tm;
      var $tt_3=(($10+8)|0);
      var $11=HEAP32[(($tt_3)>>2)];
      var $and=$11 & 15;
      var $cmp4=(($and)|0)==6;
      if ($cmp4) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $12=$L_addr;
      var $allowhook=(($12+41)|0);
      var $13=HEAP8[($allowhook)];
      $oldah=$13;
      var $14=$g;
      var $gcrunning=(($14+55)|0);
      var $15=HEAP8[($gcrunning)];
      var $conv6=(($15)&255);
      $running=$conv6;
      var $16=$L_addr;
      var $allowhook7=(($16+41)|0);
      HEAP8[($allowhook7)]=0;
      var $17=$g;
      var $gcrunning8=(($17+55)|0);
      HEAP8[($gcrunning8)]=0;
      var $18=$tm;
      $io2=$18;
      var $19=$L_addr;
      var $top=(($19+8)|0);
      var $20=HEAP32[(($top)>>2)];
      $io1=$20;
      var $21=$io1;
      var $value_9=(($21)|0);
      var $22=$io2;
      var $value_10=(($22)|0);
      var $23=$value_9;
      var $24=$value_10;
      HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];
      var $25=$io2;
      var $tt_11=(($25+8)|0);
      var $26=HEAP32[(($tt_11)>>2)];
      var $27=$io1;
      var $tt_12=(($27+8)|0);
      HEAP32[(($tt_12)>>2)]=$26;
      $io213=$v;
      var $28=$L_addr;
      var $top15=(($28+8)|0);
      var $29=HEAP32[(($top15)>>2)];
      var $add_ptr=(($29+12)|0);
      $io114=$add_ptr;
      var $30=$io114;
      var $value_16=(($30)|0);
      var $31=$io213;
      var $value_17=(($31)|0);
      var $32=$value_16;
      var $33=$value_17;
      HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)];
      var $34=$io213;
      var $tt_18=(($34+8)|0);
      var $35=HEAP32[(($tt_18)>>2)];
      var $36=$io114;
      var $tt_19=(($36+8)|0);
      HEAP32[(($tt_19)>>2)]=$35;
      var $37=$L_addr;
      var $top20=(($37+8)|0);
      var $38=HEAP32[(($top20)>>2)];
      var $add_ptr21=(($38+24)|0);
      HEAP32[(($top20)>>2)]=$add_ptr21;
      var $39=$L_addr;
      var $40=$L_addr;
      var $top22=(($40+8)|0);
      var $41=HEAP32[(($top22)>>2)];
      var $add_ptr23=((($41)-(24))|0);
      var $42=$add_ptr23;
      var $43=$L_addr;
      var $stack=(($43+28)|0);
      var $44=HEAP32[(($stack)>>2)];
      var $45=$44;
      var $sub_ptr_lhs_cast=$42;
      var $sub_ptr_rhs_cast=$45;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $call24=_luaD_pcall($39, 20, 0, $sub_ptr_sub, 0);
      $status=$call24;
      var $46=$oldah;
      var $47=$L_addr;
      var $allowhook25=(($47+41)|0);
      HEAP8[($allowhook25)]=$46;
      var $48=$running;
      var $conv26=(($48) & 255);
      var $49=$g;
      var $gcrunning27=(($49+55)|0);
      HEAP8[($gcrunning27)]=$conv26;
      var $50=$status;
      var $cmp28=(($50)|0)!=0;
      if ($cmp28) { label = 5; break; } else { label = 12; break; }
    case 5: 
      var $51=$propagateerrors_addr;
      var $tobool=(($51)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 12; break; }
    case 6: 
      var $52=$status;
      var $cmp32=(($52)|0)==2;
      if ($cmp32) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $53=$L_addr;
      var $top35=(($53+8)|0);
      var $54=HEAP32[(($top35)>>2)];
      var $add_ptr36=((($54)-(12))|0);
      var $tt_37=(($add_ptr36+8)|0);
      var $55=HEAP32[(($tt_37)>>2)];
      var $and38=$55 & 15;
      var $cmp39=(($and38)|0)==4;
      if ($cmp39) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $56=$L_addr;
      var $top41=(($56+8)|0);
      var $57=HEAP32[(($top41)>>2)];
      var $add_ptr42=((($57)-(12))|0);
      var $value_43=(($add_ptr42)|0);
      var $gc44=$value_43;
      var $58=HEAP32[(($gc44)>>2)];
      var $ts=$58;
      var $add_ptr45=(($ts+16)|0);
      var $59=$add_ptr45;
      var $cond = $59;label = 10; break;
    case 9: 
      var $cond = ((5246608)|0);label = 10; break;
    case 10: 
      var $cond;
      $msg=$cond;
      var $60=$L_addr;
      var $61=$msg;
      var $call46=_luaO_pushfstring($60, ((5252240)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$61,tempInt));
      $status=5;
      label = 11; break;
    case 11: 
      var $62=$L_addr;
      var $63=$status;
      _luaD_throw($62, $63);

    case 12: 
      label = 13; break;
    case 13: 
      STACKTOP = __stackBase__;
      return;
  }

}
_GCTM["X"]=1;

function _removeentry($n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      $n_addr=$n;
      var $0=$n_addr;
      var $i_key=(($0+12)|0);
      var $tvk=$i_key;
      var $tt_=(($tvk+8)|0);
      var $1=HEAP32[(($tt_)>>2)];
      var $and=$1 & 64;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $2=$n_addr;
      var $i_key1=(($2+12)|0);
      var $tvk2=$i_key1;
      var $value_=(($tvk2)|0);
      var $gc=$value_;
      var $3=HEAP32[(($gc)>>2)];
      var $gch=$3;
      var $marked=(($gch+5)|0);
      var $4=HEAP8[($marked)];
      var $conv=(($4)&255);
      var $and3=$conv & 3;
      var $tobool4=(($and3)|0)!=0;
      if ($tobool4) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $5=$n_addr;
      var $i_key5=(($5+12)|0);
      var $tvk6=$i_key5;
      var $tt_7=(($tvk6+8)|0);
      HEAP32[(($tt_7)>>2)]=11;
      label = 5; break;
    case 5: 

      return;
  }

}


function _checkSizes($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $g;
      var $hs;
      $L_addr=$L;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      $g=$1;
      var $2=$g;
      var $gckind=(($2+54)|0);
      var $3=HEAP8[($gckind)];
      var $conv=(($3)&255);
      var $cmp=(($conv)|0)!=1;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $4=$g;
      var $strt=(($4+24)|0);
      var $size=(($strt+8)|0);
      var $5=HEAP32[(($size)>>2)];
      var $div=((((($5)|0))/(2))&-1);
      $hs=$div;
      var $6=$g;
      var $strt2=(($6+24)|0);
      var $nuse=(($strt2+4)|0);
      var $7=HEAP32[(($nuse)>>2)];
      var $8=$hs;
      var $cmp3=(($7)>>>0) < (($8)>>>0);
      if ($cmp3) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $9=$L_addr;
      var $10=$hs;
      _luaS_resize($9, $10);
      label = 5; break;
    case 5: 
      var $11=$L_addr;
      var $12=$g;
      var $buff=(($12+124)|0);
      var $buffer=(($buff)|0);
      var $13=HEAP32[(($buffer)>>2)];
      var $14=$g;
      var $buff6=(($14+124)|0);
      var $buffsize=(($buff6+8)|0);
      var $15=HEAP32[(($buffsize)>>2)];
      var $mul=$15;
      var $call=_luaM_realloc_($11, $13, $mul, 0);
      var $16=$g;
      var $buff7=(($16+124)|0);
      var $buffer8=(($buff7)|0);
      HEAP32[(($buffer8)>>2)]=$call;
      var $17=$g;
      var $buff9=(($17+124)|0);
      var $buffsize10=(($buff9+8)|0);
      HEAP32[(($buffsize10)>>2)]=0;
      label = 6; break;
    case 6: 

      return;
  }

}
_checkSizes["X"]=1;

function _markmt($g) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $i;
      $g_addr=$g;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|0) < 9;
      if ($cmp) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $1=$i;
      var $2=$g_addr;
      var $mt=(($2+232)|0);
      var $arrayidx=(($mt+($1<<2))|0);
      var $3=HEAP32[(($arrayidx)>>2)];
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $4=$i;
      var $5=$g_addr;
      var $mt1=(($5+232)|0);
      var $arrayidx2=(($mt1+($4<<2))|0);
      var $6=HEAP32[(($arrayidx2)>>2)];
      var $7=$6;
      var $gch=$7;
      var $marked=(($gch+5)|0);
      var $8=HEAP8[($marked)];
      var $conv=(($8)&255);
      var $and=$conv & 3;
      var $tobool3=(($and)|0)!=0;
      if ($tobool3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $9=$g_addr;
      var $10=$i;
      var $11=$g_addr;
      var $mt4=(($11+232)|0);
      var $arrayidx5=(($mt4+($10<<2))|0);
      var $12=HEAP32[(($arrayidx5)>>2)];
      var $13=$12;
      _reallymarkobject($9, $13);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $14=$i;
      var $inc=((($14)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 9: 

      return;
  }

}


function _remarkupvals($g) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $uv;
      $g_addr=$g;
      var $0=$g_addr;
      var $uvhead=(($0+100)|0);
      var $u=(($uvhead+12)|0);
      var $l=$u;
      var $next=(($l+4)|0);
      var $1=HEAP32[(($next)>>2)];
      $uv=$1;
      label = 3; break;
    case 3: 
      var $2=$uv;
      var $3=$g_addr;
      var $uvhead1=(($3+100)|0);
      var $cmp=(($2)|0)!=(($uvhead1)|0);
      if ($cmp) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $4=$uv;
      var $5=$4;
      var $gch=$5;
      var $marked=(($gch+5)|0);
      var $6=HEAP8[($marked)];
      var $conv=(($6)&255);
      var $and=$conv & 7;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 9; break; } else { label = 5; break; }
    case 5: 
      var $7=$uv;
      var $v=(($7+8)|0);
      var $8=HEAP32[(($v)>>2)];
      var $tt_=(($8+8)|0);
      var $9=HEAP32[(($tt_)>>2)];
      var $and2=$9 & 64;
      var $tobool3=(($and2)|0)!=0;
      if ($tobool3) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $10=$uv;
      var $v4=(($10+8)|0);
      var $11=HEAP32[(($v4)>>2)];
      var $value_=(($11)|0);
      var $gc=$value_;
      var $12=HEAP32[(($gc)>>2)];
      var $gch5=$12;
      var $marked6=(($gch5+5)|0);
      var $13=HEAP8[($marked6)];
      var $conv7=(($13)&255);
      var $and8=$conv7 & 3;
      var $tobool9=(($and8)|0)!=0;
      if ($tobool9) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $14=$g_addr;
      var $15=$uv;
      var $v11=(($15+8)|0);
      var $16=HEAP32[(($v11)>>2)];
      var $value_12=(($16)|0);
      var $gc13=$value_12;
      var $17=HEAP32[(($gc13)>>2)];
      _reallymarkobject($14, $17);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $18=$uv;
      var $u15=(($18+12)|0);
      var $l16=$u15;
      var $next17=(($l16+4)|0);
      var $19=HEAP32[(($next17)>>2)];
      $uv=$19;
      label = 3; break;
    case 11: 

      return;
  }

}
_remarkupvals["X"]=1;

function _propagateall($g) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      $g_addr=$g;
      label = 3; break;
    case 3: 
      var $0=$g_addr;
      var $gray=(($0+76)|0);
      var $1=HEAP32[(($gray)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $2=$g_addr;
      _propagatemark($2);
      label = 3; break;
    case 5: 

      return;
  }

}


function _retraversegrays($g) {
  var label = 0;


  var $g_addr;
  var $weak;
  var $grayagain;
  var $ephemeron;
  $g_addr=$g;
  var $0=$g_addr;
  var $weak1=(($0+84)|0);
  var $1=HEAP32[(($weak1)>>2)];
  $weak=$1;
  var $2=$g_addr;
  var $grayagain2=(($2+80)|0);
  var $3=HEAP32[(($grayagain2)>>2)];
  $grayagain=$3;
  var $4=$g_addr;
  var $ephemeron3=(($4+88)|0);
  var $5=HEAP32[(($ephemeron3)>>2)];
  $ephemeron=$5;
  var $6=$g_addr;
  var $ephemeron4=(($6+88)|0);
  HEAP32[(($ephemeron4)>>2)]=0;
  var $7=$g_addr;
  var $grayagain5=(($7+80)|0);
  HEAP32[(($grayagain5)>>2)]=0;
  var $8=$g_addr;
  var $weak6=(($8+84)|0);
  HEAP32[(($weak6)>>2)]=0;
  var $9=$g_addr;
  _propagateall($9);
  var $10=$g_addr;
  var $11=$grayagain;
  _propagatelist($10, $11);
  var $12=$g_addr;
  var $13=$weak;
  _propagatelist($12, $13);
  var $14=$g_addr;
  var $15=$ephemeron;
  _propagatelist($14, $15);

  return;
}


function _convergeephemerons($g) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $changed;
      var $w;
      var $next;
      $g_addr=$g;
      label = 3; break;
    case 3: 
      var $0=$g_addr;
      var $ephemeron=(($0+88)|0);
      var $1=HEAP32[(($ephemeron)>>2)];
      $next=$1;
      var $2=$g_addr;
      var $ephemeron1=(($2+88)|0);
      HEAP32[(($ephemeron1)>>2)]=0;
      $changed=0;
      label = 4; break;
    case 4: 
      var $3=$next;
      $w=$3;
      var $cmp=(($3)|0)!=0;
      if ($cmp) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $4=$w;
      var $h=$4;
      var $gclist=(($h+24)|0);
      var $5=HEAP32[(($gclist)>>2)];
      $next=$5;
      var $6=$g_addr;
      var $7=$w;
      var $h2=$7;
      var $call=_traverseephemeron($6, $h2);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $8=$g_addr;
      _propagateall($8);
      $changed=1;
      label = 7; break;
    case 7: 
      label = 4; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $9=$changed;
      var $tobool3=(($9)|0)!=0;
      if ($tobool3) { label = 3; break; } else { label = 10; break; }
    case 10: 

      return;
  }

}


function _clearvalues($g, $l, $f) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $l_addr;
      var $f_addr;
      var $h;
      var $n;
      var $limit;
      var $i;
      var $o;
      $g_addr=$g;
      $l_addr=$l;
      $f_addr=$f;
      label = 3; break;
    case 3: 
      var $0=$l_addr;
      var $1=$f_addr;
      var $cmp=(($0)|0)!=(($1)|0);
      if ($cmp) { label = 4; break; } else { label = 19; break; }
    case 4: 
      var $2=$l_addr;
      var $h1=$2;
      $h=$h1;
      var $3=$h;
      var $lsizenode=(($3+7)|0);
      var $4=HEAP8[($lsizenode)];
      var $conv=(($4)&255);
      var $shl=1 << $conv;
      var $5=$h;
      var $node=(($5+16)|0);
      var $6=HEAP32[(($node)>>2)];
      var $arrayidx=(($6+((($shl)*(28))&-1))|0);
      $limit=$arrayidx;
      $i=0;
      label = 5; break;
    case 5: 
      var $7=$i;
      var $8=$h;
      var $sizearray=(($8+28)|0);
      var $9=HEAP32[(($sizearray)>>2)];
      var $cmp3=(($7)|0) < (($9)|0);
      if ($cmp3) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $10=$i;
      var $11=$h;
      var $array=(($11+12)|0);
      var $12=HEAP32[(($array)>>2)];
      var $arrayidx6=(($12+((($10)*(12))&-1))|0);
      $o=$arrayidx6;
      var $13=$g_addr;
      var $14=$o;
      var $call=_iscleared($13, $14);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $15=$o;
      var $tt_=(($15+8)|0);
      HEAP32[(($tt_)>>2)]=0;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $16=$i;
      var $inc=((($16)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 10: 
      var $17=$h;
      var $node7=(($17+16)|0);
      var $18=HEAP32[(($node7)>>2)];
      var $arrayidx8=(($18)|0);
      $n=$arrayidx8;
      label = 11; break;
    case 11: 
      var $19=$n;
      var $20=$limit;
      var $cmp10=(($19)>>>0) < (($20)>>>0);
      if ($cmp10) { label = 12; break; } else { label = 17; break; }
    case 12: 
      var $21=$n;
      var $i_val=(($21)|0);
      var $tt_13=(($i_val+8)|0);
      var $22=HEAP32[(($tt_13)>>2)];
      var $cmp14=(($22)|0)==0;
      if ($cmp14) { label = 15; break; } else { label = 13; break; }
    case 13: 
      var $23=$g_addr;
      var $24=$n;
      var $i_val16=(($24)|0);
      var $call17=_iscleared($23, $i_val16);
      var $tobool18=(($call17)|0)!=0;
      if ($tobool18) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $25=$n;
      var $i_val20=(($25)|0);
      var $tt_21=(($i_val20+8)|0);
      HEAP32[(($tt_21)>>2)]=0;
      var $26=$n;
      _removeentry($26);
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $27=$n;
      var $incdec_ptr=(($27+28)|0);
      $n=$incdec_ptr;
      label = 11; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $28=$l_addr;
      var $h26=$28;
      var $gclist=(($h26+24)|0);
      var $29=HEAP32[(($gclist)>>2)];
      $l_addr=$29;
      label = 3; break;
    case 19: 

      return;
  }

}
_clearvalues["X"]=1;

function _markbeingfnz($g) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $o;
      $g_addr=$g;
      var $0=$g_addr;
      var $tobefnz=(($0+96)|0);
      var $1=HEAP32[(($tobefnz)>>2)];
      $o=$1;
      label = 3; break;
    case 3: 
      var $2=$o;
      var $cmp=(($2)|0)!=0;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $3=$o;
      var $gch=$3;
      var $marked=(($gch+5)|0);
      var $4=HEAP8[($marked)];
      var $conv=(($4)&255);
      var $and=$conv & -72;
      var $5=$g_addr;
      var $currentwhite=(($5+52)|0);
      var $6=HEAP8[($currentwhite)];
      var $conv1=(($6)&255);
      var $and2=$conv1 & 3;
      var $conv3=(($and2) & 255);
      var $conv4=(($conv3)&255);
      var $or=$and | $conv4;
      var $conv5=(($or) & 255);
      var $7=$o;
      var $gch6=$7;
      var $marked7=(($gch6+5)|0);
      HEAP8[($marked7)]=$conv5;
      var $8=$g_addr;
      var $9=$o;
      _reallymarkobject($8, $9);
      label = 5; break;
    case 5: 
      var $10=$o;
      var $gch8=$10;
      var $next=(($gch8)|0);
      var $11=HEAP32[(($next)>>2)];
      $o=$11;
      label = 3; break;
    case 6: 

      return;
  }

}


function _clearkeys($g, $l, $f) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $l_addr;
      var $f_addr;
      var $h;
      var $n;
      var $limit;
      $g_addr=$g;
      $l_addr=$l;
      $f_addr=$f;
      label = 3; break;
    case 3: 
      var $0=$l_addr;
      var $1=$f_addr;
      var $cmp=(($0)|0)!=(($1)|0);
      if ($cmp) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $2=$l_addr;
      var $h1=$2;
      $h=$h1;
      var $3=$h;
      var $lsizenode=(($3+7)|0);
      var $4=HEAP8[($lsizenode)];
      var $conv=(($4)&255);
      var $shl=1 << $conv;
      var $5=$h;
      var $node=(($5+16)|0);
      var $6=HEAP32[(($node)>>2)];
      var $arrayidx=(($6+((($shl)*(28))&-1))|0);
      $limit=$arrayidx;
      var $7=$h;
      var $node2=(($7+16)|0);
      var $8=HEAP32[(($node2)>>2)];
      var $arrayidx3=(($8)|0);
      $n=$arrayidx3;
      label = 5; break;
    case 5: 
      var $9=$n;
      var $10=$limit;
      var $cmp5=(($9)>>>0) < (($10)>>>0);
      if ($cmp5) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $11=$n;
      var $i_val=(($11)|0);
      var $tt_=(($i_val+8)|0);
      var $12=HEAP32[(($tt_)>>2)];
      var $cmp8=(($12)|0)==0;
      if ($cmp8) { label = 9; break; } else { label = 7; break; }
    case 7: 
      var $13=$g_addr;
      var $14=$n;
      var $i_key=(($14+12)|0);
      var $tvk=$i_key;
      var $call=_iscleared($13, $tvk);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $15=$n;
      var $i_val10=(($15)|0);
      var $tt_11=(($i_val10+8)|0);
      HEAP32[(($tt_11)>>2)]=0;
      var $16=$n;
      _removeentry($16);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $17=$n;
      var $incdec_ptr=(($17+28)|0);
      $n=$incdec_ptr;
      label = 5; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $18=$l_addr;
      var $h13=$18;
      var $gclist=(($h13+24)|0);
      var $19=HEAP32[(($gclist)>>2)];
      $l_addr=$19;
      label = 3; break;
    case 13: 

      return;
  }

}
_clearkeys["X"]=1;

function _iscleared($g, $o) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $g_addr;
      var $o_addr;
      $g_addr=$g;
      $o_addr=$o;
      var $0=$o_addr;
      var $tt_=(($0+8)|0);
      var $1=HEAP32[(($tt_)>>2)];
      var $and=$1 & 64;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $retval=0;
      label = 10; break;
    case 4: 
      var $2=$o_addr;
      var $tt_1=(($2+8)|0);
      var $3=HEAP32[(($tt_1)>>2)];
      var $and2=$3 & 15;
      var $cmp=(($and2)|0)==4;
      if ($cmp) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $4=$o_addr;
      var $value_=(($4)|0);
      var $gc=$value_;
      var $5=HEAP32[(($gc)>>2)];
      var $ts=$5;
      var $tobool4=(($ts)|0)!=0;
      if ($tobool4) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $6=$o_addr;
      var $value_5=(($6)|0);
      var $gc6=$value_5;
      var $7=HEAP32[(($gc6)>>2)];
      var $ts7=$7;
      var $8=$ts7;
      var $gch=$8;
      var $marked=(($gch+5)|0);
      var $9=HEAP8[($marked)];
      var $conv=(($9)&255);
      var $and8=$conv & 3;
      var $tobool9=(($and8)|0)!=0;
      if ($tobool9) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $10=$g_addr;
      var $11=$o_addr;
      var $value_11=(($11)|0);
      var $gc12=$value_11;
      var $12=HEAP32[(($gc12)>>2)];
      var $ts13=$12;
      var $13=$ts13;
      _reallymarkobject($10, $13);
      label = 8; break;
    case 8: 
      $retval=0;
      label = 10; break;
    case 9: 
      var $14=$o_addr;
      var $value_15=(($14)|0);
      var $gc16=$value_15;
      var $15=HEAP32[(($gc16)>>2)];
      var $gch17=$15;
      var $marked18=(($gch17+5)|0);
      var $16=HEAP8[($marked18)];
      var $conv19=(($16)&255);
      var $and20=$conv19 & 3;
      $retval=$and20;
      label = 10; break;
    case 10: 
      var $17=$retval;

      return $17;
  }

}
_iscleared["X"]=1;

function _traverseephemeron($g, $h) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $h_addr;
      var $marked;
      var $hasclears;
      var $prop;
      var $n;
      var $limit;
      var $i;
      $g_addr=$g;
      $h_addr=$h;
      $marked=0;
      $hasclears=0;
      $prop=0;
      var $0=$h_addr;
      var $lsizenode=(($0+7)|0);
      var $1=HEAP8[($lsizenode)];
      var $conv=(($1)&255);
      var $shl=1 << $conv;
      var $2=$h_addr;
      var $node=(($2+16)|0);
      var $3=HEAP32[(($node)>>2)];
      var $arrayidx=(($3+((($shl)*(28))&-1))|0);
      $limit=$arrayidx;
      $i=0;
      label = 3; break;
    case 3: 
      var $4=$i;
      var $5=$h_addr;
      var $sizearray=(($5+28)|0);
      var $6=HEAP32[(($sizearray)>>2)];
      var $cmp=(($4)|0) < (($6)|0);
      if ($cmp) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $7=$i;
      var $8=$h_addr;
      var $array=(($8+12)|0);
      var $9=HEAP32[(($array)>>2)];
      var $arrayidx2=(($9+((($7)*(12))&-1))|0);
      var $tt_=(($arrayidx2+8)|0);
      var $10=HEAP32[(($tt_)>>2)];
      var $and=$10 & 64;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $11=$i;
      var $12=$h_addr;
      var $array3=(($12+12)|0);
      var $13=HEAP32[(($array3)>>2)];
      var $arrayidx4=(($13+((($11)*(12))&-1))|0);
      var $value_=(($arrayidx4)|0);
      var $gc=$value_;
      var $14=HEAP32[(($gc)>>2)];
      var $gch=$14;
      var $marked5=(($gch+5)|0);
      var $15=HEAP8[($marked5)];
      var $conv6=(($15)&255);
      var $and7=$conv6 & 3;
      var $tobool8=(($and7)|0)!=0;
      if ($tobool8) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $marked=1;
      var $16=$g_addr;
      var $17=$i;
      var $18=$h_addr;
      var $array9=(($18+12)|0);
      var $19=HEAP32[(($array9)>>2)];
      var $arrayidx10=(($19+((($17)*(12))&-1))|0);
      var $value_11=(($arrayidx10)|0);
      var $gc12=$value_11;
      var $20=HEAP32[(($gc12)>>2)];
      _reallymarkobject($16, $20);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $21=$i;
      var $inc=((($21)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 9: 
      var $22=$h_addr;
      var $node13=(($22+16)|0);
      var $23=HEAP32[(($node13)>>2)];
      var $arrayidx14=(($23)|0);
      $n=$arrayidx14;
      label = 10; break;
    case 10: 
      var $24=$n;
      var $25=$limit;
      var $cmp16=(($24)>>>0) < (($25)>>>0);
      if ($cmp16) { label = 11; break; } else { label = 25; break; }
    case 11: 
      var $26=$n;
      var $i_val=(($26)|0);
      var $tt_19=(($i_val+8)|0);
      var $27=HEAP32[(($tt_19)>>2)];
      var $cmp20=(($27)|0)==0;
      if ($cmp20) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $28=$n;
      _removeentry($28);
      label = 23; break;
    case 13: 
      var $29=$g_addr;
      var $30=$n;
      var $i_key=(($30+12)|0);
      var $tvk=$i_key;
      var $call=_iscleared($29, $tvk);
      var $tobool23=(($call)|0)!=0;
      if ($tobool23) { label = 14; break; } else { label = 18; break; }
    case 14: 
      $hasclears=1;
      var $31=$n;
      var $i_val25=(($31)|0);
      var $tt_26=(($i_val25+8)|0);
      var $32=HEAP32[(($tt_26)>>2)];
      var $and27=$32 & 64;
      var $tobool28=(($and27)|0)!=0;
      if ($tobool28) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $33=$n;
      var $i_val30=(($33)|0);
      var $value_31=(($i_val30)|0);
      var $gc32=$value_31;
      var $34=HEAP32[(($gc32)>>2)];
      var $gch33=$34;
      var $marked34=(($gch33+5)|0);
      var $35=HEAP8[($marked34)];
      var $conv35=(($35)&255);
      var $and36=$conv35 & 3;
      var $tobool37=(($and36)|0)!=0;
      if ($tobool37) { label = 16; break; } else { label = 17; break; }
    case 16: 
      $prop=1;
      label = 17; break;
    case 17: 
      label = 22; break;
    case 18: 
      var $36=$n;
      var $i_val41=(($36)|0);
      var $tt_42=(($i_val41+8)|0);
      var $37=HEAP32[(($tt_42)>>2)];
      var $and43=$37 & 64;
      var $tobool44=(($and43)|0)!=0;
      if ($tobool44) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $38=$n;
      var $i_val46=(($38)|0);
      var $value_47=(($i_val46)|0);
      var $gc48=$value_47;
      var $39=HEAP32[(($gc48)>>2)];
      var $gch49=$39;
      var $marked50=(($gch49+5)|0);
      var $40=HEAP8[($marked50)];
      var $conv51=(($40)&255);
      var $and52=$conv51 & 3;
      var $tobool53=(($and52)|0)!=0;
      if ($tobool53) { label = 20; break; } else { label = 21; break; }
    case 20: 
      $marked=1;
      var $41=$g_addr;
      var $42=$n;
      var $i_val55=(($42)|0);
      var $value_56=(($i_val55)|0);
      var $gc57=$value_56;
      var $43=HEAP32[(($gc57)>>2)];
      _reallymarkobject($41, $43);
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $44=$n;
      var $incdec_ptr=(($44+28)|0);
      $n=$incdec_ptr;
      label = 10; break;
    case 25: 
      var $45=$prop;
      var $tobool63=(($45)|0)!=0;
      if ($tobool63) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $46=$g_addr;
      var $ephemeron=(($46+88)|0);
      var $47=HEAP32[(($ephemeron)>>2)];
      var $48=$h_addr;
      var $gclist=(($48+24)|0);
      HEAP32[(($gclist)>>2)]=$47;
      var $49=$h_addr;
      var $50=$49;
      var $51=$g_addr;
      var $ephemeron65=(($51+88)|0);
      HEAP32[(($ephemeron65)>>2)]=$50;
      label = 31; break;
    case 27: 
      var $52=$hasclears;
      var $tobool67=(($52)|0)!=0;
      if ($tobool67) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $53=$g_addr;
      var $allweak=(($53+92)|0);
      var $54=HEAP32[(($allweak)>>2)];
      var $55=$h_addr;
      var $gclist69=(($55+24)|0);
      HEAP32[(($gclist69)>>2)]=$54;
      var $56=$h_addr;
      var $57=$56;
      var $58=$g_addr;
      var $allweak70=(($58+92)|0);
      HEAP32[(($allweak70)>>2)]=$57;
      label = 30; break;
    case 29: 
      var $59=$g_addr;
      var $grayagain=(($59+80)|0);
      var $60=HEAP32[(($grayagain)>>2)];
      var $61=$h_addr;
      var $gclist72=(($61+24)|0);
      HEAP32[(($gclist72)>>2)]=$60;
      var $62=$h_addr;
      var $63=$62;
      var $64=$g_addr;
      var $grayagain73=(($64+80)|0);
      HEAP32[(($grayagain73)>>2)]=$63;
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $65=$marked;

      return $65;
  }

}
_traverseephemeron["X"]=1;

function _propagatelist($g, $l) {
  var label = 0;


  var $g_addr;
  var $l_addr;
  $g_addr=$g;
  $l_addr=$l;
  var $0=$l_addr;
  var $1=$g_addr;
  var $gray=(($1+76)|0);
  HEAP32[(($gray)>>2)]=$0;
  var $2=$g_addr;
  _propagateall($2);

  return;
}


function _traversetable($g, $h) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $h_addr;
      var $weakkey;
      var $weakvalue;
      var $mode;
      $g_addr=$g;
      $h_addr=$h;
      var $0=$h_addr;
      var $metatable=(($0+8)|0);
      var $1=HEAP32[(($metatable)>>2)];
      var $cmp=(($1)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $cond6 = 0;label = 8; break;
    case 4: 
      var $2=$h_addr;
      var $metatable1=(($2+8)|0);
      var $3=HEAP32[(($metatable1)>>2)];
      var $flags=(($3+6)|0);
      var $4=HEAP8[($flags)];
      var $conv=(($4)&255);
      var $and=$conv & 8;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $cond = 0;label = 7; break;
    case 6: 
      var $5=$h_addr;
      var $metatable4=(($5+8)|0);
      var $6=HEAP32[(($metatable4)>>2)];
      var $7=$g_addr;
      var $tmname=(($7+164)|0);
      var $arrayidx=(($tmname+12)|0);
      var $8=HEAP32[(($arrayidx)>>2)];
      var $call=_luaT_gettm($6, 3, $8);
      var $cond = $call;label = 7; break;
    case 7: 
      var $cond;
      var $cond6 = $cond;label = 8; break;
    case 8: 
      var $cond6;
      $mode=$cond6;
      var $9=$h_addr;
      var $metatable7=(($9+8)|0);
      var $10=HEAP32[(($metatable7)>>2)];
      var $tobool8=(($10)|0)!=0;
      if ($tobool8) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $11=$h_addr;
      var $metatable9=(($11+8)|0);
      var $12=HEAP32[(($metatable9)>>2)];
      var $13=$12;
      var $gch=$13;
      var $marked=(($gch+5)|0);
      var $14=HEAP8[($marked)];
      var $conv10=(($14)&255);
      var $and11=$conv10 & 3;
      var $tobool12=(($and11)|0)!=0;
      if ($tobool12) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $15=$g_addr;
      var $16=$h_addr;
      var $metatable13=(($16+8)|0);
      var $17=HEAP32[(($metatable13)>>2)];
      var $18=$17;
      _reallymarkobject($15, $18);
      label = 11; break;
    case 11: 
      var $19=$mode;
      var $tobool14=(($19)|0)!=0;
      if ($tobool14) { label = 12; break; } else { label = 23; break; }
    case 12: 
      var $20=$mode;
      var $tt_=(($20+8)|0);
      var $21=HEAP32[(($tt_)>>2)];
      var $and16=$21 & 15;
      var $cmp17=(($and16)|0)==4;
      if ($cmp17) { label = 13; break; } else { label = 23; break; }
    case 13: 
      var $22=$mode;
      var $value_=(($22)|0);
      var $gc=$value_;
      var $23=HEAP32[(($gc)>>2)];
      var $ts=$23;
      var $add_ptr=(($ts+16)|0);
      var $24=$add_ptr;
      var $call20=_strchr($24, 107);
      $weakkey=$call20;
      var $25=$mode;
      var $value_21=(($25)|0);
      var $gc22=$value_21;
      var $26=HEAP32[(($gc22)>>2)];
      var $ts23=$26;
      var $add_ptr24=(($ts23+16)|0);
      var $27=$add_ptr24;
      var $call25=_strchr($27, 118);
      $weakvalue=$call25;
      var $28=$weakkey;
      var $tobool26=(($28)|0)!=0;
      if ($tobool26) { var $30 = 1;label = 15; break; } else { label = 14; break; }
    case 14: 
      var $29=$weakvalue;
      var $tobool27=(($29)|0)!=0;
      var $30 = $tobool27;label = 15; break;
    case 15: 
      var $30;
      if ($30) { label = 16; break; } else { label = 23; break; }
    case 16: 
      var $31=$h_addr;
      var $32=$31;
      var $gch29=$32;
      var $marked30=(($gch29+5)|0);
      var $33=HEAP8[($marked30)];
      var $conv31=(($33)&255);
      var $and32=$conv31 & 251;
      var $conv33=(($and32) & 255);
      HEAP8[($marked30)]=$conv33;
      var $34=$weakkey;
      var $tobool34=(($34)|0)!=0;
      if ($tobool34) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $35=$g_addr;
      var $36=$h_addr;
      _traverseweakvalue($35, $36);
      label = 22; break;
    case 18: 
      var $37=$weakvalue;
      var $tobool36=(($37)|0)!=0;
      if ($tobool36) { label = 20; break; } else { label = 19; break; }
    case 19: 
      var $38=$g_addr;
      var $39=$h_addr;
      var $call38=_traverseephemeron($38, $39);
      label = 21; break;
    case 20: 
      var $40=$g_addr;
      var $allweak=(($40+92)|0);
      var $41=HEAP32[(($allweak)>>2)];
      var $42=$h_addr;
      var $gclist=(($42+24)|0);
      HEAP32[(($gclist)>>2)]=$41;
      var $43=$h_addr;
      var $44=$43;
      var $45=$g_addr;
      var $allweak40=(($45+92)|0);
      HEAP32[(($allweak40)>>2)]=$44;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 24; break;
    case 23: 
      var $46=$g_addr;
      var $47=$h_addr;
      _traversestrongtable($46, $47);
      label = 24; break;
    case 24: 
      var $48=$h_addr;
      var $sizearray=(($48+28)|0);
      var $49=HEAP32[(($sizearray)>>2)];
      var $mul=((($49)*(12))&-1);
      var $add=((($mul)+(32))|0);
      var $50=$h_addr;
      var $lsizenode=(($50+7)|0);
      var $51=HEAP8[($lsizenode)];
      var $conv45=(($51)&255);
      var $shl=1 << $conv45;
      var $mul46=((($shl)*(28))&-1);
      var $add47=((($add)+($mul46))|0);

      return $add47;
  }

}
_traversetable["X"]=1;

function _traverseLclosure($g, $cl) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $cl_addr;
      var $i;
      $g_addr=$g;
      $cl_addr=$cl;
      var $0=$cl_addr;
      var $p=(($0+12)|0);
      var $1=HEAP32[(($p)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $2=$cl_addr;
      var $p1=(($2+12)|0);
      var $3=HEAP32[(($p1)>>2)];
      var $4=$3;
      var $gch=$4;
      var $marked=(($gch+5)|0);
      var $5=HEAP8[($marked)];
      var $conv=(($5)&255);
      var $and=$conv & 3;
      var $tobool2=(($and)|0)!=0;
      if ($tobool2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $6=$g_addr;
      var $7=$cl_addr;
      var $p3=(($7+12)|0);
      var $8=HEAP32[(($p3)>>2)];
      var $9=$8;
      _reallymarkobject($6, $9);
      label = 5; break;
    case 5: 
      $i=0;
      label = 6; break;
    case 6: 
      var $10=$i;
      var $11=$cl_addr;
      var $nupvalues=(($11+6)|0);
      var $12=HEAP8[($nupvalues)];
      var $conv4=(($12)&255);
      var $cmp=(($10)|0) < (($conv4)|0);
      if ($cmp) { label = 7; break; } else { label = 12; break; }
    case 7: 
      var $13=$i;
      var $14=$cl_addr;
      var $upvals=(($14+16)|0);
      var $arrayidx=(($upvals+($13<<2))|0);
      var $15=HEAP32[(($arrayidx)>>2)];
      var $tobool6=(($15)|0)!=0;
      if ($tobool6) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $16=$i;
      var $17=$cl_addr;
      var $upvals8=(($17+16)|0);
      var $arrayidx9=(($upvals8+($16<<2))|0);
      var $18=HEAP32[(($arrayidx9)>>2)];
      var $19=$18;
      var $gch10=$19;
      var $marked11=(($gch10+5)|0);
      var $20=HEAP8[($marked11)];
      var $conv12=(($20)&255);
      var $and13=$conv12 & 3;
      var $tobool14=(($and13)|0)!=0;
      if ($tobool14) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $21=$g_addr;
      var $22=$i;
      var $23=$cl_addr;
      var $upvals16=(($23+16)|0);
      var $arrayidx17=(($upvals16+($22<<2))|0);
      var $24=HEAP32[(($arrayidx17)>>2)];
      var $25=$24;
      _reallymarkobject($21, $25);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $26=$i;
      var $inc=((($26)+(1))|0);
      $i=$inc;
      label = 6; break;
    case 12: 
      var $27=$cl_addr;
      var $nupvalues19=(($27+6)|0);
      var $28=HEAP8[($nupvalues19)];
      var $conv20=(($28)&255);
      var $sub=((($conv20)-(1))|0);
      var $mul=($sub<<2);
      var $add=((($mul)+(20))|0);

      return $add;
  }

}
_traverseLclosure["X"]=1;

function _traverseCclosure($g, $cl) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $cl_addr;
      var $i;
      $g_addr=$g;
      $cl_addr=$cl;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$cl_addr;
      var $nupvalues=(($1+6)|0);
      var $2=HEAP8[($nupvalues)];
      var $conv=(($2)&255);
      var $cmp=(($0)|0) < (($conv)|0);
      if ($cmp) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $3=$i;
      var $4=$cl_addr;
      var $upvalue=(($4+16)|0);
      var $arrayidx=(($upvalue+((($3)*(12))&-1))|0);
      var $tt_=(($arrayidx+8)|0);
      var $5=HEAP32[(($tt_)>>2)];
      var $and=$5 & 64;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $6=$i;
      var $7=$cl_addr;
      var $upvalue2=(($7+16)|0);
      var $arrayidx3=(($upvalue2+((($6)*(12))&-1))|0);
      var $value_=(($arrayidx3)|0);
      var $gc=$value_;
      var $8=HEAP32[(($gc)>>2)];
      var $gch=$8;
      var $marked=(($gch+5)|0);
      var $9=HEAP8[($marked)];
      var $conv4=(($9)&255);
      var $and5=$conv4 & 3;
      var $tobool6=(($and5)|0)!=0;
      if ($tobool6) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $10=$g_addr;
      var $11=$i;
      var $12=$cl_addr;
      var $upvalue7=(($12+16)|0);
      var $arrayidx8=(($upvalue7+((($11)*(12))&-1))|0);
      var $value_9=(($arrayidx8)|0);
      var $gc10=$value_9;
      var $13=HEAP32[(($gc10)>>2)];
      _reallymarkobject($10, $13);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $14=$i;
      var $inc=((($14)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 9: 
      var $15=$cl_addr;
      var $nupvalues11=(($15+6)|0);
      var $16=HEAP8[($nupvalues11)];
      var $conv12=(($16)&255);
      var $sub=((($conv12)-(1))|0);
      var $mul=((($sub)*(12))&-1);
      var $add=((($mul)+(28))|0);

      return $add;
  }

}
_traverseCclosure["X"]=1;

function _traversestack($g, $th) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $g_addr;
      var $th_addr;
      var $o;
      var $lim;
      $g_addr=$g;
      $th_addr=$th;
      var $0=$th_addr;
      var $stack=(($0+28)|0);
      var $1=HEAP32[(($stack)>>2)];
      $o=$1;
      var $2=$o;
      var $cmp=(($2)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=1;
      label = 18; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $3=$o;
      var $4=$th_addr;
      var $top=(($4+8)|0);
      var $5=HEAP32[(($top)>>2)];
      var $cmp1=(($3)>>>0) < (($5)>>>0);
      if ($cmp1) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $6=$o;
      var $tt_=(($6+8)|0);
      var $7=HEAP32[(($tt_)>>2)];
      var $and=$7 & 64;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $8=$o;
      var $value_=(($8)|0);
      var $gc=$value_;
      var $9=HEAP32[(($gc)>>2)];
      var $gch=$9;
      var $marked=(($gch+5)|0);
      var $10=HEAP8[($marked)];
      var $conv=(($10)&255);
      var $and2=$conv & 3;
      var $tobool3=(($and2)|0)!=0;
      if ($tobool3) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $11=$g_addr;
      var $12=$o;
      var $value_5=(($12)|0);
      var $gc6=$value_5;
      var $13=HEAP32[(($gc6)>>2)];
      _reallymarkobject($11, $13);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $14=$o;
      var $incdec_ptr=(($14+12)|0);
      $o=$incdec_ptr;
      label = 5; break;
    case 11: 
      var $15=$g_addr;
      var $gcstate=(($15+53)|0);
      var $16=HEAP8[($gcstate)];
      var $conv8=(($16)&255);
      var $cmp9=(($conv8)|0)==1;
      if ($cmp9) { label = 12; break; } else { label = 17; break; }
    case 12: 
      var $17=$th_addr;
      var $stack12=(($17+28)|0);
      var $18=HEAP32[(($stack12)>>2)];
      var $19=$th_addr;
      var $stacksize=(($19+32)|0);
      var $20=HEAP32[(($stacksize)>>2)];
      var $add_ptr=(($18+((($20)*(12))&-1))|0);
      $lim=$add_ptr;
      label = 13; break;
    case 13: 
      var $21=$o;
      var $22=$lim;
      var $cmp14=(($21)>>>0) < (($22)>>>0);
      if ($cmp14) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $23=$o;
      var $tt_17=(($23+8)|0);
      HEAP32[(($tt_17)>>2)]=0;
      label = 15; break;
    case 15: 
      var $24=$o;
      var $incdec_ptr19=(($24+12)|0);
      $o=$incdec_ptr19;
      label = 13; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $25=$th_addr;
      var $stacksize22=(($25+32)|0);
      var $26=HEAP32[(($stacksize22)>>2)];
      var $mul=((($26)*(12))&-1);
      var $add=((($mul)+(112))|0);
      $retval=$add;
      label = 18; break;
    case 18: 
      var $27=$retval;

      return $27;
  }

}
_traversestack["X"]=1;

function _traverseproto($g, $f) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $f_addr;
      var $i;
      $g_addr=$g;
      $f_addr=$f;
      var $0=$f_addr;
      var $cache=(($0+32)|0);
      var $1=HEAP32[(($cache)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $2=$f_addr;
      var $cache1=(($2+32)|0);
      var $3=HEAP32[(($cache1)>>2)];
      var $4=$3;
      var $gch=$4;
      var $marked=(($gch+5)|0);
      var $5=HEAP8[($marked)];
      var $conv=(($5)&255);
      var $and=$conv & 3;
      var $tobool2=(($and)|0)!=0;
      if ($tobool2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $6=$f_addr;
      var $cache3=(($6+32)|0);
      HEAP32[(($cache3)>>2)]=0;
      label = 5; break;
    case 5: 
      var $7=$f_addr;
      var $source=(($7+36)|0);
      var $8=HEAP32[(($source)>>2)];
      var $tobool4=(($8)|0)!=0;
      if ($tobool4) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $9=$f_addr;
      var $source6=(($9+36)|0);
      var $10=HEAP32[(($source6)>>2)];
      var $11=$10;
      var $gch7=$11;
      var $marked8=(($gch7+5)|0);
      var $12=HEAP8[($marked8)];
      var $conv9=(($12)&255);
      var $and10=$conv9 & 3;
      var $tobool11=(($and10)|0)!=0;
      if ($tobool11) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $13=$g_addr;
      var $14=$f_addr;
      var $source13=(($14+36)|0);
      var $15=HEAP32[(($source13)>>2)];
      var $16=$15;
      _reallymarkobject($13, $16);
      label = 8; break;
    case 8: 
      $i=0;
      label = 9; break;
    case 9: 
      var $17=$i;
      var $18=$f_addr;
      var $sizek=(($18+44)|0);
      var $19=HEAP32[(($sizek)>>2)];
      var $cmp=(($17)|0) < (($19)|0);
      if ($cmp) { label = 10; break; } else { label = 15; break; }
    case 10: 
      var $20=$i;
      var $21=$f_addr;
      var $k=(($21+8)|0);
      var $22=HEAP32[(($k)>>2)];
      var $arrayidx=(($22+((($20)*(12))&-1))|0);
      var $tt_=(($arrayidx+8)|0);
      var $23=HEAP32[(($tt_)>>2)];
      var $and16=$23 & 64;
      var $tobool17=(($and16)|0)!=0;
      if ($tobool17) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $24=$i;
      var $25=$f_addr;
      var $k19=(($25+8)|0);
      var $26=HEAP32[(($k19)>>2)];
      var $arrayidx20=(($26+((($24)*(12))&-1))|0);
      var $value_=(($arrayidx20)|0);
      var $gc=$value_;
      var $27=HEAP32[(($gc)>>2)];
      var $gch21=$27;
      var $marked22=(($gch21+5)|0);
      var $28=HEAP8[($marked22)];
      var $conv23=(($28)&255);
      var $and24=$conv23 & 3;
      var $tobool25=(($and24)|0)!=0;
      if ($tobool25) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $29=$g_addr;
      var $30=$i;
      var $31=$f_addr;
      var $k27=(($31+8)|0);
      var $32=HEAP32[(($k27)>>2)];
      var $arrayidx28=(($32+((($30)*(12))&-1))|0);
      var $value_29=(($arrayidx28)|0);
      var $gc30=$value_29;
      var $33=HEAP32[(($gc30)>>2)];
      _reallymarkobject($29, $33);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $34=$i;
      var $inc=((($34)+(1))|0);
      $i=$inc;
      label = 9; break;
    case 15: 
      $i=0;
      label = 16; break;
    case 16: 
      var $35=$i;
      var $36=$f_addr;
      var $sizeupvalues=(($36+40)|0);
      var $37=HEAP32[(($sizeupvalues)>>2)];
      var $cmp33=(($35)|0) < (($37)|0);
      if ($cmp33) { label = 17; break; } else { label = 22; break; }
    case 17: 
      var $38=$i;
      var $39=$f_addr;
      var $upvalues=(($39+28)|0);
      var $40=HEAP32[(($upvalues)>>2)];
      var $arrayidx36=(($40+($38<<3))|0);
      var $name=(($arrayidx36)|0);
      var $41=HEAP32[(($name)>>2)];
      var $tobool37=(($41)|0)!=0;
      if ($tobool37) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $42=$i;
      var $43=$f_addr;
      var $upvalues39=(($43+28)|0);
      var $44=HEAP32[(($upvalues39)>>2)];
      var $arrayidx40=(($44+($42<<3))|0);
      var $name41=(($arrayidx40)|0);
      var $45=HEAP32[(($name41)>>2)];
      var $46=$45;
      var $gch42=$46;
      var $marked43=(($gch42+5)|0);
      var $47=HEAP8[($marked43)];
      var $conv44=(($47)&255);
      var $and45=$conv44 & 3;
      var $tobool46=(($and45)|0)!=0;
      if ($tobool46) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $48=$g_addr;
      var $49=$i;
      var $50=$f_addr;
      var $upvalues48=(($50+28)|0);
      var $51=HEAP32[(($upvalues48)>>2)];
      var $arrayidx49=(($51+($49<<3))|0);
      var $name50=(($arrayidx49)|0);
      var $52=HEAP32[(($name50)>>2)];
      var $53=$52;
      _reallymarkobject($48, $53);
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $54=$i;
      var $inc53=((($54)+(1))|0);
      $i=$inc53;
      label = 16; break;
    case 22: 
      $i=0;
      label = 23; break;
    case 23: 
      var $55=$i;
      var $56=$f_addr;
      var $sizep=(($56+56)|0);
      var $57=HEAP32[(($sizep)>>2)];
      var $cmp56=(($55)|0) < (($57)|0);
      if ($cmp56) { label = 24; break; } else { label = 29; break; }
    case 24: 
      var $58=$i;
      var $59=$f_addr;
      var $p=(($59+16)|0);
      var $60=HEAP32[(($p)>>2)];
      var $arrayidx59=(($60+($58<<2))|0);
      var $61=HEAP32[(($arrayidx59)>>2)];
      var $tobool60=(($61)|0)!=0;
      if ($tobool60) { label = 25; break; } else { label = 27; break; }
    case 25: 
      var $62=$i;
      var $63=$f_addr;
      var $p62=(($63+16)|0);
      var $64=HEAP32[(($p62)>>2)];
      var $arrayidx63=(($64+($62<<2))|0);
      var $65=HEAP32[(($arrayidx63)>>2)];
      var $66=$65;
      var $gch64=$66;
      var $marked65=(($gch64+5)|0);
      var $67=HEAP8[($marked65)];
      var $conv66=(($67)&255);
      var $and67=$conv66 & 3;
      var $tobool68=(($and67)|0)!=0;
      if ($tobool68) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $68=$g_addr;
      var $69=$i;
      var $70=$f_addr;
      var $p70=(($70+16)|0);
      var $71=HEAP32[(($p70)>>2)];
      var $arrayidx71=(($71+($69<<2))|0);
      var $72=HEAP32[(($arrayidx71)>>2)];
      var $73=$72;
      _reallymarkobject($68, $73);
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $74=$i;
      var $inc74=((($74)+(1))|0);
      $i=$inc74;
      label = 23; break;
    case 29: 
      $i=0;
      label = 30; break;
    case 30: 
      var $75=$i;
      var $76=$f_addr;
      var $sizelocvars=(($76+60)|0);
      var $77=HEAP32[(($sizelocvars)>>2)];
      var $cmp77=(($75)|0) < (($77)|0);
      if ($cmp77) { label = 31; break; } else { label = 36; break; }
    case 31: 
      var $78=$i;
      var $79=$f_addr;
      var $locvars=(($79+24)|0);
      var $80=HEAP32[(($locvars)>>2)];
      var $arrayidx80=(($80+((($78)*(12))&-1))|0);
      var $varname=(($arrayidx80)|0);
      var $81=HEAP32[(($varname)>>2)];
      var $tobool81=(($81)|0)!=0;
      if ($tobool81) { label = 32; break; } else { label = 34; break; }
    case 32: 
      var $82=$i;
      var $83=$f_addr;
      var $locvars83=(($83+24)|0);
      var $84=HEAP32[(($locvars83)>>2)];
      var $arrayidx84=(($84+((($82)*(12))&-1))|0);
      var $varname85=(($arrayidx84)|0);
      var $85=HEAP32[(($varname85)>>2)];
      var $86=$85;
      var $gch86=$86;
      var $marked87=(($gch86+5)|0);
      var $87=HEAP8[($marked87)];
      var $conv88=(($87)&255);
      var $and89=$conv88 & 3;
      var $tobool90=(($and89)|0)!=0;
      if ($tobool90) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $88=$g_addr;
      var $89=$i;
      var $90=$f_addr;
      var $locvars92=(($90+24)|0);
      var $91=HEAP32[(($locvars92)>>2)];
      var $arrayidx93=(($91+((($89)*(12))&-1))|0);
      var $varname94=(($arrayidx93)|0);
      var $92=HEAP32[(($varname94)>>2)];
      var $93=$92;
      _reallymarkobject($88, $93);
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $94=$i;
      var $inc97=((($94)+(1))|0);
      $i=$inc97;
      label = 30; break;
    case 36: 
      var $95=$f_addr;
      var $sizecode=(($95+48)|0);
      var $96=HEAP32[(($sizecode)>>2)];
      var $mul=($96<<2);
      var $add=((($mul)+(80))|0);
      var $97=$f_addr;
      var $sizep99=(($97+56)|0);
      var $98=HEAP32[(($sizep99)>>2)];
      var $mul100=($98<<2);
      var $add101=((($add)+($mul100))|0);
      var $99=$f_addr;
      var $sizek102=(($99+44)|0);
      var $100=HEAP32[(($sizek102)>>2)];
      var $mul103=((($100)*(12))&-1);
      var $add104=((($add101)+($mul103))|0);
      var $101=$f_addr;
      var $sizelineinfo=(($101+52)|0);
      var $102=HEAP32[(($sizelineinfo)>>2)];
      var $mul105=($102<<2);
      var $add106=((($add104)+($mul105))|0);
      var $103=$f_addr;
      var $sizelocvars107=(($103+60)|0);
      var $104=HEAP32[(($sizelocvars107)>>2)];
      var $mul108=((($104)*(12))&-1);
      var $add109=((($add106)+($mul108))|0);
      var $105=$f_addr;
      var $sizeupvalues110=(($105+40)|0);
      var $106=HEAP32[(($sizeupvalues110)>>2)];
      var $mul111=($106<<3);
      var $add112=((($add109)+($mul111))|0);

      return $add112;
  }

}
_traverseproto["X"]=1;

function _traverseweakvalue($g, $h) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $h_addr;
      var $n;
      var $limit;
      var $hasclears;
      $g_addr=$g;
      $h_addr=$h;
      var $0=$h_addr;
      var $lsizenode=(($0+7)|0);
      var $1=HEAP8[($lsizenode)];
      var $conv=(($1)&255);
      var $shl=1 << $conv;
      var $2=$h_addr;
      var $node=(($2+16)|0);
      var $3=HEAP32[(($node)>>2)];
      var $arrayidx=(($3+((($shl)*(28))&-1))|0);
      $limit=$arrayidx;
      var $4=$h_addr;
      var $sizearray=(($4+28)|0);
      var $5=HEAP32[(($sizearray)>>2)];
      var $cmp=(($5)|0) > 0;
      var $conv1=(($cmp)&1);
      $hasclears=$conv1;
      var $6=$h_addr;
      var $node2=(($6+16)|0);
      var $7=HEAP32[(($node2)>>2)];
      var $arrayidx3=(($7)|0);
      $n=$arrayidx3;
      label = 3; break;
    case 3: 
      var $8=$n;
      var $9=$limit;
      var $cmp4=(($8)>>>0) < (($9)>>>0);
      if ($cmp4) { label = 4; break; } else { label = 15; break; }
    case 4: 
      var $10=$n;
      var $i_val=(($10)|0);
      var $tt_=(($i_val+8)|0);
      var $11=HEAP32[(($tt_)>>2)];
      var $cmp6=(($11)|0)==0;
      if ($cmp6) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $12=$n;
      _removeentry($12);
      label = 13; break;
    case 6: 
      var $13=$n;
      var $i_key=(($13+12)|0);
      var $tvk=$i_key;
      var $tt_8=(($tvk+8)|0);
      var $14=HEAP32[(($tt_8)>>2)];
      var $and=$14 & 64;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $15=$n;
      var $i_key9=(($15+12)|0);
      var $tvk10=$i_key9;
      var $value_=(($tvk10)|0);
      var $gc=$value_;
      var $16=HEAP32[(($gc)>>2)];
      var $gch=$16;
      var $marked=(($gch+5)|0);
      var $17=HEAP8[($marked)];
      var $conv11=(($17)&255);
      var $and12=$conv11 & 3;
      var $tobool13=(($and12)|0)!=0;
      if ($tobool13) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $18=$g_addr;
      var $19=$n;
      var $i_key15=(($19+12)|0);
      var $tvk16=$i_key15;
      var $value_17=(($tvk16)|0);
      var $gc18=$value_17;
      var $20=HEAP32[(($gc18)>>2)];
      _reallymarkobject($18, $20);
      label = 9; break;
    case 9: 
      var $21=$hasclears;
      var $tobool19=(($21)|0)!=0;
      if ($tobool19) { label = 12; break; } else { label = 10; break; }
    case 10: 
      var $22=$g_addr;
      var $23=$n;
      var $i_val21=(($23)|0);
      var $call=_iscleared($22, $i_val21);
      var $tobool22=(($call)|0)!=0;
      if ($tobool22) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $hasclears=1;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $24=$n;
      var $incdec_ptr=(($24+28)|0);
      $n=$incdec_ptr;
      label = 3; break;
    case 15: 
      var $25=$hasclears;
      var $tobool26=(($25)|0)!=0;
      if ($tobool26) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $26=$g_addr;
      var $weak=(($26+84)|0);
      var $27=HEAP32[(($weak)>>2)];
      var $28=$h_addr;
      var $gclist=(($28+24)|0);
      HEAP32[(($gclist)>>2)]=$27;
      var $29=$h_addr;
      var $30=$29;
      var $31=$g_addr;
      var $weak28=(($31+84)|0);
      HEAP32[(($weak28)>>2)]=$30;
      label = 18; break;
    case 17: 
      var $32=$g_addr;
      var $grayagain=(($32+80)|0);
      var $33=HEAP32[(($grayagain)>>2)];
      var $34=$h_addr;
      var $gclist30=(($34+24)|0);
      HEAP32[(($gclist30)>>2)]=$33;
      var $35=$h_addr;
      var $36=$35;
      var $37=$g_addr;
      var $grayagain31=(($37+80)|0);
      HEAP32[(($grayagain31)>>2)]=$36;
      label = 18; break;
    case 18: 

      return;
  }

}
_traverseweakvalue["X"]=1;

function _traversestrongtable($g, $h) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $g_addr;
      var $h_addr;
      var $n;
      var $limit;
      var $i;
      $g_addr=$g;
      $h_addr=$h;
      var $0=$h_addr;
      var $lsizenode=(($0+7)|0);
      var $1=HEAP8[($lsizenode)];
      var $conv=(($1)&255);
      var $shl=1 << $conv;
      var $2=$h_addr;
      var $node=(($2+16)|0);
      var $3=HEAP32[(($node)>>2)];
      var $arrayidx=(($3+((($shl)*(28))&-1))|0);
      $limit=$arrayidx;
      $i=0;
      label = 3; break;
    case 3: 
      var $4=$i;
      var $5=$h_addr;
      var $sizearray=(($5+28)|0);
      var $6=HEAP32[(($sizearray)>>2)];
      var $cmp=(($4)|0) < (($6)|0);
      if ($cmp) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $7=$i;
      var $8=$h_addr;
      var $array=(($8+12)|0);
      var $9=HEAP32[(($array)>>2)];
      var $arrayidx2=(($9+((($7)*(12))&-1))|0);
      var $tt_=(($arrayidx2+8)|0);
      var $10=HEAP32[(($tt_)>>2)];
      var $and=$10 & 64;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $11=$i;
      var $12=$h_addr;
      var $array3=(($12+12)|0);
      var $13=HEAP32[(($array3)>>2)];
      var $arrayidx4=(($13+((($11)*(12))&-1))|0);
      var $value_=(($arrayidx4)|0);
      var $gc=$value_;
      var $14=HEAP32[(($gc)>>2)];
      var $gch=$14;
      var $marked=(($gch+5)|0);
      var $15=HEAP8[($marked)];
      var $conv5=(($15)&255);
      var $and6=$conv5 & 3;
      var $tobool7=(($and6)|0)!=0;
      if ($tobool7) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $16=$g_addr;
      var $17=$i;
      var $18=$h_addr;
      var $array8=(($18+12)|0);
      var $19=HEAP32[(($array8)>>2)];
      var $arrayidx9=(($19+((($17)*(12))&-1))|0);
      var $value_10=(($arrayidx9)|0);
      var $gc11=$value_10;
      var $20=HEAP32[(($gc11)>>2)];
      _reallymarkobject($16, $20);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $21=$i;
      var $inc=((($21)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 9: 
      var $22=$h_addr;
      var $node12=(($22+16)|0);
      var $23=HEAP32[(($node12)>>2)];
      var $arrayidx13=(($23)|0);
      $n=$arrayidx13;
      label = 10; break;
    case 10: 
      var $24=$n;
      var $25=$limit;
      var $cmp15=(($24)>>>0) < (($25)>>>0);
      if ($cmp15) { label = 11; break; } else { label = 22; break; }
    case 11: 
      var $26=$n;
      var $i_val=(($26)|0);
      var $tt_18=(($i_val+8)|0);
      var $27=HEAP32[(($tt_18)>>2)];
      var $cmp19=(($27)|0)==0;
      if ($cmp19) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $28=$n;
      _removeentry($28);
      label = 20; break;
    case 13: 
      var $29=$n;
      var $i_key=(($29+12)|0);
      var $tvk=$i_key;
      var $tt_22=(($tvk+8)|0);
      var $30=HEAP32[(($tt_22)>>2)];
      var $and23=$30 & 64;
      var $tobool24=(($and23)|0)!=0;
      if ($tobool24) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $31=$n;
      var $i_key26=(($31+12)|0);
      var $tvk27=$i_key26;
      var $value_28=(($tvk27)|0);
      var $gc29=$value_28;
      var $32=HEAP32[(($gc29)>>2)];
      var $gch30=$32;
      var $marked31=(($gch30+5)|0);
      var $33=HEAP8[($marked31)];
      var $conv32=(($33)&255);
      var $and33=$conv32 & 3;
      var $tobool34=(($and33)|0)!=0;
      if ($tobool34) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $34=$g_addr;
      var $35=$n;
      var $i_key36=(($35+12)|0);
      var $tvk37=$i_key36;
      var $value_38=(($tvk37)|0);
      var $gc39=$value_38;
      var $36=HEAP32[(($gc39)>>2)];
      _reallymarkobject($34, $36);
      label = 16; break;
    case 16: 
      var $37=$n;
      var $i_val41=(($37)|0);
      var $tt_42=(($i_val41+8)|0);
      var $38=HEAP32[(($tt_42)>>2)];
      var $and43=$38 & 64;
      var $tobool44=(($and43)|0)!=0;
      if ($tobool44) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $39=$n;
      var $i_val46=(($39)|0);
      var $value_47=(($i_val46)|0);
      var $gc48=$value_47;
      var $40=HEAP32[(($gc48)>>2)];
      var $gch49=$40;
      var $marked50=(($gch49+5)|0);
      var $41=HEAP8[($marked50)];
      var $conv51=(($41)&255);
      var $and52=$conv51 & 3;
      var $tobool53=(($and52)|0)!=0;
      if ($tobool53) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $42=$g_addr;
      var $43=$n;
      var $i_val55=(($43)|0);
      var $value_56=(($i_val55)|0);
      var $gc57=$value_56;
      var $44=HEAP32[(($gc57)>>2)];
      _reallymarkobject($42, $44);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $45=$n;
      var $incdec_ptr=(($45+28)|0);
      $n=$incdec_ptr;
      label = 10; break;
    case 22: 

      return;
  }

}
_traversestrongtable["X"]=1;

function _freeobj($L, $o) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $o_addr;
      $L_addr=$L;
      $o_addr=$o;
      var $0=$o_addr;
      var $gch=$0;
      var $tt=(($gch+4)|0);
      var $1=HEAP8[($tt)];
      var $conv=(($1)&255);
      if ((($conv)|0)==9) {
        label = 3; break;
      }
      else if ((($conv)|0)==6) {
        label = 4; break;
      }
      else if ((($conv)|0)==38) {
        label = 5; break;
      }
      else if ((($conv)|0)==10) {
        label = 6; break;
      }
      else if ((($conv)|0)==5) {
        label = 7; break;
      }
      else if ((($conv)|0)==8) {
        label = 8; break;
      }
      else if ((($conv)|0)==7) {
        label = 9; break;
      }
      else if ((($conv)|0)==4) {
        label = 10; break;
      }
      else if ((($conv)|0)==20) {
        label = 11; break;
      }
      else {
      label = 12; break;
      }
      
    case 3: 
      var $2=$L_addr;
      var $3=$o_addr;
      var $p=$3;
      _luaF_freeproto($2, $p);
      label = 13; break;
    case 4: 
      var $4=$L_addr;
      var $5=$o_addr;
      var $6=$5;
      var $7=$o_addr;
      var $cl=$7;
      var $l=$cl;
      var $nupvalues=(($l+6)|0);
      var $8=HEAP8[($nupvalues)];
      var $conv2=(($8)&255);
      var $sub=((($conv2)-(1))|0);
      var $mul=($sub<<2);
      var $add=((($mul)+(20))|0);
      var $call=_luaM_realloc_($4, $6, $add, 0);
      label = 13; break;
    case 5: 
      var $9=$L_addr;
      var $10=$o_addr;
      var $11=$10;
      var $12=$o_addr;
      var $cl4=$12;
      var $c=$cl4;
      var $nupvalues5=(($c+6)|0);
      var $13=HEAP8[($nupvalues5)];
      var $conv6=(($13)&255);
      var $sub7=((($conv6)-(1))|0);
      var $mul8=((($sub7)*(12))&-1);
      var $add9=((($mul8)+(28))|0);
      var $call10=_luaM_realloc_($9, $11, $add9, 0);
      label = 13; break;
    case 6: 
      var $14=$L_addr;
      var $15=$o_addr;
      var $uv=$15;
      _luaF_freeupval($14, $uv);
      label = 13; break;
    case 7: 
      var $16=$L_addr;
      var $17=$o_addr;
      var $h=$17;
      _luaH_free($16, $h);
      label = 13; break;
    case 8: 
      var $18=$L_addr;
      var $19=$o_addr;
      var $th=$19;
      _luaE_freethread($18, $th);
      label = 13; break;
    case 9: 
      var $20=$L_addr;
      var $21=$o_addr;
      var $22=$21;
      var $23=$o_addr;
      var $u=$23;
      var $uv15=$u;
      var $len=(($uv15+16)|0);
      var $24=HEAP32[(($len)>>2)];
      var $add16=((($24)+(20))|0);
      var $call17=_luaM_realloc_($20, $22, $add16, 0);
      label = 13; break;
    case 10: 
      var $25=$L_addr;
      var $l_G=(($25+12)|0);
      var $26=HEAP32[(($l_G)>>2)];
      var $strt=(($26+24)|0);
      var $nuse=(($strt+4)|0);
      var $27=HEAP32[(($nuse)>>2)];
      var $dec=((($27)-(1))|0);
      HEAP32[(($nuse)>>2)]=$dec;
      label = 11; break;
    case 11: 
      var $28=$L_addr;
      var $29=$o_addr;
      var $30=$29;
      var $31=$o_addr;
      var $ts=$31;
      var $tsv=$ts;
      var $len20=(($tsv+12)|0);
      var $32=HEAP32[(($len20)>>2)];
      var $add21=((($32)+(1))|0);
      var $mul22=$add21;
      var $add23=((($mul22)+(16))|0);
      var $call24=_luaM_realloc_($28, $30, $add23, 0);
      label = 13; break;
    case 12: 
      label = 13; break;
    case 13: 

      return;
  }

}
_freeobj["X"]=1;

function _sweepthread($L, $L1) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $L1_addr;
      $L_addr=$L;
      $L1_addr=$L1;
      var $0=$L1_addr;
      var $stack=(($0+28)|0);
      var $1=HEAP32[(($stack)>>2)];
      var $cmp=(($1)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 6; break;
    case 4: 
      var $2=$L_addr;
      var $3=$L1_addr;
      var $openupval=(($3+56)|0);
      var $call=_sweeplist($2, $openupval, -3);
      var $4=$L1_addr;
      _luaE_freeCI($4);
      var $5=$L_addr;
      var $l_G=(($5+12)|0);
      var $6=HEAP32[(($l_G)>>2)];
      var $gckind=(($6+54)|0);
      var $7=HEAP8[($gckind)];
      var $conv=(($7)&255);
      var $cmp1=(($conv)|0)!=1;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=$L1_addr;
      _luaD_shrinkstack($8);
      label = 6; break;
    case 6: 

      return;
  }

}


function _luaX_init($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $i;
      var $ts;
      $L_addr=$L;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|0) < 22;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$L_addr;
      var $2=$i;
      var $arrayidx=((5243804+($2<<2))|0);
      var $3=HEAP32[(($arrayidx)>>2)];
      var $call=_luaS_new($1, $3);
      $ts=$call;
      var $4=$ts;
      var $tsv=$4;
      var $marked=(($tsv+5)|0);
      var $5=HEAP8[($marked)];
      var $conv=(($5)&255);
      var $or=$conv | 32;
      var $conv1=(($or) & 255);
      HEAP8[($marked)]=$conv1;
      var $6=$i;
      var $add=((($6)+(1))|0);
      var $conv2=(($add) & 255);
      var $7=$ts;
      var $tsv3=$7;
      var $extra=(($tsv3+6)|0);
      HEAP8[($extra)]=$conv2;
      label = 5; break;
    case 5: 
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 

      return;
  }

}


function _luaX_token2str($ls, $token) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $ls_addr;
      var $token_addr;
      var $s;
      $ls_addr=$ls;
      $token_addr=$token;
      var $0=$token_addr;
      var $cmp=(($0)|0) < 257;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$token_addr;
      var $add=((($1)+(1))|0);
      var $arrayidx=((5243528+$add)|0);
      var $2=HEAP8[($arrayidx)];
      var $conv=(($2)&255);
      var $and=$conv & 4;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$ls_addr;
      var $L=(($3+40)|0);
      var $4=HEAP32[(($L)>>2)];
      var $5=$token_addr;
      var $call=_luaO_pushfstring($4, ((5245856)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$5,tempInt));
      var $cond = $call;label = 6; break;
    case 5: 
      var $6=$ls_addr;
      var $L1=(($6+40)|0);
      var $7=HEAP32[(($L1)>>2)];
      var $8=$token_addr;
      var $call2=_luaO_pushfstring($7, ((5251844)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$8,tempInt));
      var $cond = $call2;label = 6; break;
    case 6: 
      var $cond;
      $retval=$cond;
      label = 10; break;
    case 7: 
      var $9=$token_addr;
      var $sub=((($9)-(257))|0);
      var $arrayidx3=((5243804+($sub<<2))|0);
      var $10=HEAP32[(($arrayidx3)>>2)];
      $s=$10;
      var $11=$token_addr;
      var $cmp4=(($11)|0) < 286;
      if ($cmp4) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $12=$ls_addr;
      var $L7=(($12+40)|0);
      var $13=HEAP32[(($L7)>>2)];
      var $14=$s;
      var $call8=_luaO_pushfstring($13, ((5249864)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$14,tempInt));
      $retval=$call8;
      label = 10; break;
    case 9: 
      var $15=$s;
      $retval=$15;
      label = 10; break;
    case 10: 
      var $16=$retval;
      STACKTOP = __stackBase__;
      return $16;
  }

}
_luaX_token2str["X"]=1;

function _luaX_newstring($ls, $str, $l) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $str_addr;
      var $l_addr;
      var $L;
      var $o;
      var $ts;
      var $io;
      var $x_;
      var $io6;
      $ls_addr=$ls;
      $str_addr=$str;
      $l_addr=$l;
      var $0=$ls_addr;
      var $L1=(($0+40)|0);
      var $1=HEAP32[(($L1)>>2)];
      $L=$1;
      var $2=$L;
      var $3=$str_addr;
      var $4=$l_addr;
      var $call=_luaS_newlstr($2, $3, $4);
      $ts=$call;
      var $5=$L;
      var $top=(($5+8)|0);
      var $6=HEAP32[(($top)>>2)];
      var $incdec_ptr=(($6+12)|0);
      HEAP32[(($top)>>2)]=$incdec_ptr;
      $io=$6;
      var $7=$ts;
      $x_=$7;
      var $8=$x_;
      var $9=$8;
      var $10=$io;
      var $value_=(($10)|0);
      var $gc=$value_;
      HEAP32[(($gc)>>2)]=$9;
      var $11=$x_;
      var $tsv=$11;
      var $tt=(($tsv+4)|0);
      var $12=HEAP8[($tt)];
      var $conv=(($12)&255);
      var $or=$conv | 64;
      var $13=$io;
      var $tt_=(($13+8)|0);
      HEAP32[(($tt_)>>2)]=$or;
      var $14=$L;
      var $15=$ls_addr;
      var $fs=(($15+36)|0);
      var $16=HEAP32[(($fs)>>2)];
      var $h=(($16+4)|0);
      var $17=HEAP32[(($h)>>2)];
      var $18=$L;
      var $top2=(($18+8)|0);
      var $19=HEAP32[(($top2)>>2)];
      var $add_ptr=((($19)-(12))|0);
      var $call3=_luaH_set($14, $17, $add_ptr);
      $o=$call3;
      var $20=$o;
      var $tt_4=(($20+8)|0);
      var $21=HEAP32[(($tt_4)>>2)];
      var $cmp=(($21)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $22=$o;
      $io6=$22;
      var $23=$io6;
      var $value_7=(($23)|0);
      var $b=$value_7;
      HEAP32[(($b)>>2)]=1;
      var $24=$io6;
      var $tt_8=(($24+8)|0);
      HEAP32[(($tt_8)>>2)]=1;
      var $25=$L;
      var $l_G=(($25+12)|0);
      var $26=HEAP32[(($l_G)>>2)];
      var $GCdebt=(($26+12)|0);
      var $27=HEAP32[(($GCdebt)>>2)];
      var $cmp9=(($27)|0) > 0;
      if ($cmp9) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $28=$L;
      _luaC_step($28);
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $29=$L;
      var $top13=(($29+8)|0);
      var $30=HEAP32[(($top13)>>2)];
      var $incdec_ptr14=((($30)-(12))|0);
      HEAP32[(($top13)>>2)]=$incdec_ptr14;
      var $31=$ts;

      return $31;
  }

}
_luaX_newstring["X"]=1;

function _luaX_setinput($L, $ls, $z, $source, $firstchar) {
  var label = 0;


  var $L_addr;
  var $ls_addr;
  var $z_addr;
  var $source_addr;
  var $firstchar_addr;
  $L_addr=$L;
  $ls_addr=$ls;
  $z_addr=$z;
  $source_addr=$source;
  $firstchar_addr=$firstchar;
  var $0=$ls_addr;
  var $decpoint=(($0+64)|0);
  HEAP8[($decpoint)]=46;
  var $1=$L_addr;
  var $2=$ls_addr;
  var $L1=(($2+40)|0);
  HEAP32[(($L1)>>2)]=$1;
  var $3=$firstchar_addr;
  var $4=$ls_addr;
  var $current=(($4)|0);
  HEAP32[(($current)>>2)]=$3;
  var $5=$ls_addr;
  var $lookahead=(($5+24)|0);
  var $token=(($lookahead)|0);
  HEAP32[(($token)>>2)]=286;
  var $6=$z_addr;
  var $7=$ls_addr;
  var $z2=(($7+44)|0);
  HEAP32[(($z2)>>2)]=$6;
  var $8=$ls_addr;
  var $fs=(($8+36)|0);
  HEAP32[(($fs)>>2)]=0;
  var $9=$ls_addr;
  var $linenumber=(($9+4)|0);
  HEAP32[(($linenumber)>>2)]=1;
  var $10=$ls_addr;
  var $lastline=(($10+8)|0);
  HEAP32[(($lastline)>>2)]=1;
  var $11=$source_addr;
  var $12=$ls_addr;
  var $source3=(($12+56)|0);
  HEAP32[(($source3)>>2)]=$11;
  var $13=$L_addr;
  var $call=_luaS_new($13, ((5248424)|0));
  var $14=$ls_addr;
  var $envn=(($14+60)|0);
  HEAP32[(($envn)>>2)]=$call;
  var $15=$ls_addr;
  var $envn4=(($15+60)|0);
  var $16=HEAP32[(($envn4)>>2)];
  var $tsv=$16;
  var $marked=(($tsv+5)|0);
  var $17=HEAP8[($marked)];
  var $conv=(($17)&255);
  var $or=$conv | 32;
  var $conv5=(($or) & 255);
  HEAP8[($marked)]=$conv5;
  var $18=$ls_addr;
  var $L6=(($18+40)|0);
  var $19=HEAP32[(($L6)>>2)];
  var $20=$ls_addr;
  var $buff=(($20+48)|0);
  var $21=HEAP32[(($buff)>>2)];
  var $buffer=(($21)|0);
  var $22=HEAP32[(($buffer)>>2)];
  var $23=$ls_addr;
  var $buff7=(($23+48)|0);
  var $24=HEAP32[(($buff7)>>2)];
  var $buffsize=(($24+8)|0);
  var $25=HEAP32[(($buffsize)>>2)];
  var $mul=$25;
  var $call8=_luaM_realloc_($19, $22, $mul, 32);
  var $26=$ls_addr;
  var $buff9=(($26+48)|0);
  var $27=HEAP32[(($buff9)>>2)];
  var $buffer10=(($27)|0);
  HEAP32[(($buffer10)>>2)]=$call8;
  var $28=$ls_addr;
  var $buff11=(($28+48)|0);
  var $29=HEAP32[(($buff11)>>2)];
  var $buffsize12=(($29+8)|0);
  HEAP32[(($buffsize12)>>2)]=32;

  return;
}
_luaX_setinput["X"]=1;

function _luaX_next($ls) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      $ls_addr=$ls;
      var $0=$ls_addr;
      var $linenumber=(($0+4)|0);
      var $1=HEAP32[(($linenumber)>>2)];
      var $2=$ls_addr;
      var $lastline=(($2+8)|0);
      HEAP32[(($lastline)>>2)]=$1;
      var $3=$ls_addr;
      var $lookahead=(($3+24)|0);
      var $token=(($lookahead)|0);
      var $4=HEAP32[(($token)>>2)];
      var $cmp=(($4)|0)!=286;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$ls_addr;
      var $t=(($5+12)|0);
      var $6=$ls_addr;
      var $lookahead1=(($6+24)|0);
      var $7=$t;
      var $8=$lookahead1;
      HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
      var $9=$ls_addr;
      var $lookahead2=(($9+24)|0);
      var $token3=(($lookahead2)|0);
      HEAP32[(($token3)>>2)]=286;
      label = 5; break;
    case 4: 
      var $10=$ls_addr;
      var $11=$ls_addr;
      var $t4=(($11+12)|0);
      var $seminfo=(($t4+4)|0);
      var $call=_llex($10, $seminfo);
      var $12=$ls_addr;
      var $t5=(($12+12)|0);
      var $token6=(($t5)|0);
      HEAP32[(($token6)>>2)]=$call;
      label = 5; break;
    case 5: 

      return;
  }

}


function _luaX_syntaxerror($ls, $msg) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $msg_addr;
      $ls_addr=$ls;
      $msg_addr=$msg;
      var $0=$ls_addr;
      var $1=$msg_addr;
      var $2=$ls_addr;
      var $t=(($2+12)|0);
      var $token=(($t)|0);
      var $3=HEAP32[(($token)>>2)];
      _lexerror($0, $1, $3);

    case 3: 

      return;
  }

}


function _lexerror($ls, $msg, $token) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; _memset(__stackBase__, 0, 60);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $msg_addr;
      var $token_addr;
      var $buff=__stackBase__;
      $ls_addr=$ls;
      $msg_addr=$msg;
      $token_addr=$token;
      var $arraydecay=(($buff)|0);
      var $0=$ls_addr;
      var $source=(($0+56)|0);
      var $1=HEAP32[(($source)>>2)];
      var $add_ptr=(($1+16)|0);
      var $2=$add_ptr;
      _luaO_chunkid($arraydecay, $2, 60);
      var $3=$ls_addr;
      var $L=(($3+40)|0);
      var $4=HEAP32[(($L)>>2)];
      var $arraydecay1=(($buff)|0);
      var $5=$ls_addr;
      var $linenumber=(($5+4)|0);
      var $6=HEAP32[(($linenumber)>>2)];
      var $7=$msg_addr;
      var $call=_luaO_pushfstring($4, ((5251464)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 12),STACKTOP = (STACKTOP + 12)|0,HEAP32[((tempInt)>>2)]=$arraydecay1,HEAP32[(((tempInt)+(4))>>2)]=$6,HEAP32[(((tempInt)+(8))>>2)]=$7,tempInt));
      $msg_addr=$call;
      var $8=$token_addr;
      var $tobool=(($8)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $9=$ls_addr;
      var $L2=(($9+40)|0);
      var $10=HEAP32[(($L2)>>2)];
      var $11=$msg_addr;
      var $12=$ls_addr;
      var $13=$token_addr;
      var $call3=_txtToken($12, $13);
      var $call4=_luaO_pushfstring($10, ((5251256)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempInt)>>2)]=$11,HEAP32[(((tempInt)+(4))>>2)]=$call3,tempInt));
      label = 4; break;
    case 4: 
      var $14=$ls_addr;
      var $L5=(($14+40)|0);
      var $15=HEAP32[(($L5)>>2)];
      _luaD_throw($15, 3);

    case 5: 
      STACKTOP = __stackBase__;
      return;
  }

}


function _llex($ls, $seminfo) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $ls_addr;
      var $seminfo_addr;
      var $sep;
      var $sep82;
      var $ts;
      var $c;
      $ls_addr=$ls;
      $seminfo_addr=$seminfo;
      var $0=$ls_addr;
      var $buff=(($0+48)|0);
      var $1=HEAP32[(($buff)>>2)];
      var $n=(($1+4)|0);
      HEAP32[(($n)>>2)]=0;
      label = 3; break;
    case 3: 
      var $2=$ls_addr;
      var $current=(($2)|0);
      var $3=HEAP32[(($current)>>2)];
      if ((($3)|0)==10 | (($3)|0)==13) {
        label = 4; break;
      }
      else if ((($3)|0)==32 | (($3)|0)==12 | (($3)|0)==9 | (($3)|0)==11) {
        label = 5; break;
      }
      else if ((($3)|0)==45) {
        label = 9; break;
      }
      else if ((($3)|0)==91) {
        label = 31; break;
      }
      else if ((($3)|0)==61) {
        label = 36; break;
      }
      else if ((($3)|0)==60) {
        label = 45; break;
      }
      else if ((($3)|0)==62) {
        label = 54; break;
      }
      else if ((($3)|0)==126) {
        label = 63; break;
      }
      else if ((($3)|0)==58) {
        label = 72; break;
      }
      else if ((($3)|0)==34 | (($3)|0)==39) {
        label = 81; break;
      }
      else if ((($3)|0)==46) {
        label = 82; break;
      }
      else if ((($3)|0)==48 | (($3)|0)==49 | (($3)|0)==50 | (($3)|0)==51 | (($3)|0)==52 | (($3)|0)==53 | (($3)|0)==54 | (($3)|0)==55 | (($3)|0)==56 | (($3)|0)==57) {
        label = 93; break;
      }
      else if ((($3)|0)==-1) {
        label = 94; break;
      }
      else {
      label = 95; break;
      }
      
    case 4: 
      var $4=$ls_addr;
      _inclinenumber($4);
      label = 110; break;
    case 5: 
      var $5=$ls_addr;
      var $z=(($5+44)|0);
      var $6=HEAP32[(($z)>>2)];
      var $n2=(($6)|0);
      var $7=HEAP32[(($n2)>>2)];
      var $dec=((($7)-(1))|0);
      HEAP32[(($n2)>>2)]=$dec;
      var $cmp=(($7)>>>0) > 0;
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $8=$ls_addr;
      var $z3=(($8+44)|0);
      var $9=HEAP32[(($z3)>>2)];
      var $p=(($9+4)|0);
      var $10=HEAP32[(($p)>>2)];
      var $incdec_ptr=(($10+1)|0);
      HEAP32[(($p)>>2)]=$incdec_ptr;
      var $11=HEAP8[($10)];
      var $conv=(($11)&255);
      var $cond = $conv;label = 8; break;
    case 7: 
      var $12=$ls_addr;
      var $z4=(($12+44)|0);
      var $13=HEAP32[(($z4)>>2)];
      var $call=_luaZ_fill($13);
      var $cond = $call;label = 8; break;
    case 8: 
      var $cond;
      var $14=$ls_addr;
      var $current5=(($14)|0);
      HEAP32[(($current5)>>2)]=$cond;
      label = 110; break;
    case 9: 
      var $15=$ls_addr;
      var $z7=(($15+44)|0);
      var $16=HEAP32[(($z7)>>2)];
      var $n8=(($16)|0);
      var $17=HEAP32[(($n8)>>2)];
      var $dec9=((($17)-(1))|0);
      HEAP32[(($n8)>>2)]=$dec9;
      var $cmp10=(($17)>>>0) > 0;
      if ($cmp10) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $18=$ls_addr;
      var $z13=(($18+44)|0);
      var $19=HEAP32[(($z13)>>2)];
      var $p14=(($19+4)|0);
      var $20=HEAP32[(($p14)>>2)];
      var $incdec_ptr15=(($20+1)|0);
      HEAP32[(($p14)>>2)]=$incdec_ptr15;
      var $21=HEAP8[($20)];
      var $conv16=(($21)&255);
      var $cond21 = $conv16;label = 12; break;
    case 11: 
      var $22=$ls_addr;
      var $z18=(($22+44)|0);
      var $23=HEAP32[(($z18)>>2)];
      var $call19=_luaZ_fill($23);
      var $cond21 = $call19;label = 12; break;
    case 12: 
      var $cond21;
      var $24=$ls_addr;
      var $current22=(($24)|0);
      HEAP32[(($current22)>>2)]=$cond21;
      var $25=$ls_addr;
      var $current23=(($25)|0);
      var $26=HEAP32[(($current23)>>2)];
      var $cmp24=(($26)|0)!=45;
      if ($cmp24) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $retval=45;
      label = 111; break;
    case 14: 
      var $27=$ls_addr;
      var $z26=(($27+44)|0);
      var $28=HEAP32[(($z26)>>2)];
      var $n27=(($28)|0);
      var $29=HEAP32[(($n27)>>2)];
      var $dec28=((($29)-(1))|0);
      HEAP32[(($n27)>>2)]=$dec28;
      var $cmp29=(($29)>>>0) > 0;
      if ($cmp29) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $30=$ls_addr;
      var $z32=(($30+44)|0);
      var $31=HEAP32[(($z32)>>2)];
      var $p33=(($31+4)|0);
      var $32=HEAP32[(($p33)>>2)];
      var $incdec_ptr34=(($32+1)|0);
      HEAP32[(($p33)>>2)]=$incdec_ptr34;
      var $33=HEAP8[($32)];
      var $conv35=(($33)&255);
      var $cond40 = $conv35;label = 17; break;
    case 16: 
      var $34=$ls_addr;
      var $z37=(($34+44)|0);
      var $35=HEAP32[(($z37)>>2)];
      var $call38=_luaZ_fill($35);
      var $cond40 = $call38;label = 17; break;
    case 17: 
      var $cond40;
      var $36=$ls_addr;
      var $current41=(($36)|0);
      HEAP32[(($current41)>>2)]=$cond40;
      var $37=$ls_addr;
      var $current42=(($37)|0);
      var $38=HEAP32[(($current42)>>2)];
      var $cmp43=(($38)|0)==91;
      if ($cmp43) { label = 18; break; } else { label = 21; break; }
    case 18: 
      var $39=$ls_addr;
      var $call46=_skip_sep($39);
      $sep=$call46;
      var $40=$ls_addr;
      var $buff47=(($40+48)|0);
      var $41=HEAP32[(($buff47)>>2)];
      var $n48=(($41+4)|0);
      HEAP32[(($n48)>>2)]=0;
      var $42=$sep;
      var $cmp49=(($42)|0) >= 0;
      if ($cmp49) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $43=$ls_addr;
      var $44=$sep;
      _read_long_string($43, 0, $44);
      var $45=$ls_addr;
      var $buff52=(($45+48)|0);
      var $46=HEAP32[(($buff52)>>2)];
      var $n53=(($46+4)|0);
      HEAP32[(($n53)>>2)]=0;
      label = 110; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $47=$ls_addr;
      var $current56=(($47)|0);
      var $48=HEAP32[(($current56)>>2)];
      var $cmp57=(($48)|0)==10;
      if ($cmp57) { var $53 = 0;label = 25; break; } else { label = 23; break; }
    case 23: 
      var $49=$ls_addr;
      var $current59=(($49)|0);
      var $50=HEAP32[(($current59)>>2)];
      var $cmp60=(($50)|0)==13;
      if ($cmp60) { var $53 = 0;label = 25; break; } else { label = 24; break; }
    case 24: 
      var $51=$ls_addr;
      var $current62=(($51)|0);
      var $52=HEAP32[(($current62)>>2)];
      var $cmp63=(($52)|0)!=-1;
      var $53 = $cmp63;label = 25; break;
    case 25: 
      var $53;
      if ($53) { label = 26; break; } else { label = 30; break; }
    case 26: 
      var $54=$ls_addr;
      var $z65=(($54+44)|0);
      var $55=HEAP32[(($z65)>>2)];
      var $n66=(($55)|0);
      var $56=HEAP32[(($n66)>>2)];
      var $dec67=((($56)-(1))|0);
      HEAP32[(($n66)>>2)]=$dec67;
      var $cmp68=(($56)>>>0) > 0;
      if ($cmp68) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $57=$ls_addr;
      var $z71=(($57+44)|0);
      var $58=HEAP32[(($z71)>>2)];
      var $p72=(($58+4)|0);
      var $59=HEAP32[(($p72)>>2)];
      var $incdec_ptr73=(($59+1)|0);
      HEAP32[(($p72)>>2)]=$incdec_ptr73;
      var $60=HEAP8[($59)];
      var $conv74=(($60)&255);
      var $cond79 = $conv74;label = 29; break;
    case 28: 
      var $61=$ls_addr;
      var $z76=(($61+44)|0);
      var $62=HEAP32[(($z76)>>2)];
      var $call77=_luaZ_fill($62);
      var $cond79 = $call77;label = 29; break;
    case 29: 
      var $cond79;
      var $63=$ls_addr;
      var $current80=(($63)|0);
      HEAP32[(($current80)>>2)]=$cond79;
      label = 22; break;
    case 30: 
      label = 110; break;
    case 31: 
      var $64=$ls_addr;
      var $call83=_skip_sep($64);
      $sep82=$call83;
      var $65=$sep82;
      var $cmp84=(($65)|0) >= 0;
      if ($cmp84) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $66=$ls_addr;
      var $67=$seminfo_addr;
      var $68=$sep82;
      _read_long_string($66, $67, $68);
      $retval=289;
      label = 111; break;
    case 33: 
      var $69=$sep82;
      var $cmp87=(($69)|0)==-1;
      if ($cmp87) { label = 34; break; } else { label = 35; break; }
    case 34: 
      $retval=91;
      label = 111; break;
    case 35: 
      var $70=$ls_addr;
      _lexerror($70, ((5247264)|0), 289);

    case 36: 
      var $71=$ls_addr;
      var $z92=(($71+44)|0);
      var $72=HEAP32[(($z92)>>2)];
      var $n93=(($72)|0);
      var $73=HEAP32[(($n93)>>2)];
      var $dec94=((($73)-(1))|0);
      HEAP32[(($n93)>>2)]=$dec94;
      var $cmp95=(($73)>>>0) > 0;
      if ($cmp95) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $74=$ls_addr;
      var $z98=(($74+44)|0);
      var $75=HEAP32[(($z98)>>2)];
      var $p99=(($75+4)|0);
      var $76=HEAP32[(($p99)>>2)];
      var $incdec_ptr100=(($76+1)|0);
      HEAP32[(($p99)>>2)]=$incdec_ptr100;
      var $77=HEAP8[($76)];
      var $conv101=(($77)&255);
      var $cond106 = $conv101;label = 39; break;
    case 38: 
      var $78=$ls_addr;
      var $z103=(($78+44)|0);
      var $79=HEAP32[(($z103)>>2)];
      var $call104=_luaZ_fill($79);
      var $cond106 = $call104;label = 39; break;
    case 39: 
      var $cond106;
      var $80=$ls_addr;
      var $current107=(($80)|0);
      HEAP32[(($current107)>>2)]=$cond106;
      var $81=$ls_addr;
      var $current108=(($81)|0);
      var $82=HEAP32[(($current108)>>2)];
      var $cmp109=(($82)|0)!=61;
      if ($cmp109) { label = 40; break; } else { label = 41; break; }
    case 40: 
      $retval=61;
      label = 111; break;
    case 41: 
      var $83=$ls_addr;
      var $z113=(($83+44)|0);
      var $84=HEAP32[(($z113)>>2)];
      var $n114=(($84)|0);
      var $85=HEAP32[(($n114)>>2)];
      var $dec115=((($85)-(1))|0);
      HEAP32[(($n114)>>2)]=$dec115;
      var $cmp116=(($85)>>>0) > 0;
      if ($cmp116) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $86=$ls_addr;
      var $z119=(($86+44)|0);
      var $87=HEAP32[(($z119)>>2)];
      var $p120=(($87+4)|0);
      var $88=HEAP32[(($p120)>>2)];
      var $incdec_ptr121=(($88+1)|0);
      HEAP32[(($p120)>>2)]=$incdec_ptr121;
      var $89=HEAP8[($88)];
      var $conv122=(($89)&255);
      var $cond127 = $conv122;label = 44; break;
    case 43: 
      var $90=$ls_addr;
      var $z124=(($90+44)|0);
      var $91=HEAP32[(($z124)>>2)];
      var $call125=_luaZ_fill($91);
      var $cond127 = $call125;label = 44; break;
    case 44: 
      var $cond127;
      var $92=$ls_addr;
      var $current128=(($92)|0);
      HEAP32[(($current128)>>2)]=$cond127;
      $retval=281;
      label = 111; break;
    case 45: 
      var $93=$ls_addr;
      var $z130=(($93+44)|0);
      var $94=HEAP32[(($z130)>>2)];
      var $n131=(($94)|0);
      var $95=HEAP32[(($n131)>>2)];
      var $dec132=((($95)-(1))|0);
      HEAP32[(($n131)>>2)]=$dec132;
      var $cmp133=(($95)>>>0) > 0;
      if ($cmp133) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $96=$ls_addr;
      var $z136=(($96+44)|0);
      var $97=HEAP32[(($z136)>>2)];
      var $p137=(($97+4)|0);
      var $98=HEAP32[(($p137)>>2)];
      var $incdec_ptr138=(($98+1)|0);
      HEAP32[(($p137)>>2)]=$incdec_ptr138;
      var $99=HEAP8[($98)];
      var $conv139=(($99)&255);
      var $cond144 = $conv139;label = 48; break;
    case 47: 
      var $100=$ls_addr;
      var $z141=(($100+44)|0);
      var $101=HEAP32[(($z141)>>2)];
      var $call142=_luaZ_fill($101);
      var $cond144 = $call142;label = 48; break;
    case 48: 
      var $cond144;
      var $102=$ls_addr;
      var $current145=(($102)|0);
      HEAP32[(($current145)>>2)]=$cond144;
      var $103=$ls_addr;
      var $current146=(($103)|0);
      var $104=HEAP32[(($current146)>>2)];
      var $cmp147=(($104)|0)!=61;
      if ($cmp147) { label = 49; break; } else { label = 50; break; }
    case 49: 
      $retval=60;
      label = 111; break;
    case 50: 
      var $105=$ls_addr;
      var $z151=(($105+44)|0);
      var $106=HEAP32[(($z151)>>2)];
      var $n152=(($106)|0);
      var $107=HEAP32[(($n152)>>2)];
      var $dec153=((($107)-(1))|0);
      HEAP32[(($n152)>>2)]=$dec153;
      var $cmp154=(($107)>>>0) > 0;
      if ($cmp154) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $108=$ls_addr;
      var $z157=(($108+44)|0);
      var $109=HEAP32[(($z157)>>2)];
      var $p158=(($109+4)|0);
      var $110=HEAP32[(($p158)>>2)];
      var $incdec_ptr159=(($110+1)|0);
      HEAP32[(($p158)>>2)]=$incdec_ptr159;
      var $111=HEAP8[($110)];
      var $conv160=(($111)&255);
      var $cond165 = $conv160;label = 53; break;
    case 52: 
      var $112=$ls_addr;
      var $z162=(($112+44)|0);
      var $113=HEAP32[(($z162)>>2)];
      var $call163=_luaZ_fill($113);
      var $cond165 = $call163;label = 53; break;
    case 53: 
      var $cond165;
      var $114=$ls_addr;
      var $current166=(($114)|0);
      HEAP32[(($current166)>>2)]=$cond165;
      $retval=283;
      label = 111; break;
    case 54: 
      var $115=$ls_addr;
      var $z168=(($115+44)|0);
      var $116=HEAP32[(($z168)>>2)];
      var $n169=(($116)|0);
      var $117=HEAP32[(($n169)>>2)];
      var $dec170=((($117)-(1))|0);
      HEAP32[(($n169)>>2)]=$dec170;
      var $cmp171=(($117)>>>0) > 0;
      if ($cmp171) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $118=$ls_addr;
      var $z174=(($118+44)|0);
      var $119=HEAP32[(($z174)>>2)];
      var $p175=(($119+4)|0);
      var $120=HEAP32[(($p175)>>2)];
      var $incdec_ptr176=(($120+1)|0);
      HEAP32[(($p175)>>2)]=$incdec_ptr176;
      var $121=HEAP8[($120)];
      var $conv177=(($121)&255);
      var $cond182 = $conv177;label = 57; break;
    case 56: 
      var $122=$ls_addr;
      var $z179=(($122+44)|0);
      var $123=HEAP32[(($z179)>>2)];
      var $call180=_luaZ_fill($123);
      var $cond182 = $call180;label = 57; break;
    case 57: 
      var $cond182;
      var $124=$ls_addr;
      var $current183=(($124)|0);
      HEAP32[(($current183)>>2)]=$cond182;
      var $125=$ls_addr;
      var $current184=(($125)|0);
      var $126=HEAP32[(($current184)>>2)];
      var $cmp185=(($126)|0)!=61;
      if ($cmp185) { label = 58; break; } else { label = 59; break; }
    case 58: 
      $retval=62;
      label = 111; break;
    case 59: 
      var $127=$ls_addr;
      var $z189=(($127+44)|0);
      var $128=HEAP32[(($z189)>>2)];
      var $n190=(($128)|0);
      var $129=HEAP32[(($n190)>>2)];
      var $dec191=((($129)-(1))|0);
      HEAP32[(($n190)>>2)]=$dec191;
      var $cmp192=(($129)>>>0) > 0;
      if ($cmp192) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $130=$ls_addr;
      var $z195=(($130+44)|0);
      var $131=HEAP32[(($z195)>>2)];
      var $p196=(($131+4)|0);
      var $132=HEAP32[(($p196)>>2)];
      var $incdec_ptr197=(($132+1)|0);
      HEAP32[(($p196)>>2)]=$incdec_ptr197;
      var $133=HEAP8[($132)];
      var $conv198=(($133)&255);
      var $cond203 = $conv198;label = 62; break;
    case 61: 
      var $134=$ls_addr;
      var $z200=(($134+44)|0);
      var $135=HEAP32[(($z200)>>2)];
      var $call201=_luaZ_fill($135);
      var $cond203 = $call201;label = 62; break;
    case 62: 
      var $cond203;
      var $136=$ls_addr;
      var $current204=(($136)|0);
      HEAP32[(($current204)>>2)]=$cond203;
      $retval=282;
      label = 111; break;
    case 63: 
      var $137=$ls_addr;
      var $z206=(($137+44)|0);
      var $138=HEAP32[(($z206)>>2)];
      var $n207=(($138)|0);
      var $139=HEAP32[(($n207)>>2)];
      var $dec208=((($139)-(1))|0);
      HEAP32[(($n207)>>2)]=$dec208;
      var $cmp209=(($139)>>>0) > 0;
      if ($cmp209) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $140=$ls_addr;
      var $z212=(($140+44)|0);
      var $141=HEAP32[(($z212)>>2)];
      var $p213=(($141+4)|0);
      var $142=HEAP32[(($p213)>>2)];
      var $incdec_ptr214=(($142+1)|0);
      HEAP32[(($p213)>>2)]=$incdec_ptr214;
      var $143=HEAP8[($142)];
      var $conv215=(($143)&255);
      var $cond220 = $conv215;label = 66; break;
    case 65: 
      var $144=$ls_addr;
      var $z217=(($144+44)|0);
      var $145=HEAP32[(($z217)>>2)];
      var $call218=_luaZ_fill($145);
      var $cond220 = $call218;label = 66; break;
    case 66: 
      var $cond220;
      var $146=$ls_addr;
      var $current221=(($146)|0);
      HEAP32[(($current221)>>2)]=$cond220;
      var $147=$ls_addr;
      var $current222=(($147)|0);
      var $148=HEAP32[(($current222)>>2)];
      var $cmp223=(($148)|0)!=61;
      if ($cmp223) { label = 67; break; } else { label = 68; break; }
    case 67: 
      $retval=126;
      label = 111; break;
    case 68: 
      var $149=$ls_addr;
      var $z227=(($149+44)|0);
      var $150=HEAP32[(($z227)>>2)];
      var $n228=(($150)|0);
      var $151=HEAP32[(($n228)>>2)];
      var $dec229=((($151)-(1))|0);
      HEAP32[(($n228)>>2)]=$dec229;
      var $cmp230=(($151)>>>0) > 0;
      if ($cmp230) { label = 69; break; } else { label = 70; break; }
    case 69: 
      var $152=$ls_addr;
      var $z233=(($152+44)|0);
      var $153=HEAP32[(($z233)>>2)];
      var $p234=(($153+4)|0);
      var $154=HEAP32[(($p234)>>2)];
      var $incdec_ptr235=(($154+1)|0);
      HEAP32[(($p234)>>2)]=$incdec_ptr235;
      var $155=HEAP8[($154)];
      var $conv236=(($155)&255);
      var $cond241 = $conv236;label = 71; break;
    case 70: 
      var $156=$ls_addr;
      var $z238=(($156+44)|0);
      var $157=HEAP32[(($z238)>>2)];
      var $call239=_luaZ_fill($157);
      var $cond241 = $call239;label = 71; break;
    case 71: 
      var $cond241;
      var $158=$ls_addr;
      var $current242=(($158)|0);
      HEAP32[(($current242)>>2)]=$cond241;
      $retval=284;
      label = 111; break;
    case 72: 
      var $159=$ls_addr;
      var $z244=(($159+44)|0);
      var $160=HEAP32[(($z244)>>2)];
      var $n245=(($160)|0);
      var $161=HEAP32[(($n245)>>2)];
      var $dec246=((($161)-(1))|0);
      HEAP32[(($n245)>>2)]=$dec246;
      var $cmp247=(($161)>>>0) > 0;
      if ($cmp247) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $162=$ls_addr;
      var $z250=(($162+44)|0);
      var $163=HEAP32[(($z250)>>2)];
      var $p251=(($163+4)|0);
      var $164=HEAP32[(($p251)>>2)];
      var $incdec_ptr252=(($164+1)|0);
      HEAP32[(($p251)>>2)]=$incdec_ptr252;
      var $165=HEAP8[($164)];
      var $conv253=(($165)&255);
      var $cond258 = $conv253;label = 75; break;
    case 74: 
      var $166=$ls_addr;
      var $z255=(($166+44)|0);
      var $167=HEAP32[(($z255)>>2)];
      var $call256=_luaZ_fill($167);
      var $cond258 = $call256;label = 75; break;
    case 75: 
      var $cond258;
      var $168=$ls_addr;
      var $current259=(($168)|0);
      HEAP32[(($current259)>>2)]=$cond258;
      var $169=$ls_addr;
      var $current260=(($169)|0);
      var $170=HEAP32[(($current260)>>2)];
      var $cmp261=(($170)|0)!=58;
      if ($cmp261) { label = 76; break; } else { label = 77; break; }
    case 76: 
      $retval=58;
      label = 111; break;
    case 77: 
      var $171=$ls_addr;
      var $z265=(($171+44)|0);
      var $172=HEAP32[(($z265)>>2)];
      var $n266=(($172)|0);
      var $173=HEAP32[(($n266)>>2)];
      var $dec267=((($173)-(1))|0);
      HEAP32[(($n266)>>2)]=$dec267;
      var $cmp268=(($173)>>>0) > 0;
      if ($cmp268) { label = 78; break; } else { label = 79; break; }
    case 78: 
      var $174=$ls_addr;
      var $z271=(($174+44)|0);
      var $175=HEAP32[(($z271)>>2)];
      var $p272=(($175+4)|0);
      var $176=HEAP32[(($p272)>>2)];
      var $incdec_ptr273=(($176+1)|0);
      HEAP32[(($p272)>>2)]=$incdec_ptr273;
      var $177=HEAP8[($176)];
      var $conv274=(($177)&255);
      var $cond279 = $conv274;label = 80; break;
    case 79: 
      var $178=$ls_addr;
      var $z276=(($178+44)|0);
      var $179=HEAP32[(($z276)>>2)];
      var $call277=_luaZ_fill($179);
      var $cond279 = $call277;label = 80; break;
    case 80: 
      var $cond279;
      var $180=$ls_addr;
      var $current280=(($180)|0);
      HEAP32[(($current280)>>2)]=$cond279;
      $retval=285;
      label = 111; break;
    case 81: 
      var $181=$ls_addr;
      var $182=$ls_addr;
      var $current282=(($182)|0);
      var $183=HEAP32[(($current282)>>2)];
      var $184=$seminfo_addr;
      _read_string($181, $183, $184);
      $retval=289;
      label = 111; break;
    case 82: 
      var $185=$ls_addr;
      var $186=$ls_addr;
      var $current284=(($186)|0);
      var $187=HEAP32[(($current284)>>2)];
      _save($185, $187);
      var $188=$ls_addr;
      var $z285=(($188+44)|0);
      var $189=HEAP32[(($z285)>>2)];
      var $n286=(($189)|0);
      var $190=HEAP32[(($n286)>>2)];
      var $dec287=((($190)-(1))|0);
      HEAP32[(($n286)>>2)]=$dec287;
      var $cmp288=(($190)>>>0) > 0;
      if ($cmp288) { label = 83; break; } else { label = 84; break; }
    case 83: 
      var $191=$ls_addr;
      var $z291=(($191+44)|0);
      var $192=HEAP32[(($z291)>>2)];
      var $p292=(($192+4)|0);
      var $193=HEAP32[(($p292)>>2)];
      var $incdec_ptr293=(($193+1)|0);
      HEAP32[(($p292)>>2)]=$incdec_ptr293;
      var $194=HEAP8[($193)];
      var $conv294=(($194)&255);
      var $cond299 = $conv294;label = 85; break;
    case 84: 
      var $195=$ls_addr;
      var $z296=(($195+44)|0);
      var $196=HEAP32[(($z296)>>2)];
      var $call297=_luaZ_fill($196);
      var $cond299 = $call297;label = 85; break;
    case 85: 
      var $cond299;
      var $197=$ls_addr;
      var $current300=(($197)|0);
      HEAP32[(($current300)>>2)]=$cond299;
      var $198=$ls_addr;
      var $call301=_check_next($198, ((5246624)|0));
      var $tobool=(($call301)|0)!=0;
      if ($tobool) { label = 86; break; } else { label = 89; break; }
    case 86: 
      var $199=$ls_addr;
      var $call303=_check_next($199, ((5246624)|0));
      var $tobool304=(($call303)|0)!=0;
      if ($tobool304) { label = 87; break; } else { label = 88; break; }
    case 87: 
      $retval=280;
      label = 111; break;
    case 88: 
      $retval=279;
      label = 111; break;
    case 89: 
      var $200=$ls_addr;
      var $current308=(($200)|0);
      var $201=HEAP32[(($current308)>>2)];
      var $add=((($201)+(1))|0);
      var $arrayidx=((5243528+$add)|0);
      var $202=HEAP8[($arrayidx)];
      var $conv309=(($202)&255);
      var $and=$conv309 & 2;
      var $tobool310=(($and)|0)!=0;
      if ($tobool310) { label = 91; break; } else { label = 90; break; }
    case 90: 
      $retval=46;
      label = 111; break;
    case 91: 
      label = 92; break;
    case 92: 
      label = 93; break;
    case 93: 
      var $203=$ls_addr;
      var $204=$seminfo_addr;
      _read_numeral($203, $204);
      $retval=287;
      label = 111; break;
    case 94: 
      $retval=286;
      label = 111; break;
    case 95: 
      var $205=$ls_addr;
      var $current316=(($205)|0);
      var $206=HEAP32[(($current316)>>2)];
      var $add317=((($206)+(1))|0);
      var $arrayidx318=((5243528+$add317)|0);
      var $207=HEAP8[($arrayidx318)];
      var $conv319=(($207)&255);
      var $and320=$conv319 & 1;
      var $tobool321=(($and320)|0)!=0;
      if ($tobool321) { label = 96; break; } else { label = 106; break; }
    case 96: 
      label = 97; break;
    case 97: 
      var $208=$ls_addr;
      var $209=$ls_addr;
      var $current323=(($209)|0);
      var $210=HEAP32[(($current323)>>2)];
      _save($208, $210);
      var $211=$ls_addr;
      var $z324=(($211+44)|0);
      var $212=HEAP32[(($z324)>>2)];
      var $n325=(($212)|0);
      var $213=HEAP32[(($n325)>>2)];
      var $dec326=((($213)-(1))|0);
      HEAP32[(($n325)>>2)]=$dec326;
      var $cmp327=(($213)>>>0) > 0;
      if ($cmp327) { label = 98; break; } else { label = 99; break; }
    case 98: 
      var $214=$ls_addr;
      var $z330=(($214+44)|0);
      var $215=HEAP32[(($z330)>>2)];
      var $p331=(($215+4)|0);
      var $216=HEAP32[(($p331)>>2)];
      var $incdec_ptr332=(($216+1)|0);
      HEAP32[(($p331)>>2)]=$incdec_ptr332;
      var $217=HEAP8[($216)];
      var $conv333=(($217)&255);
      var $cond338 = $conv333;label = 100; break;
    case 99: 
      var $218=$ls_addr;
      var $z335=(($218+44)|0);
      var $219=HEAP32[(($z335)>>2)];
      var $call336=_luaZ_fill($219);
      var $cond338 = $call336;label = 100; break;
    case 100: 
      var $cond338;
      var $220=$ls_addr;
      var $current339=(($220)|0);
      HEAP32[(($current339)>>2)]=$cond338;
      label = 101; break;
    case 101: 
      var $221=$ls_addr;
      var $current340=(($221)|0);
      var $222=HEAP32[(($current340)>>2)];
      var $add341=((($222)+(1))|0);
      var $arrayidx342=((5243528+$add341)|0);
      var $223=HEAP8[($arrayidx342)];
      var $conv343=(($223)&255);
      var $and344=$conv343 & 3;
      var $tobool345=(($and344)|0)!=0;
      if ($tobool345) { label = 97; break; } else { label = 102; break; }
    case 102: 
      var $224=$ls_addr;
      var $225=$ls_addr;
      var $buff346=(($225+48)|0);
      var $226=HEAP32[(($buff346)>>2)];
      var $buffer=(($226)|0);
      var $227=HEAP32[(($buffer)>>2)];
      var $228=$ls_addr;
      var $buff347=(($228+48)|0);
      var $229=HEAP32[(($buff347)>>2)];
      var $n348=(($229+4)|0);
      var $230=HEAP32[(($n348)>>2)];
      var $call349=_luaX_newstring($224, $227, $230);
      $ts=$call349;
      var $231=$ts;
      var $232=$seminfo_addr;
      var $ts350=$232;
      HEAP32[(($ts350)>>2)]=$231;
      var $233=$ts;
      var $tsv=$233;
      var $tt=(($tsv+4)|0);
      var $234=HEAP8[($tt)];
      var $conv351=(($234)&255);
      var $cmp352=(($conv351)|0)==4;
      if ($cmp352) { label = 103; break; } else { label = 105; break; }
    case 103: 
      var $235=$ts;
      var $tsv354=$235;
      var $extra=(($tsv354+6)|0);
      var $236=HEAP8[($extra)];
      var $conv355=(($236)&255);
      var $cmp356=(($conv355)|0) > 0;
      if ($cmp356) { label = 104; break; } else { label = 105; break; }
    case 104: 
      var $237=$ts;
      var $tsv359=$237;
      var $extra360=(($tsv359+6)|0);
      var $238=HEAP8[($extra360)];
      var $conv361=(($238)&255);
      var $sub=((($conv361)-(1))|0);
      var $add362=((($sub)+(257))|0);
      $retval=$add362;
      label = 111; break;
    case 105: 
      $retval=288;
      label = 111; break;
    case 106: 
      var $239=$ls_addr;
      var $current365=(($239)|0);
      var $240=HEAP32[(($current365)>>2)];
      $c=$240;
      var $241=$ls_addr;
      var $z366=(($241+44)|0);
      var $242=HEAP32[(($z366)>>2)];
      var $n367=(($242)|0);
      var $243=HEAP32[(($n367)>>2)];
      var $dec368=((($243)-(1))|0);
      HEAP32[(($n367)>>2)]=$dec368;
      var $cmp369=(($243)>>>0) > 0;
      if ($cmp369) { label = 107; break; } else { label = 108; break; }
    case 107: 
      var $244=$ls_addr;
      var $z372=(($244+44)|0);
      var $245=HEAP32[(($z372)>>2)];
      var $p373=(($245+4)|0);
      var $246=HEAP32[(($p373)>>2)];
      var $incdec_ptr374=(($246+1)|0);
      HEAP32[(($p373)>>2)]=$incdec_ptr374;
      var $247=HEAP8[($246)];
      var $conv375=(($247)&255);
      var $cond380 = $conv375;label = 109; break;
    case 108: 
      var $248=$ls_addr;
      var $z377=(($248+44)|0);
      var $249=HEAP32[(($z377)>>2)];
      var $call378=_luaZ_fill($249);
      var $cond380 = $call378;label = 109; break;
    case 109: 
      var $cond380;
      var $250=$ls_addr;
      var $current381=(($250)|0);
      HEAP32[(($current381)>>2)]=$cond380;
      var $251=$c;
      $retval=$251;
      label = 111; break;
    case 110: 
      label = 3; break;
    case 111: 
      var $252=$retval;

      return $252;
  }

}
_llex["X"]=1;

function _luaX_lookahead($ls) {
  var label = 0;


  var $ls_addr;
  $ls_addr=$ls;
  var $0=$ls_addr;
  var $1=$ls_addr;
  var $lookahead=(($1+24)|0);
  var $seminfo=(($lookahead+4)|0);
  var $call=_llex($0, $seminfo);
  var $2=$ls_addr;
  var $lookahead1=(($2+24)|0);
  var $token=(($lookahead1)|0);
  HEAP32[(($token)>>2)]=$call;
  var $3=$ls_addr;
  var $lookahead2=(($3+24)|0);
  var $token3=(($lookahead2)|0);
  var $4=HEAP32[(($token3)>>2)];

  return $4;
}


function _skip_sep($ls) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $count;
      var $s;
      $ls_addr=$ls;
      $count=0;
      var $0=$ls_addr;
      var $current=(($0)|0);
      var $1=HEAP32[(($current)>>2)];
      $s=$1;
      var $2=$ls_addr;
      var $3=$ls_addr;
      var $current1=(($3)|0);
      var $4=HEAP32[(($current1)>>2)];
      _save($2, $4);
      var $5=$ls_addr;
      var $z=(($5+44)|0);
      var $6=HEAP32[(($z)>>2)];
      var $n=(($6)|0);
      var $7=HEAP32[(($n)>>2)];
      var $dec=((($7)-(1))|0);
      HEAP32[(($n)>>2)]=$dec;
      var $cmp=(($7)>>>0) > 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $8=$ls_addr;
      var $z2=(($8+44)|0);
      var $9=HEAP32[(($z2)>>2)];
      var $p=(($9+4)|0);
      var $10=HEAP32[(($p)>>2)];
      var $incdec_ptr=(($10+1)|0);
      HEAP32[(($p)>>2)]=$incdec_ptr;
      var $11=HEAP8[($10)];
      var $conv=(($11)&255);
      var $cond = $conv;label = 5; break;
    case 4: 
      var $12=$ls_addr;
      var $z3=(($12+44)|0);
      var $13=HEAP32[(($z3)>>2)];
      var $call=_luaZ_fill($13);
      var $cond = $call;label = 5; break;
    case 5: 
      var $cond;
      var $14=$ls_addr;
      var $current4=(($14)|0);
      HEAP32[(($current4)>>2)]=$cond;
      label = 6; break;
    case 6: 
      var $15=$ls_addr;
      var $current5=(($15)|0);
      var $16=HEAP32[(($current5)>>2)];
      var $cmp6=(($16)|0)==61;
      if ($cmp6) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $17=$ls_addr;
      var $18=$ls_addr;
      var $current8=(($18)|0);
      var $19=HEAP32[(($current8)>>2)];
      _save($17, $19);
      var $20=$ls_addr;
      var $z9=(($20+44)|0);
      var $21=HEAP32[(($z9)>>2)];
      var $n10=(($21)|0);
      var $22=HEAP32[(($n10)>>2)];
      var $dec11=((($22)-(1))|0);
      HEAP32[(($n10)>>2)]=$dec11;
      var $cmp12=(($22)>>>0) > 0;
      if ($cmp12) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $23=$ls_addr;
      var $z15=(($23+44)|0);
      var $24=HEAP32[(($z15)>>2)];
      var $p16=(($24+4)|0);
      var $25=HEAP32[(($p16)>>2)];
      var $incdec_ptr17=(($25+1)|0);
      HEAP32[(($p16)>>2)]=$incdec_ptr17;
      var $26=HEAP8[($25)];
      var $conv18=(($26)&255);
      var $cond23 = $conv18;label = 10; break;
    case 9: 
      var $27=$ls_addr;
      var $z20=(($27+44)|0);
      var $28=HEAP32[(($z20)>>2)];
      var $call21=_luaZ_fill($28);
      var $cond23 = $call21;label = 10; break;
    case 10: 
      var $cond23;
      var $29=$ls_addr;
      var $current24=(($29)|0);
      HEAP32[(($current24)>>2)]=$cond23;
      var $30=$count;
      var $inc=((($30)+(1))|0);
      $count=$inc;
      label = 6; break;
    case 11: 
      var $31=$ls_addr;
      var $current25=(($31)|0);
      var $32=HEAP32[(($current25)>>2)];
      var $33=$s;
      var $cmp26=(($32)|0)==(($33)|0);
      if ($cmp26) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $34=$count;
      var $cond32 = $34;label = 14; break;
    case 13: 
      var $35=$count;
      var $sub=(((-$35))|0);
      var $sub30=((($sub)-(1))|0);
      var $cond32 = $sub30;label = 14; break;
    case 14: 
      var $cond32;

      return $cond32;
  }

}
_skip_sep["X"]=1;

function _inclinenumber($ls) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $old;
      $ls_addr=$ls;
      var $0=$ls_addr;
      var $current=(($0)|0);
      var $1=HEAP32[(($current)>>2)];
      $old=$1;
      var $2=$ls_addr;
      var $z=(($2+44)|0);
      var $3=HEAP32[(($z)>>2)];
      var $n=(($3)|0);
      var $4=HEAP32[(($n)>>2)];
      var $dec=((($4)-(1))|0);
      HEAP32[(($n)>>2)]=$dec;
      var $cmp=(($4)>>>0) > 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$ls_addr;
      var $z1=(($5+44)|0);
      var $6=HEAP32[(($z1)>>2)];
      var $p=(($6+4)|0);
      var $7=HEAP32[(($p)>>2)];
      var $incdec_ptr=(($7+1)|0);
      HEAP32[(($p)>>2)]=$incdec_ptr;
      var $8=HEAP8[($7)];
      var $conv=(($8)&255);
      var $cond = $conv;label = 5; break;
    case 4: 
      var $9=$ls_addr;
      var $z2=(($9+44)|0);
      var $10=HEAP32[(($z2)>>2)];
      var $call=_luaZ_fill($10);
      var $cond = $call;label = 5; break;
    case 5: 
      var $cond;
      var $11=$ls_addr;
      var $current3=(($11)|0);
      HEAP32[(($current3)>>2)]=$cond;
      var $12=$ls_addr;
      var $current4=(($12)|0);
      var $13=HEAP32[(($current4)>>2)];
      var $cmp5=(($13)|0)==10;
      if ($cmp5) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $14=$ls_addr;
      var $current7=(($14)|0);
      var $15=HEAP32[(($current7)>>2)];
      var $cmp8=(($15)|0)==13;
      if ($cmp8) { label = 7; break; } else { label = 12; break; }
    case 7: 
      var $16=$ls_addr;
      var $current10=(($16)|0);
      var $17=HEAP32[(($current10)>>2)];
      var $18=$old;
      var $cmp11=(($17)|0)!=(($18)|0);
      if ($cmp11) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $19=$ls_addr;
      var $z13=(($19+44)|0);
      var $20=HEAP32[(($z13)>>2)];
      var $n14=(($20)|0);
      var $21=HEAP32[(($n14)>>2)];
      var $dec15=((($21)-(1))|0);
      HEAP32[(($n14)>>2)]=$dec15;
      var $cmp16=(($21)>>>0) > 0;
      if ($cmp16) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $22=$ls_addr;
      var $z19=(($22+44)|0);
      var $23=HEAP32[(($z19)>>2)];
      var $p20=(($23+4)|0);
      var $24=HEAP32[(($p20)>>2)];
      var $incdec_ptr21=(($24+1)|0);
      HEAP32[(($p20)>>2)]=$incdec_ptr21;
      var $25=HEAP8[($24)];
      var $conv22=(($25)&255);
      var $cond27 = $conv22;label = 11; break;
    case 10: 
      var $26=$ls_addr;
      var $z24=(($26+44)|0);
      var $27=HEAP32[(($z24)>>2)];
      var $call25=_luaZ_fill($27);
      var $cond27 = $call25;label = 11; break;
    case 11: 
      var $cond27;
      var $28=$ls_addr;
      var $current28=(($28)|0);
      HEAP32[(($current28)>>2)]=$cond27;
      label = 12; break;
    case 12: 
      var $29=$ls_addr;
      var $linenumber=(($29+4)|0);
      var $30=HEAP32[(($linenumber)>>2)];
      var $inc=((($30)+(1))|0);
      HEAP32[(($linenumber)>>2)]=$inc;
      var $cmp29=(($inc)|0) >= 2147483645;
      if ($cmp29) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $31=$ls_addr;
      _luaX_syntaxerror($31, ((5251648)|0));

    case 14: 

      return;
  }

}
_inclinenumber["X"]=1;

function _read_long_string($ls, $seminfo, $sep) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $seminfo_addr;
      var $sep_addr;
      $ls_addr=$ls;
      $seminfo_addr=$seminfo;
      $sep_addr=$sep;
      var $0=$ls_addr;
      var $1=$ls_addr;
      var $current=(($1)|0);
      var $2=HEAP32[(($current)>>2)];
      _save($0, $2);
      var $3=$ls_addr;
      var $z=(($3+44)|0);
      var $4=HEAP32[(($z)>>2)];
      var $n=(($4)|0);
      var $5=HEAP32[(($n)>>2)];
      var $dec=((($5)-(1))|0);
      HEAP32[(($n)>>2)]=$dec;
      var $cmp=(($5)>>>0) > 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $6=$ls_addr;
      var $z1=(($6+44)|0);
      var $7=HEAP32[(($z1)>>2)];
      var $p=(($7+4)|0);
      var $8=HEAP32[(($p)>>2)];
      var $incdec_ptr=(($8+1)|0);
      HEAP32[(($p)>>2)]=$incdec_ptr;
      var $9=HEAP8[($8)];
      var $conv=(($9)&255);
      var $cond = $conv;label = 5; break;
    case 4: 
      var $10=$ls_addr;
      var $z2=(($10+44)|0);
      var $11=HEAP32[(($z2)>>2)];
      var $call=_luaZ_fill($11);
      var $cond = $call;label = 5; break;
    case 5: 
      var $cond;
      var $12=$ls_addr;
      var $current3=(($12)|0);
      HEAP32[(($current3)>>2)]=$cond;
      var $13=$ls_addr;
      var $current4=(($13)|0);
      var $14=HEAP32[(($current4)>>2)];
      var $cmp5=(($14)|0)==10;
      if ($cmp5) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $15=$ls_addr;
      var $current7=(($15)|0);
      var $16=HEAP32[(($current7)>>2)];
      var $cmp8=(($16)|0)==13;
      if ($cmp8) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $17=$ls_addr;
      _inclinenumber($17);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $18=$ls_addr;
      var $current10=(($18)|0);
      var $19=HEAP32[(($current10)>>2)];
      if ((($19)|0)==-1) {
        label = 10; break;
      }
      else if ((($19)|0)==93) {
        label = 11; break;
      }
      else if ((($19)|0)==10 | (($19)|0)==13) {
        label = 17; break;
      }
      else {
      label = 20; break;
      }
      
    case 10: 
      var $20=$ls_addr;
      var $21=$seminfo_addr;
      var $tobool=(($21)|0)!=0;
      var $cond11=$tobool ? (((5252048)|0)) : (((5251864)|0));
      _lexerror($20, $cond11, 286);

    case 11: 
      var $22=$ls_addr;
      var $call13=_skip_sep($22);
      var $23=$sep_addr;
      var $cmp14=(($call13)|0)==(($23)|0);
      if ($cmp14) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $24=$ls_addr;
      var $25=$ls_addr;
      var $current17=(($25)|0);
      var $26=HEAP32[(($current17)>>2)];
      _save($24, $26);
      var $27=$ls_addr;
      var $z18=(($27+44)|0);
      var $28=HEAP32[(($z18)>>2)];
      var $n19=(($28)|0);
      var $29=HEAP32[(($n19)>>2)];
      var $dec20=((($29)-(1))|0);
      HEAP32[(($n19)>>2)]=$dec20;
      var $cmp21=(($29)>>>0) > 0;
      if ($cmp21) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $30=$ls_addr;
      var $z24=(($30+44)|0);
      var $31=HEAP32[(($z24)>>2)];
      var $p25=(($31+4)|0);
      var $32=HEAP32[(($p25)>>2)];
      var $incdec_ptr26=(($32+1)|0);
      HEAP32[(($p25)>>2)]=$incdec_ptr26;
      var $33=HEAP8[($32)];
      var $conv27=(($33)&255);
      var $cond32 = $conv27;label = 15; break;
    case 14: 
      var $34=$ls_addr;
      var $z29=(($34+44)|0);
      var $35=HEAP32[(($z29)>>2)];
      var $call30=_luaZ_fill($35);
      var $cond32 = $call30;label = 15; break;
    case 15: 
      var $cond32;
      var $36=$ls_addr;
      var $current33=(($36)|0);
      HEAP32[(($current33)>>2)]=$cond32;
      label = 31; break;
    case 16: 
      label = 30; break;
    case 17: 
      var $37=$ls_addr;
      _save($37, 10);
      var $38=$ls_addr;
      _inclinenumber($38);
      var $39=$seminfo_addr;
      var $tobool36=(($39)|0)!=0;
      if ($tobool36) { label = 19; break; } else { label = 18; break; }
    case 18: 
      var $40=$ls_addr;
      var $buff=(($40+48)|0);
      var $41=HEAP32[(($buff)>>2)];
      var $n38=(($41+4)|0);
      HEAP32[(($n38)>>2)]=0;
      label = 19; break;
    case 19: 
      label = 30; break;
    case 20: 
      var $42=$seminfo_addr;
      var $tobool40=(($42)|0)!=0;
      if ($tobool40) { label = 21; break; } else { label = 25; break; }
    case 21: 
      var $43=$ls_addr;
      var $44=$ls_addr;
      var $current42=(($44)|0);
      var $45=HEAP32[(($current42)>>2)];
      _save($43, $45);
      var $46=$ls_addr;
      var $z43=(($46+44)|0);
      var $47=HEAP32[(($z43)>>2)];
      var $n44=(($47)|0);
      var $48=HEAP32[(($n44)>>2)];
      var $dec45=((($48)-(1))|0);
      HEAP32[(($n44)>>2)]=$dec45;
      var $cmp46=(($48)>>>0) > 0;
      if ($cmp46) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $49=$ls_addr;
      var $z49=(($49+44)|0);
      var $50=HEAP32[(($z49)>>2)];
      var $p50=(($50+4)|0);
      var $51=HEAP32[(($p50)>>2)];
      var $incdec_ptr51=(($51+1)|0);
      HEAP32[(($p50)>>2)]=$incdec_ptr51;
      var $52=HEAP8[($51)];
      var $conv52=(($52)&255);
      var $cond57 = $conv52;label = 24; break;
    case 23: 
      var $53=$ls_addr;
      var $z54=(($53+44)|0);
      var $54=HEAP32[(($z54)>>2)];
      var $call55=_luaZ_fill($54);
      var $cond57 = $call55;label = 24; break;
    case 24: 
      var $cond57;
      var $55=$ls_addr;
      var $current58=(($55)|0);
      HEAP32[(($current58)>>2)]=$cond57;
      label = 29; break;
    case 25: 
      var $56=$ls_addr;
      var $z59=(($56+44)|0);
      var $57=HEAP32[(($z59)>>2)];
      var $n60=(($57)|0);
      var $58=HEAP32[(($n60)>>2)];
      var $dec61=((($58)-(1))|0);
      HEAP32[(($n60)>>2)]=$dec61;
      var $cmp62=(($58)>>>0) > 0;
      if ($cmp62) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $59=$ls_addr;
      var $z65=(($59+44)|0);
      var $60=HEAP32[(($z65)>>2)];
      var $p66=(($60+4)|0);
      var $61=HEAP32[(($p66)>>2)];
      var $incdec_ptr67=(($61+1)|0);
      HEAP32[(($p66)>>2)]=$incdec_ptr67;
      var $62=HEAP8[($61)];
      var $conv68=(($62)&255);
      var $cond73 = $conv68;label = 28; break;
    case 27: 
      var $63=$ls_addr;
      var $z70=(($63+44)|0);
      var $64=HEAP32[(($z70)>>2)];
      var $call71=_luaZ_fill($64);
      var $cond73 = $call71;label = 28; break;
    case 28: 
      var $cond73;
      var $65=$ls_addr;
      var $current74=(($65)|0);
      HEAP32[(($current74)>>2)]=$cond73;
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 9; break;
    case 31: 
      var $66=$seminfo_addr;
      var $tobool76=(($66)|0)!=0;
      if ($tobool76) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $67=$ls_addr;
      var $68=$ls_addr;
      var $buff78=(($68+48)|0);
      var $69=HEAP32[(($buff78)>>2)];
      var $buffer=(($69)|0);
      var $70=HEAP32[(($buffer)>>2)];
      var $71=$sep_addr;
      var $add=((($71)+(2))|0);
      var $add_ptr=(($70+$add)|0);
      var $72=$ls_addr;
      var $buff79=(($72+48)|0);
      var $73=HEAP32[(($buff79)>>2)];
      var $n80=(($73+4)|0);
      var $74=HEAP32[(($n80)>>2)];
      var $75=$sep_addr;
      var $add81=((($75)+(2))|0);
      var $mul=($add81<<1);
      var $sub=((($74)-($mul))|0);
      var $call82=_luaX_newstring($67, $add_ptr, $sub);
      var $76=$seminfo_addr;
      var $ts=$76;
      HEAP32[(($ts)>>2)]=$call82;
      label = 33; break;
    case 33: 

      return;
  }

}
_read_long_string["X"]=1;

function _read_string($ls, $del, $seminfo) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $del_addr;
      var $seminfo_addr;
      var $c;
      $ls_addr=$ls;
      $del_addr=$del;
      $seminfo_addr=$seminfo;
      var $0=$ls_addr;
      var $1=$ls_addr;
      var $current=(($1)|0);
      var $2=HEAP32[(($current)>>2)];
      _save($0, $2);
      var $3=$ls_addr;
      var $z=(($3+44)|0);
      var $4=HEAP32[(($z)>>2)];
      var $n=(($4)|0);
      var $5=HEAP32[(($n)>>2)];
      var $dec=((($5)-(1))|0);
      HEAP32[(($n)>>2)]=$dec;
      var $cmp=(($5)>>>0) > 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $6=$ls_addr;
      var $z1=(($6+44)|0);
      var $7=HEAP32[(($z1)>>2)];
      var $p=(($7+4)|0);
      var $8=HEAP32[(($p)>>2)];
      var $incdec_ptr=(($8+1)|0);
      HEAP32[(($p)>>2)]=$incdec_ptr;
      var $9=HEAP8[($8)];
      var $conv=(($9)&255);
      var $cond = $conv;label = 5; break;
    case 4: 
      var $10=$ls_addr;
      var $z2=(($10+44)|0);
      var $11=HEAP32[(($z2)>>2)];
      var $call=_luaZ_fill($11);
      var $cond = $call;label = 5; break;
    case 5: 
      var $cond;
      var $12=$ls_addr;
      var $current3=(($12)|0);
      HEAP32[(($current3)>>2)]=$cond;
      label = 6; break;
    case 6: 
      var $13=$ls_addr;
      var $current4=(($13)|0);
      var $14=HEAP32[(($current4)>>2)];
      var $15=$del_addr;
      var $cmp5=(($14)|0)!=(($15)|0);
      if ($cmp5) { label = 7; break; } else { label = 53; break; }
    case 7: 
      var $16=$ls_addr;
      var $current7=(($16)|0);
      var $17=HEAP32[(($current7)>>2)];
      if ((($17)|0)==-1) {
        label = 8; break;
      }
      else if ((($17)|0)==10 | (($17)|0)==13) {
        label = 9; break;
      }
      else if ((($17)|0)==92) {
        label = 10; break;
      }
      else {
      label = 48; break;
      }
      
    case 8: 
      var $18=$ls_addr;
      _lexerror($18, ((5252888)|0), 286);

    case 9: 
      var $19=$ls_addr;
      _lexerror($19, ((5252888)|0), 289);

    case 10: 
      var $20=$ls_addr;
      var $z10=(($20+44)|0);
      var $21=HEAP32[(($z10)>>2)];
      var $n11=(($21)|0);
      var $22=HEAP32[(($n11)>>2)];
      var $dec12=((($22)-(1))|0);
      HEAP32[(($n11)>>2)]=$dec12;
      var $cmp13=(($22)>>>0) > 0;
      if ($cmp13) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $23=$ls_addr;
      var $z16=(($23+44)|0);
      var $24=HEAP32[(($z16)>>2)];
      var $p17=(($24+4)|0);
      var $25=HEAP32[(($p17)>>2)];
      var $incdec_ptr18=(($25+1)|0);
      HEAP32[(($p17)>>2)]=$incdec_ptr18;
      var $26=HEAP8[($25)];
      var $conv19=(($26)&255);
      var $cond24 = $conv19;label = 13; break;
    case 12: 
      var $27=$ls_addr;
      var $z21=(($27+44)|0);
      var $28=HEAP32[(($z21)>>2)];
      var $call22=_luaZ_fill($28);
      var $cond24 = $call22;label = 13; break;
    case 13: 
      var $cond24;
      var $29=$ls_addr;
      var $current25=(($29)|0);
      HEAP32[(($current25)>>2)]=$cond24;
      var $30=$ls_addr;
      var $current26=(($30)|0);
      var $31=HEAP32[(($current26)>>2)];
      if ((($31)|0)==97) {
        label = 14; break;
      }
      else if ((($31)|0)==98) {
        label = 15; break;
      }
      else if ((($31)|0)==102) {
        label = 16; break;
      }
      else if ((($31)|0)==110) {
        label = 17; break;
      }
      else if ((($31)|0)==114) {
        label = 18; break;
      }
      else if ((($31)|0)==116) {
        label = 19; break;
      }
      else if ((($31)|0)==118) {
        label = 20; break;
      }
      else if ((($31)|0)==120) {
        label = 21; break;
      }
      else if ((($31)|0)==10 | (($31)|0)==13) {
        label = 22; break;
      }
      else if ((($31)|0)==92 | (($31)|0)==34 | (($31)|0)==39) {
        label = 23; break;
      }
      else if ((($31)|0)==-1) {
        label = 24; break;
      }
      else if ((($31)|0)==122) {
        label = 25; break;
      }
      else {
      label = 39; break;
      }
      
    case 14: 
      $c=7;
      label = 42; break;
    case 15: 
      $c=8;
      label = 42; break;
    case 16: 
      $c=12;
      label = 42; break;
    case 17: 
      $c=10;
      label = 42; break;
    case 18: 
      $c=13;
      label = 42; break;
    case 19: 
      $c=9;
      label = 42; break;
    case 20: 
      $c=11;
      label = 42; break;
    case 21: 
      var $32=$ls_addr;
      var $call35=_readhexaesc($32);
      $c=$call35;
      label = 42; break;
    case 22: 
      var $33=$ls_addr;
      _inclinenumber($33);
      $c=10;
      label = 46; break;
    case 23: 
      var $34=$ls_addr;
      var $current38=(($34)|0);
      var $35=HEAP32[(($current38)>>2)];
      $c=$35;
      label = 42; break;
    case 24: 
      label = 47; break;
    case 25: 
      var $36=$ls_addr;
      var $z41=(($36+44)|0);
      var $37=HEAP32[(($z41)>>2)];
      var $n42=(($37)|0);
      var $38=HEAP32[(($n42)>>2)];
      var $dec43=((($38)-(1))|0);
      HEAP32[(($n42)>>2)]=$dec43;
      var $cmp44=(($38)>>>0) > 0;
      if ($cmp44) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $39=$ls_addr;
      var $z47=(($39+44)|0);
      var $40=HEAP32[(($z47)>>2)];
      var $p48=(($40+4)|0);
      var $41=HEAP32[(($p48)>>2)];
      var $incdec_ptr49=(($41+1)|0);
      HEAP32[(($p48)>>2)]=$incdec_ptr49;
      var $42=HEAP8[($41)];
      var $conv50=(($42)&255);
      var $cond55 = $conv50;label = 28; break;
    case 27: 
      var $43=$ls_addr;
      var $z52=(($43+44)|0);
      var $44=HEAP32[(($z52)>>2)];
      var $call53=_luaZ_fill($44);
      var $cond55 = $call53;label = 28; break;
    case 28: 
      var $cond55;
      var $45=$ls_addr;
      var $current56=(($45)|0);
      HEAP32[(($current56)>>2)]=$cond55;
      label = 29; break;
    case 29: 
      var $46=$ls_addr;
      var $current58=(($46)|0);
      var $47=HEAP32[(($current58)>>2)];
      var $add=((($47)+(1))|0);
      var $arrayidx=((5243528+$add)|0);
      var $48=HEAP8[($arrayidx)];
      var $conv59=(($48)&255);
      var $and=$conv59 & 8;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 30; break; } else { label = 38; break; }
    case 30: 
      var $49=$ls_addr;
      var $current61=(($49)|0);
      var $50=HEAP32[(($current61)>>2)];
      var $cmp62=(($50)|0)==10;
      if ($cmp62) { label = 32; break; } else { label = 31; break; }
    case 31: 
      var $51=$ls_addr;
      var $current64=(($51)|0);
      var $52=HEAP32[(($current64)>>2)];
      var $cmp65=(($52)|0)==13;
      if ($cmp65) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $53=$ls_addr;
      _inclinenumber($53);
      label = 37; break;
    case 33: 
      var $54=$ls_addr;
      var $z67=(($54+44)|0);
      var $55=HEAP32[(($z67)>>2)];
      var $n68=(($55)|0);
      var $56=HEAP32[(($n68)>>2)];
      var $dec69=((($56)-(1))|0);
      HEAP32[(($n68)>>2)]=$dec69;
      var $cmp70=(($56)>>>0) > 0;
      if ($cmp70) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $57=$ls_addr;
      var $z73=(($57+44)|0);
      var $58=HEAP32[(($z73)>>2)];
      var $p74=(($58+4)|0);
      var $59=HEAP32[(($p74)>>2)];
      var $incdec_ptr75=(($59+1)|0);
      HEAP32[(($p74)>>2)]=$incdec_ptr75;
      var $60=HEAP8[($59)];
      var $conv76=(($60)&255);
      var $cond81 = $conv76;label = 36; break;
    case 35: 
      var $61=$ls_addr;
      var $z78=(($61+44)|0);
      var $62=HEAP32[(($z78)>>2)];
      var $call79=_luaZ_fill($62);
      var $cond81 = $call79;label = 36; break;
    case 36: 
      var $cond81;
      var $63=$ls_addr;
      var $current82=(($63)|0);
      HEAP32[(($current82)>>2)]=$cond81;
      label = 37; break;
    case 37: 
      label = 29; break;
    case 38: 
      label = 47; break;
    case 39: 
      var $64=$ls_addr;
      var $current83=(($64)|0);
      var $65=HEAP32[(($current83)>>2)];
      var $add84=((($65)+(1))|0);
      var $arrayidx85=((5243528+$add84)|0);
      var $66=HEAP8[($arrayidx85)];
      var $conv86=(($66)&255);
      var $and87=$conv86 & 2;
      var $tobool88=(($and87)|0)!=0;
      if ($tobool88) { label = 41; break; } else { label = 40; break; }
    case 40: 
      var $67=$ls_addr;
      var $68=$ls_addr;
      var $current90=(($68)|0);
      _escerror($67, $current90, 1, ((5252640)|0));
      label = 41; break;
    case 41: 
      var $69=$ls_addr;
      var $call92=_readdecesc($69);
      $c=$call92;
      label = 46; break;
    case 42: 
      var $70=$ls_addr;
      var $z93=(($70+44)|0);
      var $71=HEAP32[(($z93)>>2)];
      var $n94=(($71)|0);
      var $72=HEAP32[(($n94)>>2)];
      var $dec95=((($72)-(1))|0);
      HEAP32[(($n94)>>2)]=$dec95;
      var $cmp96=(($72)>>>0) > 0;
      if ($cmp96) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $73=$ls_addr;
      var $z99=(($73+44)|0);
      var $74=HEAP32[(($z99)>>2)];
      var $p100=(($74+4)|0);
      var $75=HEAP32[(($p100)>>2)];
      var $incdec_ptr101=(($75+1)|0);
      HEAP32[(($p100)>>2)]=$incdec_ptr101;
      var $76=HEAP8[($75)];
      var $conv102=(($76)&255);
      var $cond107 = $conv102;label = 45; break;
    case 44: 
      var $77=$ls_addr;
      var $z104=(($77+44)|0);
      var $78=HEAP32[(($z104)>>2)];
      var $call105=_luaZ_fill($78);
      var $cond107 = $call105;label = 45; break;
    case 45: 
      var $cond107;
      var $79=$ls_addr;
      var $current108=(($79)|0);
      HEAP32[(($current108)>>2)]=$cond107;
      label = 46; break;
    case 46: 
      var $80=$ls_addr;
      var $81=$c;
      _save($80, $81);
      label = 47; break;
    case 47: 
      label = 52; break;
    case 48: 
      var $82=$ls_addr;
      var $83=$ls_addr;
      var $current110=(($83)|0);
      var $84=HEAP32[(($current110)>>2)];
      _save($82, $84);
      var $85=$ls_addr;
      var $z111=(($85+44)|0);
      var $86=HEAP32[(($z111)>>2)];
      var $n112=(($86)|0);
      var $87=HEAP32[(($n112)>>2)];
      var $dec113=((($87)-(1))|0);
      HEAP32[(($n112)>>2)]=$dec113;
      var $cmp114=(($87)>>>0) > 0;
      if ($cmp114) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $88=$ls_addr;
      var $z117=(($88+44)|0);
      var $89=HEAP32[(($z117)>>2)];
      var $p118=(($89+4)|0);
      var $90=HEAP32[(($p118)>>2)];
      var $incdec_ptr119=(($90+1)|0);
      HEAP32[(($p118)>>2)]=$incdec_ptr119;
      var $91=HEAP8[($90)];
      var $conv120=(($91)&255);
      var $cond125 = $conv120;label = 51; break;
    case 50: 
      var $92=$ls_addr;
      var $z122=(($92+44)|0);
      var $93=HEAP32[(($z122)>>2)];
      var $call123=_luaZ_fill($93);
      var $cond125 = $call123;label = 51; break;
    case 51: 
      var $cond125;
      var $94=$ls_addr;
      var $current126=(($94)|0);
      HEAP32[(($current126)>>2)]=$cond125;
      label = 52; break;
    case 52: 
      label = 6; break;
    case 53: 
      var $95=$ls_addr;
      var $96=$ls_addr;
      var $current128=(($96)|0);
      var $97=HEAP32[(($current128)>>2)];
      _save($95, $97);
      var $98=$ls_addr;
      var $z129=(($98+44)|0);
      var $99=HEAP32[(($z129)>>2)];
      var $n130=(($99)|0);
      var $100=HEAP32[(($n130)>>2)];
      var $dec131=((($100)-(1))|0);
      HEAP32[(($n130)>>2)]=$dec131;
      var $cmp132=(($100)>>>0) > 0;
      if ($cmp132) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $101=$ls_addr;
      var $z135=(($101+44)|0);
      var $102=HEAP32[(($z135)>>2)];
      var $p136=(($102+4)|0);
      var $103=HEAP32[(($p136)>>2)];
      var $incdec_ptr137=(($103+1)|0);
      HEAP32[(($p136)>>2)]=$incdec_ptr137;
      var $104=HEAP8[($103)];
      var $conv138=(($104)&255);
      var $cond143 = $conv138;label = 56; break;
    case 55: 
      var $105=$ls_addr;
      var $z140=(($105+44)|0);
      var $106=HEAP32[(($z140)>>2)];
      var $call141=_luaZ_fill($106);
      var $cond143 = $call141;label = 56; break;
    case 56: 
      var $cond143;
      var $107=$ls_addr;
      var $current144=(($107)|0);
      HEAP32[(($current144)>>2)]=$cond143;
      var $108=$ls_addr;
      var $109=$ls_addr;
      var $buff=(($109+48)|0);
      var $110=HEAP32[(($buff)>>2)];
      var $buffer=(($110)|0);
      var $111=HEAP32[(($buffer)>>2)];
      var $add_ptr=(($111+1)|0);
      var $112=$ls_addr;
      var $buff145=(($112+48)|0);
      var $113=HEAP32[(($buff145)>>2)];
      var $n146=(($113+4)|0);
      var $114=HEAP32[(($n146)>>2)];
      var $sub=((($114)-(2))|0);
      var $call147=_luaX_newstring($108, $add_ptr, $sub);
      var $115=$seminfo_addr;
      var $ts=$115;
      HEAP32[(($ts)>>2)]=$call147;

      return;
  }

}
_read_string["X"]=1;

function _save($ls, $c) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $c_addr;
      var $b;
      var $newsize;
      $ls_addr=$ls;
      $c_addr=$c;
      var $0=$ls_addr;
      var $buff=(($0+48)|0);
      var $1=HEAP32[(($buff)>>2)];
      $b=$1;
      var $2=$b;
      var $n=(($2+4)|0);
      var $3=HEAP32[(($n)>>2)];
      var $add=((($3)+(1))|0);
      var $4=$b;
      var $buffsize=(($4+8)|0);
      var $5=HEAP32[(($buffsize)>>2)];
      var $cmp=(($add)>>>0) > (($5)>>>0);
      if ($cmp) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $6=$b;
      var $buffsize1=(($6+8)|0);
      var $7=HEAP32[(($buffsize1)>>2)];
      var $cmp2=(($7)>>>0) >= 2147483646;
      if ($cmp2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $8=$ls_addr;
      _lexerror($8, ((5253080)|0), 0);

    case 5: 
      var $9=$b;
      var $buffsize4=(($9+8)|0);
      var $10=HEAP32[(($buffsize4)>>2)];
      var $mul=($10<<1);
      $newsize=$mul;
      var $11=$newsize;
      var $add5=((($11)+(1))|0);
      var $cmp6=(($add5)>>>0) > 4294967293;
      if ($cmp6) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $12=$ls_addr;
      var $L=(($12+40)|0);
      var $13=HEAP32[(($L)>>2)];
      _luaM_toobig($13);

      label = 8; break;
    case 7: 
      var $15=$ls_addr;
      var $L7=(($15+40)|0);
      var $16=HEAP32[(($L7)>>2)];
      var $17=$b;
      var $buffer=(($17)|0);
      var $18=HEAP32[(($buffer)>>2)];
      var $19=$b;
      var $buffsize8=(($19+8)|0);
      var $20=HEAP32[(($buffsize8)>>2)];
      var $mul9=$20;
      var $21=$newsize;
      var $mul10=$21;
      var $call=_luaM_realloc_($16, $18, $mul9, $mul10);
      var $cond = $call;label = 8; break;
    case 8: 
      var $cond;
      var $22=$b;
      var $buffer11=(($22)|0);
      HEAP32[(($buffer11)>>2)]=$cond;
      var $23=$newsize;
      var $24=$b;
      var $buffsize12=(($24+8)|0);
      HEAP32[(($buffsize12)>>2)]=$23;
      label = 9; break;
    case 9: 
      var $25=$c_addr;
      var $conv=(($25) & 255);
      var $26=$b;
      var $n14=(($26+4)|0);
      var $27=HEAP32[(($n14)>>2)];
      var $inc=((($27)+(1))|0);
      HEAP32[(($n14)>>2)]=$inc;
      var $28=$b;
      var $buffer15=(($28)|0);
      var $29=HEAP32[(($buffer15)>>2)];
      var $arrayidx=(($29+$27)|0);
      HEAP8[($arrayidx)]=$conv;

      return;
  }

}
_save["X"]=1;


function _luaO_int2fb($x) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $x_addr;
      var $e;
      $x_addr=$x;
      $e=0;
      var $0=$x_addr;
      var $cmp=(($0)>>>0) < 8;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$x_addr;
      $retval=$1;
      label = 8; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $2=$x_addr;
      var $cmp1=(($2)>>>0) >= 16;
      if ($cmp1) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $3=$x_addr;
      var $add=((($3)+(1))|0);
      var $shr=$add >>> 1;
      $x_addr=$shr;
      var $4=$e;
      var $inc=((($4)+(1))|0);
      $e=$inc;
      label = 5; break;
    case 7: 
      var $5=$e;
      var $add2=((($5)+(1))|0);
      var $shl=$add2 << 3;
      var $6=$x_addr;
      var $sub=((($6)-(8))|0);
      var $or=$shl | $sub;
      $retval=$or;
      label = 8; break;
    case 8: 
      var $7=$retval;

      return $7;
  }

}


function _luaO_fb2int($x) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $x_addr;
      var $e;
      $x_addr=$x;
      var $0=$x_addr;
      var $shr=$0 >> 3;
      var $and=$shr & 31;
      $e=$and;
      var $1=$e;
      var $cmp=(($1)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$x_addr;
      $retval=$2;
      label = 5; break;
    case 4: 
      var $3=$x_addr;
      var $and1=$3 & 7;
      var $add=((($and1)+(8))|0);
      var $4=$e;
      var $sub=((($4)-(1))|0);
      var $shl=$add << $sub;
      $retval=$shl;
      label = 5; break;
    case 5: 
      var $5=$retval;

      return $5;
  }

}


function _buffreplace($ls, $from, $to) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $from_addr;
      var $to_addr;
      var $n;
      var $p;
      $ls_addr=$ls;
      $from_addr=$from;
      $to_addr=$to;
      var $0=$ls_addr;
      var $buff=(($0+48)|0);
      var $1=HEAP32[(($buff)>>2)];
      var $n1=(($1+4)|0);
      var $2=HEAP32[(($n1)>>2)];
      $n=$2;
      var $3=$ls_addr;
      var $buff2=(($3+48)|0);
      var $4=HEAP32[(($buff2)>>2)];
      var $buffer=(($4)|0);
      var $5=HEAP32[(($buffer)>>2)];
      $p=$5;
      label = 3; break;
    case 3: 
      var $6=$n;
      var $dec=((($6)-(1))|0);
      $n=$dec;
      var $tobool=(($6)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $7=$n;
      var $8=$p;
      var $arrayidx=(($8+$7)|0);
      var $9=HEAP8[($arrayidx)];
      var $conv=(($9 << 24) >> 24);
      var $10=$from_addr;
      var $conv3=(($10 << 24) >> 24);
      var $cmp=(($conv)|0)==(($conv3)|0);
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $11=$to_addr;
      var $12=$n;
      var $13=$p;
      var $arrayidx5=(($13+$12)|0);
      HEAP8[($arrayidx5)]=$11;
      label = 6; break;
    case 6: 
      label = 3; break;
    case 7: 

      return;
  }

}


function _luaO_ceillog2($x) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $x_addr;
      var $l;
      $x_addr=$x;
      $l=0;
      var $0=$x_addr;
      var $dec=((($0)-(1))|0);
      $x_addr=$dec;
      label = 3; break;
    case 3: 
      var $1=$x_addr;
      var $cmp=(($1)>>>0) >= 256;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $2=$l;
      var $add=((($2)+(8))|0);
      $l=$add;
      var $3=$x_addr;
      var $shr=$3 >>> 8;
      $x_addr=$shr;
      label = 3; break;
    case 5: 
      var $4=$l;
      var $5=$x_addr;
      var $arrayidx=((5244104+$5)|0);
      var $6=HEAP8[($arrayidx)];
      var $conv=(($6)&255);
      var $add1=((($4)+($conv))|0);

      return $add1;
  }

}


function _check_next($ls, $set) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $ls_addr;
      var $set_addr;
      $ls_addr=$ls;
      $set_addr=$set;
      var $0=$ls_addr;
      var $current=(($0)|0);
      var $1=HEAP32[(($current)>>2)];
      var $cmp=(($1)|0)==0;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$set_addr;
      var $3=$ls_addr;
      var $current1=(($3)|0);
      var $4=HEAP32[(($current1)>>2)];
      var $call=_strchr($2, $4);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $retval=0;
      label = 9; break;
    case 5: 
      var $5=$ls_addr;
      var $6=$ls_addr;
      var $current2=(($6)|0);
      var $7=HEAP32[(($current2)>>2)];
      _save($5, $7);
      var $8=$ls_addr;
      var $z=(($8+44)|0);
      var $9=HEAP32[(($z)>>2)];
      var $n=(($9)|0);
      var $10=HEAP32[(($n)>>2)];
      var $dec=((($10)-(1))|0);
      HEAP32[(($n)>>2)]=$dec;
      var $cmp3=(($10)>>>0) > 0;
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $11=$ls_addr;
      var $z4=(($11+44)|0);
      var $12=HEAP32[(($z4)>>2)];
      var $p=(($12+4)|0);
      var $13=HEAP32[(($p)>>2)];
      var $incdec_ptr=(($13+1)|0);
      HEAP32[(($p)>>2)]=$incdec_ptr;
      var $14=HEAP8[($13)];
      var $conv=(($14)&255);
      var $cond = $conv;label = 8; break;
    case 7: 
      var $15=$ls_addr;
      var $z5=(($15+44)|0);
      var $16=HEAP32[(($z5)>>2)];
      var $call6=_luaZ_fill($16);
      var $cond = $call6;label = 8; break;
    case 8: 
      var $cond;
      var $17=$ls_addr;
      var $current7=(($17)|0);
      HEAP32[(($current7)>>2)]=$cond;
      $retval=1;
      label = 9; break;
    case 9: 
      var $18=$retval;

      return $18;
  }

}
_check_next["X"]=1;

function _read_numeral($ls, $seminfo) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $seminfo_addr;
      var $expo;
      var $first;
      $ls_addr=$ls;
      $seminfo_addr=$seminfo;
      $expo=((5246200)|0);
      var $0=$ls_addr;
      var $current=(($0)|0);
      var $1=HEAP32[(($current)>>2)];
      $first=$1;
      var $2=$ls_addr;
      var $3=$ls_addr;
      var $current1=(($3)|0);
      var $4=HEAP32[(($current1)>>2)];
      _save($2, $4);
      var $5=$ls_addr;
      var $z=(($5+44)|0);
      var $6=HEAP32[(($z)>>2)];
      var $n=(($6)|0);
      var $7=HEAP32[(($n)>>2)];
      var $dec=((($7)-(1))|0);
      HEAP32[(($n)>>2)]=$dec;
      var $cmp=(($7)>>>0) > 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $8=$ls_addr;
      var $z2=(($8+44)|0);
      var $9=HEAP32[(($z2)>>2)];
      var $p=(($9+4)|0);
      var $10=HEAP32[(($p)>>2)];
      var $incdec_ptr=(($10+1)|0);
      HEAP32[(($p)>>2)]=$incdec_ptr;
      var $11=HEAP8[($10)];
      var $conv=(($11)&255);
      var $cond = $conv;label = 5; break;
    case 4: 
      var $12=$ls_addr;
      var $z3=(($12+44)|0);
      var $13=HEAP32[(($z3)>>2)];
      var $call=_luaZ_fill($13);
      var $cond = $call;label = 5; break;
    case 5: 
      var $cond;
      var $14=$ls_addr;
      var $current4=(($14)|0);
      HEAP32[(($current4)>>2)]=$cond;
      var $15=$first;
      var $cmp5=(($15)|0)==48;
      if ($cmp5) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $16=$ls_addr;
      var $call7=_check_next($16, ((5245864)|0));
      var $tobool=(($call7)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $expo=((5245560)|0);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $17=$ls_addr;
      var $18=$expo;
      var $call8=_check_next($17, $18);
      var $tobool9=(($call8)|0)!=0;
      if ($tobool9) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $19=$ls_addr;
      var $call11=_check_next($19, ((5245368)|0));
      label = 11; break;
    case 11: 
      var $20=$ls_addr;
      var $current13=(($20)|0);
      var $21=HEAP32[(($current13)>>2)];
      var $add=((($21)+(1))|0);
      var $arrayidx=((5243528+$add)|0);
      var $22=HEAP8[($arrayidx)];
      var $conv14=(($22)&255);
      var $and=$conv14 & 16;
      var $tobool15=(($and)|0)!=0;
      if ($tobool15) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $23=$ls_addr;
      var $current16=(($23)|0);
      var $24=HEAP32[(($current16)>>2)];
      var $cmp17=(($24)|0)==46;
      if ($cmp17) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $25=$ls_addr;
      var $26=$ls_addr;
      var $current20=(($26)|0);
      var $27=HEAP32[(($current20)>>2)];
      _save($25, $27);
      var $28=$ls_addr;
      var $z21=(($28+44)|0);
      var $29=HEAP32[(($z21)>>2)];
      var $n22=(($29)|0);
      var $30=HEAP32[(($n22)>>2)];
      var $dec23=((($30)-(1))|0);
      HEAP32[(($n22)>>2)]=$dec23;
      var $cmp24=(($30)>>>0) > 0;
      if ($cmp24) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $31=$ls_addr;
      var $z27=(($31+44)|0);
      var $32=HEAP32[(($z27)>>2)];
      var $p28=(($32+4)|0);
      var $33=HEAP32[(($p28)>>2)];
      var $incdec_ptr29=(($33+1)|0);
      HEAP32[(($p28)>>2)]=$incdec_ptr29;
      var $34=HEAP8[($33)];
      var $conv30=(($34)&255);
      var $cond35 = $conv30;label = 16; break;
    case 15: 
      var $35=$ls_addr;
      var $z32=(($35+44)|0);
      var $36=HEAP32[(($z32)>>2)];
      var $call33=_luaZ_fill($36);
      var $cond35 = $call33;label = 16; break;
    case 16: 
      var $cond35;
      var $37=$ls_addr;
      var $current36=(($37)|0);
      HEAP32[(($current36)>>2)]=$cond35;
      label = 18; break;
    case 17: 
      label = 19; break;
    case 18: 
      label = 9; break;
    case 19: 
      var $38=$ls_addr;
      _save($38, 0);
      var $39=$ls_addr;
      var $40=$ls_addr;
      var $decpoint=(($40+64)|0);
      var $41=HEAP8[($decpoint)];
      _buffreplace($39, 46, $41);
      var $42=$ls_addr;
      var $buff=(($42+48)|0);
      var $43=HEAP32[(($buff)>>2)];
      var $buffer=(($43)|0);
      var $44=HEAP32[(($buffer)>>2)];
      var $45=$ls_addr;
      var $buff38=(($45+48)|0);
      var $46=HEAP32[(($buff38)>>2)];
      var $n39=(($46+4)|0);
      var $47=HEAP32[(($n39)>>2)];
      var $sub=((($47)-(1))|0);
      var $48=$seminfo_addr;
      var $r=$48;
      var $call40=_luaO_str2d($44, $sub, $r);
      var $tobool41=(($call40)|0)!=0;
      if ($tobool41) { label = 21; break; } else { label = 20; break; }
    case 20: 
      var $49=$ls_addr;
      var $50=$seminfo_addr;
      _trydecpoint($49, $50);
      label = 21; break;
    case 21: 

      return;
  }

}
_read_numeral["X"]=1;

function _readhexaesc($ls) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; _memset(__stackBase__, 0, 12);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $c=__stackBase__;
      var $i;
      var $r;
      $ls_addr=$ls;
      $r=0;
      var $arrayidx=(($c)|0);
      HEAP32[(($arrayidx)>>2)]=120;
      $i=1;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|0) < 3;
      if ($cmp) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $1=$ls_addr;
      var $z=(($1+44)|0);
      var $2=HEAP32[(($z)>>2)];
      var $n=(($2)|0);
      var $3=HEAP32[(($n)>>2)];
      var $dec=((($3)-(1))|0);
      HEAP32[(($n)>>2)]=$dec;
      var $cmp1=(($3)>>>0) > 0;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $4=$ls_addr;
      var $z2=(($4+44)|0);
      var $5=HEAP32[(($z2)>>2)];
      var $p=(($5+4)|0);
      var $6=HEAP32[(($p)>>2)];
      var $incdec_ptr=(($6+1)|0);
      HEAP32[(($p)>>2)]=$incdec_ptr;
      var $7=HEAP8[($6)];
      var $conv=(($7)&255);
      var $cond = $conv;label = 7; break;
    case 6: 
      var $8=$ls_addr;
      var $z3=(($8+44)|0);
      var $9=HEAP32[(($z3)>>2)];
      var $call=_luaZ_fill($9);
      var $cond = $call;label = 7; break;
    case 7: 
      var $cond;
      var $10=$ls_addr;
      var $current=(($10)|0);
      HEAP32[(($current)>>2)]=$cond;
      var $11=$i;
      var $arrayidx4=(($c+($11<<2))|0);
      HEAP32[(($arrayidx4)>>2)]=$cond;
      var $12=$i;
      var $arrayidx5=(($c+($12<<2))|0);
      var $13=HEAP32[(($arrayidx5)>>2)];
      var $add=((($13)+(1))|0);
      var $arrayidx6=((5243528+$add)|0);
      var $14=HEAP8[($arrayidx6)];
      var $conv7=(($14)&255);
      var $and=$conv7 & 16;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $15=$ls_addr;
      var $arraydecay=(($c)|0);
      var $16=$i;
      var $add8=((($16)+(1))|0);
      _escerror($15, $arraydecay, $add8, ((5252300)|0));
      label = 9; break;
    case 9: 
      var $17=$r;
      var $shl=$17 << 4;
      var $18=$i;
      var $arrayidx9=(($c+($18<<2))|0);
      var $19=HEAP32[(($arrayidx9)>>2)];
      var $call10=_luaO_hexavalue($19);
      var $add11=((($shl)+($call10))|0);
      $r=$add11;
      label = 10; break;
    case 10: 
      var $20=$i;
      var $inc=((($20)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 11: 
      var $21=$r;
      STACKTOP = __stackBase__;
      return $21;
  }

}
_readhexaesc["X"]=1;

function _readdecesc($ls) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; _memset(__stackBase__, 0, 12);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $c=__stackBase__;
      var $i;
      var $r;
      $ls_addr=$ls;
      $r=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|0) < 3;
      if ($cmp) { label = 4; break; } else { var $4 = 0;label = 5; break; }
    case 4: 
      var $1=$ls_addr;
      var $current=(($1)|0);
      var $2=HEAP32[(($current)>>2)];
      var $add=((($2)+(1))|0);
      var $arrayidx=((5243528+$add)|0);
      var $3=HEAP8[($arrayidx)];
      var $conv=(($3)&255);
      var $and=$conv & 2;
      var $tobool=(($and)|0)!=0;
      var $4 = $tobool;label = 5; break;
    case 5: 
      var $4;
      if ($4) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $5=$ls_addr;
      var $current1=(($5)|0);
      var $6=HEAP32[(($current1)>>2)];
      var $7=$i;
      var $arrayidx2=(($c+($7<<2))|0);
      HEAP32[(($arrayidx2)>>2)]=$6;
      var $8=$r;
      var $mul=((($8)*(10))&-1);
      var $9=$i;
      var $arrayidx3=(($c+($9<<2))|0);
      var $10=HEAP32[(($arrayidx3)>>2)];
      var $add4=((($mul)+($10))|0);
      var $sub=((($add4)-(48))|0);
      $r=$sub;
      var $11=$ls_addr;
      var $z=(($11+44)|0);
      var $12=HEAP32[(($z)>>2)];
      var $n=(($12)|0);
      var $13=HEAP32[(($n)>>2)];
      var $dec=((($13)-(1))|0);
      HEAP32[(($n)>>2)]=$dec;
      var $cmp5=(($13)>>>0) > 0;
      if ($cmp5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $14=$ls_addr;
      var $z7=(($14+44)|0);
      var $15=HEAP32[(($z7)>>2)];
      var $p=(($15+4)|0);
      var $16=HEAP32[(($p)>>2)];
      var $incdec_ptr=(($16+1)|0);
      HEAP32[(($p)>>2)]=$incdec_ptr;
      var $17=HEAP8[($16)];
      var $conv8=(($17)&255);
      var $cond = $conv8;label = 9; break;
    case 8: 
      var $18=$ls_addr;
      var $z9=(($18+44)|0);
      var $19=HEAP32[(($z9)>>2)];
      var $call=_luaZ_fill($19);
      var $cond = $call;label = 9; break;
    case 9: 
      var $cond;
      var $20=$ls_addr;
      var $current10=(($20)|0);
      HEAP32[(($current10)>>2)]=$cond;
      label = 10; break;
    case 10: 
      var $21=$i;
      var $inc=((($21)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 11: 
      var $22=$r;
      var $cmp11=(($22)|0) > 255;
      if ($cmp11) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $23=$ls_addr;
      var $arraydecay=(($c)|0);
      var $24=$i;
      _escerror($23, $arraydecay, $24, ((5252448)|0));
      label = 13; break;
    case 13: 
      var $25=$r;
      STACKTOP = __stackBase__;
      return $25;
  }

}
_readdecesc["X"]=1;

function _txtToken($ls, $token) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $ls_addr;
      var $token_addr;
      $ls_addr=$ls;
      $token_addr=$token;
      var $0=$token_addr;
      if ((($0)|0)==288 | (($0)|0)==289 | (($0)|0)==287) {
        label = 3; break;
      }
      else {
      label = 4; break;
      }
      
    case 3: 
      var $1=$ls_addr;
      _save($1, 0);
      var $2=$ls_addr;
      var $L=(($2+40)|0);
      var $3=HEAP32[(($L)>>2)];
      var $4=$ls_addr;
      var $buff=(($4+48)|0);
      var $5=HEAP32[(($buff)>>2)];
      var $buffer=(($5)|0);
      var $6=HEAP32[(($buffer)>>2)];
      var $call=_luaO_pushfstring($3, ((5249864)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$6,tempInt));
      $retval=$call;
      label = 5; break;
    case 4: 
      var $7=$ls_addr;
      var $8=$token_addr;
      var $call1=_luaX_token2str($7, $8);
      $retval=$call1;
      label = 5; break;
    case 5: 
      var $9=$retval;
      STACKTOP = __stackBase__;
      return $9;
  }

}


function _trydecpoint($ls, $seminfo) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $seminfo_addr;
      var $old;
      $ls_addr=$ls;
      $seminfo_addr=$seminfo;
      var $0=$ls_addr;
      var $decpoint=(($0+64)|0);
      var $1=HEAP8[($decpoint)];
      $old=$1;
      var $call=_localeconv();
      var $decimal_point=(($call)|0);
      var $2=HEAP32[(($decimal_point)>>2)];
      var $arrayidx=(($2)|0);
      var $3=HEAP8[($arrayidx)];
      var $4=$ls_addr;
      var $decpoint1=(($4+64)|0);
      HEAP8[($decpoint1)]=$3;
      var $5=$ls_addr;
      var $6=$old;
      var $7=$ls_addr;
      var $decpoint2=(($7+64)|0);
      var $8=HEAP8[($decpoint2)];
      _buffreplace($5, $6, $8);
      var $9=$ls_addr;
      var $buff=(($9+48)|0);
      var $10=HEAP32[(($buff)>>2)];
      var $buffer=(($10)|0);
      var $11=HEAP32[(($buffer)>>2)];
      var $12=$ls_addr;
      var $buff3=(($12+48)|0);
      var $13=HEAP32[(($buff3)>>2)];
      var $n=(($13+4)|0);
      var $14=HEAP32[(($n)>>2)];
      var $sub=((($14)-(1))|0);
      var $15=$seminfo_addr;
      var $r=$15;
      var $call4=_luaO_str2d($11, $sub, $r);
      var $tobool=(($call4)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $16=$ls_addr;
      var $17=$ls_addr;
      var $decpoint5=(($17+64)|0);
      var $18=HEAP8[($decpoint5)];
      _buffreplace($16, $18, 46);
      var $19=$ls_addr;
      _lexerror($19, ((5253456)|0), 287);

    case 4: 

      return;
  }

}


function _escerror($ls, $c, $n, $msg) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $c_addr;
      var $n_addr;
      var $msg_addr;
      var $i;
      $ls_addr=$ls;
      $c_addr=$c;
      $n_addr=$n;
      $msg_addr=$msg;
      var $0=$ls_addr;
      var $buff=(($0+48)|0);
      var $1=HEAP32[(($buff)>>2)];
      var $n1=(($1+4)|0);
      HEAP32[(($n1)>>2)]=0;
      var $2=$ls_addr;
      _save($2, 92);
      $i=0;
      label = 3; break;
    case 3: 
      var $3=$i;
      var $4=$n_addr;
      var $cmp=(($3)|0) < (($4)|0);
      if ($cmp) { label = 4; break; } else { var $8 = 0;label = 5; break; }
    case 4: 
      var $5=$i;
      var $6=$c_addr;
      var $arrayidx=(($6+($5<<2))|0);
      var $7=HEAP32[(($arrayidx)>>2)];
      var $cmp2=(($7)|0)!=-1;
      var $8 = $cmp2;label = 5; break;
    case 5: 
      var $8;
      if ($8) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $9=$ls_addr;
      var $10=$i;
      var $11=$c_addr;
      var $arrayidx3=(($11+($10<<2))|0);
      var $12=HEAP32[(($arrayidx3)>>2)];
      _save($9, $12);
      label = 7; break;
    case 7: 
      var $13=$i;
      var $inc=((($13)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 
      var $14=$ls_addr;
      var $15=$msg_addr;
      _lexerror($14, $15, 289);

    case 9: 

      return;
  }

}


function _luaM_growaux_($L, $block, $size, $size_elems, $limit, $what) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $block_addr;
      var $size_addr;
      var $size_elems_addr;
      var $limit_addr;
      var $what_addr;
      var $newblock;
      var $newsize;
      $L_addr=$L;
      $block_addr=$block;
      $size_addr=$size;
      $size_elems_addr=$size_elems;
      $limit_addr=$limit;
      $what_addr=$what;
      var $0=$size_addr;
      var $1=HEAP32[(($0)>>2)];
      var $2=$limit_addr;
      var $div=((((($2)|0))/(2))&-1);
      var $cmp=(($1)|0) >= (($div)|0);
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $3=$size_addr;
      var $4=HEAP32[(($3)>>2)];
      var $5=$limit_addr;
      var $cmp1=(($4)|0) >= (($5)|0);
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $6=$L_addr;
      var $7=$what_addr;
      var $8=$limit_addr;
      _luaG_runerror($6, ((5253420)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempInt)>>2)]=$7,HEAP32[(((tempInt)+(4))>>2)]=$8,tempInt));

    case 5: 
      var $9=$limit_addr;
      $newsize=$9;
      label = 9; break;
    case 6: 
      var $10=$size_addr;
      var $11=HEAP32[(($10)>>2)];
      var $mul=($11<<1);
      $newsize=$mul;
      var $12=$newsize;
      var $cmp3=(($12)|0) < 4;
      if ($cmp3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $newsize=4;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $13=$newsize;
      var $add=((($13)+(1))|0);
      var $14=$size_elems_addr;
      var $div7=Math.floor((4294967293)/((($14)>>>0)));
      var $cmp8=(($add)>>>0) > (($div7)>>>0);
      if ($cmp8) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $15=$L_addr;
      _luaM_toobig($15);

      label = 12; break;
    case 11: 
      var $17=$L_addr;
      var $18=$block_addr;
      var $19=$size_addr;
      var $20=HEAP32[(($19)>>2)];
      var $21=$size_elems_addr;
      var $mul9=Math.imul($20,$21);
      var $22=$newsize;
      var $23=$size_elems_addr;
      var $mul10=Math.imul($22,$23);
      var $call=_luaM_realloc_($17, $18, $mul9, $mul10);
      var $cond = $call;label = 12; break;
    case 12: 
      var $cond;
      $newblock=$cond;
      var $24=$newsize;
      var $25=$size_addr;
      HEAP32[(($25)>>2)]=$24;
      var $26=$newblock;
      STACKTOP = __stackBase__;
      return $26;
  }

}
_luaM_growaux_["X"]=1;

function _luaM_toobig($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      $L_addr=$L;
      var $0=$L_addr;
      _luaG_runerror($0, ((5253380)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));

    case 3: 
      STACKTOP = __stackBase__;
      return;
  }

}


function _luaM_realloc_($L, $block, $osize, $nsize) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $block_addr;
      var $osize_addr;
      var $nsize_addr;
      var $newblock;
      var $g;
      var $realosize;
      $L_addr=$L;
      $block_addr=$block;
      $osize_addr=$osize;
      $nsize_addr=$nsize;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      $g=$1;
      var $2=$block_addr;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$osize_addr;
      var $cond = $3;label = 5; break;
    case 4: 
      var $cond = 0;label = 5; break;
    case 5: 
      var $cond;
      $realosize=$cond;
      var $4=$g;
      var $frealloc=(($4)|0);
      var $5=HEAP32[(($frealloc)>>2)];
      var $6=$g;
      var $ud=(($6+4)|0);
      var $7=HEAP32[(($ud)>>2)];
      var $8=$block_addr;
      var $9=$osize_addr;
      var $10=$nsize_addr;
      var $call=FUNCTION_TABLE[$5]($7, $8, $9, $10);
      $newblock=$call;
      var $11=$newblock;
      var $cmp=(($11)|0)==0;
      if ($cmp) { label = 6; break; } else { label = 12; break; }
    case 6: 
      var $12=$nsize_addr;
      var $cmp1=(($12)>>>0) > 0;
      if ($cmp1) { label = 7; break; } else { label = 12; break; }
    case 7: 
      var $13=$g;
      var $gcrunning=(($13+55)|0);
      var $14=HEAP8[($gcrunning)];
      var $tobool2=(($14 << 24) >> 24)!=0;
      if ($tobool2) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $15=$L_addr;
      _luaC_fullgc($15, 1);
      var $16=$g;
      var $frealloc4=(($16)|0);
      var $17=HEAP32[(($frealloc4)>>2)];
      var $18=$g;
      var $ud5=(($18+4)|0);
      var $19=HEAP32[(($ud5)>>2)];
      var $20=$block_addr;
      var $21=$osize_addr;
      var $22=$nsize_addr;
      var $call6=FUNCTION_TABLE[$17]($19, $20, $21, $22);
      $newblock=$call6;
      label = 9; break;
    case 9: 
      var $23=$newblock;
      var $cmp7=(($23)|0)==0;
      if ($cmp7) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $24=$L_addr;
      _luaD_throw($24, 4);

    case 11: 
      label = 12; break;
    case 12: 
      var $25=$g;
      var $GCdebt=(($25+12)|0);
      var $26=HEAP32[(($GCdebt)>>2)];
      var $27=$nsize_addr;
      var $add=((($26)+($27))|0);
      var $28=$realosize;
      var $sub=((($add)-($28))|0);
      var $29=$g;
      var $GCdebt11=(($29+12)|0);
      HEAP32[(($GCdebt11)>>2)]=$sub;
      var $30=$newblock;

      return $30;
  }

}
_luaM_realloc_["X"]=1;

function _luaO_hexavalue($c) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $c_addr;
      $c_addr=$c;
      var $0=$c_addr;
      var $add=((($0)+(1))|0);
      var $arrayidx=((5243528+$add)|0);
      var $1=HEAP8[($arrayidx)];
      var $conv=(($1)&255);
      var $and=$conv & 2;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$c_addr;
      var $sub=((($2)-(48))|0);
      $retval=$sub;
      label = 5; break;
    case 4: 
      var $3=$c_addr;
      var $or=$3 | 32;
      var $sub1=((($or)-(97))|0);
      var $add2=((($sub1)+(10))|0);
      $retval=$add2;
      label = 5; break;
    case 5: 
      var $4=$retval;

      return $4;
  }

}


function _luaO_arith($op, $v1, $v2) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $op_addr;
      var $v1_addr;
      var $v2_addr;
      $op_addr=$op;
      $v1_addr=$v1;
      $v2_addr=$v2;
      var $0=$op_addr;
      if ((($0)|0)==0) {
        label = 3; break;
      }
      else if ((($0)|0)==1) {
        label = 4; break;
      }
      else if ((($0)|0)==2) {
        label = 5; break;
      }
      else if ((($0)|0)==3) {
        label = 6; break;
      }
      else if ((($0)|0)==4) {
        label = 7; break;
      }
      else if ((($0)|0)==5) {
        label = 8; break;
      }
      else if ((($0)|0)==6) {
        label = 9; break;
      }
      else {
      label = 10; break;
      }
      
    case 3: 
      var $1=$v1_addr;
      var $2=$v2_addr;
      var $add=($1)+($2);
      $retval=$add;
      label = 11; break;
    case 4: 
      var $3=$v1_addr;
      var $4=$v2_addr;
      var $sub=($3)-($4);
      $retval=$sub;
      label = 11; break;
    case 5: 
      var $5=$v1_addr;
      var $6=$v2_addr;
      var $mul=($5)*($6);
      $retval=$mul;
      label = 11; break;
    case 6: 
      var $7=$v1_addr;
      var $8=$v2_addr;
      var $div=($7)/($8);
      $retval=$div;
      label = 11; break;
    case 7: 
      var $9=$v1_addr;
      var $10=$v1_addr;
      var $11=$v2_addr;
      var $div5=($10)/($11);
      var $call=Math.floor($div5);
      var $12=$v2_addr;
      var $mul6=($call)*($12);
      var $sub7=($9)-($mul6);
      $retval=$sub7;
      label = 11; break;
    case 8: 
      var $13=$v1_addr;
      var $14=$v2_addr;
      var $15=Math.pow($13, $14);
      $retval=$15;
      label = 11; break;
    case 9: 
      var $16=$v1_addr;
      var $sub10=(-$16);
      $retval=$sub10;
      label = 11; break;
    case 10: 
      $retval=0;
      label = 11; break;
    case 11: 
      var $17=$retval;

      return $17;
  }

}
_luaO_arith["X"]=1;

function _luaO_str2d($s, $len, $result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $s_addr;
      var $len_addr;
      var $result_addr;
      var $endptr=__stackBase__;
      $s_addr=$s;
      $len_addr=$len;
      $result_addr=$result;
      var $0=$s_addr;
      var $call=_strpbrk($0, ((5253064)|0));
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 14; break;
    case 4: 
      var $1=$s_addr;
      var $call1=_strpbrk($1, ((5253360)|0));
      var $tobool2=(($call1)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $2=$s_addr;
      var $call4=_lua_strx2number($2, $endptr);
      var $3=$result_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$call4,HEAP32[(($3)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 7; break;
    case 6: 
      var $4=$s_addr;
      var $call6=_strtod($4, $endptr);
      var $5=$result_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$call6,HEAP32[(($5)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($5)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $6=HEAP32[(($endptr)>>2)];
      var $7=$s_addr;
      var $cmp=(($6)|0)==(($7)|0);
      if ($cmp) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $retval=0;
      label = 14; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $8=HEAP32[(($endptr)>>2)];
      var $9=HEAP8[($8)];
      var $conv=(($9)&255);
      var $add=((($conv)+(1))|0);
      var $arrayidx=((5243528+$add)|0);
      var $10=HEAP8[($arrayidx)];
      var $conv10=(($10)&255);
      var $and=$conv10 & 8;
      var $tobool11=(($and)|0)!=0;
      if ($tobool11) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $11=HEAP32[(($endptr)>>2)];
      var $incdec_ptr=(($11+1)|0);
      HEAP32[(($endptr)>>2)]=$incdec_ptr;
      label = 11; break;
    case 13: 
      var $12=HEAP32[(($endptr)>>2)];
      var $13=$s_addr;
      var $14=$len_addr;
      var $add_ptr=(($13+$14)|0);
      var $cmp12=(($12)|0)==(($add_ptr)|0);
      var $conv13=(($cmp12)&1);
      $retval=$conv13;
      label = 14; break;
    case 14: 
      var $15=$retval;
      STACKTOP = __stackBase__;
      return $15;
  }

}
_luaO_str2d["X"]=1;

function _lua_strx2number($s, $endptr) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; _memset(__stackBase__, 0, 12);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $s_addr=__stackBase__;
      var $endptr_addr;
      var $r;
      var $e=(__stackBase__)+(4);
      var $i=(__stackBase__)+(8);
      var $neg;
      var $exp1;
      var $neg1;
      HEAP32[(($s_addr)>>2)]=$s;
      $endptr_addr=$endptr;
      $r=0;
      HEAP32[(($e)>>2)]=0;
      HEAP32[(($i)>>2)]=0;
      $neg=0;
      var $0=HEAP32[(($s_addr)>>2)];
      var $1=$endptr_addr;
      HEAP32[(($1)>>2)]=$0;
      label = 3; break;
    case 3: 
      var $2=HEAP32[(($s_addr)>>2)];
      var $3=HEAP8[($2)];
      var $conv=(($3)&255);
      var $add=((($conv)+(1))|0);
      var $arrayidx=((5243528+$add)|0);
      var $4=HEAP8[($arrayidx)];
      var $conv1=(($4)&255);
      var $and=$conv1 & 8;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $5=HEAP32[(($s_addr)>>2)];
      var $incdec_ptr=(($5+1)|0);
      HEAP32[(($s_addr)>>2)]=$incdec_ptr;
      label = 3; break;
    case 5: 
      var $call=_isneg($s_addr);
      $neg=$call;
      var $6=HEAP32[(($s_addr)>>2)];
      var $7=HEAP8[($6)];
      var $conv2=(($7 << 24) >> 24);
      var $cmp=(($conv2)|0)==48;
      if ($cmp) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $8=HEAP32[(($s_addr)>>2)];
      var $add_ptr=(($8+1)|0);
      var $9=HEAP8[($add_ptr)];
      var $conv4=(($9 << 24) >> 24);
      var $cmp5=(($conv4)|0)==120;
      if ($cmp5) { label = 9; break; } else { label = 7; break; }
    case 7: 
      var $10=HEAP32[(($s_addr)>>2)];
      var $add_ptr7=(($10+1)|0);
      var $11=HEAP8[($add_ptr7)];
      var $conv8=(($11 << 24) >> 24);
      var $cmp9=(($conv8)|0)==88;
      if ($cmp9) { label = 9; break; } else { label = 8; break; }
    case 8: 
      $retval=0;
      label = 28; break;
    case 9: 
      var $12=HEAP32[(($s_addr)>>2)];
      var $add_ptr11=(($12+2)|0);
      HEAP32[(($s_addr)>>2)]=$add_ptr11;
      var $13=$r;
      var $call12=_readhexa($s_addr, $13, $i);
      $r=$call12;
      var $14=HEAP32[(($s_addr)>>2)];
      var $15=HEAP8[($14)];
      var $conv13=(($15 << 24) >> 24);
      var $cmp14=(($conv13)|0)==46;
      if ($cmp14) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $16=HEAP32[(($s_addr)>>2)];
      var $incdec_ptr17=(($16+1)|0);
      HEAP32[(($s_addr)>>2)]=$incdec_ptr17;
      var $17=$r;
      var $call18=_readhexa($s_addr, $17, $e);
      $r=$call18;
      label = 11; break;
    case 11: 
      var $18=HEAP32[(($i)>>2)];
      var $cmp20=(($18)|0)==0;
      if ($cmp20) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $19=HEAP32[(($e)>>2)];
      var $cmp23=(($19)|0)==0;
      if ($cmp23) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $retval=0;
      label = 28; break;
    case 14: 
      var $20=HEAP32[(($e)>>2)];
      var $mul=((($20)*(-4))&-1);
      HEAP32[(($e)>>2)]=$mul;
      var $21=HEAP32[(($s_addr)>>2)];
      var $22=$endptr_addr;
      HEAP32[(($22)>>2)]=$21;
      var $23=HEAP32[(($s_addr)>>2)];
      var $24=HEAP8[($23)];
      var $conv27=(($24 << 24) >> 24);
      var $cmp28=(($conv27)|0)==112;
      if ($cmp28) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $25=HEAP32[(($s_addr)>>2)];
      var $26=HEAP8[($25)];
      var $conv31=(($26 << 24) >> 24);
      var $cmp32=(($conv31)|0)==80;
      if ($cmp32) { label = 16; break; } else { label = 24; break; }
    case 16: 
      $exp1=0;
      var $27=HEAP32[(($s_addr)>>2)];
      var $incdec_ptr35=(($27+1)|0);
      HEAP32[(($s_addr)>>2)]=$incdec_ptr35;
      var $call36=_isneg($s_addr);
      $neg1=$call36;
      var $28=HEAP32[(($s_addr)>>2)];
      var $29=HEAP8[($28)];
      var $conv37=(($29)&255);
      var $add38=((($conv37)+(1))|0);
      var $arrayidx39=((5243528+$add38)|0);
      var $30=HEAP8[($arrayidx39)];
      var $conv40=(($30)&255);
      var $and41=$conv40 & 2;
      var $tobool42=(($and41)|0)!=0;
      if ($tobool42) { label = 18; break; } else { label = 17; break; }
    case 17: 
      label = 25; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $31=HEAP32[(($s_addr)>>2)];
      var $32=HEAP8[($31)];
      var $conv46=(($32)&255);
      var $add47=((($conv46)+(1))|0);
      var $arrayidx48=((5243528+$add47)|0);
      var $33=HEAP8[($arrayidx48)];
      var $conv49=(($33)&255);
      var $and50=$conv49 & 2;
      var $tobool51=(($and50)|0)!=0;
      if ($tobool51) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $34=$exp1;
      var $mul53=((($34)*(10))&-1);
      var $35=HEAP32[(($s_addr)>>2)];
      var $incdec_ptr54=(($35+1)|0);
      HEAP32[(($s_addr)>>2)]=$incdec_ptr54;
      var $36=HEAP8[($35)];
      var $conv55=(($36 << 24) >> 24);
      var $add56=((($mul53)+($conv55))|0);
      var $sub=((($add56)-(48))|0);
      $exp1=$sub;
      label = 19; break;
    case 21: 
      var $37=$neg1;
      var $tobool58=(($37)|0)!=0;
      if ($tobool58) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $38=$exp1;
      var $sub60=(((-$38))|0);
      $exp1=$sub60;
      label = 23; break;
    case 23: 
      var $39=$exp1;
      var $40=HEAP32[(($e)>>2)];
      var $add62=((($40)+($39))|0);
      HEAP32[(($e)>>2)]=$add62;
      label = 24; break;
    case 24: 
      var $41=HEAP32[(($s_addr)>>2)];
      var $42=$endptr_addr;
      HEAP32[(($42)>>2)]=$41;
      label = 25; break;
    case 25: 
      var $43=$neg;
      var $tobool64=(($43)|0)!=0;
      if ($tobool64) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $44=$r;
      var $sub66=(-$44);
      $r=$sub66;
      label = 27; break;
    case 27: 
      var $45=$r;
      var $46=HEAP32[(($e)>>2)];
      var $call68=_ldexp($45, $46);
      $retval=$call68;
      label = 28; break;
    case 28: 
      var $47=$retval;
      STACKTOP = __stackBase__;
      return $47;
  }

}
_lua_strx2number["X"]=1;

function _pushstr($L, $str, $l) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $str_addr;
      var $l_addr;
      var $io;
      var $x_;
      $L_addr=$L;
      $str_addr=$str;
      $l_addr=$l;
      var $0=$L_addr;
      var $top=(($0+8)|0);
      var $1=HEAP32[(($top)>>2)];
      $io=$1;
      var $2=$L_addr;
      var $3=$str_addr;
      var $4=$l_addr;
      var $call=_luaS_newlstr($2, $3, $4);
      $x_=$call;
      var $5=$x_;
      var $6=$5;
      var $7=$io;
      var $value_=(($7)|0);
      var $gc=$value_;
      HEAP32[(($gc)>>2)]=$6;
      var $8=$x_;
      var $tsv=$8;
      var $tt=(($tsv+4)|0);
      var $9=HEAP8[($tt)];
      var $conv=(($9)&255);
      var $or=$conv | 64;
      var $10=$io;
      var $tt_=(($10+8)|0);
      HEAP32[(($tt_)>>2)]=$or;
      var $11=$L_addr;
      var $top1=(($11+8)|0);
      var $12=HEAP32[(($top1)>>2)];
      var $incdec_ptr=(($12+12)|0);
      HEAP32[(($top1)>>2)]=$incdec_ptr;
      var $13=$L_addr;
      var $stack_last=(($13+24)|0);
      var $14=HEAP32[(($stack_last)>>2)];
      var $15=$L_addr;
      var $top2=(($15+8)|0);
      var $16=HEAP32[(($top2)>>2)];
      var $sub_ptr_lhs_cast=$14;
      var $sub_ptr_rhs_cast=$16;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(12))&-1);
      var $cmp=(($sub_ptr_div)|0) <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $17=$L_addr;
      _luaD_growstack($17, 0);
      label = 5; break;
    case 4: 
      label = 5; break;
    case 5: 

      return;
  }

}
_pushstr["X"]=1;

function _luaO_pushfstring($L, $fmt, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);

  var $L_addr;
  var $fmt_addr;
  var $msg;
  var $argp=__stackBase__;
  $L_addr=$L;
  $fmt_addr=$fmt;
  var $argp1=$argp;
  HEAP32[(($argp1)>>2)]=varrp;
  var $0=$L_addr;
  var $1=$fmt_addr;
  var $2=HEAP32[(($argp)>>2)];
  var $call=_luaO_pushvfstring($0, $1, $2);
  $msg=$call;
  var $argp2=$argp;

  var $3=$msg;
  STACKTOP = __stackBase__;
  return $3;
}


function _luaO_chunkid($out, $source, $bufflen) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $out_addr;
      var $source_addr;
      var $bufflen_addr;
      var $l;
      var $nl;
      $out_addr=$out;
      $source_addr=$source;
      $bufflen_addr=$bufflen;
      var $0=$source_addr;
      var $call=_strlen($0);
      $l=$call;
      var $1=$source_addr;
      var $2=HEAP8[($1)];
      var $conv=(($2 << 24) >> 24);
      var $cmp=(($conv)|0)==61;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $3=$l;
      var $4=$bufflen_addr;
      var $cmp2=(($3)>>>0) <= (($4)>>>0);
      if ($cmp2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $5=$out_addr;
      var $6=$source_addr;
      var $add_ptr=(($6+1)|0);
      var $7=$l;
      var $mul=$7;
      _memcpy($5, $add_ptr, $mul);
      label = 6; break;
    case 5: 
      var $8=$out_addr;
      var $9=$source_addr;
      var $add_ptr5=(($9+1)|0);
      var $10=$bufflen_addr;
      var $sub=((($10)-(1))|0);
      var $mul6=$sub;
      _memcpy($8, $add_ptr5, $mul6);
      var $11=$bufflen_addr;
      var $sub7=((($11)-(1))|0);
      var $12=$out_addr;
      var $add_ptr8=(($12+$sub7)|0);
      $out_addr=$add_ptr8;
      var $13=$out_addr;
      HEAP8[($13)]=0;
      label = 6; break;
    case 6: 
      label = 22; break;
    case 7: 
      var $14=$source_addr;
      var $15=HEAP8[($14)];
      var $conv10=(($15 << 24) >> 24);
      var $cmp11=(($conv10)|0)==64;
      if ($cmp11) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $16=$l;
      var $17=$bufflen_addr;
      var $cmp14=(($16)>>>0) <= (($17)>>>0);
      if ($cmp14) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $18=$out_addr;
      var $19=$source_addr;
      var $add_ptr17=(($19+1)|0);
      var $20=$l;
      var $mul18=$20;
      _memcpy($18, $add_ptr17, $mul18);
      label = 11; break;
    case 10: 
      var $21=$out_addr;
      HEAP8[($21)]=HEAP8[((((5246592)|0))|0)];HEAP8[((($21)+(1))|0)]=HEAP8[(((((5246592)|0))+(1))|0)];HEAP8[((($21)+(2))|0)]=HEAP8[(((((5246592)|0))+(2))|0)];
      var $22=$out_addr;
      var $add_ptr20=(($22+3)|0);
      $out_addr=$add_ptr20;
      var $23=$bufflen_addr;
      var $sub21=((($23)-(3))|0);
      $bufflen_addr=$sub21;
      var $24=$out_addr;
      var $25=$source_addr;
      var $add_ptr22=(($25+1)|0);
      var $26=$l;
      var $add_ptr23=(($add_ptr22+$26)|0);
      var $27=$bufflen_addr;
      var $idx_neg=(((-$27))|0);
      var $add_ptr24=(($add_ptr23+$idx_neg)|0);
      var $28=$bufflen_addr;
      var $mul25=$28;
      _memcpy($24, $add_ptr24, $mul25);
      label = 11; break;
    case 11: 
      label = 21; break;
    case 12: 
      var $29=$source_addr;
      var $call28=_strchr($29, 10);
      $nl=$call28;
      var $30=$out_addr;
      for (var $$src = ((5246164)|0), $$dest = $30, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
        HEAP8[$$dest] = HEAP8[$$src]
      };
      var $31=$out_addr;
      var $add_ptr29=(($31+9)|0);
      $out_addr=$add_ptr29;
      var $32=$bufflen_addr;
      var $sub30=((($32)-(15))|0);
      $bufflen_addr=$sub30;
      var $33=$l;
      var $34=$bufflen_addr;
      var $cmp31=(($33)>>>0) < (($34)>>>0);
      if ($cmp31) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $35=$nl;
      var $cmp33=(($35)|0)==0;
      if ($cmp33) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $36=$out_addr;
      var $37=$source_addr;
      var $38=$l;
      var $mul36=$38;
      _memcpy($36, $37, $mul36);
      var $39=$l;
      var $40=$out_addr;
      var $add_ptr37=(($40+$39)|0);
      $out_addr=$add_ptr37;
      label = 20; break;
    case 15: 
      var $41=$nl;
      var $cmp39=(($41)|0)!=0;
      if ($cmp39) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $42=$nl;
      var $43=$source_addr;
      var $sub_ptr_lhs_cast=$42;
      var $sub_ptr_rhs_cast=$43;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $l=$sub_ptr_sub;
      label = 17; break;
    case 17: 
      var $44=$l;
      var $45=$bufflen_addr;
      var $cmp43=(($44)>>>0) > (($45)>>>0);
      if ($cmp43) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $46=$bufflen_addr;
      $l=$46;
      label = 19; break;
    case 19: 
      var $47=$out_addr;
      var $48=$source_addr;
      var $49=$l;
      var $mul47=$49;
      _memcpy($47, $48, $mul47);
      var $50=$l;
      var $51=$out_addr;
      var $add_ptr48=(($51+$50)|0);
      $out_addr=$add_ptr48;
      var $52=$out_addr;
      HEAP8[($52)]=HEAP8[((((5246592)|0))|0)];HEAP8[((($52)+(1))|0)]=HEAP8[(((((5246592)|0))+(1))|0)];HEAP8[((($52)+(2))|0)]=HEAP8[(((((5246592)|0))+(2))|0)];
      var $53=$out_addr;
      var $add_ptr49=(($53+3)|0);
      $out_addr=$add_ptr49;
      label = 20; break;
    case 20: 
      var $54=$out_addr;
      HEAP8[($54)]=HEAP8[((((5245844)|0))|0)];HEAP8[((($54)+(1))|0)]=HEAP8[(((((5245844)|0))+(1))|0)];HEAP8[((($54)+(2))|0)]=HEAP8[(((((5245844)|0))+(2))|0)];
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 

      return;
  }

}
_luaO_chunkid["X"]=1;

function _luaO_pushvfstring($L, $fmt, $argp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; _memset(__stackBase__, 0, 28);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $fmt_addr;
      var $argp_addr;
      var $n;
      var $e;
      var $io;
      var $x_;
      var $s;
      var $buff=__stackBase__;
      var $io22;
      var $io44;
      var $buff65=(__stackBase__)+(4);
      var $l;
      $L_addr=$L;
      $fmt_addr=$fmt;
      $argp_addr=$argp;
      $n=0;
      label = 3; break;
    case 3: 
      var $0=$fmt_addr;
      var $call=_strchr($0, 37);
      $e=$call;
      var $1=$e;
      var $cmp=(($1)|0)==0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 25; break;
    case 5: 
      var $2=$L_addr;
      var $top=(($2+8)|0);
      var $3=HEAP32[(($top)>>2)];
      $io=$3;
      var $4=$L_addr;
      var $5=$fmt_addr;
      var $6=$e;
      var $7=$fmt_addr;
      var $sub_ptr_lhs_cast=$6;
      var $sub_ptr_rhs_cast=$7;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $call1=_luaS_newlstr($4, $5, $sub_ptr_sub);
      $x_=$call1;
      var $8=$x_;
      var $9=$8;
      var $10=$io;
      var $value_=(($10)|0);
      var $gc=$value_;
      HEAP32[(($gc)>>2)]=$9;
      var $11=$x_;
      var $tsv=$11;
      var $tt=(($tsv+4)|0);
      var $12=HEAP8[($tt)];
      var $conv=(($12)&255);
      var $or=$conv | 64;
      var $13=$io;
      var $tt_=(($13+8)|0);
      HEAP32[(($tt_)>>2)]=$or;
      var $14=$L_addr;
      var $top2=(($14+8)|0);
      var $15=HEAP32[(($top2)>>2)];
      var $incdec_ptr=(($15+12)|0);
      HEAP32[(($top2)>>2)]=$incdec_ptr;
      var $16=$L_addr;
      var $stack_last=(($16+24)|0);
      var $17=HEAP32[(($stack_last)>>2)];
      var $18=$L_addr;
      var $top3=(($18+8)|0);
      var $19=HEAP32[(($top3)>>2)];
      var $sub_ptr_lhs_cast4=$17;
      var $sub_ptr_rhs_cast5=$19;
      var $sub_ptr_sub6=((($sub_ptr_lhs_cast4)-($sub_ptr_rhs_cast5))|0);
      var $sub_ptr_div=((((($sub_ptr_sub6)|0))/(12))&-1);
      var $cmp7=(($sub_ptr_div)|0) <= 0;
      if ($cmp7) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $20=$L_addr;
      _luaD_growstack($20, 0);
      label = 8; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $21=$e;
      var $add_ptr=(($21+1)|0);
      var $22=HEAP8[($add_ptr)];
      var $conv11=(($22 << 24) >> 24);
      if ((($conv11)|0)==115) {
        label = 9; break;
      }
      else if ((($conv11)|0)==99) {
        label = 12; break;
      }
      else if ((($conv11)|0)==100) {
        label = 13; break;
      }
      else if ((($conv11)|0)==102) {
        label = 17; break;
      }
      else if ((($conv11)|0)==112) {
        label = 21; break;
      }
      else if ((($conv11)|0)==37) {
        label = 22; break;
      }
      else {
      label = 23; break;
      }
      
    case 9: 
      var $ap_cur=$argp_addr;
      var $23=$ap_cur;
      var $ap_next=(($ap_cur+4)|0);
      $argp_addr=$ap_next;
      var $24=HEAP32[(($23)>>2)];
      $s=$24;
      var $25=$s;
      var $cmp12=(($25)|0)==0;
      if ($cmp12) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $s=((5251220)|0);
      label = 11; break;
    case 11: 
      var $26=$L_addr;
      var $27=$s;
      var $28=$s;
      var $call16=_strlen($28);
      _pushstr($26, $27, $call16);
      label = 24; break;
    case 12: 
      var $ap_cur18=$argp_addr;
      var $29=$ap_cur18;
      var $ap_next19=(($ap_cur18+4)|0);
      $argp_addr=$ap_next19;
      var $30=HEAP32[(($29)>>2)];
      var $conv20=(($30) & 255);
      HEAP8[($buff)]=$conv20;
      var $31=$L_addr;
      _pushstr($31, $buff, 1);
      label = 24; break;
    case 13: 
      var $32=$L_addr;
      var $top23=(($32+8)|0);
      var $33=HEAP32[(($top23)>>2)];
      $io22=$33;
      var $ap_cur24=$argp_addr;
      var $34=$ap_cur24;
      var $ap_next25=(($ap_cur24+4)|0);
      $argp_addr=$ap_next25;
      var $35=HEAP32[(($34)>>2)];
      var $conv26=(($35)|0);
      var $36=$io22;
      var $value_27=(($36)|0);
      var $n28=$value_27;
      (HEAPF64[(tempDoublePtr)>>3]=$conv26,HEAP32[(($n28)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n28)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $37=$io22;
      var $tt_29=(($37+8)|0);
      HEAP32[(($tt_29)>>2)]=3;
      var $38=$L_addr;
      var $top30=(($38+8)|0);
      var $39=HEAP32[(($top30)>>2)];
      var $incdec_ptr31=(($39+12)|0);
      HEAP32[(($top30)>>2)]=$incdec_ptr31;
      var $40=$L_addr;
      var $stack_last32=(($40+24)|0);
      var $41=HEAP32[(($stack_last32)>>2)];
      var $42=$L_addr;
      var $top33=(($42+8)|0);
      var $43=HEAP32[(($top33)>>2)];
      var $sub_ptr_lhs_cast34=$41;
      var $sub_ptr_rhs_cast35=$43;
      var $sub_ptr_sub36=((($sub_ptr_lhs_cast34)-($sub_ptr_rhs_cast35))|0);
      var $sub_ptr_div37=((((($sub_ptr_sub36)|0))/(12))&-1);
      var $cmp38=(($sub_ptr_div37)|0) <= 0;
      if ($cmp38) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $44=$L_addr;
      _luaD_growstack($44, 0);
      label = 16; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 24; break;
    case 17: 
      var $45=$L_addr;
      var $top45=(($45+8)|0);
      var $46=HEAP32[(($top45)>>2)];
      $io44=$46;
      var $ap_cur46=$argp_addr;
      var $47=$ap_cur46;
      var $ap_next47=(($ap_cur46+8)|0);
      $argp_addr=$ap_next47;
      var $48=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($47)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($47)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $49=$io44;
      var $value_48=(($49)|0);
      var $n49=$value_48;
      (HEAPF64[(tempDoublePtr)>>3]=$48,HEAP32[(($n49)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n49)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $50=$io44;
      var $tt_50=(($50+8)|0);
      HEAP32[(($tt_50)>>2)]=3;
      var $51=$L_addr;
      var $top51=(($51+8)|0);
      var $52=HEAP32[(($top51)>>2)];
      var $incdec_ptr52=(($52+12)|0);
      HEAP32[(($top51)>>2)]=$incdec_ptr52;
      var $53=$L_addr;
      var $stack_last53=(($53+24)|0);
      var $54=HEAP32[(($stack_last53)>>2)];
      var $55=$L_addr;
      var $top54=(($55+8)|0);
      var $56=HEAP32[(($top54)>>2)];
      var $sub_ptr_lhs_cast55=$54;
      var $sub_ptr_rhs_cast56=$56;
      var $sub_ptr_sub57=((($sub_ptr_lhs_cast55)-($sub_ptr_rhs_cast56))|0);
      var $sub_ptr_div58=((((($sub_ptr_sub57)|0))/(12))&-1);
      var $cmp59=(($sub_ptr_div58)|0) <= 0;
      if ($cmp59) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $57=$L_addr;
      _luaD_growstack($57, 0);
      label = 20; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 24; break;
    case 21: 
      var $arraydecay=(($buff65)|0);
      var $ap_cur66=$argp_addr;
      var $58=$ap_cur66;
      var $ap_next67=(($ap_cur66+4)|0);
      $argp_addr=$ap_next67;
      var $59=HEAP32[(($58)>>2)];
      var $call68=_sprintf($arraydecay, ((5249428)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$59,tempInt));
      $l=$call68;
      var $60=$L_addr;
      var $arraydecay69=(($buff65)|0);
      var $61=$l;
      _pushstr($60, $arraydecay69, $61);
      label = 24; break;
    case 22: 
      var $62=$L_addr;
      _pushstr($62, ((5248096)|0), 1);
      label = 24; break;
    case 23: 
      var $63=$L_addr;
      var $64=$e;
      var $add_ptr71=(($64+1)|0);
      var $65=HEAP8[($add_ptr71)];
      var $conv72=(($65 << 24) >> 24);
      _luaG_runerror($63, ((5246940)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$conv72,tempInt));

    case 24: 
      var $66=$n;
      var $add=((($66)+(2))|0);
      $n=$add;
      var $67=$e;
      var $add_ptr73=(($67+2)|0);
      $fmt_addr=$add_ptr73;
      label = 3; break;
    case 25: 
      var $68=$L_addr;
      var $69=$fmt_addr;
      var $70=$fmt_addr;
      var $call74=_strlen($70);
      _pushstr($68, $69, $call74);
      var $71=$n;
      var $cmp75=(($71)|0) > 0;
      if ($cmp75) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $72=$L_addr;
      var $73=$n;
      var $add78=((($73)+(1))|0);
      _luaV_concat($72, $add78);
      label = 27; break;
    case 27: 
      var $74=$L_addr;
      var $top80=(($74+8)|0);
      var $75=HEAP32[(($top80)>>2)];
      var $add_ptr81=((($75)-(12))|0);
      var $value_82=(($add_ptr81)|0);
      var $gc83=$value_82;
      var $76=HEAP32[(($gc83)>>2)];
      var $ts=$76;
      var $add_ptr84=(($ts+16)|0);
      var $77=$add_ptr84;
      STACKTOP = __stackBase__;
      return $77;
  }

}
_luaO_pushvfstring["X"]=1;

function _isneg($s) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $s_addr;
      $s_addr=$s;
      var $0=$s_addr;
      var $1=HEAP32[(($0)>>2)];
      var $2=HEAP8[($1)];
      var $conv=(($2 << 24) >> 24);
      var $cmp=(($conv)|0)==45;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$s_addr;
      var $4=HEAP32[(($3)>>2)];
      var $incdec_ptr=(($4+1)|0);
      HEAP32[(($3)>>2)]=$incdec_ptr;
      $retval=1;
      label = 8; break;
    case 4: 
      var $5=$s_addr;
      var $6=HEAP32[(($5)>>2)];
      var $7=HEAP8[($6)];
      var $conv2=(($7 << 24) >> 24);
      var $cmp3=(($conv2)|0)==43;
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=$s_addr;
      var $9=HEAP32[(($8)>>2)];
      var $incdec_ptr6=(($9+1)|0);
      HEAP32[(($8)>>2)]=$incdec_ptr6;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      $retval=0;
      label = 8; break;
    case 8: 
      var $10=$retval;

      return $10;
  }

}


function _init_exp($e, $k, $i) {
  var label = 0;


  var $e_addr;
  var $k_addr;
  var $i_addr;
  $e_addr=$e;
  $k_addr=$k;
  $i_addr=$i;
  var $0=$e_addr;
  var $t=(($0+12)|0);
  HEAP32[(($t)>>2)]=-1;
  var $1=$e_addr;
  var $f=(($1+16)|0);
  HEAP32[(($f)>>2)]=-1;
  var $2=$k_addr;
  var $3=$e_addr;
  var $k1=(($3)|0);
  HEAP32[(($k1)>>2)]=$2;
  var $4=$i_addr;
  var $5=$e_addr;
  var $u=(($5+4)|0);
  var $info=$u;
  HEAP32[(($info)>>2)]=$4;

  return;
}


function _readhexa($s, $r, $count) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      var $r_addr;
      var $count_addr;
      $s_addr=$s;
      $r_addr=$r;
      $count_addr=$count;
      label = 3; break;
    case 3: 
      var $0=$s_addr;
      var $1=HEAP32[(($0)>>2)];
      var $2=HEAP8[($1)];
      var $conv=(($2)&255);
      var $add=((($conv)+(1))|0);
      var $arrayidx=((5243528+$add)|0);
      var $3=HEAP8[($arrayidx)];
      var $conv1=(($3)&255);
      var $and=$conv1 & 16;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $4=$r_addr;
      var $mul=($4)*(16);
      var $5=$s_addr;
      var $6=HEAP32[(($5)>>2)];
      var $7=HEAP8[($6)];
      var $conv2=(($7)&255);
      var $call=_luaO_hexavalue($conv2);
      var $conv3=(($call)|0);
      var $add4=($mul)+($conv3);
      $r_addr=$add4;
      var $8=$count_addr;
      var $9=HEAP32[(($8)>>2)];
      var $inc=((($9)+(1))|0);
      HEAP32[(($8)>>2)]=$inc;
      label = 5; break;
    case 5: 
      var $10=$s_addr;
      var $11=HEAP32[(($10)>>2)];
      var $incdec_ptr=(($11+1)|0);
      HEAP32[(($10)>>2)]=$incdec_ptr;
      label = 3; break;
    case 6: 
      var $12=$r_addr;

      return $12;
  }

}


function _luaY_parser($L, $z, $buff, $dyd, $name, $firstchar) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 120)|0; _memset(__stackBase__, 0, 120);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $z_addr;
      var $buff_addr;
      var $dyd_addr;
      var $name_addr;
      var $firstchar_addr;
      var $lexstate=__stackBase__;
      var $funcstate=(__stackBase__)+(68);
      var $cl;
      var $io;
      $L_addr=$L;
      $z_addr=$z;
      $buff_addr=$buff;
      $dyd_addr=$dyd;
      $name_addr=$name;
      $firstchar_addr=$firstchar;
      var $0=$L_addr;
      var $call=_luaF_newLclosure($0, 1);
      $cl=$call;
      var $1=$L_addr;
      var $top=(($1+8)|0);
      var $2=HEAP32[(($top)>>2)];
      $io=$2;
      var $3=$cl;
      var $4=$3;
      var $5=$io;
      var $value_=(($5)|0);
      var $gc=$value_;
      HEAP32[(($gc)>>2)]=$4;
      var $6=$io;
      var $tt_=(($6+8)|0);
      HEAP32[(($tt_)>>2)]=70;
      var $7=$L_addr;
      var $top1=(($7+8)|0);
      var $8=HEAP32[(($top1)>>2)];
      var $incdec_ptr=(($8+12)|0);
      HEAP32[(($top1)>>2)]=$incdec_ptr;
      var $9=$L_addr;
      var $stack_last=(($9+24)|0);
      var $10=HEAP32[(($stack_last)>>2)];
      var $11=$L_addr;
      var $top2=(($11+8)|0);
      var $12=HEAP32[(($top2)>>2)];
      var $sub_ptr_lhs_cast=$10;
      var $sub_ptr_rhs_cast=$12;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(12))&-1);
      var $cmp=(($sub_ptr_div)|0) <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $13=$L_addr;
      _luaD_growstack($13, 0);
      label = 5; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $14=$L_addr;
      var $call3=_luaF_newproto($14);
      var $15=$cl;
      var $l=$15;
      var $p=(($l+12)|0);
      HEAP32[(($p)>>2)]=$call3;
      var $f=(($funcstate)|0);
      HEAP32[(($f)>>2)]=$call3;
      var $16=$L_addr;
      var $17=$name_addr;
      var $call4=_luaS_new($16, $17);
      var $f5=(($funcstate)|0);
      var $18=HEAP32[(($f5)>>2)];
      var $source=(($18+36)|0);
      HEAP32[(($source)>>2)]=$call4;
      var $19=$buff_addr;
      var $buff6=(($lexstate+48)|0);
      HEAP32[(($buff6)>>2)]=$19;
      var $20=$dyd_addr;
      var $dyd7=(($lexstate+52)|0);
      HEAP32[(($dyd7)>>2)]=$20;
      var $21=$dyd_addr;
      var $label=(($21+24)|0);
      var $n=(($label+4)|0);
      HEAP32[(($n)>>2)]=0;
      var $22=$dyd_addr;
      var $gt=(($22+12)|0);
      var $n8=(($gt+4)|0);
      HEAP32[(($n8)>>2)]=0;
      var $23=$dyd_addr;
      var $actvar=(($23)|0);
      var $n9=(($actvar+4)|0);
      HEAP32[(($n9)>>2)]=0;
      var $24=$L_addr;
      var $25=$z_addr;
      var $f10=(($funcstate)|0);
      var $26=HEAP32[(($f10)>>2)];
      var $source11=(($26+36)|0);
      var $27=HEAP32[(($source11)>>2)];
      var $28=$firstchar_addr;
      _luaX_setinput($24, $lexstate, $25, $27, $28);
      _mainfunc($lexstate, $funcstate);
      var $29=$cl;
      STACKTOP = __stackBase__;
      return $29;
  }

}
_luaY_parser["X"]=1;

function _mainfunc($ls, $fs) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; _memset(__stackBase__, 0, 32);

  var $ls_addr;
  var $fs_addr;
  var $bl=__stackBase__;
  var $v=(__stackBase__)+(12);
  $ls_addr=$ls;
  $fs_addr=$fs;
  var $0=$ls_addr;
  var $1=$fs_addr;
  _open_func($0, $1, $bl);
  var $2=$fs_addr;
  var $f=(($2)|0);
  var $3=HEAP32[(($f)>>2)];
  var $is_vararg=(($3+77)|0);
  HEAP8[($is_vararg)]=1;
  _init_exp($v, 7, 0);
  var $4=$fs_addr;
  var $5=$ls_addr;
  var $envn=(($5+60)|0);
  var $6=HEAP32[(($envn)>>2)];
  var $call=_newupvalue($4, $6, $v);
  var $7=$ls_addr;
  _luaX_next($7);
  var $8=$ls_addr;
  _statlist($8);
  var $9=$ls_addr;
  _check($9, 286);
  var $10=$ls_addr;
  _close_func($10);
  STACKTOP = __stackBase__;
  return;
}


function _open_func($ls, $fs, $bl) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $fs_addr;
      var $bl_addr;
      var $L;
      var $f;
      var $io;
      $ls_addr=$ls;
      $fs_addr=$fs;
      $bl_addr=$bl;
      var $0=$ls_addr;
      var $L1=(($0+40)|0);
      var $1=HEAP32[(($L1)>>2)];
      $L=$1;
      var $2=$ls_addr;
      var $fs2=(($2+36)|0);
      var $3=HEAP32[(($fs2)>>2)];
      var $4=$fs_addr;
      var $prev=(($4+8)|0);
      HEAP32[(($prev)>>2)]=$3;
      var $5=$ls_addr;
      var $6=$fs_addr;
      var $ls3=(($6+12)|0);
      HEAP32[(($ls3)>>2)]=$5;
      var $7=$fs_addr;
      var $8=$ls_addr;
      var $fs4=(($8+36)|0);
      HEAP32[(($fs4)>>2)]=$7;
      var $9=$fs_addr;
      var $pc=(($9+20)|0);
      HEAP32[(($pc)>>2)]=0;
      var $10=$fs_addr;
      var $lasttarget=(($10+24)|0);
      HEAP32[(($lasttarget)>>2)]=0;
      var $11=$fs_addr;
      var $jpc=(($11+28)|0);
      HEAP32[(($jpc)>>2)]=-1;
      var $12=$fs_addr;
      var $freereg=(($12+48)|0);
      HEAP8[($freereg)]=0;
      var $13=$fs_addr;
      var $nk=(($13+32)|0);
      HEAP32[(($nk)>>2)]=0;
      var $14=$fs_addr;
      var $np=(($14+36)|0);
      HEAP32[(($np)>>2)]=0;
      var $15=$fs_addr;
      var $nups=(($15+47)|0);
      HEAP8[($nups)]=0;
      var $16=$fs_addr;
      var $nlocvars=(($16+44)|0);
      HEAP16[(($nlocvars)>>1)]=0;
      var $17=$fs_addr;
      var $nactvar=(($17+46)|0);
      HEAP8[($nactvar)]=0;
      var $18=$ls_addr;
      var $dyd=(($18+52)|0);
      var $19=HEAP32[(($dyd)>>2)];
      var $actvar=(($19)|0);
      var $n=(($actvar+4)|0);
      var $20=HEAP32[(($n)>>2)];
      var $21=$fs_addr;
      var $firstlocal=(($21+40)|0);
      HEAP32[(($firstlocal)>>2)]=$20;
      var $22=$fs_addr;
      var $bl5=(($22+16)|0);
      HEAP32[(($bl5)>>2)]=0;
      var $23=$fs_addr;
      var $f6=(($23)|0);
      var $24=HEAP32[(($f6)>>2)];
      $f=$24;
      var $25=$ls_addr;
      var $source=(($25+56)|0);
      var $26=HEAP32[(($source)>>2)];
      var $27=$f;
      var $source7=(($27+36)|0);
      HEAP32[(($source7)>>2)]=$26;
      var $28=$f;
      var $maxstacksize=(($28+78)|0);
      HEAP8[($maxstacksize)]=2;
      var $29=$L;
      var $call=_luaH_new($29);
      var $30=$fs_addr;
      var $h=(($30+4)|0);
      HEAP32[(($h)>>2)]=$call;
      var $31=$L;
      var $top=(($31+8)|0);
      var $32=HEAP32[(($top)>>2)];
      $io=$32;
      var $33=$fs_addr;
      var $h8=(($33+4)|0);
      var $34=HEAP32[(($h8)>>2)];
      var $35=$34;
      var $36=$io;
      var $value_=(($36)|0);
      var $gc=$value_;
      HEAP32[(($gc)>>2)]=$35;
      var $37=$io;
      var $tt_=(($37+8)|0);
      HEAP32[(($tt_)>>2)]=69;
      var $38=$L;
      var $top9=(($38+8)|0);
      var $39=HEAP32[(($top9)>>2)];
      var $incdec_ptr=(($39+12)|0);
      HEAP32[(($top9)>>2)]=$incdec_ptr;
      var $40=$L;
      var $stack_last=(($40+24)|0);
      var $41=HEAP32[(($stack_last)>>2)];
      var $42=$L;
      var $top10=(($42+8)|0);
      var $43=HEAP32[(($top10)>>2)];
      var $sub_ptr_lhs_cast=$41;
      var $sub_ptr_rhs_cast=$43;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(12))&-1);
      var $cmp=(($sub_ptr_div)|0) <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $44=$L;
      _luaD_growstack($44, 0);
      label = 5; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $45=$fs_addr;
      var $46=$bl_addr;
      _enterblock($45, $46, 0);

      return;
  }

}
_open_func["X"]=1;

function _newupvalue($fs, $name, $v) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $name_addr;
      var $v_addr;
      var $f;
      var $oldsize;
      $fs_addr=$fs;
      $name_addr=$name;
      $v_addr=$v;
      var $0=$fs_addr;
      var $f1=(($0)|0);
      var $1=HEAP32[(($f1)>>2)];
      $f=$1;
      var $2=$f;
      var $sizeupvalues=(($2+40)|0);
      var $3=HEAP32[(($sizeupvalues)>>2)];
      $oldsize=$3;
      var $4=$fs_addr;
      var $5=$fs_addr;
      var $nups=(($5+47)|0);
      var $6=HEAP8[($nups)];
      var $conv=(($6)&255);
      var $add=((($conv)+(1))|0);
      _checklimit($4, $add, 255, ((5249852)|0));
      var $7=$fs_addr;
      var $nups2=(($7+47)|0);
      var $8=HEAP8[($nups2)];
      var $conv3=(($8)&255);
      var $add4=((($conv3)+(1))|0);
      var $9=$f;
      var $sizeupvalues5=(($9+40)|0);
      var $10=HEAP32[(($sizeupvalues5)>>2)];
      var $cmp=(($add4)|0) > (($10)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $11=$fs_addr;
      var $ls=(($11+12)|0);
      var $12=HEAP32[(($ls)>>2)];
      var $L=(($12+40)|0);
      var $13=HEAP32[(($L)>>2)];
      var $14=$f;
      var $upvalues=(($14+28)|0);
      var $15=HEAP32[(($upvalues)>>2)];
      var $16=$15;
      var $17=$f;
      var $sizeupvalues7=(($17+40)|0);
      var $call=_luaM_growaux_($13, $16, $sizeupvalues7, 8, 255, ((5249852)|0));
      var $18=$call;
      var $19=$f;
      var $upvalues8=(($19+28)|0);
      HEAP32[(($upvalues8)>>2)]=$18;
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $20=$oldsize;
      var $21=$f;
      var $sizeupvalues9=(($21+40)|0);
      var $22=HEAP32[(($sizeupvalues9)>>2)];
      var $cmp10=(($20)|0) < (($22)|0);
      if ($cmp10) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $23=$oldsize;
      var $inc=((($23)+(1))|0);
      $oldsize=$inc;
      var $24=$f;
      var $upvalues12=(($24+28)|0);
      var $25=HEAP32[(($upvalues12)>>2)];
      var $arrayidx=(($25+($23<<3))|0);
      var $name13=(($arrayidx)|0);
      HEAP32[(($name13)>>2)]=0;
      label = 5; break;
    case 7: 
      var $26=$v_addr;
      var $k=(($26)|0);
      var $27=HEAP32[(($k)>>2)];
      var $cmp14=(($27)|0)==7;
      var $conv15=(($cmp14)&1);
      var $conv16=(($conv15) & 255);
      var $28=$fs_addr;
      var $nups17=(($28+47)|0);
      var $29=HEAP8[($nups17)];
      var $idxprom=(($29)&255);
      var $30=$f;
      var $upvalues18=(($30+28)|0);
      var $31=HEAP32[(($upvalues18)>>2)];
      var $arrayidx19=(($31+($idxprom<<3))|0);
      var $instack=(($arrayidx19+4)|0);
      HEAP8[($instack)]=$conv16;
      var $32=$v_addr;
      var $u=(($32+4)|0);
      var $info=$u;
      var $33=HEAP32[(($info)>>2)];
      var $conv20=(($33) & 255);
      var $34=$fs_addr;
      var $nups21=(($34+47)|0);
      var $35=HEAP8[($nups21)];
      var $idxprom22=(($35)&255);
      var $36=$f;
      var $upvalues23=(($36+28)|0);
      var $37=HEAP32[(($upvalues23)>>2)];
      var $arrayidx24=(($37+($idxprom22<<3))|0);
      var $idx=(($arrayidx24+5)|0);
      HEAP8[($idx)]=$conv20;
      var $38=$name_addr;
      var $39=$fs_addr;
      var $nups25=(($39+47)|0);
      var $40=HEAP8[($nups25)];
      var $idxprom26=(($40)&255);
      var $41=$f;
      var $upvalues27=(($41+28)|0);
      var $42=HEAP32[(($upvalues27)>>2)];
      var $arrayidx28=(($42+($idxprom26<<3))|0);
      var $name29=(($arrayidx28)|0);
      HEAP32[(($name29)>>2)]=$38;
      var $43=$name_addr;
      var $44=$43;
      var $gch=$44;
      var $marked=(($gch+5)|0);
      var $45=HEAP8[($marked)];
      var $conv30=(($45)&255);
      var $and=$conv30 & 3;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $46=$f;
      var $47=$46;
      var $gch31=$47;
      var $marked32=(($gch31+5)|0);
      var $48=HEAP8[($marked32)];
      var $conv33=(($48)&255);
      var $and34=$conv33 & 4;
      var $tobool35=(($and34)|0)!=0;
      if ($tobool35) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $49=$fs_addr;
      var $ls37=(($49+12)|0);
      var $50=HEAP32[(($ls37)>>2)];
      var $L38=(($50+40)|0);
      var $51=HEAP32[(($L38)>>2)];
      var $52=$f;
      var $53=$52;
      var $54=$name_addr;
      var $55=$54;
      _luaC_barrier_($51, $53, $55);
      label = 10; break;
    case 10: 
      var $56=$fs_addr;
      var $nups40=(($56+47)|0);
      var $57=HEAP8[($nups40)];
      var $inc41=((($57)+(1))&255);
      HEAP8[($nups40)]=$inc41;
      var $conv42=(($57)&255);

      return $conv42;
  }

}
_newupvalue["X"]=1;

function _statlist($ls) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      $ls_addr=$ls;
      label = 3; break;
    case 3: 
      var $0=$ls_addr;
      var $call=_block_follow($0, 1);
      var $tobool=(($call)|0)!=0;
      var $lnot=$tobool ^ 1;
      if ($lnot) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $1=$ls_addr;
      var $t=(($1+12)|0);
      var $token=(($t)|0);
      var $2=HEAP32[(($token)>>2)];
      var $cmp=(($2)|0)==274;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=$ls_addr;
      _statement($3);
      label = 7; break;
    case 6: 
      var $4=$ls_addr;
      _statement($4);
      label = 3; break;
    case 7: 

      return;
  }

}


function _check($ls, $c) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $c_addr;
      $ls_addr=$ls;
      $c_addr=$c;
      var $0=$ls_addr;
      var $t=(($0+12)|0);
      var $token=(($t)|0);
      var $1=HEAP32[(($token)>>2)];
      var $2=$c_addr;
      var $cmp=(($1)|0)!=(($2)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$ls_addr;
      var $4=$c_addr;
      _error_expected($3, $4);

    case 4: 

      return;
  }

}


function _close_func($ls) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $L;
      var $fs;
      var $f;
      $ls_addr=$ls;
      var $0=$ls_addr;
      var $L1=(($0+40)|0);
      var $1=HEAP32[(($L1)>>2)];
      $L=$1;
      var $2=$ls_addr;
      var $fs2=(($2+36)|0);
      var $3=HEAP32[(($fs2)>>2)];
      $fs=$3;
      var $4=$fs;
      var $f3=(($4)|0);
      var $5=HEAP32[(($f3)>>2)];
      $f=$5;
      var $6=$fs;
      _luaK_ret($6, 0, 0);
      var $7=$fs;
      _leaveblock($7);
      var $8=$fs;
      var $pc=(($8+20)|0);
      var $9=HEAP32[(($pc)>>2)];
      var $add=((($9)+(1))|0);
      var $cmp=(($add)>>>0) > 1073741823;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=$L;
      _luaM_toobig($10);

      label = 5; break;
    case 4: 
      var $12=$L;
      var $13=$f;
      var $code=(($13+12)|0);
      var $14=HEAP32[(($code)>>2)];
      var $15=$14;
      var $16=$f;
      var $sizecode=(($16+48)|0);
      var $17=HEAP32[(($sizecode)>>2)];
      var $mul=($17<<2);
      var $18=$fs;
      var $pc4=(($18+20)|0);
      var $19=HEAP32[(($pc4)>>2)];
      var $mul5=($19<<2);
      var $call=_luaM_realloc_($12, $15, $mul, $mul5);
      var $cond = $call;label = 5; break;
    case 5: 
      var $cond;
      var $20=$cond;
      var $21=$f;
      var $code6=(($21+12)|0);
      HEAP32[(($code6)>>2)]=$20;
      var $22=$fs;
      var $pc7=(($22+20)|0);
      var $23=HEAP32[(($pc7)>>2)];
      var $24=$f;
      var $sizecode8=(($24+48)|0);
      HEAP32[(($sizecode8)>>2)]=$23;
      var $25=$fs;
      var $pc9=(($25+20)|0);
      var $26=HEAP32[(($pc9)>>2)];
      var $add10=((($26)+(1))|0);
      var $cmp11=(($add10)>>>0) > 1073741823;
      if ($cmp11) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $27=$L;
      _luaM_toobig($27);

      label = 8; break;
    case 7: 
      var $29=$L;
      var $30=$f;
      var $lineinfo=(($30+20)|0);
      var $31=HEAP32[(($lineinfo)>>2)];
      var $32=$31;
      var $33=$f;
      var $sizelineinfo=(($33+52)|0);
      var $34=HEAP32[(($sizelineinfo)>>2)];
      var $mul14=($34<<2);
      var $35=$fs;
      var $pc15=(($35+20)|0);
      var $36=HEAP32[(($pc15)>>2)];
      var $mul16=($36<<2);
      var $call17=_luaM_realloc_($29, $32, $mul14, $mul16);
      var $cond19 = $call17;label = 8; break;
    case 8: 
      var $cond19;
      var $37=$cond19;
      var $38=$f;
      var $lineinfo20=(($38+20)|0);
      HEAP32[(($lineinfo20)>>2)]=$37;
      var $39=$fs;
      var $pc21=(($39+20)|0);
      var $40=HEAP32[(($pc21)>>2)];
      var $41=$f;
      var $sizelineinfo22=(($41+52)|0);
      HEAP32[(($sizelineinfo22)>>2)]=$40;
      var $42=$fs;
      var $nk=(($42+32)|0);
      var $43=HEAP32[(($nk)>>2)];
      var $add23=((($43)+(1))|0);
      var $cmp24=(($add23)>>>0) > 357913941;
      if ($cmp24) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $44=$L;
      _luaM_toobig($44);

      label = 11; break;
    case 10: 
      var $46=$L;
      var $47=$f;
      var $k=(($47+8)|0);
      var $48=HEAP32[(($k)>>2)];
      var $49=$48;
      var $50=$f;
      var $sizek=(($50+44)|0);
      var $51=HEAP32[(($sizek)>>2)];
      var $mul27=((($51)*(12))&-1);
      var $52=$fs;
      var $nk28=(($52+32)|0);
      var $53=HEAP32[(($nk28)>>2)];
      var $mul29=((($53)*(12))&-1);
      var $call30=_luaM_realloc_($46, $49, $mul27, $mul29);
      var $cond32 = $call30;label = 11; break;
    case 11: 
      var $cond32;
      var $54=$cond32;
      var $55=$f;
      var $k33=(($55+8)|0);
      HEAP32[(($k33)>>2)]=$54;
      var $56=$fs;
      var $nk34=(($56+32)|0);
      var $57=HEAP32[(($nk34)>>2)];
      var $58=$f;
      var $sizek35=(($58+44)|0);
      HEAP32[(($sizek35)>>2)]=$57;
      var $59=$fs;
      var $np=(($59+36)|0);
      var $60=HEAP32[(($np)>>2)];
      var $add36=((($60)+(1))|0);
      var $cmp37=(($add36)>>>0) > 1073741823;
      if ($cmp37) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $61=$L;
      _luaM_toobig($61);

      label = 14; break;
    case 13: 
      var $63=$L;
      var $64=$f;
      var $p=(($64+16)|0);
      var $65=HEAP32[(($p)>>2)];
      var $66=$65;
      var $67=$f;
      var $sizep=(($67+56)|0);
      var $68=HEAP32[(($sizep)>>2)];
      var $mul40=($68<<2);
      var $69=$fs;
      var $np41=(($69+36)|0);
      var $70=HEAP32[(($np41)>>2)];
      var $mul42=($70<<2);
      var $call43=_luaM_realloc_($63, $66, $mul40, $mul42);
      var $cond45 = $call43;label = 14; break;
    case 14: 
      var $cond45;
      var $71=$cond45;
      var $72=$f;
      var $p46=(($72+16)|0);
      HEAP32[(($p46)>>2)]=$71;
      var $73=$fs;
      var $np47=(($73+36)|0);
      var $74=HEAP32[(($np47)>>2)];
      var $75=$f;
      var $sizep48=(($75+56)|0);
      HEAP32[(($sizep48)>>2)]=$74;
      var $76=$fs;
      var $nlocvars=(($76+44)|0);
      var $77=HEAP16[(($nlocvars)>>1)];
      var $conv=(($77 << 16) >> 16);
      var $add49=((($conv)+(1))|0);
      var $cmp50=(($add49)>>>0) > 357913941;
      if ($cmp50) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $78=$L;
      _luaM_toobig($78);

      label = 17; break;
    case 16: 
      var $80=$L;
      var $81=$f;
      var $locvars=(($81+24)|0);
      var $82=HEAP32[(($locvars)>>2)];
      var $83=$82;
      var $84=$f;
      var $sizelocvars=(($84+60)|0);
      var $85=HEAP32[(($sizelocvars)>>2)];
      var $mul54=((($85)*(12))&-1);
      var $86=$fs;
      var $nlocvars55=(($86+44)|0);
      var $87=HEAP16[(($nlocvars55)>>1)];
      var $conv56=(($87 << 16) >> 16);
      var $mul57=((($conv56)*(12))&-1);
      var $call58=_luaM_realloc_($80, $83, $mul54, $mul57);
      var $cond60 = $call58;label = 17; break;
    case 17: 
      var $cond60;
      var $88=$cond60;
      var $89=$f;
      var $locvars61=(($89+24)|0);
      HEAP32[(($locvars61)>>2)]=$88;
      var $90=$fs;
      var $nlocvars62=(($90+44)|0);
      var $91=HEAP16[(($nlocvars62)>>1)];
      var $conv63=(($91 << 16) >> 16);
      var $92=$f;
      var $sizelocvars64=(($92+60)|0);
      HEAP32[(($sizelocvars64)>>2)]=$conv63;
      var $93=$fs;
      var $nups=(($93+47)|0);
      var $94=HEAP8[($nups)];
      var $conv65=(($94)&255);
      var $add66=((($conv65)+(1))|0);
      var $cmp67=(($add66)>>>0) > 536870911;
      if ($cmp67) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $95=$L;
      _luaM_toobig($95);

      label = 20; break;
    case 19: 
      var $97=$L;
      var $98=$f;
      var $upvalues=(($98+28)|0);
      var $99=HEAP32[(($upvalues)>>2)];
      var $100=$99;
      var $101=$f;
      var $sizeupvalues=(($101+40)|0);
      var $102=HEAP32[(($sizeupvalues)>>2)];
      var $mul71=($102<<3);
      var $103=$fs;
      var $nups72=(($103+47)|0);
      var $104=HEAP8[($nups72)];
      var $conv73=(($104)&255);
      var $mul74=($conv73<<3);
      var $call75=_luaM_realloc_($97, $100, $mul71, $mul74);
      var $cond77 = $call75;label = 20; break;
    case 20: 
      var $cond77;
      var $105=$cond77;
      var $106=$f;
      var $upvalues78=(($106+28)|0);
      HEAP32[(($upvalues78)>>2)]=$105;
      var $107=$fs;
      var $nups79=(($107+47)|0);
      var $108=HEAP8[($nups79)];
      var $conv80=(($108)&255);
      var $109=$f;
      var $sizeupvalues81=(($109+40)|0);
      HEAP32[(($sizeupvalues81)>>2)]=$conv80;
      var $110=$fs;
      var $prev=(($110+8)|0);
      var $111=HEAP32[(($prev)>>2)];
      var $112=$ls_addr;
      var $fs82=(($112+36)|0);
      HEAP32[(($fs82)>>2)]=$111;
      var $113=$ls_addr;
      _anchor_token($113);
      var $114=$L;
      var $top=(($114+8)|0);
      var $115=HEAP32[(($top)>>2)];
      var $incdec_ptr=((($115)-(12))|0);
      HEAP32[(($top)>>2)]=$incdec_ptr;
      var $116=$L;
      var $l_G=(($116+12)|0);
      var $117=HEAP32[(($l_G)>>2)];
      var $GCdebt=(($117+12)|0);
      var $118=HEAP32[(($GCdebt)>>2)];
      var $cmp83=(($118)|0) > 0;
      if ($cmp83) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $119=$L;
      _luaC_step($119);
      label = 22; break;
    case 22: 

      return;
  }

}
_close_func["X"]=1;

function _getlocvar($fs, $i) {
  var label = 0;


  var $fs_addr;
  var $i_addr;
  var $idx;
  $fs_addr=$fs;
  $i_addr=$i;
  var $0=$fs_addr;
  var $firstlocal=(($0+40)|0);
  var $1=HEAP32[(($firstlocal)>>2)];
  var $2=$i_addr;
  var $add=((($1)+($2))|0);
  var $3=$fs_addr;
  var $ls=(($3+12)|0);
  var $4=HEAP32[(($ls)>>2)];
  var $dyd=(($4+52)|0);
  var $5=HEAP32[(($dyd)>>2)];
  var $actvar=(($5)|0);
  var $arr=(($actvar)|0);
  var $6=HEAP32[(($arr)>>2)];
  var $arrayidx=(($6+($add<<1))|0);
  var $idx1=(($arrayidx)|0);
  var $7=HEAP16[(($idx1)>>1)];
  var $conv=(($7 << 16) >> 16);
  $idx=$conv;
  var $8=$idx;
  var $9=$fs_addr;
  var $f=(($9)|0);
  var $10=HEAP32[(($f)>>2)];
  var $locvars=(($10+24)|0);
  var $11=HEAP32[(($locvars)>>2)];
  var $arrayidx2=(($11+((($8)*(12))&-1))|0);

  return $arrayidx2;
}


function _block_follow($ls, $withuntil) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $ls_addr;
      var $withuntil_addr;
      $ls_addr=$ls;
      $withuntil_addr=$withuntil;
      var $0=$ls_addr;
      var $t=(($0+12)|0);
      var $token=(($t)|0);
      var $1=HEAP32[(($token)>>2)];
      if ((($1)|0)==260 | (($1)|0)==261 | (($1)|0)==262 | (($1)|0)==286) {
        label = 3; break;
      }
      else if ((($1)|0)==277) {
        label = 4; break;
      }
      else {
      label = 5; break;
      }
      
    case 3: 
      $retval=1;
      label = 6; break;
    case 4: 
      var $2=$withuntil_addr;
      $retval=$2;
      label = 6; break;
    case 5: 
      $retval=0;
      label = 6; break;
    case 6: 
      var $3=$retval;

      return $3;
  }

}


function _anchor_token($ls) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $ts;
      $ls_addr=$ls;
      var $0=$ls_addr;
      var $t=(($0+12)|0);
      var $token=(($t)|0);
      var $1=HEAP32[(($token)>>2)];
      var $cmp=(($1)|0)==288;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$ls_addr;
      var $t1=(($2+12)|0);
      var $token2=(($t1)|0);
      var $3=HEAP32[(($token2)>>2)];
      var $cmp3=(($3)|0)==289;
      if ($cmp3) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$ls_addr;
      var $t4=(($4+12)|0);
      var $seminfo=(($t4+4)|0);
      var $ts5=$seminfo;
      var $5=HEAP32[(($ts5)>>2)];
      $ts=$5;
      var $6=$ls_addr;
      var $7=$ts;
      var $add_ptr=(($7+16)|0);
      var $8=$add_ptr;
      var $9=$ts;
      var $tsv=$9;
      var $len=(($tsv+12)|0);
      var $10=HEAP32[(($len)>>2)];
      var $call=_luaX_newstring($6, $8, $10);
      label = 5; break;
    case 5: 

      return;
  }

}


function _breaklabel($ls) {
  var label = 0;


  var $ls_addr;
  var $n;
  var $l;
  $ls_addr=$ls;
  var $0=$ls_addr;
  var $L=(($0+40)|0);
  var $1=HEAP32[(($L)>>2)];
  var $call=_luaS_new($1, ((5249240)|0));
  $n=$call;
  var $2=$ls_addr;
  var $3=$ls_addr;
  var $dyd=(($3+52)|0);
  var $4=HEAP32[(($dyd)>>2)];
  var $label=(($4+24)|0);
  var $5=$n;
  var $6=$ls_addr;
  var $fs=(($6+36)|0);
  var $7=HEAP32[(($fs)>>2)];
  var $pc=(($7+20)|0);
  var $8=HEAP32[(($pc)>>2)];
  var $call1=_newlabelentry($2, $label, $5, 0, $8);
  $l=$call1;
  var $9=$ls_addr;
  var $10=$l;
  var $11=$ls_addr;
  var $dyd2=(($11+52)|0);
  var $12=HEAP32[(($dyd2)>>2)];
  var $label3=(($12+24)|0);
  var $arr=(($label3)|0);
  var $13=HEAP32[(($arr)>>2)];
  var $arrayidx=(($13+($10<<4))|0);
  _findgotos($9, $arrayidx);

  return;
}


function _removevars($fs, $tolevel) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $tolevel_addr;
      $fs_addr=$fs;
      $tolevel_addr=$tolevel;
      var $0=$fs_addr;
      var $nactvar=(($0+46)|0);
      var $1=HEAP8[($nactvar)];
      var $conv=(($1)&255);
      var $2=$tolevel_addr;
      var $sub=((($conv)-($2))|0);
      var $3=$fs_addr;
      var $ls=(($3+12)|0);
      var $4=HEAP32[(($ls)>>2)];
      var $dyd=(($4+52)|0);
      var $5=HEAP32[(($dyd)>>2)];
      var $actvar=(($5)|0);
      var $n=(($actvar+4)|0);
      var $6=HEAP32[(($n)>>2)];
      var $sub1=((($6)-($sub))|0);
      HEAP32[(($n)>>2)]=$sub1;
      label = 3; break;
    case 3: 
      var $7=$fs_addr;
      var $nactvar2=(($7+46)|0);
      var $8=HEAP8[($nactvar2)];
      var $conv3=(($8)&255);
      var $9=$tolevel_addr;
      var $cmp=(($conv3)|0) > (($9)|0);
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $10=$fs_addr;
      var $pc=(($10+20)|0);
      var $11=HEAP32[(($pc)>>2)];
      var $12=$fs_addr;
      var $13=$fs_addr;
      var $nactvar5=(($13+46)|0);
      var $14=HEAP8[($nactvar5)];
      var $dec=((($14)-(1))&255);
      HEAP8[($nactvar5)]=$dec;
      var $conv6=(($dec)&255);
      var $call=_getlocvar($12, $conv6);
      var $endpc=(($call+8)|0);
      HEAP32[(($endpc)>>2)]=$11;
      label = 3; break;
    case 5: 

      return;
  }

}


function _movegotosout($fs, $bl) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $bl_addr;
      var $i;
      var $gl;
      var $gt2;
      $fs_addr=$fs;
      $bl_addr=$bl;
      var $0=$bl_addr;
      var $firstgoto=(($0+6)|0);
      var $1=HEAP16[(($firstgoto)>>1)];
      var $conv=(($1 << 16) >> 16);
      $i=$conv;
      var $2=$fs_addr;
      var $ls=(($2+12)|0);
      var $3=HEAP32[(($ls)>>2)];
      var $dyd=(($3+52)|0);
      var $4=HEAP32[(($dyd)>>2)];
      var $gt=(($4+12)|0);
      $gl=$gt;
      label = 3; break;
    case 3: 
      var $5=$i;
      var $6=$gl;
      var $n=(($6+4)|0);
      var $7=HEAP32[(($n)>>2)];
      var $cmp=(($5)|0) < (($7)|0);
      if ($cmp) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $8=$i;
      var $9=$gl;
      var $arr=(($9)|0);
      var $10=HEAP32[(($arr)>>2)];
      var $arrayidx=(($10+($8<<4))|0);
      $gt2=$arrayidx;
      var $11=$gt2;
      var $nactvar=(($11+12)|0);
      var $12=HEAP8[($nactvar)];
      var $conv3=(($12)&255);
      var $13=$bl_addr;
      var $nactvar4=(($13+8)|0);
      var $14=HEAP8[($nactvar4)];
      var $conv5=(($14)&255);
      var $cmp6=(($conv3)|0) > (($conv5)|0);
      if ($cmp6) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $15=$bl_addr;
      var $upval=(($15+9)|0);
      var $16=HEAP8[($upval)];
      var $tobool=(($16 << 24) >> 24)!=0;
      if ($tobool) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $17=$fs_addr;
      var $18=$gt2;
      var $pc=(($18+4)|0);
      var $19=HEAP32[(($pc)>>2)];
      var $20=$bl_addr;
      var $nactvar9=(($20+8)|0);
      var $21=HEAP8[($nactvar9)];
      var $conv10=(($21)&255);
      _luaK_patchclose($17, $19, $conv10);
      label = 7; break;
    case 7: 
      var $22=$bl_addr;
      var $nactvar11=(($22+8)|0);
      var $23=HEAP8[($nactvar11)];
      var $24=$gt2;
      var $nactvar12=(($24+12)|0);
      HEAP8[($nactvar12)]=$23;
      label = 8; break;
    case 8: 
      var $25=$fs_addr;
      var $ls14=(($25+12)|0);
      var $26=HEAP32[(($ls14)>>2)];
      var $27=$i;
      var $call=_findlabel($26, $27);
      var $tobool15=(($call)|0)!=0;
      if ($tobool15) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $28=$i;
      var $inc=((($28)+(1))|0);
      $i=$inc;
      label = 10; break;
    case 10: 
      label = 3; break;
    case 11: 

      return;
  }

}
_movegotosout["X"]=1;

function _findlabel($ls, $g) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $ls_addr;
      var $g_addr;
      var $i;
      var $bl;
      var $dyd;
      var $gt;
      var $lb;
      $ls_addr=$ls;
      $g_addr=$g;
      var $0=$ls_addr;
      var $fs=(($0+36)|0);
      var $1=HEAP32[(($fs)>>2)];
      var $bl1=(($1+16)|0);
      var $2=HEAP32[(($bl1)>>2)];
      $bl=$2;
      var $3=$ls_addr;
      var $dyd2=(($3+52)|0);
      var $4=HEAP32[(($dyd2)>>2)];
      $dyd=$4;
      var $5=$g_addr;
      var $6=$dyd;
      var $gt3=(($6+12)|0);
      var $arr=(($gt3)|0);
      var $7=HEAP32[(($arr)>>2)];
      var $arrayidx=(($7+($5<<4))|0);
      $gt=$arrayidx;
      var $8=$bl;
      var $firstlabel=(($8+4)|0);
      var $9=HEAP16[(($firstlabel)>>1)];
      var $conv=(($9 << 16) >> 16);
      $i=$conv;
      label = 3; break;
    case 3: 
      var $10=$i;
      var $11=$dyd;
      var $label=(($11+24)|0);
      var $n=(($label+4)|0);
      var $12=HEAP32[(($n)>>2)];
      var $cmp=(($10)|0) < (($12)|0);
      if ($cmp) { label = 4; break; } else { label = 12; break; }
    case 4: 
      var $13=$i;
      var $14=$dyd;
      var $label5=(($14+24)|0);
      var $arr6=(($label5)|0);
      var $15=HEAP32[(($arr6)>>2)];
      var $arrayidx7=(($15+($13<<4))|0);
      $lb=$arrayidx7;
      var $16=$lb;
      var $name=(($16)|0);
      var $17=HEAP32[(($name)>>2)];
      var $18=$gt;
      var $name8=(($18)|0);
      var $19=HEAP32[(($name8)>>2)];
      var $call=_luaS_eqstr($17, $19);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 10; break; }
    case 5: 
      var $20=$gt;
      var $nactvar=(($20+12)|0);
      var $21=HEAP8[($nactvar)];
      var $conv9=(($21)&255);
      var $22=$lb;
      var $nactvar10=(($22+12)|0);
      var $23=HEAP8[($nactvar10)];
      var $conv11=(($23)&255);
      var $cmp12=(($conv9)|0) > (($conv11)|0);
      if ($cmp12) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $24=$bl;
      var $upval=(($24+9)|0);
      var $25=HEAP8[($upval)];
      var $conv14=(($25)&255);
      var $tobool15=(($conv14)|0)!=0;
      if ($tobool15) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $26=$dyd;
      var $label16=(($26+24)|0);
      var $n17=(($label16+4)|0);
      var $27=HEAP32[(($n17)>>2)];
      var $28=$bl;
      var $firstlabel18=(($28+4)|0);
      var $29=HEAP16[(($firstlabel18)>>1)];
      var $conv19=(($29 << 16) >> 16);
      var $cmp20=(($27)|0) > (($conv19)|0);
      if ($cmp20) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $30=$ls_addr;
      var $fs23=(($30+36)|0);
      var $31=HEAP32[(($fs23)>>2)];
      var $32=$gt;
      var $pc=(($32+4)|0);
      var $33=HEAP32[(($pc)>>2)];
      var $34=$lb;
      var $nactvar24=(($34+12)|0);
      var $35=HEAP8[($nactvar24)];
      var $conv25=(($35)&255);
      _luaK_patchclose($31, $33, $conv25);
      label = 9; break;
    case 9: 
      var $36=$ls_addr;
      var $37=$g_addr;
      var $38=$lb;
      _closegoto($36, $37, $38);
      $retval=1;
      label = 13; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $39=$i;
      var $inc=((($39)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 12: 
      $retval=0;
      label = 13; break;
    case 13: 
      var $40=$retval;

      return $40;
  }

}
_findlabel["X"]=1;

function _newlabelentry($ls, $l, $name, $line, $pc) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $l_addr;
      var $name_addr;
      var $line_addr;
      var $pc_addr;
      var $n;
      $ls_addr=$ls;
      $l_addr=$l;
      $name_addr=$name;
      $line_addr=$line;
      $pc_addr=$pc;
      var $0=$l_addr;
      var $n1=(($0+4)|0);
      var $1=HEAP32[(($n1)>>2)];
      $n=$1;
      var $2=$n;
      var $add=((($2)+(1))|0);
      var $3=$l_addr;
      var $size=(($3+8)|0);
      var $4=HEAP32[(($size)>>2)];
      var $cmp=(($add)|0) > (($4)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$ls_addr;
      var $L=(($5+40)|0);
      var $6=HEAP32[(($L)>>2)];
      var $7=$l_addr;
      var $arr=(($7)|0);
      var $8=HEAP32[(($arr)>>2)];
      var $9=$8;
      var $10=$l_addr;
      var $size2=(($10+8)|0);
      var $call=_luaM_growaux_($6, $9, $size2, 16, 32767, ((5247948)|0));
      var $11=$call;
      var $12=$l_addr;
      var $arr3=(($12)|0);
      HEAP32[(($arr3)>>2)]=$11;
      label = 4; break;
    case 4: 
      var $13=$name_addr;
      var $14=$n;
      var $15=$l_addr;
      var $arr4=(($15)|0);
      var $16=HEAP32[(($arr4)>>2)];
      var $arrayidx=(($16+($14<<4))|0);
      var $name5=(($arrayidx)|0);
      HEAP32[(($name5)>>2)]=$13;
      var $17=$line_addr;
      var $18=$n;
      var $19=$l_addr;
      var $arr6=(($19)|0);
      var $20=HEAP32[(($arr6)>>2)];
      var $arrayidx7=(($20+($18<<4))|0);
      var $line8=(($arrayidx7+8)|0);
      HEAP32[(($line8)>>2)]=$17;
      var $21=$ls_addr;
      var $fs=(($21+36)|0);
      var $22=HEAP32[(($fs)>>2)];
      var $nactvar=(($22+46)|0);
      var $23=HEAP8[($nactvar)];
      var $24=$n;
      var $25=$l_addr;
      var $arr9=(($25)|0);
      var $26=HEAP32[(($arr9)>>2)];
      var $arrayidx10=(($26+($24<<4))|0);
      var $nactvar11=(($arrayidx10+12)|0);
      HEAP8[($nactvar11)]=$23;
      var $27=$pc_addr;
      var $28=$n;
      var $29=$l_addr;
      var $arr12=(($29)|0);
      var $30=HEAP32[(($arr12)>>2)];
      var $arrayidx13=(($30+($28<<4))|0);
      var $pc14=(($arrayidx13+4)|0);
      HEAP32[(($pc14)>>2)]=$27;
      var $31=$l_addr;
      var $n15=(($31+4)|0);
      var $32=HEAP32[(($n15)>>2)];
      var $inc=((($32)+(1))|0);
      HEAP32[(($n15)>>2)]=$inc;
      var $33=$n;

      return $33;
  }

}
_newlabelentry["X"]=1;

function _findgotos($ls, $lb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $lb_addr;
      var $gl;
      var $i;
      $ls_addr=$ls;
      $lb_addr=$lb;
      var $0=$ls_addr;
      var $dyd=(($0+52)|0);
      var $1=HEAP32[(($dyd)>>2)];
      var $gt=(($1+12)|0);
      $gl=$gt;
      var $2=$ls_addr;
      var $fs=(($2+36)|0);
      var $3=HEAP32[(($fs)>>2)];
      var $bl=(($3+16)|0);
      var $4=HEAP32[(($bl)>>2)];
      var $firstgoto=(($4+6)|0);
      var $5=HEAP16[(($firstgoto)>>1)];
      var $conv=(($5 << 16) >> 16);
      $i=$conv;
      label = 3; break;
    case 3: 
      var $6=$i;
      var $7=$gl;
      var $n=(($7+4)|0);
      var $8=HEAP32[(($n)>>2)];
      var $cmp=(($6)|0) < (($8)|0);
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $9=$i;
      var $10=$gl;
      var $arr=(($10)|0);
      var $11=HEAP32[(($arr)>>2)];
      var $arrayidx=(($11+($9<<4))|0);
      var $name=(($arrayidx)|0);
      var $12=HEAP32[(($name)>>2)];
      var $13=$lb_addr;
      var $name2=(($13)|0);
      var $14=HEAP32[(($name2)>>2)];
      var $call=_luaS_eqstr($12, $14);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $15=$ls_addr;
      var $16=$i;
      var $17=$lb_addr;
      _closegoto($15, $16, $17);
      label = 7; break;
    case 6: 
      var $18=$i;
      var $inc=((($18)+(1))|0);
      $i=$inc;
      label = 7; break;
    case 7: 
      label = 3; break;
    case 8: 

      return;
  }

}
_findgotos["X"]=1;

function _leaveblock($fs) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $bl;
      var $ls;
      var $j;
      $fs_addr=$fs;
      var $0=$fs_addr;
      var $bl1=(($0+16)|0);
      var $1=HEAP32[(($bl1)>>2)];
      $bl=$1;
      var $2=$fs_addr;
      var $ls2=(($2+12)|0);
      var $3=HEAP32[(($ls2)>>2)];
      $ls=$3;
      var $4=$bl;
      var $previous=(($4)|0);
      var $5=HEAP32[(($previous)>>2)];
      var $tobool=(($5)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $6=$bl;
      var $upval=(($6+9)|0);
      var $7=HEAP8[($upval)];
      var $conv=(($7)&255);
      var $tobool3=(($conv)|0)!=0;
      if ($tobool3) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $8=$fs_addr;
      var $call=_luaK_jump($8);
      $j=$call;
      var $9=$fs_addr;
      var $10=$j;
      var $11=$bl;
      var $nactvar=(($11+8)|0);
      var $12=HEAP8[($nactvar)];
      var $conv4=(($12)&255);
      _luaK_patchclose($9, $10, $conv4);
      var $13=$fs_addr;
      var $14=$j;
      _luaK_patchtohere($13, $14);
      label = 5; break;
    case 5: 
      var $15=$bl;
      var $isloop=(($15+10)|0);
      var $16=HEAP8[($isloop)];
      var $tobool5=(($16 << 24) >> 24)!=0;
      if ($tobool5) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $17=$ls;
      _breaklabel($17);
      label = 7; break;
    case 7: 
      var $18=$bl;
      var $previous8=(($18)|0);
      var $19=HEAP32[(($previous8)>>2)];
      var $20=$fs_addr;
      var $bl9=(($20+16)|0);
      HEAP32[(($bl9)>>2)]=$19;
      var $21=$fs_addr;
      var $22=$bl;
      var $nactvar10=(($22+8)|0);
      var $23=HEAP8[($nactvar10)];
      var $conv11=(($23)&255);
      _removevars($21, $conv11);
      var $24=$fs_addr;
      var $nactvar12=(($24+46)|0);
      var $25=HEAP8[($nactvar12)];
      var $26=$fs_addr;
      var $freereg=(($26+48)|0);
      HEAP8[($freereg)]=$25;
      var $27=$bl;
      var $firstlabel=(($27+4)|0);
      var $28=HEAP16[(($firstlabel)>>1)];
      var $conv13=(($28 << 16) >> 16);
      var $29=$ls;
      var $dyd=(($29+52)|0);
      var $30=HEAP32[(($dyd)>>2)];
      var $label=(($30+24)|0);
      var $n=(($label+4)|0);
      HEAP32[(($n)>>2)]=$conv13;
      var $31=$bl;
      var $previous14=(($31)|0);
      var $32=HEAP32[(($previous14)>>2)];
      var $tobool15=(($32)|0)!=0;
      if ($tobool15) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $33=$fs_addr;
      var $34=$bl;
      _movegotosout($33, $34);
      label = 12; break;
    case 9: 
      var $35=$bl;
      var $firstgoto=(($35+6)|0);
      var $36=HEAP16[(($firstgoto)>>1)];
      var $conv17=(($36 << 16) >> 16);
      var $37=$ls;
      var $dyd18=(($37+52)|0);
      var $38=HEAP32[(($dyd18)>>2)];
      var $gt=(($38+12)|0);
      var $n19=(($gt+4)|0);
      var $39=HEAP32[(($n19)>>2)];
      var $cmp=(($conv17)|0) < (($39)|0);
      if ($cmp) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $40=$ls;
      var $41=$bl;
      var $firstgoto22=(($41+6)|0);
      var $42=HEAP16[(($firstgoto22)>>1)];
      var $idxprom=(($42 << 16) >> 16);
      var $43=$ls;
      var $dyd23=(($43+52)|0);
      var $44=HEAP32[(($dyd23)>>2)];
      var $gt24=(($44+12)|0);
      var $arr=(($gt24)|0);
      var $45=HEAP32[(($arr)>>2)];
      var $arrayidx=(($45+($idxprom<<4))|0);
      _undefgoto($40, $arrayidx);

    case 11: 
      label = 12; break;
    case 12: 

      return;
  }

}
_leaveblock["X"]=1;

function _undefgoto($ls, $gt) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $gt_addr;
      var $msg;
      $ls_addr=$ls;
      $gt_addr=$gt;
      var $0=$gt_addr;
      var $name=(($0)|0);
      var $1=HEAP32[(($name)>>2)];
      var $tsv=$1;
      var $tt=(($tsv+4)|0);
      var $2=HEAP8[($tt)];
      var $conv=(($2)&255);
      var $cmp=(($conv)|0)==4;
      if ($cmp) { label = 3; break; } else { var $6 = 0;label = 4; break; }
    case 3: 
      var $3=$gt_addr;
      var $name2=(($3)|0);
      var $4=HEAP32[(($name2)>>2)];
      var $tsv3=$4;
      var $extra=(($tsv3+6)|0);
      var $5=HEAP8[($extra)];
      var $conv4=(($5)&255);
      var $cmp5=(($conv4)|0) > 0;
      var $6 = $cmp5;label = 4; break;
    case 4: 
      var $6;
      var $cond=$6 ? (((5251780)|0)) : (((5253108)|0));
      $msg=$cond;
      var $7=$ls_addr;
      var $L=(($7+40)|0);
      var $8=HEAP32[(($L)>>2)];
      var $9=$msg;
      var $10=$gt_addr;
      var $name7=(($10)|0);
      var $11=HEAP32[(($name7)>>2)];
      var $add_ptr=(($11+16)|0);
      var $12=$add_ptr;
      var $13=$gt_addr;
      var $line=(($13+8)|0);
      var $14=HEAP32[(($line)>>2)];
      var $call=_luaO_pushfstring($8, $9, (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempInt)>>2)]=$12,HEAP32[(((tempInt)+(4))>>2)]=$14,tempInt));
      $msg=$call;
      var $15=$ls_addr;
      var $16=$msg;
      _semerror($15, $16);

    case 5: 
      STACKTOP = __stackBase__;
      return;
  }

}


function _semerror($ls, $msg) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $msg_addr;
      $ls_addr=$ls;
      $msg_addr=$msg;
      var $0=$ls_addr;
      var $t=(($0+12)|0);
      var $token=(($t)|0);
      HEAP32[(($token)>>2)]=0;
      var $1=$ls_addr;
      var $2=$msg_addr;
      _luaX_syntaxerror($1, $2);

    case 3: 

      return;
  }

}


function _closegoto($ls, $g, $label) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $g_addr;
      var $label_addr;
      var $i;
      var $fs;
      var $gl;
      var $gt2;
      var $vname;
      var $msg;
      $ls_addr=$ls;
      $g_addr=$g;
      $label_addr=$label;
      var $0=$ls_addr;
      var $fs1=(($0+36)|0);
      var $1=HEAP32[(($fs1)>>2)];
      $fs=$1;
      var $2=$ls_addr;
      var $dyd=(($2+52)|0);
      var $3=HEAP32[(($dyd)>>2)];
      var $gt=(($3+12)|0);
      $gl=$gt;
      var $4=$g_addr;
      var $5=$gl;
      var $arr=(($5)|0);
      var $6=HEAP32[(($arr)>>2)];
      var $arrayidx=(($6+($4<<4))|0);
      $gt2=$arrayidx;
      var $7=$gt2;
      var $nactvar=(($7+12)|0);
      var $8=HEAP8[($nactvar)];
      var $conv=(($8)&255);
      var $9=$label_addr;
      var $nactvar3=(($9+12)|0);
      var $10=HEAP8[($nactvar3)];
      var $conv4=(($10)&255);
      var $cmp=(($conv)|0) < (($conv4)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $11=$fs;
      var $12=$gt2;
      var $nactvar6=(($12+12)|0);
      var $13=HEAP8[($nactvar6)];
      var $conv7=(($13)&255);
      var $call=_getlocvar($11, $conv7);
      var $varname=(($call)|0);
      var $14=HEAP32[(($varname)>>2)];
      $vname=$14;
      var $15=$ls_addr;
      var $L=(($15+40)|0);
      var $16=HEAP32[(($L)>>2)];
      var $17=$gt2;
      var $name=(($17)|0);
      var $18=HEAP32[(($name)>>2)];
      var $add_ptr=(($18+16)|0);
      var $19=$add_ptr;
      var $20=$gt2;
      var $line=(($20+8)|0);
      var $21=HEAP32[(($line)>>2)];
      var $22=$vname;
      var $add_ptr8=(($22+16)|0);
      var $23=$add_ptr8;
      var $call9=_luaO_pushfstring($16, ((5251048)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 12),STACKTOP = (STACKTOP + 12)|0,HEAP32[((tempInt)>>2)]=$19,HEAP32[(((tempInt)+(4))>>2)]=$21,HEAP32[(((tempInt)+(8))>>2)]=$23,tempInt));
      $msg=$call9;
      var $24=$ls_addr;
      var $25=$msg;
      _semerror($24, $25);

    case 4: 
      var $26=$fs;
      var $27=$gt2;
      var $pc=(($27+4)|0);
      var $28=HEAP32[(($pc)>>2)];
      var $29=$label_addr;
      var $pc10=(($29+4)|0);
      var $30=HEAP32[(($pc10)>>2)];
      _luaK_patchlist($26, $28, $30);
      var $31=$g_addr;
      $i=$31;
      label = 5; break;
    case 5: 
      var $32=$i;
      var $33=$gl;
      var $n=(($33+4)|0);
      var $34=HEAP32[(($n)>>2)];
      var $sub=((($34)-(1))|0);
      var $cmp11=(($32)|0) < (($sub)|0);
      if ($cmp11) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $35=$i;
      var $36=$gl;
      var $arr13=(($36)|0);
      var $37=HEAP32[(($arr13)>>2)];
      var $arrayidx14=(($37+($35<<4))|0);
      var $38=$i;
      var $add=((($38)+(1))|0);
      var $39=$gl;
      var $arr15=(($39)|0);
      var $40=HEAP32[(($arr15)>>2)];
      var $arrayidx16=(($40+($add<<4))|0);
      var $41=$arrayidx14;
      var $42=$arrayidx16;
      HEAP32[(($41)>>2)]=HEAP32[(($42)>>2)];HEAP32[((($41)+(4))>>2)]=HEAP32[((($42)+(4))>>2)];HEAP32[((($41)+(8))>>2)]=HEAP32[((($42)+(8))>>2)];HEAP32[((($41)+(12))>>2)]=HEAP32[((($42)+(12))>>2)];
      label = 7; break;
    case 7: 
      var $43=$i;
      var $inc=((($43)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      var $44=$gl;
      var $n17=(($44+4)|0);
      var $45=HEAP32[(($n17)>>2)];
      var $dec=((($45)-(1))|0);
      HEAP32[(($n17)>>2)]=$dec;
      STACKTOP = __stackBase__;
      return;
  }

}
_closegoto["X"]=1;

function _error_expected($ls, $token) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $token_addr;
      $ls_addr=$ls;
      $token_addr=$token;
      var $0=$ls_addr;
      var $1=$ls_addr;
      var $L=(($1+40)|0);
      var $2=HEAP32[(($L)>>2)];
      var $3=$ls_addr;
      var $4=$token_addr;
      var $call=_luaX_token2str($3, $4);
      var $call1=_luaO_pushfstring($2, ((5246896)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$call,tempInt));
      _luaX_syntaxerror($0, $call1);

    case 3: 
      STACKTOP = __stackBase__;
      return;
  }

}


function _statement($ls) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $line;
      $ls_addr=$ls;
      var $0=$ls_addr;
      var $linenumber=(($0+4)|0);
      var $1=HEAP32[(($linenumber)>>2)];
      $line=$1;
      var $2=$ls_addr;
      _enterlevel($2);
      var $3=$ls_addr;
      var $t=(($3+12)|0);
      var $token=(($t)|0);
      var $4=HEAP32[(($token)>>2)];
      if ((($4)|0)==59) {
        label = 3; break;
      }
      else if ((($4)|0)==267) {
        label = 4; break;
      }
      else if ((($4)|0)==278) {
        label = 5; break;
      }
      else if ((($4)|0)==259) {
        label = 6; break;
      }
      else if ((($4)|0)==264) {
        label = 7; break;
      }
      else if ((($4)|0)==273) {
        label = 8; break;
      }
      else if ((($4)|0)==265) {
        label = 9; break;
      }
      else if ((($4)|0)==269) {
        label = 10; break;
      }
      else if ((($4)|0)==285) {
        label = 14; break;
      }
      else if ((($4)|0)==274) {
        label = 15; break;
      }
      else if ((($4)|0)==258 | (($4)|0)==266) {
        label = 16; break;
      }
      else {
      label = 17; break;
      }
      
    case 3: 
      var $5=$ls_addr;
      _luaX_next($5);
      label = 18; break;
    case 4: 
      var $6=$ls_addr;
      var $7=$line;
      _ifstat($6, $7);
      label = 18; break;
    case 5: 
      var $8=$ls_addr;
      var $9=$line;
      _whilestat($8, $9);
      label = 18; break;
    case 6: 
      var $10=$ls_addr;
      _luaX_next($10);
      var $11=$ls_addr;
      _block($11);
      var $12=$ls_addr;
      var $13=$line;
      _check_match($12, 262, 259, $13);
      label = 18; break;
    case 7: 
      var $14=$ls_addr;
      var $15=$line;
      _forstat($14, $15);
      label = 18; break;
    case 8: 
      var $16=$ls_addr;
      var $17=$line;
      _repeatstat($16, $17);
      label = 18; break;
    case 9: 
      var $18=$ls_addr;
      var $19=$line;
      _funcstat($18, $19);
      label = 18; break;
    case 10: 
      var $20=$ls_addr;
      _luaX_next($20);
      var $21=$ls_addr;
      var $call=_testnext($21, 265);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $22=$ls_addr;
      _localfunc($22);
      label = 13; break;
    case 12: 
      var $23=$ls_addr;
      _localstat($23);
      label = 13; break;
    case 13: 
      label = 18; break;
    case 14: 
      var $24=$ls_addr;
      _luaX_next($24);
      var $25=$ls_addr;
      var $26=$ls_addr;
      var $call9=_str_checkname($26);
      var $27=$line;
      _labelstat($25, $call9, $27);
      label = 18; break;
    case 15: 
      var $28=$ls_addr;
      _luaX_next($28);
      var $29=$ls_addr;
      _retstat($29);
      label = 18; break;
    case 16: 
      var $30=$ls_addr;
      var $31=$ls_addr;
      var $fs=(($31+36)|0);
      var $32=HEAP32[(($fs)>>2)];
      var $call12=_luaK_jump($32);
      _gotostat($30, $call12);
      label = 18; break;
    case 17: 
      var $33=$ls_addr;
      _exprstat($33);
      label = 18; break;
    case 18: 
      var $34=$ls_addr;
      var $fs13=(($34+36)|0);
      var $35=HEAP32[(($fs13)>>2)];
      var $nactvar=(($35+46)|0);
      var $36=HEAP8[($nactvar)];
      var $37=$ls_addr;
      var $fs14=(($37+36)|0);
      var $38=HEAP32[(($fs14)>>2)];
      var $freereg=(($38+48)|0);
      HEAP8[($freereg)]=$36;
      var $39=$ls_addr;
      var $L=(($39+40)|0);
      var $40=HEAP32[(($L)>>2)];
      var $nCcalls=(($40+38)|0);
      var $41=HEAP16[(($nCcalls)>>1)];
      var $dec=((($41)-(1))&65535);
      HEAP16[(($nCcalls)>>1)]=$dec;

      return;
  }

}
_statement["X"]=1;

function _enterlevel($ls) {
  var label = 0;


  var $ls_addr;
  var $L;
  $ls_addr=$ls;
  var $0=$ls_addr;
  var $L1=(($0+40)|0);
  var $1=HEAP32[(($L1)>>2)];
  $L=$1;
  var $2=$L;
  var $nCcalls=(($2+38)|0);
  var $3=HEAP16[(($nCcalls)>>1)];
  var $inc=((($3)+(1))&65535);
  HEAP16[(($nCcalls)>>1)]=$inc;
  var $4=$ls_addr;
  var $fs=(($4+36)|0);
  var $5=HEAP32[(($fs)>>2)];
  var $6=$L;
  var $nCcalls2=(($6+38)|0);
  var $7=HEAP16[(($nCcalls2)>>1)];
  var $conv=(($7)&65535);
  _checklimit($5, $conv, 200, ((5246152)|0));

  return;
}


function _ifstat($ls, $line) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $line_addr;
      var $fs;
      var $escapelist=__stackBase__;
      $ls_addr=$ls;
      $line_addr=$line;
      var $0=$ls_addr;
      var $fs1=(($0+36)|0);
      var $1=HEAP32[(($fs1)>>2)];
      $fs=$1;
      HEAP32[(($escapelist)>>2)]=-1;
      var $2=$ls_addr;
      _test_then_block($2, $escapelist);
      label = 3; break;
    case 3: 
      var $3=$ls_addr;
      var $t=(($3+12)|0);
      var $token=(($t)|0);
      var $4=HEAP32[(($token)>>2)];
      var $cmp=(($4)|0)==261;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $5=$ls_addr;
      _test_then_block($5, $escapelist);
      label = 3; break;
    case 5: 
      var $6=$ls_addr;
      var $call=_testnext($6, 260);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $7=$ls_addr;
      _block($7);
      label = 7; break;
    case 7: 
      var $8=$ls_addr;
      var $9=$line_addr;
      _check_match($8, 262, 267, $9);
      var $10=$fs;
      var $11=HEAP32[(($escapelist)>>2)];
      _luaK_patchtohere($10, $11);
      STACKTOP = __stackBase__;
      return;
  }

}


function _whilestat($ls, $line) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; _memset(__stackBase__, 0, 12);

  var $ls_addr;
  var $line_addr;
  var $fs;
  var $whileinit;
  var $condexit;
  var $bl=__stackBase__;
  $ls_addr=$ls;
  $line_addr=$line;
  var $0=$ls_addr;
  var $fs1=(($0+36)|0);
  var $1=HEAP32[(($fs1)>>2)];
  $fs=$1;
  var $2=$ls_addr;
  _luaX_next($2);
  var $3=$fs;
  var $call=_luaK_getlabel($3);
  $whileinit=$call;
  var $4=$ls_addr;
  var $call2=_cond($4);
  $condexit=$call2;
  var $5=$fs;
  _enterblock($5, $bl, 1);
  var $6=$ls_addr;
  _checknext($6, 259);
  var $7=$ls_addr;
  _block($7);
  var $8=$fs;
  var $9=$fs;
  var $call3=_luaK_jump($9);
  var $10=$whileinit;
  _luaK_patchlist($8, $call3, $10);
  var $11=$ls_addr;
  var $12=$line_addr;
  _check_match($11, 262, 278, $12);
  var $13=$fs;
  _leaveblock($13);
  var $14=$fs;
  var $15=$condexit;
  _luaK_patchtohere($14, $15);
  STACKTOP = __stackBase__;
  return;
}


function _block($ls) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; _memset(__stackBase__, 0, 12);

  var $ls_addr;
  var $fs;
  var $bl=__stackBase__;
  $ls_addr=$ls;
  var $0=$ls_addr;
  var $fs1=(($0+36)|0);
  var $1=HEAP32[(($fs1)>>2)];
  $fs=$1;
  var $2=$fs;
  _enterblock($2, $bl, 0);
  var $3=$ls_addr;
  _statlist($3);
  var $4=$fs;
  _leaveblock($4);
  STACKTOP = __stackBase__;
  return;
}


function _repeatstat($ls, $line) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; _memset(__stackBase__, 0, 24);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $line_addr;
      var $condexit;
      var $fs;
      var $repeat_init;
      var $bl1=__stackBase__;
      var $bl2=(__stackBase__)+(12);
      $ls_addr=$ls;
      $line_addr=$line;
      var $0=$ls_addr;
      var $fs1=(($0+36)|0);
      var $1=HEAP32[(($fs1)>>2)];
      $fs=$1;
      var $2=$fs;
      var $call=_luaK_getlabel($2);
      $repeat_init=$call;
      var $3=$fs;
      _enterblock($3, $bl1, 1);
      var $4=$fs;
      _enterblock($4, $bl2, 0);
      var $5=$ls_addr;
      _luaX_next($5);
      var $6=$ls_addr;
      _statlist($6);
      var $7=$ls_addr;
      var $8=$line_addr;
      _check_match($7, 277, 273, $8);
      var $9=$ls_addr;
      var $call2=_cond($9);
      $condexit=$call2;
      var $upval=(($bl2+9)|0);
      var $10=HEAP8[($upval)];
      var $tobool=(($10 << 24) >> 24)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $11=$fs;
      var $12=$condexit;
      var $nactvar=(($bl2+8)|0);
      var $13=HEAP8[($nactvar)];
      var $conv=(($13)&255);
      _luaK_patchclose($11, $12, $conv);
      label = 4; break;
    case 4: 
      var $14=$fs;
      _leaveblock($14);
      var $15=$fs;
      var $16=$condexit;
      var $17=$repeat_init;
      _luaK_patchlist($15, $16, $17);
      var $18=$fs;
      _leaveblock($18);
      STACKTOP = __stackBase__;
      return;
  }

}
_repeatstat["X"]=1;

function _funcstat($ls, $line) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; _memset(__stackBase__, 0, 40);

  var $ls_addr;
  var $line_addr;
  var $ismethod;
  var $v=__stackBase__;
  var $b=(__stackBase__)+(20);
  $ls_addr=$ls;
  $line_addr=$line;
  var $0=$ls_addr;
  _luaX_next($0);
  var $1=$ls_addr;
  var $call=_funcname($1, $v);
  $ismethod=$call;
  var $2=$ls_addr;
  var $3=$ismethod;
  var $4=$line_addr;
  _body($2, $b, $3, $4);
  var $5=$ls_addr;
  var $fs=(($5+36)|0);
  var $6=HEAP32[(($fs)>>2)];
  _luaK_storevar($6, $v, $b);
  var $7=$ls_addr;
  var $fs1=(($7+36)|0);
  var $8=HEAP32[(($fs1)>>2)];
  var $9=$line_addr;
  _luaK_fixline($8, $9);
  STACKTOP = __stackBase__;
  return;
}


function _testnext($ls, $c) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $ls_addr;
      var $c_addr;
      $ls_addr=$ls;
      $c_addr=$c;
      var $0=$ls_addr;
      var $t=(($0+12)|0);
      var $token=(($t)|0);
      var $1=HEAP32[(($token)>>2)];
      var $2=$c_addr;
      var $cmp=(($1)|0)==(($2)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$ls_addr;
      _luaX_next($3);
      $retval=1;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $4=$retval;

      return $4;
  }

}


function _localfunc($ls) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; _memset(__stackBase__, 0, 20);

  var $ls_addr;
  var $b=__stackBase__;
  var $fs;
  $ls_addr=$ls;
  var $0=$ls_addr;
  var $fs1=(($0+36)|0);
  var $1=HEAP32[(($fs1)>>2)];
  $fs=$1;
  var $2=$ls_addr;
  var $3=$ls_addr;
  var $call=_str_checkname($3);
  _new_localvar($2, $call);
  var $4=$ls_addr;
  _adjustlocalvars($4, 1);
  var $5=$ls_addr;
  var $6=$ls_addr;
  var $linenumber=(($6+4)|0);
  var $7=HEAP32[(($linenumber)>>2)];
  _body($5, $b, 0, $7);
  var $8=$fs;
  var $pc=(($8+20)|0);
  var $9=HEAP32[(($pc)>>2)];
  var $10=$fs;
  var $u=(($b+4)|0);
  var $info=$u;
  var $11=HEAP32[(($info)>>2)];
  var $call2=_getlocvar($10, $11);
  var $startpc=(($call2+4)|0);
  HEAP32[(($startpc)>>2)]=$9;
  STACKTOP = __stackBase__;
  return;
}


function _localstat($ls) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; _memset(__stackBase__, 0, 20);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $nvars;
      var $nexps;
      var $e=__stackBase__;
      $ls_addr=$ls;
      $nvars=0;
      label = 3; break;
    case 3: 
      var $0=$ls_addr;
      var $1=$ls_addr;
      var $call=_str_checkname($1);
      _new_localvar($0, $call);
      var $2=$nvars;
      var $inc=((($2)+(1))|0);
      $nvars=$inc;
      label = 4; break;
    case 4: 
      var $3=$ls_addr;
      var $call1=_testnext($3, 44);
      var $tobool=(($call1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 5; break; }
    case 5: 
      var $4=$ls_addr;
      var $call2=_testnext($4, 61);
      var $tobool3=(($call2)|0)!=0;
      if ($tobool3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $5=$ls_addr;
      var $call4=_explist($5, $e);
      $nexps=$call4;
      label = 8; break;
    case 7: 
      var $k=(($e)|0);
      HEAP32[(($k)>>2)]=0;
      $nexps=0;
      label = 8; break;
    case 8: 
      var $6=$ls_addr;
      var $7=$nvars;
      var $8=$nexps;
      _adjust_assign($6, $7, $8, $e);
      var $9=$ls_addr;
      var $10=$nvars;
      _adjustlocalvars($9, $10);
      STACKTOP = __stackBase__;
      return;
  }

}


function _labelstat($ls, $label, $line) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $label_addr;
      var $line_addr;
      var $fs;
      var $ll;
      var $l;
      $ls_addr=$ls;
      $label_addr=$label;
      $line_addr=$line;
      var $0=$ls_addr;
      var $fs1=(($0+36)|0);
      var $1=HEAP32[(($fs1)>>2)];
      $fs=$1;
      var $2=$ls_addr;
      var $dyd=(($2+52)|0);
      var $3=HEAP32[(($dyd)>>2)];
      var $label2=(($3+24)|0);
      $ll=$label2;
      var $4=$fs;
      var $5=$ll;
      var $6=$label_addr;
      _checkrepeated($4, $5, $6);
      var $7=$ls_addr;
      _checknext($7, 285);
      var $8=$ls_addr;
      var $9=$ll;
      var $10=$label_addr;
      var $11=$line_addr;
      var $12=$fs;
      var $pc=(($12+20)|0);
      var $13=HEAP32[(($pc)>>2)];
      var $call=_newlabelentry($8, $9, $10, $11, $13);
      $l=$call;
      var $14=$ls_addr;
      _skipnoopstat($14);
      var $15=$ls_addr;
      var $call3=_block_follow($15, 0);
      var $tobool=(($call3)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $16=$fs;
      var $bl=(($16+16)|0);
      var $17=HEAP32[(($bl)>>2)];
      var $nactvar=(($17+8)|0);
      var $18=HEAP8[($nactvar)];
      var $19=$l;
      var $20=$ll;
      var $arr=(($20)|0);
      var $21=HEAP32[(($arr)>>2)];
      var $arrayidx=(($21+($19<<4))|0);
      var $nactvar4=(($arrayidx+12)|0);
      HEAP8[($nactvar4)]=$18;
      label = 4; break;
    case 4: 
      var $22=$ls_addr;
      var $23=$l;
      var $24=$ll;
      var $arr5=(($24)|0);
      var $25=HEAP32[(($arr5)>>2)];
      var $arrayidx6=(($25+($23<<4))|0);
      _findgotos($22, $arrayidx6);

      return;
  }

}
_labelstat["X"]=1;

function _str_checkname($ls) {
  var label = 0;


  var $ls_addr;
  var $ts;
  $ls_addr=$ls;
  var $0=$ls_addr;
  _check($0, 288);
  var $1=$ls_addr;
  var $t=(($1+12)|0);
  var $seminfo=(($t+4)|0);
  var $ts1=$seminfo;
  var $2=HEAP32[(($ts1)>>2)];
  $ts=$2;
  var $3=$ls_addr;
  _luaX_next($3);
  var $4=$ts;

  return $4;
}


function _retstat($ls) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; _memset(__stackBase__, 0, 20);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $fs;
      var $e=__stackBase__;
      var $first;
      var $nret;
      $ls_addr=$ls;
      var $0=$ls_addr;
      var $fs1=(($0+36)|0);
      var $1=HEAP32[(($fs1)>>2)];
      $fs=$1;
      var $2=$ls_addr;
      var $call=_block_follow($2, 1);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $3=$ls_addr;
      var $t=(($3+12)|0);
      var $token=(($t)|0);
      var $4=HEAP32[(($token)>>2)];
      var $cmp=(($4)|0)==59;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $nret=0;
      $first=0;
      label = 16; break;
    case 5: 
      var $5=$ls_addr;
      var $call2=_explist($5, $e);
      $nret=$call2;
      var $k=(($e)|0);
      var $6=HEAP32[(($k)>>2)];
      var $cmp3=(($6)|0)==12;
      if ($cmp3) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $k5=(($e)|0);
      var $7=HEAP32[(($k5)>>2)];
      var $cmp6=(($7)|0)==13;
      if ($cmp6) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $8=$fs;
      _luaK_setreturns($8, $e, -1);
      var $k8=(($e)|0);
      var $9=HEAP32[(($k8)>>2)];
      var $cmp9=(($9)|0)==12;
      if ($cmp9) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $10=$nret;
      var $cmp10=(($10)|0)==1;
      if ($cmp10) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $u=(($e+4)|0);
      var $info=$u;
      var $11=HEAP32[(($info)>>2)];
      var $12=$fs;
      var $f=(($12)|0);
      var $13=HEAP32[(($f)>>2)];
      var $code=(($13+12)|0);
      var $14=HEAP32[(($code)>>2)];
      var $arrayidx=(($14+($11<<2))|0);
      var $15=HEAP32[(($arrayidx)>>2)];
      var $and=$15 & -64;
      var $or=$and | 30;
      var $u12=(($e+4)|0);
      var $info13=$u12;
      var $16=HEAP32[(($info13)>>2)];
      var $17=$fs;
      var $f14=(($17)|0);
      var $18=HEAP32[(($f14)>>2)];
      var $code15=(($18+12)|0);
      var $19=HEAP32[(($code15)>>2)];
      var $arrayidx16=(($19+($16<<2))|0);
      HEAP32[(($arrayidx16)>>2)]=$or;
      label = 10; break;
    case 10: 
      var $20=$fs;
      var $nactvar=(($20+46)|0);
      var $21=HEAP8[($nactvar)];
      var $conv=(($21)&255);
      $first=$conv;
      $nret=-1;
      label = 15; break;
    case 11: 
      var $22=$nret;
      var $cmp18=(($22)|0)==1;
      if ($cmp18) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $23=$fs;
      var $call21=_luaK_exp2anyreg($23, $e);
      $first=$call21;
      label = 14; break;
    case 13: 
      var $24=$fs;
      _luaK_exp2nextreg($24, $e);
      var $25=$fs;
      var $nactvar23=(($25+46)|0);
      var $26=HEAP8[($nactvar23)];
      var $conv24=(($26)&255);
      $first=$conv24;
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $27=$fs;
      var $28=$first;
      var $29=$nret;
      _luaK_ret($27, $28, $29);
      var $30=$ls_addr;
      var $call28=_testnext($30, 59);
      STACKTOP = __stackBase__;
      return;
  }

}
_retstat["X"]=1;

function _gotostat($ls, $pc) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $pc_addr;
      var $line;
      var $label;
      var $g;
      $ls_addr=$ls;
      $pc_addr=$pc;
      var $0=$ls_addr;
      var $linenumber=(($0+4)|0);
      var $1=HEAP32[(($linenumber)>>2)];
      $line=$1;
      var $2=$ls_addr;
      var $call=_testnext($2, 266);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$ls_addr;
      var $call1=_str_checkname($3);
      $label=$call1;
      label = 5; break;
    case 4: 
      var $4=$ls_addr;
      _luaX_next($4);
      var $5=$ls_addr;
      var $L=(($5+40)|0);
      var $6=HEAP32[(($L)>>2)];
      var $call2=_luaS_new($6, ((5249240)|0));
      $label=$call2;
      label = 5; break;
    case 5: 
      var $7=$ls_addr;
      var $8=$ls_addr;
      var $dyd=(($8+52)|0);
      var $9=HEAP32[(($dyd)>>2)];
      var $gt=(($9+12)|0);
      var $10=$label;
      var $11=$line;
      var $12=$pc_addr;
      var $call3=_newlabelentry($7, $gt, $10, $11, $12);
      $g=$call3;
      var $13=$ls_addr;
      var $14=$g;
      var $call4=_findlabel($13, $14);

      return;
  }

}


function _check_match($ls, $what, $who, $where) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $what_addr;
      var $who_addr;
      var $where_addr;
      $ls_addr=$ls;
      $what_addr=$what;
      $who_addr=$who;
      $where_addr=$where;
      var $0=$ls_addr;
      var $1=$what_addr;
      var $call=_testnext($0, $1);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 3; break; }
    case 3: 
      var $2=$where_addr;
      var $3=$ls_addr;
      var $linenumber=(($3+4)|0);
      var $4=HEAP32[(($linenumber)>>2)];
      var $cmp=(($2)|0)==(($4)|0);
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $5=$ls_addr;
      var $6=$what_addr;
      _error_expected($5, $6);

    case 5: 
      var $7=$ls_addr;
      var $8=$ls_addr;
      var $L=(($8+40)|0);
      var $9=HEAP32[(($L)>>2)];
      var $10=$ls_addr;
      var $11=$what_addr;
      var $call2=_luaX_token2str($10, $11);
      var $12=$ls_addr;
      var $13=$who_addr;
      var $call3=_luaX_token2str($12, $13);
      var $14=$where_addr;
      var $call4=_luaO_pushfstring($9, ((5249996)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 12),STACKTOP = (STACKTOP + 12)|0,HEAP32[((tempInt)>>2)]=$call2,HEAP32[(((tempInt)+(4))>>2)]=$call3,HEAP32[(((tempInt)+(8))>>2)]=$14,tempInt));
      _luaX_syntaxerror($7, $call4);

    case 6: 
      STACKTOP = __stackBase__;
      return;
  }

}


function _forstat($ls, $line) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; _memset(__stackBase__, 0, 12);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $line_addr;
      var $fs;
      var $varname;
      var $bl=__stackBase__;
      $ls_addr=$ls;
      $line_addr=$line;
      var $0=$ls_addr;
      var $fs1=(($0+36)|0);
      var $1=HEAP32[(($fs1)>>2)];
      $fs=$1;
      var $2=$fs;
      _enterblock($2, $bl, 1);
      var $3=$ls_addr;
      _luaX_next($3);
      var $4=$ls_addr;
      var $call=_str_checkname($4);
      $varname=$call;
      var $5=$ls_addr;
      var $t=(($5+12)|0);
      var $token=(($t)|0);
      var $6=HEAP32[(($token)>>2)];
      if ((($6)|0)==61) {
        label = 3; break;
      }
      else if ((($6)|0)==44 | (($6)|0)==268) {
        label = 4; break;
      }
      else {
      label = 5; break;
      }
      
    case 3: 
      var $7=$ls_addr;
      var $8=$varname;
      var $9=$line_addr;
      _fornum($7, $8, $9);
      label = 6; break;
    case 4: 
      var $10=$ls_addr;
      var $11=$varname;
      _forlist($10, $11);
      label = 6; break;
    case 5: 
      var $12=$ls_addr;
      _luaX_syntaxerror($12, ((5251400)|0));

    case 6: 
      var $13=$ls_addr;
      var $14=$line_addr;
      _check_match($13, 262, 264, $14);
      var $15=$fs;
      _leaveblock($15);
      STACKTOP = __stackBase__;
      return;
  }

}


function _exprstat($ls) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; _memset(__stackBase__, 0, 24);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $fs;
      var $v=__stackBase__;
      $ls_addr=$ls;
      var $0=$ls_addr;
      var $fs1=(($0+36)|0);
      var $1=HEAP32[(($fs1)>>2)];
      $fs=$1;
      var $2=$ls_addr;
      var $v2=(($v+4)|0);
      _suffixedexp($2, $v2);
      var $3=$ls_addr;
      var $t=(($3+12)|0);
      var $token=(($t)|0);
      var $4=HEAP32[(($token)>>2)];
      var $cmp=(($4)|0)==61;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $5=$ls_addr;
      var $t3=(($5+12)|0);
      var $token4=(($t3)|0);
      var $6=HEAP32[(($token4)>>2)];
      var $cmp5=(($6)|0)==44;
      if ($cmp5) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $prev=(($v)|0);
      HEAP32[(($prev)>>2)]=0;
      var $7=$ls_addr;
      _assignment($7, $v, 1);
      label = 8; break;
    case 5: 
      var $v6=(($v+4)|0);
      var $k=(($v6)|0);
      var $8=HEAP32[(($k)>>2)];
      var $cmp7=(($8)|0)==12;
      if ($cmp7) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $9=$ls_addr;
      _luaX_syntaxerror($9, ((5246576)|0));

    case 7: 
      var $v9=(($v+4)|0);
      var $u=(($v9+4)|0);
      var $info=$u;
      var $10=HEAP32[(($info)>>2)];
      var $11=$fs;
      var $f=(($11)|0);
      var $12=HEAP32[(($f)>>2)];
      var $code=(($12+12)|0);
      var $13=HEAP32[(($code)>>2)];
      var $arrayidx=(($13+($10<<2))|0);
      var $14=HEAP32[(($arrayidx)>>2)];
      var $and=$14 & -8372225;
      var $or=$and | 16384;
      var $v10=(($v+4)|0);
      var $u11=(($v10+4)|0);
      var $info12=$u11;
      var $15=HEAP32[(($info12)>>2)];
      var $16=$fs;
      var $f13=(($16)|0);
      var $17=HEAP32[(($f13)>>2)];
      var $code14=(($17+12)|0);
      var $18=HEAP32[(($code14)>>2)];
      var $arrayidx15=(($18+($15<<2))|0);
      HEAP32[(($arrayidx15)>>2)]=$or;
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
  }

}
_exprstat["X"]=1;

function _getunopr($op) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $op_addr;
      $op_addr=$op;
      var $0=$op_addr;
      if ((($0)|0)==271) {
        label = 3; break;
      }
      else if ((($0)|0)==45) {
        label = 4; break;
      }
      else if ((($0)|0)==35) {
        label = 5; break;
      }
      else {
      label = 6; break;
      }
      
    case 3: 
      $retval=1;
      label = 7; break;
    case 4: 
      $retval=0;
      label = 7; break;
    case 5: 
      $retval=2;
      label = 7; break;
    case 6: 
      $retval=3;
      label = 7; break;
    case 7: 
      var $1=$retval;

      return $1;
  }

}


function _getbinopr($op) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $op_addr;
      $op_addr=$op;
      var $0=$op_addr;
      if ((($0)|0)==43) {
        label = 3; break;
      }
      else if ((($0)|0)==45) {
        label = 4; break;
      }
      else if ((($0)|0)==42) {
        label = 5; break;
      }
      else if ((($0)|0)==47) {
        label = 6; break;
      }
      else if ((($0)|0)==37) {
        label = 7; break;
      }
      else if ((($0)|0)==94) {
        label = 8; break;
      }
      else if ((($0)|0)==279) {
        label = 9; break;
      }
      else if ((($0)|0)==284) {
        label = 10; break;
      }
      else if ((($0)|0)==281) {
        label = 11; break;
      }
      else if ((($0)|0)==60) {
        label = 12; break;
      }
      else if ((($0)|0)==283) {
        label = 13; break;
      }
      else if ((($0)|0)==62) {
        label = 14; break;
      }
      else if ((($0)|0)==282) {
        label = 15; break;
      }
      else if ((($0)|0)==257) {
        label = 16; break;
      }
      else if ((($0)|0)==272) {
        label = 17; break;
      }
      else {
      label = 18; break;
      }
      
    case 3: 
      $retval=0;
      label = 19; break;
    case 4: 
      $retval=1;
      label = 19; break;
    case 5: 
      $retval=2;
      label = 19; break;
    case 6: 
      $retval=3;
      label = 19; break;
    case 7: 
      $retval=4;
      label = 19; break;
    case 8: 
      $retval=5;
      label = 19; break;
    case 9: 
      $retval=6;
      label = 19; break;
    case 10: 
      $retval=10;
      label = 19; break;
    case 11: 
      $retval=7;
      label = 19; break;
    case 12: 
      $retval=8;
      label = 19; break;
    case 13: 
      $retval=9;
      label = 19; break;
    case 14: 
      $retval=11;
      label = 19; break;
    case 15: 
      $retval=12;
      label = 19; break;
    case 16: 
      $retval=13;
      label = 19; break;
    case 17: 
      $retval=14;
      label = 19; break;
    case 18: 
      $retval=15;
      label = 19; break;
    case 19: 
      var $1=$retval;

      return $1;
  }

}


function _suffixedexp($ls, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; _memset(__stackBase__, 0, 40);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $v_addr;
      var $fs;
      var $line;
      var $key=__stackBase__;
      var $key4=(__stackBase__)+(20);
      $ls_addr=$ls;
      $v_addr=$v;
      var $0=$ls_addr;
      var $fs1=(($0+36)|0);
      var $1=HEAP32[(($fs1)>>2)];
      $fs=$1;
      var $2=$ls_addr;
      var $linenumber=(($2+4)|0);
      var $3=HEAP32[(($linenumber)>>2)];
      $line=$3;
      var $4=$ls_addr;
      var $5=$v_addr;
      _primaryexp($4, $5);
      label = 3; break;
    case 3: 
      var $6=$ls_addr;
      var $t=(($6+12)|0);
      var $token=(($t)|0);
      var $7=HEAP32[(($token)>>2)];
      if ((($7)|0)==46) {
        label = 4; break;
      }
      else if ((($7)|0)==91) {
        label = 5; break;
      }
      else if ((($7)|0)==58) {
        label = 6; break;
      }
      else if ((($7)|0)==40 | (($7)|0)==289 | (($7)|0)==123) {
        label = 7; break;
      }
      else {
      label = 8; break;
      }
      
    case 4: 
      var $8=$ls_addr;
      var $9=$v_addr;
      _fieldsel($8, $9);
      label = 9; break;
    case 5: 
      var $10=$fs;
      var $11=$v_addr;
      _luaK_exp2anyregup($10, $11);
      var $12=$ls_addr;
      _yindex($12, $key);
      var $13=$fs;
      var $14=$v_addr;
      _luaK_indexed($13, $14, $key);
      label = 9; break;
    case 6: 
      var $15=$ls_addr;
      _luaX_next($15);
      var $16=$ls_addr;
      _checkname($16, $key4);
      var $17=$fs;
      var $18=$v_addr;
      _luaK_self($17, $18, $key4);
      var $19=$ls_addr;
      var $20=$v_addr;
      var $21=$line;
      _funcargs($19, $20, $21);
      label = 9; break;
    case 7: 
      var $22=$fs;
      var $23=$v_addr;
      _luaK_exp2nextreg($22, $23);
      var $24=$ls_addr;
      var $25=$v_addr;
      var $26=$line;
      _funcargs($24, $25, $26);
      label = 9; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    case 9: 
      label = 3; break;
  }

}
_suffixedexp["X"]=1;

function _check_conflict($ls, $lh, $v) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $lh_addr;
      var $v_addr;
      var $fs;
      var $extra;
      var $conflict;
      var $op;
      $ls_addr=$ls;
      $lh_addr=$lh;
      $v_addr=$v;
      var $0=$ls_addr;
      var $fs1=(($0+36)|0);
      var $1=HEAP32[(($fs1)>>2)];
      $fs=$1;
      var $2=$fs;
      var $freereg=(($2+48)|0);
      var $3=HEAP8[($freereg)];
      var $conv=(($3)&255);
      $extra=$conv;
      $conflict=0;
      label = 3; break;
    case 3: 
      var $4=$lh_addr;
      var $tobool=(($4)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 14; break; }
    case 4: 
      var $5=$lh_addr;
      var $v2=(($5+4)|0);
      var $k=(($v2)|0);
      var $6=HEAP32[(($k)>>2)];
      var $cmp=(($6)|0)==9;
      if ($cmp) { label = 5; break; } else { label = 12; break; }
    case 5: 
      var $7=$lh_addr;
      var $v4=(($7+4)|0);
      var $u=(($v4+4)|0);
      var $ind=$u;
      var $vt=(($ind+3)|0);
      var $8=HEAP8[($vt)];
      var $conv5=(($8)&255);
      var $9=$v_addr;
      var $k6=(($9)|0);
      var $10=HEAP32[(($k6)>>2)];
      var $cmp7=(($conv5)|0)==(($10)|0);
      if ($cmp7) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $11=$lh_addr;
      var $v9=(($11+4)|0);
      var $u10=(($v9+4)|0);
      var $ind11=$u10;
      var $t=(($ind11+2)|0);
      var $12=HEAP8[($t)];
      var $conv12=(($12)&255);
      var $13=$v_addr;
      var $u13=(($13+4)|0);
      var $info=$u13;
      var $14=HEAP32[(($info)>>2)];
      var $cmp14=(($conv12)|0)==(($14)|0);
      if ($cmp14) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $conflict=1;
      var $15=$lh_addr;
      var $v17=(($15+4)|0);
      var $u18=(($v17+4)|0);
      var $ind19=$u18;
      var $vt20=(($ind19+3)|0);
      HEAP8[($vt20)]=7;
      var $16=$extra;
      var $conv21=(($16) & 255);
      var $17=$lh_addr;
      var $v22=(($17+4)|0);
      var $u23=(($v22+4)|0);
      var $ind24=$u23;
      var $t25=(($ind24+2)|0);
      HEAP8[($t25)]=$conv21;
      label = 8; break;
    case 8: 
      var $18=$v_addr;
      var $k26=(($18)|0);
      var $19=HEAP32[(($k26)>>2)];
      var $cmp27=(($19)|0)==7;
      if ($cmp27) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $20=$lh_addr;
      var $v30=(($20+4)|0);
      var $u31=(($v30+4)|0);
      var $ind32=$u31;
      var $idx=(($ind32)|0);
      var $21=HEAP16[(($idx)>>1)];
      var $conv33=(($21 << 16) >> 16);
      var $22=$v_addr;
      var $u34=(($22+4)|0);
      var $info35=$u34;
      var $23=HEAP32[(($info35)>>2)];
      var $cmp36=(($conv33)|0)==(($23)|0);
      if ($cmp36) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $conflict=1;
      var $24=$extra;
      var $conv39=(($24) & 65535);
      var $25=$lh_addr;
      var $v40=(($25+4)|0);
      var $u41=(($v40+4)|0);
      var $ind42=$u41;
      var $idx43=(($ind42)|0);
      HEAP16[(($idx43)>>1)]=$conv39;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $26=$lh_addr;
      var $prev=(($26)|0);
      var $27=HEAP32[(($prev)>>2)];
      $lh_addr=$27;
      label = 3; break;
    case 14: 
      var $28=$conflict;
      var $tobool46=(($28)|0)!=0;
      if ($tobool46) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $29=$v_addr;
      var $k48=(($29)|0);
      var $30=HEAP32[(($k48)>>2)];
      var $cmp49=(($30)|0)==7;
      var $cond=$cmp49 ? 0 : 5;
      $op=$cond;
      var $31=$fs;
      var $32=$op;
      var $33=$extra;
      var $34=$v_addr;
      var $u51=(($34+4)|0);
      var $info52=$u51;
      var $35=HEAP32[(($info52)>>2)];
      var $call=_luaK_codeABC($31, $32, $33, $35, 0);
      var $36=$fs;
      _luaK_reserveregs($36, 1);
      label = 16; break;
    case 16: 

      return;
  }

}
_check_conflict["X"]=1;

function _checknext($ls, $c) {
  var label = 0;


  var $ls_addr;
  var $c_addr;
  $ls_addr=$ls;
  $c_addr=$c;
  var $0=$ls_addr;
  var $1=$c_addr;
  _check($0, $1);
  var $2=$ls_addr;
  _luaX_next($2);

  return;
}


function _explist($ls, $v) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $v_addr;
      var $n;
      $ls_addr=$ls;
      $v_addr=$v;
      $n=1;
      var $0=$ls_addr;
      var $1=$v_addr;
      _expr($0, $1);
      label = 3; break;
    case 3: 
      var $2=$ls_addr;
      var $call=_testnext($2, 44);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$ls_addr;
      var $fs=(($3+36)|0);
      var $4=HEAP32[(($fs)>>2)];
      var $5=$v_addr;
      _luaK_exp2nextreg($4, $5);
      var $6=$ls_addr;
      var $7=$v_addr;
      _expr($6, $7);
      var $8=$n;
      var $inc=((($8)+(1))|0);
      $n=$inc;
      label = 3; break;
    case 5: 
      var $9=$n;

      return $9;
  }

}


function _adjust_assign($ls, $nvars, $nexps, $e) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $nvars_addr;
      var $nexps_addr;
      var $e_addr;
      var $fs;
      var $extra;
      var $reg;
      $ls_addr=$ls;
      $nvars_addr=$nvars;
      $nexps_addr=$nexps;
      $e_addr=$e;
      var $0=$ls_addr;
      var $fs1=(($0+36)|0);
      var $1=HEAP32[(($fs1)>>2)];
      $fs=$1;
      var $2=$nvars_addr;
      var $3=$nexps_addr;
      var $sub=((($2)-($3))|0);
      $extra=$sub;
      var $4=$e_addr;
      var $k=(($4)|0);
      var $5=HEAP32[(($k)>>2)];
      var $cmp=(($5)|0)==12;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $6=$e_addr;
      var $k2=(($6)|0);
      var $7=HEAP32[(($k2)>>2)];
      var $cmp3=(($7)|0)==13;
      if ($cmp3) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $8=$extra;
      var $inc=((($8)+(1))|0);
      $extra=$inc;
      var $9=$extra;
      var $cmp4=(($9)|0) < 0;
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $extra=0;
      label = 6; break;
    case 6: 
      var $10=$fs;
      var $11=$e_addr;
      var $12=$extra;
      _luaK_setreturns($10, $11, $12);
      var $13=$extra;
      var $cmp6=(($13)|0) > 1;
      if ($cmp6) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $14=$fs;
      var $15=$extra;
      var $sub8=((($15)-(1))|0);
      _luaK_reserveregs($14, $sub8);
      label = 8; break;
    case 8: 
      label = 14; break;
    case 9: 
      var $16=$e_addr;
      var $k10=(($16)|0);
      var $17=HEAP32[(($k10)>>2)];
      var $cmp11=(($17)|0)!=0;
      if ($cmp11) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $18=$fs;
      var $19=$e_addr;
      _luaK_exp2nextreg($18, $19);
      label = 11; break;
    case 11: 
      var $20=$extra;
      var $cmp14=(($20)|0) > 0;
      if ($cmp14) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $21=$fs;
      var $freereg=(($21+48)|0);
      var $22=HEAP8[($freereg)];
      var $conv=(($22)&255);
      $reg=$conv;
      var $23=$fs;
      var $24=$extra;
      _luaK_reserveregs($23, $24);
      var $25=$fs;
      var $26=$reg;
      var $27=$extra;
      _luaK_nil($25, $26, $27);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 

      return;
  }

}
_adjust_assign["X"]=1;

function _expr($ls, $v) {
  var label = 0;


  var $ls_addr;
  var $v_addr;
  $ls_addr=$ls;
  $v_addr=$v;
  var $0=$ls_addr;
  var $1=$v_addr;
  var $call=_subexpr($0, $1, 0);

  return;
}


function _subexpr($ls, $v, $limit) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; _memset(__stackBase__, 0, 20);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $v_addr;
      var $limit_addr;
      var $op;
      var $uop;
      var $line;
      var $v2=__stackBase__;
      var $nextop;
      var $line8;
      $ls_addr=$ls;
      $v_addr=$v;
      $limit_addr=$limit;
      var $0=$ls_addr;
      _enterlevel($0);
      var $1=$ls_addr;
      var $t=(($1+12)|0);
      var $token=(($t)|0);
      var $2=HEAP32[(($token)>>2)];
      var $call=_getunopr($2);
      $uop=$call;
      var $3=$uop;
      var $cmp=(($3)|0)!=3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$ls_addr;
      var $linenumber=(($4+4)|0);
      var $5=HEAP32[(($linenumber)>>2)];
      $line=$5;
      var $6=$ls_addr;
      _luaX_next($6);
      var $7=$ls_addr;
      var $8=$v_addr;
      var $call1=_subexpr($7, $8, 8);
      var $9=$ls_addr;
      var $fs=(($9+36)|0);
      var $10=HEAP32[(($fs)>>2)];
      var $11=$uop;
      var $12=$v_addr;
      var $13=$line;
      _luaK_prefix($10, $11, $12, $13);
      label = 5; break;
    case 4: 
      var $14=$ls_addr;
      var $15=$v_addr;
      _simpleexp($14, $15);
      label = 5; break;
    case 5: 
      var $16=$ls_addr;
      var $t2=(($16+12)|0);
      var $token3=(($t2)|0);
      var $17=HEAP32[(($token3)>>2)];
      var $call4=_getbinopr($17);
      $op=$call4;
      label = 6; break;
    case 6: 
      var $18=$op;
      var $cmp5=(($18)|0)!=15;
      if ($cmp5) { label = 7; break; } else { var $22 = 0;label = 8; break; }
    case 7: 
      var $19=$op;
      var $arrayidx=((5243164+($19<<1))|0);
      var $left=(($arrayidx)|0);
      var $20=HEAP8[($left)];
      var $conv=(($20)&255);
      var $21=$limit_addr;
      var $cmp6=(($conv)|0) > (($21)|0);
      var $22 = $cmp6;label = 8; break;
    case 8: 
      var $22;
      if ($22) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $23=$ls_addr;
      var $linenumber9=(($23+4)|0);
      var $24=HEAP32[(($linenumber9)>>2)];
      $line8=$24;
      var $25=$ls_addr;
      _luaX_next($25);
      var $26=$ls_addr;
      var $fs10=(($26+36)|0);
      var $27=HEAP32[(($fs10)>>2)];
      var $28=$op;
      var $29=$v_addr;
      _luaK_infix($27, $28, $29);
      var $30=$ls_addr;
      var $31=$op;
      var $arrayidx11=((5243164+($31<<1))|0);
      var $right=(($arrayidx11+1)|0);
      var $32=HEAP8[($right)];
      var $conv12=(($32)&255);
      var $call13=_subexpr($30, $v2, $conv12);
      $nextop=$call13;
      var $33=$ls_addr;
      var $fs14=(($33+36)|0);
      var $34=HEAP32[(($fs14)>>2)];
      var $35=$op;
      var $36=$v_addr;
      var $37=$line8;
      _luaK_posfix($34, $35, $36, $v2, $37);
      var $38=$nextop;
      $op=$38;
      label = 6; break;
    case 10: 
      var $39=$ls_addr;
      var $L=(($39+40)|0);
      var $40=HEAP32[(($L)>>2)];
      var $nCcalls=(($40+38)|0);
      var $41=HEAP16[(($nCcalls)>>1)];
      var $dec=((($41)-(1))&65535);
      HEAP16[(($nCcalls)>>1)]=$dec;
      var $42=$op;
      STACKTOP = __stackBase__;
      return $42;
  }

}
_subexpr["X"]=1;

function _codestring($ls, $e, $s) {
  var label = 0;


  var $ls_addr;
  var $e_addr;
  var $s_addr;
  $ls_addr=$ls;
  $e_addr=$e;
  $s_addr=$s;
  var $0=$e_addr;
  var $1=$ls_addr;
  var $fs=(($1+36)|0);
  var $2=HEAP32[(($fs)>>2)];
  var $3=$s_addr;
  var $call=_luaK_stringK($2, $3);
  _init_exp($0, 4, $call);

  return;
}


function _assignment($ls, $lh, $nvars) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 44)|0; _memset(__stackBase__, 0, 44);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $lh_addr;
      var $nvars_addr;
      var $e=__stackBase__;
      var $nv=(__stackBase__)+(20);
      var $nexps;
      $ls_addr=$ls;
      $lh_addr=$lh;
      $nvars_addr=$nvars;
      var $0=$lh_addr;
      var $v=(($0+4)|0);
      var $k=(($v)|0);
      var $1=HEAP32[(($k)>>2)];
      var $cmp=7 <= (($1)>>>0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$lh_addr;
      var $v1=(($2+4)|0);
      var $k2=(($v1)|0);
      var $3=HEAP32[(($k2)>>2)];
      var $cmp3=(($3)>>>0) <= 9;
      if ($cmp3) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $4=$ls_addr;
      _luaX_syntaxerror($4, ((5246576)|0));

    case 5: 
      var $5=$ls_addr;
      var $call=_testnext($5, 44);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $6=$lh_addr;
      var $prev=(($nv)|0);
      HEAP32[(($prev)>>2)]=$6;
      var $7=$ls_addr;
      var $v5=(($nv+4)|0);
      _suffixedexp($7, $v5);
      var $v6=(($nv+4)|0);
      var $k7=(($v6)|0);
      var $8=HEAP32[(($k7)>>2)];
      var $cmp8=(($8)|0)!=9;
      if ($cmp8) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $9=$ls_addr;
      var $10=$lh_addr;
      var $v10=(($nv+4)|0);
      _check_conflict($9, $10, $v10);
      label = 8; break;
    case 8: 
      var $11=$ls_addr;
      var $fs=(($11+36)|0);
      var $12=HEAP32[(($fs)>>2)];
      var $13=$nvars_addr;
      var $14=$ls_addr;
      var $L=(($14+40)|0);
      var $15=HEAP32[(($L)>>2)];
      var $nCcalls=(($15+38)|0);
      var $16=HEAP16[(($nCcalls)>>1)];
      var $conv=(($16)&65535);
      var $add=((($13)+($conv))|0);
      _checklimit($12, $add, 200, ((5246152)|0));
      var $17=$ls_addr;
      var $18=$nvars_addr;
      var $add12=((($18)+(1))|0);
      _assignment($17, $nv, $add12);
      label = 15; break;
    case 9: 
      var $19=$ls_addr;
      _checknext($19, 61);
      var $20=$ls_addr;
      var $call13=_explist($20, $e);
      $nexps=$call13;
      var $21=$nexps;
      var $22=$nvars_addr;
      var $cmp14=(($21)|0)!=(($22)|0);
      if ($cmp14) { label = 10; break; } else { label = 13; break; }
    case 10: 
      var $23=$ls_addr;
      var $24=$nvars_addr;
      var $25=$nexps;
      _adjust_assign($23, $24, $25, $e);
      var $26=$nexps;
      var $27=$nvars_addr;
      var $cmp17=(($26)|0) > (($27)|0);
      if ($cmp17) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $28=$nexps;
      var $29=$nvars_addr;
      var $sub=((($28)-($29))|0);
      var $30=$ls_addr;
      var $fs20=(($30+36)|0);
      var $31=HEAP32[(($fs20)>>2)];
      var $freereg=(($31+48)|0);
      var $32=HEAP8[($freereg)];
      var $conv21=(($32)&255);
      var $sub22=((($conv21)-($sub))|0);
      var $conv23=(($sub22) & 255);
      HEAP8[($freereg)]=$conv23;
      label = 12; break;
    case 12: 
      label = 14; break;
    case 13: 
      var $33=$ls_addr;
      var $fs26=(($33+36)|0);
      var $34=HEAP32[(($fs26)>>2)];
      _luaK_setoneret($34, $e);
      var $35=$ls_addr;
      var $fs27=(($35+36)|0);
      var $36=HEAP32[(($fs27)>>2)];
      var $37=$lh_addr;
      var $v28=(($37+4)|0);
      _luaK_storevar($36, $v28, $e);
      label = 16; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $38=$ls_addr;
      var $fs31=(($38+36)|0);
      var $39=HEAP32[(($fs31)>>2)];
      var $freereg32=(($39+48)|0);
      var $40=HEAP8[($freereg32)];
      var $conv33=(($40)&255);
      var $sub34=((($conv33)-(1))|0);
      _init_exp($e, 6, $sub34);
      var $41=$ls_addr;
      var $fs35=(($41+36)|0);
      var $42=HEAP32[(($fs35)>>2)];
      var $43=$lh_addr;
      var $v36=(($43+4)|0);
      _luaK_storevar($42, $v36, $e);
      label = 16; break;
    case 16: 
      STACKTOP = __stackBase__;
      return;
  }

}
_assignment["X"]=1;

function _checklimit($fs, $v, $l, $what) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $v_addr;
      var $l_addr;
      var $what_addr;
      $fs_addr=$fs;
      $v_addr=$v;
      $l_addr=$l;
      $what_addr=$what;
      var $0=$v_addr;
      var $1=$l_addr;
      var $cmp=(($0)|0) > (($1)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$fs_addr;
      var $3=$l_addr;
      var $4=$what_addr;
      _errorlimit($2, $3, $4);

    case 4: 

      return;
  }

}


function _simpleexp($ls, $v) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $v_addr;
      var $fs;
      $ls_addr=$ls;
      $v_addr=$v;
      var $0=$ls_addr;
      var $t=(($0+12)|0);
      var $token=(($t)|0);
      var $1=HEAP32[(($token)>>2)];
      if ((($1)|0)==287) {
        label = 3; break;
      }
      else if ((($1)|0)==289) {
        label = 4; break;
      }
      else if ((($1)|0)==270) {
        label = 5; break;
      }
      else if ((($1)|0)==276) {
        label = 6; break;
      }
      else if ((($1)|0)==263) {
        label = 7; break;
      }
      else if ((($1)|0)==280) {
        label = 8; break;
      }
      else if ((($1)|0)==123) {
        label = 11; break;
      }
      else if ((($1)|0)==265) {
        label = 12; break;
      }
      else {
      label = 13; break;
      }
      
    case 3: 
      var $2=$v_addr;
      _init_exp($2, 5, 0);
      var $3=$ls_addr;
      var $t1=(($3+12)|0);
      var $seminfo=(($t1+4)|0);
      var $r=$seminfo;
      var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($r)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($r)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $5=$v_addr;
      var $u=(($5+4)|0);
      var $nval=$u;
      (HEAPF64[(tempDoublePtr)>>3]=$4,HEAP32[(($nval)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($nval)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 14; break;
    case 4: 
      var $6=$ls_addr;
      var $7=$v_addr;
      var $8=$ls_addr;
      var $t3=(($8+12)|0);
      var $seminfo4=(($t3+4)|0);
      var $ts=$seminfo4;
      var $9=HEAP32[(($ts)>>2)];
      _codestring($6, $7, $9);
      label = 14; break;
    case 5: 
      var $10=$v_addr;
      _init_exp($10, 1, 0);
      label = 14; break;
    case 6: 
      var $11=$v_addr;
      _init_exp($11, 2, 0);
      label = 14; break;
    case 7: 
      var $12=$v_addr;
      _init_exp($12, 3, 0);
      label = 14; break;
    case 8: 
      var $13=$ls_addr;
      var $fs9=(($13+36)|0);
      var $14=HEAP32[(($fs9)>>2)];
      $fs=$14;
      var $15=$fs;
      var $f=(($15)|0);
      var $16=HEAP32[(($f)>>2)];
      var $is_vararg=(($16+77)|0);
      var $17=HEAP8[($is_vararg)];
      var $tobool=(($17 << 24) >> 24)!=0;
      if ($tobool) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $18=$ls_addr;
      _luaX_syntaxerror($18, ((5245800)|0));

    case 10: 
      var $19=$v_addr;
      var $20=$fs;
      var $call=_luaK_codeABC($20, 38, 0, 1, 0);
      _init_exp($19, 13, $call);
      label = 14; break;
    case 11: 
      var $21=$ls_addr;
      var $22=$v_addr;
      _constructor($21, $22);
      label = 15; break;
    case 12: 
      var $23=$ls_addr;
      _luaX_next($23);
      var $24=$ls_addr;
      var $25=$v_addr;
      var $26=$ls_addr;
      var $linenumber=(($26+4)|0);
      var $27=HEAP32[(($linenumber)>>2)];
      _body($24, $25, 0, $27);
      label = 15; break;
    case 13: 
      var $28=$ls_addr;
      var $29=$v_addr;
      _suffixedexp($28, $29);
      label = 15; break;
    case 14: 
      var $30=$ls_addr;
      _luaX_next($30);
      label = 15; break;
    case 15: 

      return;
  }

}
_simpleexp["X"]=1;

function _constructor($ls, $t) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; _memset(__stackBase__, 0, 36);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $t_addr;
      var $fs;
      var $line;
      var $pc;
      var $cc=__stackBase__;
      $ls_addr=$ls;
      $t_addr=$t;
      var $0=$ls_addr;
      var $fs1=(($0+36)|0);
      var $1=HEAP32[(($fs1)>>2)];
      $fs=$1;
      var $2=$ls_addr;
      var $linenumber=(($2+4)|0);
      var $3=HEAP32[(($linenumber)>>2)];
      $line=$3;
      var $4=$fs;
      var $call=_luaK_codeABC($4, 11, 0, 0, 0);
      $pc=$call;
      var $tostore=(($cc+32)|0);
      HEAP32[(($tostore)>>2)]=0;
      var $nh=(($cc+24)|0);
      HEAP32[(($nh)>>2)]=0;
      var $na=(($cc+28)|0);
      HEAP32[(($na)>>2)]=0;
      var $5=$t_addr;
      var $t2=(($cc+20)|0);
      HEAP32[(($t2)>>2)]=$5;
      var $6=$t_addr;
      var $7=$pc;
      _init_exp($6, 11, $7);
      var $v=(($cc)|0);
      _init_exp($v, 0, 0);
      var $8=$ls_addr;
      var $fs3=(($8+36)|0);
      var $9=HEAP32[(($fs3)>>2)];
      var $10=$t_addr;
      _luaK_exp2nextreg($9, $10);
      var $11=$ls_addr;
      _checknext($11, 123);
      label = 3; break;
    case 3: 
      var $12=$ls_addr;
      var $t4=(($12+12)|0);
      var $token=(($t4)|0);
      var $13=HEAP32[(($token)>>2)];
      var $cmp=(($13)|0)==125;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 9; break;
    case 5: 
      var $14=$fs;
      _closelistfield($14, $cc);
      var $15=$ls_addr;
      _field($15, $cc);
      label = 6; break;
    case 6: 
      var $16=$ls_addr;
      var $call5=_testnext($16, 44);
      var $tobool=(($call5)|0)!=0;
      if ($tobool) { var $18 = 1;label = 8; break; } else { label = 7; break; }
    case 7: 
      var $17=$ls_addr;
      var $call6=_testnext($17, 59);
      var $tobool7=(($call6)|0)!=0;
      var $18 = $tobool7;label = 8; break;
    case 8: 
      var $18;
      if ($18) { label = 3; break; } else { label = 9; break; }
    case 9: 
      var $19=$ls_addr;
      var $20=$line;
      _check_match($19, 125, 123, $20);
      var $21=$fs;
      _lastlistfield($21, $cc);
      var $22=$pc;
      var $23=$fs;
      var $f=(($23)|0);
      var $24=HEAP32[(($f)>>2)];
      var $code=(($24+12)|0);
      var $25=HEAP32[(($code)>>2)];
      var $arrayidx=(($25+($22<<2))|0);
      var $26=HEAP32[(($arrayidx)>>2)];
      var $and=$26 & 8388607;
      var $na8=(($cc+28)|0);
      var $27=HEAP32[(($na8)>>2)];
      var $call9=_luaO_int2fb($27);
      var $shl=$call9 << 23;
      var $and10=$shl & -8388608;
      var $or=$and | $and10;
      var $28=$pc;
      var $29=$fs;
      var $f11=(($29)|0);
      var $30=HEAP32[(($f11)>>2)];
      var $code12=(($30+12)|0);
      var $31=HEAP32[(($code12)>>2)];
      var $arrayidx13=(($31+($28<<2))|0);
      HEAP32[(($arrayidx13)>>2)]=$or;
      var $32=$pc;
      var $33=$fs;
      var $f14=(($33)|0);
      var $34=HEAP32[(($f14)>>2)];
      var $code15=(($34+12)|0);
      var $35=HEAP32[(($code15)>>2)];
      var $arrayidx16=(($35+($32<<2))|0);
      var $36=HEAP32[(($arrayidx16)>>2)];
      var $and17=$36 & -8372225;
      var $nh18=(($cc+24)|0);
      var $37=HEAP32[(($nh18)>>2)];
      var $call19=_luaO_int2fb($37);
      var $shl20=$call19 << 14;
      var $and21=$shl20 & 8372224;
      var $or22=$and17 | $and21;
      var $38=$pc;
      var $39=$fs;
      var $f23=(($39)|0);
      var $40=HEAP32[(($f23)>>2)];
      var $code24=(($40+12)|0);
      var $41=HEAP32[(($code24)>>2)];
      var $arrayidx25=(($41+($38<<2))|0);
      HEAP32[(($arrayidx25)>>2)]=$or22;
      STACKTOP = __stackBase__;
      return;
  }

}
_constructor["X"]=1;

function _body($ls, $e, $ismethod, $line) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 64)|0; _memset(__stackBase__, 0, 64);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $e_addr;
      var $ismethod_addr;
      var $line_addr;
      var $new_fs=__stackBase__;
      var $bl=(__stackBase__)+(52);
      $ls_addr=$ls;
      $e_addr=$e;
      $ismethod_addr=$ismethod;
      $line_addr=$line;
      var $0=$ls_addr;
      var $call=_addprototype($0);
      var $f=(($new_fs)|0);
      HEAP32[(($f)>>2)]=$call;
      var $1=$line_addr;
      var $f1=(($new_fs)|0);
      var $2=HEAP32[(($f1)>>2)];
      var $linedefined=(($2+64)|0);
      HEAP32[(($linedefined)>>2)]=$1;
      var $3=$ls_addr;
      _open_func($3, $new_fs, $bl);
      var $4=$ls_addr;
      _checknext($4, 40);
      var $5=$ismethod_addr;
      var $tobool=(($5)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $6=$ls_addr;
      _new_localvarliteral_($6, ((5245544)|0), 4);
      var $7=$ls_addr;
      _adjustlocalvars($7, 1);
      label = 4; break;
    case 4: 
      var $8=$ls_addr;
      _parlist($8);
      var $9=$ls_addr;
      _checknext($9, 41);
      var $10=$ls_addr;
      _statlist($10);
      var $11=$ls_addr;
      var $linenumber=(($11+4)|0);
      var $12=HEAP32[(($linenumber)>>2)];
      var $f2=(($new_fs)|0);
      var $13=HEAP32[(($f2)>>2)];
      var $lastlinedefined=(($13+68)|0);
      HEAP32[(($lastlinedefined)>>2)]=$12;
      var $14=$ls_addr;
      var $15=$line_addr;
      _check_match($14, 262, 265, $15);
      var $16=$ls_addr;
      var $17=$e_addr;
      _codeclosure($16, $17);
      var $18=$ls_addr;
      _close_func($18);
      STACKTOP = __stackBase__;
      return;
  }

}
_body["X"]=1;

function _addprototype($ls) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $clp;
      var $L;
      var $fs;
      var $f;
      var $oldsize;
      $ls_addr=$ls;
      var $0=$ls_addr;
      var $L1=(($0+40)|0);
      var $1=HEAP32[(($L1)>>2)];
      $L=$1;
      var $2=$ls_addr;
      var $fs2=(($2+36)|0);
      var $3=HEAP32[(($fs2)>>2)];
      $fs=$3;
      var $4=$fs;
      var $f3=(($4)|0);
      var $5=HEAP32[(($f3)>>2)];
      $f=$5;
      var $6=$fs;
      var $np=(($6+36)|0);
      var $7=HEAP32[(($np)>>2)];
      var $8=$f;
      var $sizep=(($8+56)|0);
      var $9=HEAP32[(($sizep)>>2)];
      var $cmp=(($7)|0) >= (($9)|0);
      if ($cmp) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $10=$f;
      var $sizep4=(($10+56)|0);
      var $11=HEAP32[(($sizep4)>>2)];
      $oldsize=$11;
      var $12=$fs;
      var $np5=(($12+36)|0);
      var $13=HEAP32[(($np5)>>2)];
      var $add=((($13)+(1))|0);
      var $14=$f;
      var $sizep6=(($14+56)|0);
      var $15=HEAP32[(($sizep6)>>2)];
      var $cmp7=(($add)|0) > (($15)|0);
      if ($cmp7) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $16=$L;
      var $17=$f;
      var $p=(($17+16)|0);
      var $18=HEAP32[(($p)>>2)];
      var $19=$18;
      var $20=$f;
      var $sizep9=(($20+56)|0);
      var $call=_luaM_growaux_($16, $19, $sizep9, 4, 262143, ((5253052)|0));
      var $21=$call;
      var $22=$f;
      var $p10=(($22+16)|0);
      HEAP32[(($p10)>>2)]=$21;
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $23=$oldsize;
      var $24=$f;
      var $sizep11=(($24+56)|0);
      var $25=HEAP32[(($sizep11)>>2)];
      var $cmp12=(($23)|0) < (($25)|0);
      if ($cmp12) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $26=$oldsize;
      var $inc=((($26)+(1))|0);
      $oldsize=$inc;
      var $27=$f;
      var $p13=(($27+16)|0);
      var $28=HEAP32[(($p13)>>2)];
      var $arrayidx=(($28+($26<<2))|0);
      HEAP32[(($arrayidx)>>2)]=0;
      label = 6; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $29=$L;
      var $call15=_luaF_newproto($29);
      $clp=$call15;
      var $30=$fs;
      var $np16=(($30+36)|0);
      var $31=HEAP32[(($np16)>>2)];
      var $inc17=((($31)+(1))|0);
      HEAP32[(($np16)>>2)]=$inc17;
      var $32=$f;
      var $p18=(($32+16)|0);
      var $33=HEAP32[(($p18)>>2)];
      var $arrayidx19=(($33+($31<<2))|0);
      HEAP32[(($arrayidx19)>>2)]=$call15;
      var $34=$clp;
      var $35=$34;
      var $gch=$35;
      var $marked=(($gch+5)|0);
      var $36=HEAP8[($marked)];
      var $conv=(($36)&255);
      var $and=$conv & 3;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $37=$f;
      var $38=$37;
      var $gch20=$38;
      var $marked21=(($gch20+5)|0);
      var $39=HEAP8[($marked21)];
      var $conv22=(($39)&255);
      var $and23=$conv22 & 4;
      var $tobool24=(($and23)|0)!=0;
      if ($tobool24) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $40=$L;
      var $41=$f;
      var $42=$41;
      var $43=$clp;
      var $44=$43;
      _luaC_barrier_($40, $42, $44);
      label = 12; break;
    case 12: 
      var $45=$clp;

      return $45;
  }

}
_addprototype["X"]=1;

function _new_localvarliteral_($ls, $name, $sz) {
  var label = 0;


  var $ls_addr;
  var $name_addr;
  var $sz_addr;
  $ls_addr=$ls;
  $name_addr=$name;
  $sz_addr=$sz;
  var $0=$ls_addr;
  var $1=$ls_addr;
  var $2=$name_addr;
  var $3=$sz_addr;
  var $call=_luaX_newstring($1, $2, $3);
  _new_localvar($0, $call);

  return;
}


function _adjustlocalvars($ls, $nvars) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $nvars_addr;
      var $fs;
      $ls_addr=$ls;
      $nvars_addr=$nvars;
      var $0=$ls_addr;
      var $fs1=(($0+36)|0);
      var $1=HEAP32[(($fs1)>>2)];
      $fs=$1;
      var $2=$fs;
      var $nactvar=(($2+46)|0);
      var $3=HEAP8[($nactvar)];
      var $conv=(($3)&255);
      var $4=$nvars_addr;
      var $add=((($conv)+($4))|0);
      var $conv2=(($add) & 255);
      var $5=$fs;
      var $nactvar3=(($5+46)|0);
      HEAP8[($nactvar3)]=$conv2;
      label = 3; break;
    case 3: 
      var $6=$nvars_addr;
      var $tobool=(($6)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $7=$fs;
      var $pc=(($7+20)|0);
      var $8=HEAP32[(($pc)>>2)];
      var $9=$fs;
      var $10=$fs;
      var $nactvar4=(($10+46)|0);
      var $11=HEAP8[($nactvar4)];
      var $conv5=(($11)&255);
      var $12=$nvars_addr;
      var $sub=((($conv5)-($12))|0);
      var $call=_getlocvar($9, $sub);
      var $startpc=(($call+4)|0);
      HEAP32[(($startpc)>>2)]=$8;
      label = 5; break;
    case 5: 
      var $13=$nvars_addr;
      var $dec=((($13)-(1))|0);
      $nvars_addr=$dec;
      label = 3; break;
    case 6: 

      return;
  }

}


function _codeclosure($ls, $v) {
  var label = 0;


  var $ls_addr;
  var $v_addr;
  var $fs;
  $ls_addr=$ls;
  $v_addr=$v;
  var $0=$ls_addr;
  var $fs1=(($0+36)|0);
  var $1=HEAP32[(($fs1)>>2)];
  var $prev=(($1+8)|0);
  var $2=HEAP32[(($prev)>>2)];
  $fs=$2;
  var $3=$v_addr;
  var $4=$fs;
  var $5=$fs;
  var $np=(($5+36)|0);
  var $6=HEAP32[(($np)>>2)];
  var $sub=((($6)-(1))|0);
  var $call=_luaK_codeABx($4, 37, 0, $sub);
  _init_exp($3, 11, $call);
  var $7=$fs;
  var $8=$v_addr;
  _luaK_exp2nextreg($7, $8);

  return;
}


function _new_localvar($ls, $name) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $name_addr;
      var $fs;
      var $dyd;
      var $reg;
      $ls_addr=$ls;
      $name_addr=$name;
      var $0=$ls_addr;
      var $fs1=(($0+36)|0);
      var $1=HEAP32[(($fs1)>>2)];
      $fs=$1;
      var $2=$ls_addr;
      var $dyd2=(($2+52)|0);
      var $3=HEAP32[(($dyd2)>>2)];
      $dyd=$3;
      var $4=$ls_addr;
      var $5=$name_addr;
      var $call=_registerlocalvar($4, $5);
      $reg=$call;
      var $6=$fs;
      var $7=$dyd;
      var $actvar=(($7)|0);
      var $n=(($actvar+4)|0);
      var $8=HEAP32[(($n)>>2)];
      var $add=((($8)+(1))|0);
      var $9=$fs;
      var $firstlocal=(($9+40)|0);
      var $10=HEAP32[(($firstlocal)>>2)];
      var $sub=((($add)-($10))|0);
      _checklimit($6, $sub, 200, ((5253364)|0));
      var $11=$dyd;
      var $actvar3=(($11)|0);
      var $n4=(($actvar3+4)|0);
      var $12=HEAP32[(($n4)>>2)];
      var $add5=((($12)+(1))|0);
      var $add6=((($add5)+(1))|0);
      var $13=$dyd;
      var $actvar7=(($13)|0);
      var $size=(($actvar7+8)|0);
      var $14=HEAP32[(($size)>>2)];
      var $cmp=(($add6)|0) > (($14)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $15=$ls_addr;
      var $L=(($15+40)|0);
      var $16=HEAP32[(($L)>>2)];
      var $17=$dyd;
      var $actvar8=(($17)|0);
      var $arr=(($actvar8)|0);
      var $18=HEAP32[(($arr)>>2)];
      var $19=$18;
      var $20=$dyd;
      var $actvar9=(($20)|0);
      var $size10=(($actvar9+8)|0);
      var $call11=_luaM_growaux_($16, $19, $size10, 2, 2147483645, ((5253364)|0));
      var $21=$call11;
      var $22=$dyd;
      var $actvar12=(($22)|0);
      var $arr13=(($actvar12)|0);
      HEAP32[(($arr13)>>2)]=$21;
      label = 4; break;
    case 4: 
      var $23=$reg;
      var $conv=(($23) & 65535);
      var $24=$dyd;
      var $actvar14=(($24)|0);
      var $n15=(($actvar14+4)|0);
      var $25=HEAP32[(($n15)>>2)];
      var $inc=((($25)+(1))|0);
      HEAP32[(($n15)>>2)]=$inc;
      var $26=$dyd;
      var $actvar16=(($26)|0);
      var $arr17=(($actvar16)|0);
      var $27=HEAP32[(($arr17)>>2)];
      var $arrayidx=(($27+($25<<1))|0);
      var $idx=(($arrayidx)|0);
      HEAP16[(($idx)>>1)]=$conv;

      return;
  }

}
_new_localvar["X"]=1;

function _registerlocalvar($ls, $varname) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $varname_addr;
      var $fs;
      var $f;
      var $oldsize;
      $ls_addr=$ls;
      $varname_addr=$varname;
      var $0=$ls_addr;
      var $fs1=(($0+36)|0);
      var $1=HEAP32[(($fs1)>>2)];
      $fs=$1;
      var $2=$fs;
      var $f2=(($2)|0);
      var $3=HEAP32[(($f2)>>2)];
      $f=$3;
      var $4=$f;
      var $sizelocvars=(($4+60)|0);
      var $5=HEAP32[(($sizelocvars)>>2)];
      $oldsize=$5;
      var $6=$fs;
      var $nlocvars=(($6+44)|0);
      var $7=HEAP16[(($nlocvars)>>1)];
      var $conv=(($7 << 16) >> 16);
      var $add=((($conv)+(1))|0);
      var $8=$f;
      var $sizelocvars3=(($8+60)|0);
      var $9=HEAP32[(($sizelocvars3)>>2)];
      var $cmp=(($add)|0) > (($9)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=$ls_addr;
      var $L=(($10+40)|0);
      var $11=HEAP32[(($L)>>2)];
      var $12=$f;
      var $locvars=(($12+24)|0);
      var $13=HEAP32[(($locvars)>>2)];
      var $14=$13;
      var $15=$f;
      var $sizelocvars5=(($15+60)|0);
      var $call=_luaM_growaux_($11, $14, $sizelocvars5, 12, 32767, ((5253364)|0));
      var $16=$call;
      var $17=$f;
      var $locvars6=(($17+24)|0);
      HEAP32[(($locvars6)>>2)]=$16;
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $18=$oldsize;
      var $19=$f;
      var $sizelocvars7=(($19+60)|0);
      var $20=HEAP32[(($sizelocvars7)>>2)];
      var $cmp8=(($18)|0) < (($20)|0);
      if ($cmp8) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $21=$oldsize;
      var $inc=((($21)+(1))|0);
      $oldsize=$inc;
      var $22=$f;
      var $locvars10=(($22+24)|0);
      var $23=HEAP32[(($locvars10)>>2)];
      var $arrayidx=(($23+((($21)*(12))&-1))|0);
      var $varname11=(($arrayidx)|0);
      HEAP32[(($varname11)>>2)]=0;
      label = 5; break;
    case 7: 
      var $24=$varname_addr;
      var $25=$fs;
      var $nlocvars12=(($25+44)|0);
      var $26=HEAP16[(($nlocvars12)>>1)];
      var $idxprom=(($26 << 16) >> 16);
      var $27=$f;
      var $locvars13=(($27+24)|0);
      var $28=HEAP32[(($locvars13)>>2)];
      var $arrayidx14=(($28+((($idxprom)*(12))&-1))|0);
      var $varname15=(($arrayidx14)|0);
      HEAP32[(($varname15)>>2)]=$24;
      var $29=$varname_addr;
      var $30=$29;
      var $gch=$30;
      var $marked=(($gch+5)|0);
      var $31=HEAP8[($marked)];
      var $conv16=(($31)&255);
      var $and=$conv16 & 3;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $32=$f;
      var $33=$32;
      var $gch17=$33;
      var $marked18=(($gch17+5)|0);
      var $34=HEAP8[($marked18)];
      var $conv19=(($34)&255);
      var $and20=$conv19 & 4;
      var $tobool21=(($and20)|0)!=0;
      if ($tobool21) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $35=$ls_addr;
      var $L23=(($35+40)|0);
      var $36=HEAP32[(($L23)>>2)];
      var $37=$f;
      var $38=$37;
      var $39=$varname_addr;
      var $40=$39;
      _luaC_barrier_($36, $38, $40);
      label = 10; break;
    case 10: 
      var $41=$fs;
      var $nlocvars25=(($41+44)|0);
      var $42=HEAP16[(($nlocvars25)>>1)];
      var $inc26=((($42)+(1))&65535);
      HEAP16[(($nlocvars25)>>1)]=$inc26;
      var $conv27=(($42 << 16) >> 16);

      return $conv27;
  }

}
_registerlocalvar["X"]=1;

function _closelistfield($fs, $cc) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $cc_addr;
      $fs_addr=$fs;
      $cc_addr=$cc;
      var $0=$cc_addr;
      var $v=(($0)|0);
      var $k=(($v)|0);
      var $1=HEAP32[(($k)>>2)];
      var $cmp=(($1)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 6; break;
    case 4: 
      var $2=$fs_addr;
      var $3=$cc_addr;
      var $v1=(($3)|0);
      _luaK_exp2nextreg($2, $v1);
      var $4=$cc_addr;
      var $v2=(($4)|0);
      var $k3=(($v2)|0);
      HEAP32[(($k3)>>2)]=0;
      var $5=$cc_addr;
      var $tostore=(($5+32)|0);
      var $6=HEAP32[(($tostore)>>2)];
      var $cmp4=(($6)|0)==50;
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$fs_addr;
      var $8=$cc_addr;
      var $t=(($8+20)|0);
      var $9=HEAP32[(($t)>>2)];
      var $u=(($9+4)|0);
      var $info=$u;
      var $10=HEAP32[(($info)>>2)];
      var $11=$cc_addr;
      var $na=(($11+28)|0);
      var $12=HEAP32[(($na)>>2)];
      var $13=$cc_addr;
      var $tostore6=(($13+32)|0);
      var $14=HEAP32[(($tostore6)>>2)];
      _luaK_setlist($7, $10, $12, $14);
      var $15=$cc_addr;
      var $tostore7=(($15+32)|0);
      HEAP32[(($tostore7)>>2)]=0;
      label = 6; break;
    case 6: 

      return;
  }

}


function _field($ls, $cc) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $cc_addr;
      $ls_addr=$ls;
      $cc_addr=$cc;
      var $0=$ls_addr;
      var $t=(($0+12)|0);
      var $token=(($t)|0);
      var $1=HEAP32[(($token)>>2)];
      if ((($1)|0)==288) {
        label = 3; break;
      }
      else if ((($1)|0)==91) {
        label = 7; break;
      }
      else {
      label = 8; break;
      }
      
    case 3: 
      var $2=$ls_addr;
      var $call=_luaX_lookahead($2);
      var $cmp=(($call)|0)!=61;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$ls_addr;
      var $4=$cc_addr;
      _listfield($3, $4);
      label = 6; break;
    case 5: 
      var $5=$ls_addr;
      var $6=$cc_addr;
      _recfield($5, $6);
      label = 6; break;
    case 6: 
      label = 9; break;
    case 7: 
      var $7=$ls_addr;
      var $8=$cc_addr;
      _recfield($7, $8);
      label = 9; break;
    case 8: 
      var $9=$ls_addr;
      var $10=$cc_addr;
      _listfield($9, $10);
      label = 9; break;
    case 9: 

      return;
  }

}


function _lastlistfield($fs, $cc) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $cc_addr;
      $fs_addr=$fs;
      $cc_addr=$cc;
      var $0=$cc_addr;
      var $tostore=(($0+32)|0);
      var $1=HEAP32[(($tostore)>>2)];
      var $cmp=(($1)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 10; break;
    case 4: 
      var $2=$cc_addr;
      var $v=(($2)|0);
      var $k=(($v)|0);
      var $3=HEAP32[(($k)>>2)];
      var $cmp1=(($3)|0)==12;
      if ($cmp1) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $4=$cc_addr;
      var $v2=(($4)|0);
      var $k3=(($v2)|0);
      var $5=HEAP32[(($k3)>>2)];
      var $cmp4=(($5)|0)==13;
      if ($cmp4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $6=$fs_addr;
      var $7=$cc_addr;
      var $v6=(($7)|0);
      _luaK_setreturns($6, $v6, -1);
      var $8=$fs_addr;
      var $9=$cc_addr;
      var $t=(($9+20)|0);
      var $10=HEAP32[(($t)>>2)];
      var $u=(($10+4)|0);
      var $info=$u;
      var $11=HEAP32[(($info)>>2)];
      var $12=$cc_addr;
      var $na=(($12+28)|0);
      var $13=HEAP32[(($na)>>2)];
      _luaK_setlist($8, $11, $13, -1);
      var $14=$cc_addr;
      var $na7=(($14+28)|0);
      var $15=HEAP32[(($na7)>>2)];
      var $dec=((($15)-(1))|0);
      HEAP32[(($na7)>>2)]=$dec;
      label = 10; break;
    case 7: 
      var $16=$cc_addr;
      var $v8=(($16)|0);
      var $k9=(($v8)|0);
      var $17=HEAP32[(($k9)>>2)];
      var $cmp10=(($17)|0)!=0;
      if ($cmp10) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $18=$fs_addr;
      var $19=$cc_addr;
      var $v12=(($19)|0);
      _luaK_exp2nextreg($18, $v12);
      label = 9; break;
    case 9: 
      var $20=$fs_addr;
      var $21=$cc_addr;
      var $t14=(($21+20)|0);
      var $22=HEAP32[(($t14)>>2)];
      var $u15=(($22+4)|0);
      var $info16=$u15;
      var $23=HEAP32[(($info16)>>2)];
      var $24=$cc_addr;
      var $na17=(($24+28)|0);
      var $25=HEAP32[(($na17)>>2)];
      var $26=$cc_addr;
      var $tostore18=(($26+32)|0);
      var $27=HEAP32[(($tostore18)>>2)];
      _luaK_setlist($20, $23, $25, $27);
      label = 10; break;
    case 10: 

      return;
  }

}
_lastlistfield["X"]=1;

function _listfield($ls, $cc) {
  var label = 0;


  var $ls_addr;
  var $cc_addr;
  $ls_addr=$ls;
  $cc_addr=$cc;
  var $0=$ls_addr;
  var $1=$cc_addr;
  var $v=(($1)|0);
  _expr($0, $v);
  var $2=$ls_addr;
  var $fs=(($2+36)|0);
  var $3=HEAP32[(($fs)>>2)];
  var $4=$cc_addr;
  var $na=(($4+28)|0);
  var $5=HEAP32[(($na)>>2)];
  _checklimit($3, $5, 2147483645, ((5252808)|0));
  var $6=$cc_addr;
  var $na1=(($6+28)|0);
  var $7=HEAP32[(($na1)>>2)];
  var $inc=((($7)+(1))|0);
  HEAP32[(($na1)>>2)]=$inc;
  var $8=$cc_addr;
  var $tostore=(($8+32)|0);
  var $9=HEAP32[(($tostore)>>2)];
  var $inc2=((($9)+(1))|0);
  HEAP32[(($tostore)>>2)]=$inc2;

  return;
}


function _parlist($ls) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $fs;
      var $f;
      var $nparams;
      $ls_addr=$ls;
      var $0=$ls_addr;
      var $fs1=(($0+36)|0);
      var $1=HEAP32[(($fs1)>>2)];
      $fs=$1;
      var $2=$fs;
      var $f2=(($2)|0);
      var $3=HEAP32[(($f2)>>2)];
      $f=$3;
      $nparams=0;
      var $4=$f;
      var $is_vararg=(($4+77)|0);
      HEAP8[($is_vararg)]=0;
      var $5=$ls_addr;
      var $t=(($5+12)|0);
      var $token=(($t)|0);
      var $6=HEAP32[(($token)>>2)];
      var $cmp=(($6)|0)!=41;
      if ($cmp) { label = 3; break; } else { label = 13; break; }
    case 3: 
      label = 4; break;
    case 4: 
      var $7=$ls_addr;
      var $t3=(($7+12)|0);
      var $token4=(($t3)|0);
      var $8=HEAP32[(($token4)>>2)];
      if ((($8)|0)==288) {
        label = 5; break;
      }
      else if ((($8)|0)==280) {
        label = 6; break;
      }
      else {
      label = 7; break;
      }
      
    case 5: 
      var $9=$ls_addr;
      var $10=$ls_addr;
      var $call=_str_checkname($10);
      _new_localvar($9, $call);
      var $11=$nparams;
      var $inc=((($11)+(1))|0);
      $nparams=$inc;
      label = 8; break;
    case 6: 
      var $12=$ls_addr;
      _luaX_next($12);
      var $13=$f;
      var $is_vararg6=(($13+77)|0);
      HEAP8[($is_vararg6)]=1;
      label = 8; break;
    case 7: 
      var $14=$ls_addr;
      _luaX_syntaxerror($14, ((5253732)|0));

    case 8: 
      label = 9; break;
    case 9: 
      var $15=$f;
      var $is_vararg7=(($15+77)|0);
      var $16=HEAP8[($is_vararg7)];
      var $tobool=(($16 << 24) >> 24)!=0;
      if ($tobool) { var $18 = 0;label = 11; break; } else { label = 10; break; }
    case 10: 
      var $17=$ls_addr;
      var $call8=_testnext($17, 44);
      var $tobool9=(($call8)|0)!=0;
      var $18 = $tobool9;label = 11; break;
    case 11: 
      var $18;
      if ($18) { label = 4; break; } else { label = 12; break; }
    case 12: 
      label = 13; break;
    case 13: 
      var $19=$ls_addr;
      var $20=$nparams;
      _adjustlocalvars($19, $20);
      var $21=$fs;
      var $nactvar=(($21+46)|0);
      var $22=HEAP8[($nactvar)];
      var $23=$f;
      var $numparams=(($23+76)|0);
      HEAP8[($numparams)]=$22;
      var $24=$fs;
      var $25=$fs;
      var $nactvar10=(($25+46)|0);
      var $26=HEAP8[($nactvar10)];
      var $conv=(($26)&255);
      _luaK_reserveregs($24, $conv);

      return;
  }

}
_parlist["X"]=1;

function _markupval($fs, $level) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $level_addr;
      var $bl;
      $fs_addr=$fs;
      $level_addr=$level;
      var $0=$fs_addr;
      var $bl1=(($0+16)|0);
      var $1=HEAP32[(($bl1)>>2)];
      $bl=$1;
      label = 3; break;
    case 3: 
      var $2=$bl;
      var $nactvar=(($2+8)|0);
      var $3=HEAP8[($nactvar)];
      var $conv=(($3)&255);
      var $4=$level_addr;
      var $cmp=(($conv)|0) > (($4)|0);
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $5=$bl;
      var $previous=(($5)|0);
      var $6=HEAP32[(($previous)>>2)];
      $bl=$6;
      label = 3; break;
    case 5: 
      var $7=$bl;
      var $upval=(($7+9)|0);
      HEAP8[($upval)]=1;

      return;
  }

}


function _enterblock($fs, $bl, $isloop) {
  var label = 0;


  var $fs_addr;
  var $bl_addr;
  var $isloop_addr;
  $fs_addr=$fs;
  $bl_addr=$bl;
  $isloop_addr=$isloop;
  var $0=$isloop_addr;
  var $1=$bl_addr;
  var $isloop1=(($1+10)|0);
  HEAP8[($isloop1)]=$0;
  var $2=$fs_addr;
  var $nactvar=(($2+46)|0);
  var $3=HEAP8[($nactvar)];
  var $4=$bl_addr;
  var $nactvar2=(($4+8)|0);
  HEAP8[($nactvar2)]=$3;
  var $5=$fs_addr;
  var $ls=(($5+12)|0);
  var $6=HEAP32[(($ls)>>2)];
  var $dyd=(($6+52)|0);
  var $7=HEAP32[(($dyd)>>2)];
  var $label=(($7+24)|0);
  var $n=(($label+4)|0);
  var $8=HEAP32[(($n)>>2)];
  var $conv=(($8) & 65535);
  var $9=$bl_addr;
  var $firstlabel=(($9+4)|0);
  HEAP16[(($firstlabel)>>1)]=$conv;
  var $10=$fs_addr;
  var $ls3=(($10+12)|0);
  var $11=HEAP32[(($ls3)>>2)];
  var $dyd4=(($11+52)|0);
  var $12=HEAP32[(($dyd4)>>2)];
  var $gt=(($12+12)|0);
  var $n5=(($gt+4)|0);
  var $13=HEAP32[(($n5)>>2)];
  var $conv6=(($13) & 65535);
  var $14=$bl_addr;
  var $firstgoto=(($14+6)|0);
  HEAP16[(($firstgoto)>>1)]=$conv6;
  var $15=$bl_addr;
  var $upval=(($15+9)|0);
  HEAP8[($upval)]=0;
  var $16=$fs_addr;
  var $bl7=(($16+16)|0);
  var $17=HEAP32[(($bl7)>>2)];
  var $18=$bl_addr;
  var $previous=(($18)|0);
  HEAP32[(($previous)>>2)]=$17;
  var $19=$bl_addr;
  var $20=$fs_addr;
  var $bl8=(($20+16)|0);
  HEAP32[(($bl8)>>2)]=$19;

  return;
}
_enterblock["X"]=1;

function _recfield($ls, $cc) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; _memset(__stackBase__, 0, 40);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $cc_addr;
      var $fs;
      var $reg;
      var $key=__stackBase__;
      var $val=(__stackBase__)+(20);
      var $rkkey;
      $ls_addr=$ls;
      $cc_addr=$cc;
      var $0=$ls_addr;
      var $fs1=(($0+36)|0);
      var $1=HEAP32[(($fs1)>>2)];
      $fs=$1;
      var $2=$ls_addr;
      var $fs2=(($2+36)|0);
      var $3=HEAP32[(($fs2)>>2)];
      var $freereg=(($3+48)|0);
      var $4=HEAP8[($freereg)];
      var $conv=(($4)&255);
      $reg=$conv;
      var $5=$ls_addr;
      var $t=(($5+12)|0);
      var $token=(($t)|0);
      var $6=HEAP32[(($token)>>2)];
      var $cmp=(($6)|0)==288;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=$fs;
      var $8=$cc_addr;
      var $nh=(($8+24)|0);
      var $9=HEAP32[(($nh)>>2)];
      _checklimit($7, $9, 2147483645, ((5252808)|0));
      var $10=$ls_addr;
      _checkname($10, $key);
      label = 5; break;
    case 4: 
      var $11=$ls_addr;
      _yindex($11, $key);
      label = 5; break;
    case 5: 
      var $12=$cc_addr;
      var $nh4=(($12+24)|0);
      var $13=HEAP32[(($nh4)>>2)];
      var $inc=((($13)+(1))|0);
      HEAP32[(($nh4)>>2)]=$inc;
      var $14=$ls_addr;
      _checknext($14, 61);
      var $15=$fs;
      var $call=_luaK_exp2RK($15, $key);
      $rkkey=$call;
      var $16=$ls_addr;
      _expr($16, $val);
      var $17=$fs;
      var $18=$cc_addr;
      var $t5=(($18+20)|0);
      var $19=HEAP32[(($t5)>>2)];
      var $u=(($19+4)|0);
      var $info=$u;
      var $20=HEAP32[(($info)>>2)];
      var $21=$rkkey;
      var $22=$fs;
      var $call6=_luaK_exp2RK($22, $val);
      var $call7=_luaK_codeABC($17, 10, $20, $21, $call6);
      var $23=$reg;
      var $conv8=(($23) & 255);
      var $24=$fs;
      var $freereg9=(($24+48)|0);
      HEAP8[($freereg9)]=$conv8;
      STACKTOP = __stackBase__;
      return;
  }

}
_recfield["X"]=1;

function _checkname($ls, $e) {
  var label = 0;


  var $ls_addr;
  var $e_addr;
  $ls_addr=$ls;
  $e_addr=$e;
  var $0=$ls_addr;
  var $1=$e_addr;
  var $2=$ls_addr;
  var $call=_str_checkname($2);
  _codestring($0, $1, $call);

  return;
}


function _yindex($ls, $v) {
  var label = 0;


  var $ls_addr;
  var $v_addr;
  $ls_addr=$ls;
  $v_addr=$v;
  var $0=$ls_addr;
  _luaX_next($0);
  var $1=$ls_addr;
  var $2=$v_addr;
  _expr($1, $2);
  var $3=$ls_addr;
  var $fs=(($3+36)|0);
  var $4=HEAP32[(($fs)>>2)];
  var $5=$v_addr;
  _luaK_exp2val($4, $5);
  var $6=$ls_addr;
  _checknext($6, 93);

  return;
}


function _fieldsel($ls, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; _memset(__stackBase__, 0, 20);

  var $ls_addr;
  var $v_addr;
  var $fs;
  var $key=__stackBase__;
  $ls_addr=$ls;
  $v_addr=$v;
  var $0=$ls_addr;
  var $fs1=(($0+36)|0);
  var $1=HEAP32[(($fs1)>>2)];
  $fs=$1;
  var $2=$fs;
  var $3=$v_addr;
  _luaK_exp2anyregup($2, $3);
  var $4=$ls_addr;
  _luaX_next($4);
  var $5=$ls_addr;
  _checkname($5, $key);
  var $6=$fs;
  var $7=$v_addr;
  _luaK_indexed($6, $7, $key);
  STACKTOP = __stackBase__;
  return;
}


function _singlevar($ls, $var) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; _memset(__stackBase__, 0, 20);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $var_addr;
      var $varname;
      var $fs;
      var $key=__stackBase__;
      $ls_addr=$ls;
      $var_addr=$var;
      var $0=$ls_addr;
      var $call=_str_checkname($0);
      $varname=$call;
      var $1=$ls_addr;
      var $fs1=(($1+36)|0);
      var $2=HEAP32[(($fs1)>>2)];
      $fs=$2;
      var $3=$fs;
      var $4=$varname;
      var $5=$var_addr;
      var $call2=_singlevaraux($3, $4, $5, 1);
      var $cmp=(($call2)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $6=$fs;
      var $7=$ls_addr;
      var $envn=(($7+60)|0);
      var $8=HEAP32[(($envn)>>2)];
      var $9=$var_addr;
      var $call3=_singlevaraux($6, $8, $9, 1);
      var $10=$ls_addr;
      var $11=$varname;
      _codestring($10, $key, $11);
      var $12=$fs;
      var $13=$var_addr;
      _luaK_indexed($12, $13, $key);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
  }

}


function _singlevaraux($fs, $n, $var, $base) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $fs_addr;
      var $n_addr;
      var $var_addr;
      var $base_addr;
      var $v;
      var $idx;
      $fs_addr=$fs;
      $n_addr=$n;
      $var_addr=$var;
      $base_addr=$base;
      var $0=$fs_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 13; break;
    case 4: 
      var $1=$fs_addr;
      var $2=$n_addr;
      var $call=_searchvar($1, $2);
      $v=$call;
      var $3=$v;
      var $cmp1=(($3)|0) >= 0;
      if ($cmp1) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $4=$var_addr;
      var $5=$v;
      _init_exp($4, 7, $5);
      var $6=$base_addr;
      var $tobool=(($6)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $7=$fs_addr;
      var $8=$v;
      _markupval($7, $8);
      label = 7; break;
    case 7: 
      $retval=7;
      label = 13; break;
    case 8: 
      var $9=$fs_addr;
      var $10=$n_addr;
      var $call5=_searchupvalue($9, $10);
      $idx=$call5;
      var $11=$idx;
      var $cmp6=(($11)|0) < 0;
      if ($cmp6) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $12=$fs_addr;
      var $prev=(($12+8)|0);
      var $13=HEAP32[(($prev)>>2)];
      var $14=$n_addr;
      var $15=$var_addr;
      var $call8=_singlevaraux($13, $14, $15, 0);
      var $cmp9=(($call8)|0)==0;
      if ($cmp9) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $retval=0;
      label = 13; break;
    case 11: 
      var $16=$fs_addr;
      var $17=$n_addr;
      var $18=$var_addr;
      var $call12=_newupvalue($16, $17, $18);
      $idx=$call12;
      label = 12; break;
    case 12: 
      var $19=$var_addr;
      var $20=$idx;
      _init_exp($19, 8, $20);
      $retval=8;
      label = 13; break;
    case 13: 
      var $21=$retval;

      return $21;
  }

}
_singlevaraux["X"]=1;

function _searchvar($fs, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $fs_addr;
      var $n_addr;
      var $i;
      $fs_addr=$fs;
      $n_addr=$n;
      var $0=$fs_addr;
      var $nactvar=(($0+46)|0);
      var $1=HEAP8[($nactvar)];
      var $conv=(($1)&255);
      var $sub=((($conv)-(1))|0);
      $i=$sub;
      label = 3; break;
    case 3: 
      var $2=$i;
      var $cmp=(($2)|0) >= 0;
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $3=$n_addr;
      var $4=$fs_addr;
      var $5=$i;
      var $call=_getlocvar($4, $5);
      var $varname=(($call)|0);
      var $6=HEAP32[(($varname)>>2)];
      var $call2=_luaS_eqstr($3, $6);
      var $tobool=(($call2)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$i;
      $retval=$7;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $8=$i;
      var $dec=((($8)-(1))|0);
      $i=$dec;
      label = 3; break;
    case 8: 
      $retval=-1;
      label = 9; break;
    case 9: 
      var $9=$retval;

      return $9;
  }

}


function _searchupvalue($fs, $name) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $fs_addr;
      var $name_addr;
      var $i;
      var $up;
      $fs_addr=$fs;
      $name_addr=$name;
      var $0=$fs_addr;
      var $f=(($0)|0);
      var $1=HEAP32[(($f)>>2)];
      var $upvalues=(($1+28)|0);
      var $2=HEAP32[(($upvalues)>>2)];
      $up=$2;
      $i=0;
      label = 3; break;
    case 3: 
      var $3=$i;
      var $4=$fs_addr;
      var $nups=(($4+47)|0);
      var $5=HEAP8[($nups)];
      var $conv=(($5)&255);
      var $cmp=(($3)|0) < (($conv)|0);
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $6=$i;
      var $7=$up;
      var $arrayidx=(($7+($6<<3))|0);
      var $name2=(($arrayidx)|0);
      var $8=HEAP32[(($name2)>>2)];
      var $9=$name_addr;
      var $call=_luaS_eqstr($8, $9);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $10=$i;
      $retval=$10;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $11=$i;
      var $inc=((($11)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 
      $retval=-1;
      label = 9; break;
    case 9: 
      var $12=$retval;

      return $12;
  }

}


function _skipnoopstat($ls) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      $ls_addr=$ls;
      label = 3; break;
    case 3: 
      var $0=$ls_addr;
      var $t=(($0+12)|0);
      var $token=(($t)|0);
      var $1=HEAP32[(($token)>>2)];
      var $cmp=(($1)|0)==59;
      if ($cmp) { var $4 = 1;label = 5; break; } else { label = 4; break; }
    case 4: 
      var $2=$ls_addr;
      var $t1=(($2+12)|0);
      var $token2=(($t1)|0);
      var $3=HEAP32[(($token2)>>2)];
      var $cmp3=(($3)|0)==285;
      var $4 = $cmp3;label = 5; break;
    case 5: 
      var $4;
      if ($4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $5=$ls_addr;
      _statement($5);
      label = 3; break;
    case 7: 

      return;
  }

}


function _funcname($ls, $v) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $v_addr;
      var $ismethod;
      $ls_addr=$ls;
      $v_addr=$v;
      $ismethod=0;
      var $0=$ls_addr;
      var $1=$v_addr;
      _singlevar($0, $1);
      label = 3; break;
    case 3: 
      var $2=$ls_addr;
      var $t=(($2+12)|0);
      var $token=(($t)|0);
      var $3=HEAP32[(($token)>>2)];
      var $cmp=(($3)|0)==46;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$ls_addr;
      var $5=$v_addr;
      _fieldsel($4, $5);
      label = 3; break;
    case 5: 
      var $6=$ls_addr;
      var $t1=(($6+12)|0);
      var $token2=(($t1)|0);
      var $7=HEAP32[(($token2)>>2)];
      var $cmp3=(($7)|0)==58;
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $ismethod=1;
      var $8=$ls_addr;
      var $9=$v_addr;
      _fieldsel($8, $9);
      label = 7; break;
    case 7: 
      var $10=$ismethod;

      return $10;
  }

}


function _cond($ls) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; _memset(__stackBase__, 0, 20);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $v=__stackBase__;
      $ls_addr=$ls;
      var $0=$ls_addr;
      _expr($0, $v);
      var $k=(($v)|0);
      var $1=HEAP32[(($k)>>2)];
      var $cmp=(($1)|0)==1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $k1=(($v)|0);
      HEAP32[(($k1)>>2)]=3;
      label = 4; break;
    case 4: 
      var $2=$ls_addr;
      var $fs=(($2+36)|0);
      var $3=HEAP32[(($fs)>>2)];
      _luaK_goiftrue($3, $v);
      var $f=(($v+16)|0);
      var $4=HEAP32[(($f)>>2)];
      STACKTOP = __stackBase__;
      return $4;
  }

}


function _fornum($ls, $varname, $line) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $varname_addr;
      var $line_addr;
      var $fs;
      var $base;
      $ls_addr=$ls;
      $varname_addr=$varname;
      $line_addr=$line;
      var $0=$ls_addr;
      var $fs1=(($0+36)|0);
      var $1=HEAP32[(($fs1)>>2)];
      $fs=$1;
      var $2=$fs;
      var $freereg=(($2+48)|0);
      var $3=HEAP8[($freereg)];
      var $conv=(($3)&255);
      $base=$conv;
      var $4=$ls_addr;
      _new_localvarliteral_($4, ((5250580)|0), 11);
      var $5=$ls_addr;
      _new_localvarliteral_($5, ((5250404)|0), 11);
      var $6=$ls_addr;
      _new_localvarliteral_($6, ((5250244)|0), 10);
      var $7=$ls_addr;
      var $8=$varname_addr;
      _new_localvar($7, $8);
      var $9=$ls_addr;
      _checknext($9, 61);
      var $10=$ls_addr;
      var $call=_exp1($10);
      var $11=$ls_addr;
      _checknext($11, 44);
      var $12=$ls_addr;
      var $call2=_exp1($12);
      var $13=$ls_addr;
      var $call3=_testnext($13, 44);
      var $tobool=(($call3)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=$ls_addr;
      var $call4=_exp1($14);
      label = 5; break;
    case 4: 
      var $15=$fs;
      var $16=$fs;
      var $freereg5=(($16+48)|0);
      var $17=HEAP8[($freereg5)];
      var $conv6=(($17)&255);
      var $18=$fs;
      var $call7=_luaK_numberK($18, 1);
      var $call8=_luaK_codek($15, $conv6, $call7);
      var $19=$fs;
      _luaK_reserveregs($19, 1);
      label = 5; break;
    case 5: 
      var $20=$ls_addr;
      var $21=$base;
      var $22=$line_addr;
      _forbody($20, $21, $22, 1, 1);

      return;
  }

}
_fornum["X"]=1;

function _errorlimit($fs, $limit, $what) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $limit_addr;
      var $what_addr;
      var $L;
      var $msg;
      var $line;
      var $where;
      $fs_addr=$fs;
      $limit_addr=$limit;
      $what_addr=$what;
      var $0=$fs_addr;
      var $ls=(($0+12)|0);
      var $1=HEAP32[(($ls)>>2)];
      var $L1=(($1+40)|0);
      var $2=HEAP32[(($L1)>>2)];
      $L=$2;
      var $3=$fs_addr;
      var $f=(($3)|0);
      var $4=HEAP32[(($f)>>2)];
      var $linedefined=(($4+64)|0);
      var $5=HEAP32[(($linedefined)>>2)];
      $line=$5;
      var $6=$line;
      var $cmp=(($6)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $cond = ((5252612)|0);label = 5; break;
    case 4: 
      var $7=$L;
      var $8=$line;
      var $call=_luaO_pushfstring($7, ((5252424)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$8,tempInt));
      var $cond = $call;label = 5; break;
    case 5: 
      var $cond;
      $where=$cond;
      var $9=$L;
      var $10=$what_addr;
      var $11=$limit_addr;
      var $12=$where;
      var $call2=_luaO_pushfstring($9, ((5252192)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 12),STACKTOP = (STACKTOP + 12)|0,HEAP32[((tempInt)>>2)]=$10,HEAP32[(((tempInt)+(4))>>2)]=$11,HEAP32[(((tempInt)+(8))>>2)]=$12,tempInt));
      $msg=$call2;
      var $13=$fs_addr;
      var $ls3=(($13+12)|0);
      var $14=HEAP32[(($ls3)>>2)];
      var $15=$msg;
      _luaX_syntaxerror($14, $15);

    case 6: 
      STACKTOP = __stackBase__;
      return;
  }

}


function _primaryexp($ls, $v) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $v_addr;
      var $line;
      $ls_addr=$ls;
      $v_addr=$v;
      var $0=$ls_addr;
      var $t=(($0+12)|0);
      var $token=(($t)|0);
      var $1=HEAP32[(($token)>>2)];
      if ((($1)|0)==40) {
        label = 3; break;
      }
      else if ((($1)|0)==288) {
        label = 4; break;
      }
      else {
      label = 5; break;
      }
      
    case 3: 
      var $2=$ls_addr;
      var $linenumber=(($2+4)|0);
      var $3=HEAP32[(($linenumber)>>2)];
      $line=$3;
      var $4=$ls_addr;
      _luaX_next($4);
      var $5=$ls_addr;
      var $6=$v_addr;
      _expr($5, $6);
      var $7=$ls_addr;
      var $8=$line;
      _check_match($7, 41, 40, $8);
      var $9=$ls_addr;
      var $fs=(($9+36)|0);
      var $10=HEAP32[(($fs)>>2)];
      var $11=$v_addr;
      _luaK_dischargevars($10, $11);
      label = 6; break;
    case 4: 
      var $12=$ls_addr;
      var $13=$v_addr;
      _singlevar($12, $13);
      label = 6; break;
    case 5: 
      var $14=$ls_addr;
      _luaX_syntaxerror($14, ((5251824)|0));

    case 6: 

      return;
  }

}


function _funcargs($ls, $f, $line) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; _memset(__stackBase__, 0, 20);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $f_addr;
      var $line_addr;
      var $fs;
      var $args=__stackBase__;
      var $base;
      var $nparams;
      $ls_addr=$ls;
      $f_addr=$f;
      $line_addr=$line;
      var $0=$ls_addr;
      var $fs1=(($0+36)|0);
      var $1=HEAP32[(($fs1)>>2)];
      $fs=$1;
      var $2=$ls_addr;
      var $t=(($2+12)|0);
      var $token=(($t)|0);
      var $3=HEAP32[(($token)>>2)];
      if ((($3)|0)==40) {
        label = 3; break;
      }
      else if ((($3)|0)==123) {
        label = 7; break;
      }
      else if ((($3)|0)==289) {
        label = 8; break;
      }
      else {
      label = 9; break;
      }
      
    case 3: 
      var $4=$ls_addr;
      _luaX_next($4);
      var $5=$ls_addr;
      var $t2=(($5+12)|0);
      var $token3=(($t2)|0);
      var $6=HEAP32[(($token3)>>2)];
      var $cmp=(($6)|0)==41;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $k=(($args)|0);
      HEAP32[(($k)>>2)]=0;
      label = 6; break;
    case 5: 
      var $7=$ls_addr;
      var $call=_explist($7, $args);
      var $8=$fs;
      _luaK_setreturns($8, $args, -1);
      label = 6; break;
    case 6: 
      var $9=$ls_addr;
      var $10=$line_addr;
      _check_match($9, 41, 40, $10);
      label = 10; break;
    case 7: 
      var $11=$ls_addr;
      _constructor($11, $args);
      label = 10; break;
    case 8: 
      var $12=$ls_addr;
      var $13=$ls_addr;
      var $t6=(($13+12)|0);
      var $seminfo=(($t6+4)|0);
      var $ts=$seminfo;
      var $14=HEAP32[(($ts)>>2)];
      _codestring($12, $args, $14);
      var $15=$ls_addr;
      _luaX_next($15);
      label = 10; break;
    case 9: 
      var $16=$ls_addr;
      _luaX_syntaxerror($16, ((5251992)|0));

    case 10: 
      var $17=$f_addr;
      var $u=(($17+4)|0);
      var $info=$u;
      var $18=HEAP32[(($info)>>2)];
      $base=$18;
      var $k7=(($args)|0);
      var $19=HEAP32[(($k7)>>2)];
      var $cmp8=(($19)|0)==12;
      if ($cmp8) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $k9=(($args)|0);
      var $20=HEAP32[(($k9)>>2)];
      var $cmp10=(($20)|0)==13;
      if ($cmp10) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $nparams=-1;
      label = 16; break;
    case 13: 
      var $k13=(($args)|0);
      var $21=HEAP32[(($k13)>>2)];
      var $cmp14=(($21)|0)!=0;
      if ($cmp14) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $22=$fs;
      _luaK_exp2nextreg($22, $args);
      label = 15; break;
    case 15: 
      var $23=$fs;
      var $freereg=(($23+48)|0);
      var $24=HEAP8[($freereg)];
      var $conv=(($24)&255);
      var $25=$base;
      var $add=((($25)+(1))|0);
      var $sub=((($conv)-($add))|0);
      $nparams=$sub;
      label = 16; break;
    case 16: 
      var $26=$f_addr;
      var $27=$fs;
      var $28=$base;
      var $29=$nparams;
      var $add18=((($29)+(1))|0);
      var $call19=_luaK_codeABC($27, 29, $28, $add18, 2);
      _init_exp($26, 12, $call19);
      var $30=$fs;
      var $31=$line_addr;
      _luaK_fixline($30, $31);
      var $32=$base;
      var $add20=((($32)+(1))|0);
      var $conv21=(($add20) & 255);
      var $33=$fs;
      var $freereg22=(($33+48)|0);
      HEAP8[($freereg22)]=$conv21;
      STACKTOP = __stackBase__;
      return;
  }

}
_funcargs["X"]=1;

function _checkrepeated($fs, $ll, $label) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fs_addr;
      var $ll_addr;
      var $label_addr;
      var $i;
      var $msg;
      $fs_addr=$fs;
      $ll_addr=$ll;
      $label_addr=$label;
      var $0=$fs_addr;
      var $bl=(($0+16)|0);
      var $1=HEAP32[(($bl)>>2)];
      var $firstlabel=(($1+4)|0);
      var $2=HEAP16[(($firstlabel)>>1)];
      var $conv=(($2 << 16) >> 16);
      $i=$conv;
      label = 3; break;
    case 3: 
      var $3=$i;
      var $4=$ll_addr;
      var $n=(($4+4)|0);
      var $5=HEAP32[(($n)>>2)];
      var $cmp=(($3)|0) < (($5)|0);
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $6=$label_addr;
      var $7=$i;
      var $8=$ll_addr;
      var $arr=(($8)|0);
      var $9=HEAP32[(($arr)>>2)];
      var $arrayidx=(($9+($7<<4))|0);
      var $name=(($arrayidx)|0);
      var $10=HEAP32[(($name)>>2)];
      var $call=_luaS_eqstr($6, $10);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $11=$fs_addr;
      var $ls=(($11+12)|0);
      var $12=HEAP32[(($ls)>>2)];
      var $L=(($12+40)|0);
      var $13=HEAP32[(($L)>>2)];
      var $14=$label_addr;
      var $add_ptr=(($14+16)|0);
      var $15=$add_ptr;
      var $16=$i;
      var $17=$ll_addr;
      var $arr2=(($17)|0);
      var $18=HEAP32[(($arr2)>>2)];
      var $arrayidx3=(($18+($16<<4))|0);
      var $line=(($arrayidx3+8)|0);
      var $19=HEAP32[(($line)>>2)];
      var $call4=_luaO_pushfstring($13, ((5251604)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempInt)>>2)]=$15,HEAP32[(((tempInt)+(4))>>2)]=$19,tempInt));
      $msg=$call4;
      var $20=$fs_addr;
      var $ls5=(($20+12)|0);
      var $21=HEAP32[(($ls5)>>2)];
      var $22=$msg;
      _semerror($21, $22);

    case 6: 
      label = 7; break;
    case 7: 
      var $23=$i;
      var $inc=((($23)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
  }

}
_checkrepeated["X"]=1;

function _luaE_setdebt($g, $debt) {
  var label = 0;


  var $g_addr;
  var $debt_addr;
  $g_addr=$g;
  $debt_addr=$debt;
  var $0=$debt_addr;
  var $1=$g_addr;
  var $GCdebt=(($1+12)|0);
  var $2=HEAP32[(($GCdebt)>>2)];
  var $sub=((($0)-($2))|0);
  var $3=$g_addr;
  var $totalbytes=(($3+8)|0);
  var $4=HEAP32[(($totalbytes)>>2)];
  var $sub1=((($4)-($sub))|0);
  HEAP32[(($totalbytes)>>2)]=$sub1;
  var $5=$debt_addr;
  var $6=$g_addr;
  var $GCdebt2=(($6+12)|0);
  HEAP32[(($GCdebt2)>>2)]=$5;

  return;
}


function _preinit_state($L, $g) {
  var label = 0;


  var $L_addr;
  var $g_addr;
  $L_addr=$L;
  $g_addr=$g;
  var $0=$g_addr;
  var $1=$L_addr;
  var $l_G=(($1+12)|0);
  HEAP32[(($l_G)>>2)]=$0;
  var $2=$L_addr;
  var $stack=(($2+28)|0);
  HEAP32[(($stack)>>2)]=0;
  var $3=$L_addr;
  var $ci=(($3+16)|0);
  HEAP32[(($ci)>>2)]=0;
  var $4=$L_addr;
  var $stacksize=(($4+32)|0);
  HEAP32[(($stacksize)>>2)]=0;
  var $5=$L_addr;
  var $errorJmp=(($5+64)|0);
  HEAP32[(($errorJmp)>>2)]=0;
  var $6=$L_addr;
  var $nCcalls=(($6+38)|0);
  HEAP16[(($nCcalls)>>1)]=0;
  var $7=$L_addr;
  var $hook=(($7+52)|0);
  HEAP32[(($hook)>>2)]=0;
  var $8=$L_addr;
  var $hookmask=(($8+40)|0);
  HEAP8[($hookmask)]=0;
  var $9=$L_addr;
  var $basehookcount=(($9+44)|0);
  HEAP32[(($basehookcount)>>2)]=0;
  var $10=$L_addr;
  var $allowhook=(($10+41)|0);
  HEAP8[($allowhook)]=1;
  var $11=$L_addr;
  var $basehookcount1=(($11+44)|0);
  var $12=HEAP32[(($basehookcount1)>>2)];
  var $13=$L_addr;
  var $hookcount=(($13+48)|0);
  HEAP32[(($hookcount)>>2)]=$12;
  var $14=$L_addr;
  var $openupval=(($14+56)|0);
  HEAP32[(($openupval)>>2)]=0;
  var $15=$L_addr;
  var $nny=(($15+36)|0);
  HEAP16[(($nny)>>1)]=1;
  var $16=$L_addr;
  var $status=(($16+6)|0);
  HEAP8[($status)]=0;
  var $17=$L_addr;
  var $errfunc=(($17+68)|0);
  HEAP32[(($errfunc)>>2)]=0;

  return;
}
_preinit_state["X"]=1;

function _forlist($ls, $indexname) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; _memset(__stackBase__, 0, 20);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $indexname_addr;
      var $fs;
      var $e=__stackBase__;
      var $nvars;
      var $line;
      var $base;
      $ls_addr=$ls;
      $indexname_addr=$indexname;
      var $0=$ls_addr;
      var $fs1=(($0+36)|0);
      var $1=HEAP32[(($fs1)>>2)];
      $fs=$1;
      $nvars=4;
      var $2=$fs;
      var $freereg=(($2+48)|0);
      var $3=HEAP8[($freereg)];
      var $conv=(($3)&255);
      $base=$conv;
      var $4=$ls_addr;
      _new_localvarliteral_($4, ((5251228)|0), 15);
      var $5=$ls_addr;
      _new_localvarliteral_($5, ((5251024)|0), 11);
      var $6=$ls_addr;
      _new_localvarliteral_($6, ((5250780)|0), 13);
      var $7=$ls_addr;
      var $8=$indexname_addr;
      _new_localvar($7, $8);
      label = 3; break;
    case 3: 
      var $9=$ls_addr;
      var $call=_testnext($9, 44);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $10=$ls_addr;
      var $11=$ls_addr;
      var $call2=_str_checkname($11);
      _new_localvar($10, $call2);
      var $12=$nvars;
      var $inc=((($12)+(1))|0);
      $nvars=$inc;
      label = 3; break;
    case 5: 
      var $13=$ls_addr;
      _checknext($13, 268);
      var $14=$ls_addr;
      var $linenumber=(($14+4)|0);
      var $15=HEAP32[(($linenumber)>>2)];
      $line=$15;
      var $16=$ls_addr;
      var $17=$ls_addr;
      var $call3=_explist($17, $e);
      _adjust_assign($16, 3, $call3, $e);
      var $18=$fs;
      _luaK_checkstack($18, 3);
      var $19=$ls_addr;
      var $20=$base;
      var $21=$line;
      var $22=$nvars;
      var $sub=((($22)-(3))|0);
      _forbody($19, $20, $21, $sub, 0);
      STACKTOP = __stackBase__;
      return;
  }

}
_forlist["X"]=1;

function _forbody($ls, $base, $line, $nvars, $isnum) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; _memset(__stackBase__, 0, 12);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $base_addr;
      var $line_addr;
      var $nvars_addr;
      var $isnum_addr;
      var $bl=__stackBase__;
      var $fs;
      var $prep;
      var $endfor;
      $ls_addr=$ls;
      $base_addr=$base;
      $line_addr=$line;
      $nvars_addr=$nvars;
      $isnum_addr=$isnum;
      var $0=$ls_addr;
      var $fs1=(($0+36)|0);
      var $1=HEAP32[(($fs1)>>2)];
      $fs=$1;
      var $2=$ls_addr;
      _adjustlocalvars($2, 3);
      var $3=$ls_addr;
      _checknext($3, 259);
      var $4=$isnum_addr;
      var $tobool=(($4)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$fs;
      var $6=$base_addr;
      var $call=_luaK_codeABx($5, 33, $6, 131070);
      var $cond = $call;label = 5; break;
    case 4: 
      var $7=$fs;
      var $call2=_luaK_jump($7);
      var $cond = $call2;label = 5; break;
    case 5: 
      var $cond;
      $prep=$cond;
      var $8=$fs;
      _enterblock($8, $bl, 0);
      var $9=$ls_addr;
      var $10=$nvars_addr;
      _adjustlocalvars($9, $10);
      var $11=$fs;
      var $12=$nvars_addr;
      _luaK_reserveregs($11, $12);
      var $13=$ls_addr;
      _block($13);
      var $14=$fs;
      _leaveblock($14);
      var $15=$fs;
      var $16=$prep;
      _luaK_patchtohere($15, $16);
      var $17=$isnum_addr;
      var $tobool3=(($17)|0)!=0;
      if ($tobool3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $18=$fs;
      var $19=$base_addr;
      var $call4=_luaK_codeABx($18, 32, $19, 131070);
      $endfor=$call4;
      label = 8; break;
    case 7: 
      var $20=$fs;
      var $21=$base_addr;
      var $22=$nvars_addr;
      var $call5=_luaK_codeABC($20, 34, $21, 0, $22);
      var $23=$fs;
      var $24=$line_addr;
      _luaK_fixline($23, $24);
      var $25=$fs;
      var $26=$base_addr;
      var $add=((($26)+(2))|0);
      var $call6=_luaK_codeABx($25, 35, $add, 131070);
      $endfor=$call6;
      label = 8; break;
    case 8: 
      var $27=$fs;
      var $28=$endfor;
      var $29=$prep;
      var $add7=((($29)+(1))|0);
      _luaK_patchlist($27, $28, $add7);
      var $30=$fs;
      var $31=$line_addr;
      _luaK_fixline($30, $31);
      STACKTOP = __stackBase__;
      return;
  }

}
_forbody["X"]=1;

function _exp1($ls) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; _memset(__stackBase__, 0, 20);

  var $ls_addr;
  var $e=__stackBase__;
  var $reg;
  $ls_addr=$ls;
  var $0=$ls_addr;
  _expr($0, $e);
  var $1=$ls_addr;
  var $fs=(($1+36)|0);
  var $2=HEAP32[(($fs)>>2)];
  _luaK_exp2nextreg($2, $e);
  var $u=(($e+4)|0);
  var $info=$u;
  var $3=HEAP32[(($info)>>2)];
  $reg=$3;
  var $4=$reg;
  STACKTOP = __stackBase__;
  return $4;
}


function _test_then_block($ls, $escapelist) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; _memset(__stackBase__, 0, 32);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ls_addr;
      var $escapelist_addr;
      var $bl=__stackBase__;
      var $fs;
      var $v=(__stackBase__)+(12);
      var $jf;
      $ls_addr=$ls;
      $escapelist_addr=$escapelist;
      var $0=$ls_addr;
      var $fs1=(($0+36)|0);
      var $1=HEAP32[(($fs1)>>2)];
      $fs=$1;
      var $2=$ls_addr;
      _luaX_next($2);
      var $3=$ls_addr;
      _expr($3, $v);
      var $4=$ls_addr;
      _checknext($4, 275);
      var $5=$ls_addr;
      var $t=(($5+12)|0);
      var $token=(($t)|0);
      var $6=HEAP32[(($token)>>2)];
      var $cmp=(($6)|0)==266;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $7=$ls_addr;
      var $t2=(($7+12)|0);
      var $token3=(($t2)|0);
      var $8=HEAP32[(($token3)>>2)];
      var $cmp4=(($8)|0)==258;
      if ($cmp4) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $9=$ls_addr;
      var $fs5=(($9+36)|0);
      var $10=HEAP32[(($fs5)>>2)];
      _luaK_goiffalse($10, $v);
      var $11=$fs;
      _enterblock($11, $bl, 0);
      var $12=$ls_addr;
      var $t6=(($v+12)|0);
      var $13=HEAP32[(($t6)>>2)];
      _gotostat($12, $13);
      var $14=$ls_addr;
      _skipnoopstat($14);
      var $15=$ls_addr;
      var $call=_block_follow($15, 0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $16=$fs;
      _leaveblock($16);
      label = 13; break;
    case 6: 
      var $17=$fs;
      var $call8=_luaK_jump($17);
      $jf=$call8;
      label = 7; break;
    case 7: 
      label = 9; break;
    case 8: 
      var $18=$ls_addr;
      var $fs10=(($18+36)|0);
      var $19=HEAP32[(($fs10)>>2)];
      _luaK_goiftrue($19, $v);
      var $20=$fs;
      _enterblock($20, $bl, 0);
      var $f=(($v+16)|0);
      var $21=HEAP32[(($f)>>2)];
      $jf=$21;
      label = 9; break;
    case 9: 
      var $22=$ls_addr;
      _statlist($22);
      var $23=$fs;
      _leaveblock($23);
      var $24=$ls_addr;
      var $t12=(($24+12)|0);
      var $token13=(($t12)|0);
      var $25=HEAP32[(($token13)>>2)];
      var $cmp14=(($25)|0)==260;
      if ($cmp14) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $26=$ls_addr;
      var $t16=(($26+12)|0);
      var $token17=(($t16)|0);
      var $27=HEAP32[(($token17)>>2)];
      var $cmp18=(($27)|0)==261;
      if ($cmp18) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $28=$fs;
      var $29=$escapelist_addr;
      var $30=$fs;
      var $call20=_luaK_jump($30);
      _luaK_concat($28, $29, $call20);
      label = 12; break;
    case 12: 
      var $31=$fs;
      var $32=$jf;
      _luaK_patchtohere($31, $32);
      label = 13; break;
    case 13: 
      STACKTOP = __stackBase__;
      return;
  }

}
_test_then_block["X"]=1;

function _luaE_extendCI($L) {
  var label = 0;


  var $L_addr;
  var $ci;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_luaM_realloc_($0, 0, 0, 40);
  var $1=$call;
  $ci=$1;
  var $2=$ci;
  var $3=$L_addr;
  var $ci1=(($3+16)|0);
  var $4=HEAP32[(($ci1)>>2)];
  var $next=(($4+12)|0);
  HEAP32[(($next)>>2)]=$2;
  var $5=$L_addr;
  var $ci2=(($5+16)|0);
  var $6=HEAP32[(($ci2)>>2)];
  var $7=$ci;
  var $previous=(($7+8)|0);
  HEAP32[(($previous)>>2)]=$6;
  var $8=$ci;
  var $next3=(($8+12)|0);
  HEAP32[(($next3)>>2)]=0;
  var $9=$ci;

  return $9;
}


function _luaE_freeCI($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $ci;
      var $next;
      $L_addr=$L;
      var $0=$L_addr;
      var $ci1=(($0+16)|0);
      var $1=HEAP32[(($ci1)>>2)];
      $ci=$1;
      var $2=$ci;
      var $next2=(($2+12)|0);
      var $3=HEAP32[(($next2)>>2)];
      $next=$3;
      var $4=$ci;
      var $next3=(($4+12)|0);
      HEAP32[(($next3)>>2)]=0;
      label = 3; break;
    case 3: 
      var $5=$next;
      $ci=$5;
      var $cmp=(($5)|0)!=0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $6=$ci;
      var $next4=(($6+12)|0);
      var $7=HEAP32[(($next4)>>2)];
      $next=$7;
      var $8=$L_addr;
      var $9=$ci;
      var $10=$9;
      var $call=_luaM_realloc_($8, $10, 40, 0);
      label = 3; break;
    case 5: 

      return;
  }

}


function _lua_newthread($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $L1;
      var $io;
      $L_addr=$L;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      var $GCdebt=(($1+12)|0);
      var $2=HEAP32[(($GCdebt)>>2)];
      var $cmp=(($2)|0) > 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$L_addr;
      _luaC_step($3);
      label = 4; break;
    case 4: 
      var $4=$L_addr;
      var $call=_luaC_newobj($4, 8, 112, 0, 0);
      var $th=$call;
      $L1=$th;
      var $5=$L_addr;
      var $top=(($5+8)|0);
      var $6=HEAP32[(($top)>>2)];
      $io=$6;
      var $7=$L1;
      var $8=$7;
      var $9=$io;
      var $value_=(($9)|0);
      var $gc=$value_;
      HEAP32[(($gc)>>2)]=$8;
      var $10=$io;
      var $tt_=(($10+8)|0);
      HEAP32[(($tt_)>>2)]=72;
      var $11=$L_addr;
      var $top1=(($11+8)|0);
      var $12=HEAP32[(($top1)>>2)];
      var $incdec_ptr=(($12+12)|0);
      HEAP32[(($top1)>>2)]=$incdec_ptr;
      var $13=$L1;
      var $14=$L_addr;
      var $l_G2=(($14+12)|0);
      var $15=HEAP32[(($l_G2)>>2)];
      _preinit_state($13, $15);
      var $16=$L_addr;
      var $hookmask=(($16+40)|0);
      var $17=HEAP8[($hookmask)];
      var $18=$L1;
      var $hookmask3=(($18+40)|0);
      HEAP8[($hookmask3)]=$17;
      var $19=$L_addr;
      var $basehookcount=(($19+44)|0);
      var $20=HEAP32[(($basehookcount)>>2)];
      var $21=$L1;
      var $basehookcount4=(($21+44)|0);
      HEAP32[(($basehookcount4)>>2)]=$20;
      var $22=$L_addr;
      var $hook=(($22+52)|0);
      var $23=HEAP32[(($hook)>>2)];
      var $24=$L1;
      var $hook5=(($24+52)|0);
      HEAP32[(($hook5)>>2)]=$23;
      var $25=$L1;
      var $basehookcount6=(($25+44)|0);
      var $26=HEAP32[(($basehookcount6)>>2)];
      var $27=$L1;
      var $hookcount=(($27+48)|0);
      HEAP32[(($hookcount)>>2)]=$26;
      var $28=$L_addr;
      var $29=$L1;
      var $30=$L_addr;
      _stack_init($29, $30);
      var $31=$L1;

      return $31;
  }

}
_lua_newthread["X"]=1;

function _stack_init($L1, $L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L1_addr;
      var $L_addr;
      var $i;
      var $ci;
      $L1_addr=$L1;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_luaM_realloc_($0, 0, 0, 480);
      var $1=$call;
      var $2=$L1_addr;
      var $stack=(($2+28)|0);
      HEAP32[(($stack)>>2)]=$1;
      var $3=$L1_addr;
      var $stacksize=(($3+32)|0);
      HEAP32[(($stacksize)>>2)]=40;
      $i=0;
      label = 3; break;
    case 3: 
      var $4=$i;
      var $cmp=(($4)|0) < 40;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $5=$L1_addr;
      var $stack1=(($5+28)|0);
      var $6=HEAP32[(($stack1)>>2)];
      var $7=$i;
      var $add_ptr=(($6+((($7)*(12))&-1))|0);
      var $tt_=(($add_ptr+8)|0);
      HEAP32[(($tt_)>>2)]=0;
      label = 5; break;
    case 5: 
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $9=$L1_addr;
      var $stack2=(($9+28)|0);
      var $10=HEAP32[(($stack2)>>2)];
      var $11=$L1_addr;
      var $top=(($11+8)|0);
      HEAP32[(($top)>>2)]=$10;
      var $12=$L1_addr;
      var $stack3=(($12+28)|0);
      var $13=HEAP32[(($stack3)>>2)];
      var $14=$L1_addr;
      var $stacksize4=(($14+32)|0);
      var $15=HEAP32[(($stacksize4)>>2)];
      var $add_ptr5=(($13+((($15)*(12))&-1))|0);
      var $add_ptr6=((($add_ptr5)-(60))|0);
      var $16=$L1_addr;
      var $stack_last=(($16+24)|0);
      HEAP32[(($stack_last)>>2)]=$add_ptr6;
      var $17=$L1_addr;
      var $base_ci=(($17+72)|0);
      $ci=$base_ci;
      var $18=$ci;
      var $previous=(($18+8)|0);
      HEAP32[(($previous)>>2)]=0;
      var $19=$ci;
      var $next=(($19+12)|0);
      HEAP32[(($next)>>2)]=0;
      var $20=$ci;
      var $callstatus=(($20+18)|0);
      HEAP8[($callstatus)]=0;
      var $21=$L1_addr;
      var $top7=(($21+8)|0);
      var $22=HEAP32[(($top7)>>2)];
      var $23=$ci;
      var $func=(($23)|0);
      HEAP32[(($func)>>2)]=$22;
      var $24=$L1_addr;
      var $top8=(($24+8)|0);
      var $25=HEAP32[(($top8)>>2)];
      var $incdec_ptr=(($25+12)|0);
      HEAP32[(($top8)>>2)]=$incdec_ptr;
      var $tt_9=(($25+8)|0);
      HEAP32[(($tt_9)>>2)]=0;
      var $26=$L1_addr;
      var $top10=(($26+8)|0);
      var $27=HEAP32[(($top10)>>2)];
      var $add_ptr11=(($27+240)|0);
      var $28=$ci;
      var $top12=(($28+4)|0);
      HEAP32[(($top12)>>2)]=$add_ptr11;
      var $29=$ci;
      var $30=$L1_addr;
      var $ci13=(($30+16)|0);
      HEAP32[(($ci13)>>2)]=$29;

      return;
  }

}
_stack_init["X"]=1;

function _luaE_freethread($L, $L1) {
  var label = 0;


  var $L_addr;
  var $L1_addr;
  var $l;
  $L_addr=$L;
  $L1_addr=$L1;
  var $0=$L1_addr;
  var $1=$0;
  var $add_ptr=(($1)|0);
  var $2=$add_ptr;
  $l=$2;
  var $3=$L1_addr;
  var $4=$L1_addr;
  var $stack=(($4+28)|0);
  var $5=HEAP32[(($stack)>>2)];
  _luaF_close($3, $5);
  var $6=$L_addr;
  var $7=$L1_addr;
  _freestack($7);
  var $8=$L_addr;
  var $9=$l;
  var $10=$9;
  var $call=_luaM_realloc_($8, $10, 112, 0);

  return;
}


function _freestack($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      $L_addr=$L;
      var $0=$L_addr;
      var $stack=(($0+28)|0);
      var $1=HEAP32[(($stack)>>2)];
      var $cmp=(($1)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      var $2=$L_addr;
      var $base_ci=(($2+72)|0);
      var $3=$L_addr;
      var $ci=(($3+16)|0);
      HEAP32[(($ci)>>2)]=$base_ci;
      var $4=$L_addr;
      _luaE_freeCI($4);
      var $5=$L_addr;
      var $6=$L_addr;
      var $stack1=(($6+28)|0);
      var $7=HEAP32[(($stack1)>>2)];
      var $8=$7;
      var $9=$L_addr;
      var $stacksize=(($9+32)|0);
      var $10=HEAP32[(($stacksize)>>2)];
      var $mul=((($10)*(12))&-1);
      var $call=_luaM_realloc_($5, $8, $mul, 0);
      label = 5; break;
    case 5: 

      return;
  }

}


function _lua_newstate($f, $ud) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $f_addr;
      var $ud_addr;
      var $i;
      var $L;
      var $g;
      var $l;
      $f_addr=$f;
      $ud_addr=$ud;
      var $0=$f_addr;
      var $1=$ud_addr;
      var $call=FUNCTION_TABLE[$0]($1, 0, 8, 380);
      var $2=$call;
      $l=$2;
      var $3=$l;
      var $cmp=(($3)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 12; break;
    case 4: 
      var $4=$l;
      var $l1=(($4)|0);
      var $l2=(($l1)|0);
      $L=$l2;
      var $5=$l;
      var $g3=(($5+112)|0);
      $g=$g3;
      var $6=$L;
      var $next=(($6)|0);
      HEAP32[(($next)>>2)]=0;
      var $7=$L;
      var $tt=(($7+4)|0);
      HEAP8[($tt)]=8;
      var $8=$g;
      var $currentwhite=(($8+52)|0);
      HEAP8[($currentwhite)]=33;
      var $9=$g;
      var $currentwhite4=(($9+52)|0);
      var $10=HEAP8[($currentwhite4)];
      var $conv=(($10)&255);
      var $and=$conv & 3;
      var $conv5=(($and) & 255);
      var $11=$L;
      var $marked=(($11+5)|0);
      HEAP8[($marked)]=$conv5;
      var $12=$g;
      var $gckind=(($12+54)|0);
      HEAP8[($gckind)]=0;
      var $13=$L;
      var $14=$g;
      _preinit_state($13, $14);
      var $15=$f_addr;
      var $16=$g;
      var $frealloc=(($16)|0);
      HEAP32[(($frealloc)>>2)]=$15;
      var $17=$ud_addr;
      var $18=$g;
      var $ud6=(($18+4)|0);
      HEAP32[(($ud6)>>2)]=$17;
      var $19=$L;
      var $20=$g;
      var $mainthread=(($20+152)|0);
      HEAP32[(($mainthread)>>2)]=$19;
      var $21=$L;
      var $call7=_makeseed($21);
      var $22=$g;
      var $seed=(($22+48)|0);
      HEAP32[(($seed)>>2)]=$call7;
      var $23=$g;
      var $uvhead=(($23+100)|0);
      var $24=$g;
      var $uvhead8=(($24+100)|0);
      var $u=(($uvhead8+12)|0);
      var $l9=$u;
      var $prev=(($l9)|0);
      HEAP32[(($prev)>>2)]=$uvhead;
      var $25=$g;
      var $uvhead10=(($25+100)|0);
      var $26=$g;
      var $uvhead11=(($26+100)|0);
      var $u12=(($uvhead11+12)|0);
      var $l13=$u12;
      var $next14=(($l13+4)|0);
      HEAP32[(($next14)>>2)]=$uvhead10;
      var $27=$g;
      var $gcrunning=(($27+55)|0);
      HEAP8[($gcrunning)]=0;
      var $28=$g;
      var $GCestimate=(($28+20)|0);
      HEAP32[(($GCestimate)>>2)]=0;
      var $29=$g;
      var $strt=(($29+24)|0);
      var $size=(($strt+8)|0);
      HEAP32[(($size)>>2)]=0;
      var $30=$g;
      var $strt15=(($30+24)|0);
      var $nuse=(($strt15+4)|0);
      HEAP32[(($nuse)>>2)]=0;
      var $31=$g;
      var $strt16=(($31+24)|0);
      var $hash=(($strt16)|0);
      HEAP32[(($hash)>>2)]=0;
      var $32=$g;
      var $l_registry=(($32+36)|0);
      var $tt_=(($l_registry+8)|0);
      HEAP32[(($tt_)>>2)]=0;
      var $33=$g;
      var $buff=(($33+124)|0);
      var $buffer=(($buff)|0);
      HEAP32[(($buffer)>>2)]=0;
      var $34=$g;
      var $buff17=(($34+124)|0);
      var $buffsize=(($buff17+8)|0);
      HEAP32[(($buffsize)>>2)]=0;
      var $35=$g;
      var $panic=(($35+148)|0);
      HEAP32[(($panic)>>2)]=0;
      var $call18=_lua_version(0);
      var $36=$g;
      var $version=(($36+156)|0);
      HEAP32[(($version)>>2)]=$call18;
      var $37=$g;
      var $gcstate=(($37+53)|0);
      HEAP8[($gcstate)]=5;
      var $38=$g;
      var $allgc=(($38+60)|0);
      HEAP32[(($allgc)>>2)]=0;
      var $39=$g;
      var $finobj=(($39+64)|0);
      HEAP32[(($finobj)>>2)]=0;
      var $40=$g;
      var $tobefnz=(($40+96)|0);
      HEAP32[(($tobefnz)>>2)]=0;
      var $41=$g;
      var $sweepfin=(($41+72)|0);
      HEAP32[(($sweepfin)>>2)]=0;
      var $42=$g;
      var $sweepgc=(($42+68)|0);
      HEAP32[(($sweepgc)>>2)]=0;
      var $43=$g;
      var $grayagain=(($43+80)|0);
      HEAP32[(($grayagain)>>2)]=0;
      var $44=$g;
      var $gray=(($44+76)|0);
      HEAP32[(($gray)>>2)]=0;
      var $45=$g;
      var $allweak=(($45+92)|0);
      HEAP32[(($allweak)>>2)]=0;
      var $46=$g;
      var $ephemeron=(($46+88)|0);
      HEAP32[(($ephemeron)>>2)]=0;
      var $47=$g;
      var $weak=(($47+84)|0);
      HEAP32[(($weak)>>2)]=0;
      var $48=$g;
      var $totalbytes=(($48+8)|0);
      HEAP32[(($totalbytes)>>2)]=380;
      var $49=$g;
      var $GCdebt=(($49+12)|0);
      HEAP32[(($GCdebt)>>2)]=0;
      var $50=$g;
      var $gcpause=(($50+136)|0);
      HEAP32[(($gcpause)>>2)]=200;
      var $51=$g;
      var $gcmajorinc=(($51+140)|0);
      HEAP32[(($gcmajorinc)>>2)]=200;
      var $52=$g;
      var $gcstepmul=(($52+144)|0);
      HEAP32[(($gcstepmul)>>2)]=200;
      $i=0;
      label = 5; break;
    case 5: 
      var $53=$i;
      var $cmp19=(($53)|0) < 9;
      if ($cmp19) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $54=$i;
      var $55=$g;
      var $mt=(($55+232)|0);
      var $arrayidx=(($mt+($54<<2))|0);
      HEAP32[(($arrayidx)>>2)]=0;
      label = 7; break;
    case 7: 
      var $56=$i;
      var $inc=((($56)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      var $57=$L;
      var $call21=_luaD_rawrunprotected($57, 90, 0);
      var $cmp22=(($call21)|0)!=0;
      if ($cmp22) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $58=$L;
      _close_state($58);
      $L=0;
      label = 11; break;
    case 10: 
      var $59=$L;
      label = 11; break;
    case 11: 
      var $60=$L;
      $retval=$60;
      label = 12; break;
    case 12: 
      var $61=$retval;

      return $61;
  }

}
_lua_newstate["X"]=1;

function _makeseed($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; _memset(__stackBase__, 0, 36);

  var $L_addr;
  var $buff=__stackBase__;
  var $h=(__stackBase__)+(16);
  var $p;
  var $t=(__stackBase__)+(20);
  var $t1=(__stackBase__)+(24);
  var $t5=(__stackBase__)+(28);
  var $t9=(__stackBase__)+(32);
  $L_addr=$L;
  var $call=_time(0);
  HEAP32[(($h)>>2)]=$call;
  $p=0;
  var $0=$L_addr;
  var $1=$0;
  HEAP32[(($t)>>2)]=$1;
  var $arraydecay=(($buff)|0);
  var $2=$p;
  var $add_ptr=(($arraydecay+$2)|0);
  var $3=$t;
  HEAP8[($add_ptr)]=HEAP8[($3)];HEAP8[((($add_ptr)+(1))|0)]=HEAP8[((($3)+(1))|0)];HEAP8[((($add_ptr)+(2))|0)]=HEAP8[((($3)+(2))|0)];HEAP8[((($add_ptr)+(3))|0)]=HEAP8[((($3)+(3))|0)];
  var $4=$p;
  var $add=((($4)+(4))|0);
  $p=$add;
  var $5=$h;
  HEAP32[(($t1)>>2)]=$5;
  var $arraydecay2=(($buff)|0);
  var $6=$p;
  var $add_ptr3=(($arraydecay2+$6)|0);
  var $7=$t1;
  HEAP8[($add_ptr3)]=HEAP8[($7)];HEAP8[((($add_ptr3)+(1))|0)]=HEAP8[((($7)+(1))|0)];HEAP8[((($add_ptr3)+(2))|0)]=HEAP8[((($7)+(2))|0)];HEAP8[((($add_ptr3)+(3))|0)]=HEAP8[((($7)+(3))|0)];
  var $8=$p;
  var $add4=((($8)+(4))|0);
  $p=$add4;
  HEAP32[(($t5)>>2)]=5244092;
  var $arraydecay6=(($buff)|0);
  var $9=$p;
  var $add_ptr7=(($arraydecay6+$9)|0);
  var $10=$t5;
  HEAP8[($add_ptr7)]=HEAP8[($10)];HEAP8[((($add_ptr7)+(1))|0)]=HEAP8[((($10)+(1))|0)];HEAP8[((($add_ptr7)+(2))|0)]=HEAP8[((($10)+(2))|0)];HEAP8[((($add_ptr7)+(3))|0)]=HEAP8[((($10)+(3))|0)];
  var $11=$p;
  var $add8=((($11)+(4))|0);
  $p=$add8;
  HEAP32[(($t9)>>2)]=(222);
  var $arraydecay10=(($buff)|0);
  var $12=$p;
  var $add_ptr11=(($arraydecay10+$12)|0);
  var $13=$t9;
  HEAP8[($add_ptr11)]=HEAP8[($13)];HEAP8[((($add_ptr11)+(1))|0)]=HEAP8[((($13)+(1))|0)];HEAP8[((($add_ptr11)+(2))|0)]=HEAP8[((($13)+(2))|0)];HEAP8[((($add_ptr11)+(3))|0)]=HEAP8[((($13)+(3))|0)];
  var $14=$p;
  var $add12=((($14)+(4))|0);
  $p=$add12;
  var $arraydecay13=(($buff)|0);
  var $15=$p;
  var $16=HEAP32[(($h)>>2)];
  var $call14=_luaS_hash($arraydecay13, $15, $16);
  STACKTOP = __stackBase__;
  return $call14;
}
_makeseed["X"]=1;

function _luaS_hash($str, $l, $seed) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $str_addr;
      var $l_addr;
      var $seed_addr;
      var $h;
      var $l1;
      var $step;
      $str_addr=$str;
      $l_addr=$l;
      $seed_addr=$seed;
      var $0=$seed_addr;
      var $1=$l_addr;
      var $xor=$0 ^ $1;
      $h=$xor;
      var $2=$l_addr;
      var $shr=$2 >>> 5;
      var $add=((($shr)+(1))|0);
      $step=$add;
      var $3=$l_addr;
      $l1=$3;
      label = 3; break;
    case 3: 
      var $4=$l1;
      var $5=$step;
      var $cmp=(($4)>>>0) >= (($5)>>>0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $6=$h;
      var $7=$h;
      var $shl=$7 << 5;
      var $8=$h;
      var $shr1=$8 >>> 2;
      var $add2=((($shl)+($shr1))|0);
      var $9=$l1;
      var $sub=((($9)-(1))|0);
      var $10=$str_addr;
      var $arrayidx=(($10+$sub)|0);
      var $11=HEAP8[($arrayidx)];
      var $conv=(($11)&255);
      var $add3=((($add2)+($conv))|0);
      var $xor4=$6 ^ $add3;
      $h=$xor4;
      label = 5; break;
    case 5: 
      var $12=$step;
      var $13=$l1;
      var $sub5=((($13)-($12))|0);
      $l1=$sub5;
      label = 3; break;
    case 6: 
      var $14=$h;

      return $14;
  }

}


function _f_luaopen($L, $ud) {
  var label = 0;


  var $L_addr;
  var $ud_addr;
  var $g;
  $L_addr=$L;
  $ud_addr=$ud;
  var $0=$L_addr;
  var $l_G=(($0+12)|0);
  var $1=HEAP32[(($l_G)>>2)];
  $g=$1;
  var $2=$ud_addr;
  var $3=$L_addr;
  var $4=$L_addr;
  _stack_init($3, $4);
  var $5=$L_addr;
  var $6=$g;
  _init_registry($5, $6);
  var $7=$L_addr;
  _luaS_resize($7, 32);
  var $8=$L_addr;
  _luaT_init($8);
  var $9=$L_addr;
  _luaX_init($9);
  var $10=$L_addr;
  var $call=_luaS_newlstr($10, ((5251172)|0), 17);
  var $11=$g;
  var $memerrmsg=(($11+160)|0);
  HEAP32[(($memerrmsg)>>2)]=$call;
  var $12=$g;
  var $memerrmsg1=(($12+160)|0);
  var $13=HEAP32[(($memerrmsg1)>>2)];
  var $tsv=$13;
  var $marked=(($tsv+5)|0);
  var $14=HEAP8[($marked)];
  var $conv=(($14)&255);
  var $or=$conv | 32;
  var $conv2=(($or) & 255);
  HEAP8[($marked)]=$conv2;
  var $15=$g;
  var $gcrunning=(($15+55)|0);
  HEAP8[($gcrunning)]=1;

  return;
}


function _close_state($L) {
  var label = 0;


  var $L_addr;
  var $g;
  $L_addr=$L;
  var $0=$L_addr;
  var $l_G=(($0+12)|0);
  var $1=HEAP32[(($l_G)>>2)];
  $g=$1;
  var $2=$L_addr;
  var $3=$L_addr;
  var $stack=(($3+28)|0);
  var $4=HEAP32[(($stack)>>2)];
  _luaF_close($2, $4);
  var $5=$L_addr;
  _luaC_freeallobjects($5);
  var $6=$L_addr;
  var $7=$L_addr;
  var $l_G1=(($7+12)|0);
  var $8=HEAP32[(($l_G1)>>2)];
  var $strt=(($8+24)|0);
  var $hash=(($strt)|0);
  var $9=HEAP32[(($hash)>>2)];
  var $10=$9;
  var $11=$L_addr;
  var $l_G2=(($11+12)|0);
  var $12=HEAP32[(($l_G2)>>2)];
  var $strt3=(($12+24)|0);
  var $size=(($strt3+8)|0);
  var $13=HEAP32[(($size)>>2)];
  var $mul=($13<<2);
  var $call=_luaM_realloc_($6, $10, $mul, 0);
  var $14=$L_addr;
  var $15=$g;
  var $buff=(($15+124)|0);
  var $buffer=(($buff)|0);
  var $16=HEAP32[(($buffer)>>2)];
  var $17=$g;
  var $buff4=(($17+124)|0);
  var $buffsize=(($buff4+8)|0);
  var $18=HEAP32[(($buffsize)>>2)];
  var $mul5=$18;
  var $call6=_luaM_realloc_($14, $16, $mul5, 0);
  var $19=$g;
  var $buff7=(($19+124)|0);
  var $buffer8=(($buff7)|0);
  HEAP32[(($buffer8)>>2)]=$call6;
  var $20=$g;
  var $buff9=(($20+124)|0);
  var $buffsize10=(($buff9+8)|0);
  HEAP32[(($buffsize10)>>2)]=0;
  var $21=$L_addr;
  _freestack($21);
  var $22=$g;
  var $frealloc=(($22)|0);
  var $23=HEAP32[(($frealloc)>>2)];
  var $24=$g;
  var $ud=(($24+4)|0);
  var $25=HEAP32[(($ud)>>2)];
  var $26=$L_addr;
  var $27=$26;
  var $add_ptr=(($27)|0);
  var $28=$add_ptr;
  var $29=$28;
  var $call11=FUNCTION_TABLE[$23]($25, $29, 380, 0);

  return;
}
_close_state["X"]=1;

function _lua_close($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $l_G=(($0+12)|0);
  var $1=HEAP32[(($l_G)>>2)];
  var $mainthread=(($1+152)|0);
  var $2=HEAP32[(($mainthread)>>2)];
  $L_addr=$2;
  var $3=$L_addr;
  var $4=$L_addr;
  _close_state($4);

  return;
}


function _init_registry($L, $g) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; _memset(__stackBase__, 0, 12);

  var $L_addr;
  var $g_addr;
  var $mt=__stackBase__;
  var $registry;
  var $io;
  var $io1;
  var $io5;
  $L_addr=$L;
  $g_addr=$g;
  var $0=$L_addr;
  var $call=_luaH_new($0);
  $registry=$call;
  var $1=$g_addr;
  var $l_registry=(($1+36)|0);
  $io=$l_registry;
  var $2=$registry;
  var $3=$2;
  var $4=$io;
  var $value_=(($4)|0);
  var $gc=$value_;
  HEAP32[(($gc)>>2)]=$3;
  var $5=$io;
  var $tt_=(($5+8)|0);
  HEAP32[(($tt_)>>2)]=69;
  var $6=$L_addr;
  var $7=$registry;
  _luaH_resize($6, $7, 2, 0);
  $io1=$mt;
  var $8=$L_addr;
  var $9=$8;
  var $10=$io1;
  var $value_2=(($10)|0);
  var $gc3=$value_2;
  HEAP32[(($gc3)>>2)]=$9;
  var $11=$io1;
  var $tt_4=(($11+8)|0);
  HEAP32[(($tt_4)>>2)]=72;
  var $12=$L_addr;
  var $13=$registry;
  _luaH_setint($12, $13, 1, $mt);
  $io5=$mt;
  var $14=$L_addr;
  var $call6=_luaH_new($14);
  var $15=$call6;
  var $16=$io5;
  var $value_7=(($16)|0);
  var $gc8=$value_7;
  HEAP32[(($gc8)>>2)]=$15;
  var $17=$io5;
  var $tt_9=(($17+8)|0);
  HEAP32[(($tt_9)>>2)]=69;
  var $18=$L_addr;
  var $19=$registry;
  _luaH_setint($18, $19, 2, $mt);
  STACKTOP = __stackBase__;
  return;
}
_init_registry["X"]=1;

function _luaS_eqlngstr($a, $b) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $b_addr;
      var $len;
      $a_addr=$a;
      $b_addr=$b;
      var $0=$a_addr;
      var $tsv=$0;
      var $len1=(($tsv+12)|0);
      var $1=HEAP32[(($len1)>>2)];
      $len=$1;
      var $2=$a_addr;
      var $3=$b_addr;
      var $cmp=(($2)|0)==(($3)|0);
      if ($cmp) { var $13 = 1;label = 6; break; } else { label = 3; break; }
    case 3: 
      var $4=$len;
      var $5=$b_addr;
      var $tsv2=$5;
      var $len3=(($tsv2+12)|0);
      var $6=HEAP32[(($len3)>>2)];
      var $cmp4=(($4)|0)==(($6)|0);
      if ($cmp4) { label = 4; break; } else { var $12 = 0;label = 5; break; }
    case 4: 
      var $7=$a_addr;
      var $add_ptr=(($7+16)|0);
      var $8=$add_ptr;
      var $9=$b_addr;
      var $add_ptr5=(($9+16)|0);
      var $10=$add_ptr5;
      var $11=$len;
      var $call=_memcmp($8, $10, $11);
      var $cmp6=(($call)|0)==0;
      var $12 = $cmp6;label = 5; break;
    case 5: 
      var $12;
      var $13 = $12;label = 6; break;
    case 6: 
      var $13;
      var $lor_ext=(($13)&1);

      return $lor_ext;
  }

}


function _luaS_eqstr($a, $b) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $b_addr;
      $a_addr=$a;
      $b_addr=$b;
      var $0=$a_addr;
      var $tsv=$0;
      var $tt=(($tsv+4)|0);
      var $1=HEAP8[($tt)];
      var $conv=(($1)&255);
      var $2=$b_addr;
      var $tsv1=$2;
      var $tt2=(($tsv1+4)|0);
      var $3=HEAP8[($tt2)];
      var $conv3=(($3)&255);
      var $cmp=(($conv)|0)==(($conv3)|0);
      if ($cmp) { label = 3; break; } else { var $10 = 0;label = 7; break; }
    case 3: 
      var $4=$a_addr;
      var $tsv5=$4;
      var $tt6=(($tsv5+4)|0);
      var $5=HEAP8[($tt6)];
      var $conv7=(($5)&255);
      var $cmp8=(($conv7)|0)==4;
      if ($cmp8) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $6=$a_addr;
      var $7=$b_addr;
      var $cmp10=(($6)|0)==(($7)|0);
      var $conv11=(($cmp10)&1);
      var $cond = $conv11;label = 6; break;
    case 5: 
      var $8=$a_addr;
      var $9=$b_addr;
      var $call=_luaS_eqlngstr($8, $9);
      var $cond = $call;label = 6; break;
    case 6: 
      var $cond;
      var $tobool=(($cond)|0)!=0;
      var $10 = $tobool;label = 7; break;
    case 7: 
      var $10;
      var $land_ext=(($10)&1);

      return $land_ext;
  }

}


function _internshrstr($L, $str, $l) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $str_addr;
      var $l_addr;
      var $o;
      var $g;
      var $h;
      var $ts;
      $L_addr=$L;
      $str_addr=$str;
      $l_addr=$l;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      $g=$1;
      var $2=$str_addr;
      var $3=$l_addr;
      var $4=$g;
      var $seed=(($4+48)|0);
      var $5=HEAP32[(($seed)>>2)];
      var $call=_luaS_hash($2, $3, $5);
      $h=$call;
      var $6=$h;
      var $7=$g;
      var $strt=(($7+24)|0);
      var $size=(($strt+8)|0);
      var $8=HEAP32[(($size)>>2)];
      var $sub=((($8)-(1))|0);
      var $and=$6 & $sub;
      var $9=$g;
      var $strt1=(($9+24)|0);
      var $hash=(($strt1)|0);
      var $10=HEAP32[(($hash)>>2)];
      var $arrayidx=(($10+($and<<2))|0);
      var $11=HEAP32[(($arrayidx)>>2)];
      $o=$11;
      label = 3; break;
    case 3: 
      var $12=$o;
      var $cmp=(($12)|0)!=0;
      if ($cmp) { label = 4; break; } else { label = 12; break; }
    case 4: 
      var $13=$o;
      var $ts2=$13;
      $ts=$ts2;
      var $14=$h;
      var $15=$ts;
      var $tsv=$15;
      var $hash3=(($tsv+8)|0);
      var $16=HEAP32[(($hash3)>>2)];
      var $cmp4=(($14)|0)==(($16)|0);
      if ($cmp4) { label = 5; break; } else { label = 10; break; }
    case 5: 
      var $17=$ts;
      var $tsv5=$17;
      var $len=(($tsv5+12)|0);
      var $18=HEAP32[(($len)>>2)];
      var $19=$l_addr;
      var $cmp6=(($18)|0)==(($19)|0);
      if ($cmp6) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $20=$str_addr;
      var $21=$ts;
      var $add_ptr=(($21+16)|0);
      var $22=$add_ptr;
      var $23=$l_addr;
      var $mul=$23;
      var $call8=_memcmp($20, $22, $mul);
      var $cmp9=(($call8)|0)==0;
      if ($cmp9) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $24=$o;
      var $gch=$24;
      var $marked=(($gch+5)|0);
      var $25=HEAP8[($marked)];
      var $conv=(($25)&255);
      var $xor=$conv ^ 3;
      var $26=$L_addr;
      var $l_G10=(($26+12)|0);
      var $27=HEAP32[(($l_G10)>>2)];
      var $currentwhite=(($27+52)|0);
      var $28=HEAP8[($currentwhite)];
      var $conv11=(($28)&255);
      var $xor12=$conv11 ^ 3;
      var $and13=$xor & $xor12;
      var $tobool=(($and13)|0)!=0;
      if ($tobool) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $29=$o;
      var $gch15=$29;
      var $marked16=(($gch15+5)|0);
      var $30=HEAP8[($marked16)];
      var $conv17=(($30)&255);
      var $xor18=$conv17 ^ 3;
      var $conv19=(($xor18) & 255);
      HEAP8[($marked16)]=$conv19;
      label = 9; break;
    case 9: 
      var $31=$ts;
      $retval=$31;
      label = 13; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $32=$o;
      var $gch21=$32;
      var $next=(($gch21)|0);
      var $33=HEAP32[(($next)>>2)];
      $o=$33;
      label = 3; break;
    case 12: 
      var $34=$L_addr;
      var $35=$str_addr;
      var $36=$l_addr;
      var $37=$h;
      var $call22=_newshrstr($34, $35, $36, $37);
      $retval=$call22;
      label = 13; break;
    case 13: 
      var $38=$retval;

      return $38;
  }

}
_internshrstr["X"]=1;

function _createstrobj($L, $str, $l, $tag, $h, $list) {
  var label = 0;


  var $L_addr;
  var $str_addr;
  var $l_addr;
  var $tag_addr;
  var $h_addr;
  var $list_addr;
  var $ts;
  var $totalsize;
  $L_addr=$L;
  $str_addr=$str;
  $l_addr=$l;
  $tag_addr=$tag;
  $h_addr=$h;
  $list_addr=$list;
  var $0=$l_addr;
  var $add=((($0)+(1))|0);
  var $mul=$add;
  var $add1=((($mul)+(16))|0);
  $totalsize=$add1;
  var $1=$L_addr;
  var $2=$tag_addr;
  var $3=$totalsize;
  var $4=$list_addr;
  var $call=_luaC_newobj($1, $2, $3, $4, 0);
  var $ts2=$call;
  $ts=$ts2;
  var $5=$l_addr;
  var $6=$ts;
  var $tsv=$6;
  var $len=(($tsv+12)|0);
  HEAP32[(($len)>>2)]=$5;
  var $7=$h_addr;
  var $8=$ts;
  var $tsv3=$8;
  var $hash=(($tsv3+8)|0);
  HEAP32[(($hash)>>2)]=$7;
  var $9=$ts;
  var $tsv4=$9;
  var $extra=(($tsv4+6)|0);
  HEAP8[($extra)]=0;
  var $10=$ts;
  var $add_ptr=(($10+16)|0);
  var $11=$add_ptr;
  var $12=$str_addr;
  var $13=$l_addr;
  var $mul5=$13;
  _memcpy($11, $12, $mul5);
  var $14=$l_addr;
  var $15=$ts;
  var $add_ptr6=(($15+16)|0);
  var $16=$add_ptr6;
  var $arrayidx=(($16+$14)|0);
  HEAP8[($arrayidx)]=0;
  var $17=$ts;

  return $17;
}
_createstrobj["X"]=1;

function _luaS_new($L, $str) {
  var label = 0;


  var $L_addr;
  var $str_addr;
  $L_addr=$L;
  $str_addr=$str;
  var $0=$L_addr;
  var $1=$str_addr;
  var $2=$str_addr;
  var $call=_strlen($2);
  var $call1=_luaS_newlstr($0, $1, $call);

  return $call1;
}


function _newshrstr($L, $str, $l, $h) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $str_addr;
      var $l_addr;
      var $h_addr;
      var $list;
      var $tb;
      var $s;
      $L_addr=$L;
      $str_addr=$str;
      $l_addr=$l;
      $h_addr=$h;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      var $strt=(($1+24)|0);
      $tb=$strt;
      var $2=$tb;
      var $nuse=(($2+4)|0);
      var $3=HEAP32[(($nuse)>>2)];
      var $4=$tb;
      var $size=(($4+8)|0);
      var $5=HEAP32[(($size)>>2)];
      var $cmp=(($3)>>>0) >= (($5)>>>0);
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $6=$tb;
      var $size1=(($6+8)|0);
      var $7=HEAP32[(($size1)>>2)];
      var $cmp2=(($7)|0) <= 1073741822;
      if ($cmp2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $8=$L_addr;
      var $9=$tb;
      var $size3=(($9+8)|0);
      var $10=HEAP32[(($size3)>>2)];
      var $mul=($10<<1);
      _luaS_resize($8, $mul);
      label = 5; break;
    case 5: 
      var $11=$h_addr;
      var $12=$tb;
      var $size4=(($12+8)|0);
      var $13=HEAP32[(($size4)>>2)];
      var $sub=((($13)-(1))|0);
      var $and=$11 & $sub;
      var $14=$tb;
      var $hash=(($14)|0);
      var $15=HEAP32[(($hash)>>2)];
      var $arrayidx=(($15+($and<<2))|0);
      $list=$arrayidx;
      var $16=$L_addr;
      var $17=$str_addr;
      var $18=$l_addr;
      var $19=$h_addr;
      var $20=$list;
      var $call=_createstrobj($16, $17, $18, 4, $19, $20);
      $s=$call;
      var $21=$tb;
      var $nuse5=(($21+4)|0);
      var $22=HEAP32[(($nuse5)>>2)];
      var $inc=((($22)+(1))|0);
      HEAP32[(($nuse5)>>2)]=$inc;
      var $23=$s;

      return $23;
  }

}
_newshrstr["X"]=1;

function _luaS_resize($L, $newsize) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $newsize_addr;
      var $i;
      var $tb;
      var $p;
      var $next;
      var $h;
      $L_addr=$L;
      $newsize_addr=$newsize;
      var $0=$L_addr;
      var $l_G=(($0+12)|0);
      var $1=HEAP32[(($l_G)>>2)];
      var $strt=(($1+24)|0);
      $tb=$strt;
      var $2=$L_addr;
      _luaC_runtilstate($2, -5);
      var $3=$newsize_addr;
      var $4=$tb;
      var $size=(($4+8)|0);
      var $5=HEAP32[(($size)>>2)];
      var $cmp=(($3)|0) > (($5)|0);
      if ($cmp) { label = 3; break; } else { label = 11; break; }
    case 3: 
      var $6=$newsize_addr;
      var $add=((($6)+(1))|0);
      var $cmp1=(($add)>>>0) > 1073741823;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $7=$L_addr;
      _luaM_toobig($7);

      label = 6; break;
    case 5: 
      var $9=$L_addr;
      var $10=$tb;
      var $hash=(($10)|0);
      var $11=HEAP32[(($hash)>>2)];
      var $12=$11;
      var $13=$tb;
      var $size2=(($13+8)|0);
      var $14=HEAP32[(($size2)>>2)];
      var $mul=($14<<2);
      var $15=$newsize_addr;
      var $mul3=($15<<2);
      var $call=_luaM_realloc_($9, $12, $mul, $mul3);
      var $cond = $call;label = 6; break;
    case 6: 
      var $cond;
      var $16=$cond;
      var $17=$tb;
      var $hash4=(($17)|0);
      HEAP32[(($hash4)>>2)]=$16;
      var $18=$tb;
      var $size5=(($18+8)|0);
      var $19=HEAP32[(($size5)>>2)];
      $i=$19;
      label = 7; break;
    case 7: 
      var $20=$i;
      var $21=$newsize_addr;
      var $cmp6=(($20)|0) < (($21)|0);
      if ($cmp6) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $22=$i;
      var $23=$tb;
      var $hash7=(($23)|0);
      var $24=HEAP32[(($hash7)>>2)];
      var $arrayidx=(($24+($22<<2))|0);
      HEAP32[(($arrayidx)>>2)]=0;
      label = 9; break;
    case 9: 
      var $25=$i;
      var $inc=((($25)+(1))|0);
      $i=$inc;
      label = 7; break;
    case 10: 
      label = 11; break;
    case 11: 
      $i=0;
      label = 12; break;
    case 12: 
      var $26=$i;
      var $27=$tb;
      var $size9=(($27+8)|0);
      var $28=HEAP32[(($size9)>>2)];
      var $cmp10=(($26)|0) < (($28)|0);
      if ($cmp10) { label = 13; break; } else { label = 18; break; }
    case 13: 
      var $29=$i;
      var $30=$tb;
      var $hash12=(($30)|0);
      var $31=HEAP32[(($hash12)>>2)];
      var $arrayidx13=(($31+($29<<2))|0);
      var $32=HEAP32[(($arrayidx13)>>2)];
      $p=$32;
      var $33=$i;
      var $34=$tb;
      var $hash14=(($34)|0);
      var $35=HEAP32[(($hash14)>>2)];
      var $arrayidx15=(($35+($33<<2))|0);
      HEAP32[(($arrayidx15)>>2)]=0;
      label = 14; break;
    case 14: 
      var $36=$p;
      var $tobool=(($36)|0)!=0;
      if ($tobool) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $37=$p;
      var $gch=$37;
      var $next16=(($gch)|0);
      var $38=HEAP32[(($next16)>>2)];
      $next=$38;
      var $39=$p;
      var $ts=$39;
      var $tsv=$ts;
      var $hash17=(($tsv+8)|0);
      var $40=HEAP32[(($hash17)>>2)];
      var $41=$newsize_addr;
      var $sub=((($41)-(1))|0);
      var $and=$40 & $sub;
      $h=$and;
      var $42=$h;
      var $43=$tb;
      var $hash18=(($43)|0);
      var $44=HEAP32[(($hash18)>>2)];
      var $arrayidx19=(($44+($42<<2))|0);
      var $45=HEAP32[(($arrayidx19)>>2)];
      var $46=$p;
      var $gch20=$46;
      var $next21=(($gch20)|0);
      HEAP32[(($next21)>>2)]=$45;
      var $47=$p;
      var $48=$h;
      var $49=$tb;
      var $hash22=(($49)|0);
      var $50=HEAP32[(($hash22)>>2)];
      var $arrayidx23=(($50+($48<<2))|0);
      HEAP32[(($arrayidx23)>>2)]=$47;
      var $51=$p;
      var $gch24=$51;
      var $marked=(($gch24+5)|0);
      var $52=HEAP8[($marked)];
      var $conv=(($52)&255);
      var $and25=$conv & 191;
      var $conv26=(($and25) & 255);
      HEAP8[($marked)]=$conv26;
      var $53=$next;
      $p=$53;
      label = 14; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $54=$i;
      var $inc28=((($54)+(1))|0);
      $i=$inc28;
      label = 12; break;
    case 18: 
      var $55=$newsize_addr;
      var $56=$tb;
      var $size30=(($56+8)|0);
      var $57=HEAP32[(($size30)>>2)];
      var $cmp31=(($55)|0) < (($57)|0);
      if ($cmp31) { label = 19; break; } else { label = 23; break; }
    case 19: 
      var $58=$newsize_addr;
      var $add34=((($58)+(1))|0);
      var $cmp35=(($add34)>>>0) > 1073741823;
      if ($cmp35) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $59=$L_addr;
      _luaM_toobig($59);

      label = 22; break;
    case 21: 
      var $61=$L_addr;
      var $62=$tb;
      var $hash39=(($62)|0);
      var $63=HEAP32[(($hash39)>>2)];
      var $64=$63;
      var $65=$tb;
      var $size40=(($65+8)|0);
      var $66=HEAP32[(($size40)>>2)];
      var $mul41=($66<<2);
      var $67=$newsize_addr;
      var $mul42=($67<<2);
      var $call43=_luaM_realloc_($61, $64, $mul41, $mul42);
      var $cond45 = $call43;label = 22; break;
    case 22: 
      var $cond45;
      var $68=$cond45;
      var $69=$tb;
      var $hash46=(($69)|0);
      HEAP32[(($hash46)>>2)]=$68;
      label = 23; break;
    case 23: 
      var $70=$newsize_addr;
      var $71=$tb;
      var $size48=(($71+8)|0);
      HEAP32[(($size48)>>2)]=$70;

      return;
  }

}
_luaS_resize["X"]=1;

function _luaS_newlstr($L, $str, $l) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $str_addr;
      var $l_addr;
      $L_addr=$L;
      $str_addr=$str;
      $l_addr=$l;
      var $0=$l_addr;
      var $cmp=(($0)>>>0) <= 40;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$L_addr;
      var $2=$str_addr;
      var $3=$l_addr;
      var $call=_internshrstr($1, $2, $3);
      $retval=$call;
      label = 7; break;
    case 4: 
      var $4=$l_addr;
      var $add=((($4)+(1))|0);
      var $cmp1=(($add)>>>0) > 4294967277;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $5=$L_addr;
      _luaM_toobig($5);

    case 6: 
      var $6=$L_addr;
      var $7=$str_addr;
      var $8=$l_addr;
      var $9=$L_addr;
      var $l_G=(($9+12)|0);
      var $10=HEAP32[(($l_G)>>2)];
      var $seed=(($10+48)|0);
      var $11=HEAP32[(($seed)>>2)];
      var $call3=_createstrobj($6, $7, $8, 20, $11, 0);
      $retval=$call3;
      label = 7; break;
    case 7: 
      var $12=$retval;

      return $12;
  }

}


function _luaS_newudata($L, $s, $e) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $s_addr;
      var $e_addr;
      var $u;
      $L_addr=$L;
      $s_addr=$s;
      $e_addr=$e;
      var $0=$s_addr;
      var $cmp=(($0)>>>0) > 4294967273;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$L_addr;
      _luaM_toobig($1);

    case 4: 
      var $2=$L_addr;
      var $3=$s_addr;
      var $add=((($3)+(20))|0);
      var $call=_luaC_newobj($2, 7, $add, 0, 0);
      var $u1=$call;
      $u=$u1;
      var $4=$s_addr;
      var $5=$u;
      var $uv=$5;
      var $len=(($uv+16)|0);
      HEAP32[(($len)>>2)]=$4;
      var $6=$u;
      var $uv2=$6;
      var $metatable=(($uv2+8)|0);
      HEAP32[(($metatable)>>2)]=0;
      var $7=$e_addr;
      var $8=$u;
      var $uv3=$8;
      var $env=(($uv3+12)|0);
      HEAP32[(($env)>>2)]=$7;
      var $9=$u;

      return $9;
  }

}


function _luaH_next($L, $t, $key) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $t_addr;
      var $key_addr;
      var $i;
      var $io;
      var $io2;
      var $io1;
      var $io221;
      var $io124;
      var $io229;
      var $io133;
      $L_addr=$L;
      $t_addr=$t;
      $key_addr=$key;
      var $0=$L_addr;
      var $1=$t_addr;
      var $2=$key_addr;
      var $call=_findindex($0, $1, $2);
      $i=$call;
      var $3=$i;
      var $inc=((($3)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 3: 
      var $4=$i;
      var $5=$t_addr;
      var $sizearray=(($5+28)|0);
      var $6=HEAP32[(($sizearray)>>2)];
      var $cmp=(($4)|0) < (($6)|0);
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $7=$i;
      var $8=$t_addr;
      var $array=(($8+12)|0);
      var $9=HEAP32[(($array)>>2)];
      var $arrayidx=(($9+((($7)*(12))&-1))|0);
      var $tt_=(($arrayidx+8)|0);
      var $10=HEAP32[(($tt_)>>2)];
      var $cmp1=(($10)|0)==0;
      if ($cmp1) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $11=$key_addr;
      $io=$11;
      var $12=$i;
      var $add=((($12)+(1))|0);
      var $conv=(($add)|0);
      var $13=$io;
      var $value_=(($13)|0);
      var $n=$value_;
      (HEAPF64[(tempDoublePtr)>>3]=$conv,HEAP32[(($n)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $14=$io;
      var $tt_2=(($14+8)|0);
      HEAP32[(($tt_2)>>2)]=3;
      var $15=$i;
      var $16=$t_addr;
      var $array3=(($16+12)|0);
      var $17=HEAP32[(($array3)>>2)];
      var $arrayidx4=(($17+((($15)*(12))&-1))|0);
      $io2=$arrayidx4;
      var $18=$key_addr;
      var $add_ptr=(($18+12)|0);
      $io1=$add_ptr;
      var $19=$io1;
      var $value_5=(($19)|0);
      var $20=$io2;
      var $value_6=(($20)|0);
      var $21=$value_5;
      var $22=$value_6;
      HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];
      var $23=$io2;
      var $tt_7=(($23+8)|0);
      var $24=HEAP32[(($tt_7)>>2)];
      var $25=$io1;
      var $tt_8=(($25+8)|0);
      HEAP32[(($tt_8)>>2)]=$24;
      $retval=1;
      label = 15; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $26=$i;
      var $inc9=((($26)+(1))|0);
      $i=$inc9;
      label = 3; break;
    case 8: 
      var $27=$t_addr;
      var $sizearray10=(($27+28)|0);
      var $28=HEAP32[(($sizearray10)>>2)];
      var $29=$i;
      var $sub=((($29)-($28))|0);
      $i=$sub;
      label = 9; break;
    case 9: 
      var $30=$i;
      var $31=$t_addr;
      var $lsizenode=(($31+7)|0);
      var $32=HEAP8[($lsizenode)];
      var $conv12=(($32)&255);
      var $shl=1 << $conv12;
      var $cmp13=(($30)|0) < (($shl)|0);
      if ($cmp13) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $33=$i;
      var $34=$t_addr;
      var $node=(($34+16)|0);
      var $35=HEAP32[(($node)>>2)];
      var $arrayidx16=(($35+((($33)*(28))&-1))|0);
      var $i_val=(($arrayidx16)|0);
      var $tt_17=(($i_val+8)|0);
      var $36=HEAP32[(($tt_17)>>2)];
      var $cmp18=(($36)|0)==0;
      if ($cmp18) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $37=$i;
      var $38=$t_addr;
      var $node22=(($38+16)|0);
      var $39=HEAP32[(($node22)>>2)];
      var $arrayidx23=(($39+((($37)*(28))&-1))|0);
      var $i_key=(($arrayidx23+12)|0);
      var $tvk=$i_key;
      $io221=$tvk;
      var $40=$key_addr;
      $io124=$40;
      var $41=$io124;
      var $value_25=(($41)|0);
      var $42=$io221;
      var $value_26=(($42)|0);
      var $43=$value_25;
      var $44=$value_26;
      HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[((($43)+(4))>>2)]=HEAP32[((($44)+(4))>>2)];
      var $45=$io221;
      var $tt_27=(($45+8)|0);
      var $46=HEAP32[(($tt_27)>>2)];
      var $47=$io124;
      var $tt_28=(($47+8)|0);
      HEAP32[(($tt_28)>>2)]=$46;
      var $48=$i;
      var $49=$t_addr;
      var $node30=(($49+16)|0);
      var $50=HEAP32[(($node30)>>2)];
      var $arrayidx31=(($50+((($48)*(28))&-1))|0);
      var $i_val32=(($arrayidx31)|0);
      $io229=$i_val32;
      var $51=$key_addr;
      var $add_ptr34=(($51+12)|0);
      $io133=$add_ptr34;
      var $52=$io133;
      var $value_35=(($52)|0);
      var $53=$io229;
      var $value_36=(($53)|0);
      var $54=$value_35;
      var $55=$value_36;
      HEAP32[(($54)>>2)]=HEAP32[(($55)>>2)];HEAP32[((($54)+(4))>>2)]=HEAP32[((($55)+(4))>>2)];
      var $56=$io229;
      var $tt_37=(($56+8)|0);
      var $57=HEAP32[(($tt_37)>>2)];
      var $58=$io133;
      var $tt_38=(($58+8)|0);
      HEAP32[(($tt_38)>>2)]=$57;
      $retval=1;
      label = 15; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $59=$i;
      var $inc41=((($59)+(1))|0);
      $i=$inc41;
      label = 9; break;
    case 14: 
      $retval=0;
      label = 15; break;
    case 15: 
      var $60=$retval;

      return $60;
  }

}
_luaH_next["X"]=1;

function _luaH_setint($L, $t, $key, $value) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; _memset(__stackBase__, 0, 12);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $t_addr;
      var $key_addr;
      var $value_addr;
      var $p;
      var $cell;
      var $k=__stackBase__;
      var $io;
      var $io2;
      var $io1;
      $L_addr=$L;
      $t_addr=$t;
      $key_addr=$key;
      $value_addr=$value;
      var $0=$t_addr;
      var $1=$key_addr;
      var $call=_luaH_getint($0, $1);
      $p=$call;
      var $2=$p;
      var $cmp=(($2)|0)!=5244092;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$p;
      $cell=$3;
      label = 5; break;
    case 4: 
      $io=$k;
      var $4=$key_addr;
      var $conv=(($4)|0);
      var $5=$io;
      var $value_=(($5)|0);
      var $n=$value_;
      (HEAPF64[(tempDoublePtr)>>3]=$conv,HEAP32[(($n)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $6=$io;
      var $tt_=(($6+8)|0);
      HEAP32[(($tt_)>>2)]=3;
      var $7=$L_addr;
      var $8=$t_addr;
      var $call1=_luaH_newkey($7, $8, $k);
      $cell=$call1;
      label = 5; break;
    case 5: 
      var $9=$value_addr;
      $io2=$9;
      var $10=$cell;
      $io1=$10;
      var $11=$io1;
      var $value_2=(($11)|0);
      var $12=$io2;
      var $value_3=(($12)|0);
      var $13=$value_2;
      var $14=$value_3;
      HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];
      var $15=$io2;
      var $tt_4=(($15+8)|0);
      var $16=HEAP32[(($tt_4)>>2)];
      var $17=$io1;
      var $tt_5=(($17+8)|0);
      HEAP32[(($tt_5)>>2)]=$16;
      STACKTOP = __stackBase__;
      return;
  }

}
_luaH_setint["X"]=1;

function _luaH_set($L, $t, $key) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $t_addr;
      var $key_addr;
      var $p;
      $L_addr=$L;
      $t_addr=$t;
      $key_addr=$key;
      var $0=$t_addr;
      var $1=$key_addr;
      var $call=_luaH_get($0, $1);
      $p=$call;
      var $2=$p;
      var $cmp=(($2)|0)!=5244092;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$p;
      $retval=$3;
      label = 5; break;
    case 4: 
      var $4=$L_addr;
      var $5=$t_addr;
      var $6=$key_addr;
      var $call1=_luaH_newkey($4, $5, $6);
      $retval=$call1;
      label = 5; break;
    case 5: 
      var $7=$retval;

      return $7;
  }

}


function _luaH_resizearray($L, $t, $nasize) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $t_addr;
      var $nasize_addr;
      var $nsize;
      $L_addr=$L;
      $t_addr=$t;
      $nasize_addr=$nasize;
      var $0=$t_addr;
      var $node=(($0+16)|0);
      var $1=HEAP32[(($node)>>2)];
      var $cmp=(($1)|0)==5244816;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $cond = 0;label = 5; break;
    case 4: 
      var $2=$t_addr;
      var $lsizenode=(($2+7)|0);
      var $3=HEAP8[($lsizenode)];
      var $conv=(($3)&255);
      var $shl=1 << $conv;
      var $cond = $shl;label = 5; break;
    case 5: 
      var $cond;
      $nsize=$cond;
      var $4=$L_addr;
      var $5=$t_addr;
      var $6=$nasize_addr;
      var $7=$nsize;
      _luaH_resize($4, $5, $6, $7);

      return;
  }

}


function _luaH_new($L) {
  var label = 0;


  var $L_addr;
  var $t;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_luaC_newobj($0, 5, 32, 0, 0);
  var $h=$call;
  $t=$h;
  var $1=$t;
  var $metatable=(($1+8)|0);
  HEAP32[(($metatable)>>2)]=0;
  var $2=$t;
  var $flags=(($2+6)|0);
  HEAP8[($flags)]=-1;
  var $3=$t;
  var $array=(($3+12)|0);
  HEAP32[(($array)>>2)]=0;
  var $4=$t;
  var $sizearray=(($4+28)|0);
  HEAP32[(($sizearray)>>2)]=0;
  var $5=$L_addr;
  var $6=$t;
  _setnodevector($5, $6, 0);
  var $7=$t;

  return $7;
}


function _luaH_free($L, $t) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $t_addr;
      $L_addr=$L;
      $t_addr=$t;
      var $0=$t_addr;
      var $node=(($0+16)|0);
      var $1=HEAP32[(($node)>>2)];
      var $cmp=(($1)|0)==5244816;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$L_addr;
      var $3=$t_addr;
      var $node1=(($3+16)|0);
      var $4=HEAP32[(($node1)>>2)];
      var $5=$4;
      var $6=$t_addr;
      var $lsizenode=(($6+7)|0);
      var $7=HEAP8[($lsizenode)];
      var $conv=(($7)&255);
      var $shl=1 << $conv;
      var $mul=((($shl)*(28))&-1);
      var $call=_luaM_realloc_($2, $5, $mul, 0);
      label = 4; break;
    case 4: 
      var $8=$L_addr;
      var $9=$t_addr;
      var $array=(($9+12)|0);
      var $10=HEAP32[(($array)>>2)];
      var $11=$10;
      var $12=$t_addr;
      var $sizearray=(($12+28)|0);
      var $13=HEAP32[(($sizearray)>>2)];
      var $mul2=((($13)*(12))&-1);
      var $call3=_luaM_realloc_($8, $11, $mul2, 0);
      var $14=$L_addr;
      var $15=$t_addr;
      var $16=$15;
      var $call4=_luaM_realloc_($14, $16, 32, 0);

      return;
  }

}


function _findindex($L, $t, $key) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $t_addr;
      var $key_addr;
      var $i;
      var $n;
      $L_addr=$L;
      $t_addr=$t;
      $key_addr=$key;
      var $0=$key_addr;
      var $tt_=(($0+8)|0);
      var $1=HEAP32[(($tt_)>>2)];
      var $cmp=(($1)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=-1;
      label = 18; break;
    case 4: 
      var $2=$key_addr;
      var $call=_arrayindex($2);
      $i=$call;
      var $3=$i;
      var $cmp1=0 < (($3)|0);
      if ($cmp1) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $4=$i;
      var $5=$t_addr;
      var $sizearray=(($5+28)|0);
      var $6=HEAP32[(($sizearray)>>2)];
      var $cmp2=(($4)|0) <= (($6)|0);
      if ($cmp2) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $7=$i;
      var $sub=((($7)-(1))|0);
      $retval=$sub;
      label = 18; break;
    case 7: 
      var $8=$t_addr;
      var $9=$key_addr;
      var $call4=_mainposition($8, $9);
      $n=$call4;
      label = 8; break;
    case 8: 
      var $10=$n;
      var $i_key=(($10+12)|0);
      var $tvk=$i_key;
      var $tt_5=(($tvk+8)|0);
      var $11=HEAP32[(($tt_5)>>2)];
      var $12=$key_addr;
      var $tt_6=(($12+8)|0);
      var $13=HEAP32[(($tt_6)>>2)];
      var $cmp7=(($11)|0)==(($13)|0);
      if ($cmp7) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $14=$n;
      var $i_key9=(($14+12)|0);
      var $tvk10=$i_key9;
      var $15=$key_addr;
      var $call11=_luaV_equalobj_(0, $tvk10, $15);
      var $tobool=(($call11)|0)!=0;
      if ($tobool) { label = 13; break; } else { label = 10; break; }
    case 10: 
      var $16=$n;
      var $i_key12=(($16+12)|0);
      var $tvk13=$i_key12;
      var $tt_14=(($tvk13+8)|0);
      var $17=HEAP32[(($tt_14)>>2)];
      var $cmp15=(($17)|0)==11;
      if ($cmp15) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $18=$key_addr;
      var $tt_17=(($18+8)|0);
      var $19=HEAP32[(($tt_17)>>2)];
      var $and=$19 & 64;
      var $tobool18=(($and)|0)!=0;
      if ($tobool18) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $20=$n;
      var $i_key20=(($20+12)|0);
      var $tvk21=$i_key20;
      var $value_=(($tvk21)|0);
      var $gc=$value_;
      var $21=HEAP32[(($gc)>>2)];
      var $22=$21;
      var $23=$key_addr;
      var $value_22=(($23)|0);
      var $gc23=$value_22;
      var $24=HEAP32[(($gc23)>>2)];
      var $25=$24;
      var $cmp24=(($22)|0)==(($25)|0);
      if ($cmp24) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $26=$n;
      var $27=$t_addr;
      var $node=(($27+16)|0);
      var $28=HEAP32[(($node)>>2)];
      var $arrayidx=(($28)|0);
      var $sub_ptr_lhs_cast=$26;
      var $sub_ptr_rhs_cast=$arrayidx;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(28))&-1);
      $i=$sub_ptr_div;
      var $29=$i;
      var $30=$t_addr;
      var $sizearray26=(($30+28)|0);
      var $31=HEAP32[(($sizearray26)>>2)];
      var $add=((($29)+($31))|0);
      $retval=$add;
      label = 18; break;
    case 14: 
      var $32=$n;
      var $i_key28=(($32+12)|0);
      var $nk=$i_key28;
      var $next=(($nk+12)|0);
      var $33=HEAP32[(($next)>>2)];
      $n=$33;
      label = 15; break;
    case 15: 
      var $34=$n;
      var $cmp30=(($34)|0)==0;
      if ($cmp30) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $35=$L_addr;
      _luaG_runerror($35, ((5249212)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));

    case 17: 
      label = 8; break;
    case 18: 
      var $36=$retval;
      STACKTOP = __stackBase__;
      return $36;
  }

}
_findindex["X"]=1;

function _luaH_resize($L, $t, $nasize, $nhsize) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $t_addr;
      var $nasize_addr;
      var $nhsize_addr;
      var $i;
      var $oldasize;
      var $oldhsize;
      var $nold;
      var $old;
      var $io2;
      var $io1;
      $L_addr=$L;
      $t_addr=$t;
      $nasize_addr=$nasize;
      $nhsize_addr=$nhsize;
      var $0=$t_addr;
      var $sizearray=(($0+28)|0);
      var $1=HEAP32[(($sizearray)>>2)];
      $oldasize=$1;
      var $2=$t_addr;
      var $lsizenode=(($2+7)|0);
      var $3=HEAP8[($lsizenode)];
      var $conv=(($3)&255);
      $oldhsize=$conv;
      var $4=$t_addr;
      var $node=(($4+16)|0);
      var $5=HEAP32[(($node)>>2)];
      $nold=$5;
      var $6=$nasize_addr;
      var $7=$oldasize;
      var $cmp=(($6)|0) > (($7)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $8=$L_addr;
      var $9=$t_addr;
      var $10=$nasize_addr;
      _setarrayvector($8, $9, $10);
      label = 4; break;
    case 4: 
      var $11=$L_addr;
      var $12=$t_addr;
      var $13=$nhsize_addr;
      _setnodevector($11, $12, $13);
      var $14=$nasize_addr;
      var $15=$oldasize;
      var $cmp2=(($14)|0) < (($15)|0);
      if ($cmp2) { label = 5; break; } else { label = 15; break; }
    case 5: 
      var $16=$nasize_addr;
      var $17=$t_addr;
      var $sizearray5=(($17+28)|0);
      HEAP32[(($sizearray5)>>2)]=$16;
      var $18=$nasize_addr;
      $i=$18;
      label = 6; break;
    case 6: 
      var $19=$i;
      var $20=$oldasize;
      var $cmp6=(($19)|0) < (($20)|0);
      if ($cmp6) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $21=$i;
      var $22=$t_addr;
      var $array=(($22+12)|0);
      var $23=HEAP32[(($array)>>2)];
      var $arrayidx=(($23+((($21)*(12))&-1))|0);
      var $tt_=(($arrayidx+8)|0);
      var $24=HEAP32[(($tt_)>>2)];
      var $cmp8=(($24)|0)==0;
      if ($cmp8) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $25=$L_addr;
      var $26=$t_addr;
      var $27=$i;
      var $add=((($27)+(1))|0);
      var $28=$i;
      var $29=$t_addr;
      var $array11=(($29+12)|0);
      var $30=HEAP32[(($array11)>>2)];
      var $arrayidx12=(($30+((($28)*(12))&-1))|0);
      _luaH_setint($25, $26, $add, $arrayidx12);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $31=$i;
      var $inc=((($31)+(1))|0);
      $i=$inc;
      label = 6; break;
    case 11: 
      var $32=$nasize_addr;
      var $add14=((($32)+(1))|0);
      var $cmp15=(($add14)>>>0) > 357913941;
      if ($cmp15) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $33=$L_addr;
      _luaM_toobig($33);

      label = 14; break;
    case 13: 
      var $35=$L_addr;
      var $36=$t_addr;
      var $array17=(($36+12)|0);
      var $37=HEAP32[(($array17)>>2)];
      var $38=$37;
      var $39=$oldasize;
      var $mul=((($39)*(12))&-1);
      var $40=$nasize_addr;
      var $mul18=((($40)*(12))&-1);
      var $call=_luaM_realloc_($35, $38, $mul, $mul18);
      var $cond = $call;label = 14; break;
    case 14: 
      var $cond;
      var $41=$cond;
      var $42=$t_addr;
      var $array19=(($42+12)|0);
      HEAP32[(($array19)>>2)]=$41;
      label = 15; break;
    case 15: 
      var $43=$oldhsize;
      var $shl=1 << $43;
      var $sub=((($shl)-(1))|0);
      $i=$sub;
      label = 16; break;
    case 16: 
      var $44=$i;
      var $cmp22=(($44)|0) >= 0;
      if ($cmp22) { label = 17; break; } else { label = 21; break; }
    case 17: 
      var $45=$nold;
      var $46=$i;
      var $add_ptr=(($45+((($46)*(28))&-1))|0);
      $old=$add_ptr;
      var $47=$old;
      var $i_val=(($47)|0);
      var $tt_25=(($i_val+8)|0);
      var $48=HEAP32[(($tt_25)>>2)];
      var $cmp26=(($48)|0)==0;
      if ($cmp26) { label = 19; break; } else { label = 18; break; }
    case 18: 
      var $49=$old;
      var $i_val29=(($49)|0);
      $io2=$i_val29;
      var $50=$L_addr;
      var $51=$t_addr;
      var $52=$old;
      var $i_key=(($52+12)|0);
      var $tvk=$i_key;
      var $call30=_luaH_set($50, $51, $tvk);
      $io1=$call30;
      var $53=$io1;
      var $value_=(($53)|0);
      var $54=$io2;
      var $value_31=(($54)|0);
      var $55=$value_;
      var $56=$value_31;
      HEAP32[(($55)>>2)]=HEAP32[(($56)>>2)];HEAP32[((($55)+(4))>>2)]=HEAP32[((($56)+(4))>>2)];
      var $57=$io2;
      var $tt_32=(($57+8)|0);
      var $58=HEAP32[(($tt_32)>>2)];
      var $59=$io1;
      var $tt_33=(($59+8)|0);
      HEAP32[(($tt_33)>>2)]=$58;
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $60=$i;
      var $dec=((($60)-(1))|0);
      $i=$dec;
      label = 16; break;
    case 21: 
      var $61=$nold;
      var $cmp37=(($61)|0)==5244816;
      if ($cmp37) { label = 23; break; } else { label = 22; break; }
    case 22: 
      var $62=$L_addr;
      var $63=$nold;
      var $64=$63;
      var $65=$oldhsize;
      var $shl40=1 << $65;
      var $mul41=((($shl40)*(28))&-1);
      var $call42=_luaM_realloc_($62, $64, $mul41, 0);
      label = 23; break;
    case 23: 

      return;
  }

}
_luaH_resize["X"]=1;

function _setarrayvector($L, $t, $size) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $t_addr;
      var $size_addr;
      var $i;
      $L_addr=$L;
      $t_addr=$t;
      $size_addr=$size;
      var $0=$size_addr;
      var $add=((($0)+(1))|0);
      var $cmp=(($add)>>>0) > 357913941;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$L_addr;
      _luaM_toobig($1);

      label = 5; break;
    case 4: 
      var $3=$L_addr;
      var $4=$t_addr;
      var $array=(($4+12)|0);
      var $5=HEAP32[(($array)>>2)];
      var $6=$5;
      var $7=$t_addr;
      var $sizearray=(($7+28)|0);
      var $8=HEAP32[(($sizearray)>>2)];
      var $mul=((($8)*(12))&-1);
      var $9=$size_addr;
      var $mul1=((($9)*(12))&-1);
      var $call=_luaM_realloc_($3, $6, $mul, $mul1);
      var $cond = $call;label = 5; break;
    case 5: 
      var $cond;
      var $10=$cond;
      var $11=$t_addr;
      var $array2=(($11+12)|0);
      HEAP32[(($array2)>>2)]=$10;
      var $12=$t_addr;
      var $sizearray3=(($12+28)|0);
      var $13=HEAP32[(($sizearray3)>>2)];
      $i=$13;
      label = 6; break;
    case 6: 
      var $14=$i;
      var $15=$size_addr;
      var $cmp4=(($14)|0) < (($15)|0);
      if ($cmp4) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $16=$i;
      var $17=$t_addr;
      var $array5=(($17+12)|0);
      var $18=HEAP32[(($array5)>>2)];
      var $arrayidx=(($18+((($16)*(12))&-1))|0);
      var $tt_=(($arrayidx+8)|0);
      HEAP32[(($tt_)>>2)]=0;
      label = 8; break;
    case 8: 
      var $19=$i;
      var $inc=((($19)+(1))|0);
      $i=$inc;
      label = 6; break;
    case 9: 
      var $20=$size_addr;
      var $21=$t_addr;
      var $sizearray6=(($21+28)|0);
      HEAP32[(($sizearray6)>>2)]=$20;

      return;
  }

}
_setarrayvector["X"]=1;

function _setnodevector($L, $t, $size) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $t_addr;
      var $size_addr;
      var $lsize;
      var $i;
      var $n;
      $L_addr=$L;
      $t_addr=$t;
      $size_addr=$size;
      var $0=$size_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$t_addr;
      var $node=(($1+16)|0);
      HEAP32[(($node)>>2)]=5244816;
      $lsize=0;
      label = 14; break;
    case 4: 
      var $2=$size_addr;
      var $call=_luaO_ceillog2($2);
      $lsize=$call;
      var $3=$lsize;
      var $cmp1=(($3)|0) > 30;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $4=$L_addr;
      _luaG_runerror($4, ((5251000)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));

    case 6: 
      var $5=$lsize;
      var $shl=1 << $5;
      $size_addr=$shl;
      var $6=$size_addr;
      var $add=((($6)+(1))|0);
      var $cmp3=(($add)>>>0) > 153391689;
      if ($cmp3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $7=$L_addr;
      _luaM_toobig($7);

      label = 9; break;
    case 8: 
      var $9=$L_addr;
      var $10=$size_addr;
      var $mul=((($10)*(28))&-1);
      var $call4=_luaM_realloc_($9, 0, 0, $mul);
      var $cond = $call4;label = 9; break;
    case 9: 
      var $cond;
      var $11=$cond;
      var $12=$t_addr;
      var $node5=(($12+16)|0);
      HEAP32[(($node5)>>2)]=$11;
      $i=0;
      label = 10; break;
    case 10: 
      var $13=$i;
      var $14=$size_addr;
      var $cmp6=(($13)|0) < (($14)|0);
      if ($cmp6) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $15=$i;
      var $16=$t_addr;
      var $node7=(($16+16)|0);
      var $17=HEAP32[(($node7)>>2)];
      var $arrayidx=(($17+((($15)*(28))&-1))|0);
      $n=$arrayidx;
      var $18=$n;
      var $i_key=(($18+12)|0);
      var $nk=$i_key;
      var $next=(($nk+12)|0);
      HEAP32[(($next)>>2)]=0;
      var $19=$n;
      var $i_key8=(($19+12)|0);
      var $tvk=$i_key8;
      var $tt_=(($tvk+8)|0);
      HEAP32[(($tt_)>>2)]=0;
      var $20=$n;
      var $i_val=(($20)|0);
      var $tt_9=(($i_val+8)|0);
      HEAP32[(($tt_9)>>2)]=0;
      label = 12; break;
    case 12: 
      var $21=$i;
      var $inc=((($21)+(1))|0);
      $i=$inc;
      label = 10; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $22=$lsize;
      var $conv=(($22) & 255);
      var $23=$t_addr;
      var $lsizenode=(($23+7)|0);
      HEAP8[($lsizenode)]=$conv;
      var $24=$size_addr;
      var $25=$t_addr;
      var $node11=(($25+16)|0);
      var $26=HEAP32[(($node11)>>2)];
      var $arrayidx12=(($26+((($24)*(28))&-1))|0);
      var $27=$t_addr;
      var $lastfree=(($27+20)|0);
      HEAP32[(($lastfree)>>2)]=$arrayidx12;
      STACKTOP = __stackBase__;
      return;
  }

}
_setnodevector["X"]=1;

function _getfreepos($t) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $t_addr;
      $t_addr=$t;
      label = 3; break;
    case 3: 
      var $0=$t_addr;
      var $lastfree=(($0+20)|0);
      var $1=HEAP32[(($lastfree)>>2)];
      var $2=$t_addr;
      var $node=(($2+16)|0);
      var $3=HEAP32[(($node)>>2)];
      var $cmp=(($1)>>>0) > (($3)>>>0);
      if ($cmp) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $4=$t_addr;
      var $lastfree1=(($4+20)|0);
      var $5=HEAP32[(($lastfree1)>>2)];
      var $incdec_ptr=((($5)-(28))|0);
      HEAP32[(($lastfree1)>>2)]=$incdec_ptr;
      var $6=$t_addr;
      var $lastfree2=(($6+20)|0);
      var $7=HEAP32[(($lastfree2)>>2)];
      var $i_key=(($7+12)|0);
      var $tvk=$i_key;
      var $tt_=(($tvk+8)|0);
      var $8=HEAP32[(($tt_)>>2)];
      var $cmp3=(($8)|0)==0;
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $9=$t_addr;
      var $lastfree4=(($9+20)|0);
      var $10=HEAP32[(($lastfree4)>>2)];
      $retval=$10;
      label = 8; break;
    case 6: 
      label = 3; break;
    case 7: 
      $retval=0;
      label = 8; break;
    case 8: 
      var $11=$retval;

      return $11;
  }

}


function _hashnum($t, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; _memset(__stackBase__, 0, 8);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $n_addr;
      var $i;
      var $u=__stackBase__;
      $t_addr=$t;
      $n_addr=$n;
      var $0=$n_addr;
      var $add=($0)+(1);
      var $l_d=$u;
      (HEAPF64[(tempDoublePtr)>>3]=$add,HEAP32[(($l_d)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($l_d)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $l_p=$u;
      var $arrayidx=(($l_p)|0);
      var $1=HEAP32[(($arrayidx)>>2)];
      $i=$1;
      var $l_p1=$u;
      var $arrayidx2=(($l_p1+4)|0);
      var $2=HEAP32[(($arrayidx2)>>2)];
      var $3=$i;
      var $add3=((($3)+($2))|0);
      $i=$add3;
      var $4=$i;
      var $cmp=(($4)|0) < 0;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $5=$i;
      var $6=$i;
      var $sub=(((-$6))|0);
      var $cmp4=(($5)|0)==(($sub)|0);
      if ($cmp4) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $7=$i;
      var $sub6=(((-$7))|0);
      $i=$sub6;
      label = 6; break;
    case 6: 
      var $8=$i;
      var $9=$t_addr;
      var $lsizenode=(($9+7)|0);
      var $10=HEAP8[($lsizenode)];
      var $conv=(($10)&255);
      var $shl=1 << $conv;
      var $sub8=((($shl)-(1))|0);
      var $or=$sub8 | 1;
      var $rem=((($8)|0))%((($or)|0));
      var $11=$t_addr;
      var $node=(($11+16)|0);
      var $12=HEAP32[(($node)>>2)];
      var $arrayidx9=(($12+((($rem)*(28))&-1))|0);
      STACKTOP = __stackBase__;
      return $arrayidx9;
  }

}


function _luaH_getstr($t, $key) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $t_addr;
      var $key_addr;
      var $n;
      $t_addr=$t;
      $key_addr=$key;
      var $0=$key_addr;
      var $tsv=$0;
      var $hash=(($tsv+8)|0);
      var $1=HEAP32[(($hash)>>2)];
      var $2=$t_addr;
      var $lsizenode=(($2+7)|0);
      var $3=HEAP8[($lsizenode)];
      var $conv=(($3)&255);
      var $shl=1 << $conv;
      var $sub=((($shl)-(1))|0);
      var $and=$1 & $sub;
      var $4=$t_addr;
      var $node=(($4+16)|0);
      var $5=HEAP32[(($node)>>2)];
      var $arrayidx=(($5+((($and)*(28))&-1))|0);
      $n=$arrayidx;
      label = 3; break;
    case 3: 
      var $6=$n;
      var $i_key=(($6+12)|0);
      var $tvk=$i_key;
      var $tt_=(($tvk+8)|0);
      var $7=HEAP32[(($tt_)>>2)];
      var $cmp=(($7)|0)==68;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $8=$n;
      var $i_key2=(($8+12)|0);
      var $tvk3=$i_key2;
      var $value_=(($tvk3)|0);
      var $gc=$value_;
      var $9=HEAP32[(($gc)>>2)];
      var $ts=$9;
      var $10=$key_addr;
      var $cmp4=(($ts)|0)==(($10)|0);
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $11=$n;
      var $i_val=(($11)|0);
      $retval=$i_val;
      label = 10; break;
    case 6: 
      var $12=$n;
      var $i_key6=(($12+12)|0);
      var $nk=$i_key6;
      var $next=(($nk+12)|0);
      var $13=HEAP32[(($next)>>2)];
      $n=$13;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $14=$n;
      var $tobool=(($14)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 9; break; }
    case 9: 
      $retval=5244092;
      label = 10; break;
    case 10: 
      var $15=$retval;

      return $15;
  }

}
_luaH_getstr["X"]=1;

function _mainposition($t, $key) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $t_addr;
      var $key_addr;
      var $s;
      $t_addr=$t;
      $key_addr=$key;
      var $0=$key_addr;
      var $tt_=(($0+8)|0);
      var $1=HEAP32[(($tt_)>>2)];
      var $and=$1 & 63;
      if ((($and)|0)==3) {
        label = 3; break;
      }
      else if ((($and)|0)==20) {
        label = 4; break;
      }
      else if ((($and)|0)==4) {
        label = 7; break;
      }
      else if ((($and)|0)==1) {
        label = 8; break;
      }
      else if ((($and)|0)==2) {
        label = 9; break;
      }
      else if ((($and)|0)==22) {
        label = 10; break;
      }
      else {
      label = 11; break;
      }
      
    case 3: 
      var $2=$t_addr;
      var $3=$key_addr;
      var $value_=(($3)|0);
      var $n=$value_;
      var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call=_hashnum($2, $4);
      $retval=$call;
      label = 12; break;
    case 4: 
      var $5=$key_addr;
      var $value_2=(($5)|0);
      var $gc=$value_2;
      var $6=HEAP32[(($gc)>>2)];
      var $ts=$6;
      $s=$ts;
      var $7=$s;
      var $tsv=$7;
      var $extra=(($tsv+6)|0);
      var $8=HEAP8[($extra)];
      var $conv=(($8)&255);
      var $cmp=(($conv)|0)==0;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $9=$s;
      var $add_ptr=(($9+16)|0);
      var $10=$add_ptr;
      var $11=$s;
      var $tsv4=$11;
      var $len=(($tsv4+12)|0);
      var $12=HEAP32[(($len)>>2)];
      var $13=$s;
      var $tsv5=$13;
      var $hash=(($tsv5+8)|0);
      var $14=HEAP32[(($hash)>>2)];
      var $call6=_luaS_hash($10, $12, $14);
      var $15=$s;
      var $tsv7=$15;
      var $hash8=(($tsv7+8)|0);
      HEAP32[(($hash8)>>2)]=$call6;
      var $16=$s;
      var $tsv9=$16;
      var $extra10=(($tsv9+6)|0);
      HEAP8[($extra10)]=1;
      label = 6; break;
    case 6: 
      var $17=$key_addr;
      var $value_11=(($17)|0);
      var $gc12=$value_11;
      var $18=HEAP32[(($gc12)>>2)];
      var $ts13=$18;
      var $tsv14=$ts13;
      var $hash15=(($tsv14+8)|0);
      var $19=HEAP32[(($hash15)>>2)];
      var $20=$t_addr;
      var $lsizenode=(($20+7)|0);
      var $21=HEAP8[($lsizenode)];
      var $conv16=(($21)&255);
      var $shl=1 << $conv16;
      var $sub=((($shl)-(1))|0);
      var $and17=$19 & $sub;
      var $22=$t_addr;
      var $node=(($22+16)|0);
      var $23=HEAP32[(($node)>>2)];
      var $arrayidx=(($23+((($and17)*(28))&-1))|0);
      $retval=$arrayidx;
      label = 12; break;
    case 7: 
      var $24=$key_addr;
      var $value_19=(($24)|0);
      var $gc20=$value_19;
      var $25=HEAP32[(($gc20)>>2)];
      var $ts21=$25;
      var $tsv22=$ts21;
      var $hash23=(($tsv22+8)|0);
      var $26=HEAP32[(($hash23)>>2)];
      var $27=$t_addr;
      var $lsizenode24=(($27+7)|0);
      var $28=HEAP8[($lsizenode24)];
      var $conv25=(($28)&255);
      var $shl26=1 << $conv25;
      var $sub27=((($shl26)-(1))|0);
      var $and28=$26 & $sub27;
      var $29=$t_addr;
      var $node29=(($29+16)|0);
      var $30=HEAP32[(($node29)>>2)];
      var $arrayidx30=(($30+((($and28)*(28))&-1))|0);
      $retval=$arrayidx30;
      label = 12; break;
    case 8: 
      var $31=$key_addr;
      var $value_32=(($31)|0);
      var $b=$value_32;
      var $32=HEAP32[(($b)>>2)];
      var $33=$t_addr;
      var $lsizenode33=(($33+7)|0);
      var $34=HEAP8[($lsizenode33)];
      var $conv34=(($34)&255);
      var $shl35=1 << $conv34;
      var $sub36=((($shl35)-(1))|0);
      var $and37=$32 & $sub36;
      var $35=$t_addr;
      var $node38=(($35+16)|0);
      var $36=HEAP32[(($node38)>>2)];
      var $arrayidx39=(($36+((($and37)*(28))&-1))|0);
      $retval=$arrayidx39;
      label = 12; break;
    case 9: 
      var $37=$key_addr;
      var $value_41=(($37)|0);
      var $p=$value_41;
      var $38=HEAP32[(($p)>>2)];
      var $39=$38;
      var $40=$t_addr;
      var $lsizenode42=(($40+7)|0);
      var $41=HEAP8[($lsizenode42)];
      var $conv43=(($41)&255);
      var $shl44=1 << $conv43;
      var $sub45=((($shl44)-(1))|0);
      var $or=$sub45 | 1;
      var $rem=((($39)>>>0))%((($or)>>>0));
      var $42=$t_addr;
      var $node46=(($42+16)|0);
      var $43=HEAP32[(($node46)>>2)];
      var $arrayidx47=(($43+((($rem)*(28))&-1))|0);
      $retval=$arrayidx47;
      label = 12; break;
    case 10: 
      var $44=$key_addr;
      var $value_49=(($44)|0);
      var $f=$value_49;
      var $45=HEAP32[(($f)>>2)];
      var $46=$45;
      var $47=$t_addr;
      var $lsizenode50=(($47+7)|0);
      var $48=HEAP8[($lsizenode50)];
      var $conv51=(($48)&255);
      var $shl52=1 << $conv51;
      var $sub53=((($shl52)-(1))|0);
      var $or54=$sub53 | 1;
      var $rem55=((($46)>>>0))%((($or54)>>>0));
      var $49=$t_addr;
      var $node56=(($49+16)|0);
      var $50=HEAP32[(($node56)>>2)];
      var $arrayidx57=(($50+((($rem55)*(28))&-1))|0);
      $retval=$arrayidx57;
      label = 12; break;
    case 11: 
      var $51=$key_addr;
      var $value_58=(($51)|0);
      var $gc59=$value_58;
      var $52=HEAP32[(($gc59)>>2)];
      var $53=$52;
      var $54=$t_addr;
      var $lsizenode60=(($54+7)|0);
      var $55=HEAP8[($lsizenode60)];
      var $conv61=(($55)&255);
      var $shl62=1 << $conv61;
      var $sub63=((($shl62)-(1))|0);
      var $or64=$sub63 | 1;
      var $rem65=((($53)>>>0))%((($or64)>>>0));
      var $56=$t_addr;
      var $node66=(($56+16)|0);
      var $57=HEAP32[(($node66)>>2)];
      var $arrayidx67=(($57+((($rem65)*(28))&-1))|0);
      $retval=$arrayidx67;
      label = 12; break;
    case 12: 
      var $58=$retval;

      return $58;
  }

}
_mainposition["X"]=1;

function _rehash($L, $t, $ek) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; _memset(__stackBase__, 0, 128);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $t_addr;
      var $ek_addr;
      var $nasize=__stackBase__;
      var $na;
      var $nums=(__stackBase__)+(4);
      var $i;
      var $totaluse;
      $L_addr=$L;
      $t_addr=$t;
      $ek_addr=$ek;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|0) <= 30;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$i;
      var $arrayidx=(($nums+($1<<2))|0);
      HEAP32[(($arrayidx)>>2)]=0;
      label = 5; break;
    case 5: 
      var $2=$i;
      var $inc=((($2)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $3=$t_addr;
      var $arraydecay=(($nums)|0);
      var $call=_numusearray($3, $arraydecay);
      HEAP32[(($nasize)>>2)]=$call;
      var $4=HEAP32[(($nasize)>>2)];
      $totaluse=$4;
      var $5=$t_addr;
      var $arraydecay1=(($nums)|0);
      var $call2=_numusehash($5, $arraydecay1, $nasize);
      var $6=$totaluse;
      var $add=((($6)+($call2))|0);
      $totaluse=$add;
      var $7=$ek_addr;
      var $arraydecay3=(($nums)|0);
      var $call4=_countint($7, $arraydecay3);
      var $8=HEAP32[(($nasize)>>2)];
      var $add5=((($8)+($call4))|0);
      HEAP32[(($nasize)>>2)]=$add5;
      var $9=$totaluse;
      var $inc6=((($9)+(1))|0);
      $totaluse=$inc6;
      var $arraydecay7=(($nums)|0);
      var $call8=_computesizes($arraydecay7, $nasize);
      $na=$call8;
      var $10=$L_addr;
      var $11=$t_addr;
      var $12=HEAP32[(($nasize)>>2)];
      var $13=$totaluse;
      var $14=$na;
      var $sub=((($13)-($14))|0);
      _luaH_resize($10, $11, $12, $sub);
      STACKTOP = __stackBase__;
      return;
  }

}
_rehash["X"]=1;

function _luaH_getint($t, $key) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $t_addr;
      var $key_addr;
      var $nk;
      var $n;
      $t_addr=$t;
      $key_addr=$key;
      var $0=$key_addr;
      var $sub=((($0)-(1))|0);
      var $1=$t_addr;
      var $sizearray=(($1+28)|0);
      var $2=HEAP32[(($sizearray)>>2)];
      var $cmp=(($sub)>>>0) < (($2)>>>0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$key_addr;
      var $sub1=((($3)-(1))|0);
      var $4=$t_addr;
      var $array=(($4+12)|0);
      var $5=HEAP32[(($array)>>2)];
      var $arrayidx=(($5+((($sub1)*(12))&-1))|0);
      $retval=$arrayidx;
      label = 12; break;
    case 4: 
      var $6=$key_addr;
      var $conv=(($6)|0);
      $nk=$conv;
      var $7=$t_addr;
      var $8=$nk;
      var $call=_hashnum($7, $8);
      $n=$call;
      label = 5; break;
    case 5: 
      var $9=$n;
      var $i_key=(($9+12)|0);
      var $tvk=$i_key;
      var $tt_=(($tvk+8)|0);
      var $10=HEAP32[(($tt_)>>2)];
      var $cmp2=(($10)|0)==3;
      if ($cmp2) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $11=$n;
      var $i_key4=(($11+12)|0);
      var $tvk5=$i_key4;
      var $value_=(($tvk5)|0);
      var $n6=$value_;
      var $12=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n6)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n6)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $13=$nk;
      var $cmp7=$12 == $13;
      if ($cmp7) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $14=$n;
      var $i_val=(($14)|0);
      $retval=$i_val;
      label = 12; break;
    case 8: 
      var $15=$n;
      var $i_key11=(($15+12)|0);
      var $nk12=$i_key11;
      var $next=(($nk12+12)|0);
      var $16=HEAP32[(($next)>>2)];
      $n=$16;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $17=$n;
      var $tobool=(($17)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 11; break; }
    case 11: 
      $retval=5244092;
      label = 12; break;
    case 12: 
      var $18=$retval;

      return $18;
  }

}
_luaH_getint["X"]=1;

function _luaH_get($t, $key) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; _memset(__stackBase__, 0, 8);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $t_addr;
      var $key_addr;
      var $k;
      var $n;
      var $u=__stackBase__;
      var $n11;
      $t_addr=$t;
      $key_addr=$key;
      var $0=$key_addr;
      var $tt_=(($0+8)|0);
      var $1=HEAP32[(($tt_)>>2)];
      var $and=$1 & 63;
      if ((($and)|0)==0) {
        label = 3; break;
      }
      else if ((($and)|0)==4) {
        label = 4; break;
      }
      else if ((($and)|0)==3) {
        label = 5; break;
      }
      else {
      label = 8; break;
      }
      
    case 3: 
      $retval=5244092;
      label = 16; break;
    case 4: 
      var $2=$t_addr;
      var $3=$key_addr;
      var $value_=(($3)|0);
      var $gc=$value_;
      var $4=HEAP32[(($gc)>>2)];
      var $ts=$4;
      var $call=_luaH_getstr($2, $ts);
      $retval=$call;
      label = 16; break;
    case 5: 
      var $5=$key_addr;
      var $value_3=(($5)|0);
      var $n4=$value_3;
      var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n4)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n4)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $n=$6;
      var $7=$n;
      var $add=($7)+(6755399441055744);
      var $l_d=$u;
      (HEAPF64[(tempDoublePtr)>>3]=$add,HEAP32[(($l_d)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($l_d)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $8=HEAP32[((((5244364)|0))>>2)];
      var $cmp=(($8)|0)==33;
      var $conv=(($cmp)&1);
      var $l_p=$u;
      var $arrayidx=(($l_p+($conv<<2))|0);
      var $9=HEAP32[(($arrayidx)>>2)];
      $k=$9;
      var $10=$k;
      var $conv5=(($10)|0);
      var $11=$key_addr;
      var $value_6=(($11)|0);
      var $n7=$value_6;
      var $12=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n7)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n7)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp8=$conv5 == $12;
      if ($cmp8) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $13=$t_addr;
      var $14=$k;
      var $call10=_luaH_getint($13, $14);
      $retval=$call10;
      label = 16; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $15=$t_addr;
      var $16=$key_addr;
      var $call12=_mainposition($15, $16);
      $n11=$call12;
      label = 9; break;
    case 9: 
      var $17=$n11;
      var $i_key=(($17+12)|0);
      var $tvk=$i_key;
      var $tt_13=(($tvk+8)|0);
      var $18=HEAP32[(($tt_13)>>2)];
      var $19=$key_addr;
      var $tt_14=(($19+8)|0);
      var $20=HEAP32[(($tt_14)>>2)];
      var $cmp15=(($18)|0)==(($20)|0);
      if ($cmp15) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $21=$n11;
      var $i_key17=(($21+12)|0);
      var $tvk18=$i_key17;
      var $22=$key_addr;
      var $call19=_luaV_equalobj_(0, $tvk18, $22);
      var $tobool=(($call19)|0)!=0;
      if ($tobool) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $23=$n11;
      var $i_val=(($23)|0);
      $retval=$i_val;
      label = 16; break;
    case 12: 
      var $24=$n11;
      var $i_key21=(($24+12)|0);
      var $nk=$i_key21;
      var $next=(($nk+12)|0);
      var $25=HEAP32[(($next)>>2)];
      $n11=$25;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $26=$n11;
      var $tobool23=(($26)|0)!=0;
      if ($tobool23) { label = 9; break; } else { label = 15; break; }
    case 15: 
      $retval=5244092;
      label = 16; break;
    case 16: 
      var $27=$retval;
      STACKTOP = __stackBase__;
      return $27;
  }

}
_luaH_get["X"]=1;

function _luaH_newkey($L, $t, $key) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $t_addr;
      var $key_addr;
      var $mp;
      var $othern;
      var $n12;
      var $io2;
      var $io1;
      $L_addr=$L;
      $t_addr=$t;
      $key_addr=$key;
      var $0=$key_addr;
      var $tt_=(($0+8)|0);
      var $1=HEAP32[(($tt_)>>2)];
      var $cmp=(($1)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$L_addr;
      _luaG_runerror($2, ((5250728)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));

    case 4: 
      var $3=$key_addr;
      var $tt_1=(($3+8)|0);
      var $4=HEAP32[(($tt_1)>>2)];
      var $cmp2=(($4)|0)==3;
      if ($cmp2) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $5=$key_addr;
      var $value_=(($5)|0);
      var $n=$value_;
      var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $7=$key_addr;
      var $value_3=(($7)|0);
      var $n4=$value_3;
      var $8=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n4)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n4)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp5=$6 == $8;
      if ($cmp5) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $9=$L_addr;
      _luaG_runerror($9, ((5253024)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));

    case 7: 
      label = 8; break;
    case 8: 
      var $10=$t_addr;
      var $11=$key_addr;
      var $call=_mainposition($10, $11);
      $mp=$call;
      var $12=$mp;
      var $i_val=(($12)|0);
      var $tt_8=(($i_val+8)|0);
      var $13=HEAP32[(($tt_8)>>2)];
      var $cmp9=(($13)|0)==0;
      if ($cmp9) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $14=$mp;
      var $cmp10=(($14)|0)==5244816;
      if ($cmp10) { label = 10; break; } else { label = 19; break; }
    case 10: 
      var $15=$t_addr;
      var $call13=_getfreepos($15);
      $n12=$call13;
      var $16=$n12;
      var $cmp14=(($16)|0)==0;
      if ($cmp14) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $17=$L_addr;
      var $18=$t_addr;
      var $19=$key_addr;
      _rehash($17, $18, $19);
      var $20=$L_addr;
      var $21=$t_addr;
      var $22=$key_addr;
      var $call16=_luaH_set($20, $21, $22);
      $retval=$call16;
      label = 24; break;
    case 12: 
      var $23=$t_addr;
      var $24=$mp;
      var $i_key=(($24+12)|0);
      var $tvk=$i_key;
      var $call18=_mainposition($23, $tvk);
      $othern=$call18;
      var $25=$othern;
      var $26=$mp;
      var $cmp19=(($25)|0)!=(($26)|0);
      if ($cmp19) { label = 13; break; } else { label = 17; break; }
    case 13: 
      label = 14; break;
    case 14: 
      var $27=$othern;
      var $i_key21=(($27+12)|0);
      var $nk=$i_key21;
      var $next=(($nk+12)|0);
      var $28=HEAP32[(($next)>>2)];
      var $29=$mp;
      var $cmp22=(($28)|0)!=(($29)|0);
      if ($cmp22) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $30=$othern;
      var $i_key23=(($30+12)|0);
      var $nk24=$i_key23;
      var $next25=(($nk24+12)|0);
      var $31=HEAP32[(($next25)>>2)];
      $othern=$31;
      label = 14; break;
    case 16: 
      var $32=$n12;
      var $33=$othern;
      var $i_key26=(($33+12)|0);
      var $nk27=$i_key26;
      var $next28=(($nk27+12)|0);
      HEAP32[(($next28)>>2)]=$32;
      var $34=$n12;
      var $35=$mp;
      var $36=$34;
      var $37=$35;
      HEAP32[(($36)>>2)]=HEAP32[(($37)>>2)];HEAP32[((($36)+(4))>>2)]=HEAP32[((($37)+(4))>>2)];HEAP32[((($36)+(8))>>2)]=HEAP32[((($37)+(8))>>2)];HEAP32[((($36)+(12))>>2)]=HEAP32[((($37)+(12))>>2)];HEAP32[((($36)+(16))>>2)]=HEAP32[((($37)+(16))>>2)];HEAP32[((($36)+(20))>>2)]=HEAP32[((($37)+(20))>>2)];HEAP32[((($36)+(24))>>2)]=HEAP32[((($37)+(24))>>2)];
      var $38=$mp;
      var $i_key29=(($38+12)|0);
      var $nk30=$i_key29;
      var $next31=(($nk30+12)|0);
      HEAP32[(($next31)>>2)]=0;
      var $39=$mp;
      var $i_val32=(($39)|0);
      var $tt_33=(($i_val32+8)|0);
      HEAP32[(($tt_33)>>2)]=0;
      label = 18; break;
    case 17: 
      var $40=$mp;
      var $i_key35=(($40+12)|0);
      var $nk36=$i_key35;
      var $next37=(($nk36+12)|0);
      var $41=HEAP32[(($next37)>>2)];
      var $42=$n12;
      var $i_key38=(($42+12)|0);
      var $nk39=$i_key38;
      var $next40=(($nk39+12)|0);
      HEAP32[(($next40)>>2)]=$41;
      var $43=$n12;
      var $44=$mp;
      var $i_key41=(($44+12)|0);
      var $nk42=$i_key41;
      var $next43=(($nk42+12)|0);
      HEAP32[(($next43)>>2)]=$43;
      var $45=$n12;
      $mp=$45;
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $46=$key_addr;
      $io2=$46;
      var $47=$mp;
      var $i_key46=(($47+12)|0);
      var $tvk47=$i_key46;
      $io1=$tvk47;
      var $48=$io1;
      var $value_48=(($48)|0);
      var $49=$io2;
      var $value_49=(($49)|0);
      var $50=$value_48;
      var $51=$value_49;
      HEAP32[(($50)>>2)]=HEAP32[(($51)>>2)];HEAP32[((($50)+(4))>>2)]=HEAP32[((($51)+(4))>>2)];
      var $52=$io2;
      var $tt_50=(($52+8)|0);
      var $53=HEAP32[(($tt_50)>>2)];
      var $54=$io1;
      var $tt_51=(($54+8)|0);
      HEAP32[(($tt_51)>>2)]=$53;
      var $55=$key_addr;
      var $tt_52=(($55+8)|0);
      var $56=HEAP32[(($tt_52)>>2)];
      var $and=$56 & 64;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 20; break; } else { label = 23; break; }
    case 20: 
      var $57=$key_addr;
      var $value_54=(($57)|0);
      var $gc=$value_54;
      var $58=HEAP32[(($gc)>>2)];
      var $gch=$58;
      var $marked=(($gch+5)|0);
      var $59=HEAP8[($marked)];
      var $conv=(($59)&255);
      var $and55=$conv & 3;
      var $tobool56=(($and55)|0)!=0;
      if ($tobool56) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $60=$t_addr;
      var $61=$60;
      var $gch58=$61;
      var $marked59=(($gch58+5)|0);
      var $62=HEAP8[($marked59)];
      var $conv60=(($62)&255);
      var $and61=$conv60 & 4;
      var $tobool62=(($and61)|0)!=0;
      if ($tobool62) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $63=$L_addr;
      var $64=$t_addr;
      var $65=$64;
      _luaC_barrierback_($63, $65);
      label = 23; break;
    case 23: 
      var $66=$mp;
      var $i_val65=(($66)|0);
      $retval=$i_val65;
      label = 24; break;
    case 24: 
      var $67=$retval;
      STACKTOP = __stackBase__;
      return $67;
  }

}
_luaH_newkey["X"]=1;

function _numusearray($t, $nums) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $nums_addr;
      var $lg;
      var $ttlg;
      var $ause;
      var $i;
      var $lc;
      var $lim;
      $t_addr=$t;
      $nums_addr=$nums;
      $ause=0;
      $i=1;
      $lg=0;
      $ttlg=1;
      label = 3; break;
    case 3: 
      var $0=$lg;
      var $cmp=(($0)|0) <= 30;
      if ($cmp) { label = 4; break; } else { label = 16; break; }
    case 4: 
      $lc=0;
      var $1=$ttlg;
      $lim=$1;
      var $2=$lim;
      var $3=$t_addr;
      var $sizearray=(($3+28)|0);
      var $4=HEAP32[(($sizearray)>>2)];
      var $cmp1=(($2)|0) > (($4)|0);
      if ($cmp1) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $5=$t_addr;
      var $sizearray2=(($5+28)|0);
      var $6=HEAP32[(($sizearray2)>>2)];
      $lim=$6;
      var $7=$i;
      var $8=$lim;
      var $cmp3=(($7)|0) > (($8)|0);
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 16; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $9=$i;
      var $10=$lim;
      var $cmp7=(($9)|0) <= (($10)|0);
      if ($cmp7) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $11=$i;
      var $sub=((($11)-(1))|0);
      var $12=$t_addr;
      var $array=(($12+12)|0);
      var $13=HEAP32[(($array)>>2)];
      var $arrayidx=(($13+((($sub)*(12))&-1))|0);
      var $tt_=(($arrayidx+8)|0);
      var $14=HEAP32[(($tt_)>>2)];
      var $cmp9=(($14)|0)==0;
      if ($cmp9) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $15=$lc;
      var $inc=((($15)+(1))|0);
      $lc=$inc;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $16=$i;
      var $inc12=((($16)+(1))|0);
      $i=$inc12;
      label = 9; break;
    case 14: 
      var $17=$lc;
      var $18=$lg;
      var $19=$nums_addr;
      var $arrayidx13=(($19+($18<<2))|0);
      var $20=HEAP32[(($arrayidx13)>>2)];
      var $add=((($20)+($17))|0);
      HEAP32[(($arrayidx13)>>2)]=$add;
      var $21=$lc;
      var $22=$ause;
      var $add14=((($22)+($21))|0);
      $ause=$add14;
      label = 15; break;
    case 15: 
      var $23=$lg;
      var $inc16=((($23)+(1))|0);
      $lg=$inc16;
      var $24=$ttlg;
      var $mul=($24<<1);
      $ttlg=$mul;
      label = 3; break;
    case 16: 
      var $25=$ause;

      return $25;
  }

}
_numusearray["X"]=1;

function _computesizes($nums, $narray) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $nums_addr;
      var $narray_addr;
      var $i;
      var $twotoi;
      var $a;
      var $na;
      var $n;
      $nums_addr=$nums;
      $narray_addr=$narray;
      $a=0;
      $na=0;
      $n=0;
      $i=0;
      $twotoi=1;
      label = 3; break;
    case 3: 
      var $0=$twotoi;
      var $div=((((($0)|0))/(2))&-1);
      var $1=$narray_addr;
      var $2=HEAP32[(($1)>>2)];
      var $cmp=(($div)|0) < (($2)|0);
      if ($cmp) { label = 4; break; } else { label = 12; break; }
    case 4: 
      var $3=$i;
      var $4=$nums_addr;
      var $arrayidx=(($4+($3<<2))|0);
      var $5=HEAP32[(($arrayidx)>>2)];
      var $cmp1=(($5)|0) > 0;
      if ($cmp1) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $6=$i;
      var $7=$nums_addr;
      var $arrayidx2=(($7+($6<<2))|0);
      var $8=HEAP32[(($arrayidx2)>>2)];
      var $9=$a;
      var $add=((($9)+($8))|0);
      $a=$add;
      var $10=$a;
      var $11=$twotoi;
      var $div3=((((($11)|0))/(2))&-1);
      var $cmp4=(($10)|0) > (($div3)|0);
      if ($cmp4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $12=$twotoi;
      $n=$12;
      var $13=$a;
      $na=$13;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $14=$a;
      var $15=$narray_addr;
      var $16=HEAP32[(($15)>>2)];
      var $cmp7=(($14)|0)==(($16)|0);
      if ($cmp7) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 12; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $17=$i;
      var $inc=((($17)+(1))|0);
      $i=$inc;
      var $18=$twotoi;
      var $mul=($18<<1);
      $twotoi=$mul;
      label = 3; break;
    case 12: 
      var $19=$n;
      var $20=$narray_addr;
      HEAP32[(($20)>>2)]=$19;
      var $21=$na;

      return $21;
  }

}
_computesizes["X"]=1;

function _arrayindex($key) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; _memset(__stackBase__, 0, 8);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $key_addr;
      var $n;
      var $k;
      var $u=__stackBase__;
      $key_addr=$key;
      var $0=$key_addr;
      var $tt_=(($0+8)|0);
      var $1=HEAP32[(($tt_)>>2)];
      var $cmp=(($1)|0)==3;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $2=$key_addr;
      var $value_=(($2)|0);
      var $n1=$value_;
      var $3=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n1)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n1)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $n=$3;
      var $4=$n;
      var $add=($4)+(6755399441055744);
      var $l_d=$u;
      (HEAPF64[(tempDoublePtr)>>3]=$add,HEAP32[(($l_d)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($l_d)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $5=HEAP32[((((5245356)|0))>>2)];
      var $cmp2=(($5)|0)==33;
      var $conv=(($cmp2)&1);
      var $l_p=$u;
      var $arrayidx=(($l_p+($conv<<2))|0);
      var $6=HEAP32[(($arrayidx)>>2)];
      $k=$6;
      var $7=$k;
      var $conv3=(($7)|0);
      var $8=$n;
      var $cmp4=$conv3 == $8;
      if ($cmp4) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $9=$k;
      $retval=$9;
      label = 7; break;
    case 5: 
      label = 6; break;
    case 6: 
      $retval=-1;
      label = 7; break;
    case 7: 
      var $10=$retval;
      STACKTOP = __stackBase__;
      return $10;
  }

}


function _luaH_getn($t) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $t_addr;
      var $j;
      var $i;
      var $m;
      $t_addr=$t;
      var $0=$t_addr;
      var $sizearray=(($0+28)|0);
      var $1=HEAP32[(($sizearray)>>2)];
      $j=$1;
      var $2=$j;
      var $cmp=(($2)>>>0) > 0;
      if ($cmp) { label = 3; break; } else { label = 11; break; }
    case 3: 
      var $3=$j;
      var $sub=((($3)-(1))|0);
      var $4=$t_addr;
      var $array=(($4+12)|0);
      var $5=HEAP32[(($array)>>2)];
      var $arrayidx=(($5+((($sub)*(12))&-1))|0);
      var $tt_=(($arrayidx+8)|0);
      var $6=HEAP32[(($tt_)>>2)];
      var $cmp1=(($6)|0)==0;
      if ($cmp1) { label = 4; break; } else { label = 11; break; }
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $7=$j;
      var $8=$i;
      var $sub2=((($7)-($8))|0);
      var $cmp3=(($sub2)>>>0) > 1;
      if ($cmp3) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $9=$i;
      var $10=$j;
      var $add=((($9)+($10))|0);
      var $div=Math.floor(((($add)>>>0))/(2));
      $m=$div;
      var $11=$m;
      var $sub4=((($11)-(1))|0);
      var $12=$t_addr;
      var $array5=(($12+12)|0);
      var $13=HEAP32[(($array5)>>2)];
      var $arrayidx6=(($13+((($sub4)*(12))&-1))|0);
      var $tt_7=(($arrayidx6+8)|0);
      var $14=HEAP32[(($tt_7)>>2)];
      var $cmp8=(($14)|0)==0;
      if ($cmp8) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $15=$m;
      $j=$15;
      label = 9; break;
    case 8: 
      var $16=$m;
      $i=$16;
      label = 9; break;
    case 9: 
      label = 5; break;
    case 10: 
      var $17=$i;
      $retval=$17;
      label = 14; break;
    case 11: 
      var $18=$t_addr;
      var $node=(($18+16)|0);
      var $19=HEAP32[(($node)>>2)];
      var $cmp11=(($19)|0)==5244816;
      if ($cmp11) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $20=$j;
      $retval=$20;
      label = 14; break;
    case 13: 
      var $21=$t_addr;
      var $22=$j;
      var $call=_unbound_search($21, $22);
      $retval=$call;
      label = 14; break;
    case 14: 
      var $23=$retval;

      return $23;
  }

}
_luaH_getn["X"]=1;

function _unbound_search($t, $j) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $t_addr;
      var $j_addr;
      var $i;
      var $m;
      $t_addr=$t;
      $j_addr=$j;
      var $0=$j_addr;
      $i=$0;
      var $1=$j_addr;
      var $inc=((($1)+(1))|0);
      $j_addr=$inc;
      label = 3; break;
    case 3: 
      var $2=$t_addr;
      var $3=$j_addr;
      var $call=_luaH_getint($2, $3);
      var $tt_=(($call+8)|0);
      var $4=HEAP32[(($tt_)>>2)];
      var $cmp=(($4)|0)==0;
      var $lnot=$cmp ^ 1;
      if ($lnot) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $5=$j_addr;
      $i=$5;
      var $6=$j_addr;
      var $mul=($6<<1);
      $j_addr=$mul;
      var $7=$j_addr;
      var $cmp1=(($7)>>>0) > 2147483645;
      if ($cmp1) { label = 5; break; } else { label = 9; break; }
    case 5: 
      $i=1;
      label = 6; break;
    case 6: 
      var $8=$t_addr;
      var $9=$i;
      var $call3=_luaH_getint($8, $9);
      var $tt_4=(($call3+8)|0);
      var $10=HEAP32[(($tt_4)>>2)];
      var $cmp5=(($10)|0)==0;
      var $lnot6=$cmp5 ^ 1;
      if ($lnot6) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $11=$i;
      var $inc8=((($11)+(1))|0);
      $i=$inc8;
      label = 6; break;
    case 8: 
      var $12=$i;
      var $sub=((($12)-(1))|0);
      $retval=$sub;
      label = 17; break;
    case 9: 
      label = 3; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $13=$j_addr;
      var $14=$i;
      var $sub11=((($13)-($14))|0);
      var $cmp12=(($sub11)>>>0) > 1;
      if ($cmp12) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $15=$i;
      var $16=$j_addr;
      var $add=((($15)+($16))|0);
      var $div=Math.floor(((($add)>>>0))/(2));
      $m=$div;
      var $17=$t_addr;
      var $18=$m;
      var $call14=_luaH_getint($17, $18);
      var $tt_15=(($call14+8)|0);
      var $19=HEAP32[(($tt_15)>>2)];
      var $cmp16=(($19)|0)==0;
      if ($cmp16) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $20=$m;
      $j_addr=$20;
      label = 15; break;
    case 14: 
      var $21=$m;
      $i=$21;
      label = 15; break;
    case 15: 
      label = 11; break;
    case 16: 
      var $22=$i;
      $retval=$22;
      label = 17; break;
    case 17: 
      var $23=$retval;

      return $23;
  }

}
_unbound_search["X"]=1;

function _numusehash($t, $nums, $pnasize) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $nums_addr;
      var $pnasize_addr;
      var $totaluse;
      var $ause;
      var $i;
      var $n;
      $t_addr=$t;
      $nums_addr=$nums;
      $pnasize_addr=$pnasize;
      $totaluse=0;
      $ause=0;
      var $0=$t_addr;
      var $lsizenode=(($0+7)|0);
      var $1=HEAP8[($lsizenode)];
      var $conv=(($1)&255);
      var $shl=1 << $conv;
      $i=$shl;
      label = 3; break;
    case 3: 
      var $2=$i;
      var $dec=((($2)-(1))|0);
      $i=$dec;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $3=$i;
      var $4=$t_addr;
      var $node=(($4+16)|0);
      var $5=HEAP32[(($node)>>2)];
      var $arrayidx=(($5+((($3)*(28))&-1))|0);
      $n=$arrayidx;
      var $6=$n;
      var $i_val=(($6)|0);
      var $tt_=(($i_val+8)|0);
      var $7=HEAP32[(($tt_)>>2)];
      var $cmp=(($7)|0)==0;
      if ($cmp) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $8=$n;
      var $i_key=(($8+12)|0);
      var $tvk=$i_key;
      var $9=$nums_addr;
      var $call=_countint($tvk, $9);
      var $10=$ause;
      var $add=((($10)+($call))|0);
      $ause=$add;
      var $11=$totaluse;
      var $inc=((($11)+(1))|0);
      $totaluse=$inc;
      label = 6; break;
    case 6: 
      label = 3; break;
    case 7: 
      var $12=$ause;
      var $13=$pnasize_addr;
      var $14=HEAP32[(($13)>>2)];
      var $add2=((($14)+($12))|0);
      HEAP32[(($13)>>2)]=$add2;
      var $15=$totaluse;

      return $15;
  }

}
_numusehash["X"]=1;

function _countint($key, $nums) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $key_addr;
      var $nums_addr;
      var $k;
      $key_addr=$key;
      $nums_addr=$nums;
      var $0=$key_addr;
      var $call=_arrayindex($0);
      $k=$call;
      var $1=$k;
      var $cmp=0 < (($1)|0);
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $2=$k;
      var $cmp1=(($2)|0) <= 1073741824;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$k;
      var $call2=_luaO_ceillog2($3);
      var $4=$nums_addr;
      var $arrayidx=(($4+($call2<<2))|0);
      var $5=HEAP32[(($arrayidx)>>2)];
      var $inc=((($5)+(1))|0);
      HEAP32[(($arrayidx)>>2)]=$inc;
      $retval=1;
      label = 6; break;
    case 5: 
      $retval=0;
      label = 6; break;
    case 6: 
      var $6=$retval;

      return $6;
  }

}


function _luaT_init($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $i;
      $L_addr=$L;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|0) < 17;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$L_addr;
      var $2=$i;
      var $arrayidx=((5243984+($2<<2))|0);
      var $3=HEAP32[(($arrayidx)>>2)];
      var $call=_luaS_new($1, $3);
      var $4=$i;
      var $5=$L_addr;
      var $l_G=(($5+12)|0);
      var $6=HEAP32[(($l_G)>>2)];
      var $tmname=(($6+164)|0);
      var $arrayidx1=(($tmname+($4<<2))|0);
      HEAP32[(($arrayidx1)>>2)]=$call;
      var $7=$i;
      var $8=$L_addr;
      var $l_G2=(($8+12)|0);
      var $9=HEAP32[(($l_G2)>>2)];
      var $tmname3=(($9+164)|0);
      var $arrayidx4=(($tmname3+($7<<2))|0);
      var $10=HEAP32[(($arrayidx4)>>2)];
      var $tsv=$10;
      var $marked=(($tsv+5)|0);
      var $11=HEAP8[($marked)];
      var $conv=(($11)&255);
      var $or=$conv | 32;
      var $conv5=(($or) & 255);
      HEAP8[($marked)]=$conv5;
      label = 5; break;
    case 5: 
      var $12=$i;
      var $inc=((($12)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 

      return;
  }

}


function _luaT_gettm($events, $event, $ename) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $events_addr;
      var $event_addr;
      var $ename_addr;
      var $tm;
      $events_addr=$events;
      $event_addr=$event;
      $ename_addr=$ename;
      var $0=$events_addr;
      var $1=$ename_addr;
      var $call=_luaH_getstr($0, $1);
      $tm=$call;
      var $2=$tm;
      var $tt_=(($2+8)|0);
      var $3=HEAP32[(($tt_)>>2)];
      var $cmp=(($3)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$event_addr;
      var $shl=1 << $4;
      var $conv=(($shl) & 255);
      var $conv1=(($conv)&255);
      var $5=$events_addr;
      var $flags=(($5+6)|0);
      var $6=HEAP8[($flags)];
      var $conv2=(($6)&255);
      var $or=$conv2 | $conv1;
      var $conv3=(($or) & 255);
      HEAP8[($flags)]=$conv3;
      $retval=0;
      label = 5; break;
    case 4: 
      var $7=$tm;
      $retval=$7;
      label = 5; break;
    case 5: 
      var $8=$retval;

      return $8;
  }

}


function _luaT_gettmbyobj($L, $o, $event) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $o_addr;
      var $event_addr;
      var $mt;
      $L_addr=$L;
      $o_addr=$o;
      $event_addr=$event;
      var $0=$o_addr;
      var $tt_=(($0+8)|0);
      var $1=HEAP32[(($tt_)>>2)];
      var $and=$1 & 15;
      if ((($and)|0)==5) {
        label = 3; break;
      }
      else if ((($and)|0)==7) {
        label = 4; break;
      }
      else {
      label = 5; break;
      }
      
    case 3: 
      var $2=$o_addr;
      var $value_=(($2)|0);
      var $gc=$value_;
      var $3=HEAP32[(($gc)>>2)];
      var $h=$3;
      var $metatable=(($h+8)|0);
      var $4=HEAP32[(($metatable)>>2)];
      $mt=$4;
      label = 6; break;
    case 4: 
      var $5=$o_addr;
      var $value_2=(($5)|0);
      var $gc3=$value_2;
      var $6=HEAP32[(($gc3)>>2)];
      var $u=$6;
      var $uv=$u;
      var $metatable4=(($uv+8)|0);
      var $7=HEAP32[(($metatable4)>>2)];
      $mt=$7;
      label = 6; break;
    case 5: 
      var $8=$o_addr;
      var $tt_5=(($8+8)|0);
      var $9=HEAP32[(($tt_5)>>2)];
      var $and6=$9 & 15;
      var $10=$L_addr;
      var $l_G=(($10+12)|0);
      var $11=HEAP32[(($l_G)>>2)];
      var $mt7=(($11+232)|0);
      var $arrayidx=(($mt7+($and6<<2))|0);
      var $12=HEAP32[(($arrayidx)>>2)];
      $mt=$12;
      label = 6; break;
    case 6: 
      var $13=$mt;
      var $tobool=(($13)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $14=$mt;
      var $15=$event_addr;
      var $16=$L_addr;
      var $l_G8=(($16+12)|0);
      var $17=HEAP32[(($l_G8)>>2)];
      var $tmname=(($17+164)|0);
      var $arrayidx9=(($tmname+($15<<2))|0);
      var $18=HEAP32[(($arrayidx9)>>2)];
      var $call=_luaH_getstr($14, $18);
      var $cond = $call;label = 9; break;
    case 8: 
      var $cond = 5244092;label = 9; break;
    case 9: 
      var $cond;

      return $cond;
  }

}
_luaT_gettmbyobj["X"]=1;

function _luaU_undump($L, $Z, $buff, $name) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; _memset(__stackBase__, 0, 16);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $Z_addr;
      var $buff_addr;
      var $name_addr;
      var $S=__stackBase__;
      var $cl;
      var $io;
      var $p32;
      var $io41;
      $L_addr=$L;
      $Z_addr=$Z;
      $buff_addr=$buff;
      $name_addr=$name;
      var $0=$name_addr;
      var $1=HEAP8[($0)];
      var $conv=(($1 << 24) >> 24);
      var $cmp=(($conv)|0)==64;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$name_addr;
      var $3=HEAP8[($2)];
      var $conv2=(($3 << 24) >> 24);
      var $cmp3=(($conv2)|0)==61;
      if ($cmp3) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$name_addr;
      var $add_ptr=(($4+1)|0);
      var $name5=(($S+12)|0);
      HEAP32[(($name5)>>2)]=$add_ptr;
      label = 9; break;
    case 5: 
      var $5=$name_addr;
      var $6=HEAP8[($5)];
      var $conv6=(($6 << 24) >> 24);
      var $7=HEAP8[((((5249720)|0))|0)];
      var $conv7=(($7 << 24) >> 24);
      var $cmp8=(($conv6)|0)==(($conv7)|0);
      if ($cmp8) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $name11=(($S+12)|0);
      HEAP32[(($name11)>>2)]=((5252872)|0);
      label = 8; break;
    case 7: 
      var $8=$name_addr;
      var $name13=(($S+12)|0);
      HEAP32[(($name13)>>2)]=$8;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $9=$L_addr;
      var $L15=(($S)|0);
      HEAP32[(($L15)>>2)]=$9;
      var $10=$Z_addr;
      var $Z16=(($S+4)|0);
      HEAP32[(($Z16)>>2)]=$10;
      var $11=$buff_addr;
      var $b=(($S+8)|0);
      HEAP32[(($b)>>2)]=$11;
      _LoadHeader($S);
      var $12=$L_addr;
      var $call=_luaF_newLclosure($12, 1);
      $cl=$call;
      var $13=$L_addr;
      var $top=(($13+8)|0);
      var $14=HEAP32[(($top)>>2)];
      $io=$14;
      var $15=$cl;
      var $16=$15;
      var $17=$io;
      var $value_=(($17)|0);
      var $gc=$value_;
      HEAP32[(($gc)>>2)]=$16;
      var $18=$io;
      var $tt_=(($18+8)|0);
      HEAP32[(($tt_)>>2)]=70;
      var $19=$L_addr;
      var $top17=(($19+8)|0);
      var $20=HEAP32[(($top17)>>2)];
      var $incdec_ptr=(($20+12)|0);
      HEAP32[(($top17)>>2)]=$incdec_ptr;
      var $21=$L_addr;
      var $stack_last=(($21+24)|0);
      var $22=HEAP32[(($stack_last)>>2)];
      var $23=$L_addr;
      var $top18=(($23+8)|0);
      var $24=HEAP32[(($top18)>>2)];
      var $sub_ptr_lhs_cast=$22;
      var $sub_ptr_rhs_cast=$24;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(12))&-1);
      var $cmp19=(($sub_ptr_div)|0) <= 0;
      if ($cmp19) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $25=$L_addr;
      _luaD_growstack($25, 0);
      label = 12; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $26=$L_addr;
      var $call24=_luaF_newproto($26);
      var $27=$cl;
      var $l=$27;
      var $p=(($l+12)|0);
      HEAP32[(($p)>>2)]=$call24;
      var $28=$cl;
      var $l25=$28;
      var $p26=(($l25+12)|0);
      var $29=HEAP32[(($p26)>>2)];
      _LoadFunction($S, $29);
      var $30=$cl;
      var $l27=$30;
      var $p28=(($l27+12)|0);
      var $31=HEAP32[(($p28)>>2)];
      var $sizeupvalues=(($31+40)|0);
      var $32=HEAP32[(($sizeupvalues)>>2)];
      var $cmp29=(($32)|0)!=1;
      if ($cmp29) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $33=$cl;
      var $l33=$33;
      var $p34=(($l33+12)|0);
      var $34=HEAP32[(($p34)>>2)];
      $p32=$34;
      var $35=$L_addr;
      var $36=$cl;
      var $l35=$36;
      var $p36=(($l35+12)|0);
      var $37=HEAP32[(($p36)>>2)];
      var $sizeupvalues37=(($37+40)|0);
      var $38=HEAP32[(($sizeupvalues37)>>2)];
      var $call38=_luaF_newLclosure($35, $38);
      $cl=$call38;
      var $39=$p32;
      var $40=$cl;
      var $l39=$40;
      var $p40=(($l39+12)|0);
      HEAP32[(($p40)>>2)]=$39;
      var $41=$L_addr;
      var $top42=(($41+8)|0);
      var $42=HEAP32[(($top42)>>2)];
      var $add_ptr43=((($42)-(12))|0);
      $io41=$add_ptr43;
      var $43=$cl;
      var $44=$43;
      var $45=$io41;
      var $value_44=(($45)|0);
      var $gc45=$value_44;
      HEAP32[(($gc45)>>2)]=$44;
      var $46=$io41;
      var $tt_46=(($46+8)|0);
      HEAP32[(($tt_46)>>2)]=70;
      label = 14; break;
    case 14: 
      var $47=$cl;
      STACKTOP = __stackBase__;
      return $47;
  }

}
_luaU_undump["X"]=1;

function _LoadHeader($S) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; _memset(__stackBase__, 0, 40);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $S_addr;
      var $h=__stackBase__;
      var $s=(__stackBase__)+(20);
      $S_addr=$S;
      var $arraydecay=(($h)|0);
      _luaU_header($arraydecay);
      var $0=$s;
      var $1=$h;
      HEAP8[($0)]=HEAP8[($1)];
      var $2=$S_addr;
      var $arraydecay1=(($s)|0);
      var $add_ptr=(($arraydecay1+1)|0);
      _LoadBlock($2, $add_ptr, 17);
      var $arraydecay2=(($h)|0);
      var $arraydecay3=(($s)|0);
      var $call=_memcmp($arraydecay2, $arraydecay3, 18);
      var $cmp=(($call)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      STACKTOP = __stackBase__;
      return;
    case 4: 
      var $arraydecay4=(($h)|0);
      var $arraydecay5=(($s)|0);
      var $call6=_memcmp($arraydecay4, $arraydecay5, 4);
      var $cmp7=(($call6)|0)!=0;
      if ($cmp7) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=$S_addr;
      _error($3, ((5245784)|0));

    case 6: 
      var $arraydecay10=(($h)|0);
      var $arraydecay11=(($s)|0);
      var $call12=_memcmp($arraydecay10, $arraydecay11, 6);
      var $cmp13=(($call12)|0)!=0;
      if ($cmp13) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $4=$S_addr;
      _error($4, ((5245516)|0));

    case 8: 
      var $arraydecay16=(($h)|0);
      var $arraydecay17=(($s)|0);
      var $call18=_memcmp($arraydecay16, $arraydecay17, 12);
      var $cmp19=(($call18)|0)!=0;
      if ($cmp19) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $5=$S_addr;
      _error($5, ((5253708)|0));

    case 10: 
      var $6=$S_addr;
      _error($6, ((5246132)|0));

  }

}


function _LoadFunction($S, $f) {
  var label = 0;


  var $S_addr;
  var $f_addr;
  $S_addr=$S;
  $f_addr=$f;
  var $0=$S_addr;
  var $call=_LoadInt($0);
  var $1=$f_addr;
  var $linedefined=(($1+64)|0);
  HEAP32[(($linedefined)>>2)]=$call;
  var $2=$S_addr;
  var $call1=_LoadInt($2);
  var $3=$f_addr;
  var $lastlinedefined=(($3+68)|0);
  HEAP32[(($lastlinedefined)>>2)]=$call1;
  var $4=$S_addr;
  var $call2=_LoadChar($4);
  var $conv=(($call2) & 255);
  var $5=$f_addr;
  var $numparams=(($5+76)|0);
  HEAP8[($numparams)]=$conv;
  var $6=$S_addr;
  var $call3=_LoadChar($6);
  var $conv4=(($call3) & 255);
  var $7=$f_addr;
  var $is_vararg=(($7+77)|0);
  HEAP8[($is_vararg)]=$conv4;
  var $8=$S_addr;
  var $call5=_LoadChar($8);
  var $conv6=(($call5) & 255);
  var $9=$f_addr;
  var $maxstacksize=(($9+78)|0);
  HEAP8[($maxstacksize)]=$conv6;
  var $10=$S_addr;
  var $11=$f_addr;
  _LoadCode($10, $11);
  var $12=$S_addr;
  var $13=$f_addr;
  _LoadConstants($12, $13);
  var $14=$S_addr;
  var $15=$f_addr;
  _LoadUpvalues($14, $15);
  var $16=$S_addr;
  var $17=$f_addr;
  _LoadDebug($16, $17);

  return;
}


function _luaU_header($h) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);

  var $h_addr;
  var $x=__stackBase__;
  $h_addr=$h;
  HEAP32[(($x)>>2)]=1;
  var $0=$h_addr;
  HEAP8[($0)]=HEAP8[((((5249720)|0))|0)];HEAP8[((($0)+(1))|0)]=HEAP8[(((((5249720)|0))+(1))|0)];HEAP8[((($0)+(2))|0)]=HEAP8[(((((5249720)|0))+(2))|0)];HEAP8[((($0)+(3))|0)]=HEAP8[(((((5249720)|0))+(3))|0)];
  var $1=$h_addr;
  var $add_ptr=(($1+4)|0);
  $h_addr=$add_ptr;
  var $2=HEAP8[((((5250836)|0))|0)];
  var $conv=(($2 << 24) >> 24);
  var $sub=((($conv)-(48))|0);
  var $mul=($sub<<4);
  var $3=HEAP8[((((5249044)|0))|0)];
  var $conv1=(($3 << 24) >> 24);
  var $sub2=((($conv1)-(48))|0);
  var $add=((($mul)+($sub2))|0);
  var $conv3=(($add) & 255);
  var $4=$h_addr;
  var $incdec_ptr=(($4+1)|0);
  $h_addr=$incdec_ptr;
  HEAP8[($4)]=$conv3;
  var $5=$h_addr;
  var $incdec_ptr4=(($5+1)|0);
  $h_addr=$incdec_ptr4;
  HEAP8[($5)]=0;
  var $6=$x;
  var $7=HEAP8[($6)];
  var $8=$h_addr;
  var $incdec_ptr5=(($8+1)|0);
  $h_addr=$incdec_ptr5;
  HEAP8[($8)]=$7;
  var $9=$h_addr;
  var $incdec_ptr6=(($9+1)|0);
  $h_addr=$incdec_ptr6;
  HEAP8[($9)]=4;
  var $10=$h_addr;
  var $incdec_ptr7=(($10+1)|0);
  $h_addr=$incdec_ptr7;
  HEAP8[($10)]=4;
  var $11=$h_addr;
  var $incdec_ptr8=(($11+1)|0);
  $h_addr=$incdec_ptr8;
  HEAP8[($11)]=4;
  var $12=$h_addr;
  var $incdec_ptr9=(($12+1)|0);
  $h_addr=$incdec_ptr9;
  HEAP8[($12)]=8;
  var $13=$h_addr;
  var $incdec_ptr10=(($13+1)|0);
  $h_addr=$incdec_ptr10;
  HEAP8[($13)]=0;
  var $14=$h_addr;
  HEAP8[($14)]=HEAP8[((((5247800)|0))|0)];HEAP8[((($14)+(1))|0)]=HEAP8[(((((5247800)|0))+(1))|0)];HEAP8[((($14)+(2))|0)]=HEAP8[(((((5247800)|0))+(2))|0)];HEAP8[((($14)+(3))|0)]=HEAP8[(((((5247800)|0))+(3))|0)];HEAP8[((($14)+(4))|0)]=HEAP8[(((((5247800)|0))+(4))|0)];HEAP8[((($14)+(5))|0)]=HEAP8[(((((5247800)|0))+(5))|0)];
  STACKTOP = __stackBase__;
  return;
}
_luaU_header["X"]=1;

function _LoadChar($S) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);

  var $S_addr;
  var $x=__stackBase__;
  $S_addr=$S;
  var $0=$S_addr;
  _LoadBlock($0, $x, 1);
  var $1=HEAP8[($x)];
  var $conv=(($1 << 24) >> 24);
  STACKTOP = __stackBase__;
  return $conv;
}


function _LoadString($S) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $S_addr;
      var $size=__stackBase__;
      var $s;
      $S_addr=$S;
      var $0=$S_addr;
      var $1=$size;
      _LoadBlock($0, $1, 4);
      var $2=HEAP32[(($size)>>2)];
      var $cmp=(($2)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 5; break;
    case 4: 
      var $3=$S_addr;
      var $L=(($3)|0);
      var $4=HEAP32[(($L)>>2)];
      var $5=$S_addr;
      var $b=(($5+8)|0);
      var $6=HEAP32[(($b)>>2)];
      var $7=HEAP32[(($size)>>2)];
      var $call=_luaZ_openspace($4, $6, $7);
      $s=$call;
      var $8=$S_addr;
      var $9=$s;
      var $10=HEAP32[(($size)>>2)];
      var $mul=$10;
      _LoadBlock($8, $9, $mul);
      var $11=$S_addr;
      var $L1=(($11)|0);
      var $12=HEAP32[(($L1)>>2)];
      var $13=$s;
      var $14=HEAP32[(($size)>>2)];
      var $sub=((($14)-(1))|0);
      var $call2=_luaS_newlstr($12, $13, $sub);
      $retval=$call2;
      label = 5; break;
    case 5: 
      var $15=$retval;
      STACKTOP = __stackBase__;
      return $15;
  }

}


function _LoadNumber($S) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; _memset(__stackBase__, 0, 8);

  var $S_addr;
  var $x=__stackBase__;
  $S_addr=$S;
  var $0=$S_addr;
  var $1=$x;
  _LoadBlock($0, $1, 8);
  var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  STACKTOP = __stackBase__;
  return $2;
}


function _luaV_tonumber($obj, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; _memset(__stackBase__, 0, 8);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $obj_addr;
      var $n_addr;
      var $num=__stackBase__;
      var $io;
      $obj_addr=$obj;
      $n_addr=$n;
      var $0=$obj_addr;
      var $tt_=(($0+8)|0);
      var $1=HEAP32[(($tt_)>>2)];
      var $cmp=(($1)|0)==3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$obj_addr;
      $retval=$2;
      label = 8; break;
    case 4: 
      var $3=$obj_addr;
      var $tt_1=(($3+8)|0);
      var $4=HEAP32[(($tt_1)>>2)];
      var $and=$4 & 15;
      var $cmp2=(($and)|0)==4;
      if ($cmp2) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $5=$obj_addr;
      var $value_=(($5)|0);
      var $gc=$value_;
      var $6=HEAP32[(($gc)>>2)];
      var $ts=$6;
      var $add_ptr=(($ts+16)|0);
      var $7=$add_ptr;
      var $8=$obj_addr;
      var $value_3=(($8)|0);
      var $gc4=$value_3;
      var $9=HEAP32[(($gc4)>>2)];
      var $ts5=$9;
      var $tsv=$ts5;
      var $len=(($tsv+12)|0);
      var $10=HEAP32[(($len)>>2)];
      var $call=_luaO_str2d($7, $10, $num);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $11=$n_addr;
      $io=$11;
      var $12=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($num)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($num)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $13=$io;
      var $value_7=(($13)|0);
      var $n8=$value_7;
      (HEAPF64[(tempDoublePtr)>>3]=$12,HEAP32[(($n8)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n8)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $14=$io;
      var $tt_9=(($14+8)|0);
      HEAP32[(($tt_9)>>2)]=3;
      var $15=$n_addr;
      $retval=$15;
      label = 8; break;
    case 7: 
      $retval=0;
      label = 8; break;
    case 8: 
      var $16=$retval;
      STACKTOP = __stackBase__;
      return $16;
  }

}
_luaV_tonumber["X"]=1;

function _LoadInt($S) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $S_addr;
      var $x=__stackBase__;
      $S_addr=$S;
      var $0=$S_addr;
      var $1=$x;
      _LoadBlock($0, $1, 4);
      var $2=HEAP32[(($x)>>2)];
      var $cmp=(($2)|0) < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$S_addr;
      _error($3, ((5246132)|0));

    case 4: 
      var $4=HEAP32[(($x)>>2)];
      STACKTOP = __stackBase__;
      return $4;
  }

}


function _LoadCode($S, $f) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $S_addr;
      var $f_addr;
      var $n;
      $S_addr=$S;
      $f_addr=$f;
      var $0=$S_addr;
      var $call=_LoadInt($0);
      $n=$call;
      var $1=$n;
      var $add=((($1)+(1))|0);
      var $cmp=(($add)>>>0) > 1073741823;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$S_addr;
      var $L=(($2)|0);
      var $3=HEAP32[(($L)>>2)];
      _luaM_toobig($3);

      label = 5; break;
    case 4: 
      var $5=$S_addr;
      var $L1=(($5)|0);
      var $6=HEAP32[(($L1)>>2)];
      var $7=$n;
      var $mul=($7<<2);
      var $call2=_luaM_realloc_($6, 0, 0, $mul);
      var $cond = $call2;label = 5; break;
    case 5: 
      var $cond;
      var $8=$cond;
      var $9=$f_addr;
      var $code=(($9+12)|0);
      HEAP32[(($code)>>2)]=$8;
      var $10=$n;
      var $11=$f_addr;
      var $sizecode=(($11+48)|0);
      HEAP32[(($sizecode)>>2)]=$10;
      var $12=$S_addr;
      var $13=$f_addr;
      var $code3=(($13+12)|0);
      var $14=HEAP32[(($code3)>>2)];
      var $15=$14;
      var $16=$n;
      var $mul4=($16<<2);
      _LoadBlock($12, $15, $mul4);

      return;
  }

}


function _LoadConstants($S, $f) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $S_addr;
      var $f_addr;
      var $i;
      var $n;
      var $o;
      var $t;
      var $io;
      var $io16;
      var $io22;
      var $x_;
      $S_addr=$S;
      $f_addr=$f;
      var $0=$S_addr;
      var $call=_LoadInt($0);
      $n=$call;
      var $1=$n;
      var $add=((($1)+(1))|0);
      var $cmp=(($add)>>>0) > 357913941;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$S_addr;
      var $L=(($2)|0);
      var $3=HEAP32[(($L)>>2)];
      _luaM_toobig($3);

      label = 5; break;
    case 4: 
      var $5=$S_addr;
      var $L1=(($5)|0);
      var $6=HEAP32[(($L1)>>2)];
      var $7=$n;
      var $mul=((($7)*(12))&-1);
      var $call2=_luaM_realloc_($6, 0, 0, $mul);
      var $cond = $call2;label = 5; break;
    case 5: 
      var $cond;
      var $8=$cond;
      var $9=$f_addr;
      var $k=(($9+8)|0);
      HEAP32[(($k)>>2)]=$8;
      var $10=$n;
      var $11=$f_addr;
      var $sizek=(($11+44)|0);
      HEAP32[(($sizek)>>2)]=$10;
      $i=0;
      label = 6; break;
    case 6: 
      var $12=$i;
      var $13=$n;
      var $cmp3=(($12)|0) < (($13)|0);
      if ($cmp3) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $14=$i;
      var $15=$f_addr;
      var $k4=(($15+8)|0);
      var $16=HEAP32[(($k4)>>2)];
      var $arrayidx=(($16+((($14)*(12))&-1))|0);
      var $tt_=(($arrayidx+8)|0);
      HEAP32[(($tt_)>>2)]=0;
      label = 8; break;
    case 8: 
      var $17=$i;
      var $inc=((($17)+(1))|0);
      $i=$inc;
      label = 6; break;
    case 9: 
      $i=0;
      label = 10; break;
    case 10: 
      var $18=$i;
      var $19=$n;
      var $cmp6=(($18)|0) < (($19)|0);
      if ($cmp6) { label = 11; break; } else { label = 19; break; }
    case 11: 
      var $20=$i;
      var $21=$f_addr;
      var $k8=(($21+8)|0);
      var $22=HEAP32[(($k8)>>2)];
      var $arrayidx9=(($22+((($20)*(12))&-1))|0);
      $o=$arrayidx9;
      var $23=$S_addr;
      var $call10=_LoadChar($23);
      $t=$call10;
      var $24=$t;
      if ((($24)|0)==0) {
        label = 12; break;
      }
      else if ((($24)|0)==1) {
        label = 13; break;
      }
      else if ((($24)|0)==3) {
        label = 14; break;
      }
      else if ((($24)|0)==4) {
        label = 15; break;
      }
      else {
      label = 16; break;
      }
      
    case 12: 
      var $25=$o;
      var $tt_11=(($25+8)|0);
      HEAP32[(($tt_11)>>2)]=0;
      label = 17; break;
    case 13: 
      var $26=$o;
      $io=$26;
      var $27=$S_addr;
      var $call13=_LoadChar($27);
      var $28=$io;
      var $value_=(($28)|0);
      var $b=$value_;
      HEAP32[(($b)>>2)]=$call13;
      var $29=$io;
      var $tt_14=(($29+8)|0);
      HEAP32[(($tt_14)>>2)]=1;
      label = 17; break;
    case 14: 
      var $30=$o;
      $io16=$30;
      var $31=$S_addr;
      var $call17=_LoadNumber($31);
      var $32=$io16;
      var $value_18=(($32)|0);
      var $n19=$value_18;
      (HEAPF64[(tempDoublePtr)>>3]=$call17,HEAP32[(($n19)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n19)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $33=$io16;
      var $tt_20=(($33+8)|0);
      HEAP32[(($tt_20)>>2)]=3;
      label = 17; break;
    case 15: 
      var $34=$o;
      $io22=$34;
      var $35=$S_addr;
      var $call23=_LoadString($35);
      $x_=$call23;
      var $36=$x_;
      var $37=$36;
      var $38=$io22;
      var $value_24=(($38)|0);
      var $gc=$value_24;
      HEAP32[(($gc)>>2)]=$37;
      var $39=$x_;
      var $tsv=$39;
      var $tt=(($tsv+4)|0);
      var $40=HEAP8[($tt)];
      var $conv=(($40)&255);
      var $or=$conv | 64;
      var $41=$io22;
      var $tt_25=(($41+8)|0);
      HEAP32[(($tt_25)>>2)]=$or;
      label = 17; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $42=$i;
      var $inc27=((($42)+(1))|0);
      $i=$inc27;
      label = 10; break;
    case 19: 
      var $43=$S_addr;
      var $call29=_LoadInt($43);
      $n=$call29;
      var $44=$n;
      var $add30=((($44)+(1))|0);
      var $cmp31=(($add30)>>>0) > 1073741823;
      if ($cmp31) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $45=$S_addr;
      var $L34=(($45)|0);
      var $46=HEAP32[(($L34)>>2)];
      _luaM_toobig($46);

      label = 22; break;
    case 21: 
      var $48=$S_addr;
      var $L36=(($48)|0);
      var $49=HEAP32[(($L36)>>2)];
      var $50=$n;
      var $mul37=($50<<2);
      var $call38=_luaM_realloc_($49, 0, 0, $mul37);
      var $cond40 = $call38;label = 22; break;
    case 22: 
      var $cond40;
      var $51=$cond40;
      var $52=$f_addr;
      var $p=(($52+16)|0);
      HEAP32[(($p)>>2)]=$51;
      var $53=$n;
      var $54=$f_addr;
      var $sizep=(($54+56)|0);
      HEAP32[(($sizep)>>2)]=$53;
      $i=0;
      label = 23; break;
    case 23: 
      var $55=$i;
      var $56=$n;
      var $cmp42=(($55)|0) < (($56)|0);
      if ($cmp42) { label = 24; break; } else { label = 26; break; }
    case 24: 
      var $57=$i;
      var $58=$f_addr;
      var $p45=(($58+16)|0);
      var $59=HEAP32[(($p45)>>2)];
      var $arrayidx46=(($59+($57<<2))|0);
      HEAP32[(($arrayidx46)>>2)]=0;
      label = 25; break;
    case 25: 
      var $60=$i;
      var $inc48=((($60)+(1))|0);
      $i=$inc48;
      label = 23; break;
    case 26: 
      $i=0;
      label = 27; break;
    case 27: 
      var $61=$i;
      var $62=$n;
      var $cmp51=(($61)|0) < (($62)|0);
      if ($cmp51) { label = 28; break; } else { label = 30; break; }
    case 28: 
      var $63=$S_addr;
      var $L54=(($63)|0);
      var $64=HEAP32[(($L54)>>2)];
      var $call55=_luaF_newproto($64);
      var $65=$i;
      var $66=$f_addr;
      var $p56=(($66+16)|0);
      var $67=HEAP32[(($p56)>>2)];
      var $arrayidx57=(($67+($65<<2))|0);
      HEAP32[(($arrayidx57)>>2)]=$call55;
      var $68=$S_addr;
      var $69=$i;
      var $70=$f_addr;
      var $p58=(($70+16)|0);
      var $71=HEAP32[(($p58)>>2)];
      var $arrayidx59=(($71+($69<<2))|0);
      var $72=HEAP32[(($arrayidx59)>>2)];
      _LoadFunction($68, $72);
      label = 29; break;
    case 29: 
      var $73=$i;
      var $inc61=((($73)+(1))|0);
      $i=$inc61;
      label = 27; break;
    case 30: 

      return;
  }

}
_LoadConstants["X"]=1;

function _LoadUpvalues($S, $f) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $S_addr;
      var $f_addr;
      var $i;
      var $n;
      $S_addr=$S;
      $f_addr=$f;
      var $0=$S_addr;
      var $call=_LoadInt($0);
      $n=$call;
      var $1=$n;
      var $add=((($1)+(1))|0);
      var $cmp=(($add)>>>0) > 536870911;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$S_addr;
      var $L=(($2)|0);
      var $3=HEAP32[(($L)>>2)];
      _luaM_toobig($3);

      label = 5; break;
    case 4: 
      var $5=$S_addr;
      var $L1=(($5)|0);
      var $6=HEAP32[(($L1)>>2)];
      var $7=$n;
      var $mul=($7<<3);
      var $call2=_luaM_realloc_($6, 0, 0, $mul);
      var $cond = $call2;label = 5; break;
    case 5: 
      var $cond;
      var $8=$cond;
      var $9=$f_addr;
      var $upvalues=(($9+28)|0);
      HEAP32[(($upvalues)>>2)]=$8;
      var $10=$n;
      var $11=$f_addr;
      var $sizeupvalues=(($11+40)|0);
      HEAP32[(($sizeupvalues)>>2)]=$10;
      $i=0;
      label = 6; break;
    case 6: 
      var $12=$i;
      var $13=$n;
      var $cmp3=(($12)|0) < (($13)|0);
      if ($cmp3) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $14=$i;
      var $15=$f_addr;
      var $upvalues4=(($15+28)|0);
      var $16=HEAP32[(($upvalues4)>>2)];
      var $arrayidx=(($16+($14<<3))|0);
      var $name=(($arrayidx)|0);
      HEAP32[(($name)>>2)]=0;
      label = 8; break;
    case 8: 
      var $17=$i;
      var $inc=((($17)+(1))|0);
      $i=$inc;
      label = 6; break;
    case 9: 
      $i=0;
      label = 10; break;
    case 10: 
      var $18=$i;
      var $19=$n;
      var $cmp6=(($18)|0) < (($19)|0);
      if ($cmp6) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $20=$S_addr;
      var $call8=_LoadChar($20);
      var $conv=(($call8) & 255);
      var $21=$i;
      var $22=$f_addr;
      var $upvalues9=(($22+28)|0);
      var $23=HEAP32[(($upvalues9)>>2)];
      var $arrayidx10=(($23+($21<<3))|0);
      var $instack=(($arrayidx10+4)|0);
      HEAP8[($instack)]=$conv;
      var $24=$S_addr;
      var $call11=_LoadChar($24);
      var $conv12=(($call11) & 255);
      var $25=$i;
      var $26=$f_addr;
      var $upvalues13=(($26+28)|0);
      var $27=HEAP32[(($upvalues13)>>2)];
      var $arrayidx14=(($27+($25<<3))|0);
      var $idx=(($arrayidx14+5)|0);
      HEAP8[($idx)]=$conv12;
      label = 12; break;
    case 12: 
      var $28=$i;
      var $inc16=((($28)+(1))|0);
      $i=$inc16;
      label = 10; break;
    case 13: 

      return;
  }

}
_LoadUpvalues["X"]=1;

function _LoadDebug($S, $f) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $S_addr;
      var $f_addr;
      var $i;
      var $n;
      $S_addr=$S;
      $f_addr=$f;
      var $0=$S_addr;
      var $call=_LoadString($0);
      var $1=$f_addr;
      var $source=(($1+36)|0);
      HEAP32[(($source)>>2)]=$call;
      var $2=$S_addr;
      var $call1=_LoadInt($2);
      $n=$call1;
      var $3=$n;
      var $add=((($3)+(1))|0);
      var $cmp=(($add)>>>0) > 1073741823;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$S_addr;
      var $L=(($4)|0);
      var $5=HEAP32[(($L)>>2)];
      _luaM_toobig($5);

      label = 5; break;
    case 4: 
      var $7=$S_addr;
      var $L2=(($7)|0);
      var $8=HEAP32[(($L2)>>2)];
      var $9=$n;
      var $mul=($9<<2);
      var $call3=_luaM_realloc_($8, 0, 0, $mul);
      var $cond = $call3;label = 5; break;
    case 5: 
      var $cond;
      var $10=$cond;
      var $11=$f_addr;
      var $lineinfo=(($11+20)|0);
      HEAP32[(($lineinfo)>>2)]=$10;
      var $12=$n;
      var $13=$f_addr;
      var $sizelineinfo=(($13+52)|0);
      HEAP32[(($sizelineinfo)>>2)]=$12;
      var $14=$S_addr;
      var $15=$f_addr;
      var $lineinfo4=(($15+20)|0);
      var $16=HEAP32[(($lineinfo4)>>2)];
      var $17=$16;
      var $18=$n;
      var $mul5=($18<<2);
      _LoadBlock($14, $17, $mul5);
      var $19=$S_addr;
      var $call6=_LoadInt($19);
      $n=$call6;
      var $20=$n;
      var $add7=((($20)+(1))|0);
      var $cmp8=(($add7)>>>0) > 357913941;
      if ($cmp8) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $21=$S_addr;
      var $L10=(($21)|0);
      var $22=HEAP32[(($L10)>>2)];
      _luaM_toobig($22);

      label = 8; break;
    case 7: 
      var $24=$S_addr;
      var $L12=(($24)|0);
      var $25=HEAP32[(($L12)>>2)];
      var $26=$n;
      var $mul13=((($26)*(12))&-1);
      var $call14=_luaM_realloc_($25, 0, 0, $mul13);
      var $cond16 = $call14;label = 8; break;
    case 8: 
      var $cond16;
      var $27=$cond16;
      var $28=$f_addr;
      var $locvars=(($28+24)|0);
      HEAP32[(($locvars)>>2)]=$27;
      var $29=$n;
      var $30=$f_addr;
      var $sizelocvars=(($30+60)|0);
      HEAP32[(($sizelocvars)>>2)]=$29;
      $i=0;
      label = 9; break;
    case 9: 
      var $31=$i;
      var $32=$n;
      var $cmp17=(($31)|0) < (($32)|0);
      if ($cmp17) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $33=$i;
      var $34=$f_addr;
      var $locvars18=(($34+24)|0);
      var $35=HEAP32[(($locvars18)>>2)];
      var $arrayidx=(($35+((($33)*(12))&-1))|0);
      var $varname=(($arrayidx)|0);
      HEAP32[(($varname)>>2)]=0;
      label = 11; break;
    case 11: 
      var $36=$i;
      var $inc=((($36)+(1))|0);
      $i=$inc;
      label = 9; break;
    case 12: 
      $i=0;
      label = 13; break;
    case 13: 
      var $37=$i;
      var $38=$n;
      var $cmp20=(($37)|0) < (($38)|0);
      if ($cmp20) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $39=$S_addr;
      var $call22=_LoadString($39);
      var $40=$i;
      var $41=$f_addr;
      var $locvars23=(($41+24)|0);
      var $42=HEAP32[(($locvars23)>>2)];
      var $arrayidx24=(($42+((($40)*(12))&-1))|0);
      var $varname25=(($arrayidx24)|0);
      HEAP32[(($varname25)>>2)]=$call22;
      var $43=$S_addr;
      var $call26=_LoadInt($43);
      var $44=$i;
      var $45=$f_addr;
      var $locvars27=(($45+24)|0);
      var $46=HEAP32[(($locvars27)>>2)];
      var $arrayidx28=(($46+((($44)*(12))&-1))|0);
      var $startpc=(($arrayidx28+4)|0);
      HEAP32[(($startpc)>>2)]=$call26;
      var $47=$S_addr;
      var $call29=_LoadInt($47);
      var $48=$i;
      var $49=$f_addr;
      var $locvars30=(($49+24)|0);
      var $50=HEAP32[(($locvars30)>>2)];
      var $arrayidx31=(($50+((($48)*(12))&-1))|0);
      var $endpc=(($arrayidx31+8)|0);
      HEAP32[(($endpc)>>2)]=$call29;
      label = 15; break;
    case 15: 
      var $51=$i;
      var $inc33=((($51)+(1))|0);
      $i=$inc33;
      label = 13; break;
    case 16: 
      var $52=$S_addr;
      var $call35=_LoadInt($52);
      $n=$call35;
      $i=0;
      label = 17; break;
    case 17: 
      var $53=$i;
      var $54=$n;
      var $cmp37=(($53)|0) < (($54)|0);
      if ($cmp37) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $55=$S_addr;
      var $call39=_LoadString($55);
      var $56=$i;
      var $57=$f_addr;
      var $upvalues=(($57+28)|0);
      var $58=HEAP32[(($upvalues)>>2)];
      var $arrayidx40=(($58+($56<<3))|0);
      var $name=(($arrayidx40)|0);
      HEAP32[(($name)>>2)]=$call39;
      label = 19; break;
    case 19: 
      var $59=$i;
      var $inc42=((($59)+(1))|0);
      $i=$inc42;
      label = 17; break;
    case 20: 

      return;
  }

}
_LoadDebug["X"]=1;

function _LoadBlock($S, $b, $size) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $S_addr;
      var $b_addr;
      var $size_addr;
      $S_addr=$S;
      $b_addr=$b;
      $size_addr=$size;
      var $0=$S_addr;
      var $Z=(($0+4)|0);
      var $1=HEAP32[(($Z)>>2)];
      var $2=$b_addr;
      var $3=$size_addr;
      var $call=_luaZ_read($1, $2, $3);
      var $cmp=(($call)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$S_addr;
      _error($4, ((5246812)|0));

    case 4: 

      return;
  }

}


function _error($S, $why) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $S_addr;
      var $why_addr;
      $S_addr=$S;
      $why_addr=$why;
      var $0=$S_addr;
      var $L=(($0)|0);
      var $1=HEAP32[(($L)>>2)];
      var $2=$S_addr;
      var $name=(($2+12)|0);
      var $3=HEAP32[(($name)>>2)];
      var $4=$why_addr;
      var $call=_luaO_pushfstring($1, ((5246528)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempInt)>>2)]=$3,HEAP32[(((tempInt)+(4))>>2)]=$4,tempInt));
      var $5=$S_addr;
      var $L1=(($5)|0);
      var $6=HEAP32[(($L1)>>2)];
      _luaD_throw($6, 3);

    case 3: 
      STACKTOP = __stackBase__;
      return;
  }

}


function _luaV_tostring($L, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; _memset(__stackBase__, 0, 32);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $obj_addr;
      var $s=__stackBase__;
      var $n;
      var $l;
      var $io;
      var $x_;
      $L_addr=$L;
      $obj_addr=$obj;
      var $0=$obj_addr;
      var $tt_=(($0+8)|0);
      var $1=HEAP32[(($tt_)>>2)];
      var $cmp=(($1)|0)==3;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $retval=0;
      label = 5; break;
    case 4: 
      var $2=$obj_addr;
      var $value_=(($2)|0);
      var $n1=$value_;
      var $3=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n1)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n1)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $n=$3;
      var $arraydecay=(($s)|0);
      var $4=$n;
      var $call=_sprintf($arraydecay, ((5249448)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP = (STACKTOP + 8)|0,(HEAPF64[(tempDoublePtr)>>3]=$4,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      $l=$call;
      var $5=$obj_addr;
      $io=$5;
      var $6=$L_addr;
      var $arraydecay2=(($s)|0);
      var $7=$l;
      var $call3=_luaS_newlstr($6, $arraydecay2, $7);
      $x_=$call3;
      var $8=$x_;
      var $9=$8;
      var $10=$io;
      var $value_4=(($10)|0);
      var $gc=$value_4;
      HEAP32[(($gc)>>2)]=$9;
      var $11=$x_;
      var $tsv=$11;
      var $tt=(($tsv+4)|0);
      var $12=HEAP8[($tt)];
      var $conv=(($12)&255);
      var $or=$conv | 64;
      var $13=$io;
      var $tt_5=(($13+8)|0);
      HEAP32[(($tt_5)>>2)]=$or;
      $retval=1;
      label = 5; break;
    case 5: 
      var $14=$retval;
      STACKTOP = __stackBase__;
      return $14;
  }

}
_luaV_tostring["X"]=1;

function _callTM($L, $f, $p1, $p2, $p3, $hasres) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $f_addr;
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $hasres_addr;
      var $result;
      var $io2;
      var $io1;
      var $io23;
      var $io14;
      var $io211;
      var $io112;
      var $io219;
      var $io120;
      var $io238;
      var $io141;
      $L_addr=$L;
      $f_addr=$f;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $hasres_addr=$hasres;
      var $0=$p3_addr;
      var $1=$0;
      var $2=$L_addr;
      var $stack=(($2+28)|0);
      var $3=HEAP32[(($stack)>>2)];
      var $4=$3;
      var $sub_ptr_lhs_cast=$1;
      var $sub_ptr_rhs_cast=$4;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $result=$sub_ptr_sub;
      var $5=$f_addr;
      $io2=$5;
      var $6=$L_addr;
      var $top=(($6+8)|0);
      var $7=HEAP32[(($top)>>2)];
      var $incdec_ptr=(($7+12)|0);
      HEAP32[(($top)>>2)]=$incdec_ptr;
      $io1=$7;
      var $8=$io1;
      var $value_=(($8)|0);
      var $9=$io2;
      var $value_1=(($9)|0);
      var $10=$value_;
      var $11=$value_1;
      HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];
      var $12=$io2;
      var $tt_=(($12+8)|0);
      var $13=HEAP32[(($tt_)>>2)];
      var $14=$io1;
      var $tt_2=(($14+8)|0);
      HEAP32[(($tt_2)>>2)]=$13;
      var $15=$p1_addr;
      $io23=$15;
      var $16=$L_addr;
      var $top5=(($16+8)|0);
      var $17=HEAP32[(($top5)>>2)];
      var $incdec_ptr6=(($17+12)|0);
      HEAP32[(($top5)>>2)]=$incdec_ptr6;
      $io14=$17;
      var $18=$io14;
      var $value_7=(($18)|0);
      var $19=$io23;
      var $value_8=(($19)|0);
      var $20=$value_7;
      var $21=$value_8;
      HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];
      var $22=$io23;
      var $tt_9=(($22+8)|0);
      var $23=HEAP32[(($tt_9)>>2)];
      var $24=$io14;
      var $tt_10=(($24+8)|0);
      HEAP32[(($tt_10)>>2)]=$23;
      var $25=$p2_addr;
      $io211=$25;
      var $26=$L_addr;
      var $top13=(($26+8)|0);
      var $27=HEAP32[(($top13)>>2)];
      var $incdec_ptr14=(($27+12)|0);
      HEAP32[(($top13)>>2)]=$incdec_ptr14;
      $io112=$27;
      var $28=$io112;
      var $value_15=(($28)|0);
      var $29=$io211;
      var $value_16=(($29)|0);
      var $30=$value_15;
      var $31=$value_16;
      HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];
      var $32=$io211;
      var $tt_17=(($32+8)|0);
      var $33=HEAP32[(($tt_17)>>2)];
      var $34=$io112;
      var $tt_18=(($34+8)|0);
      HEAP32[(($tt_18)>>2)]=$33;
      var $35=$hasres_addr;
      var $tobool=(($35)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $36=$p3_addr;
      $io219=$36;
      var $37=$L_addr;
      var $top21=(($37+8)|0);
      var $38=HEAP32[(($top21)>>2)];
      var $incdec_ptr22=(($38+12)|0);
      HEAP32[(($top21)>>2)]=$incdec_ptr22;
      $io120=$38;
      var $39=$io120;
      var $value_23=(($39)|0);
      var $40=$io219;
      var $value_24=(($40)|0);
      var $41=$value_23;
      var $42=$value_24;
      HEAP32[(($41)>>2)]=HEAP32[(($42)>>2)];HEAP32[((($41)+(4))>>2)]=HEAP32[((($42)+(4))>>2)];
      var $43=$io219;
      var $tt_25=(($43+8)|0);
      var $44=HEAP32[(($tt_25)>>2)];
      var $45=$io120;
      var $tt_26=(($45+8)|0);
      HEAP32[(($tt_26)>>2)]=$44;
      label = 4; break;
    case 4: 
      var $46=$L_addr;
      var $stack_last=(($46+24)|0);
      var $47=HEAP32[(($stack_last)>>2)];
      var $48=$L_addr;
      var $top27=(($48+8)|0);
      var $49=HEAP32[(($top27)>>2)];
      var $sub_ptr_lhs_cast28=$47;
      var $sub_ptr_rhs_cast29=$49;
      var $sub_ptr_sub30=((($sub_ptr_lhs_cast28)-($sub_ptr_rhs_cast29))|0);
      var $sub_ptr_div=((((($sub_ptr_sub30)|0))/(12))&-1);
      var $cmp=(($sub_ptr_div)|0) <= 0;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $50=$L_addr;
      _luaD_growstack($50, 0);
      label = 7; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $51=$L_addr;
      var $52=$L_addr;
      var $top33=(($52+8)|0);
      var $53=HEAP32[(($top33)>>2)];
      var $54=$hasres_addr;
      var $sub=(((4)-($54))|0);
      var $idx_neg=(((-$sub))|0);
      var $add_ptr=(($53+((($idx_neg)*(12))&-1))|0);
      var $55=$hasres_addr;
      var $56=$L_addr;
      var $ci=(($56+16)|0);
      var $57=HEAP32[(($ci)>>2)];
      var $callstatus=(($57+18)|0);
      var $58=HEAP8[($callstatus)];
      var $conv=(($58)&255);
      var $and=$conv & 1;
      _luaD_call($51, $add_ptr, $55, $and);
      var $59=$hasres_addr;
      var $tobool34=(($59)|0)!=0;
      if ($tobool34) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $60=$L_addr;
      var $stack36=(($60+28)|0);
      var $61=HEAP32[(($stack36)>>2)];
      var $62=$61;
      var $63=$result;
      var $add_ptr37=(($62+$63)|0);
      var $64=$add_ptr37;
      $p3_addr=$64;
      var $65=$L_addr;
      var $top39=(($65+8)|0);
      var $66=HEAP32[(($top39)>>2)];
      var $incdec_ptr40=((($66)-(12))|0);
      HEAP32[(($top39)>>2)]=$incdec_ptr40;
      $io238=$incdec_ptr40;
      var $67=$p3_addr;
      $io141=$67;
      var $68=$io141;
      var $value_42=(($68)|0);
      var $69=$io238;
      var $value_43=(($69)|0);
      var $70=$value_42;
      var $71=$value_43;
      HEAP32[(($70)>>2)]=HEAP32[(($71)>>2)];HEAP32[((($70)+(4))>>2)]=HEAP32[((($71)+(4))>>2)];
      var $72=$io238;
      var $tt_44=(($72+8)|0);
      var $73=HEAP32[(($tt_44)>>2)];
      var $74=$io141;
      var $tt_45=(($74+8)|0);
      HEAP32[(($tt_45)>>2)]=$73;
      label = 9; break;
    case 9: 

      return;
  }

}
_callTM["X"]=1;

function _l_strcmp($ls, $rs) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $ls_addr;
      var $rs_addr;
      var $l;
      var $ll;
      var $r;
      var $lr;
      var $temp;
      var $len4;
      $ls_addr=$ls;
      $rs_addr=$rs;
      var $0=$ls_addr;
      var $add_ptr=(($0+16)|0);
      var $1=$add_ptr;
      $l=$1;
      var $2=$ls_addr;
      var $tsv=$2;
      var $len=(($tsv+12)|0);
      var $3=HEAP32[(($len)>>2)];
      $ll=$3;
      var $4=$rs_addr;
      var $add_ptr1=(($4+16)|0);
      var $5=$add_ptr1;
      $r=$5;
      var $6=$rs_addr;
      var $tsv2=$6;
      var $len3=(($tsv2+12)|0);
      var $7=HEAP32[(($len3)>>2)];
      $lr=$7;
      label = 3; break;
    case 3: 
      var $8=$l;
      var $9=$r;
      var $call=_strcmp($8, $9);
      $temp=$call;
      var $10=$temp;
      var $cmp=(($10)|0)!=0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $11=$temp;
      $retval=$11;
      label = 12; break;
    case 5: 
      var $12=$l;
      var $call5=_strlen($12);
      $len4=$call5;
      var $13=$len4;
      var $14=$lr;
      var $cmp6=(($13)|0)==(($14)|0);
      if ($cmp6) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $15=$len4;
      var $16=$ll;
      var $cmp8=(($15)|0)==(($16)|0);
      var $cond=$cmp8 ? 0 : 1;
      $retval=$cond;
      label = 12; break;
    case 7: 
      var $17=$len4;
      var $18=$ll;
      var $cmp10=(($17)|0)==(($18)|0);
      if ($cmp10) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $retval=-1;
      label = 12; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $19=$len4;
      var $inc=((($19)+(1))|0);
      $len4=$inc;
      var $20=$len4;
      var $21=$l;
      var $add_ptr13=(($21+$20)|0);
      $l=$add_ptr13;
      var $22=$len4;
      var $23=$ll;
      var $sub=((($23)-($22))|0);
      $ll=$sub;
      var $24=$len4;
      var $25=$r;
      var $add_ptr14=(($25+$24)|0);
      $r=$add_ptr14;
      var $26=$len4;
      var $27=$lr;
      var $sub15=((($27)-($26))|0);
      $lr=$sub15;
      label = 11; break;
    case 11: 
      label = 3; break;
    case 12: 
      var $28=$retval;

      return $28;
  }

}
_l_strcmp["X"]=1;

function _call_orderTM($L, $p1, $p2, $event) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $p1_addr;
      var $p2_addr;
      var $event_addr;
      $L_addr=$L;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $event_addr=$event;
      var $0=$L_addr;
      var $1=$p1_addr;
      var $2=$p2_addr;
      var $3=$L_addr;
      var $top=(($3+8)|0);
      var $4=HEAP32[(($top)>>2)];
      var $5=$event_addr;
      var $call=_call_binTM($0, $1, $2, $4, $5);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $retval=-1;
      label = 9; break;
    case 4: 
      var $6=$L_addr;
      var $top1=(($6+8)|0);
      var $7=HEAP32[(($top1)>>2)];
      var $tt_=(($7+8)|0);
      var $8=HEAP32[(($tt_)>>2)];
      var $cmp=(($8)|0)==0;
      if ($cmp) { var $16 = 1;label = 8; break; } else { label = 5; break; }
    case 5: 
      var $9=$L_addr;
      var $top2=(($9+8)|0);
      var $10=HEAP32[(($top2)>>2)];
      var $tt_3=(($10+8)|0);
      var $11=HEAP32[(($tt_3)>>2)];
      var $cmp4=(($11)|0)==1;
      if ($cmp4) { label = 6; break; } else { var $15 = 0;label = 7; break; }
    case 6: 
      var $12=$L_addr;
      var $top5=(($12+8)|0);
      var $13=HEAP32[(($top5)>>2)];
      var $value_=(($13)|0);
      var $b=$value_;
      var $14=HEAP32[(($b)>>2)];
      var $cmp6=(($14)|0)==0;
      var $15 = $cmp6;label = 7; break;
    case 7: 
      var $15;
      var $16 = $15;label = 8; break;
    case 8: 
      var $16;
      var $lnot=$16 ^ 1;
      var $lnot_ext=(($lnot)&1);
      $retval=$lnot_ext;
      label = 9; break;
    case 9: 
      var $17=$retval;

      return $17;
  }

}
_call_orderTM["X"]=1;

function _luaV_gettable($L, $t, $key, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $t_addr;
      var $key_addr;
      var $val_addr;
      var $loop;
      var $tm;
      var $h;
      var $res;
      var $io2;
      var $io1;
      $L_addr=$L;
      $t_addr=$t;
      $key_addr=$key;
      $val_addr=$val;
      $loop=0;
      label = 3; break;
    case 3: 
      var $0=$loop;
      var $cmp=(($0)|0) < 100;
      if ($cmp) { label = 4; break; } else { label = 22; break; }
    case 4: 
      var $1=$t_addr;
      var $tt_=(($1+8)|0);
      var $2=HEAP32[(($tt_)>>2)];
      var $cmp1=(($2)|0)==69;
      if ($cmp1) { label = 5; break; } else { label = 15; break; }
    case 5: 
      var $3=$t_addr;
      var $value_=(($3)|0);
      var $gc=$value_;
      var $4=HEAP32[(($gc)>>2)];
      var $h2=$4;
      $h=$h2;
      var $5=$h;
      var $6=$key_addr;
      var $call=_luaH_get($5, $6);
      $res=$call;
      var $7=$res;
      var $tt_3=(($7+8)|0);
      var $8=HEAP32[(($tt_3)>>2)];
      var $cmp4=(($8)|0)==0;
      if ($cmp4) { label = 6; break; } else { label = 13; break; }
    case 6: 
      var $9=$h;
      var $metatable=(($9+8)|0);
      var $10=HEAP32[(($metatable)>>2)];
      var $cmp5=(($10)|0)==0;
      if ($cmp5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $cond12 = 0;label = 12; break;
    case 8: 
      var $11=$h;
      var $metatable6=(($11+8)|0);
      var $12=HEAP32[(($metatable6)>>2)];
      var $flags=(($12+6)|0);
      var $13=HEAP8[($flags)];
      var $conv=(($13)&255);
      var $and=$conv & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $cond = 0;label = 11; break;
    case 10: 
      var $14=$h;
      var $metatable9=(($14+8)|0);
      var $15=HEAP32[(($metatable9)>>2)];
      var $16=$L_addr;
      var $l_G=(($16+12)|0);
      var $17=HEAP32[(($l_G)>>2)];
      var $tmname=(($17+164)|0);
      var $arrayidx=(($tmname)|0);
      var $18=HEAP32[(($arrayidx)>>2)];
      var $call10=_luaT_gettm($15, 0, $18);
      var $cond = $call10;label = 11; break;
    case 11: 
      var $cond;
      var $cond12 = $cond;label = 12; break;
    case 12: 
      var $cond12;
      $tm=$cond12;
      var $cmp13=(($cond12)|0)==0;
      if ($cmp13) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $19=$res;
      $io2=$19;
      var $20=$val_addr;
      $io1=$20;
      var $21=$io1;
      var $value_16=(($21)|0);
      var $22=$io2;
      var $value_17=(($22)|0);
      var $23=$value_16;
      var $24=$value_17;
      HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];
      var $25=$io2;
      var $tt_18=(($25+8)|0);
      var $26=HEAP32[(($tt_18)>>2)];
      var $27=$io1;
      var $tt_19=(($27+8)|0);
      HEAP32[(($tt_19)>>2)]=$26;
      label = 23; break;
    case 14: 
      label = 18; break;
    case 15: 
      var $28=$L_addr;
      var $29=$t_addr;
      var $call20=_luaT_gettmbyobj($28, $29, 0);
      $tm=$call20;
      var $tt_21=(($call20+8)|0);
      var $30=HEAP32[(($tt_21)>>2)];
      var $cmp22=(($30)|0)==0;
      if ($cmp22) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $31=$L_addr;
      var $32=$t_addr;
      _luaG_typeerror($31, $32, ((5252840)|0));

    case 17: 
      label = 18; break;
    case 18: 
      var $33=$tm;
      var $tt_27=(($33+8)|0);
      var $34=HEAP32[(($tt_27)>>2)];
      var $and28=$34 & 15;
      var $cmp29=(($and28)|0)==6;
      if ($cmp29) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $35=$L_addr;
      var $36=$tm;
      var $37=$t_addr;
      var $38=$key_addr;
      var $39=$val_addr;
      _callTM($35, $36, $37, $38, $39, 1);
      label = 23; break;
    case 20: 
      var $40=$tm;
      $t_addr=$40;
      label = 21; break;
    case 21: 
      var $41=$loop;
      var $inc=((($41)+(1))|0);
      $loop=$inc;
      label = 3; break;
    case 22: 
      var $42=$L_addr;
      _luaG_runerror($42, ((5250800)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));

    case 23: 
      STACKTOP = __stackBase__;
      return;
  }

}
_luaV_gettable["X"]=1;

function _luaV_settable($L, $t, $key, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $t_addr;
      var $key_addr;
      var $val_addr;
      var $loop;
      var $tm;
      var $h;
      var $oldval;
      var $io2;
      var $io1;
      $L_addr=$L;
      $t_addr=$t;
      $key_addr=$key;
      $val_addr=$val;
      $loop=0;
      label = 3; break;
    case 3: 
      var $0=$loop;
      var $cmp=(($0)|0) < 100;
      if ($cmp) { label = 4; break; } else { label = 28; break; }
    case 4: 
      var $1=$t_addr;
      var $tt_=(($1+8)|0);
      var $2=HEAP32[(($tt_)>>2)];
      var $cmp1=(($2)|0)==69;
      if ($cmp1) { label = 5; break; } else { label = 21; break; }
    case 5: 
      var $3=$t_addr;
      var $value_=(($3)|0);
      var $gc=$value_;
      var $4=HEAP32[(($gc)>>2)];
      var $h2=$4;
      $h=$h2;
      var $5=$h;
      var $6=$key_addr;
      var $call=_luaH_get($5, $6);
      $oldval=$call;
      var $7=$oldval;
      var $tt_3=(($7+8)|0);
      var $8=HEAP32[(($tt_3)>>2)];
      var $cmp4=(($8)|0)==0;
      if ($cmp4) { label = 6; break; } else { label = 15; break; }
    case 6: 
      var $9=$h;
      var $metatable=(($9+8)|0);
      var $10=HEAP32[(($metatable)>>2)];
      var $cmp5=(($10)|0)==0;
      if ($cmp5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $cond12 = 0;label = 12; break;
    case 8: 
      var $11=$h;
      var $metatable6=(($11+8)|0);
      var $12=HEAP32[(($metatable6)>>2)];
      var $flags=(($12+6)|0);
      var $13=HEAP8[($flags)];
      var $conv=(($13)&255);
      var $and=$conv & 2;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $cond = 0;label = 11; break;
    case 10: 
      var $14=$h;
      var $metatable9=(($14+8)|0);
      var $15=HEAP32[(($metatable9)>>2)];
      var $16=$L_addr;
      var $l_G=(($16+12)|0);
      var $17=HEAP32[(($l_G)>>2)];
      var $tmname=(($17+164)|0);
      var $arrayidx=(($tmname+4)|0);
      var $18=HEAP32[(($arrayidx)>>2)];
      var $call10=_luaT_gettm($15, 1, $18);
      var $cond = $call10;label = 11; break;
    case 11: 
      var $cond;
      var $cond12 = $cond;label = 12; break;
    case 12: 
      var $cond12;
      $tm=$cond12;
      var $cmp13=(($cond12)|0)==0;
      if ($cmp13) { label = 13; break; } else { label = 20; break; }
    case 13: 
      var $19=$oldval;
      var $cmp15=(($19)|0)!=5244092;
      if ($cmp15) { label = 15; break; } else { label = 14; break; }
    case 14: 
      var $20=$L_addr;
      var $21=$h;
      var $22=$key_addr;
      var $call18=_luaH_newkey($20, $21, $22);
      $oldval=$call18;
      if (1) { label = 15; break; } else { label = 20; break; }
    case 15: 
      var $23=$val_addr;
      $io2=$23;
      var $24=$oldval;
      $io1=$24;
      var $25=$io1;
      var $value_20=(($25)|0);
      var $26=$io2;
      var $value_21=(($26)|0);
      var $27=$value_20;
      var $28=$value_21;
      HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];
      var $29=$io2;
      var $tt_22=(($29+8)|0);
      var $30=HEAP32[(($tt_22)>>2)];
      var $31=$io1;
      var $tt_23=(($31+8)|0);
      HEAP32[(($tt_23)>>2)]=$30;
      var $32=$h;
      var $flags24=(($32+6)|0);
      HEAP8[($flags24)]=0;
      var $33=$val_addr;
      var $tt_25=(($33+8)|0);
      var $34=HEAP32[(($tt_25)>>2)];
      var $and26=$34 & 64;
      var $tobool27=(($and26)|0)!=0;
      if ($tobool27) { label = 16; break; } else { label = 19; break; }
    case 16: 
      var $35=$val_addr;
      var $value_29=(($35)|0);
      var $gc30=$value_29;
      var $36=HEAP32[(($gc30)>>2)];
      var $gch=$36;
      var $marked=(($gch+5)|0);
      var $37=HEAP8[($marked)];
      var $conv31=(($37)&255);
      var $and32=$conv31 & 3;
      var $tobool33=(($and32)|0)!=0;
      if ($tobool33) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $38=$h;
      var $39=$38;
      var $gch35=$39;
      var $marked36=(($gch35+5)|0);
      var $40=HEAP8[($marked36)];
      var $conv37=(($40)&255);
      var $and38=$conv37 & 4;
      var $tobool39=(($and38)|0)!=0;
      if ($tobool39) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $41=$L_addr;
      var $42=$h;
      var $43=$42;
      _luaC_barrierback_($41, $43);
      label = 19; break;
    case 19: 
      label = 29; break;
    case 20: 
      label = 24; break;
    case 21: 
      var $44=$L_addr;
      var $45=$t_addr;
      var $call42=_luaT_gettmbyobj($44, $45, 1);
      $tm=$call42;
      var $tt_43=(($call42+8)|0);
      var $46=HEAP32[(($tt_43)>>2)];
      var $cmp44=(($46)|0)==0;
      if ($cmp44) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $47=$L_addr;
      var $48=$t_addr;
      _luaG_typeerror($47, $48, ((5252840)|0));

    case 23: 
      label = 24; break;
    case 24: 
      var $49=$tm;
      var $tt_49=(($49+8)|0);
      var $50=HEAP32[(($tt_49)>>2)];
      var $and50=$50 & 15;
      var $cmp51=(($and50)|0)==6;
      if ($cmp51) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $51=$L_addr;
      var $52=$tm;
      var $53=$t_addr;
      var $54=$key_addr;
      var $55=$val_addr;
      _callTM($51, $52, $53, $54, $55, 0);
      label = 29; break;
    case 26: 
      var $56=$tm;
      $t_addr=$56;
      label = 27; break;
    case 27: 
      var $57=$loop;
      var $inc=((($57)+(1))|0);
      $loop=$inc;
      label = 3; break;
    case 28: 
      var $58=$L_addr;
      _luaG_runerror($58, ((5249016)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));

    case 29: 
      STACKTOP = __stackBase__;
      return;
  }

}
_luaV_settable["X"]=1;

function _luaV_lessthan($L, $l, $r) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $l_addr;
      var $r_addr;
      var $res;
      $L_addr=$L;
      $l_addr=$l;
      $r_addr=$r;
      var $0=$l_addr;
      var $tt_=(($0+8)|0);
      var $1=HEAP32[(($tt_)>>2)];
      var $cmp=(($1)|0)==3;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $2=$r_addr;
      var $tt_1=(($2+8)|0);
      var $3=HEAP32[(($tt_1)>>2)];
      var $cmp2=(($3)|0)==3;
      if ($cmp2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$l_addr;
      var $value_=(($4)|0);
      var $n=$value_;
      var $5=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $6=$r_addr;
      var $value_3=(($6)|0);
      var $n4=$value_3;
      var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n4)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n4)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp5=$5 < $7;
      var $conv=(($cmp5)&1);
      $retval=$conv;
      label = 13; break;
    case 5: 
      var $8=$l_addr;
      var $tt_6=(($8+8)|0);
      var $9=HEAP32[(($tt_6)>>2)];
      var $and=$9 & 15;
      var $cmp7=(($and)|0)==4;
      if ($cmp7) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $10=$r_addr;
      var $tt_10=(($10+8)|0);
      var $11=HEAP32[(($tt_10)>>2)];
      var $and11=$11 & 15;
      var $cmp12=(($and11)|0)==4;
      if ($cmp12) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $12=$l_addr;
      var $value_15=(($12)|0);
      var $gc=$value_15;
      var $13=HEAP32[(($gc)>>2)];
      var $ts=$13;
      var $14=$r_addr;
      var $value_16=(($14)|0);
      var $gc17=$value_16;
      var $15=HEAP32[(($gc17)>>2)];
      var $ts18=$15;
      var $call=_l_strcmp($ts, $ts18);
      var $cmp19=(($call)|0) < 0;
      var $conv20=(($cmp19)&1);
      $retval=$conv20;
      label = 13; break;
    case 8: 
      var $16=$L_addr;
      var $17=$l_addr;
      var $18=$r_addr;
      var $call22=_call_orderTM($16, $17, $18, 13);
      $res=$call22;
      var $cmp23=(($call22)|0) < 0;
      if ($cmp23) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $19=$L_addr;
      var $20=$l_addr;
      var $21=$r_addr;
      _luaG_ordererror($19, $20, $21);

    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $22=$res;
      $retval=$22;
      label = 13; break;
    case 13: 
      var $23=$retval;

      return $23;
  }

}
_luaV_lessthan["X"]=1;

function _luaV_equalobj_($L, $t1, $t2) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $t1_addr;
      var $t2_addr;
      var $tm;
      $L_addr=$L;
      $t1_addr=$t1;
      $t2_addr=$t2;
      var $0=$t1_addr;
      var $tt_=(($0+8)|0);
      var $1=HEAP32[(($tt_)>>2)];
      var $and=$1 & 63;
      if ((($and)|0)==0) {
        label = 3; break;
      }
      else if ((($and)|0)==3) {
        label = 4; break;
      }
      else if ((($and)|0)==1) {
        label = 5; break;
      }
      else if ((($and)|0)==2) {
        label = 6; break;
      }
      else if ((($and)|0)==22) {
        label = 7; break;
      }
      else if ((($and)|0)==4) {
        label = 8; break;
      }
      else if ((($and)|0)==20) {
        label = 9; break;
      }
      else if ((($and)|0)==7) {
        label = 10; break;
      }
      else if ((($and)|0)==5) {
        label = 16; break;
      }
      else {
      label = 22; break;
      }
      
    case 3: 
      $retval=1;
      label = 30; break;
    case 4: 
      var $2=$t1_addr;
      var $value_=(($2)|0);
      var $n=$value_;
      var $3=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $4=$t2_addr;
      var $value_2=(($4)|0);
      var $n3=$value_2;
      var $5=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp=$3 == $5;
      var $conv=(($cmp)&1);
      $retval=$conv;
      label = 30; break;
    case 5: 
      var $6=$t1_addr;
      var $value_5=(($6)|0);
      var $b=$value_5;
      var $7=HEAP32[(($b)>>2)];
      var $8=$t2_addr;
      var $value_6=(($8)|0);
      var $b7=$value_6;
      var $9=HEAP32[(($b7)>>2)];
      var $cmp8=(($7)|0)==(($9)|0);
      var $conv9=(($cmp8)&1);
      $retval=$conv9;
      label = 30; break;
    case 6: 
      var $10=$t1_addr;
      var $value_11=(($10)|0);
      var $p=$value_11;
      var $11=HEAP32[(($p)>>2)];
      var $12=$t2_addr;
      var $value_12=(($12)|0);
      var $p13=$value_12;
      var $13=HEAP32[(($p13)>>2)];
      var $cmp14=(($11)|0)==(($13)|0);
      var $conv15=(($cmp14)&1);
      $retval=$conv15;
      label = 30; break;
    case 7: 
      var $14=$t1_addr;
      var $value_17=(($14)|0);
      var $f=$value_17;
      var $15=HEAP32[(($f)>>2)];
      var $16=$t2_addr;
      var $value_18=(($16)|0);
      var $f19=$value_18;
      var $17=HEAP32[(($f19)>>2)];
      var $cmp20=(($15)|0)==(($17)|0);
      var $conv21=(($cmp20)&1);
      $retval=$conv21;
      label = 30; break;
    case 8: 
      var $18=$t1_addr;
      var $value_23=(($18)|0);
      var $gc=$value_23;
      var $19=HEAP32[(($gc)>>2)];
      var $ts=$19;
      var $20=$t2_addr;
      var $value_24=(($20)|0);
      var $gc25=$value_24;
      var $21=HEAP32[(($gc25)>>2)];
      var $ts26=$21;
      var $cmp27=(($ts)|0)==(($ts26)|0);
      var $conv28=(($cmp27)&1);
      $retval=$conv28;
      label = 30; break;
    case 9: 
      var $22=$t1_addr;
      var $value_30=(($22)|0);
      var $gc31=$value_30;
      var $23=HEAP32[(($gc31)>>2)];
      var $ts32=$23;
      var $24=$t2_addr;
      var $value_33=(($24)|0);
      var $gc34=$value_33;
      var $25=HEAP32[(($gc34)>>2)];
      var $ts35=$25;
      var $call=_luaS_eqlngstr($ts32, $ts35);
      $retval=$call;
      label = 30; break;
    case 10: 
      var $26=$t1_addr;
      var $value_37=(($26)|0);
      var $gc38=$value_37;
      var $27=HEAP32[(($gc38)>>2)];
      var $u=$27;
      var $uv=$u;
      var $28=$t2_addr;
      var $value_39=(($28)|0);
      var $gc40=$value_39;
      var $29=HEAP32[(($gc40)>>2)];
      var $u41=$29;
      var $uv42=$u41;
      var $cmp43=(($uv)|0)==(($uv42)|0);
      if ($cmp43) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $retval=1;
      label = 30; break;
    case 12: 
      var $30=$L_addr;
      var $cmp45=(($30)|0)==0;
      if ($cmp45) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $retval=0;
      label = 30; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $31=$L_addr;
      var $32=$t1_addr;
      var $value_49=(($32)|0);
      var $gc50=$value_49;
      var $33=HEAP32[(($gc50)>>2)];
      var $u51=$33;
      var $uv52=$u51;
      var $metatable=(($uv52+8)|0);
      var $34=HEAP32[(($metatable)>>2)];
      var $35=$t2_addr;
      var $value_53=(($35)|0);
      var $gc54=$value_53;
      var $36=HEAP32[(($gc54)>>2)];
      var $u55=$36;
      var $uv56=$u55;
      var $metatable57=(($uv56+8)|0);
      var $37=HEAP32[(($metatable57)>>2)];
      var $call58=_get_equalTM($31, $34, $37, 5);
      $tm=$call58;
      label = 23; break;
    case 16: 
      var $38=$t1_addr;
      var $value_60=(($38)|0);
      var $gc61=$value_60;
      var $39=HEAP32[(($gc61)>>2)];
      var $h=$39;
      var $40=$t2_addr;
      var $value_62=(($40)|0);
      var $gc63=$value_62;
      var $41=HEAP32[(($gc63)>>2)];
      var $h64=$41;
      var $cmp65=(($h)|0)==(($h64)|0);
      if ($cmp65) { label = 17; break; } else { label = 18; break; }
    case 17: 
      $retval=1;
      label = 30; break;
    case 18: 
      var $42=$L_addr;
      var $cmp69=(($42)|0)==0;
      if ($cmp69) { label = 19; break; } else { label = 20; break; }
    case 19: 
      $retval=0;
      label = 30; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $43=$L_addr;
      var $44=$t1_addr;
      var $value_74=(($44)|0);
      var $gc75=$value_74;
      var $45=HEAP32[(($gc75)>>2)];
      var $h76=$45;
      var $metatable77=(($h76+8)|0);
      var $46=HEAP32[(($metatable77)>>2)];
      var $47=$t2_addr;
      var $value_78=(($47)|0);
      var $gc79=$value_78;
      var $48=HEAP32[(($gc79)>>2)];
      var $h80=$48;
      var $metatable81=(($h80+8)|0);
      var $49=HEAP32[(($metatable81)>>2)];
      var $call82=_get_equalTM($43, $46, $49, 5);
      $tm=$call82;
      label = 23; break;
    case 22: 
      var $50=$t1_addr;
      var $value_83=(($50)|0);
      var $gc84=$value_83;
      var $51=HEAP32[(($gc84)>>2)];
      var $52=$t2_addr;
      var $value_85=(($52)|0);
      var $gc86=$value_85;
      var $53=HEAP32[(($gc86)>>2)];
      var $cmp87=(($51)|0)==(($53)|0);
      var $conv88=(($cmp87)&1);
      $retval=$conv88;
      label = 30; break;
    case 23: 
      var $54=$tm;
      var $cmp89=(($54)|0)==0;
      if ($cmp89) { label = 24; break; } else { label = 25; break; }
    case 24: 
      $retval=0;
      label = 30; break;
    case 25: 
      var $55=$L_addr;
      var $56=$tm;
      var $57=$t1_addr;
      var $58=$t2_addr;
      var $59=$L_addr;
      var $top=(($59+8)|0);
      var $60=HEAP32[(($top)>>2)];
      _callTM($55, $56, $57, $58, $60, 1);
      var $61=$L_addr;
      var $top93=(($61+8)|0);
      var $62=HEAP32[(($top93)>>2)];
      var $tt_94=(($62+8)|0);
      var $63=HEAP32[(($tt_94)>>2)];
      var $cmp95=(($63)|0)==0;
      if ($cmp95) { var $71 = 1;label = 29; break; } else { label = 26; break; }
    case 26: 
      var $64=$L_addr;
      var $top97=(($64+8)|0);
      var $65=HEAP32[(($top97)>>2)];
      var $tt_98=(($65+8)|0);
      var $66=HEAP32[(($tt_98)>>2)];
      var $cmp99=(($66)|0)==1;
      if ($cmp99) { label = 27; break; } else { var $70 = 0;label = 28; break; }
    case 27: 
      var $67=$L_addr;
      var $top101=(($67+8)|0);
      var $68=HEAP32[(($top101)>>2)];
      var $value_102=(($68)|0);
      var $b103=$value_102;
      var $69=HEAP32[(($b103)>>2)];
      var $cmp104=(($69)|0)==0;
      var $70 = $cmp104;label = 28; break;
    case 28: 
      var $70;
      var $71 = $70;label = 29; break;
    case 29: 
      var $71;
      var $lnot=$71 ^ 1;
      var $lnot_ext=(($lnot)&1);
      $retval=$lnot_ext;
      label = 30; break;
    case 30: 
      var $72=$retval;

      return $72;
  }

}
_luaV_equalobj_["X"]=1;

function _get_equalTM($L, $mt1, $mt2, $event) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $mt1_addr;
      var $mt2_addr;
      var $event_addr;
      var $tm1;
      var $tm2;
      $L_addr=$L;
      $mt1_addr=$mt1;
      $mt2_addr=$mt2;
      $event_addr=$event;
      var $0=$mt1_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $cond4 = 0;label = 8; break;
    case 4: 
      var $1=$mt1_addr;
      var $flags=(($1+6)|0);
      var $2=HEAP8[($flags)];
      var $conv=(($2)&255);
      var $3=$event_addr;
      var $shl=1 << $3;
      var $and=$conv & $shl;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $cond = 0;label = 7; break;
    case 6: 
      var $4=$mt1_addr;
      var $5=$event_addr;
      var $6=$event_addr;
      var $7=$L_addr;
      var $l_G=(($7+12)|0);
      var $8=HEAP32[(($l_G)>>2)];
      var $tmname=(($8+164)|0);
      var $arrayidx=(($tmname+($6<<2))|0);
      var $9=HEAP32[(($arrayidx)>>2)];
      var $call=_luaT_gettm($4, $5, $9);
      var $cond = $call;label = 7; break;
    case 7: 
      var $cond;
      var $cond4 = $cond;label = 8; break;
    case 8: 
      var $cond4;
      $tm1=$cond4;
      var $10=$tm1;
      var $cmp5=(($10)|0)==0;
      if ($cmp5) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $retval=0;
      label = 24; break;
    case 10: 
      var $11=$mt1_addr;
      var $12=$mt2_addr;
      var $cmp7=(($11)|0)==(($12)|0);
      if ($cmp7) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $13=$tm1;
      $retval=$13;
      label = 24; break;
    case 12: 
      var $14=$mt2_addr;
      var $cmp11=(($14)|0)==0;
      if ($cmp11) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $cond29 = 0;label = 18; break;
    case 14: 
      var $15=$mt2_addr;
      var $flags15=(($15+6)|0);
      var $16=HEAP8[($flags15)];
      var $conv16=(($16)&255);
      var $17=$event_addr;
      var $shl17=1 << $17;
      var $and18=$conv16 & $shl17;
      var $tobool19=(($and18)|0)!=0;
      if ($tobool19) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $cond27 = 0;label = 17; break;
    case 16: 
      var $18=$mt2_addr;
      var $19=$event_addr;
      var $20=$event_addr;
      var $21=$L_addr;
      var $l_G22=(($21+12)|0);
      var $22=HEAP32[(($l_G22)>>2)];
      var $tmname23=(($22+164)|0);
      var $arrayidx24=(($tmname23+($20<<2))|0);
      var $23=HEAP32[(($arrayidx24)>>2)];
      var $call25=_luaT_gettm($18, $19, $23);
      var $cond27 = $call25;label = 17; break;
    case 17: 
      var $cond27;
      var $cond29 = $cond27;label = 18; break;
    case 18: 
      var $cond29;
      $tm2=$cond29;
      var $24=$tm2;
      var $cmp30=(($24)|0)==0;
      if ($cmp30) { label = 19; break; } else { label = 20; break; }
    case 19: 
      $retval=0;
      label = 24; break;
    case 20: 
      var $25=$tm1;
      var $tt_=(($25+8)|0);
      var $26=HEAP32[(($tt_)>>2)];
      var $27=$tm2;
      var $tt_34=(($27+8)|0);
      var $28=HEAP32[(($tt_34)>>2)];
      var $cmp35=(($26)|0)==(($28)|0);
      if ($cmp35) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $29=$tm1;
      var $30=$tm2;
      var $call37=_luaV_equalobj_(0, $29, $30);
      var $tobool38=(($call37)|0)!=0;
      if ($tobool38) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $31=$tm1;
      $retval=$31;
      label = 24; break;
    case 23: 
      $retval=0;
      label = 24; break;
    case 24: 
      var $32=$retval;

      return $32;
  }

}
_get_equalTM["X"]=1;

function _call_binTM($L, $p1, $p2, $res, $event) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $p1_addr;
      var $p2_addr;
      var $res_addr;
      var $event_addr;
      var $tm;
      $L_addr=$L;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $res_addr=$res;
      $event_addr=$event;
      var $0=$L_addr;
      var $1=$p1_addr;
      var $2=$event_addr;
      var $call=_luaT_gettmbyobj($0, $1, $2);
      $tm=$call;
      var $3=$tm;
      var $tt_=(($3+8)|0);
      var $4=HEAP32[(($tt_)>>2)];
      var $cmp=(($4)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$L_addr;
      var $6=$p2_addr;
      var $7=$event_addr;
      var $call1=_luaT_gettmbyobj($5, $6, $7);
      $tm=$call1;
      label = 4; break;
    case 4: 
      var $8=$tm;
      var $tt_2=(($8+8)|0);
      var $9=HEAP32[(($tt_2)>>2)];
      var $cmp3=(($9)|0)==0;
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=0;
      label = 7; break;
    case 6: 
      var $10=$L_addr;
      var $11=$tm;
      var $12=$p1_addr;
      var $13=$p2_addr;
      var $14=$res_addr;
      _callTM($10, $11, $12, $13, $14, 1);
      $retval=1;
      label = 7; break;
    case 7: 
      var $15=$retval;

      return $15;
  }

}


function _luaV_lessequal($L, $l, $r) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $l_addr;
      var $r_addr;
      var $res;
      $L_addr=$L;
      $l_addr=$l;
      $r_addr=$r;
      var $0=$l_addr;
      var $tt_=(($0+8)|0);
      var $1=HEAP32[(($tt_)>>2)];
      var $cmp=(($1)|0)==3;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $2=$r_addr;
      var $tt_1=(($2+8)|0);
      var $3=HEAP32[(($tt_1)>>2)];
      var $cmp2=(($3)|0)==3;
      if ($cmp2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$l_addr;
      var $value_=(($4)|0);
      var $n=$value_;
      var $5=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $6=$r_addr;
      var $value_3=(($6)|0);
      var $n4=$value_3;
      var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n4)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n4)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp5=$5 <= $7;
      var $conv=(($cmp5)&1);
      $retval=$conv;
      label = 16; break;
    case 5: 
      var $8=$l_addr;
      var $tt_6=(($8+8)|0);
      var $9=HEAP32[(($tt_6)>>2)];
      var $and=$9 & 15;
      var $cmp7=(($and)|0)==4;
      if ($cmp7) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $10=$r_addr;
      var $tt_10=(($10+8)|0);
      var $11=HEAP32[(($tt_10)>>2)];
      var $and11=$11 & 15;
      var $cmp12=(($and11)|0)==4;
      if ($cmp12) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $12=$l_addr;
      var $value_15=(($12)|0);
      var $gc=$value_15;
      var $13=HEAP32[(($gc)>>2)];
      var $ts=$13;
      var $14=$r_addr;
      var $value_16=(($14)|0);
      var $gc17=$value_16;
      var $15=HEAP32[(($gc17)>>2)];
      var $ts18=$15;
      var $call=_l_strcmp($ts, $ts18);
      var $cmp19=(($call)|0) <= 0;
      var $conv20=(($cmp19)&1);
      $retval=$conv20;
      label = 16; break;
    case 8: 
      var $16=$L_addr;
      var $17=$l_addr;
      var $18=$r_addr;
      var $call22=_call_orderTM($16, $17, $18, 14);
      $res=$call22;
      var $cmp23=(($call22)|0) >= 0;
      if ($cmp23) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $19=$res;
      $retval=$19;
      label = 16; break;
    case 10: 
      var $20=$L_addr;
      var $21=$r_addr;
      var $22=$l_addr;
      var $call27=_call_orderTM($20, $21, $22, 13);
      $res=$call27;
      var $cmp28=(($call27)|0) < 0;
      if ($cmp28) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $23=$L_addr;
      var $24=$l_addr;
      var $25=$r_addr;
      _luaG_ordererror($23, $24, $25);

    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $26=$res;
      var $tobool=(($26)|0)!=0;
      var $lnot=$tobool ^ 1;
      var $lnot_ext=(($lnot)&1);
      $retval=$lnot_ext;
      label = 16; break;
    case 16: 
      var $27=$retval;

      return $27;
  }

}
_luaV_lessequal["X"]=1;

function _luaV_concat($L, $total) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $total_addr;
      var $top;
      var $n;
      var $io2;
      var $io1;
      var $tl;
      var $buffer;
      var $i;
      var $l;
      var $l83;
      var $io;
      var $x_;
      $L_addr=$L;
      $total_addr=$total;
      label = 3; break;
    case 3: 
      var $0=$L_addr;
      var $top1=(($0+8)|0);
      var $1=HEAP32[(($top1)>>2)];
      $top=$1;
      $n=2;
      var $2=$top;
      var $add_ptr=((($2)-(24))|0);
      var $tt_=(($add_ptr+8)|0);
      var $3=HEAP32[(($tt_)>>2)];
      var $and=$3 & 15;
      var $cmp=(($and)|0)==4;
      if ($cmp) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $4=$top;
      var $add_ptr2=((($4)-(24))|0);
      var $tt_3=(($add_ptr2+8)|0);
      var $5=HEAP32[(($tt_3)>>2)];
      var $cmp4=(($5)|0)==3;
      if ($cmp4) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $6=$top;
      var $add_ptr6=((($6)-(12))|0);
      var $tt_7=(($add_ptr6+8)|0);
      var $7=HEAP32[(($tt_7)>>2)];
      var $and8=$7 & 15;
      var $cmp9=(($and8)|0)==4;
      if ($cmp9) { label = 10; break; } else { label = 6; break; }
    case 6: 
      var $8=$L_addr;
      var $9=$top;
      var $add_ptr11=((($9)-(12))|0);
      var $call=_luaV_tostring($8, $add_ptr11);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 10; break; } else { label = 7; break; }
    case 7: 
      var $10=$L_addr;
      var $11=$top;
      var $add_ptr12=((($11)-(24))|0);
      var $12=$top;
      var $add_ptr13=((($12)-(12))|0);
      var $13=$top;
      var $add_ptr14=((($13)-(24))|0);
      var $call15=_call_binTM($10, $add_ptr12, $add_ptr13, $add_ptr14, 15);
      var $tobool16=(($call15)|0)!=0;
      if ($tobool16) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $14=$L_addr;
      var $15=$top;
      var $add_ptr18=((($15)-(24))|0);
      var $16=$top;
      var $add_ptr19=((($16)-(12))|0);
      _luaG_concaterror($14, $add_ptr18, $add_ptr19);

    case 9: 
      label = 33; break;
    case 10: 
      var $17=$top;
      var $add_ptr20=((($17)-(12))|0);
      var $value_=(($add_ptr20)|0);
      var $gc=$value_;
      var $18=HEAP32[(($gc)>>2)];
      var $ts=$18;
      var $tsv=$ts;
      var $len=(($tsv+12)|0);
      var $19=HEAP32[(($len)>>2)];
      var $cmp21=(($19)|0)==0;
      if ($cmp21) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $20=$top;
      var $add_ptr23=((($20)-(24))|0);
      var $tt_24=(($add_ptr23+8)|0);
      var $21=HEAP32[(($tt_24)>>2)];
      var $and25=$21 & 15;
      var $cmp26=(($and25)|0)==4;
      if ($cmp26) { var $24 = 1;label = 13; break; } else { label = 12; break; }
    case 12: 
      var $22=$L_addr;
      var $23=$top;
      var $add_ptr27=((($23)-(24))|0);
      var $call28=_luaV_tostring($22, $add_ptr27);
      var $tobool29=(($call28)|0)!=0;
      var $24 = $tobool29;label = 13; break;
    case 13: 
      var $24;
      var $lor_ext=(($24)&1);
      label = 32; break;
    case 14: 
      var $25=$top;
      var $add_ptr31=((($25)-(24))|0);
      var $tt_32=(($add_ptr31+8)|0);
      var $26=HEAP32[(($tt_32)>>2)];
      var $and33=$26 & 15;
      var $cmp34=(($and33)|0)==4;
      if ($cmp34) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $27=$top;
      var $add_ptr35=((($27)-(24))|0);
      var $value_36=(($add_ptr35)|0);
      var $gc37=$value_36;
      var $28=HEAP32[(($gc37)>>2)];
      var $ts38=$28;
      var $tsv39=$ts38;
      var $len40=(($tsv39+12)|0);
      var $29=HEAP32[(($len40)>>2)];
      var $cmp41=(($29)|0)==0;
      if ($cmp41) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $30=$top;
      var $add_ptr43=((($30)-(12))|0);
      $io2=$add_ptr43;
      var $31=$top;
      var $add_ptr44=((($31)-(24))|0);
      $io1=$add_ptr44;
      var $32=$io1;
      var $value_45=(($32)|0);
      var $33=$io2;
      var $value_46=(($33)|0);
      var $34=$value_45;
      var $35=$value_46;
      HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];
      var $36=$io2;
      var $tt_47=(($36+8)|0);
      var $37=HEAP32[(($tt_47)>>2)];
      var $38=$io1;
      var $tt_48=(($38+8)|0);
      HEAP32[(($tt_48)>>2)]=$37;
      label = 31; break;
    case 17: 
      var $39=$top;
      var $add_ptr50=((($39)-(12))|0);
      var $value_51=(($add_ptr50)|0);
      var $gc52=$value_51;
      var $40=HEAP32[(($gc52)>>2)];
      var $ts53=$40;
      var $tsv54=$ts53;
      var $len55=(($tsv54+12)|0);
      var $41=HEAP32[(($len55)>>2)];
      $tl=$41;
      $i=1;
      label = 18; break;
    case 18: 
      var $42=$i;
      var $43=$total_addr;
      var $cmp56=(($42)|0) < (($43)|0);
      if ($cmp56) { label = 19; break; } else { var $51 = 0;label = 22; break; }
    case 19: 
      var $44=$top;
      var $45=$i;
      var $idx_neg=(((-$45))|0);
      var $add_ptr57=(($44+((($idx_neg)*(12))&-1))|0);
      var $add_ptr58=((($add_ptr57)-(12))|0);
      var $tt_59=(($add_ptr58+8)|0);
      var $46=HEAP32[(($tt_59)>>2)];
      var $and60=$46 & 15;
      var $cmp61=(($and60)|0)==4;
      if ($cmp61) { var $50 = 1;label = 21; break; } else { label = 20; break; }
    case 20: 
      var $47=$L_addr;
      var $48=$top;
      var $49=$i;
      var $idx_neg63=(((-$49))|0);
      var $add_ptr64=(($48+((($idx_neg63)*(12))&-1))|0);
      var $add_ptr65=((($add_ptr64)-(12))|0);
      var $call66=_luaV_tostring($47, $add_ptr65);
      var $tobool67=(($call66)|0)!=0;
      var $50 = $tobool67;label = 21; break;
    case 21: 
      var $50;
      var $51 = $50;label = 22; break;
    case 22: 
      var $51;
      if ($51) { label = 23; break; } else { label = 27; break; }
    case 23: 
      var $52=$top;
      var $53=$i;
      var $idx_neg70=(((-$53))|0);
      var $add_ptr71=(($52+((($idx_neg70)*(12))&-1))|0);
      var $add_ptr72=((($add_ptr71)-(12))|0);
      var $value_73=(($add_ptr72)|0);
      var $gc74=$value_73;
      var $54=HEAP32[(($gc74)>>2)];
      var $ts75=$54;
      var $tsv76=$ts75;
      var $len77=(($tsv76+12)|0);
      var $55=HEAP32[(($len77)>>2)];
      $l=$55;
      var $56=$l;
      var $57=$tl;
      var $sub=(((-3)-($57))|0);
      var $cmp78=(($56)>>>0) >= (($sub)>>>0);
      if ($cmp78) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $58=$L_addr;
      _luaG_runerror($58, ((5247772)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));

    case 25: 
      var $59=$l;
      var $60=$tl;
      var $add=((($60)+($59))|0);
      $tl=$add;
      label = 26; break;
    case 26: 
      var $61=$i;
      var $inc=((($61)+(1))|0);
      $i=$inc;
      label = 18; break;
    case 27: 
      var $62=$L_addr;
      var $63=$L_addr;
      var $l_G=(($63+12)|0);
      var $64=HEAP32[(($l_G)>>2)];
      var $buff=(($64+124)|0);
      var $65=$tl;
      var $call81=_luaZ_openspace($62, $buff, $65);
      $buffer=$call81;
      $tl=0;
      var $66=$i;
      $n=$66;
      label = 28; break;
    case 28: 
      var $67=$top;
      var $68=$i;
      var $idx_neg84=(((-$68))|0);
      var $add_ptr85=(($67+((($idx_neg84)*(12))&-1))|0);
      var $value_86=(($add_ptr85)|0);
      var $gc87=$value_86;
      var $69=HEAP32[(($gc87)>>2)];
      var $ts88=$69;
      var $tsv89=$ts88;
      var $len90=(($tsv89+12)|0);
      var $70=HEAP32[(($len90)>>2)];
      $l83=$70;
      var $71=$buffer;
      var $72=$tl;
      var $add_ptr91=(($71+$72)|0);
      var $73=$top;
      var $74=$i;
      var $idx_neg92=(((-$74))|0);
      var $add_ptr93=(($73+((($idx_neg92)*(12))&-1))|0);
      var $value_94=(($add_ptr93)|0);
      var $gc95=$value_94;
      var $75=HEAP32[(($gc95)>>2)];
      var $ts96=$75;
      var $add_ptr97=(($ts96+16)|0);
      var $76=$add_ptr97;
      var $77=$l83;
      var $mul=$77;
      _memcpy($add_ptr91, $76, $mul);
      var $78=$l83;
      var $79=$tl;
      var $add98=((($79)+($78))|0);
      $tl=$add98;
      label = 29; break;
    case 29: 
      var $80=$i;
      var $dec=((($80)-(1))|0);
      $i=$dec;
      var $cmp99=(($dec)|0) > 0;
      if ($cmp99) { label = 28; break; } else { label = 30; break; }
    case 30: 
      var $81=$top;
      var $82=$n;
      var $idx_neg100=(((-$82))|0);
      var $add_ptr101=(($81+((($idx_neg100)*(12))&-1))|0);
      $io=$add_ptr101;
      var $83=$L_addr;
      var $84=$buffer;
      var $85=$tl;
      var $call102=_luaS_newlstr($83, $84, $85);
      $x_=$call102;
      var $86=$x_;
      var $87=$86;
      var $88=$io;
      var $value_103=(($88)|0);
      var $gc104=$value_103;
      HEAP32[(($gc104)>>2)]=$87;
      var $89=$x_;
      var $tsv105=$89;
      var $tt=(($tsv105+4)|0);
      var $90=HEAP8[($tt)];
      var $conv=(($90)&255);
      var $or=$conv | 64;
      var $91=$io;
      var $tt_106=(($91+8)|0);
      HEAP32[(($tt_106)>>2)]=$or;
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $92=$n;
      var $sub110=((($92)-(1))|0);
      var $93=$total_addr;
      var $sub111=((($93)-($sub110))|0);
      $total_addr=$sub111;
      var $94=$n;
      var $sub112=((($94)-(1))|0);
      var $95=$L_addr;
      var $top113=(($95+8)|0);
      var $96=HEAP32[(($top113)>>2)];
      var $idx_neg114=(((-$sub112))|0);
      var $add_ptr115=(($96+((($idx_neg114)*(12))&-1))|0);
      HEAP32[(($top113)>>2)]=$add_ptr115;
      label = 34; break;
    case 34: 
      var $97=$total_addr;
      var $cmp117=(($97)|0) > 1;
      if ($cmp117) { label = 3; break; } else { label = 35; break; }
    case 35: 
      STACKTOP = __stackBase__;
      return;
  }

}
_luaV_concat["X"]=1;

function _luaV_finishOp($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $ci;
      var $base;
      var $inst;
      var $op;
      var $io2;
      var $io1;
      var $res;
      var $top42;
      var $b45;
      var $total;
      var $io250;
      var $io151;
      var $io262;
      var $io165;
      $L_addr=$L;
      var $0=$L_addr;
      var $ci1=(($0+16)|0);
      var $1=HEAP32[(($ci1)>>2)];
      $ci=$1;
      var $2=$ci;
      var $u=(($2+24)|0);
      var $l=$u;
      var $base2=(($l)|0);
      var $3=HEAP32[(($base2)>>2)];
      $base=$3;
      var $4=$ci;
      var $u3=(($4+24)|0);
      var $l4=$u3;
      var $savedpc=(($l4+4)|0);
      var $5=HEAP32[(($savedpc)>>2)];
      var $add_ptr=((($5)-(4))|0);
      var $6=HEAP32[(($add_ptr)>>2)];
      $inst=$6;
      var $7=$inst;
      var $shr=$7 >>> 0;
      var $and=$shr & 63;
      $op=$and;
      var $8=$op;
      if ((($8)|0)==13 | (($8)|0)==14 | (($8)|0)==15 | (($8)|0)==16 | (($8)|0)==17 | (($8)|0)==18 | (($8)|0)==19 | (($8)|0)==21 | (($8)|0)==6 | (($8)|0)==7 | (($8)|0)==12) {
        label = 3; break;
      }
      else if ((($8)|0)==26 | (($8)|0)==25 | (($8)|0)==24) {
        label = 4; break;
      }
      else if ((($8)|0)==22) {
        label = 14; break;
      }
      else if ((($8)|0)==34) {
        label = 17; break;
      }
      else if ((($8)|0)==29) {
        label = 18; break;
      }
      else if ((($8)|0)==30 | (($8)|0)==8 | (($8)|0)==10) {
        label = 21; break;
      }
      else {
      label = 22; break;
      }
      
    case 3: 
      var $9=$L_addr;
      var $top=(($9+8)|0);
      var $10=HEAP32[(($top)>>2)];
      var $incdec_ptr=((($10)-(12))|0);
      HEAP32[(($top)>>2)]=$incdec_ptr;
      $io2=$incdec_ptr;
      var $11=$base;
      var $12=$inst;
      var $shr5=$12 >>> 6;
      var $and6=$shr5 & 255;
      var $add_ptr7=(($11+((($and6)*(12))&-1))|0);
      $io1=$add_ptr7;
      var $13=$io1;
      var $value_=(($13)|0);
      var $14=$io2;
      var $value_8=(($14)|0);
      var $15=$value_;
      var $16=$value_8;
      HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];
      var $17=$io2;
      var $tt_=(($17+8)|0);
      var $18=HEAP32[(($tt_)>>2)];
      var $19=$io1;
      var $tt_9=(($19+8)|0);
      HEAP32[(($tt_9)>>2)]=$18;
      label = 23; break;
    case 4: 
      var $20=$L_addr;
      var $top11=(($20+8)|0);
      var $21=HEAP32[(($top11)>>2)];
      var $add_ptr12=((($21)-(12))|0);
      var $tt_13=(($add_ptr12+8)|0);
      var $22=HEAP32[(($tt_13)>>2)];
      var $cmp=(($22)|0)==0;
      if ($cmp) { var $30 = 1;label = 8; break; } else { label = 5; break; }
    case 5: 
      var $23=$L_addr;
      var $top14=(($23+8)|0);
      var $24=HEAP32[(($top14)>>2)];
      var $add_ptr15=((($24)-(12))|0);
      var $tt_16=(($add_ptr15+8)|0);
      var $25=HEAP32[(($tt_16)>>2)];
      var $cmp17=(($25)|0)==1;
      if ($cmp17) { label = 6; break; } else { var $29 = 0;label = 7; break; }
    case 6: 
      var $26=$L_addr;
      var $top18=(($26+8)|0);
      var $27=HEAP32[(($top18)>>2)];
      var $add_ptr19=((($27)-(12))|0);
      var $value_20=(($add_ptr19)|0);
      var $b=$value_20;
      var $28=HEAP32[(($b)>>2)];
      var $cmp21=(($28)|0)==0;
      var $29 = $cmp21;label = 7; break;
    case 7: 
      var $29;
      var $30 = $29;label = 8; break;
    case 8: 
      var $30;
      var $lnot=$30 ^ 1;
      var $lnot_ext=(($lnot)&1);
      $res=$lnot_ext;
      var $31=$L_addr;
      var $top22=(($31+8)|0);
      var $32=HEAP32[(($top22)>>2)];
      var $incdec_ptr23=((($32)-(12))|0);
      HEAP32[(($top22)>>2)]=$incdec_ptr23;
      var $33=$op;
      var $cmp24=(($33)|0)==26;
      if ($cmp24) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $34=$L_addr;
      var $35=$base;
      var $36=$inst;
      var $shr25=$36 >>> 23;
      var $and26=$shr25 & 511;
      var $add_ptr27=(($35+((($and26)*(12))&-1))|0);
      var $call=_luaT_gettmbyobj($34, $add_ptr27, 14);
      var $tt_28=(($call+8)|0);
      var $37=HEAP32[(($tt_28)>>2)];
      var $cmp29=(($37)|0)==0;
      if ($cmp29) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $38=$res;
      var $tobool=(($38)|0)!=0;
      var $lnot30=$tobool ^ 1;
      var $lnot_ext31=(($lnot30)&1);
      $res=$lnot_ext31;
      label = 11; break;
    case 11: 
      var $39=$res;
      var $40=$inst;
      var $shr32=$40 >>> 6;
      var $and33=$shr32 & 255;
      var $cmp34=(($39)|0)!=(($and33)|0);
      if ($cmp34) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $41=$ci;
      var $u36=(($41+24)|0);
      var $l37=$u36;
      var $savedpc38=(($l37+4)|0);
      var $42=HEAP32[(($savedpc38)>>2)];
      var $incdec_ptr39=(($42+4)|0);
      HEAP32[(($savedpc38)>>2)]=$incdec_ptr39;
      label = 13; break;
    case 13: 
      label = 23; break;
    case 14: 
      var $43=$L_addr;
      var $top43=(($43+8)|0);
      var $44=HEAP32[(($top43)>>2)];
      var $add_ptr44=((($44)-(12))|0);
      $top42=$add_ptr44;
      var $45=$inst;
      var $shr46=$45 >>> 23;
      var $and47=$shr46 & 511;
      $b45=$and47;
      var $46=$top42;
      var $add_ptr48=((($46)-(12))|0);
      var $47=$base;
      var $48=$b45;
      var $add_ptr49=(($47+((($48)*(12))&-1))|0);
      var $sub_ptr_lhs_cast=$add_ptr48;
      var $sub_ptr_rhs_cast=$add_ptr49;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(12))&-1);
      $total=$sub_ptr_div;
      var $49=$top42;
      $io250=$49;
      var $50=$top42;
      var $add_ptr52=((($50)-(24))|0);
      $io151=$add_ptr52;
      var $51=$io151;
      var $value_53=(($51)|0);
      var $52=$io250;
      var $value_54=(($52)|0);
      var $53=$value_53;
      var $54=$value_54;
      HEAP32[(($53)>>2)]=HEAP32[(($54)>>2)];HEAP32[((($53)+(4))>>2)]=HEAP32[((($54)+(4))>>2)];
      var $55=$io250;
      var $tt_55=(($55+8)|0);
      var $56=HEAP32[(($tt_55)>>2)];
      var $57=$io151;
      var $tt_56=(($57+8)|0);
      HEAP32[(($tt_56)>>2)]=$56;
      var $58=$total;
      var $cmp57=(($58)|0) > 1;
      if ($cmp57) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $59=$top42;
      var $add_ptr59=((($59)-(12))|0);
      var $60=$L_addr;
      var $top60=(($60+8)|0);
      HEAP32[(($top60)>>2)]=$add_ptr59;
      var $61=$L_addr;
      var $62=$total;
      _luaV_concat($61, $62);
      label = 16; break;
    case 16: 
      var $63=$L_addr;
      var $top63=(($63+8)|0);
      var $64=HEAP32[(($top63)>>2)];
      var $add_ptr64=((($64)-(12))|0);
      $io262=$add_ptr64;
      var $65=$ci;
      var $u66=(($65+24)|0);
      var $l67=$u66;
      var $base68=(($l67)|0);
      var $66=HEAP32[(($base68)>>2)];
      var $67=$inst;
      var $shr69=$67 >>> 6;
      var $and70=$shr69 & 255;
      var $add_ptr71=(($66+((($and70)*(12))&-1))|0);
      $io165=$add_ptr71;
      var $68=$io165;
      var $value_72=(($68)|0);
      var $69=$io262;
      var $value_73=(($69)|0);
      var $70=$value_72;
      var $71=$value_73;
      HEAP32[(($70)>>2)]=HEAP32[(($71)>>2)];HEAP32[((($70)+(4))>>2)]=HEAP32[((($71)+(4))>>2)];
      var $72=$io262;
      var $tt_74=(($72+8)|0);
      var $73=HEAP32[(($tt_74)>>2)];
      var $74=$io165;
      var $tt_75=(($74+8)|0);
      HEAP32[(($tt_75)>>2)]=$73;
      var $75=$ci;
      var $top76=(($75+4)|0);
      var $76=HEAP32[(($top76)>>2)];
      var $77=$L_addr;
      var $top77=(($77+8)|0);
      HEAP32[(($top77)>>2)]=$76;
      label = 23; break;
    case 17: 
      var $78=$ci;
      var $top79=(($78+4)|0);
      var $79=HEAP32[(($top79)>>2)];
      var $80=$L_addr;
      var $top80=(($80+8)|0);
      HEAP32[(($top80)>>2)]=$79;
      label = 23; break;
    case 18: 
      var $81=$inst;
      var $shr82=$81 >>> 14;
      var $and83=$shr82 & 511;
      var $sub=((($and83)-(1))|0);
      var $cmp84=(($sub)|0) >= 0;
      if ($cmp84) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $82=$ci;
      var $top86=(($82+4)|0);
      var $83=HEAP32[(($top86)>>2)];
      var $84=$L_addr;
      var $top87=(($84+8)|0);
      HEAP32[(($top87)>>2)]=$83;
      label = 20; break;
    case 20: 
      label = 23; break;
    case 21: 
      label = 23; break;
    case 22: 
      label = 23; break;
    case 23: 

      return;
  }

}
_luaV_finishOp["X"]=1;

function _luaV_objlen($L, $ra, $rb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $ra_addr;
      var $rb_addr;
      var $tm;
      var $h;
      var $io;
      var $io15;
      $L_addr=$L;
      $ra_addr=$ra;
      $rb_addr=$rb;
      var $0=$rb_addr;
      var $tt_=(($0+8)|0);
      var $1=HEAP32[(($tt_)>>2)];
      var $and=$1 & 15;
      if ((($and)|0)==5) {
        label = 3; break;
      }
      else if ((($and)|0)==4) {
        label = 12; break;
      }
      else {
      label = 13; break;
      }
      
    case 3: 
      var $2=$rb_addr;
      var $value_=(($2)|0);
      var $gc=$value_;
      var $3=HEAP32[(($gc)>>2)];
      var $h1=$3;
      $h=$h1;
      var $4=$h;
      var $metatable=(($4+8)|0);
      var $5=HEAP32[(($metatable)>>2)];
      var $cmp=(($5)|0)==0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $cond8 = 0;label = 9; break;
    case 5: 
      var $6=$h;
      var $metatable2=(($6+8)|0);
      var $7=HEAP32[(($metatable2)>>2)];
      var $flags=(($7+6)|0);
      var $8=HEAP8[($flags)];
      var $conv=(($8)&255);
      var $and3=$conv & 16;
      var $tobool=(($and3)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $cond = 0;label = 8; break;
    case 7: 
      var $9=$h;
      var $metatable6=(($9+8)|0);
      var $10=HEAP32[(($metatable6)>>2)];
      var $11=$L_addr;
      var $l_G=(($11+12)|0);
      var $12=HEAP32[(($l_G)>>2)];
      var $tmname=(($12+164)|0);
      var $arrayidx=(($tmname+16)|0);
      var $13=HEAP32[(($arrayidx)>>2)];
      var $call=_luaT_gettm($10, 4, $13);
      var $cond = $call;label = 8; break;
    case 8: 
      var $cond;
      var $cond8 = $cond;label = 9; break;
    case 9: 
      var $cond8;
      $tm=$cond8;
      var $14=$tm;
      var $tobool9=(($14)|0)!=0;
      if ($tobool9) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 16; break;
    case 11: 
      var $15=$ra_addr;
      $io=$15;
      var $16=$h;
      var $call10=_luaH_getn($16);
      var $conv11=(($call10)|0);
      var $17=$io;
      var $value_12=(($17)|0);
      var $n=$value_12;
      (HEAPF64[(tempDoublePtr)>>3]=$conv11,HEAP32[(($n)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $18=$io;
      var $tt_13=(($18+8)|0);
      HEAP32[(($tt_13)>>2)]=3;
      label = 17; break;
    case 12: 
      var $19=$ra_addr;
      $io15=$19;
      var $20=$rb_addr;
      var $value_16=(($20)|0);
      var $gc17=$value_16;
      var $21=HEAP32[(($gc17)>>2)];
      var $ts=$21;
      var $tsv=$ts;
      var $len=(($tsv+12)|0);
      var $22=HEAP32[(($len)>>2)];
      var $conv18=(($22)>>>0);
      var $23=$io15;
      var $value_19=(($23)|0);
      var $n20=$value_19;
      (HEAPF64[(tempDoublePtr)>>3]=$conv18,HEAP32[(($n20)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n20)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $24=$io15;
      var $tt_21=(($24+8)|0);
      HEAP32[(($tt_21)>>2)]=3;
      label = 17; break;
    case 13: 
      var $25=$L_addr;
      var $26=$rb_addr;
      var $call22=_luaT_gettmbyobj($25, $26, 4);
      $tm=$call22;
      var $27=$tm;
      var $tt_23=(($27+8)|0);
      var $28=HEAP32[(($tt_23)>>2)];
      var $cmp24=(($28)|0)==0;
      if ($cmp24) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $29=$L_addr;
      var $30=$rb_addr;
      _luaG_typeerror($29, $30, ((5246776)|0));

    case 15: 
      label = 16; break;
    case 16: 
      var $31=$L_addr;
      var $32=$tm;
      var $33=$rb_addr;
      var $34=$rb_addr;
      var $35=$ra_addr;
      _callTM($31, $32, $33, $34, $35, 1);
      label = 17; break;
    case 17: 

      return;
  }

}
_luaV_objlen["X"]=1;

function _luaV_arith($L, $ra, $rb, $rc, $op) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; _memset(__stackBase__, 0, 24);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $ra_addr;
      var $rb_addr;
      var $rc_addr;
      var $op_addr;
      var $tempb=__stackBase__;
      var $tempc=(__stackBase__)+(12);
      var $b;
      var $c;
      var $res;
      var $io;
      $L_addr=$L;
      $ra_addr=$ra;
      $rb_addr=$rb;
      $rc_addr=$rc;
      $op_addr=$op;
      var $0=$rb_addr;
      var $call=_luaV_tonumber($0, $tempb);
      $b=$call;
      var $cmp=(($call)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $1=$rc_addr;
      var $call1=_luaV_tonumber($1, $tempc);
      $c=$call1;
      var $cmp2=(($call1)|0)!=0;
      if ($cmp2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $2=$op_addr;
      var $sub=((($2)-(6))|0);
      var $add=(($sub)|0);
      var $3=$b;
      var $value_=(($3)|0);
      var $n=$value_;
      var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $5=$c;
      var $value_3=(($5)|0);
      var $n4=$value_3;
      var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n4)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n4)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call5=_luaO_arith($add, $4, $6);
      $res=$call5;
      var $7=$ra_addr;
      $io=$7;
      var $8=$res;
      var $9=$io;
      var $value_6=(($9)|0);
      var $n7=$value_6;
      (HEAPF64[(tempDoublePtr)>>3]=$8,HEAP32[(($n7)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n7)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $10=$io;
      var $tt_=(($10+8)|0);
      HEAP32[(($tt_)>>2)]=3;
      label = 8; break;
    case 5: 
      var $11=$L_addr;
      var $12=$rb_addr;
      var $13=$rc_addr;
      var $14=$ra_addr;
      var $15=$op_addr;
      var $call8=_call_binTM($11, $12, $13, $14, $15);
      var $tobool=(($call8)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $16=$L_addr;
      var $17=$rb_addr;
      var $18=$rc_addr;
      _luaG_aritherror($16, $17, $18);

    case 7: 
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
  }

}
_luaV_arith["X"]=1;

function _luaV_execute($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $ci;
      var $cl;
      var $k;
      var $base;
      var $i;
      var $ra;
      var $io2;
      var $io1;
      var $rb;
      var $io229;
      var $io130;
      var $rb36;
      var $io244;
      var $io145;
      var $io;
      var $b65;
      var $b73;
      var $io276;
      var $io177;
      var $b83;
      var $a;
      var $uv;
      var $io2169;
      var $io1170;
      var $b230;
      var $c;
      var $t;
      var $io235;
      var $rb259;
      var $io2263;
      var $io1264;
      var $rb289;
      var $rc;
      var $nb;
      var $nc;
      var $io331;
      var $rb340;
      var $rc356;
      var $nb380;
      var $nc383;
      var $io386;
      var $rb396;
      var $rc412;
      var $nb436;
      var $nc439;
      var $io442;
      var $rb452;
      var $rc468;
      var $nb492;
      var $nc495;
      var $io498;
      var $rb508;
      var $rc524;
      var $nb548;
      var $nc551;
      var $io554;
      var $rb568;
      var $rc584;
      var $nb608;
      var $nc611;
      var $io614;
      var $rb624;
      var $nb632;
      var $io635;
      var $rb646;
      var $res;
      var $io660;
      var $b672;
      var $c675;
      var $rb678;
      var $io2691;
      var $io1692;
      var $a719;
      var $rb740;
      var $rc756;
      var $a793;
      var $a862;
      var $a931;
      var $a994;
      var $rb1016;
      var $io21055;
      var $io11056;
      var $a1064;
      var $b1086;
      var $nresults;
      var $b1116;
      var $nci;
      var $oci;
      var $nfunc;
      var $ofunc;
      var $lim;
      var $aux;
      var $io21157;
      var $io11159;
      var $b1193;
      var $step;
      var $idx;
      var $limit;
      var $io1248;
      var $io1252;
      var $init;
      var $plimit;
      var $pstep;
      var $io1292;
      var $cb;
      var $io21310;
      var $io11312;
      var $io21318;
      var $io11320;
      var $io21326;
      var $io11327;
      var $io21354;
      var $io11356;
      var $n1370;
      var $c1373;
      var $last;
      var $h;
      var $val;
      var $p1437;
      var $ncl;
      var $io1451;
      var $b1470;
      var $j;
      var $n1474;
      var $io21514;
      var $io11517;
      $L_addr=$L;
      var $0=$L_addr;
      var $ci1=(($0+16)|0);
      var $1=HEAP32[(($ci1)>>2)];
      $ci=$1;
      label = 3; break;
    case 3: 
      var $2=$ci;
      var $func=(($2)|0);
      var $3=HEAP32[(($func)>>2)];
      var $value_=(($3)|0);
      var $gc=$value_;
      var $4=HEAP32[(($gc)>>2)];
      var $cl2=$4;
      var $l=$cl2;
      $cl=$l;
      var $5=$cl;
      var $p=(($5+12)|0);
      var $6=HEAP32[(($p)>>2)];
      var $k3=(($6+8)|0);
      var $7=HEAP32[(($k3)>>2)];
      $k=$7;
      var $8=$ci;
      var $u=(($8+24)|0);
      var $l4=$u;
      var $base5=(($l4)|0);
      var $9=HEAP32[(($base5)>>2)];
      $base=$9;
      label = 4; break;
    case 4: 
      var $10=$ci;
      var $u6=(($10+24)|0);
      var $l7=$u6;
      var $savedpc=(($l7+4)|0);
      var $11=HEAP32[(($savedpc)>>2)];
      var $incdec_ptr=(($11+4)|0);
      HEAP32[(($savedpc)>>2)]=$incdec_ptr;
      var $12=HEAP32[(($11)>>2)];
      $i=$12;
      var $13=$L_addr;
      var $hookmask=(($13+40)|0);
      var $14=HEAP8[($hookmask)];
      var $conv=(($14)&255);
      var $and=$conv & 12;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $15=$L_addr;
      var $hookcount=(($15+48)|0);
      var $16=HEAP32[(($hookcount)>>2)];
      var $dec=((($16)-(1))|0);
      HEAP32[(($hookcount)>>2)]=$dec;
      var $cmp=(($dec)|0)==0;
      if ($cmp) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $17=$L_addr;
      var $hookmask9=(($17+40)|0);
      var $18=HEAP8[($hookmask9)];
      var $conv10=(($18)&255);
      var $and11=$conv10 & 4;
      var $tobool12=(($and11)|0)!=0;
      if ($tobool12) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $19=$L_addr;
      _traceexec($19);
      var $20=$ci;
      var $u13=(($20+24)|0);
      var $l14=$u13;
      var $base15=(($l14)|0);
      var $21=HEAP32[(($base15)>>2)];
      $base=$21;
      label = 8; break;
    case 8: 
      var $22=$base;
      var $23=$i;
      var $shr=$23 >>> 6;
      var $and16=$shr & 255;
      var $add_ptr=(($22+((($and16)*(12))&-1))|0);
      $ra=$add_ptr;
      var $24=$i;
      var $shr17=$24 >>> 0;
      var $and18=$shr17 & 63;
      if ((($and18)|0)==0) {
        label = 9; break;
      }
      else if ((($and18)|0)==1) {
        label = 10; break;
      }
      else if ((($and18)|0)==2) {
        label = 11; break;
      }
      else if ((($and18)|0)==3) {
        label = 12; break;
      }
      else if ((($and18)|0)==4) {
        label = 15; break;
      }
      else if ((($and18)|0)==5) {
        label = 19; break;
      }
      else if ((($and18)|0)==6) {
        label = 20; break;
      }
      else if ((($and18)|0)==7) {
        label = 24; break;
      }
      else if ((($and18)|0)==8) {
        label = 28; break;
      }
      else if ((($and18)|0)==9) {
        label = 35; break;
      }
      else if ((($and18)|0)==10) {
        label = 40; break;
      }
      else if ((($and18)|0)==11) {
        label = 47; break;
      }
      else if ((($and18)|0)==12) {
        label = 53; break;
      }
      else if ((($and18)|0)==13) {
        label = 57; break;
      }
      else if ((($and18)|0)==14) {
        label = 68; break;
      }
      else if ((($and18)|0)==15) {
        label = 79; break;
      }
      else if ((($and18)|0)==16) {
        label = 90; break;
      }
      else if ((($and18)|0)==17) {
        label = 101; break;
      }
      else if ((($and18)|0)==18) {
        label = 112; break;
      }
      else if ((($and18)|0)==19) {
        label = 123; break;
      }
      else if ((($and18)|0)==20) {
        label = 127; break;
      }
      else if ((($and18)|0)==21) {
        label = 132; break;
      }
      else if ((($and18)|0)==22) {
        label = 133; break;
      }
      else if ((($and18)|0)==23) {
        label = 139; break;
      }
      else if ((($and18)|0)==24) {
        label = 142; break;
      }
      else if ((($and18)|0)==25) {
        label = 156; break;
      }
      else if ((($and18)|0)==26) {
        label = 168; break;
      }
      else if ((($and18)|0)==27) {
        label = 180; break;
      }
      else if ((($and18)|0)==28) {
        label = 192; break;
      }
      else if ((($and18)|0)==29) {
        label = 204; break;
      }
      else if ((($and18)|0)==30) {
        label = 212; break;
      }
      else if ((($and18)|0)==31) {
        label = 224; break;
      }
      else if ((($and18)|0)==32) {
        label = 233; break;
      }
      else if ((($and18)|0)==33) {
        label = 238; break;
      }
      else if ((($and18)|0)==34) {
        label = 250; break;
      }
      else if ((($and18)|0)==35) {
        label = 251; break;
      }
      else if ((($and18)|0)==36) {
        label = 255; break;
      }
      else if ((($and18)|0)==37) {
        label = 270; break;
      }
      else if ((($and18)|0)==38) {
        label = 276; break;
      }
      else if ((($and18)|0)==39) {
        label = 289; break;
      }
      else {
      label = 290; break;
      }
      
    case 9: 
      var $25=$base;
      var $26=$i;
      var $shr19=$26 >>> 23;
      var $and20=$shr19 & 511;
      var $add_ptr21=(($25+((($and20)*(12))&-1))|0);
      $io2=$add_ptr21;
      var $27=$ra;
      $io1=$27;
      var $28=$io1;
      var $value_22=(($28)|0);
      var $29=$io2;
      var $value_23=(($29)|0);
      var $30=$value_22;
      var $31=$value_23;
      HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];
      var $32=$io2;
      var $tt_=(($32+8)|0);
      var $33=HEAP32[(($tt_)>>2)];
      var $34=$io1;
      var $tt_24=(($34+8)|0);
      HEAP32[(($tt_24)>>2)]=$33;
      label = 290; break;
    case 10: 
      var $35=$k;
      var $36=$i;
      var $shr26=$36 >>> 14;
      var $and27=$shr26 & 262143;
      var $add_ptr28=(($35+((($and27)*(12))&-1))|0);
      $rb=$add_ptr28;
      var $37=$rb;
      $io229=$37;
      var $38=$ra;
      $io130=$38;
      var $39=$io130;
      var $value_31=(($39)|0);
      var $40=$io229;
      var $value_32=(($40)|0);
      var $41=$value_31;
      var $42=$value_32;
      HEAP32[(($41)>>2)]=HEAP32[(($42)>>2)];HEAP32[((($41)+(4))>>2)]=HEAP32[((($42)+(4))>>2)];
      var $43=$io229;
      var $tt_33=(($43+8)|0);
      var $44=HEAP32[(($tt_33)>>2)];
      var $45=$io130;
      var $tt_34=(($45+8)|0);
      HEAP32[(($tt_34)>>2)]=$44;
      label = 290; break;
    case 11: 
      var $46=$k;
      var $47=$ci;
      var $u37=(($47+24)|0);
      var $l38=$u37;
      var $savedpc39=(($l38+4)|0);
      var $48=HEAP32[(($savedpc39)>>2)];
      var $incdec_ptr40=(($48+4)|0);
      HEAP32[(($savedpc39)>>2)]=$incdec_ptr40;
      var $49=HEAP32[(($48)>>2)];
      var $shr41=$49 >>> 6;
      var $and42=$shr41 & 67108863;
      var $add_ptr43=(($46+((($and42)*(12))&-1))|0);
      $rb36=$add_ptr43;
      var $50=$rb36;
      $io244=$50;
      var $51=$ra;
      $io145=$51;
      var $52=$io145;
      var $value_46=(($52)|0);
      var $53=$io244;
      var $value_47=(($53)|0);
      var $54=$value_46;
      var $55=$value_47;
      HEAP32[(($54)>>2)]=HEAP32[(($55)>>2)];HEAP32[((($54)+(4))>>2)]=HEAP32[((($55)+(4))>>2)];
      var $56=$io244;
      var $tt_48=(($56+8)|0);
      var $57=HEAP32[(($tt_48)>>2)];
      var $58=$io145;
      var $tt_49=(($58+8)|0);
      HEAP32[(($tt_49)>>2)]=$57;
      label = 290; break;
    case 12: 
      var $59=$ra;
      $io=$59;
      var $60=$i;
      var $shr51=$60 >>> 23;
      var $and52=$shr51 & 511;
      var $61=$io;
      var $value_53=(($61)|0);
      var $b=$value_53;
      HEAP32[(($b)>>2)]=$and52;
      var $62=$io;
      var $tt_54=(($62+8)|0);
      HEAP32[(($tt_54)>>2)]=1;
      var $63=$i;
      var $shr55=$63 >>> 14;
      var $and56=$shr55 & 511;
      var $tobool57=(($and56)|0)!=0;
      if ($tobool57) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $64=$ci;
      var $u59=(($64+24)|0);
      var $l60=$u59;
      var $savedpc61=(($l60+4)|0);
      var $65=HEAP32[(($savedpc61)>>2)];
      var $incdec_ptr62=(($65+4)|0);
      HEAP32[(($savedpc61)>>2)]=$incdec_ptr62;
      label = 14; break;
    case 14: 
      label = 290; break;
    case 15: 
      var $66=$i;
      var $shr66=$66 >>> 23;
      var $and67=$shr66 & 511;
      $b65=$and67;
      label = 16; break;
    case 16: 
      var $67=$ra;
      var $incdec_ptr68=(($67+12)|0);
      $ra=$incdec_ptr68;
      var $tt_69=(($67+8)|0);
      HEAP32[(($tt_69)>>2)]=0;
      label = 17; break;
    case 17: 
      var $68=$b65;
      var $dec70=((($68)-(1))|0);
      $b65=$dec70;
      var $tobool71=(($68)|0)!=0;
      if ($tobool71) { label = 16; break; } else { label = 18; break; }
    case 18: 
      label = 290; break;
    case 19: 
      var $69=$i;
      var $shr74=$69 >>> 23;
      var $and75=$shr74 & 511;
      $b73=$and75;
      var $70=$b73;
      var $71=$cl;
      var $upvals=(($71+16)|0);
      var $arrayidx=(($upvals+($70<<2))|0);
      var $72=HEAP32[(($arrayidx)>>2)];
      var $v=(($72+8)|0);
      var $73=HEAP32[(($v)>>2)];
      $io276=$73;
      var $74=$ra;
      $io177=$74;
      var $75=$io177;
      var $value_78=(($75)|0);
      var $76=$io276;
      var $value_79=(($76)|0);
      var $77=$value_78;
      var $78=$value_79;
      HEAP32[(($77)>>2)]=HEAP32[(($78)>>2)];HEAP32[((($77)+(4))>>2)]=HEAP32[((($78)+(4))>>2)];
      var $79=$io276;
      var $tt_80=(($79+8)|0);
      var $80=HEAP32[(($tt_80)>>2)];
      var $81=$io177;
      var $tt_81=(($81+8)|0);
      HEAP32[(($tt_81)>>2)]=$80;
      label = 290; break;
    case 20: 
      var $82=$i;
      var $shr84=$82 >>> 23;
      var $and85=$shr84 & 511;
      $b83=$and85;
      var $83=$L_addr;
      var $84=$b83;
      var $85=$cl;
      var $upvals86=(($85+16)|0);
      var $arrayidx87=(($upvals86+($84<<2))|0);
      var $86=HEAP32[(($arrayidx87)>>2)];
      var $v88=(($86+8)|0);
      var $87=HEAP32[(($v88)>>2)];
      var $88=$i;
      var $shr89=$88 >>> 14;
      var $and90=$shr89 & 511;
      var $and91=$and90 & 256;
      var $tobool92=(($and91)|0)!=0;
      if ($tobool92) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $89=$k;
      var $90=$i;
      var $shr93=$90 >>> 14;
      var $and94=$shr93 & 511;
      var $and95=$and94 & -257;
      var $add_ptr96=(($89+((($and95)*(12))&-1))|0);
      var $cond = $add_ptr96;label = 23; break;
    case 22: 
      var $91=$base;
      var $92=$i;
      var $shr97=$92 >>> 14;
      var $and98=$shr97 & 511;
      var $add_ptr99=(($91+((($and98)*(12))&-1))|0);
      var $cond = $add_ptr99;label = 23; break;
    case 23: 
      var $cond;
      var $93=$ra;
      _luaV_gettable($83, $87, $cond, $93);
      var $94=$ci;
      var $u100=(($94+24)|0);
      var $l101=$u100;
      var $base102=(($l101)|0);
      var $95=HEAP32[(($base102)>>2)];
      $base=$95;
      label = 290; break;
    case 24: 
      var $96=$L_addr;
      var $97=$base;
      var $98=$i;
      var $shr104=$98 >>> 23;
      var $and105=$shr104 & 511;
      var $add_ptr106=(($97+((($and105)*(12))&-1))|0);
      var $99=$i;
      var $shr107=$99 >>> 14;
      var $and108=$shr107 & 511;
      var $and109=$and108 & 256;
      var $tobool110=(($and109)|0)!=0;
      if ($tobool110) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $100=$k;
      var $101=$i;
      var $shr112=$101 >>> 14;
      var $and113=$shr112 & 511;
      var $and114=$and113 & -257;
      var $add_ptr115=(($100+((($and114)*(12))&-1))|0);
      var $cond121 = $add_ptr115;label = 27; break;
    case 26: 
      var $102=$base;
      var $103=$i;
      var $shr117=$103 >>> 14;
      var $and118=$shr117 & 511;
      var $add_ptr119=(($102+((($and118)*(12))&-1))|0);
      var $cond121 = $add_ptr119;label = 27; break;
    case 27: 
      var $cond121;
      var $104=$ra;
      _luaV_gettable($96, $add_ptr106, $cond121, $104);
      var $105=$ci;
      var $u122=(($105+24)|0);
      var $l123=$u122;
      var $base124=(($l123)|0);
      var $106=HEAP32[(($base124)>>2)];
      $base=$106;
      label = 290; break;
    case 28: 
      var $107=$i;
      var $shr126=$107 >>> 6;
      var $and127=$shr126 & 255;
      $a=$and127;
      var $108=$L_addr;
      var $109=$a;
      var $110=$cl;
      var $upvals128=(($110+16)|0);
      var $arrayidx129=(($upvals128+($109<<2))|0);
      var $111=HEAP32[(($arrayidx129)>>2)];
      var $v130=(($111+8)|0);
      var $112=HEAP32[(($v130)>>2)];
      var $113=$i;
      var $shr131=$113 >>> 23;
      var $and132=$shr131 & 511;
      var $and133=$and132 & 256;
      var $tobool134=(($and133)|0)!=0;
      if ($tobool134) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $114=$k;
      var $115=$i;
      var $shr136=$115 >>> 23;
      var $and137=$shr136 & 511;
      var $and138=$and137 & -257;
      var $add_ptr139=(($114+((($and138)*(12))&-1))|0);
      var $cond145 = $add_ptr139;label = 31; break;
    case 30: 
      var $116=$base;
      var $117=$i;
      var $shr141=$117 >>> 23;
      var $and142=$shr141 & 511;
      var $add_ptr143=(($116+((($and142)*(12))&-1))|0);
      var $cond145 = $add_ptr143;label = 31; break;
    case 31: 
      var $cond145;
      var $118=$i;
      var $shr146=$118 >>> 14;
      var $and147=$shr146 & 511;
      var $and148=$and147 & 256;
      var $tobool149=(($and148)|0)!=0;
      if ($tobool149) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $119=$k;
      var $120=$i;
      var $shr151=$120 >>> 14;
      var $and152=$shr151 & 511;
      var $and153=$and152 & -257;
      var $add_ptr154=(($119+((($and153)*(12))&-1))|0);
      var $cond160 = $add_ptr154;label = 34; break;
    case 33: 
      var $121=$base;
      var $122=$i;
      var $shr156=$122 >>> 14;
      var $and157=$shr156 & 511;
      var $add_ptr158=(($121+((($and157)*(12))&-1))|0);
      var $cond160 = $add_ptr158;label = 34; break;
    case 34: 
      var $cond160;
      _luaV_settable($108, $112, $cond145, $cond160);
      var $123=$ci;
      var $u161=(($123+24)|0);
      var $l162=$u161;
      var $base163=(($l162)|0);
      var $124=HEAP32[(($base163)>>2)];
      $base=$124;
      label = 290; break;
    case 35: 
      var $125=$i;
      var $shr165=$125 >>> 23;
      var $and166=$shr165 & 511;
      var $126=$cl;
      var $upvals167=(($126+16)|0);
      var $arrayidx168=(($upvals167+($and166<<2))|0);
      var $127=HEAP32[(($arrayidx168)>>2)];
      $uv=$127;
      var $128=$ra;
      $io2169=$128;
      var $129=$uv;
      var $v171=(($129+8)|0);
      var $130=HEAP32[(($v171)>>2)];
      $io1170=$130;
      var $131=$io1170;
      var $value_172=(($131)|0);
      var $132=$io2169;
      var $value_173=(($132)|0);
      var $133=$value_172;
      var $134=$value_173;
      HEAP32[(($133)>>2)]=HEAP32[(($134)>>2)];HEAP32[((($133)+(4))>>2)]=HEAP32[((($134)+(4))>>2)];
      var $135=$io2169;
      var $tt_174=(($135+8)|0);
      var $136=HEAP32[(($tt_174)>>2)];
      var $137=$io1170;
      var $tt_175=(($137+8)|0);
      HEAP32[(($tt_175)>>2)]=$136;
      var $138=$ra;
      var $tt_176=(($138+8)|0);
      var $139=HEAP32[(($tt_176)>>2)];
      var $and177=$139 & 64;
      var $tobool178=(($and177)|0)!=0;
      if ($tobool178) { label = 36; break; } else { label = 39; break; }
    case 36: 
      var $140=$ra;
      var $value_180=(($140)|0);
      var $gc181=$value_180;
      var $141=HEAP32[(($gc181)>>2)];
      var $gch=$141;
      var $marked=(($gch+5)|0);
      var $142=HEAP8[($marked)];
      var $conv182=(($142)&255);
      var $and183=$conv182 & 3;
      var $tobool184=(($and183)|0)!=0;
      if ($tobool184) { label = 37; break; } else { label = 39; break; }
    case 37: 
      var $143=$uv;
      var $144=$143;
      var $gch186=$144;
      var $marked187=(($gch186+5)|0);
      var $145=HEAP8[($marked187)];
      var $conv188=(($145)&255);
      var $and189=$conv188 & 4;
      var $tobool190=(($and189)|0)!=0;
      if ($tobool190) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $146=$L_addr;
      var $147=$uv;
      var $148=$147;
      var $149=$ra;
      var $value_192=(($149)|0);
      var $gc193=$value_192;
      var $150=HEAP32[(($gc193)>>2)];
      _luaC_barrier_($146, $148, $150);
      label = 39; break;
    case 39: 
      label = 290; break;
    case 40: 
      var $151=$L_addr;
      var $152=$ra;
      var $153=$i;
      var $shr196=$153 >>> 23;
      var $and197=$shr196 & 511;
      var $and198=$and197 & 256;
      var $tobool199=(($and198)|0)!=0;
      if ($tobool199) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $154=$k;
      var $155=$i;
      var $shr201=$155 >>> 23;
      var $and202=$shr201 & 511;
      var $and203=$and202 & -257;
      var $add_ptr204=(($154+((($and203)*(12))&-1))|0);
      var $cond210 = $add_ptr204;label = 43; break;
    case 42: 
      var $156=$base;
      var $157=$i;
      var $shr206=$157 >>> 23;
      var $and207=$shr206 & 511;
      var $add_ptr208=(($156+((($and207)*(12))&-1))|0);
      var $cond210 = $add_ptr208;label = 43; break;
    case 43: 
      var $cond210;
      var $158=$i;
      var $shr211=$158 >>> 14;
      var $and212=$shr211 & 511;
      var $and213=$and212 & 256;
      var $tobool214=(($and213)|0)!=0;
      if ($tobool214) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $159=$k;
      var $160=$i;
      var $shr216=$160 >>> 14;
      var $and217=$shr216 & 511;
      var $and218=$and217 & -257;
      var $add_ptr219=(($159+((($and218)*(12))&-1))|0);
      var $cond225 = $add_ptr219;label = 46; break;
    case 45: 
      var $161=$base;
      var $162=$i;
      var $shr221=$162 >>> 14;
      var $and222=$shr221 & 511;
      var $add_ptr223=(($161+((($and222)*(12))&-1))|0);
      var $cond225 = $add_ptr223;label = 46; break;
    case 46: 
      var $cond225;
      _luaV_settable($151, $152, $cond210, $cond225);
      var $163=$ci;
      var $u226=(($163+24)|0);
      var $l227=$u226;
      var $base228=(($l227)|0);
      var $164=HEAP32[(($base228)>>2)];
      $base=$164;
      label = 290; break;
    case 47: 
      var $165=$i;
      var $shr231=$165 >>> 23;
      var $and232=$shr231 & 511;
      $b230=$and232;
      var $166=$i;
      var $shr233=$166 >>> 14;
      var $and234=$shr233 & 511;
      $c=$and234;
      var $167=$L_addr;
      var $call=_luaH_new($167);
      $t=$call;
      var $168=$ra;
      $io235=$168;
      var $169=$t;
      var $170=$169;
      var $171=$io235;
      var $value_236=(($171)|0);
      var $gc237=$value_236;
      HEAP32[(($gc237)>>2)]=$170;
      var $172=$io235;
      var $tt_238=(($172+8)|0);
      HEAP32[(($tt_238)>>2)]=69;
      var $173=$b230;
      var $cmp239=(($173)|0)!=0;
      if ($cmp239) { label = 49; break; } else { label = 48; break; }
    case 48: 
      var $174=$c;
      var $cmp242=(($174)|0)!=0;
      if ($cmp242) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $175=$L_addr;
      var $176=$t;
      var $177=$b230;
      var $call245=_luaO_fb2int($177);
      var $178=$c;
      var $call246=_luaO_fb2int($178);
      _luaH_resize($175, $176, $call245, $call246);
      label = 50; break;
    case 50: 
      var $179=$L_addr;
      var $l_G=(($179+12)|0);
      var $180=HEAP32[(($l_G)>>2)];
      var $GCdebt=(($180+12)|0);
      var $181=HEAP32[(($GCdebt)>>2)];
      var $cmp248=(($181)|0) > 0;
      if ($cmp248) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $182=$ra;
      var $add_ptr251=(($182+12)|0);
      var $183=$L_addr;
      var $top=(($183+8)|0);
      HEAP32[(($top)>>2)]=$add_ptr251;
      var $184=$L_addr;
      _luaC_step($184);
      var $185=$ci;
      var $top252=(($185+4)|0);
      var $186=HEAP32[(($top252)>>2)];
      var $187=$L_addr;
      var $top253=(($187+8)|0);
      HEAP32[(($top253)>>2)]=$186;
      label = 52; break;
    case 52: 
      var $188=$ci;
      var $u255=(($188+24)|0);
      var $l256=$u255;
      var $base257=(($l256)|0);
      var $189=HEAP32[(($base257)>>2)];
      $base=$189;
      label = 290; break;
    case 53: 
      var $190=$base;
      var $191=$i;
      var $shr260=$191 >>> 23;
      var $and261=$shr260 & 511;
      var $add_ptr262=(($190+((($and261)*(12))&-1))|0);
      $rb259=$add_ptr262;
      var $192=$rb259;
      $io2263=$192;
      var $193=$ra;
      var $add_ptr265=(($193+12)|0);
      $io1264=$add_ptr265;
      var $194=$io1264;
      var $value_266=(($194)|0);
      var $195=$io2263;
      var $value_267=(($195)|0);
      var $196=$value_266;
      var $197=$value_267;
      HEAP32[(($196)>>2)]=HEAP32[(($197)>>2)];HEAP32[((($196)+(4))>>2)]=HEAP32[((($197)+(4))>>2)];
      var $198=$io2263;
      var $tt_268=(($198+8)|0);
      var $199=HEAP32[(($tt_268)>>2)];
      var $200=$io1264;
      var $tt_269=(($200+8)|0);
      HEAP32[(($tt_269)>>2)]=$199;
      var $201=$L_addr;
      var $202=$rb259;
      var $203=$i;
      var $shr270=$203 >>> 14;
      var $and271=$shr270 & 511;
      var $and272=$and271 & 256;
      var $tobool273=(($and272)|0)!=0;
      if ($tobool273) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $204=$k;
      var $205=$i;
      var $shr275=$205 >>> 14;
      var $and276=$shr275 & 511;
      var $and277=$and276 & -257;
      var $add_ptr278=(($204+((($and277)*(12))&-1))|0);
      var $cond284 = $add_ptr278;label = 56; break;
    case 55: 
      var $206=$base;
      var $207=$i;
      var $shr280=$207 >>> 14;
      var $and281=$shr280 & 511;
      var $add_ptr282=(($206+((($and281)*(12))&-1))|0);
      var $cond284 = $add_ptr282;label = 56; break;
    case 56: 
      var $cond284;
      var $208=$ra;
      _luaV_gettable($201, $202, $cond284, $208);
      var $209=$ci;
      var $u285=(($209+24)|0);
      var $l286=$u285;
      var $base287=(($l286)|0);
      var $210=HEAP32[(($base287)>>2)];
      $base=$210;
      label = 290; break;
    case 57: 
      var $211=$i;
      var $shr290=$211 >>> 23;
      var $and291=$shr290 & 511;
      var $and292=$and291 & 256;
      var $tobool293=(($and292)|0)!=0;
      if ($tobool293) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $212=$k;
      var $213=$i;
      var $shr295=$213 >>> 23;
      var $and296=$shr295 & 511;
      var $and297=$and296 & -257;
      var $add_ptr298=(($212+((($and297)*(12))&-1))|0);
      var $cond304 = $add_ptr298;label = 60; break;
    case 59: 
      var $214=$base;
      var $215=$i;
      var $shr300=$215 >>> 23;
      var $and301=$shr300 & 511;
      var $add_ptr302=(($214+((($and301)*(12))&-1))|0);
      var $cond304 = $add_ptr302;label = 60; break;
    case 60: 
      var $cond304;
      $rb289=$cond304;
      var $216=$i;
      var $shr305=$216 >>> 14;
      var $and306=$shr305 & 511;
      var $and307=$and306 & 256;
      var $tobool308=(($and307)|0)!=0;
      if ($tobool308) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $217=$k;
      var $218=$i;
      var $shr310=$218 >>> 14;
      var $and311=$shr310 & 511;
      var $and312=$and311 & -257;
      var $add_ptr313=(($217+((($and312)*(12))&-1))|0);
      var $cond319 = $add_ptr313;label = 63; break;
    case 62: 
      var $219=$base;
      var $220=$i;
      var $shr315=$220 >>> 14;
      var $and316=$shr315 & 511;
      var $add_ptr317=(($219+((($and316)*(12))&-1))|0);
      var $cond319 = $add_ptr317;label = 63; break;
    case 63: 
      var $cond319;
      $rc=$cond319;
      var $221=$rb289;
      var $tt_320=(($221+8)|0);
      var $222=HEAP32[(($tt_320)>>2)];
      var $cmp321=(($222)|0)==3;
      if ($cmp321) { label = 64; break; } else { label = 66; break; }
    case 64: 
      var $223=$rc;
      var $tt_324=(($223+8)|0);
      var $224=HEAP32[(($tt_324)>>2)];
      var $cmp325=(($224)|0)==3;
      if ($cmp325) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $225=$rb289;
      var $value_328=(($225)|0);
      var $n=$value_328;
      var $226=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $nb=$226;
      var $227=$rc;
      var $value_329=(($227)|0);
      var $n330=$value_329;
      var $228=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n330)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n330)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $nc=$228;
      var $229=$ra;
      $io331=$229;
      var $230=$nb;
      var $231=$nc;
      var $add=($230)+($231);
      var $232=$io331;
      var $value_332=(($232)|0);
      var $n333=$value_332;
      (HEAPF64[(tempDoublePtr)>>3]=$add,HEAP32[(($n333)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n333)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $233=$io331;
      var $tt_334=(($233+8)|0);
      HEAP32[(($tt_334)>>2)]=3;
      label = 67; break;
    case 66: 
      var $234=$L_addr;
      var $235=$ra;
      var $236=$rb289;
      var $237=$rc;
      _luaV_arith($234, $235, $236, $237, 6);
      var $238=$ci;
      var $u335=(($238+24)|0);
      var $l336=$u335;
      var $base337=(($l336)|0);
      var $239=HEAP32[(($base337)>>2)];
      $base=$239;
      label = 67; break;
    case 67: 
      label = 290; break;
    case 68: 
      var $240=$i;
      var $shr341=$240 >>> 23;
      var $and342=$shr341 & 511;
      var $and343=$and342 & 256;
      var $tobool344=(($and343)|0)!=0;
      if ($tobool344) { label = 69; break; } else { label = 70; break; }
    case 69: 
      var $241=$k;
      var $242=$i;
      var $shr346=$242 >>> 23;
      var $and347=$shr346 & 511;
      var $and348=$and347 & -257;
      var $add_ptr349=(($241+((($and348)*(12))&-1))|0);
      var $cond355 = $add_ptr349;label = 71; break;
    case 70: 
      var $243=$base;
      var $244=$i;
      var $shr351=$244 >>> 23;
      var $and352=$shr351 & 511;
      var $add_ptr353=(($243+((($and352)*(12))&-1))|0);
      var $cond355 = $add_ptr353;label = 71; break;
    case 71: 
      var $cond355;
      $rb340=$cond355;
      var $245=$i;
      var $shr357=$245 >>> 14;
      var $and358=$shr357 & 511;
      var $and359=$and358 & 256;
      var $tobool360=(($and359)|0)!=0;
      if ($tobool360) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $246=$k;
      var $247=$i;
      var $shr362=$247 >>> 14;
      var $and363=$shr362 & 511;
      var $and364=$and363 & -257;
      var $add_ptr365=(($246+((($and364)*(12))&-1))|0);
      var $cond371 = $add_ptr365;label = 74; break;
    case 73: 
      var $248=$base;
      var $249=$i;
      var $shr367=$249 >>> 14;
      var $and368=$shr367 & 511;
      var $add_ptr369=(($248+((($and368)*(12))&-1))|0);
      var $cond371 = $add_ptr369;label = 74; break;
    case 74: 
      var $cond371;
      $rc356=$cond371;
      var $250=$rb340;
      var $tt_372=(($250+8)|0);
      var $251=HEAP32[(($tt_372)>>2)];
      var $cmp373=(($251)|0)==3;
      if ($cmp373) { label = 75; break; } else { label = 77; break; }
    case 75: 
      var $252=$rc356;
      var $tt_376=(($252+8)|0);
      var $253=HEAP32[(($tt_376)>>2)];
      var $cmp377=(($253)|0)==3;
      if ($cmp377) { label = 76; break; } else { label = 77; break; }
    case 76: 
      var $254=$rb340;
      var $value_381=(($254)|0);
      var $n382=$value_381;
      var $255=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n382)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n382)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $nb380=$255;
      var $256=$rc356;
      var $value_384=(($256)|0);
      var $n385=$value_384;
      var $257=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n385)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n385)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $nc383=$257;
      var $258=$ra;
      $io386=$258;
      var $259=$nb380;
      var $260=$nc383;
      var $sub=($259)-($260);
      var $261=$io386;
      var $value_387=(($261)|0);
      var $n388=$value_387;
      (HEAPF64[(tempDoublePtr)>>3]=$sub,HEAP32[(($n388)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n388)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $262=$io386;
      var $tt_389=(($262+8)|0);
      HEAP32[(($tt_389)>>2)]=3;
      label = 78; break;
    case 77: 
      var $263=$L_addr;
      var $264=$ra;
      var $265=$rb340;
      var $266=$rc356;
      _luaV_arith($263, $264, $265, $266, 7);
      var $267=$ci;
      var $u391=(($267+24)|0);
      var $l392=$u391;
      var $base393=(($l392)|0);
      var $268=HEAP32[(($base393)>>2)];
      $base=$268;
      label = 78; break;
    case 78: 
      label = 290; break;
    case 79: 
      var $269=$i;
      var $shr397=$269 >>> 23;
      var $and398=$shr397 & 511;
      var $and399=$and398 & 256;
      var $tobool400=(($and399)|0)!=0;
      if ($tobool400) { label = 80; break; } else { label = 81; break; }
    case 80: 
      var $270=$k;
      var $271=$i;
      var $shr402=$271 >>> 23;
      var $and403=$shr402 & 511;
      var $and404=$and403 & -257;
      var $add_ptr405=(($270+((($and404)*(12))&-1))|0);
      var $cond411 = $add_ptr405;label = 82; break;
    case 81: 
      var $272=$base;
      var $273=$i;
      var $shr407=$273 >>> 23;
      var $and408=$shr407 & 511;
      var $add_ptr409=(($272+((($and408)*(12))&-1))|0);
      var $cond411 = $add_ptr409;label = 82; break;
    case 82: 
      var $cond411;
      $rb396=$cond411;
      var $274=$i;
      var $shr413=$274 >>> 14;
      var $and414=$shr413 & 511;
      var $and415=$and414 & 256;
      var $tobool416=(($and415)|0)!=0;
      if ($tobool416) { label = 83; break; } else { label = 84; break; }
    case 83: 
      var $275=$k;
      var $276=$i;
      var $shr418=$276 >>> 14;
      var $and419=$shr418 & 511;
      var $and420=$and419 & -257;
      var $add_ptr421=(($275+((($and420)*(12))&-1))|0);
      var $cond427 = $add_ptr421;label = 85; break;
    case 84: 
      var $277=$base;
      var $278=$i;
      var $shr423=$278 >>> 14;
      var $and424=$shr423 & 511;
      var $add_ptr425=(($277+((($and424)*(12))&-1))|0);
      var $cond427 = $add_ptr425;label = 85; break;
    case 85: 
      var $cond427;
      $rc412=$cond427;
      var $279=$rb396;
      var $tt_428=(($279+8)|0);
      var $280=HEAP32[(($tt_428)>>2)];
      var $cmp429=(($280)|0)==3;
      if ($cmp429) { label = 86; break; } else { label = 88; break; }
    case 86: 
      var $281=$rc412;
      var $tt_432=(($281+8)|0);
      var $282=HEAP32[(($tt_432)>>2)];
      var $cmp433=(($282)|0)==3;
      if ($cmp433) { label = 87; break; } else { label = 88; break; }
    case 87: 
      var $283=$rb396;
      var $value_437=(($283)|0);
      var $n438=$value_437;
      var $284=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n438)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n438)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $nb436=$284;
      var $285=$rc412;
      var $value_440=(($285)|0);
      var $n441=$value_440;
      var $286=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n441)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n441)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $nc439=$286;
      var $287=$ra;
      $io442=$287;
      var $288=$nb436;
      var $289=$nc439;
      var $mul=($288)*($289);
      var $290=$io442;
      var $value_443=(($290)|0);
      var $n444=$value_443;
      (HEAPF64[(tempDoublePtr)>>3]=$mul,HEAP32[(($n444)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n444)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $291=$io442;
      var $tt_445=(($291+8)|0);
      HEAP32[(($tt_445)>>2)]=3;
      label = 89; break;
    case 88: 
      var $292=$L_addr;
      var $293=$ra;
      var $294=$rb396;
      var $295=$rc412;
      _luaV_arith($292, $293, $294, $295, 8);
      var $296=$ci;
      var $u447=(($296+24)|0);
      var $l448=$u447;
      var $base449=(($l448)|0);
      var $297=HEAP32[(($base449)>>2)];
      $base=$297;
      label = 89; break;
    case 89: 
      label = 290; break;
    case 90: 
      var $298=$i;
      var $shr453=$298 >>> 23;
      var $and454=$shr453 & 511;
      var $and455=$and454 & 256;
      var $tobool456=(($and455)|0)!=0;
      if ($tobool456) { label = 91; break; } else { label = 92; break; }
    case 91: 
      var $299=$k;
      var $300=$i;
      var $shr458=$300 >>> 23;
      var $and459=$shr458 & 511;
      var $and460=$and459 & -257;
      var $add_ptr461=(($299+((($and460)*(12))&-1))|0);
      var $cond467 = $add_ptr461;label = 93; break;
    case 92: 
      var $301=$base;
      var $302=$i;
      var $shr463=$302 >>> 23;
      var $and464=$shr463 & 511;
      var $add_ptr465=(($301+((($and464)*(12))&-1))|0);
      var $cond467 = $add_ptr465;label = 93; break;
    case 93: 
      var $cond467;
      $rb452=$cond467;
      var $303=$i;
      var $shr469=$303 >>> 14;
      var $and470=$shr469 & 511;
      var $and471=$and470 & 256;
      var $tobool472=(($and471)|0)!=0;
      if ($tobool472) { label = 94; break; } else { label = 95; break; }
    case 94: 
      var $304=$k;
      var $305=$i;
      var $shr474=$305 >>> 14;
      var $and475=$shr474 & 511;
      var $and476=$and475 & -257;
      var $add_ptr477=(($304+((($and476)*(12))&-1))|0);
      var $cond483 = $add_ptr477;label = 96; break;
    case 95: 
      var $306=$base;
      var $307=$i;
      var $shr479=$307 >>> 14;
      var $and480=$shr479 & 511;
      var $add_ptr481=(($306+((($and480)*(12))&-1))|0);
      var $cond483 = $add_ptr481;label = 96; break;
    case 96: 
      var $cond483;
      $rc468=$cond483;
      var $308=$rb452;
      var $tt_484=(($308+8)|0);
      var $309=HEAP32[(($tt_484)>>2)];
      var $cmp485=(($309)|0)==3;
      if ($cmp485) { label = 97; break; } else { label = 99; break; }
    case 97: 
      var $310=$rc468;
      var $tt_488=(($310+8)|0);
      var $311=HEAP32[(($tt_488)>>2)];
      var $cmp489=(($311)|0)==3;
      if ($cmp489) { label = 98; break; } else { label = 99; break; }
    case 98: 
      var $312=$rb452;
      var $value_493=(($312)|0);
      var $n494=$value_493;
      var $313=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n494)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n494)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $nb492=$313;
      var $314=$rc468;
      var $value_496=(($314)|0);
      var $n497=$value_496;
      var $315=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n497)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n497)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $nc495=$315;
      var $316=$ra;
      $io498=$316;
      var $317=$nb492;
      var $318=$nc495;
      var $div=($317)/($318);
      var $319=$io498;
      var $value_499=(($319)|0);
      var $n500=$value_499;
      (HEAPF64[(tempDoublePtr)>>3]=$div,HEAP32[(($n500)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n500)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $320=$io498;
      var $tt_501=(($320+8)|0);
      HEAP32[(($tt_501)>>2)]=3;
      label = 100; break;
    case 99: 
      var $321=$L_addr;
      var $322=$ra;
      var $323=$rb452;
      var $324=$rc468;
      _luaV_arith($321, $322, $323, $324, 9);
      var $325=$ci;
      var $u503=(($325+24)|0);
      var $l504=$u503;
      var $base505=(($l504)|0);
      var $326=HEAP32[(($base505)>>2)];
      $base=$326;
      label = 100; break;
    case 100: 
      label = 290; break;
    case 101: 
      var $327=$i;
      var $shr509=$327 >>> 23;
      var $and510=$shr509 & 511;
      var $and511=$and510 & 256;
      var $tobool512=(($and511)|0)!=0;
      if ($tobool512) { label = 102; break; } else { label = 103; break; }
    case 102: 
      var $328=$k;
      var $329=$i;
      var $shr514=$329 >>> 23;
      var $and515=$shr514 & 511;
      var $and516=$and515 & -257;
      var $add_ptr517=(($328+((($and516)*(12))&-1))|0);
      var $cond523 = $add_ptr517;label = 104; break;
    case 103: 
      var $330=$base;
      var $331=$i;
      var $shr519=$331 >>> 23;
      var $and520=$shr519 & 511;
      var $add_ptr521=(($330+((($and520)*(12))&-1))|0);
      var $cond523 = $add_ptr521;label = 104; break;
    case 104: 
      var $cond523;
      $rb508=$cond523;
      var $332=$i;
      var $shr525=$332 >>> 14;
      var $and526=$shr525 & 511;
      var $and527=$and526 & 256;
      var $tobool528=(($and527)|0)!=0;
      if ($tobool528) { label = 105; break; } else { label = 106; break; }
    case 105: 
      var $333=$k;
      var $334=$i;
      var $shr530=$334 >>> 14;
      var $and531=$shr530 & 511;
      var $and532=$and531 & -257;
      var $add_ptr533=(($333+((($and532)*(12))&-1))|0);
      var $cond539 = $add_ptr533;label = 107; break;
    case 106: 
      var $335=$base;
      var $336=$i;
      var $shr535=$336 >>> 14;
      var $and536=$shr535 & 511;
      var $add_ptr537=(($335+((($and536)*(12))&-1))|0);
      var $cond539 = $add_ptr537;label = 107; break;
    case 107: 
      var $cond539;
      $rc524=$cond539;
      var $337=$rb508;
      var $tt_540=(($337+8)|0);
      var $338=HEAP32[(($tt_540)>>2)];
      var $cmp541=(($338)|0)==3;
      if ($cmp541) { label = 108; break; } else { label = 110; break; }
    case 108: 
      var $339=$rc524;
      var $tt_544=(($339+8)|0);
      var $340=HEAP32[(($tt_544)>>2)];
      var $cmp545=(($340)|0)==3;
      if ($cmp545) { label = 109; break; } else { label = 110; break; }
    case 109: 
      var $341=$rb508;
      var $value_549=(($341)|0);
      var $n550=$value_549;
      var $342=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n550)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n550)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $nb548=$342;
      var $343=$rc524;
      var $value_552=(($343)|0);
      var $n553=$value_552;
      var $344=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n553)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n553)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $nc551=$344;
      var $345=$ra;
      $io554=$345;
      var $346=$nb548;
      var $347=$nb548;
      var $348=$nc551;
      var $div555=($347)/($348);
      var $call556=Math.floor($div555);
      var $349=$nc551;
      var $mul557=($call556)*($349);
      var $sub558=($346)-($mul557);
      var $350=$io554;
      var $value_559=(($350)|0);
      var $n560=$value_559;
      (HEAPF64[(tempDoublePtr)>>3]=$sub558,HEAP32[(($n560)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n560)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $351=$io554;
      var $tt_561=(($351+8)|0);
      HEAP32[(($tt_561)>>2)]=3;
      label = 111; break;
    case 110: 
      var $352=$L_addr;
      var $353=$ra;
      var $354=$rb508;
      var $355=$rc524;
      _luaV_arith($352, $353, $354, $355, 10);
      var $356=$ci;
      var $u563=(($356+24)|0);
      var $l564=$u563;
      var $base565=(($l564)|0);
      var $357=HEAP32[(($base565)>>2)];
      $base=$357;
      label = 111; break;
    case 111: 
      label = 290; break;
    case 112: 
      var $358=$i;
      var $shr569=$358 >>> 23;
      var $and570=$shr569 & 511;
      var $and571=$and570 & 256;
      var $tobool572=(($and571)|0)!=0;
      if ($tobool572) { label = 113; break; } else { label = 114; break; }
    case 113: 
      var $359=$k;
      var $360=$i;
      var $shr574=$360 >>> 23;
      var $and575=$shr574 & 511;
      var $and576=$and575 & -257;
      var $add_ptr577=(($359+((($and576)*(12))&-1))|0);
      var $cond583 = $add_ptr577;label = 115; break;
    case 114: 
      var $361=$base;
      var $362=$i;
      var $shr579=$362 >>> 23;
      var $and580=$shr579 & 511;
      var $add_ptr581=(($361+((($and580)*(12))&-1))|0);
      var $cond583 = $add_ptr581;label = 115; break;
    case 115: 
      var $cond583;
      $rb568=$cond583;
      var $363=$i;
      var $shr585=$363 >>> 14;
      var $and586=$shr585 & 511;
      var $and587=$and586 & 256;
      var $tobool588=(($and587)|0)!=0;
      if ($tobool588) { label = 116; break; } else { label = 117; break; }
    case 116: 
      var $364=$k;
      var $365=$i;
      var $shr590=$365 >>> 14;
      var $and591=$shr590 & 511;
      var $and592=$and591 & -257;
      var $add_ptr593=(($364+((($and592)*(12))&-1))|0);
      var $cond599 = $add_ptr593;label = 118; break;
    case 117: 
      var $366=$base;
      var $367=$i;
      var $shr595=$367 >>> 14;
      var $and596=$shr595 & 511;
      var $add_ptr597=(($366+((($and596)*(12))&-1))|0);
      var $cond599 = $add_ptr597;label = 118; break;
    case 118: 
      var $cond599;
      $rc584=$cond599;
      var $368=$rb568;
      var $tt_600=(($368+8)|0);
      var $369=HEAP32[(($tt_600)>>2)];
      var $cmp601=(($369)|0)==3;
      if ($cmp601) { label = 119; break; } else { label = 121; break; }
    case 119: 
      var $370=$rc584;
      var $tt_604=(($370+8)|0);
      var $371=HEAP32[(($tt_604)>>2)];
      var $cmp605=(($371)|0)==3;
      if ($cmp605) { label = 120; break; } else { label = 121; break; }
    case 120: 
      var $372=$rb568;
      var $value_609=(($372)|0);
      var $n610=$value_609;
      var $373=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n610)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n610)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $nb608=$373;
      var $374=$rc584;
      var $value_612=(($374)|0);
      var $n613=$value_612;
      var $375=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n613)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n613)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $nc611=$375;
      var $376=$ra;
      $io614=$376;
      var $377=$nb608;
      var $378=$nc611;
      var $379=Math.pow($377, $378);
      var $380=$io614;
      var $value_615=(($380)|0);
      var $n616=$value_615;
      (HEAPF64[(tempDoublePtr)>>3]=$379,HEAP32[(($n616)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n616)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $381=$io614;
      var $tt_617=(($381+8)|0);
      HEAP32[(($tt_617)>>2)]=3;
      label = 122; break;
    case 121: 
      var $382=$L_addr;
      var $383=$ra;
      var $384=$rb568;
      var $385=$rc584;
      _luaV_arith($382, $383, $384, $385, 11);
      var $386=$ci;
      var $u619=(($386+24)|0);
      var $l620=$u619;
      var $base621=(($l620)|0);
      var $387=HEAP32[(($base621)>>2)];
      $base=$387;
      label = 122; break;
    case 122: 
      label = 290; break;
    case 123: 
      var $388=$base;
      var $389=$i;
      var $shr625=$389 >>> 23;
      var $and626=$shr625 & 511;
      var $add_ptr627=(($388+((($and626)*(12))&-1))|0);
      $rb624=$add_ptr627;
      var $390=$rb624;
      var $tt_628=(($390+8)|0);
      var $391=HEAP32[(($tt_628)>>2)];
      var $cmp629=(($391)|0)==3;
      if ($cmp629) { label = 124; break; } else { label = 125; break; }
    case 124: 
      var $392=$rb624;
      var $value_633=(($392)|0);
      var $n634=$value_633;
      var $393=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n634)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n634)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $nb632=$393;
      var $394=$ra;
      $io635=$394;
      var $395=$nb632;
      var $sub636=(-$395);
      var $396=$io635;
      var $value_637=(($396)|0);
      var $n638=$value_637;
      (HEAPF64[(tempDoublePtr)>>3]=$sub636,HEAP32[(($n638)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n638)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $397=$io635;
      var $tt_639=(($397+8)|0);
      HEAP32[(($tt_639)>>2)]=3;
      label = 126; break;
    case 125: 
      var $398=$L_addr;
      var $399=$ra;
      var $400=$rb624;
      var $401=$rb624;
      _luaV_arith($398, $399, $400, $401, 12);
      var $402=$ci;
      var $u641=(($402+24)|0);
      var $l642=$u641;
      var $base643=(($l642)|0);
      var $403=HEAP32[(($base643)>>2)];
      $base=$403;
      label = 126; break;
    case 126: 
      label = 290; break;
    case 127: 
      var $404=$base;
      var $405=$i;
      var $shr647=$405 >>> 23;
      var $and648=$shr647 & 511;
      var $add_ptr649=(($404+((($and648)*(12))&-1))|0);
      $rb646=$add_ptr649;
      var $406=$rb646;
      var $tt_650=(($406+8)|0);
      var $407=HEAP32[(($tt_650)>>2)];
      var $cmp651=(($407)|0)==0;
      if ($cmp651) { var $413 = 1;label = 131; break; } else { label = 128; break; }
    case 128: 
      var $408=$rb646;
      var $tt_653=(($408+8)|0);
      var $409=HEAP32[(($tt_653)>>2)];
      var $cmp654=(($409)|0)==1;
      if ($cmp654) { label = 129; break; } else { var $412 = 0;label = 130; break; }
    case 129: 
      var $410=$rb646;
      var $value_656=(($410)|0);
      var $b657=$value_656;
      var $411=HEAP32[(($b657)>>2)];
      var $cmp658=(($411)|0)==0;
      var $412 = $cmp658;label = 130; break;
    case 130: 
      var $412;
      var $413 = $412;label = 131; break;
    case 131: 
      var $413;
      var $lor_ext=(($413)&1);
      $res=$lor_ext;
      var $414=$ra;
      $io660=$414;
      var $415=$res;
      var $416=$io660;
      var $value_661=(($416)|0);
      var $b662=$value_661;
      HEAP32[(($b662)>>2)]=$415;
      var $417=$io660;
      var $tt_663=(($417+8)|0);
      HEAP32[(($tt_663)>>2)]=1;
      label = 290; break;
    case 132: 
      var $418=$L_addr;
      var $419=$ra;
      var $420=$base;
      var $421=$i;
      var $shr665=$421 >>> 23;
      var $and666=$shr665 & 511;
      var $add_ptr667=(($420+((($and666)*(12))&-1))|0);
      _luaV_objlen($418, $419, $add_ptr667);
      var $422=$ci;
      var $u668=(($422+24)|0);
      var $l669=$u668;
      var $base670=(($l669)|0);
      var $423=HEAP32[(($base670)>>2)];
      $base=$423;
      label = 290; break;
    case 133: 
      var $424=$i;
      var $shr673=$424 >>> 23;
      var $and674=$shr673 & 511;
      $b672=$and674;
      var $425=$i;
      var $shr676=$425 >>> 14;
      var $and677=$shr676 & 511;
      $c675=$and677;
      var $426=$base;
      var $427=$c675;
      var $add_ptr679=(($426+((($427)*(12))&-1))|0);
      var $add_ptr680=(($add_ptr679+12)|0);
      var $428=$L_addr;
      var $top681=(($428+8)|0);
      HEAP32[(($top681)>>2)]=$add_ptr680;
      var $429=$L_addr;
      var $430=$c675;
      var $431=$b672;
      var $sub682=((($430)-($431))|0);
      var $add683=((($sub682)+(1))|0);
      _luaV_concat($429, $add683);
      var $432=$ci;
      var $u684=(($432+24)|0);
      var $l685=$u684;
      var $base686=(($l685)|0);
      var $433=HEAP32[(($base686)>>2)];
      $base=$433;
      var $434=$base;
      var $435=$i;
      var $shr687=$435 >>> 6;
      var $and688=$shr687 & 255;
      var $add_ptr689=(($434+((($and688)*(12))&-1))|0);
      $ra=$add_ptr689;
      var $436=$b672;
      var $437=$base;
      var $add_ptr690=(($437+((($436)*(12))&-1))|0);
      $rb678=$add_ptr690;
      var $438=$rb678;
      $io2691=$438;
      var $439=$ra;
      $io1692=$439;
      var $440=$io1692;
      var $value_693=(($440)|0);
      var $441=$io2691;
      var $value_694=(($441)|0);
      var $442=$value_693;
      var $443=$value_694;
      HEAP32[(($442)>>2)]=HEAP32[(($443)>>2)];HEAP32[((($442)+(4))>>2)]=HEAP32[((($443)+(4))>>2)];
      var $444=$io2691;
      var $tt_695=(($444+8)|0);
      var $445=HEAP32[(($tt_695)>>2)];
      var $446=$io1692;
      var $tt_696=(($446+8)|0);
      HEAP32[(($tt_696)>>2)]=$445;
      var $447=$L_addr;
      var $l_G697=(($447+12)|0);
      var $448=HEAP32[(($l_G697)>>2)];
      var $GCdebt698=(($448+12)|0);
      var $449=HEAP32[(($GCdebt698)>>2)];
      var $cmp699=(($449)|0) > 0;
      if ($cmp699) { label = 134; break; } else { label = 138; break; }
    case 134: 
      var $450=$ra;
      var $451=$rb678;
      var $cmp702=(($450)>>>0) >= (($451)>>>0);
      if ($cmp702) { label = 135; break; } else { label = 136; break; }
    case 135: 
      var $452=$ra;
      var $add_ptr705=(($452+12)|0);
      var $cond708 = $add_ptr705;label = 137; break;
    case 136: 
      var $453=$rb678;
      var $cond708 = $453;label = 137; break;
    case 137: 
      var $cond708;
      var $454=$L_addr;
      var $top709=(($454+8)|0);
      HEAP32[(($top709)>>2)]=$cond708;
      var $455=$L_addr;
      _luaC_step($455);
      var $456=$ci;
      var $top710=(($456+4)|0);
      var $457=HEAP32[(($top710)>>2)];
      var $458=$L_addr;
      var $top711=(($458+8)|0);
      HEAP32[(($top711)>>2)]=$457;
      label = 138; break;
    case 138: 
      var $459=$ci;
      var $u713=(($459+24)|0);
      var $l714=$u713;
      var $base715=(($l714)|0);
      var $460=HEAP32[(($base715)>>2)];
      $base=$460;
      var $461=$ci;
      var $top716=(($461+4)|0);
      var $462=HEAP32[(($top716)>>2)];
      var $463=$L_addr;
      var $top717=(($463+8)|0);
      HEAP32[(($top717)>>2)]=$462;
      label = 290; break;
    case 139: 
      var $464=$i;
      var $shr720=$464 >>> 6;
      var $and721=$shr720 & 255;
      $a719=$and721;
      var $465=$a719;
      var $cmp722=(($465)|0) > 0;
      if ($cmp722) { label = 140; break; } else { label = 141; break; }
    case 140: 
      var $466=$L_addr;
      var $467=$ci;
      var $u725=(($467+24)|0);
      var $l726=$u725;
      var $base727=(($l726)|0);
      var $468=HEAP32[(($base727)>>2)];
      var $469=$a719;
      var $add_ptr728=(($468+((($469)*(12))&-1))|0);
      var $add_ptr729=((($add_ptr728)-(12))|0);
      _luaF_close($466, $add_ptr729);
      label = 141; break;
    case 141: 
      var $470=$i;
      var $shr731=$470 >>> 14;
      var $and732=$shr731 & 262143;
      var $sub733=((($and732)-(131071))|0);
      var $add734=(($sub733)|0);
      var $471=$ci;
      var $u735=(($471+24)|0);
      var $l736=$u735;
      var $savedpc737=(($l736+4)|0);
      var $472=HEAP32[(($savedpc737)>>2)];
      var $add_ptr738=(($472+($add734<<2))|0);
      HEAP32[(($savedpc737)>>2)]=$add_ptr738;
      label = 290; break;
    case 142: 
      var $473=$i;
      var $shr741=$473 >>> 23;
      var $and742=$shr741 & 511;
      var $and743=$and742 & 256;
      var $tobool744=(($and743)|0)!=0;
      if ($tobool744) { label = 143; break; } else { label = 144; break; }
    case 143: 
      var $474=$k;
      var $475=$i;
      var $shr746=$475 >>> 23;
      var $and747=$shr746 & 511;
      var $and748=$and747 & -257;
      var $add_ptr749=(($474+((($and748)*(12))&-1))|0);
      var $cond755 = $add_ptr749;label = 145; break;
    case 144: 
      var $476=$base;
      var $477=$i;
      var $shr751=$477 >>> 23;
      var $and752=$shr751 & 511;
      var $add_ptr753=(($476+((($and752)*(12))&-1))|0);
      var $cond755 = $add_ptr753;label = 145; break;
    case 145: 
      var $cond755;
      $rb740=$cond755;
      var $478=$i;
      var $shr757=$478 >>> 14;
      var $and758=$shr757 & 511;
      var $and759=$and758 & 256;
      var $tobool760=(($and759)|0)!=0;
      if ($tobool760) { label = 146; break; } else { label = 147; break; }
    case 146: 
      var $479=$k;
      var $480=$i;
      var $shr762=$480 >>> 14;
      var $and763=$shr762 & 511;
      var $and764=$and763 & -257;
      var $add_ptr765=(($479+((($and764)*(12))&-1))|0);
      var $cond771 = $add_ptr765;label = 148; break;
    case 147: 
      var $481=$base;
      var $482=$i;
      var $shr767=$482 >>> 14;
      var $and768=$shr767 & 511;
      var $add_ptr769=(($481+((($and768)*(12))&-1))|0);
      var $cond771 = $add_ptr769;label = 148; break;
    case 148: 
      var $cond771;
      $rc756=$cond771;
      var $483=$rb740;
      var $tt_772=(($483+8)|0);
      var $484=HEAP32[(($tt_772)>>2)];
      var $485=$rc756;
      var $tt_773=(($485+8)|0);
      var $486=HEAP32[(($tt_773)>>2)];
      var $cmp774=(($484)|0)==(($486)|0);
      if ($cmp774) { label = 149; break; } else { var $490 = 0;label = 150; break; }
    case 149: 
      var $487=$L_addr;
      var $488=$rb740;
      var $489=$rc756;
      var $call777=_luaV_equalobj_($487, $488, $489);
      var $tobool778=(($call777)|0)!=0;
      var $490 = $tobool778;label = 150; break;
    case 150: 
      var $490;
      var $land_ext=(($490)&1);
      var $491=$i;
      var $shr780=$491 >>> 6;
      var $and781=$shr780 & 255;
      var $cmp782=(($land_ext)|0)!=(($and781)|0);
      if ($cmp782) { label = 151; break; } else { label = 152; break; }
    case 151: 
      var $492=$ci;
      var $u785=(($492+24)|0);
      var $l786=$u785;
      var $savedpc787=(($l786+4)|0);
      var $493=HEAP32[(($savedpc787)>>2)];
      var $incdec_ptr788=(($493+4)|0);
      HEAP32[(($savedpc787)>>2)]=$incdec_ptr788;
      label = 155; break;
    case 152: 
      var $494=$ci;
      var $u790=(($494+24)|0);
      var $l791=$u790;
      var $savedpc792=(($l791+4)|0);
      var $495=HEAP32[(($savedpc792)>>2)];
      var $496=HEAP32[(($495)>>2)];
      $i=$496;
      var $497=$i;
      var $shr794=$497 >>> 6;
      var $and795=$shr794 & 255;
      $a793=$and795;
      var $498=$a793;
      var $cmp796=(($498)|0) > 0;
      if ($cmp796) { label = 153; break; } else { label = 154; break; }
    case 153: 
      var $499=$L_addr;
      var $500=$ci;
      var $u799=(($500+24)|0);
      var $l800=$u799;
      var $base801=(($l800)|0);
      var $501=HEAP32[(($base801)>>2)];
      var $502=$a793;
      var $add_ptr802=(($501+((($502)*(12))&-1))|0);
      var $add_ptr803=((($add_ptr802)-(12))|0);
      _luaF_close($499, $add_ptr803);
      label = 154; break;
    case 154: 
      var $503=$i;
      var $shr805=$503 >>> 14;
      var $and806=$shr805 & 262143;
      var $sub807=((($and806)-(131071))|0);
      var $add808=((($sub807)+(1))|0);
      var $504=$ci;
      var $u809=(($504+24)|0);
      var $l810=$u809;
      var $savedpc811=(($l810+4)|0);
      var $505=HEAP32[(($savedpc811)>>2)];
      var $add_ptr812=(($505+($add808<<2))|0);
      HEAP32[(($savedpc811)>>2)]=$add_ptr812;
      label = 155; break;
    case 155: 
      var $506=$ci;
      var $u814=(($506+24)|0);
      var $l815=$u814;
      var $base816=(($l815)|0);
      var $507=HEAP32[(($base816)>>2)];
      $base=$507;
      label = 290; break;
    case 156: 
      var $508=$L_addr;
      var $509=$i;
      var $shr818=$509 >>> 23;
      var $and819=$shr818 & 511;
      var $and820=$and819 & 256;
      var $tobool821=(($and820)|0)!=0;
      if ($tobool821) { label = 157; break; } else { label = 158; break; }
    case 157: 
      var $510=$k;
      var $511=$i;
      var $shr823=$511 >>> 23;
      var $and824=$shr823 & 511;
      var $and825=$and824 & -257;
      var $add_ptr826=(($510+((($and825)*(12))&-1))|0);
      var $cond832 = $add_ptr826;label = 159; break;
    case 158: 
      var $512=$base;
      var $513=$i;
      var $shr828=$513 >>> 23;
      var $and829=$shr828 & 511;
      var $add_ptr830=(($512+((($and829)*(12))&-1))|0);
      var $cond832 = $add_ptr830;label = 159; break;
    case 159: 
      var $cond832;
      var $514=$i;
      var $shr833=$514 >>> 14;
      var $and834=$shr833 & 511;
      var $and835=$and834 & 256;
      var $tobool836=(($and835)|0)!=0;
      if ($tobool836) { label = 160; break; } else { label = 161; break; }
    case 160: 
      var $515=$k;
      var $516=$i;
      var $shr838=$516 >>> 14;
      var $and839=$shr838 & 511;
      var $and840=$and839 & -257;
      var $add_ptr841=(($515+((($and840)*(12))&-1))|0);
      var $cond847 = $add_ptr841;label = 162; break;
    case 161: 
      var $517=$base;
      var $518=$i;
      var $shr843=$518 >>> 14;
      var $and844=$shr843 & 511;
      var $add_ptr845=(($517+((($and844)*(12))&-1))|0);
      var $cond847 = $add_ptr845;label = 162; break;
    case 162: 
      var $cond847;
      var $call848=_luaV_lessthan($508, $cond832, $cond847);
      var $519=$i;
      var $shr849=$519 >>> 6;
      var $and850=$shr849 & 255;
      var $cmp851=(($call848)|0)!=(($and850)|0);
      if ($cmp851) { label = 163; break; } else { label = 164; break; }
    case 163: 
      var $520=$ci;
      var $u854=(($520+24)|0);
      var $l855=$u854;
      var $savedpc856=(($l855+4)|0);
      var $521=HEAP32[(($savedpc856)>>2)];
      var $incdec_ptr857=(($521+4)|0);
      HEAP32[(($savedpc856)>>2)]=$incdec_ptr857;
      label = 167; break;
    case 164: 
      var $522=$ci;
      var $u859=(($522+24)|0);
      var $l860=$u859;
      var $savedpc861=(($l860+4)|0);
      var $523=HEAP32[(($savedpc861)>>2)];
      var $524=HEAP32[(($523)>>2)];
      $i=$524;
      var $525=$i;
      var $shr863=$525 >>> 6;
      var $and864=$shr863 & 255;
      $a862=$and864;
      var $526=$a862;
      var $cmp865=(($526)|0) > 0;
      if ($cmp865) { label = 165; break; } else { label = 166; break; }
    case 165: 
      var $527=$L_addr;
      var $528=$ci;
      var $u868=(($528+24)|0);
      var $l869=$u868;
      var $base870=(($l869)|0);
      var $529=HEAP32[(($base870)>>2)];
      var $530=$a862;
      var $add_ptr871=(($529+((($530)*(12))&-1))|0);
      var $add_ptr872=((($add_ptr871)-(12))|0);
      _luaF_close($527, $add_ptr872);
      label = 166; break;
    case 166: 
      var $531=$i;
      var $shr874=$531 >>> 14;
      var $and875=$shr874 & 262143;
      var $sub876=((($and875)-(131071))|0);
      var $add877=((($sub876)+(1))|0);
      var $532=$ci;
      var $u878=(($532+24)|0);
      var $l879=$u878;
      var $savedpc880=(($l879+4)|0);
      var $533=HEAP32[(($savedpc880)>>2)];
      var $add_ptr881=(($533+($add877<<2))|0);
      HEAP32[(($savedpc880)>>2)]=$add_ptr881;
      label = 167; break;
    case 167: 
      var $534=$ci;
      var $u883=(($534+24)|0);
      var $l884=$u883;
      var $base885=(($l884)|0);
      var $535=HEAP32[(($base885)>>2)];
      $base=$535;
      label = 290; break;
    case 168: 
      var $536=$L_addr;
      var $537=$i;
      var $shr887=$537 >>> 23;
      var $and888=$shr887 & 511;
      var $and889=$and888 & 256;
      var $tobool890=(($and889)|0)!=0;
      if ($tobool890) { label = 169; break; } else { label = 170; break; }
    case 169: 
      var $538=$k;
      var $539=$i;
      var $shr892=$539 >>> 23;
      var $and893=$shr892 & 511;
      var $and894=$and893 & -257;
      var $add_ptr895=(($538+((($and894)*(12))&-1))|0);
      var $cond901 = $add_ptr895;label = 171; break;
    case 170: 
      var $540=$base;
      var $541=$i;
      var $shr897=$541 >>> 23;
      var $and898=$shr897 & 511;
      var $add_ptr899=(($540+((($and898)*(12))&-1))|0);
      var $cond901 = $add_ptr899;label = 171; break;
    case 171: 
      var $cond901;
      var $542=$i;
      var $shr902=$542 >>> 14;
      var $and903=$shr902 & 511;
      var $and904=$and903 & 256;
      var $tobool905=(($and904)|0)!=0;
      if ($tobool905) { label = 172; break; } else { label = 173; break; }
    case 172: 
      var $543=$k;
      var $544=$i;
      var $shr907=$544 >>> 14;
      var $and908=$shr907 & 511;
      var $and909=$and908 & -257;
      var $add_ptr910=(($543+((($and909)*(12))&-1))|0);
      var $cond916 = $add_ptr910;label = 174; break;
    case 173: 
      var $545=$base;
      var $546=$i;
      var $shr912=$546 >>> 14;
      var $and913=$shr912 & 511;
      var $add_ptr914=(($545+((($and913)*(12))&-1))|0);
      var $cond916 = $add_ptr914;label = 174; break;
    case 174: 
      var $cond916;
      var $call917=_luaV_lessequal($536, $cond901, $cond916);
      var $547=$i;
      var $shr918=$547 >>> 6;
      var $and919=$shr918 & 255;
      var $cmp920=(($call917)|0)!=(($and919)|0);
      if ($cmp920) { label = 175; break; } else { label = 176; break; }
    case 175: 
      var $548=$ci;
      var $u923=(($548+24)|0);
      var $l924=$u923;
      var $savedpc925=(($l924+4)|0);
      var $549=HEAP32[(($savedpc925)>>2)];
      var $incdec_ptr926=(($549+4)|0);
      HEAP32[(($savedpc925)>>2)]=$incdec_ptr926;
      label = 179; break;
    case 176: 
      var $550=$ci;
      var $u928=(($550+24)|0);
      var $l929=$u928;
      var $savedpc930=(($l929+4)|0);
      var $551=HEAP32[(($savedpc930)>>2)];
      var $552=HEAP32[(($551)>>2)];
      $i=$552;
      var $553=$i;
      var $shr932=$553 >>> 6;
      var $and933=$shr932 & 255;
      $a931=$and933;
      var $554=$a931;
      var $cmp934=(($554)|0) > 0;
      if ($cmp934) { label = 177; break; } else { label = 178; break; }
    case 177: 
      var $555=$L_addr;
      var $556=$ci;
      var $u937=(($556+24)|0);
      var $l938=$u937;
      var $base939=(($l938)|0);
      var $557=HEAP32[(($base939)>>2)];
      var $558=$a931;
      var $add_ptr940=(($557+((($558)*(12))&-1))|0);
      var $add_ptr941=((($add_ptr940)-(12))|0);
      _luaF_close($555, $add_ptr941);
      label = 178; break;
    case 178: 
      var $559=$i;
      var $shr943=$559 >>> 14;
      var $and944=$shr943 & 262143;
      var $sub945=((($and944)-(131071))|0);
      var $add946=((($sub945)+(1))|0);
      var $560=$ci;
      var $u947=(($560+24)|0);
      var $l948=$u947;
      var $savedpc949=(($l948+4)|0);
      var $561=HEAP32[(($savedpc949)>>2)];
      var $add_ptr950=(($561+($add946<<2))|0);
      HEAP32[(($savedpc949)>>2)]=$add_ptr950;
      label = 179; break;
    case 179: 
      var $562=$ci;
      var $u952=(($562+24)|0);
      var $l953=$u952;
      var $base954=(($l953)|0);
      var $563=HEAP32[(($base954)>>2)];
      $base=$563;
      label = 290; break;
    case 180: 
      var $564=$i;
      var $shr956=$564 >>> 14;
      var $and957=$shr956 & 511;
      var $tobool958=(($and957)|0)!=0;
      if ($tobool958) { label = 181; break; } else { label = 184; break; }
    case 181: 
      var $565=$ra;
      var $tt_960=(($565+8)|0);
      var $566=HEAP32[(($tt_960)>>2)];
      var $cmp961=(($566)|0)==0;
      if ($cmp961) { label = 187; break; } else { label = 182; break; }
    case 182: 
      var $567=$ra;
      var $tt_964=(($567+8)|0);
      var $568=HEAP32[(($tt_964)>>2)];
      var $cmp965=(($568)|0)==1;
      if ($cmp965) { label = 183; break; } else { label = 188; break; }
    case 183: 
      var $569=$ra;
      var $value_968=(($569)|0);
      var $b969=$value_968;
      var $570=HEAP32[(($b969)>>2)];
      var $cmp970=(($570)|0)==0;
      if ($cmp970) { label = 187; break; } else { label = 188; break; }
    case 184: 
      var $571=$ra;
      var $tt_973=(($571+8)|0);
      var $572=HEAP32[(($tt_973)>>2)];
      var $cmp974=(($572)|0)==0;
      if ($cmp974) { label = 188; break; } else { label = 185; break; }
    case 185: 
      var $573=$ra;
      var $tt_977=(($573+8)|0);
      var $574=HEAP32[(($tt_977)>>2)];
      var $cmp978=(($574)|0)==1;
      if ($cmp978) { label = 186; break; } else { label = 187; break; }
    case 186: 
      var $575=$ra;
      var $value_981=(($575)|0);
      var $b982=$value_981;
      var $576=HEAP32[(($b982)>>2)];
      var $cmp983=(($576)|0)==0;
      if ($cmp983) { label = 188; break; } else { label = 187; break; }
    case 187: 
      var $577=$ci;
      var $u986=(($577+24)|0);
      var $l987=$u986;
      var $savedpc988=(($l987+4)|0);
      var $578=HEAP32[(($savedpc988)>>2)];
      var $incdec_ptr989=(($578+4)|0);
      HEAP32[(($savedpc988)>>2)]=$incdec_ptr989;
      label = 191; break;
    case 188: 
      var $579=$ci;
      var $u991=(($579+24)|0);
      var $l992=$u991;
      var $savedpc993=(($l992+4)|0);
      var $580=HEAP32[(($savedpc993)>>2)];
      var $581=HEAP32[(($580)>>2)];
      $i=$581;
      var $582=$i;
      var $shr995=$582 >>> 6;
      var $and996=$shr995 & 255;
      $a994=$and996;
      var $583=$a994;
      var $cmp997=(($583)|0) > 0;
      if ($cmp997) { label = 189; break; } else { label = 190; break; }
    case 189: 
      var $584=$L_addr;
      var $585=$ci;
      var $u1000=(($585+24)|0);
      var $l1001=$u1000;
      var $base1002=(($l1001)|0);
      var $586=HEAP32[(($base1002)>>2)];
      var $587=$a994;
      var $add_ptr1003=(($586+((($587)*(12))&-1))|0);
      var $add_ptr1004=((($add_ptr1003)-(12))|0);
      _luaF_close($584, $add_ptr1004);
      label = 190; break;
    case 190: 
      var $588=$i;
      var $shr1006=$588 >>> 14;
      var $and1007=$shr1006 & 262143;
      var $sub1008=((($and1007)-(131071))|0);
      var $add1009=((($sub1008)+(1))|0);
      var $589=$ci;
      var $u1010=(($589+24)|0);
      var $l1011=$u1010;
      var $savedpc1012=(($l1011+4)|0);
      var $590=HEAP32[(($savedpc1012)>>2)];
      var $add_ptr1013=(($590+($add1009<<2))|0);
      HEAP32[(($savedpc1012)>>2)]=$add_ptr1013;
      label = 191; break;
    case 191: 
      label = 290; break;
    case 192: 
      var $591=$base;
      var $592=$i;
      var $shr1017=$592 >>> 23;
      var $and1018=$shr1017 & 511;
      var $add_ptr1019=(($591+((($and1018)*(12))&-1))|0);
      $rb1016=$add_ptr1019;
      var $593=$i;
      var $shr1020=$593 >>> 14;
      var $and1021=$shr1020 & 511;
      var $tobool1022=(($and1021)|0)!=0;
      if ($tobool1022) { label = 193; break; } else { label = 196; break; }
    case 193: 
      var $594=$rb1016;
      var $tt_1024=(($594+8)|0);
      var $595=HEAP32[(($tt_1024)>>2)];
      var $cmp1025=(($595)|0)==0;
      if ($cmp1025) { label = 199; break; } else { label = 194; break; }
    case 194: 
      var $596=$rb1016;
      var $tt_1028=(($596+8)|0);
      var $597=HEAP32[(($tt_1028)>>2)];
      var $cmp1029=(($597)|0)==1;
      if ($cmp1029) { label = 195; break; } else { label = 200; break; }
    case 195: 
      var $598=$rb1016;
      var $value_1032=(($598)|0);
      var $b1033=$value_1032;
      var $599=HEAP32[(($b1033)>>2)];
      var $cmp1034=(($599)|0)==0;
      if ($cmp1034) { label = 199; break; } else { label = 200; break; }
    case 196: 
      var $600=$rb1016;
      var $tt_1037=(($600+8)|0);
      var $601=HEAP32[(($tt_1037)>>2)];
      var $cmp1038=(($601)|0)==0;
      if ($cmp1038) { label = 200; break; } else { label = 197; break; }
    case 197: 
      var $602=$rb1016;
      var $tt_1041=(($602+8)|0);
      var $603=HEAP32[(($tt_1041)>>2)];
      var $cmp1042=(($603)|0)==1;
      if ($cmp1042) { label = 198; break; } else { label = 199; break; }
    case 198: 
      var $604=$rb1016;
      var $value_1045=(($604)|0);
      var $b1046=$value_1045;
      var $605=HEAP32[(($b1046)>>2)];
      var $cmp1047=(($605)|0)==0;
      if ($cmp1047) { label = 200; break; } else { label = 199; break; }
    case 199: 
      var $606=$ci;
      var $u1050=(($606+24)|0);
      var $l1051=$u1050;
      var $savedpc1052=(($l1051+4)|0);
      var $607=HEAP32[(($savedpc1052)>>2)];
      var $incdec_ptr1053=(($607+4)|0);
      HEAP32[(($savedpc1052)>>2)]=$incdec_ptr1053;
      label = 203; break;
    case 200: 
      var $608=$rb1016;
      $io21055=$608;
      var $609=$ra;
      $io11056=$609;
      var $610=$io11056;
      var $value_1057=(($610)|0);
      var $611=$io21055;
      var $value_1058=(($611)|0);
      var $612=$value_1057;
      var $613=$value_1058;
      HEAP32[(($612)>>2)]=HEAP32[(($613)>>2)];HEAP32[((($612)+(4))>>2)]=HEAP32[((($613)+(4))>>2)];
      var $614=$io21055;
      var $tt_1059=(($614+8)|0);
      var $615=HEAP32[(($tt_1059)>>2)];
      var $616=$io11056;
      var $tt_1060=(($616+8)|0);
      HEAP32[(($tt_1060)>>2)]=$615;
      var $617=$ci;
      var $u1061=(($617+24)|0);
      var $l1062=$u1061;
      var $savedpc1063=(($l1062+4)|0);
      var $618=HEAP32[(($savedpc1063)>>2)];
      var $619=HEAP32[(($618)>>2)];
      $i=$619;
      var $620=$i;
      var $shr1065=$620 >>> 6;
      var $and1066=$shr1065 & 255;
      $a1064=$and1066;
      var $621=$a1064;
      var $cmp1067=(($621)|0) > 0;
      if ($cmp1067) { label = 201; break; } else { label = 202; break; }
    case 201: 
      var $622=$L_addr;
      var $623=$ci;
      var $u1070=(($623+24)|0);
      var $l1071=$u1070;
      var $base1072=(($l1071)|0);
      var $624=HEAP32[(($base1072)>>2)];
      var $625=$a1064;
      var $add_ptr1073=(($624+((($625)*(12))&-1))|0);
      var $add_ptr1074=((($add_ptr1073)-(12))|0);
      _luaF_close($622, $add_ptr1074);
      label = 202; break;
    case 202: 
      var $626=$i;
      var $shr1076=$626 >>> 14;
      var $and1077=$shr1076 & 262143;
      var $sub1078=((($and1077)-(131071))|0);
      var $add1079=((($sub1078)+(1))|0);
      var $627=$ci;
      var $u1080=(($627+24)|0);
      var $l1081=$u1080;
      var $savedpc1082=(($l1081+4)|0);
      var $628=HEAP32[(($savedpc1082)>>2)];
      var $add_ptr1083=(($628+($add1079<<2))|0);
      HEAP32[(($savedpc1082)>>2)]=$add_ptr1083;
      label = 203; break;
    case 203: 
      label = 290; break;
    case 204: 
      var $629=$i;
      var $shr1087=$629 >>> 23;
      var $and1088=$shr1087 & 511;
      $b1086=$and1088;
      var $630=$i;
      var $shr1089=$630 >>> 14;
      var $and1090=$shr1089 & 511;
      var $sub1091=((($and1090)-(1))|0);
      $nresults=$sub1091;
      var $631=$b1086;
      var $cmp1092=(($631)|0)!=0;
      if ($cmp1092) { label = 205; break; } else { label = 206; break; }
    case 205: 
      var $632=$ra;
      var $633=$b1086;
      var $add_ptr1095=(($632+((($633)*(12))&-1))|0);
      var $634=$L_addr;
      var $top1096=(($634+8)|0);
      HEAP32[(($top1096)>>2)]=$add_ptr1095;
      label = 206; break;
    case 206: 
      var $635=$L_addr;
      var $636=$ra;
      var $637=$nresults;
      var $call1098=_luaD_precall($635, $636, $637);
      var $tobool1099=(($call1098)|0)!=0;
      if ($tobool1099) { label = 207; break; } else { label = 210; break; }
    case 207: 
      var $638=$nresults;
      var $cmp1101=(($638)|0) >= 0;
      if ($cmp1101) { label = 208; break; } else { label = 209; break; }
    case 208: 
      var $639=$ci;
      var $top1104=(($639+4)|0);
      var $640=HEAP32[(($top1104)>>2)];
      var $641=$L_addr;
      var $top1105=(($641+8)|0);
      HEAP32[(($top1105)>>2)]=$640;
      label = 209; break;
    case 209: 
      var $642=$ci;
      var $u1107=(($642+24)|0);
      var $l1108=$u1107;
      var $base1109=(($l1108)|0);
      var $643=HEAP32[(($base1109)>>2)];
      $base=$643;
      label = 211; break;
    case 210: 
      var $644=$L_addr;
      var $ci1111=(($644+16)|0);
      var $645=HEAP32[(($ci1111)>>2)];
      $ci=$645;
      var $646=$ci;
      var $callstatus=(($646+18)|0);
      var $647=HEAP8[($callstatus)];
      var $conv1112=(($647)&255);
      var $or=$conv1112 | 4;
      var $conv1113=(($or) & 255);
      HEAP8[($callstatus)]=$conv1113;
      label = 3; break;
    case 211: 
      label = 290; break;
    case 212: 
      var $648=$i;
      var $shr1117=$648 >>> 23;
      var $and1118=$shr1117 & 511;
      $b1116=$and1118;
      var $649=$b1116;
      var $cmp1119=(($649)|0)!=0;
      if ($cmp1119) { label = 213; break; } else { label = 214; break; }
    case 213: 
      var $650=$ra;
      var $651=$b1116;
      var $add_ptr1122=(($650+((($651)*(12))&-1))|0);
      var $652=$L_addr;
      var $top1123=(($652+8)|0);
      HEAP32[(($top1123)>>2)]=$add_ptr1122;
      label = 214; break;
    case 214: 
      var $653=$L_addr;
      var $654=$ra;
      var $call1125=_luaD_precall($653, $654, -1);
      var $tobool1126=(($call1125)|0)!=0;
      if ($tobool1126) { label = 215; break; } else { label = 216; break; }
    case 215: 
      var $655=$ci;
      var $u1128=(($655+24)|0);
      var $l1129=$u1128;
      var $base1130=(($l1129)|0);
      var $656=HEAP32[(($base1130)>>2)];
      $base=$656;
      label = 223; break;
    case 216: 
      var $657=$L_addr;
      var $ci1132=(($657+16)|0);
      var $658=HEAP32[(($ci1132)>>2)];
      $nci=$658;
      var $659=$nci;
      var $previous=(($659+8)|0);
      var $660=HEAP32[(($previous)>>2)];
      $oci=$660;
      var $661=$nci;
      var $func1133=(($661)|0);
      var $662=HEAP32[(($func1133)>>2)];
      $nfunc=$662;
      var $663=$oci;
      var $func1134=(($663)|0);
      var $664=HEAP32[(($func1134)>>2)];
      $ofunc=$664;
      var $665=$nci;
      var $u1135=(($665+24)|0);
      var $l1136=$u1135;
      var $base1137=(($l1136)|0);
      var $666=HEAP32[(($base1137)>>2)];
      var $667=$nfunc;
      var $value_1138=(($667)|0);
      var $gc1139=$value_1138;
      var $668=HEAP32[(($gc1139)>>2)];
      var $cl1140=$668;
      var $l1141=$cl1140;
      var $p1142=(($l1141+12)|0);
      var $669=HEAP32[(($p1142)>>2)];
      var $numparams=(($669+76)|0);
      var $670=HEAP8[($numparams)];
      var $conv1143=(($670)&255);
      var $add_ptr1144=(($666+((($conv1143)*(12))&-1))|0);
      $lim=$add_ptr1144;
      var $671=$cl;
      var $p1145=(($671+12)|0);
      var $672=HEAP32[(($p1145)>>2)];
      var $sizep=(($672+56)|0);
      var $673=HEAP32[(($sizep)>>2)];
      var $cmp1146=(($673)|0) > 0;
      if ($cmp1146) { label = 217; break; } else { label = 218; break; }
    case 217: 
      var $674=$L_addr;
      var $675=$oci;
      var $u1149=(($675+24)|0);
      var $l1150=$u1149;
      var $base1151=(($l1150)|0);
      var $676=HEAP32[(($base1151)>>2)];
      _luaF_close($674, $676);
      label = 218; break;
    case 218: 
      $aux=0;
      label = 219; break;
    case 219: 
      var $677=$nfunc;
      var $678=$aux;
      var $add_ptr1154=(($677+((($678)*(12))&-1))|0);
      var $679=$lim;
      var $cmp1155=(($add_ptr1154)>>>0) < (($679)>>>0);
      if ($cmp1155) { label = 220; break; } else { label = 222; break; }
    case 220: 
      var $680=$nfunc;
      var $681=$aux;
      var $add_ptr1158=(($680+((($681)*(12))&-1))|0);
      $io21157=$add_ptr1158;
      var $682=$ofunc;
      var $683=$aux;
      var $add_ptr1160=(($682+((($683)*(12))&-1))|0);
      $io11159=$add_ptr1160;
      var $684=$io11159;
      var $value_1161=(($684)|0);
      var $685=$io21157;
      var $value_1162=(($685)|0);
      var $686=$value_1161;
      var $687=$value_1162;
      HEAP32[(($686)>>2)]=HEAP32[(($687)>>2)];HEAP32[((($686)+(4))>>2)]=HEAP32[((($687)+(4))>>2)];
      var $688=$io21157;
      var $tt_1163=(($688+8)|0);
      var $689=HEAP32[(($tt_1163)>>2)];
      var $690=$io11159;
      var $tt_1164=(($690+8)|0);
      HEAP32[(($tt_1164)>>2)]=$689;
      label = 221; break;
    case 221: 
      var $691=$aux;
      var $inc=((($691)+(1))|0);
      $aux=$inc;
      label = 219; break;
    case 222: 
      var $692=$ofunc;
      var $693=$nci;
      var $u1165=(($693+24)|0);
      var $l1166=$u1165;
      var $base1167=(($l1166)|0);
      var $694=HEAP32[(($base1167)>>2)];
      var $695=$nfunc;
      var $sub_ptr_lhs_cast=$694;
      var $sub_ptr_rhs_cast=$695;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(12))&-1);
      var $add_ptr1168=(($692+((($sub_ptr_div)*(12))&-1))|0);
      var $696=$oci;
      var $u1169=(($696+24)|0);
      var $l1170=$u1169;
      var $base1171=(($l1170)|0);
      HEAP32[(($base1171)>>2)]=$add_ptr1168;
      var $697=$ofunc;
      var $698=$L_addr;
      var $top1172=(($698+8)|0);
      var $699=HEAP32[(($top1172)>>2)];
      var $700=$nfunc;
      var $sub_ptr_lhs_cast1173=$699;
      var $sub_ptr_rhs_cast1174=$700;
      var $sub_ptr_sub1175=((($sub_ptr_lhs_cast1173)-($sub_ptr_rhs_cast1174))|0);
      var $sub_ptr_div1176=((((($sub_ptr_sub1175)|0))/(12))&-1);
      var $add_ptr1177=(($697+((($sub_ptr_div1176)*(12))&-1))|0);
      var $701=$L_addr;
      var $top1178=(($701+8)|0);
      HEAP32[(($top1178)>>2)]=$add_ptr1177;
      var $702=$oci;
      var $top1179=(($702+4)|0);
      HEAP32[(($top1179)>>2)]=$add_ptr1177;
      var $703=$nci;
      var $u1180=(($703+24)|0);
      var $l1181=$u1180;
      var $savedpc1182=(($l1181+4)|0);
      var $704=HEAP32[(($savedpc1182)>>2)];
      var $705=$oci;
      var $u1183=(($705+24)|0);
      var $l1184=$u1183;
      var $savedpc1185=(($l1184+4)|0);
      HEAP32[(($savedpc1185)>>2)]=$704;
      var $706=$oci;
      var $callstatus1186=(($706+18)|0);
      var $707=HEAP8[($callstatus1186)];
      var $conv1187=(($707)&255);
      var $or1188=$conv1187 | 64;
      var $conv1189=(($or1188) & 255);
      HEAP8[($callstatus1186)]=$conv1189;
      var $708=$oci;
      var $709=$L_addr;
      var $ci1190=(($709+16)|0);
      HEAP32[(($ci1190)>>2)]=$708;
      $ci=$708;
      label = 3; break;
    case 223: 
      label = 290; break;
    case 224: 
      var $710=$i;
      var $shr1194=$710 >>> 23;
      var $and1195=$shr1194 & 511;
      $b1193=$and1195;
      var $711=$b1193;
      var $cmp1196=(($711)|0)!=0;
      if ($cmp1196) { label = 225; break; } else { label = 226; break; }
    case 225: 
      var $712=$ra;
      var $713=$b1193;
      var $add_ptr1199=(($712+((($713)*(12))&-1))|0);
      var $add_ptr1200=((($add_ptr1199)-(12))|0);
      var $714=$L_addr;
      var $top1201=(($714+8)|0);
      HEAP32[(($top1201)>>2)]=$add_ptr1200;
      label = 226; break;
    case 226: 
      var $715=$cl;
      var $p1203=(($715+12)|0);
      var $716=HEAP32[(($p1203)>>2)];
      var $sizep1204=(($716+56)|0);
      var $717=HEAP32[(($sizep1204)>>2)];
      var $cmp1205=(($717)|0) > 0;
      if ($cmp1205) { label = 227; break; } else { label = 228; break; }
    case 227: 
      var $718=$L_addr;
      var $719=$base;
      _luaF_close($718, $719);
      label = 228; break;
    case 228: 
      var $720=$L_addr;
      var $721=$ra;
      var $call1209=_luaD_poscall($720, $721);
      $b1193=$call1209;
      var $722=$ci;
      var $callstatus1210=(($722+18)|0);
      var $723=HEAP8[($callstatus1210)];
      var $conv1211=(($723)&255);
      var $and1212=$conv1211 & 4;
      var $tobool1213=(($and1212)|0)!=0;
      if ($tobool1213) { label = 230; break; } else { label = 229; break; }
    case 229: 
      STACKTOP = __stackBase__;
      return;
    case 230: 
      var $724=$L_addr;
      var $ci1216=(($724+16)|0);
      var $725=HEAP32[(($ci1216)>>2)];
      $ci=$725;
      var $726=$b1193;
      var $tobool1217=(($726)|0)!=0;
      if ($tobool1217) { label = 231; break; } else { label = 232; break; }
    case 231: 
      var $727=$ci;
      var $top1219=(($727+4)|0);
      var $728=HEAP32[(($top1219)>>2)];
      var $729=$L_addr;
      var $top1220=(($729+8)|0);
      HEAP32[(($top1220)>>2)]=$728;
      label = 232; break;
    case 232: 
      label = 3; break;
    case 233: 
      var $730=$ra;
      var $add_ptr1223=(($730+24)|0);
      var $value_1224=(($add_ptr1223)|0);
      var $n1225=$value_1224;
      var $731=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n1225)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n1225)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $step=$731;
      var $732=$ra;
      var $value_1226=(($732)|0);
      var $n1227=$value_1226;
      var $733=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n1227)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n1227)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $734=$step;
      var $add1228=($733)+($734);
      $idx=$add1228;
      var $735=$ra;
      var $add_ptr1229=(($735+12)|0);
      var $value_1230=(($add_ptr1229)|0);
      var $n1231=$value_1230;
      var $736=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n1231)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n1231)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $limit=$736;
      var $737=$step;
      var $cmp1232=0 < $737;
      if ($cmp1232) { label = 234; break; } else { label = 235; break; }
    case 234: 
      var $738=$idx;
      var $739=$limit;
      var $cmp1235=$738 <= $739;
      if ($cmp1235) { label = 236; break; } else { label = 237; break; }
    case 235: 
      var $740=$limit;
      var $741=$idx;
      var $cmp1238=$740 <= $741;
      if ($cmp1238) { label = 236; break; } else { label = 237; break; }
    case 236: 
      var $742=$i;
      var $shr1241=$742 >>> 14;
      var $and1242=$shr1241 & 262143;
      var $sub1243=((($and1242)-(131071))|0);
      var $743=$ci;
      var $u1244=(($743+24)|0);
      var $l1245=$u1244;
      var $savedpc1246=(($l1245+4)|0);
      var $744=HEAP32[(($savedpc1246)>>2)];
      var $add_ptr1247=(($744+($sub1243<<2))|0);
      HEAP32[(($savedpc1246)>>2)]=$add_ptr1247;
      var $745=$ra;
      $io1248=$745;
      var $746=$idx;
      var $747=$io1248;
      var $value_1249=(($747)|0);
      var $n1250=$value_1249;
      (HEAPF64[(tempDoublePtr)>>3]=$746,HEAP32[(($n1250)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n1250)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $748=$io1248;
      var $tt_1251=(($748+8)|0);
      HEAP32[(($tt_1251)>>2)]=3;
      var $749=$ra;
      var $add_ptr1253=(($749+36)|0);
      $io1252=$add_ptr1253;
      var $750=$idx;
      var $751=$io1252;
      var $value_1254=(($751)|0);
      var $n1255=$value_1254;
      (HEAPF64[(tempDoublePtr)>>3]=$750,HEAP32[(($n1255)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n1255)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $752=$io1252;
      var $tt_1256=(($752+8)|0);
      HEAP32[(($tt_1256)>>2)]=3;
      label = 237; break;
    case 237: 
      label = 290; break;
    case 238: 
      var $753=$ra;
      $init=$753;
      var $754=$ra;
      var $add_ptr1259=(($754+12)|0);
      $plimit=$add_ptr1259;
      var $755=$ra;
      var $add_ptr1260=(($755+24)|0);
      $pstep=$add_ptr1260;
      var $756=$init;
      var $tt_1261=(($756+8)|0);
      var $757=HEAP32[(($tt_1261)>>2)];
      var $cmp1262=(($757)|0)==3;
      if ($cmp1262) { label = 241; break; } else { label = 239; break; }
    case 239: 
      var $758=$init;
      var $759=$ra;
      var $call1265=_luaV_tonumber($758, $759);
      $init=$call1265;
      var $cmp1266=(($call1265)|0)!=0;
      if ($cmp1266) { label = 241; break; } else { label = 240; break; }
    case 240: 
      var $760=$L_addr;
      _luaG_runerror($760, ((5246480)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));

    case 241: 
      var $761=$plimit;
      var $tt_1270=(($761+8)|0);
      var $762=HEAP32[(($tt_1270)>>2)];
      var $cmp1271=(($762)|0)==3;
      if ($cmp1271) { label = 244; break; } else { label = 242; break; }
    case 242: 
      var $763=$plimit;
      var $764=$ra;
      var $add_ptr1274=(($764+12)|0);
      var $call1275=_luaV_tonumber($763, $add_ptr1274);
      $plimit=$call1275;
      var $cmp1276=(($call1275)|0)!=0;
      if ($cmp1276) { label = 244; break; } else { label = 243; break; }
    case 243: 
      var $765=$L_addr;
      _luaG_runerror($765, ((5246100)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));

    case 244: 
      var $766=$pstep;
      var $tt_1280=(($766+8)|0);
      var $767=HEAP32[(($tt_1280)>>2)];
      var $cmp1281=(($767)|0)==3;
      if ($cmp1281) { label = 247; break; } else { label = 245; break; }
    case 245: 
      var $768=$pstep;
      var $769=$ra;
      var $add_ptr1284=(($769+24)|0);
      var $call1285=_luaV_tonumber($768, $add_ptr1284);
      $pstep=$call1285;
      var $cmp1286=(($call1285)|0)!=0;
      if ($cmp1286) { label = 247; break; } else { label = 246; break; }
    case 246: 
      var $770=$L_addr;
      _luaG_runerror($770, ((5245756)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));

    case 247: 
      label = 248; break;
    case 248: 
      label = 249; break;
    case 249: 
      var $771=$ra;
      $io1292=$771;
      var $772=$ra;
      var $value_1293=(($772)|0);
      var $n1294=$value_1293;
      var $773=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n1294)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n1294)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $774=$pstep;
      var $value_1295=(($774)|0);
      var $n1296=$value_1295;
      var $775=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($n1296)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($n1296)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub1297=($773)-($775);
      var $776=$io1292;
      var $value_1298=(($776)|0);
      var $n1299=$value_1298;
      (HEAPF64[(tempDoublePtr)>>3]=$sub1297,HEAP32[(($n1299)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($n1299)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $777=$io1292;
      var $tt_1300=(($777+8)|0);
      HEAP32[(($tt_1300)>>2)]=3;
      var $778=$i;
      var $shr1301=$778 >>> 14;
      var $and1302=$shr1301 & 262143;
      var $sub1303=((($and1302)-(131071))|0);
      var $779=$ci;
      var $u1304=(($779+24)|0);
      var $l1305=$u1304;
      var $savedpc1306=(($l1305+4)|0);
      var $780=HEAP32[(($savedpc1306)>>2)];
      var $add_ptr1307=(($780+($sub1303<<2))|0);
      HEAP32[(($savedpc1306)>>2)]=$add_ptr1307;
      label = 290; break;
    case 250: 
      var $781=$ra;
      var $add_ptr1309=(($781+36)|0);
      $cb=$add_ptr1309;
      var $782=$ra;
      var $add_ptr1311=(($782+24)|0);
      $io21310=$add_ptr1311;
      var $783=$cb;
      var $add_ptr1313=(($783+24)|0);
      $io11312=$add_ptr1313;
      var $784=$io11312;
      var $value_1314=(($784)|0);
      var $785=$io21310;
      var $value_1315=(($785)|0);
      var $786=$value_1314;
      var $787=$value_1315;
      HEAP32[(($786)>>2)]=HEAP32[(($787)>>2)];HEAP32[((($786)+(4))>>2)]=HEAP32[((($787)+(4))>>2)];
      var $788=$io21310;
      var $tt_1316=(($788+8)|0);
      var $789=HEAP32[(($tt_1316)>>2)];
      var $790=$io11312;
      var $tt_1317=(($790+8)|0);
      HEAP32[(($tt_1317)>>2)]=$789;
      var $791=$ra;
      var $add_ptr1319=(($791+12)|0);
      $io21318=$add_ptr1319;
      var $792=$cb;
      var $add_ptr1321=(($792+12)|0);
      $io11320=$add_ptr1321;
      var $793=$io11320;
      var $value_1322=(($793)|0);
      var $794=$io21318;
      var $value_1323=(($794)|0);
      var $795=$value_1322;
      var $796=$value_1323;
      HEAP32[(($795)>>2)]=HEAP32[(($796)>>2)];HEAP32[((($795)+(4))>>2)]=HEAP32[((($796)+(4))>>2)];
      var $797=$io21318;
      var $tt_1324=(($797+8)|0);
      var $798=HEAP32[(($tt_1324)>>2)];
      var $799=$io11320;
      var $tt_1325=(($799+8)|0);
      HEAP32[(($tt_1325)>>2)]=$798;
      var $800=$ra;
      $io21326=$800;
      var $801=$cb;
      $io11327=$801;
      var $802=$io11327;
      var $value_1328=(($802)|0);
      var $803=$io21326;
      var $value_1329=(($803)|0);
      var $804=$value_1328;
      var $805=$value_1329;
      HEAP32[(($804)>>2)]=HEAP32[(($805)>>2)];HEAP32[((($804)+(4))>>2)]=HEAP32[((($805)+(4))>>2)];
      var $806=$io21326;
      var $tt_1330=(($806+8)|0);
      var $807=HEAP32[(($tt_1330)>>2)];
      var $808=$io11327;
      var $tt_1331=(($808+8)|0);
      HEAP32[(($tt_1331)>>2)]=$807;
      var $809=$cb;
      var $add_ptr1332=(($809+36)|0);
      var $810=$L_addr;
      var $top1333=(($810+8)|0);
      HEAP32[(($top1333)>>2)]=$add_ptr1332;
      var $811=$L_addr;
      var $812=$cb;
      var $813=$i;
      var $shr1334=$813 >>> 14;
      var $and1335=$shr1334 & 511;
      _luaD_call($811, $812, $and1335, 1);
      var $814=$ci;
      var $u1336=(($814+24)|0);
      var $l1337=$u1336;
      var $base1338=(($l1337)|0);
      var $815=HEAP32[(($base1338)>>2)];
      $base=$815;
      var $816=$ci;
      var $top1339=(($816+4)|0);
      var $817=HEAP32[(($top1339)>>2)];
      var $818=$L_addr;
      var $top1340=(($818+8)|0);
      HEAP32[(($top1340)>>2)]=$817;
      var $819=$ci;
      var $u1341=(($819+24)|0);
      var $l1342=$u1341;
      var $savedpc1343=(($l1342+4)|0);
      var $820=HEAP32[(($savedpc1343)>>2)];
      var $incdec_ptr1344=(($820+4)|0);
      HEAP32[(($savedpc1343)>>2)]=$incdec_ptr1344;
      var $821=HEAP32[(($820)>>2)];
      $i=$821;
      var $822=$base;
      var $823=$i;
      var $shr1345=$823 >>> 6;
      var $and1346=$shr1345 & 255;
      var $add_ptr1347=(($822+((($and1346)*(12))&-1))|0);
      $ra=$add_ptr1347;
      label = 252; break;
    case 251: 
      label = 252; break;
    case 252: 
      var $824=$ra;
      var $add_ptr1349=(($824+12)|0);
      var $tt_1350=(($add_ptr1349+8)|0);
      var $825=HEAP32[(($tt_1350)>>2)];
      var $cmp1351=(($825)|0)==0;
      if ($cmp1351) { label = 254; break; } else { label = 253; break; }
    case 253: 
      var $826=$ra;
      var $add_ptr1355=(($826+12)|0);
      $io21354=$add_ptr1355;
      var $827=$ra;
      $io11356=$827;
      var $828=$io11356;
      var $value_1357=(($828)|0);
      var $829=$io21354;
      var $value_1358=(($829)|0);
      var $830=$value_1357;
      var $831=$value_1358;
      HEAP32[(($830)>>2)]=HEAP32[(($831)>>2)];HEAP32[((($830)+(4))>>2)]=HEAP32[((($831)+(4))>>2)];
      var $832=$io21354;
      var $tt_1359=(($832+8)|0);
      var $833=HEAP32[(($tt_1359)>>2)];
      var $834=$io11356;
      var $tt_1360=(($834+8)|0);
      HEAP32[(($tt_1360)>>2)]=$833;
      var $835=$i;
      var $shr1361=$835 >>> 14;
      var $and1362=$shr1361 & 262143;
      var $sub1363=((($and1362)-(131071))|0);
      var $836=$ci;
      var $u1364=(($836+24)|0);
      var $l1365=$u1364;
      var $savedpc1366=(($l1365+4)|0);
      var $837=HEAP32[(($savedpc1366)>>2)];
      var $add_ptr1367=(($837+($sub1363<<2))|0);
      HEAP32[(($savedpc1366)>>2)]=$add_ptr1367;
      label = 254; break;
    case 254: 
      label = 290; break;
    case 255: 
      var $838=$i;
      var $shr1371=$838 >>> 23;
      var $and1372=$shr1371 & 511;
      $n1370=$and1372;
      var $839=$i;
      var $shr1374=$839 >>> 14;
      var $and1375=$shr1374 & 511;
      $c1373=$and1375;
      var $840=$n1370;
      var $cmp1376=(($840)|0)==0;
      if ($cmp1376) { label = 256; break; } else { label = 257; break; }
    case 256: 
      var $841=$L_addr;
      var $top1379=(($841+8)|0);
      var $842=HEAP32[(($top1379)>>2)];
      var $843=$ra;
      var $sub_ptr_lhs_cast1380=$842;
      var $sub_ptr_rhs_cast1381=$843;
      var $sub_ptr_sub1382=((($sub_ptr_lhs_cast1380)-($sub_ptr_rhs_cast1381))|0);
      var $sub_ptr_div1383=((((($sub_ptr_sub1382)|0))/(12))&-1);
      var $sub1384=((($sub_ptr_div1383)-(1))|0);
      $n1370=$sub1384;
      label = 257; break;
    case 257: 
      var $844=$c1373;
      var $cmp1386=(($844)|0)==0;
      if ($cmp1386) { label = 258; break; } else { label = 259; break; }
    case 258: 
      var $845=$ci;
      var $u1389=(($845+24)|0);
      var $l1390=$u1389;
      var $savedpc1391=(($l1390+4)|0);
      var $846=HEAP32[(($savedpc1391)>>2)];
      var $incdec_ptr1392=(($846+4)|0);
      HEAP32[(($savedpc1391)>>2)]=$incdec_ptr1392;
      var $847=HEAP32[(($846)>>2)];
      var $shr1393=$847 >>> 6;
      var $and1394=$shr1393 & 67108863;
      $c1373=$and1394;
      label = 259; break;
    case 259: 
      var $848=$ra;
      var $value_1396=(($848)|0);
      var $gc1397=$value_1396;
      var $849=HEAP32[(($gc1397)>>2)];
      var $h1398=$849;
      $h=$h1398;
      var $850=$c1373;
      var $sub1399=((($850)-(1))|0);
      var $mul1400=((($sub1399)*(50))&-1);
      var $851=$n1370;
      var $add1401=((($mul1400)+($851))|0);
      $last=$add1401;
      var $852=$last;
      var $853=$h;
      var $sizearray=(($853+28)|0);
      var $854=HEAP32[(($sizearray)>>2)];
      var $cmp1402=(($852)|0) > (($854)|0);
      if ($cmp1402) { label = 260; break; } else { label = 261; break; }
    case 260: 
      var $855=$L_addr;
      var $856=$h;
      var $857=$last;
      _luaH_resizearray($855, $856, $857);
      label = 261; break;
    case 261: 
      label = 262; break;
    case 262: 
      var $858=$n1370;
      var $cmp1407=(($858)|0) > 0;
      if ($cmp1407) { label = 263; break; } else { label = 269; break; }
    case 263: 
      var $859=$ra;
      var $860=$n1370;
      var $add_ptr1410=(($859+((($860)*(12))&-1))|0);
      $val=$add_ptr1410;
      var $861=$L_addr;
      var $862=$h;
      var $863=$last;
      var $dec1411=((($863)-(1))|0);
      $last=$dec1411;
      var $864=$val;
      _luaH_setint($861, $862, $863, $864);
      var $865=$val;
      var $tt_1412=(($865+8)|0);
      var $866=HEAP32[(($tt_1412)>>2)];
      var $and1413=$866 & 64;
      var $tobool1414=(($and1413)|0)!=0;
      if ($tobool1414) { label = 264; break; } else { label = 267; break; }
    case 264: 
      var $867=$val;
      var $value_1416=(($867)|0);
      var $gc1417=$value_1416;
      var $868=HEAP32[(($gc1417)>>2)];
      var $gch1418=$868;
      var $marked1419=(($gch1418+5)|0);
      var $869=HEAP8[($marked1419)];
      var $conv1420=(($869)&255);
      var $and1421=$conv1420 & 3;
      var $tobool1422=(($and1421)|0)!=0;
      if ($tobool1422) { label = 265; break; } else { label = 267; break; }
    case 265: 
      var $870=$h;
      var $871=$870;
      var $gch1424=$871;
      var $marked1425=(($gch1424+5)|0);
      var $872=HEAP8[($marked1425)];
      var $conv1426=(($872)&255);
      var $and1427=$conv1426 & 4;
      var $tobool1428=(($and1427)|0)!=0;
      if ($tobool1428) { label = 266; break; } else { label = 267; break; }
    case 266: 
      var $873=$L_addr;
      var $874=$h;
      var $875=$874;
      _luaC_barrierback_($873, $875);
      label = 267; break;
    case 267: 
      label = 268; break;
    case 268: 
      var $876=$n1370;
      var $dec1432=((($876)-(1))|0);
      $n1370=$dec1432;
      label = 262; break;
    case 269: 
      var $877=$ci;
      var $top1434=(($877+4)|0);
      var $878=HEAP32[(($top1434)>>2)];
      var $879=$L_addr;
      var $top1435=(($879+8)|0);
      HEAP32[(($top1435)>>2)]=$878;
      label = 290; break;
    case 270: 
      var $880=$i;
      var $shr1438=$880 >>> 14;
      var $and1439=$shr1438 & 262143;
      var $881=$cl;
      var $p1440=(($881+12)|0);
      var $882=HEAP32[(($p1440)>>2)];
      var $p1441=(($882+16)|0);
      var $883=HEAP32[(($p1441)>>2)];
      var $arrayidx1442=(($883+($and1439<<2))|0);
      var $884=HEAP32[(($arrayidx1442)>>2)];
      $p1437=$884;
      var $885=$p1437;
      var $886=$cl;
      var $upvals1443=(($886+16)|0);
      var $arraydecay=(($upvals1443)|0);
      var $887=$base;
      var $call1444=_getcached($885, $arraydecay, $887);
      $ncl=$call1444;
      var $888=$ncl;
      var $cmp1445=(($888)|0)==0;
      if ($cmp1445) { label = 271; break; } else { label = 272; break; }
    case 271: 
      var $889=$L_addr;
      var $890=$p1437;
      var $891=$cl;
      var $upvals1448=(($891+16)|0);
      var $arraydecay1449=(($upvals1448)|0);
      var $892=$base;
      var $893=$ra;
      _pushclosure($889, $890, $arraydecay1449, $892, $893);
      label = 273; break;
    case 272: 
      var $894=$ra;
      $io1451=$894;
      var $895=$ncl;
      var $896=$895;
      var $897=$io1451;
      var $value_1452=(($897)|0);
      var $gc1453=$value_1452;
      HEAP32[(($gc1453)>>2)]=$896;
      var $898=$io1451;
      var $tt_1454=(($898+8)|0);
      HEAP32[(($tt_1454)>>2)]=70;
      label = 273; break;
    case 273: 
      var $899=$L_addr;
      var $l_G1456=(($899+12)|0);
      var $900=HEAP32[(($l_G1456)>>2)];
      var $GCdebt1457=(($900+12)|0);
      var $901=HEAP32[(($GCdebt1457)>>2)];
      var $cmp1458=(($901)|0) > 0;
      if ($cmp1458) { label = 274; break; } else { label = 275; break; }
    case 274: 
      var $902=$ra;
      var $add_ptr1461=(($902+12)|0);
      var $903=$L_addr;
      var $top1462=(($903+8)|0);
      HEAP32[(($top1462)>>2)]=$add_ptr1461;
      var $904=$L_addr;
      _luaC_step($904);
      var $905=$ci;
      var $top1463=(($905+4)|0);
      var $906=HEAP32[(($top1463)>>2)];
      var $907=$L_addr;
      var $top1464=(($907+8)|0);
      HEAP32[(($top1464)>>2)]=$906;
      label = 275; break;
    case 275: 
      var $908=$ci;
      var $u1466=(($908+24)|0);
      var $l1467=$u1466;
      var $base1468=(($l1467)|0);
      var $909=HEAP32[(($base1468)>>2)];
      $base=$909;
      label = 290; break;
    case 276: 
      var $910=$i;
      var $shr1471=$910 >>> 23;
      var $and1472=$shr1471 & 511;
      var $sub1473=((($and1472)-(1))|0);
      $b1470=$sub1473;
      var $911=$base;
      var $912=$ci;
      var $func1475=(($912)|0);
      var $913=HEAP32[(($func1475)>>2)];
      var $sub_ptr_lhs_cast1476=$911;
      var $sub_ptr_rhs_cast1477=$913;
      var $sub_ptr_sub1478=((($sub_ptr_lhs_cast1476)-($sub_ptr_rhs_cast1477))|0);
      var $sub_ptr_div1479=((((($sub_ptr_sub1478)|0))/(12))&-1);
      var $914=$cl;
      var $p1480=(($914+12)|0);
      var $915=HEAP32[(($p1480)>>2)];
      var $numparams1481=(($915+76)|0);
      var $916=HEAP8[($numparams1481)];
      var $conv1482=(($916)&255);
      var $sub1483=((($sub_ptr_div1479)-($conv1482))|0);
      var $sub1484=((($sub1483)-(1))|0);
      $n1474=$sub1484;
      var $917=$b1470;
      var $cmp1485=(($917)|0) < 0;
      if ($cmp1485) { label = 277; break; } else { label = 281; break; }
    case 277: 
      var $918=$n1474;
      $b1470=$918;
      var $919=$L_addr;
      var $stack_last=(($919+24)|0);
      var $920=HEAP32[(($stack_last)>>2)];
      var $921=$L_addr;
      var $top1488=(($921+8)|0);
      var $922=HEAP32[(($top1488)>>2)];
      var $sub_ptr_lhs_cast1489=$920;
      var $sub_ptr_rhs_cast1490=$922;
      var $sub_ptr_sub1491=((($sub_ptr_lhs_cast1489)-($sub_ptr_rhs_cast1490))|0);
      var $sub_ptr_div1492=((((($sub_ptr_sub1491)|0))/(12))&-1);
      var $923=$n1474;
      var $cmp1493=(($sub_ptr_div1492)|0) <= (($923)|0);
      if ($cmp1493) { label = 278; break; } else { label = 279; break; }
    case 278: 
      var $924=$L_addr;
      var $925=$n1474;
      _luaD_growstack($924, $925);
      label = 280; break;
    case 279: 
      label = 280; break;
    case 280: 
      var $926=$ci;
      var $u1498=(($926+24)|0);
      var $l1499=$u1498;
      var $base1500=(($l1499)|0);
      var $927=HEAP32[(($base1500)>>2)];
      $base=$927;
      var $928=$base;
      var $929=$i;
      var $shr1501=$929 >>> 6;
      var $and1502=$shr1501 & 255;
      var $add_ptr1503=(($928+((($and1502)*(12))&-1))|0);
      $ra=$add_ptr1503;
      var $930=$ra;
      var $931=$n1474;
      var $add_ptr1504=(($930+((($931)*(12))&-1))|0);
      var $932=$L_addr;
      var $top1505=(($932+8)|0);
      HEAP32[(($top1505)>>2)]=$add_ptr1504;
      label = 281; break;
    case 281: 
      $j=0;
      label = 282; break;
    case 282: 
      var $933=$j;
      var $934=$b1470;
      var $cmp1508=(($933)|0) < (($934)|0);
      if ($cmp1508) { label = 283; break; } else { label = 288; break; }
    case 283: 
      var $935=$j;
      var $936=$n1474;
      var $cmp1511=(($935)|0) < (($936)|0);
      if ($cmp1511) { label = 284; break; } else { label = 285; break; }
    case 284: 
      var $937=$base;
      var $938=$n1474;
      var $idx_neg=(((-$938))|0);
      var $add_ptr1515=(($937+((($idx_neg)*(12))&-1))|0);
      var $939=$j;
      var $add_ptr1516=(($add_ptr1515+((($939)*(12))&-1))|0);
      $io21514=$add_ptr1516;
      var $940=$ra;
      var $941=$j;
      var $add_ptr1518=(($940+((($941)*(12))&-1))|0);
      $io11517=$add_ptr1518;
      var $942=$io11517;
      var $value_1519=(($942)|0);
      var $943=$io21514;
      var $value_1520=(($943)|0);
      var $944=$value_1519;
      var $945=$value_1520;
      HEAP32[(($944)>>2)]=HEAP32[(($945)>>2)];HEAP32[((($944)+(4))>>2)]=HEAP32[((($945)+(4))>>2)];
      var $946=$io21514;
      var $tt_1521=(($946+8)|0);
      var $947=HEAP32[(($tt_1521)>>2)];
      var $948=$io11517;
      var $tt_1522=(($948+8)|0);
      HEAP32[(($tt_1522)>>2)]=$947;
      label = 286; break;
    case 285: 
      var $949=$ra;
      var $950=$j;
      var $add_ptr1524=(($949+((($950)*(12))&-1))|0);
      var $tt_1525=(($add_ptr1524+8)|0);
      HEAP32[(($tt_1525)>>2)]=0;
      label = 286; break;
    case 286: 
      label = 287; break;
    case 287: 
      var $951=$j;
      var $inc1528=((($951)+(1))|0);
      $j=$inc1528;
      label = 282; break;
    case 288: 
      label = 290; break;
    case 289: 
      label = 290; break;
    case 290: 
      label = 4; break;
  }

}
_luaV_execute["X"]=1;

function _getcached($p, $encup, $base) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p_addr;
      var $encup_addr;
      var $base_addr;
      var $c;
      var $nup;
      var $uv;
      var $i;
      var $v;
      $p_addr=$p;
      $encup_addr=$encup;
      $base_addr=$base;
      var $0=$p_addr;
      var $cache=(($0+32)|0);
      var $1=HEAP32[(($cache)>>2)];
      $c=$1;
      var $2=$c;
      var $cmp=(($2)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 13; break; }
    case 3: 
      var $3=$p_addr;
      var $sizeupvalues=(($3+40)|0);
      var $4=HEAP32[(($sizeupvalues)>>2)];
      $nup=$4;
      var $5=$p_addr;
      var $upvalues=(($5+28)|0);
      var $6=HEAP32[(($upvalues)>>2)];
      $uv=$6;
      $i=0;
      label = 4; break;
    case 4: 
      var $7=$i;
      var $8=$nup;
      var $cmp1=(($7)|0) < (($8)|0);
      if ($cmp1) { label = 5; break; } else { label = 12; break; }
    case 5: 
      var $9=$i;
      var $10=$uv;
      var $arrayidx=(($10+($9<<3))|0);
      var $instack=(($arrayidx+4)|0);
      var $11=HEAP8[($instack)];
      var $conv=(($11)&255);
      var $tobool=(($conv)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $12=$base_addr;
      var $13=$i;
      var $14=$uv;
      var $arrayidx2=(($14+($13<<3))|0);
      var $idx=(($arrayidx2+5)|0);
      var $15=HEAP8[($idx)];
      var $conv3=(($15)&255);
      var $add_ptr=(($12+((($conv3)*(12))&-1))|0);
      var $cond = $add_ptr;label = 8; break;
    case 7: 
      var $16=$i;
      var $17=$uv;
      var $arrayidx4=(($17+($16<<3))|0);
      var $idx5=(($arrayidx4+5)|0);
      var $18=HEAP8[($idx5)];
      var $idxprom=(($18)&255);
      var $19=$encup_addr;
      var $arrayidx6=(($19+($idxprom<<2))|0);
      var $20=HEAP32[(($arrayidx6)>>2)];
      var $v7=(($20+8)|0);
      var $21=HEAP32[(($v7)>>2)];
      var $cond = $21;label = 8; break;
    case 8: 
      var $cond;
      $v=$cond;
      var $22=$i;
      var $23=$c;
      var $l=$23;
      var $upvals=(($l+16)|0);
      var $arrayidx8=(($upvals+($22<<2))|0);
      var $24=HEAP32[(($arrayidx8)>>2)];
      var $v9=(($24+8)|0);
      var $25=HEAP32[(($v9)>>2)];
      var $26=$v;
      var $cmp10=(($25)|0)!=(($26)|0);
      if ($cmp10) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $retval=0;
      label = 14; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $27=$i;
      var $inc=((($27)+(1))|0);
      $i=$inc;
      label = 4; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $28=$c;
      $retval=$28;
      label = 14; break;
    case 14: 
      var $29=$retval;

      return $29;
  }

}
_getcached["X"]=1;

function _luaZ_init($L, $z, $reader, $data) {
  var label = 0;


  var $L_addr;
  var $z_addr;
  var $reader_addr;
  var $data_addr;
  $L_addr=$L;
  $z_addr=$z;
  $reader_addr=$reader;
  $data_addr=$data;
  var $0=$L_addr;
  var $1=$z_addr;
  var $L1=(($1+16)|0);
  HEAP32[(($L1)>>2)]=$0;
  var $2=$reader_addr;
  var $3=$z_addr;
  var $reader2=(($3+8)|0);
  HEAP32[(($reader2)>>2)]=$2;
  var $4=$data_addr;
  var $5=$z_addr;
  var $data3=(($5+12)|0);
  HEAP32[(($data3)>>2)]=$4;
  var $6=$z_addr;
  var $n=(($6)|0);
  HEAP32[(($n)>>2)]=0;
  var $7=$z_addr;
  var $p=(($7+4)|0);
  HEAP32[(($p)>>2)]=0;

  return;
}


function _pushclosure($L, $p, $encup, $base, $ra) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $p_addr;
      var $encup_addr;
      var $base_addr;
      var $ra_addr;
      var $nup;
      var $uv;
      var $i;
      var $ncl;
      var $io;
      $L_addr=$L;
      $p_addr=$p;
      $encup_addr=$encup;
      $base_addr=$base;
      $ra_addr=$ra;
      var $0=$p_addr;
      var $sizeupvalues=(($0+40)|0);
      var $1=HEAP32[(($sizeupvalues)>>2)];
      $nup=$1;
      var $2=$p_addr;
      var $upvalues=(($2+28)|0);
      var $3=HEAP32[(($upvalues)>>2)];
      $uv=$3;
      var $4=$L_addr;
      var $5=$nup;
      var $call=_luaF_newLclosure($4, $5);
      $ncl=$call;
      var $6=$p_addr;
      var $7=$ncl;
      var $l=$7;
      var $p1=(($l+12)|0);
      HEAP32[(($p1)>>2)]=$6;
      var $8=$ra_addr;
      $io=$8;
      var $9=$ncl;
      var $10=$9;
      var $11=$io;
      var $value_=(($11)|0);
      var $gc=$value_;
      HEAP32[(($gc)>>2)]=$10;
      var $12=$io;
      var $tt_=(($12+8)|0);
      HEAP32[(($tt_)>>2)]=70;
      $i=0;
      label = 3; break;
    case 3: 
      var $13=$i;
      var $14=$nup;
      var $cmp=(($13)|0) < (($14)|0);
      if ($cmp) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $15=$i;
      var $16=$uv;
      var $arrayidx=(($16+($15<<3))|0);
      var $instack=(($arrayidx+4)|0);
      var $17=HEAP8[($instack)];
      var $tobool=(($17 << 24) >> 24)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $18=$L_addr;
      var $19=$base_addr;
      var $20=$i;
      var $21=$uv;
      var $arrayidx2=(($21+($20<<3))|0);
      var $idx=(($arrayidx2+5)|0);
      var $22=HEAP8[($idx)];
      var $conv=(($22)&255);
      var $add_ptr=(($19+((($conv)*(12))&-1))|0);
      var $call3=_luaF_findupval($18, $add_ptr);
      var $23=$i;
      var $24=$ncl;
      var $l4=$24;
      var $upvals=(($l4+16)|0);
      var $arrayidx5=(($upvals+($23<<2))|0);
      HEAP32[(($arrayidx5)>>2)]=$call3;
      label = 7; break;
    case 6: 
      var $25=$i;
      var $26=$uv;
      var $arrayidx6=(($26+($25<<3))|0);
      var $idx7=(($arrayidx6+5)|0);
      var $27=HEAP8[($idx7)];
      var $idxprom=(($27)&255);
      var $28=$encup_addr;
      var $arrayidx8=(($28+($idxprom<<2))|0);
      var $29=HEAP32[(($arrayidx8)>>2)];
      var $30=$i;
      var $31=$ncl;
      var $l9=$31;
      var $upvals10=(($l9+16)|0);
      var $arrayidx11=(($upvals10+($30<<2))|0);
      HEAP32[(($arrayidx11)>>2)]=$29;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $32=$i;
      var $inc=((($32)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 9: 
      var $33=$p_addr;
      var $34=$33;
      var $gch=$34;
      var $marked=(($gch+5)|0);
      var $35=HEAP8[($marked)];
      var $conv12=(($35)&255);
      var $and=$conv12 & 4;
      var $tobool13=(($and)|0)!=0;
      if ($tobool13) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $36=$L_addr;
      var $37=$p_addr;
      var $38=$ncl;
      _luaC_barrierproto_($36, $37, $38);
      label = 11; break;
    case 11: 
      var $39=$ncl;
      var $40=$p_addr;
      var $cache=(($40+32)|0);
      HEAP32[(($cache)>>2)]=$39;

      return;
  }

}
_pushclosure["X"]=1;

function _luaZ_fill($z) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $z_addr;
      var $size=__stackBase__;
      var $L;
      var $buff;
      $z_addr=$z;
      var $0=$z_addr;
      var $L1=(($0+16)|0);
      var $1=HEAP32[(($L1)>>2)];
      $L=$1;
      var $2=$z_addr;
      var $reader=(($2+8)|0);
      var $3=HEAP32[(($reader)>>2)];
      var $4=$L;
      var $5=$z_addr;
      var $data=(($5+12)|0);
      var $6=HEAP32[(($data)>>2)];
      var $call=FUNCTION_TABLE[$3]($4, $6, $size);
      $buff=$call;
      var $7=$buff;
      var $cmp=(($7)|0)==0;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $8=HEAP32[(($size)>>2)];
      var $cmp2=(($8)|0)==0;
      if ($cmp2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $retval=-1;
      label = 6; break;
    case 5: 
      var $9=HEAP32[(($size)>>2)];
      var $sub=((($9)-(1))|0);
      var $10=$z_addr;
      var $n=(($10)|0);
      HEAP32[(($n)>>2)]=$sub;
      var $11=$buff;
      var $12=$z_addr;
      var $p=(($12+4)|0);
      HEAP32[(($p)>>2)]=$11;
      var $13=$z_addr;
      var $p3=(($13+4)|0);
      var $14=HEAP32[(($p3)>>2)];
      var $incdec_ptr=(($14+1)|0);
      HEAP32[(($p3)>>2)]=$incdec_ptr;
      var $15=HEAP8[($14)];
      var $conv=(($15)&255);
      $retval=$conv;
      label = 6; break;
    case 6: 
      var $16=$retval;
      STACKTOP = __stackBase__;
      return $16;
  }

}


function _luaZ_read($z, $b, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $z_addr;
      var $b_addr;
      var $n_addr;
      var $m;
      $z_addr=$z;
      $b_addr=$b;
      $n_addr=$n;
      label = 3; break;
    case 3: 
      var $0=$n_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $1=$z_addr;
      var $n1=(($1)|0);
      var $2=HEAP32[(($n1)>>2)];
      var $cmp=(($2)|0)==0;
      if ($cmp) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $3=$z_addr;
      var $call=_luaZ_fill($3);
      var $cmp2=(($call)|0)==-1;
      if ($cmp2) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $4=$n_addr;
      $retval=$4;
      label = 14; break;
    case 7: 
      var $5=$z_addr;
      var $n4=(($5)|0);
      var $6=HEAP32[(($n4)>>2)];
      var $inc=((($6)+(1))|0);
      HEAP32[(($n4)>>2)]=$inc;
      var $7=$z_addr;
      var $p=(($7+4)|0);
      var $8=HEAP32[(($p)>>2)];
      var $incdec_ptr=((($8)-(1))|0);
      HEAP32[(($p)>>2)]=$incdec_ptr;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $9=$n_addr;
      var $10=$z_addr;
      var $n6=(($10)|0);
      var $11=HEAP32[(($n6)>>2)];
      var $cmp7=(($9)>>>0) <= (($11)>>>0);
      if ($cmp7) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $12=$n_addr;
      var $cond = $12;label = 12; break;
    case 11: 
      var $13=$z_addr;
      var $n8=(($13)|0);
      var $14=HEAP32[(($n8)>>2)];
      var $cond = $14;label = 12; break;
    case 12: 
      var $cond;
      $m=$cond;
      var $15=$b_addr;
      var $16=$z_addr;
      var $p9=(($16+4)|0);
      var $17=HEAP32[(($p9)>>2)];
      var $18=$m;
      _memcpy($15, $17, $18);
      var $19=$m;
      var $20=$z_addr;
      var $n10=(($20)|0);
      var $21=HEAP32[(($n10)>>2)];
      var $sub=((($21)-($19))|0);
      HEAP32[(($n10)>>2)]=$sub;
      var $22=$m;
      var $23=$z_addr;
      var $p11=(($23+4)|0);
      var $24=HEAP32[(($p11)>>2)];
      var $add_ptr=(($24+$22)|0);
      HEAP32[(($p11)>>2)]=$add_ptr;
      var $25=$b_addr;
      var $26=$m;
      var $add_ptr12=(($25+$26)|0);
      $b_addr=$add_ptr12;
      var $27=$m;
      var $28=$n_addr;
      var $sub13=((($28)-($27))|0);
      $n_addr=$sub13;
      label = 3; break;
    case 13: 
      $retval=0;
      label = 14; break;
    case 14: 
      var $29=$retval;

      return $29;
  }

}
_luaZ_read["X"]=1;

function _luaL_traceback($L, $L1, $msg, $level) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 100)|0; _memset(__stackBase__, 0, 100);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $L1_addr;
      var $msg_addr;
      var $level_addr;
      var $ar=__stackBase__;
      var $top;
      var $numlevels;
      var $mark;
      $L_addr=$L;
      $L1_addr=$L1;
      $msg_addr=$msg;
      $level_addr=$level;
      var $0=$L_addr;
      var $call=_lua_gettop($0);
      $top=$call;
      var $1=$L1_addr;
      var $call1=_countlevels($1);
      $numlevels=$call1;
      var $2=$numlevels;
      var $cmp=(($2)|0) > 22;
      var $cond=$cmp ? 12 : 0;
      $mark=$cond;
      var $3=$msg_addr;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$L_addr;
      var $5=$msg_addr;
      var $call2=_lua_pushfstring($4, ((5248712)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$5,tempInt));
      label = 4; break;
    case 4: 
      var $6=$L_addr;
      var $call3=_lua_pushlstring($6, ((5252716)|0), 16);
      label = 5; break;
    case 5: 
      var $7=$L1_addr;
      var $8=$level_addr;
      var $inc=((($8)+(1))|0);
      $level_addr=$inc;
      var $call4=_lua_getstack($7, $8, $ar);
      var $tobool5=(($call4)|0)!=0;
      if ($tobool5) { label = 6; break; } else { label = 14; break; }
    case 6: 
      var $9=$level_addr;
      var $10=$mark;
      var $cmp6=(($9)|0)==(($10)|0);
      if ($cmp6) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $11=$L_addr;
      var $call8=_lua_pushlstring($11, ((5250720)|0), 5);
      var $12=$numlevels;
      var $sub=((($12)-(10))|0);
      $level_addr=$sub;
      label = 13; break;
    case 8: 
      var $13=$L1_addr;
      var $call9=_lua_getinfo($13, ((5248948)|0), $ar);
      var $14=$L_addr;
      var $short_src=(($ar+36)|0);
      var $arraydecay=(($short_src)|0);
      var $call10=_lua_pushfstring($14, ((5247688)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$arraydecay,tempInt));
      var $currentline=(($ar+20)|0);
      var $15=HEAP32[(($currentline)>>2)];
      var $cmp11=(($15)|0) > 0;
      if ($cmp11) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $16=$L_addr;
      var $currentline13=(($ar+20)|0);
      var $17=HEAP32[(($currentline13)>>2)];
      var $call14=_lua_pushfstring($16, ((5246760)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$17,tempInt));
      label = 10; break;
    case 10: 
      var $18=$L_addr;
      var $call16=_lua_pushlstring($18, ((5246472)|0), 4);
      var $19=$L_addr;
      _pushfuncname($19, $ar);
      var $istailcall=(($ar+35)|0);
      var $20=HEAP8[($istailcall)];
      var $tobool17=(($20 << 24) >> 24)!=0;
      if ($tobool17) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $21=$L_addr;
      var $call19=_lua_pushlstring($21, ((5246032)|0), 20);
      label = 12; break;
    case 12: 
      var $22=$L_addr;
      var $23=$L_addr;
      var $call21=_lua_gettop($23);
      var $24=$top;
      var $sub22=((($call21)-($24))|0);
      _lua_concat($22, $sub22);
      label = 13; break;
    case 13: 
      label = 5; break;
    case 14: 
      var $25=$L_addr;
      var $26=$L_addr;
      var $call24=_lua_gettop($26);
      var $27=$top;
      var $sub25=((($call24)-($27))|0);
      _lua_concat($25, $sub25);
      STACKTOP = __stackBase__;
      return;
  }

}
_luaL_traceback["X"]=1;

function _countlevels($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 100)|0; _memset(__stackBase__, 0, 100);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $ar=__stackBase__;
      var $li;
      var $le;
      var $m;
      $L_addr=$L;
      $li=1;
      $le=1;
      label = 3; break;
    case 3: 
      var $0=$L_addr;
      var $1=$le;
      var $call=_lua_getstack($0, $1, $ar);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $2=$le;
      $li=$2;
      var $3=$le;
      var $mul=($3<<1);
      $le=$mul;
      label = 3; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $4=$li;
      var $5=$le;
      var $cmp=(($4)|0) < (($5)|0);
      if ($cmp) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $6=$li;
      var $7=$le;
      var $add=((($6)+($7))|0);
      var $div=((((($add)|0))/(2))&-1);
      $m=$div;
      var $8=$L_addr;
      var $9=$m;
      var $call3=_lua_getstack($8, $9, $ar);
      var $tobool4=(($call3)|0)!=0;
      if ($tobool4) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $10=$m;
      var $add5=((($10)+(1))|0);
      $li=$add5;
      label = 10; break;
    case 9: 
      var $11=$m;
      $le=$11;
      label = 10; break;
    case 10: 
      label = 6; break;
    case 11: 
      var $12=$le;
      var $sub=((($12)-(1))|0);
      STACKTOP = __stackBase__;
      return $sub;
  }

}


function _traceexec($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $ci;
      var $mask;
      var $counthook;
      var $p;
      var $npc;
      var $newline;
      $L_addr=$L;
      var $0=$L_addr;
      var $ci1=(($0+16)|0);
      var $1=HEAP32[(($ci1)>>2)];
      $ci=$1;
      var $2=$L_addr;
      var $hookmask=(($2+40)|0);
      var $3=HEAP8[($hookmask)];
      $mask=$3;
      var $4=$mask;
      var $conv=(($4)&255);
      var $and=$conv & 8;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 3; break; } else { var $7 = 0;label = 4; break; }
    case 3: 
      var $5=$L_addr;
      var $hookcount=(($5+48)|0);
      var $6=HEAP32[(($hookcount)>>2)];
      var $cmp=(($6)|0)==0;
      var $7 = $cmp;label = 4; break;
    case 4: 
      var $7;
      var $land_ext=(($7)&1);
      $counthook=$land_ext;
      var $8=$counthook;
      var $tobool3=(($8)|0)!=0;
      if ($tobool3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $9=$L_addr;
      var $basehookcount=(($9+44)|0);
      var $10=HEAP32[(($basehookcount)>>2)];
      var $11=$L_addr;
      var $hookcount4=(($11+48)|0);
      HEAP32[(($hookcount4)>>2)]=$10;
      label = 6; break;
    case 6: 
      var $12=$ci;
      var $callstatus=(($12+18)|0);
      var $13=HEAP8[($callstatus)];
      var $conv5=(($13)&255);
      var $and6=$conv5 & 128;
      var $tobool7=(($and6)|0)!=0;
      if ($tobool7) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $14=$ci;
      var $callstatus9=(($14+18)|0);
      var $15=HEAP8[($callstatus9)];
      var $conv10=(($15)&255);
      var $and11=$conv10 & -129;
      var $conv12=(($and11) & 255);
      HEAP8[($callstatus9)]=$conv12;
      label = 26; break;
    case 8: 
      var $16=$counthook;
      var $tobool14=(($16)|0)!=0;
      if ($tobool14) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $17=$L_addr;
      _luaD_hook($17, 3, -1);
      label = 10; break;
    case 10: 
      var $18=$mask;
      var $conv17=(($18)&255);
      var $and18=$conv17 & 4;
      var $tobool19=(($and18)|0)!=0;
      if ($tobool19) { label = 11; break; } else { label = 22; break; }
    case 11: 
      var $19=$ci;
      var $func=(($19)|0);
      var $20=HEAP32[(($func)>>2)];
      var $value_=(($20)|0);
      var $gc=$value_;
      var $21=HEAP32[(($gc)>>2)];
      var $cl=$21;
      var $l=$cl;
      var $p21=(($l+12)|0);
      var $22=HEAP32[(($p21)>>2)];
      $p=$22;
      var $23=$ci;
      var $u=(($23+24)|0);
      var $l22=$u;
      var $savedpc=(($l22+4)|0);
      var $24=HEAP32[(($savedpc)>>2)];
      var $25=$p;
      var $code=(($25+12)|0);
      var $26=HEAP32[(($code)>>2)];
      var $sub_ptr_lhs_cast=$24;
      var $sub_ptr_rhs_cast=$26;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(4))&-1);
      var $sub=((($sub_ptr_div)-(1))|0);
      $npc=$sub;
      var $27=$p;
      var $lineinfo=(($27+20)|0);
      var $28=HEAP32[(($lineinfo)>>2)];
      var $tobool23=(($28)|0)!=0;
      if ($tobool23) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $29=$npc;
      var $30=$p;
      var $lineinfo24=(($30+20)|0);
      var $31=HEAP32[(($lineinfo24)>>2)];
      var $arrayidx=(($31+($29<<2))|0);
      var $32=HEAP32[(($arrayidx)>>2)];
      var $cond = $32;label = 14; break;
    case 13: 
      var $cond = 0;label = 14; break;
    case 14: 
      var $cond;
      $newline=$cond;
      var $33=$npc;
      var $cmp25=(($33)|0)==0;
      if ($cmp25) { label = 20; break; } else { label = 15; break; }
    case 15: 
      var $34=$ci;
      var $u27=(($34+24)|0);
      var $l28=$u27;
      var $savedpc29=(($l28+4)|0);
      var $35=HEAP32[(($savedpc29)>>2)];
      var $36=$L_addr;
      var $oldpc=(($36+20)|0);
      var $37=HEAP32[(($oldpc)>>2)];
      var $cmp30=(($35)>>>0) <= (($37)>>>0);
      if ($cmp30) { label = 20; break; } else { label = 16; break; }
    case 16: 
      var $38=$newline;
      var $39=$p;
      var $lineinfo33=(($39+20)|0);
      var $40=HEAP32[(($lineinfo33)>>2)];
      var $tobool34=(($40)|0)!=0;
      if ($tobool34) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $41=$L_addr;
      var $oldpc36=(($41+20)|0);
      var $42=HEAP32[(($oldpc36)>>2)];
      var $43=$p;
      var $code37=(($43+12)|0);
      var $44=HEAP32[(($code37)>>2)];
      var $sub_ptr_lhs_cast38=$42;
      var $sub_ptr_rhs_cast39=$44;
      var $sub_ptr_sub40=((($sub_ptr_lhs_cast38)-($sub_ptr_rhs_cast39))|0);
      var $sub_ptr_div41=((((($sub_ptr_sub40)|0))/(4))&-1);
      var $sub42=((($sub_ptr_div41)-(1))|0);
      var $45=$p;
      var $lineinfo43=(($45+20)|0);
      var $46=HEAP32[(($lineinfo43)>>2)];
      var $arrayidx44=(($46+($sub42<<2))|0);
      var $47=HEAP32[(($arrayidx44)>>2)];
      var $cond47 = $47;label = 19; break;
    case 18: 
      var $cond47 = 0;label = 19; break;
    case 19: 
      var $cond47;
      var $cmp48=(($38)|0)!=(($cond47)|0);
      if ($cmp48) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $48=$L_addr;
      var $49=$newline;
      _luaD_hook($48, 2, $49);
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $50=$ci;
      var $u53=(($50+24)|0);
      var $l54=$u53;
      var $savedpc55=(($l54+4)|0);
      var $51=HEAP32[(($savedpc55)>>2)];
      var $52=$L_addr;
      var $oldpc56=(($52+20)|0);
      HEAP32[(($oldpc56)>>2)]=$51;
      var $53=$L_addr;
      var $status=(($53+6)|0);
      var $54=HEAP8[($status)];
      var $conv57=(($54)&255);
      var $cmp58=(($conv57)|0)==1;
      if ($cmp58) { label = 23; break; } else { label = 26; break; }
    case 23: 
      var $55=$counthook;
      var $tobool61=(($55)|0)!=0;
      if ($tobool61) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $56=$L_addr;
      var $hookcount63=(($56+48)|0);
      HEAP32[(($hookcount63)>>2)]=1;
      label = 25; break;
    case 25: 
      var $57=$ci;
      var $u65=(($57+24)|0);
      var $l66=$u65;
      var $savedpc67=(($l66+4)|0);
      var $58=HEAP32[(($savedpc67)>>2)];
      var $incdec_ptr=((($58)-(4))|0);
      HEAP32[(($savedpc67)>>2)]=$incdec_ptr;
      var $59=$ci;
      var $callstatus68=(($59+18)|0);
      var $60=HEAP8[($callstatus68)];
      var $conv69=(($60)&255);
      var $or=$conv69 | 128;
      var $conv70=(($or) & 255);
      HEAP8[($callstatus68)]=$conv70;
      var $61=$L_addr;
      var $top=(($61+8)|0);
      var $62=HEAP32[(($top)>>2)];
      var $add_ptr=((($62)-(12))|0);
      var $63=$ci;
      var $func71=(($63)|0);
      HEAP32[(($func71)>>2)]=$add_ptr;
      var $64=$L_addr;
      _luaD_throw($64, 1);

    case 26: 

      return;
  }

}
_traceexec["X"]=1;

function _luaZ_openspace($L, $buff, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $buff_addr;
      var $n_addr;
      $L_addr=$L;
      $buff_addr=$buff;
      $n_addr=$n;
      var $0=$n_addr;
      var $1=$buff_addr;
      var $buffsize=(($1+8)|0);
      var $2=HEAP32[(($buffsize)>>2)];
      var $cmp=(($0)>>>0) > (($2)>>>0);
      if ($cmp) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $3=$n_addr;
      var $cmp1=(($3)>>>0) < 32;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $n_addr=32;
      label = 5; break;
    case 5: 
      var $4=$n_addr;
      var $add=((($4)+(1))|0);
      var $cmp3=(($add)>>>0) > 4294967293;
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $5=$L_addr;
      _luaM_toobig($5);

      label = 8; break;
    case 7: 
      var $7=$L_addr;
      var $8=$buff_addr;
      var $buffer=(($8)|0);
      var $9=HEAP32[(($buffer)>>2)];
      var $10=$buff_addr;
      var $buffsize4=(($10+8)|0);
      var $11=HEAP32[(($buffsize4)>>2)];
      var $mul=$11;
      var $12=$n_addr;
      var $mul5=$12;
      var $call=_luaM_realloc_($7, $9, $mul, $mul5);
      var $cond = $call;label = 8; break;
    case 8: 
      var $cond;
      var $13=$buff_addr;
      var $buffer6=(($13)|0);
      HEAP32[(($buffer6)>>2)]=$cond;
      var $14=$n_addr;
      var $15=$buff_addr;
      var $buffsize7=(($15+8)|0);
      HEAP32[(($buffsize7)>>2)]=$14;
      label = 9; break;
    case 9: 
      var $16=$buff_addr;
      var $buffer9=(($16)|0);
      var $17=HEAP32[(($buffer9)>>2)];

      return $17;
  }

}
_luaZ_openspace["X"]=1;

function _pushfuncname($L, $ar) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $ar_addr;
      $L_addr=$L;
      $ar_addr=$ar;
      var $0=$ar_addr;
      var $namewhat=(($0+8)|0);
      var $1=HEAP32[(($namewhat)>>2)];
      var $2=HEAP8[($1)];
      var $conv=(($2 << 24) >> 24);
      var $cmp=(($conv)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$L_addr;
      var $4=$ar_addr;
      var $name=(($4+4)|0);
      var $5=HEAP32[(($name)>>2)];
      var $call=_lua_pushfstring($3, ((5247052)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$5,tempInt));
      label = 14; break;
    case 4: 
      var $6=$ar_addr;
      var $what=(($6+12)|0);
      var $7=HEAP32[(($what)>>2)];
      var $8=HEAP8[($7)];
      var $conv2=(($8 << 24) >> 24);
      var $cmp3=(($conv2)|0)==109;
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $9=$L_addr;
      var $call6=_lua_pushfstring($9, ((5246928)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 13; break;
    case 6: 
      var $10=$ar_addr;
      var $what8=(($10+12)|0);
      var $11=HEAP32[(($what8)>>2)];
      var $12=HEAP8[($11)];
      var $conv9=(($12 << 24) >> 24);
      var $cmp10=(($conv9)|0)==67;
      if ($cmp10) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $13=$L_addr;
      var $14=$ar_addr;
      var $call13=_pushglobalfuncname($13, $14);
      var $tobool=(($call13)|0)!=0;
      if ($tobool) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $15=$L_addr;
      var $16=$L_addr;
      var $call15=_lua_tolstring($16, -1, 0);
      var $call16=_lua_pushfstring($15, ((5247052)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$call15,tempInt));
      var $17=$L_addr;
      _lua_remove($17, -2);
      label = 10; break;
    case 9: 
      var $18=$L_addr;
      var $call18=_lua_pushlstring($18, ((5253020)|0), 1);
      label = 10; break;
    case 10: 
      label = 12; break;
    case 11: 
      var $19=$L_addr;
      var $20=$ar_addr;
      var $short_src=(($20+36)|0);
      var $arraydecay=(($short_src)|0);
      var $21=$ar_addr;
      var $linedefined=(($21+24)|0);
      var $22=HEAP32[(($linedefined)>>2)];
      var $call20=_lua_pushfstring($19, ((5246868)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempInt)>>2)]=$arraydecay,HEAP32[(((tempInt)+(4))>>2)]=$22,tempInt));
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      STACKTOP = __stackBase__;
      return;
  }

}
_pushfuncname["X"]=1;

function _luaL_argerror($L, $narg, $extramsg) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 100)|0; _memset(__stackBase__, 0, 100);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $narg_addr;
      var $extramsg_addr;
      var $ar=__stackBase__;
      $L_addr=$L;
      $narg_addr=$narg;
      $extramsg_addr=$extramsg;
      var $0=$L_addr;
      var $call=_lua_getstack($0, 0, $ar);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $1=$L_addr;
      var $2=$narg_addr;
      var $3=$extramsg_addr;
      var $call1=_luaL_error($1, ((5245708)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempInt)>>2)]=$2,HEAP32[(((tempInt)+(4))>>2)]=$3,tempInt));
      $retval=$call1;
      label = 14; break;
    case 4: 
      var $4=$L_addr;
      var $call2=_lua_getinfo($4, ((5245472)|0), $ar);
      var $namewhat=(($ar+8)|0);
      var $5=HEAP32[(($namewhat)>>2)];
      var $call3=_strcmp($5, ((5253668)|0));
      var $cmp=(($call3)|0)==0;
      if ($cmp) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $6=$narg_addr;
      var $dec=((($6)-(1))|0);
      $narg_addr=$dec;
      var $7=$narg_addr;
      var $cmp5=(($7)|0)==0;
      if ($cmp5) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $8=$L_addr;
      var $name=(($ar+4)|0);
      var $9=HEAP32[(($name)>>2)];
      var $call7=_luaL_error($8, ((5253320)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$9,tempInt));
      $retval=$call7;
      label = 14; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $name10=(($ar+4)|0);
      var $10=HEAP32[(($name10)>>2)];
      var $cmp11=(($10)|0)==0;
      if ($cmp11) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $11=$L_addr;
      var $call13=_pushglobalfuncname($11, $ar);
      var $tobool14=(($call13)|0)!=0;
      if ($tobool14) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $12=$L_addr;
      var $call15=_lua_tolstring($12, -1, 0);
      var $cond = $call15;label = 12; break;
    case 11: 
      var $cond = ((5253020)|0);label = 12; break;
    case 12: 
      var $cond;
      var $name16=(($ar+4)|0);
      HEAP32[(($name16)>>2)]=$cond;
      label = 13; break;
    case 13: 
      var $13=$L_addr;
      var $14=$narg_addr;
      var $name18=(($ar+4)|0);
      var $15=HEAP32[(($name18)>>2)];
      var $16=$extramsg_addr;
      var $call19=_luaL_error($13, ((5252768)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 12),STACKTOP = (STACKTOP + 12)|0,HEAP32[((tempInt)>>2)]=$14,HEAP32[(((tempInt)+(4))>>2)]=$15,HEAP32[(((tempInt)+(8))>>2)]=$16,tempInt));
      $retval=$call19;
      label = 14; break;
    case 14: 
      var $17=$retval;
      STACKTOP = __stackBase__;
      return $17;
  }

}
_luaL_argerror["X"]=1;

function _luaL_error($L, $fmt, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);

  var $L_addr;
  var $fmt_addr;
  var $argp=__stackBase__;
  $L_addr=$L;
  $fmt_addr=$fmt;
  var $argp1=$argp;
  HEAP32[(($argp1)>>2)]=varrp;
  var $0=$L_addr;
  _luaL_where($0, 1);
  var $1=$L_addr;
  var $2=$fmt_addr;
  var $3=HEAP32[(($argp)>>2)];
  var $call=_lua_pushvfstring($1, $2, $3);
  var $argp2=$argp;

  var $4=$L_addr;
  _lua_concat($4, 2);
  var $5=$L_addr;
  var $call3=_lua_error($5);
  STACKTOP = __stackBase__;
  return $call3;
}


function _pushglobalfuncname($L, $ar) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $ar_addr;
      var $top;
      $L_addr=$L;
      $ar_addr=$ar;
      var $0=$L_addr;
      var $call=_lua_gettop($0);
      $top=$call;
      var $1=$L_addr;
      var $2=$ar_addr;
      var $call1=_lua_getinfo($1, ((5247260)|0), $2);
      var $3=$L_addr;
      _lua_rawgeti($3, -1001000, 2);
      var $4=$L_addr;
      var $5=$top;
      var $add=((($5)+(1))|0);
      var $call2=_findfield($4, $add, 2);
      var $tobool=(($call2)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $6=$L_addr;
      var $7=$top;
      var $add3=((($7)+(1))|0);
      _lua_copy($6, -1, $add3);
      var $8=$L_addr;
      _lua_settop($8, -3);
      $retval=1;
      label = 5; break;
    case 4: 
      var $9=$L_addr;
      var $10=$top;
      _lua_settop($9, $10);
      $retval=0;
      label = 5; break;
    case 5: 
      var $11=$retval;

      return $11;
  }

}


function _luaL_where($L, $level) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 100)|0; _memset(__stackBase__, 0, 100);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $level_addr;
      var $ar=__stackBase__;
      $L_addr=$L;
      $level_addr=$level;
      var $0=$L_addr;
      var $1=$level_addr;
      var $call=_lua_getstack($0, $1, $ar);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $2=$L_addr;
      var $call1=_lua_getinfo($2, ((5252600)|0), $ar);
      var $currentline=(($ar+20)|0);
      var $3=HEAP32[(($currentline)>>2)];
      var $cmp=(($3)|0) > 0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$L_addr;
      var $short_src=(($ar+36)|0);
      var $arraydecay=(($short_src)|0);
      var $currentline3=(($ar+20)|0);
      var $5=HEAP32[(($currentline3)>>2)];
      var $call4=_lua_pushfstring($4, ((5252408)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempInt)>>2)]=$arraydecay,HEAP32[(((tempInt)+(4))>>2)]=$5,tempInt));
      label = 7; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $6=$L_addr;
      var $call6=_lua_pushlstring($6, ((5252172)|0), 0);
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
  }

}


function _luaL_fileresult($L, $stat, $fname) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $stat_addr;
      var $fname_addr;
      var $en;
      $L_addr=$L;
      $stat_addr=$stat;
      $fname_addr=$fname;
      var $call=___errno_location();
      var $0=HEAP32[(($call)>>2)];
      $en=$0;
      var $1=$stat_addr;
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$L_addr;
      _lua_pushboolean($2, 1);
      $retval=1;
      label = 8; break;
    case 4: 
      var $3=$L_addr;
      _lua_pushnil($3);
      var $4=$fname_addr;
      var $tobool1=(($4)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $5=$L_addr;
      var $6=$fname_addr;
      var $7=$en;
      var $call3=_strerror($7);
      var $call4=_lua_pushfstring($5, ((5251976)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempInt)>>2)]=$6,HEAP32[(((tempInt)+(4))>>2)]=$call3,tempInt));
      label = 7; break;
    case 6: 
      var $8=$L_addr;
      var $9=$en;
      var $call6=_strerror($9);
      var $call7=_lua_pushfstring($8, ((5251776)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$call6,tempInt));
      label = 7; break;
    case 7: 
      var $10=$L_addr;
      var $11=$en;
      _lua_pushinteger($10, $11);
      $retval=3;
      label = 8; break;
    case 8: 
      var $12=$retval;
      STACKTOP = __stackBase__;
      return $12;
  }

}


function _luaL_execresult($L, $stat) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $stat_addr;
      var $what;
      $L_addr=$L;
      $stat_addr=$stat;
      $what=((5251588)|0);
      var $0=$stat_addr;
      var $cmp=(($0)|0)==-1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$L_addr;
      var $call=_luaL_fileresult($1, 0, 0);
      $retval=$call;
      label = 9; break;
    case 4: 
      var $2=$what;
      var $3=HEAP8[($2)];
      var $conv=(($3 << 24) >> 24);
      var $cmp1=(($conv)|0)==101;
      if ($cmp1) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $4=$stat_addr;
      var $cmp3=(($4)|0)==0;
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $5=$L_addr;
      _lua_pushboolean($5, 1);
      label = 8; break;
    case 7: 
      var $6=$L_addr;
      _lua_pushnil($6);
      label = 8; break;
    case 8: 
      var $7=$L_addr;
      var $8=$what;
      var $call7=_lua_pushstring($7, $8);
      var $9=$L_addr;
      var $10=$stat_addr;
      _lua_pushinteger($9, $10);
      $retval=3;
      label = 9; break;
    case 9: 
      var $11=$retval;

      return $11;
  }

}


function _luaL_newmetatable($L, $tname) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $tname_addr;
      $L_addr=$L;
      $tname_addr=$tname;
      var $0=$L_addr;
      var $1=$tname_addr;
      _lua_getfield($0, -1001000, $1);
      var $2=$L_addr;
      var $call=_lua_type($2, -1);
      var $cmp=(($call)|0)==0;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $retval=0;
      label = 5; break;
    case 4: 
      var $3=$L_addr;
      _lua_settop($3, -2);
      var $4=$L_addr;
      _lua_createtable($4, 0, 0);
      var $5=$L_addr;
      _lua_pushvalue($5, -1);
      var $6=$L_addr;
      var $7=$tname_addr;
      _lua_setfield($6, -1001000, $7);
      $retval=1;
      label = 5; break;
    case 5: 
      var $8=$retval;

      return $8;
  }

}


function _luaL_setmetatable($L, $tname) {
  var label = 0;


  var $L_addr;
  var $tname_addr;
  $L_addr=$L;
  $tname_addr=$tname;
  var $0=$L_addr;
  var $1=$tname_addr;
  _lua_getfield($0, -1001000, $1);
  var $2=$L_addr;
  var $call=_lua_setmetatable($2, -2);

  return;
}


function _luaL_testudata($L, $ud, $tname) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $ud_addr;
      var $tname_addr;
      var $p;
      $L_addr=$L;
      $ud_addr=$ud;
      $tname_addr=$tname;
      var $0=$L_addr;
      var $1=$ud_addr;
      var $call=_lua_touserdata($0, $1);
      $p=$call;
      var $2=$p;
      var $cmp=(($2)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $3=$L_addr;
      var $4=$ud_addr;
      var $call1=_lua_getmetatable($3, $4);
      var $tobool=(($call1)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $5=$L_addr;
      var $6=$tname_addr;
      _lua_getfield($5, -1001000, $6);
      var $7=$L_addr;
      var $call3=_lua_rawequal($7, -1, -2);
      var $tobool4=(($call3)|0)!=0;
      if ($tobool4) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $p=0;
      label = 6; break;
    case 6: 
      var $8=$L_addr;
      _lua_settop($8, -3);
      var $9=$p;
      $retval=$9;
      label = 9; break;
    case 7: 
      label = 8; break;
    case 8: 
      $retval=0;
      label = 9; break;
    case 9: 
      var $10=$retval;

      return $10;
  }

}


function _luaL_checkudata($L, $ud, $tname) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $ud_addr;
      var $tname_addr;
      var $p;
      $L_addr=$L;
      $ud_addr=$ud;
      $tname_addr=$tname;
      var $0=$L_addr;
      var $1=$ud_addr;
      var $2=$tname_addr;
      var $call=_luaL_testudata($0, $1, $2);
      $p=$call;
      var $3=$p;
      var $cmp=(($3)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$L_addr;
      var $5=$ud_addr;
      var $6=$tname_addr;
      var $call1=_typeerror($4, $5, $6);
      label = 4; break;
    case 4: 
      var $7=$p;

      return $7;
  }

}


function _typeerror($L, $narg, $tname) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);

  var $L_addr;
  var $narg_addr;
  var $tname_addr;
  var $msg;
  $L_addr=$L;
  $narg_addr=$narg;
  $tname_addr=$tname;
  var $0=$L_addr;
  var $1=$tname_addr;
  var $2=$L_addr;
  var $3=$L_addr;
  var $4=$narg_addr;
  var $call=_lua_type($3, $4);
  var $call1=_lua_typename($2, $call);
  var $call2=_lua_pushfstring($0, ((5247352)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempInt)>>2)]=$1,HEAP32[(((tempInt)+(4))>>2)]=$call1,tempInt));
  $msg=$call2;
  var $5=$L_addr;
  var $6=$narg_addr;
  var $7=$msg;
  var $call3=_luaL_argerror($5, $6, $7);
  STACKTOP = __stackBase__;
  return $call3;
}


function _luaL_checkoption($L, $narg, $def, $lst) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $narg_addr;
      var $def_addr;
      var $lst_addr;
      var $name;
      var $i;
      $L_addr=$L;
      $narg_addr=$narg;
      $def_addr=$def;
      $lst_addr=$lst;
      var $0=$def_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$L_addr;
      var $2=$narg_addr;
      var $3=$def_addr;
      var $call=_luaL_optlstring($1, $2, $3, 0);
      var $cond = $call;label = 5; break;
    case 4: 
      var $4=$L_addr;
      var $5=$narg_addr;
      var $call1=_luaL_checklstring($4, $5, 0);
      var $cond = $call1;label = 5; break;
    case 5: 
      var $cond;
      $name=$cond;
      $i=0;
      label = 6; break;
    case 6: 
      var $6=$i;
      var $7=$lst_addr;
      var $arrayidx=(($7+($6<<2))|0);
      var $8=HEAP32[(($arrayidx)>>2)];
      var $tobool2=(($8)|0)!=0;
      if ($tobool2) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $9=$i;
      var $10=$lst_addr;
      var $arrayidx3=(($10+($9<<2))|0);
      var $11=HEAP32[(($arrayidx3)>>2)];
      var $12=$name;
      var $call4=_strcmp($11, $12);
      var $cmp=(($call4)|0)==0;
      if ($cmp) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $13=$i;
      $retval=$13;
      label = 12; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $14=$i;
      var $inc=((($14)+(1))|0);
      $i=$inc;
      label = 6; break;
    case 11: 
      var $15=$L_addr;
      var $16=$narg_addr;
      var $17=$L_addr;
      var $18=$name;
      var $call5=_lua_pushfstring($17, ((5251372)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$18,tempInt));
      var $call6=_luaL_argerror($15, $16, $call5);
      $retval=$call6;
      label = 12; break;
    case 12: 
      var $19=$retval;
      STACKTOP = __stackBase__;
      return $19;
  }

}
_luaL_checkoption["X"]=1;

function _luaL_optlstring($L, $narg, $def, $len) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $narg_addr;
      var $def_addr;
      var $len_addr;
      $L_addr=$L;
      $narg_addr=$narg;
      $def_addr=$def;
      $len_addr=$len;
      var $0=$L_addr;
      var $1=$narg_addr;
      var $call=_lua_type($0, $1);
      var $cmp=(($call)|0) <= 0;
      if ($cmp) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $2=$len_addr;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $3=$def_addr;
      var $tobool2=(($3)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $4=$def_addr;
      var $call3=_strlen($4);
      var $cond = $call3;label = 7; break;
    case 6: 
      var $cond = 0;label = 7; break;
    case 7: 
      var $cond;
      var $5=$len_addr;
      HEAP32[(($5)>>2)]=$cond;
      label = 8; break;
    case 8: 
      var $6=$def_addr;
      $retval=$6;
      label = 10; break;
    case 9: 
      var $7=$L_addr;
      var $8=$narg_addr;
      var $9=$len_addr;
      var $call4=_luaL_checklstring($7, $8, $9);
      $retval=$call4;
      label = 10; break;
    case 10: 
      var $10=$retval;

      return $10;
  }

}


function _luaL_checklstring($L, $narg, $len) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $narg_addr;
      var $len_addr;
      var $s;
      $L_addr=$L;
      $narg_addr=$narg;
      $len_addr=$len;
      var $0=$L_addr;
      var $1=$narg_addr;
      var $2=$len_addr;
      var $call=_lua_tolstring($0, $1, $2);
      $s=$call;
      var $3=$s;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $4=$L_addr;
      var $5=$narg_addr;
      _tag_error($4, $5, 4);
      label = 4; break;
    case 4: 
      var $6=$s;

      return $6;
  }

}


function _luaL_checkstack($L, $space, $msg) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $space_addr;
      var $msg_addr;
      var $extra;
      $L_addr=$L;
      $space_addr=$space;
      $msg_addr=$msg;
      $extra=20;
      var $0=$L_addr;
      var $1=$space_addr;
      var $add=((($1)+(20))|0);
      var $call=_lua_checkstack($0, $add);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 3; break; }
    case 3: 
      var $2=$msg_addr;
      var $tobool1=(($2)|0)!=0;
      if ($tobool1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$L_addr;
      var $4=$msg_addr;
      var $call3=_luaL_error($3, ((5251192)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$4,tempInt));
      label = 6; break;
    case 5: 
      var $5=$L_addr;
      var $call4=_luaL_error($5, ((5250984)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
  }

}


function _luaL_checktype($L, $narg, $t) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $narg_addr;
      var $t_addr;
      $L_addr=$L;
      $narg_addr=$narg;
      $t_addr=$t;
      var $0=$L_addr;
      var $1=$narg_addr;
      var $call=_lua_type($0, $1);
      var $2=$t_addr;
      var $cmp=(($call)|0)!=(($2)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$L_addr;
      var $4=$narg_addr;
      var $5=$t_addr;
      _tag_error($3, $4, $5);
      label = 4; break;
    case 4: 

      return;
  }

}


function _tag_error($L, $narg, $tag) {
  var label = 0;


  var $L_addr;
  var $narg_addr;
  var $tag_addr;
  $L_addr=$L;
  $narg_addr=$narg;
  $tag_addr=$tag;
  var $0=$L_addr;
  var $1=$narg_addr;
  var $2=$L_addr;
  var $3=$tag_addr;
  var $call=_lua_typename($2, $3);
  var $call1=_typeerror($0, $1, $call);

  return;
}


function _luaL_checkany($L, $narg) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $narg_addr;
      $L_addr=$L;
      $narg_addr=$narg;
      var $0=$L_addr;
      var $1=$narg_addr;
      var $call=_lua_type($0, $1);
      var $cmp=(($call)|0)==-1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$L_addr;
      var $3=$narg_addr;
      var $call1=_luaL_argerror($2, $3, ((5250756)|0));
      label = 4; break;
    case 4: 

      return;
  }

}


function _luaL_checknumber($L, $narg) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $narg_addr;
      var $isnum=__stackBase__;
      var $d;
      $L_addr=$L;
      $narg_addr=$narg;
      var $0=$L_addr;
      var $1=$narg_addr;
      var $call=_lua_tonumberx($0, $1, $isnum);
      $d=$call;
      var $2=HEAP32[(($isnum)>>2)];
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $3=$L_addr;
      var $4=$narg_addr;
      _tag_error($3, $4, 3);
      label = 4; break;
    case 4: 
      var $5=$d;
      STACKTOP = __stackBase__;
      return $5;
  }

}


function _luaL_optnumber($L, $narg, $def) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $narg_addr;
      var $def_addr;
      $L_addr=$L;
      $narg_addr=$narg;
      $def_addr=$def;
      var $0=$L_addr;
      var $1=$narg_addr;
      var $call=_lua_type($0, $1);
      var $cmp=(($call)|0) <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$def_addr;
      var $cond = $2;label = 5; break;
    case 4: 
      var $3=$L_addr;
      var $4=$narg_addr;
      var $call1=_luaL_checknumber($3, $4);
      var $cond = $call1;label = 5; break;
    case 5: 
      var $cond;

      return $cond;
  }

}


function _luaL_checkinteger($L, $narg) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $narg_addr;
      var $isnum=__stackBase__;
      var $d;
      $L_addr=$L;
      $narg_addr=$narg;
      var $0=$L_addr;
      var $1=$narg_addr;
      var $call=_lua_tointegerx($0, $1, $isnum);
      $d=$call;
      var $2=HEAP32[(($isnum)>>2)];
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $3=$L_addr;
      var $4=$narg_addr;
      _tag_error($3, $4, 3);
      label = 4; break;
    case 4: 
      var $5=$d;
      STACKTOP = __stackBase__;
      return $5;
  }

}


function _luaL_checkunsigned($L, $narg) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $narg_addr;
      var $isnum=__stackBase__;
      var $d;
      $L_addr=$L;
      $narg_addr=$narg;
      var $0=$L_addr;
      var $1=$narg_addr;
      var $call=_lua_tounsignedx($0, $1, $isnum);
      $d=$call;
      var $2=HEAP32[(($isnum)>>2)];
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $3=$L_addr;
      var $4=$narg_addr;
      _tag_error($3, $4, 3);
      label = 4; break;
    case 4: 
      var $5=$d;
      STACKTOP = __stackBase__;
      return $5;
  }

}


function _luaL_optinteger($L, $narg, $def) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $narg_addr;
      var $def_addr;
      $L_addr=$L;
      $narg_addr=$narg;
      $def_addr=$def;
      var $0=$L_addr;
      var $1=$narg_addr;
      var $call=_lua_type($0, $1);
      var $cmp=(($call)|0) <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$def_addr;
      var $cond = $2;label = 5; break;
    case 4: 
      var $3=$L_addr;
      var $4=$narg_addr;
      var $call1=_luaL_checkinteger($3, $4);
      var $cond = $call1;label = 5; break;
    case 5: 
      var $cond;

      return $cond;
  }

}


function _luaL_buffinit($L, $B) {
  var label = 0;


  var $L_addr;
  var $B_addr;
  $L_addr=$L;
  $B_addr=$B;
  var $0=$L_addr;
  var $1=$B_addr;
  var $L1=(($1+12)|0);
  HEAP32[(($L1)>>2)]=$0;
  var $2=$B_addr;
  var $initb=(($2+16)|0);
  var $arraydecay=(($initb)|0);
  var $3=$B_addr;
  var $b=(($3)|0);
  HEAP32[(($b)>>2)]=$arraydecay;
  var $4=$B_addr;
  var $n=(($4+8)|0);
  HEAP32[(($n)>>2)]=0;
  var $5=$B_addr;
  var $size=(($5+4)|0);
  HEAP32[(($size)>>2)]=1024;

  return;
}


function _luaL_prepbuffsize($B, $sz) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $B_addr;
      var $sz_addr;
      var $L;
      var $newbuff;
      var $newsize;
      $B_addr=$B;
      $sz_addr=$sz;
      var $0=$B_addr;
      var $L1=(($0+12)|0);
      var $1=HEAP32[(($L1)>>2)];
      $L=$1;
      var $2=$B_addr;
      var $size=(($2+4)|0);
      var $3=HEAP32[(($size)>>2)];
      var $4=$B_addr;
      var $n=(($4+8)|0);
      var $5=HEAP32[(($n)>>2)];
      var $sub=((($3)-($5))|0);
      var $6=$sz_addr;
      var $cmp=(($sub)>>>0) < (($6)>>>0);
      if ($cmp) { label = 3; break; } else { label = 11; break; }
    case 3: 
      var $7=$B_addr;
      var $size2=(($7+4)|0);
      var $8=HEAP32[(($size2)>>2)];
      var $mul=($8<<1);
      $newsize=$mul;
      var $9=$newsize;
      var $10=$B_addr;
      var $n3=(($10+8)|0);
      var $11=HEAP32[(($n3)>>2)];
      var $sub4=((($9)-($11))|0);
      var $12=$sz_addr;
      var $cmp5=(($sub4)>>>0) < (($12)>>>0);
      if ($cmp5) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $13=$B_addr;
      var $n7=(($13+8)|0);
      var $14=HEAP32[(($n7)>>2)];
      var $15=$sz_addr;
      var $add=((($14)+($15))|0);
      $newsize=$add;
      label = 5; break;
    case 5: 
      var $16=$newsize;
      var $17=$B_addr;
      var $n8=(($17+8)|0);
      var $18=HEAP32[(($n8)>>2)];
      var $cmp9=(($16)>>>0) < (($18)>>>0);
      if ($cmp9) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $19=$newsize;
      var $20=$B_addr;
      var $n10=(($20+8)|0);
      var $21=HEAP32[(($n10)>>2)];
      var $sub11=((($19)-($21))|0);
      var $22=$sz_addr;
      var $cmp12=(($sub11)>>>0) < (($22)>>>0);
      if ($cmp12) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $23=$L;
      var $call=_luaL_error($23, ((5250552)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 8; break;
    case 8: 
      var $24=$L;
      var $25=$newsize;
      var $mul15=$25;
      var $call16=_lua_newuserdata($24, $mul15);
      $newbuff=$call16;
      var $26=$newbuff;
      var $27=$B_addr;
      var $b=(($27)|0);
      var $28=HEAP32[(($b)>>2)];
      var $29=$B_addr;
      var $n17=(($29+8)|0);
      var $30=HEAP32[(($n17)>>2)];
      var $mul18=$30;
      _memcpy($26, $28, $mul18);
      var $31=$B_addr;
      var $b19=(($31)|0);
      var $32=HEAP32[(($b19)>>2)];
      var $33=$B_addr;
      var $initb=(($33+16)|0);
      var $arraydecay=(($initb)|0);
      var $cmp20=(($32)|0)!=(($arraydecay)|0);
      if ($cmp20) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $34=$L;
      _lua_remove($34, -2);
      label = 10; break;
    case 10: 
      var $35=$newbuff;
      var $36=$B_addr;
      var $b23=(($36)|0);
      HEAP32[(($b23)>>2)]=$35;
      var $37=$newsize;
      var $38=$B_addr;
      var $size24=(($38+4)|0);
      HEAP32[(($size24)>>2)]=$37;
      label = 11; break;
    case 11: 
      var $39=$B_addr;
      var $n26=(($39+8)|0);
      var $40=HEAP32[(($n26)>>2)];
      var $41=$B_addr;
      var $b27=(($41)|0);
      var $42=HEAP32[(($b27)>>2)];
      var $arrayidx=(($42+$40)|0);
      STACKTOP = __stackBase__;
      return $arrayidx;
  }

}
_luaL_prepbuffsize["X"]=1;

function _luaL_addlstring($B, $s, $l) {
  var label = 0;


  var $B_addr;
  var $s_addr;
  var $l_addr;
  var $b;
  $B_addr=$B;
  $s_addr=$s;
  $l_addr=$l;
  var $0=$B_addr;
  var $1=$l_addr;
  var $call=_luaL_prepbuffsize($0, $1);
  $b=$call;
  var $2=$b;
  var $3=$s_addr;
  var $4=$l_addr;
  var $mul=$4;
  _memcpy($2, $3, $mul);
  var $5=$l_addr;
  var $6=$B_addr;
  var $n=(($6+8)|0);
  var $7=HEAP32[(($n)>>2)];
  var $add=((($7)+($5))|0);
  HEAP32[(($n)>>2)]=$add;

  return;
}


function _luaL_addstring($B, $s) {
  var label = 0;


  var $B_addr;
  var $s_addr;
  $B_addr=$B;
  $s_addr=$s;
  var $0=$B_addr;
  var $1=$s_addr;
  var $2=$s_addr;
  var $call=_strlen($2);
  _luaL_addlstring($0, $1, $call);

  return;
}


function _luaL_pushresult($B) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $B_addr;
      var $L;
      $B_addr=$B;
      var $0=$B_addr;
      var $L1=(($0+12)|0);
      var $1=HEAP32[(($L1)>>2)];
      $L=$1;
      var $2=$L;
      var $3=$B_addr;
      var $b=(($3)|0);
      var $4=HEAP32[(($b)>>2)];
      var $5=$B_addr;
      var $n=(($5+8)|0);
      var $6=HEAP32[(($n)>>2)];
      var $call=_lua_pushlstring($2, $4, $6);
      var $7=$B_addr;
      var $b2=(($7)|0);
      var $8=HEAP32[(($b2)>>2)];
      var $9=$B_addr;
      var $initb=(($9+16)|0);
      var $arraydecay=(($initb)|0);
      var $cmp=(($8)|0)!=(($arraydecay)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=$L;
      _lua_remove($10, -2);
      label = 4; break;
    case 4: 

      return;
  }

}


function _luaL_pushresultsize($B, $sz) {
  var label = 0;


  var $B_addr;
  var $sz_addr;
  $B_addr=$B;
  $sz_addr=$sz;
  var $0=$sz_addr;
  var $1=$B_addr;
  var $n=(($1+8)|0);
  var $2=HEAP32[(($n)>>2)];
  var $add=((($2)+($0))|0);
  HEAP32[(($n)>>2)]=$add;
  var $3=$B_addr;
  _luaL_pushresult($3);

  return;
}


function _luaL_addvalue($B) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $B_addr;
      var $L;
      var $l=__stackBase__;
      var $s;
      $B_addr=$B;
      var $0=$B_addr;
      var $L1=(($0+12)|0);
      var $1=HEAP32[(($L1)>>2)];
      $L=$1;
      var $2=$L;
      var $call=_lua_tolstring($2, -1, $l);
      $s=$call;
      var $3=$B_addr;
      var $b=(($3)|0);
      var $4=HEAP32[(($b)>>2)];
      var $5=$B_addr;
      var $initb=(($5+16)|0);
      var $arraydecay=(($initb)|0);
      var $cmp=(($4)|0)!=(($arraydecay)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $6=$L;
      _lua_insert($6, -2);
      label = 4; break;
    case 4: 
      var $7=$B_addr;
      var $8=$s;
      var $9=HEAP32[(($l)>>2)];
      _luaL_addlstring($7, $8, $9);
      var $10=$L;
      var $11=$B_addr;
      var $b2=(($11)|0);
      var $12=HEAP32[(($b2)>>2)];
      var $13=$B_addr;
      var $initb3=(($13+16)|0);
      var $arraydecay4=(($initb3)|0);
      var $cmp5=(($12)|0)!=(($arraydecay4)|0);
      var $cond=$cmp5 ? -2 : -1;
      _lua_remove($10, $cond);
      STACKTOP = __stackBase__;
      return;
  }

}


function _luaL_buffinitsize($L, $B, $sz) {
  var label = 0;


  var $L_addr;
  var $B_addr;
  var $sz_addr;
  $L_addr=$L;
  $B_addr=$B;
  $sz_addr=$sz;
  var $0=$L_addr;
  var $1=$B_addr;
  _luaL_buffinit($0, $1);
  var $2=$B_addr;
  var $3=$sz_addr;
  var $call=_luaL_prepbuffsize($2, $3);

  return $call;
}


function _luaL_loadfilex($L, $filename, $mode) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1036)|0; _memset(__stackBase__, 0, 1036);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $filename_addr;
      var $mode_addr;
      var $lf=__stackBase__;
      var $status;
      var $readstatus;
      var $c=(__stackBase__)+(1032);
      var $fnameindex;
      $L_addr=$L;
      $filename_addr=$filename;
      $mode_addr=$mode;
      var $0=$L_addr;
      var $call=_lua_gettop($0);
      var $add=((($call)+(1))|0);
      $fnameindex=$add;
      var $1=$filename_addr;
      var $cmp=(($1)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$L_addr;
      var $call1=_lua_pushlstring($2, ((5250384)|0), 6);
      var $3=HEAP32[((_stdin)>>2)];
      var $f=(($lf+4)|0);
      HEAP32[(($f)>>2)]=$3;
      label = 7; break;
    case 4: 
      var $4=$L_addr;
      var $5=$filename_addr;
      var $call2=_lua_pushfstring($4, ((5250220)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$5,tempInt));
      var $6=$filename_addr;
      var $call3=_fopen($6, ((5249992)|0));
      var $f4=(($lf+4)|0);
      HEAP32[(($f4)>>2)]=$call3;
      var $f5=(($lf+4)|0);
      var $7=HEAP32[(($f5)>>2)];
      var $cmp6=(($7)|0)==0;
      if ($cmp6) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=$L_addr;
      var $9=$fnameindex;
      var $call8=_errfile($8, ((5249844)|0), $9);
      $retval=$call8;
      label = 21; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $call10=_skipcomment($lf, $c);
      var $tobool=(($call10)|0)!=0;
      if ($tobool) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $n=(($lf)|0);
      var $10=HEAP32[(($n)>>2)];
      var $inc=((($10)+(1))|0);
      HEAP32[(($n)>>2)]=$inc;
      var $buff=(($lf+8)|0);
      var $arrayidx=(($buff+$10)|0);
      HEAP8[($arrayidx)]=10;
      label = 9; break;
    case 9: 
      var $11=HEAP32[(($c)>>2)];
      var $12=HEAP8[((((5249712)|0))|0)];
      var $conv=(($12 << 24) >> 24);
      var $cmp13=(($11)|0)==(($conv)|0);
      if ($cmp13) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $13=$filename_addr;
      var $tobool15=(($13)|0)!=0;
      if ($tobool15) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $14=$filename_addr;
      var $f17=(($lf+4)|0);
      var $15=HEAP32[(($f17)>>2)];
      var $call18=_freopen($14, ((5249536)|0), $15);
      var $f19=(($lf+4)|0);
      HEAP32[(($f19)>>2)]=$call18;
      var $f20=(($lf+4)|0);
      var $16=HEAP32[(($f20)>>2)];
      var $cmp21=(($16)|0)==0;
      if ($cmp21) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $17=$L_addr;
      var $18=$fnameindex;
      var $call24=_errfile($17, ((5249420)|0), $18);
      $retval=$call24;
      label = 21; break;
    case 13: 
      var $call26=_skipcomment($lf, $c);
      label = 14; break;
    case 14: 
      var $19=HEAP32[(($c)>>2)];
      var $cmp28=(($19)|0)!=-1;
      if ($cmp28) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $20=HEAP32[(($c)>>2)];
      var $conv31=(($20) & 255);
      var $n32=(($lf)|0);
      var $21=HEAP32[(($n32)>>2)];
      var $inc33=((($21)+(1))|0);
      HEAP32[(($n32)>>2)]=$inc33;
      var $buff34=(($lf+8)|0);
      var $arrayidx35=(($buff34+$21)|0);
      HEAP8[($arrayidx35)]=$conv31;
      label = 16; break;
    case 16: 
      var $22=$L_addr;
      var $23=$lf;
      var $24=$L_addr;
      var $call37=_lua_tolstring($24, -1, 0);
      var $25=$mode_addr;
      var $call38=_lua_load($22, 348, $23, $call37, $25);
      $status=$call38;
      var $f39=(($lf+4)|0);
      var $26=HEAP32[(($f39)>>2)];
      var $call40=_ferror($26);
      $readstatus=$call40;
      var $27=$filename_addr;
      var $tobool41=(($27)|0)!=0;
      if ($tobool41) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $f43=(($lf+4)|0);
      var $28=HEAP32[(($f43)>>2)];
      var $call44=_fclose($28);
      label = 18; break;
    case 18: 
      var $29=$readstatus;
      var $tobool46=(($29)|0)!=0;
      if ($tobool46) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $30=$L_addr;
      var $31=$fnameindex;
      _lua_settop($30, $31);
      var $32=$L_addr;
      var $33=$fnameindex;
      var $call48=_errfile($32, ((5249204)|0), $33);
      $retval=$call48;
      label = 21; break;
    case 20: 
      var $34=$L_addr;
      var $35=$fnameindex;
      _lua_remove($34, $35);
      var $36=$status;
      $retval=$36;
      label = 21; break;
    case 21: 
      var $37=$retval;
      STACKTOP = __stackBase__;
      return $37;
  }

}
_luaL_loadfilex["X"]=1;

function _errfile($L, $what, $fnameindex) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);

  var $L_addr;
  var $what_addr;
  var $fnameindex_addr;
  var $serr;
  var $filename;
  $L_addr=$L;
  $what_addr=$what;
  $fnameindex_addr=$fnameindex;
  var $call=___errno_location();
  var $0=HEAP32[(($call)>>2)];
  var $call1=_strerror($0);
  $serr=$call1;
  var $1=$L_addr;
  var $2=$fnameindex_addr;
  var $call2=_lua_tolstring($1, $2, 0);
  var $add_ptr=(($call2+1)|0);
  $filename=$add_ptr;
  var $3=$L_addr;
  var $4=$what_addr;
  var $5=$filename;
  var $6=$serr;
  var $call3=_lua_pushfstring($3, ((5247440)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 12),STACKTOP = (STACKTOP + 12)|0,HEAP32[((tempInt)>>2)]=$4,HEAP32[(((tempInt)+(4))>>2)]=$5,HEAP32[(((tempInt)+(8))>>2)]=$6,tempInt));
  var $7=$L_addr;
  var $8=$fnameindex_addr;
  _lua_remove($7, $8);
  STACKTOP = __stackBase__;
  return 7;
}


function _skipcomment($lf, $cp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $lf_addr;
      var $cp_addr;
      var $c;
      $lf_addr=$lf;
      $cp_addr=$cp;
      var $0=$lf_addr;
      var $call=_skipBOM($0);
      var $1=$cp_addr;
      HEAP32[(($1)>>2)]=$call;
      $c=$call;
      var $2=$c;
      var $cmp=(($2)|0)==35;
      if ($cmp) { label = 3; break; } else { label = 9; break; }
    case 3: 
      label = 4; break;
    case 4: 
      var $3=$lf_addr;
      var $f=(($3+4)|0);
      var $4=HEAP32[(($f)>>2)];
      var $call1=_fgetc($4);
      $c=$call1;
      label = 5; break;
    case 5: 
      var $5=$c;
      var $cmp2=(($5)|0)!=-1;
      if ($cmp2) { label = 6; break; } else { var $7 = 0;label = 7; break; }
    case 6: 
      var $6=$c;
      var $cmp3=(($6)|0)!=10;
      var $7 = $cmp3;label = 7; break;
    case 7: 
      var $7;
      if ($7) { label = 4; break; } else { label = 8; break; }
    case 8: 
      var $8=$lf_addr;
      var $f4=(($8+4)|0);
      var $9=HEAP32[(($f4)>>2)];
      var $call5=_fgetc($9);
      var $10=$cp_addr;
      HEAP32[(($10)>>2)]=$call5;
      $retval=1;
      label = 10; break;
    case 9: 
      $retval=0;
      label = 10; break;
    case 10: 
      var $11=$retval;

      return $11;
  }

}


function _getF($L, $ud, $size) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $ud_addr;
      var $size_addr;
      var $lf;
      $L_addr=$L;
      $ud_addr=$ud;
      $size_addr=$size;
      var $0=$ud_addr;
      var $1=$0;
      $lf=$1;
      var $2=$L_addr;
      var $3=$lf;
      var $n=(($3)|0);
      var $4=HEAP32[(($n)>>2)];
      var $cmp=(($4)|0) > 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$lf;
      var $n1=(($5)|0);
      var $6=HEAP32[(($n1)>>2)];
      var $7=$size_addr;
      HEAP32[(($7)>>2)]=$6;
      var $8=$lf;
      var $n2=(($8)|0);
      HEAP32[(($n2)>>2)]=0;
      label = 7; break;
    case 4: 
      var $9=$lf;
      var $f=(($9+4)|0);
      var $10=HEAP32[(($f)>>2)];
      var $call=_feof($10);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=0;
      label = 8; break;
    case 6: 
      var $11=$lf;
      var $buff=(($11+8)|0);
      var $arraydecay=(($buff)|0);
      var $12=$lf;
      var $f4=(($12+4)|0);
      var $13=HEAP32[(($f4)>>2)];
      var $call5=_fread($arraydecay, 1, 1024, $13);
      var $14=$size_addr;
      HEAP32[(($14)>>2)]=$call5;
      label = 7; break;
    case 7: 
      var $15=$lf;
      var $buff7=(($15+8)|0);
      var $arraydecay8=(($buff7)|0);
      $retval=$arraydecay8;
      label = 8; break;
    case 8: 
      var $16=$retval;

      return $16;
  }

}
_getF["X"]=1;

function _luaL_loadbufferx($L, $buff, $size, $name, $mode) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; _memset(__stackBase__, 0, 8);

  var $L_addr;
  var $buff_addr;
  var $size_addr;
  var $name_addr;
  var $mode_addr;
  var $ls=__stackBase__;
  $L_addr=$L;
  $buff_addr=$buff;
  $size_addr=$size;
  $name_addr=$name;
  $mode_addr=$mode;
  var $0=$buff_addr;
  var $s=(($ls)|0);
  HEAP32[(($s)>>2)]=$0;
  var $1=$size_addr;
  var $size1=(($ls+4)|0);
  HEAP32[(($size1)>>2)]=$1;
  var $2=$L_addr;
  var $3=$ls;
  var $4=$name_addr;
  var $5=$mode_addr;
  var $call=_lua_load($2, 338, $3, $4, $5);
  STACKTOP = __stackBase__;
  return $call;
}
Module["_luaL_loadbufferx"] = _luaL_loadbufferx;


function _getS($L, $ud, $size) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $ud_addr;
      var $size_addr;
      var $ls;
      $L_addr=$L;
      $ud_addr=$ud;
      $size_addr=$size;
      var $0=$ud_addr;
      var $1=$0;
      $ls=$1;
      var $2=$L_addr;
      var $3=$ls;
      var $size1=(($3+4)|0);
      var $4=HEAP32[(($size1)>>2)];
      var $cmp=(($4)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 5; break;
    case 4: 
      var $5=$ls;
      var $size2=(($5+4)|0);
      var $6=HEAP32[(($size2)>>2)];
      var $7=$size_addr;
      HEAP32[(($7)>>2)]=$6;
      var $8=$ls;
      var $size3=(($8+4)|0);
      HEAP32[(($size3)>>2)]=0;
      var $9=$ls;
      var $s=(($9)|0);
      var $10=HEAP32[(($s)>>2)];
      $retval=$10;
      label = 5; break;
    case 5: 
      var $11=$retval;

      return $11;
  }

}


function _luaL_getmetafield($L, $obj, $event) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $obj_addr;
      var $event_addr;
      $L_addr=$L;
      $obj_addr=$obj;
      $event_addr=$event;
      var $0=$L_addr;
      var $1=$obj_addr;
      var $call=_lua_getmetatable($0, $1);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $retval=0;
      label = 7; break;
    case 4: 
      var $2=$L_addr;
      var $3=$event_addr;
      var $call1=_lua_pushstring($2, $3);
      var $4=$L_addr;
      _lua_rawget($4, -2);
      var $5=$L_addr;
      var $call2=_lua_type($5, -1);
      var $cmp=(($call2)|0)==0;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$L_addr;
      _lua_settop($6, -3);
      $retval=0;
      label = 7; break;
    case 6: 
      var $7=$L_addr;
      _lua_remove($7, -2);
      $retval=1;
      label = 7; break;
    case 7: 
      var $8=$retval;

      return $8;
  }

}
Module["_luaL_getmetafield"] = _luaL_getmetafield;

function _luaL_callmeta($L, $obj, $event) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $obj_addr;
      var $event_addr;
      $L_addr=$L;
      $obj_addr=$obj;
      $event_addr=$event;
      var $0=$L_addr;
      var $1=$obj_addr;
      var $call=_lua_absindex($0, $1);
      $obj_addr=$call;
      var $2=$L_addr;
      var $3=$obj_addr;
      var $4=$event_addr;
      var $call1=_luaL_getmetafield($2, $3, $4);
      var $tobool=(($call1)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $retval=0;
      label = 5; break;
    case 4: 
      var $5=$L_addr;
      var $6=$obj_addr;
      _lua_pushvalue($5, $6);
      var $7=$L_addr;
      _lua_callk($7, 1, 1, 0, 0);
      $retval=1;
      label = 5; break;
    case 5: 
      var $8=$retval;

      return $8;
  }

}


function _luaL_len($L, $idx) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $idx_addr;
      var $l;
      var $isnum=__stackBase__;
      $L_addr=$L;
      $idx_addr=$idx;
      var $0=$L_addr;
      var $1=$idx_addr;
      _lua_len($0, $1);
      var $2=$L_addr;
      var $call=_lua_tointegerx($2, -1, $isnum);
      $l=$call;
      var $3=HEAP32[(($isnum)>>2)];
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $4=$L_addr;
      var $call1=_luaL_error($4, ((5248984)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      var $5=$L_addr;
      _lua_settop($5, -2);
      var $6=$l;
      STACKTOP = __stackBase__;
      return $6;
  }

}


function _luaL_tolstring($L, $idx, $len) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $idx_addr;
      var $len_addr;
      $L_addr=$L;
      $idx_addr=$idx;
      $len_addr=$len;
      var $0=$L_addr;
      var $1=$idx_addr;
      var $call=_luaL_callmeta($0, $1, ((5248836)|0));
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 9; break; } else { label = 3; break; }
    case 3: 
      var $2=$L_addr;
      var $3=$idx_addr;
      var $call1=_lua_type($2, $3);
      if ((($call1)|0)==3 | (($call1)|0)==4) {
        label = 4; break;
      }
      else if ((($call1)|0)==1) {
        label = 5; break;
      }
      else if ((($call1)|0)==0) {
        label = 6; break;
      }
      else {
      label = 7; break;
      }
      
    case 4: 
      var $4=$L_addr;
      var $5=$idx_addr;
      _lua_pushvalue($4, $5);
      label = 8; break;
    case 5: 
      var $6=$L_addr;
      var $7=$L_addr;
      var $8=$idx_addr;
      var $call3=_lua_toboolean($7, $8);
      var $tobool4=(($call3)|0)!=0;
      var $cond=$tobool4 ? (((5248692)|0)) : (((5248624)|0));
      var $call5=_lua_pushstring($6, $cond);
      label = 8; break;
    case 6: 
      var $9=$L_addr;
      var $call7=_lua_pushlstring($9, ((5248552)|0), 3);
      label = 8; break;
    case 7: 
      var $10=$L_addr;
      var $11=$L_addr;
      var $12=$L_addr;
      var $13=$idx_addr;
      var $call8=_lua_type($12, $13);
      var $call9=_lua_typename($11, $call8);
      var $14=$L_addr;
      var $15=$idx_addr;
      var $call10=_lua_topointer($14, $15);
      var $call11=_lua_pushfstring($10, ((5248416)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempInt)>>2)]=$call9,HEAP32[(((tempInt)+(4))>>2)]=$call10,tempInt));
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $16=$L_addr;
      var $17=$len_addr;
      var $call12=_lua_tolstring($16, -1, $17);
      STACKTOP = __stackBase__;
      return $call12;
  }

}


function _luaL_setfuncs($L, $l, $nup) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $l_addr;
      var $nup_addr;
      var $i;
      $L_addr=$L;
      $l_addr=$l;
      $nup_addr=$nup;
      var $0=$L_addr;
      _luaL_checkversion_($0, 502);
      var $1=$L_addr;
      var $2=$nup_addr;
      _luaL_checkstack($1, $2, ((5248328)|0));
      label = 3; break;
    case 3: 
      var $3=$l_addr;
      var $name=(($3)|0);
      var $4=HEAP32[(($name)>>2)];
      var $cmp=(($4)|0)!=0;
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $5=$i;
      var $6=$nup_addr;
      var $cmp2=(($5)|0) < (($6)|0);
      if ($cmp2) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $7=$L_addr;
      var $8=$nup_addr;
      var $sub=(((-$8))|0);
      _lua_pushvalue($7, $sub);
      label = 7; break;
    case 7: 
      var $9=$i;
      var $inc=((($9)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      var $10=$L_addr;
      var $11=$l_addr;
      var $func=(($11+4)|0);
      var $12=HEAP32[(($func)>>2)];
      var $13=$nup_addr;
      _lua_pushcclosure($10, $12, $13);
      var $14=$L_addr;
      var $15=$nup_addr;
      var $add=((($15)+(2))|0);
      var $sub4=(((-$add))|0);
      var $16=$l_addr;
      var $name5=(($16)|0);
      var $17=HEAP32[(($name5)>>2)];
      _lua_setfield($14, $sub4, $17);
      label = 9; break;
    case 9: 
      var $18=$l_addr;
      var $incdec_ptr=(($18+8)|0);
      $l_addr=$incdec_ptr;
      label = 3; break;
    case 10: 
      var $19=$L_addr;
      var $20=$nup_addr;
      var $sub8=(((-$20))|0);
      var $sub9=((($sub8)-(1))|0);
      _lua_settop($19, $sub9);

      return;
  }

}
_luaL_setfuncs["X"]=1;

function _luaL_checkversion_($L, $ver) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $ver_addr;
      var $v;
      $L_addr=$L;
      $ver_addr=$ver;
      var $0=$L_addr;
      var $call=_lua_version($0);
      $v=$call;
      var $1=$v;
      var $call1=_lua_version(0);
      var $cmp=(($1)|0)!=(($call1)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$L_addr;
      var $call2=_luaL_error($2, ((5248068)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 7; break;
    case 4: 
      var $3=$v;
      var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $5=$ver_addr;
      var $cmp3=$4 != $5;
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$L_addr;
      var $7=$ver_addr;
      var $8=$v;
      var $9=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($8)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($8)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call5=_luaL_error($6, ((5247884)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 16),STACKTOP = (STACKTOP + 16)|0,(HEAPF64[(tempDoublePtr)>>3]=$7,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$9,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $10=$L_addr;
      _lua_pushnumber($10, -4660);
      var $11=$L_addr;
      var $call7=_lua_tointegerx($11, -1, 0);
      var $cmp8=(($call7)|0)!=-4660;
      if ($cmp8) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $12=$L_addr;
      var $call9=_lua_tounsignedx($12, -1, 0);
      var $cmp10=(($call9)|0)!=-4660;
      if ($cmp10) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $13=$L_addr;
      var $call12=_luaL_error($13, ((5247704)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 10; break;
    case 10: 
      var $14=$L_addr;
      _lua_settop($14, -2);
      STACKTOP = __stackBase__;
      return;
  }

}


function _luaL_getsubtable($L, $idx, $fname) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $idx_addr;
      var $fname_addr;
      $L_addr=$L;
      $idx_addr=$idx;
      $fname_addr=$fname;
      var $0=$L_addr;
      var $1=$idx_addr;
      var $2=$fname_addr;
      _lua_getfield($0, $1, $2);
      var $3=$L_addr;
      var $call=_lua_type($3, -1);
      var $cmp=(($call)|0)==5;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=1;
      label = 5; break;
    case 4: 
      var $4=$L_addr;
      _lua_settop($4, -2);
      var $5=$L_addr;
      var $6=$idx_addr;
      var $call1=_lua_absindex($5, $6);
      $idx_addr=$call1;
      var $7=$L_addr;
      _lua_createtable($7, 0, 0);
      var $8=$L_addr;
      _lua_pushvalue($8, -1);
      var $9=$L_addr;
      var $10=$idx_addr;
      var $11=$fname_addr;
      _lua_setfield($9, $10, $11);
      $retval=0;
      label = 5; break;
    case 5: 
      var $12=$retval;

      return $12;
  }

}


function _luaL_requiref($L, $modname, $openf, $glb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $modname_addr;
      var $openf_addr;
      var $glb_addr;
      $L_addr=$L;
      $modname_addr=$modname;
      $openf_addr=$openf;
      $glb_addr=$glb;
      var $0=$L_addr;
      var $1=$openf_addr;
      _lua_pushcclosure($0, $1, 0);
      var $2=$L_addr;
      var $3=$modname_addr;
      var $call=_lua_pushstring($2, $3);
      var $4=$L_addr;
      _lua_callk($4, 1, 1, 0, 0);
      var $5=$L_addr;
      var $call1=_luaL_getsubtable($5, -1001000, ((5248192)|0));
      var $6=$L_addr;
      _lua_pushvalue($6, -2);
      var $7=$L_addr;
      var $8=$modname_addr;
      _lua_setfield($7, -2, $8);
      var $9=$L_addr;
      _lua_settop($9, -2);
      var $10=$glb_addr;
      var $tobool=(($10)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $11=$L_addr;
      _lua_pushvalue($11, -1);
      var $12=$L_addr;
      var $13=$modname_addr;
      _lua_setglobal($12, $13);
      label = 4; break;
    case 4: 

      return;
  }

}


function _luaL_gsub($L, $s, $p, $r) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1040)|0; _memset(__stackBase__, 0, 1040);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $s_addr;
      var $p_addr;
      var $r_addr;
      var $wild;
      var $l;
      var $b=__stackBase__;
      $L_addr=$L;
      $s_addr=$s;
      $p_addr=$p;
      $r_addr=$r;
      var $0=$p_addr;
      var $call=_strlen($0);
      $l=$call;
      var $1=$L_addr;
      _luaL_buffinit($1, $b);
      label = 3; break;
    case 3: 
      var $2=$s_addr;
      var $3=$p_addr;
      var $call1=_strstr($2, $3);
      $wild=$call1;
      var $cmp=(($call1)|0)!=0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$s_addr;
      var $5=$wild;
      var $6=$s_addr;
      var $sub_ptr_lhs_cast=$5;
      var $sub_ptr_rhs_cast=$6;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      _luaL_addlstring($b, $4, $sub_ptr_sub);
      var $7=$r_addr;
      _luaL_addstring($b, $7);
      var $8=$wild;
      var $9=$l;
      var $add_ptr=(($8+$9)|0);
      $s_addr=$add_ptr;
      label = 3; break;
    case 5: 
      var $10=$s_addr;
      _luaL_addstring($b, $10);
      _luaL_pushresult($b);
      var $11=$L_addr;
      var $call2=_lua_tolstring($11, -1, 0);
      STACKTOP = __stackBase__;
      return $call2;
  }

}


function _luaL_newstate() {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L;
      var $call=_lua_newstate(192, 0);
      $L=$call;
      var $0=$L;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$L;
      var $call1=_lua_atpanic($1, 96);
      label = 4; break;
    case 4: 
      var $2=$L;

      return $2;
  }

}
Module["_luaL_newstate"] = _luaL_newstate;

function _l_alloc($ud, $ptr, $osize, $nsize) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $ud_addr;
      var $ptr_addr;
      var $osize_addr;
      var $nsize_addr;
      $ud_addr=$ud;
      $ptr_addr=$ptr;
      $osize_addr=$osize;
      $nsize_addr=$nsize;
      var $0=$ud_addr;
      var $1=$osize_addr;
      var $2=$nsize_addr;
      var $cmp=(($2)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$ptr_addr;
      _free($3);
      $retval=0;
      label = 5; break;
    case 4: 
      var $4=$ptr_addr;
      var $5=$nsize_addr;
      var $call=_realloc($4, $5);
      $retval=$call;
      label = 5; break;
    case 5: 
      var $6=$retval;

      return $6;
  }

}


function _panic($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);

  var $L_addr;
  $L_addr=$L;
  var $0=HEAP32[((_stderr)>>2)];
  var $1=$L_addr;
  var $call=_lua_tolstring($1, -1, 0);
  var $call1=_fprintf($0, ((5247600)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$call,tempInt));
  var $2=HEAP32[((_stderr)>>2)];
  var $call2=_fflush($2);
  STACKTOP = __stackBase__;
  return 0;
}


function _skipBOM($lf) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $lf_addr;
      var $p;
      var $c;
      $lf_addr=$lf;
      $p=((5247540)|0);
      var $0=$lf_addr;
      var $n=(($0)|0);
      HEAP32[(($n)>>2)]=0;
      label = 3; break;
    case 3: 
      var $1=$lf_addr;
      var $f=(($1+4)|0);
      var $2=HEAP32[(($f)>>2)];
      var $call=_fgetc($2);
      $c=$call;
      var $3=$c;
      var $cmp=(($3)|0)==-1;
      if ($cmp) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $4=$c;
      var $5=$p;
      var $incdec_ptr=(($5+1)|0);
      $p=$incdec_ptr;
      var $6=HEAP8[($5)];
      var $conv=(($6)&255);
      var $cmp1=(($4)|0)!=(($conv)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$c;
      $retval=$7;
      label = 9; break;
    case 6: 
      var $8=$c;
      var $conv3=(($8) & 255);
      var $9=$lf_addr;
      var $n4=(($9)|0);
      var $10=HEAP32[(($n4)>>2)];
      var $inc=((($10)+(1))|0);
      HEAP32[(($n4)>>2)]=$inc;
      var $11=$lf_addr;
      var $buff=(($11+8)|0);
      var $arrayidx=(($buff+$10)|0);
      HEAP8[($arrayidx)]=$conv3;
      label = 7; break;
    case 7: 
      var $12=$p;
      var $13=HEAP8[($12)];
      var $conv5=(($13 << 24) >> 24);
      var $cmp6=(($conv5)|0)!=0;
      if ($cmp6) { label = 3; break; } else { label = 8; break; }
    case 8: 
      var $14=$lf_addr;
      var $n8=(($14)|0);
      HEAP32[(($n8)>>2)]=0;
      var $15=$lf_addr;
      var $f9=(($15+4)|0);
      var $16=HEAP32[(($f9)>>2)];
      var $call10=_fgetc($16);
      $retval=$call10;
      label = 9; break;
    case 9: 
      var $17=$retval;

      return $17;
  }

}
_skipBOM["X"]=1;

function _findfield($L, $objidx, $level) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $objidx_addr;
      var $level_addr;
      $L_addr=$L;
      $objidx_addr=$objidx;
      $level_addr=$level;
      var $0=$level_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $1=$L_addr;
      var $call=_lua_type($1, -1);
      var $cmp1=(($call)|0)==5;
      if ($cmp1) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $retval=0;
      label = 16; break;
    case 5: 
      var $2=$L_addr;
      _lua_pushnil($2);
      label = 6; break;
    case 6: 
      var $3=$L_addr;
      var $call2=_lua_next($3, -2);
      var $tobool=(($call2)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 15; break; }
    case 7: 
      var $4=$L_addr;
      var $call3=_lua_type($4, -2);
      var $cmp4=(($call3)|0)==4;
      if ($cmp4) { label = 8; break; } else { label = 14; break; }
    case 8: 
      var $5=$L_addr;
      var $6=$objidx_addr;
      var $call6=_lua_rawequal($5, $6, -1);
      var $tobool7=(($call6)|0)!=0;
      if ($tobool7) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $7=$L_addr;
      _lua_settop($7, -2);
      $retval=1;
      label = 16; break;
    case 10: 
      var $8=$L_addr;
      var $9=$objidx_addr;
      var $10=$level_addr;
      var $sub=((($10)-(1))|0);
      var $call9=_findfield($8, $9, $sub);
      var $tobool10=(($call9)|0)!=0;
      if ($tobool10) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $11=$L_addr;
      _lua_remove($11, -2);
      var $12=$L_addr;
      var $call12=_lua_pushlstring($12, ((5247176)|0), 1);
      var $13=$L_addr;
      _lua_insert($13, -2);
      var $14=$L_addr;
      _lua_concat($14, 3);
      $retval=1;
      label = 16; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $15=$L_addr;
      _lua_settop($15, -2);
      label = 6; break;
    case 15: 
      $retval=0;
      label = 16; break;
    case 16: 
      var $16=$retval;

      return $16;
  }

}
_findfield["X"]=1;

function _luaopen_base($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  _lua_rawgeti($0, -1001000, 2);
  var $1=$L_addr;
  _lua_rawgeti($1, -1001000, 2);
  var $2=$L_addr;
  _lua_setfield($2, -2, ((5248200)|0));
  var $3=$L_addr;
  _luaL_setfuncs($3, ((5245168)|0), 0);
  var $4=$L_addr;
  var $call=_lua_pushlstring($4, ((5252628)|0), 7);
  var $5=$L_addr;
  _lua_setfield($5, -2, ((5250612)|0));

  return 1;
}


function _luaB_assert($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_lua_toboolean($0, 1);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $1=$L_addr;
      var $2=$L_addr;
      var $call1=_luaL_optlstring($2, 2, ((5246684)|0), 0);
      var $call2=_luaL_error($1, ((5246740)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$call1,tempInt));
      $retval=$call2;
      label = 5; break;
    case 4: 
      var $3=$L_addr;
      var $call3=_lua_gettop($3);
      $retval=$call3;
      label = 5; break;
    case 5: 
      var $4=$retval;
      STACKTOP = __stackBase__;
      return $4;
  }

}


function _luaB_collectgarbage($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $o;
      var $ex;
      var $res;
      var $b;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_luaL_checkoption($0, 1, ((5247524)|0), ((5244412)|0));
      var $arrayidx=((5244368+($call<<2))|0);
      var $1=HEAP32[(($arrayidx)>>2)];
      $o=$1;
      var $2=$L_addr;
      var $call1=_luaL_optinteger($2, 2, 0);
      $ex=$call1;
      var $3=$L_addr;
      var $4=$o;
      var $5=$ex;
      var $call2=_lua_gc($3, $4, $5);
      $res=$call2;
      var $6=$o;
      if ((($6)|0)==3) {
        label = 3; break;
      }
      else if ((($6)|0)==5 | (($6)|0)==9) {
        label = 4; break;
      }
      else {
      label = 5; break;
      }
      
    case 3: 
      var $7=$L_addr;
      var $call3=_lua_gc($7, 4, 0);
      $b=$call3;
      var $8=$L_addr;
      var $9=$res;
      var $conv=(($9)|0);
      var $10=$b;
      var $conv4=(($10)|0);
      var $div=($conv4)/(1024);
      var $add=($conv)+($div);
      _lua_pushnumber($8, $add);
      var $11=$L_addr;
      var $12=$b;
      _lua_pushinteger($11, $12);
      $retval=2;
      label = 6; break;
    case 4: 
      var $13=$L_addr;
      var $14=$res;
      _lua_pushboolean($13, $14);
      $retval=1;
      label = 6; break;
    case 5: 
      var $15=$L_addr;
      var $16=$res;
      _lua_pushinteger($15, $16);
      $retval=1;
      label = 6; break;
    case 6: 
      var $17=$retval;

      return $17;
  }

}
_luaB_collectgarbage["X"]=1;

function _luaB_dofile($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $fname;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_luaL_optlstring($0, 1, 0, 0);
      $fname=$call;
      var $1=$L_addr;
      _lua_settop($1, 1);
      var $2=$L_addr;
      var $3=$fname;
      var $call1=_luaL_loadfilex($2, $3, 0);
      var $cmp=(($call1)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$L_addr;
      var $call2=_lua_error($4);
      label = 4; break;
    case 4: 
      var $5=$L_addr;
      _lua_callk($5, 0, -1, 0, 194);
      var $6=$L_addr;
      var $call3=_dofilecont($6);

      return $call3;
  }

}


function _luaB_error($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $level;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_luaL_optinteger($0, 2, 1);
      $level=$call;
      var $1=$L_addr;
      _lua_settop($1, 1);
      var $2=$L_addr;
      var $call1=_lua_isstring($2, 1);
      var $tobool=(($call1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $3=$level;
      var $cmp=(($3)|0) > 0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$L_addr;
      var $5=$level;
      _luaL_where($4, $5);
      var $6=$L_addr;
      _lua_pushvalue($6, 1);
      var $7=$L_addr;
      _lua_concat($7, 2);
      label = 5; break;
    case 5: 
      var $8=$L_addr;
      var $call2=_lua_error($8);

      return $call2;
  }

}


function _luaB_getmetatable($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      $L_addr=$L;
      var $0=$L_addr;
      _luaL_checkany($0, 1);
      var $1=$L_addr;
      var $call=_lua_getmetatable($1, 1);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$L_addr;
      _lua_pushnil($2);
      $retval=1;
      label = 5; break;
    case 4: 
      var $3=$L_addr;
      var $call1=_luaL_getmetafield($3, 1, ((5249524)|0));
      $retval=1;
      label = 5; break;
    case 5: 
      var $4=$retval;

      return $4;
  }

}


function _luaB_ipairs($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_pairsmeta($0, ((5247872)|0), 1, 178);

  return $call;
}


function _luaB_loadfile($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $fname;
      var $mode;
      var $env;
      var $status;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_luaL_optlstring($0, 1, 0, 0);
      $fname=$call;
      var $1=$L_addr;
      var $call1=_luaL_optlstring($1, 2, 0, 0);
      $mode=$call1;
      var $2=$L_addr;
      var $call2=_lua_type($2, 3);
      var $cmp=(($call2)|0)==-1;
      var $lnot=$cmp ^ 1;
      var $lnot_ext=(($lnot)&1);
      $env=$lnot_ext;
      var $3=$L_addr;
      var $4=$fname;
      var $5=$mode;
      var $call3=_luaL_loadfilex($3, $4, $5);
      $status=$call3;
      var $6=$status;
      var $cmp4=(($6)|0)==0;
      if ($cmp4) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $7=$env;
      var $tobool=(($7)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $8=$L_addr;
      _lua_pushvalue($8, 3);
      var $9=$L_addr;
      var $call5=_lua_setupvalue($9, -2, 1);
      label = 5; break;
    case 5: 
      var $10=$L_addr;
      var $11=$status;
      var $call6=_load_aux($10, $11);

      return $call6;
  }

}


function _luaB_load($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $status;
      var $l=__stackBase__;
      var $top;
      var $s;
      var $mode;
      var $chunkname;
      var $chunkname5;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_lua_gettop($0);
      $top=$call;
      var $1=$L_addr;
      var $call1=_lua_tolstring($1, 1, $l);
      $s=$call1;
      var $2=$L_addr;
      var $call2=_luaL_optlstring($2, 3, ((5248412)|0), 0);
      $mode=$call2;
      var $3=$s;
      var $cmp=(($3)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$L_addr;
      var $5=$s;
      var $call3=_luaL_optlstring($4, 2, $5, 0);
      $chunkname=$call3;
      var $6=$L_addr;
      var $7=$s;
      var $8=HEAP32[(($l)>>2)];
      var $9=$chunkname;
      var $10=$mode;
      var $call4=_luaL_loadbufferx($6, $7, $8, $9, $10);
      $status=$call4;
      label = 5; break;
    case 4: 
      var $11=$L_addr;
      var $call6=_luaL_optlstring($11, 2, ((5248320)|0), 0);
      $chunkname5=$call6;
      var $12=$L_addr;
      _luaL_checktype($12, 1, 6);
      var $13=$L_addr;
      _lua_settop($13, 5);
      var $14=$L_addr;
      var $15=$chunkname5;
      var $16=$mode;
      var $call7=_lua_load($14, 350, 0, $15, $16);
      $status=$call7;
      label = 5; break;
    case 5: 
      var $17=$status;
      var $cmp8=(($17)|0)==0;
      if ($cmp8) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $18=$top;
      var $cmp9=(($18)|0) >= 4;
      if ($cmp9) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $19=$L_addr;
      _lua_pushvalue($19, 4);
      var $20=$L_addr;
      var $call11=_lua_setupvalue($20, -2, 1);
      label = 8; break;
    case 8: 
      var $21=$L_addr;
      var $22=$status;
      var $call13=_load_aux($21, $22);
      STACKTOP = __stackBase__;
      return $call13;
  }

}
_luaB_load["X"]=1;

function _luaB_next($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      $L_addr=$L;
      var $0=$L_addr;
      _luaL_checktype($0, 1, 5);
      var $1=$L_addr;
      _lua_settop($1, 2);
      var $2=$L_addr;
      var $call=_lua_next($2, 1);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=2;
      label = 5; break;
    case 4: 
      var $3=$L_addr;
      _lua_pushnil($3);
      $retval=1;
      label = 5; break;
    case 5: 
      var $4=$retval;

      return $4;
  }

}


function _luaB_pairs($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_pairsmeta($0, ((5248544)|0), 0, 28);

  return $call;
}


function _luaB_pcall($L) {
  var label = 0;


  var $L_addr;
  var $status;
  $L_addr=$L;
  var $0=$L_addr;
  _luaL_checkany($0, 1);
  var $1=$L_addr;
  _lua_pushnil($1);
  var $2=$L_addr;
  _lua_insert($2, 1);
  var $3=$L_addr;
  var $4=$L_addr;
  var $call=_lua_gettop($4);
  var $sub=((($call)-(2))|0);
  var $call1=_lua_pcallk($3, $sub, -1, 0, 0, 26);
  $status=$call1;
  var $5=$L_addr;
  var $6=$status;
  var $cmp=(($6)|0)==0;
  var $conv=(($cmp)&1);
  var $call2=_finishpcall($5, $conv);

  return $call2;
}


function _luaB_print($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $n;
      var $i;
      var $s;
      var $l=__stackBase__;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_lua_gettop($0);
      $n=$call;
      var $1=$L_addr;
      _lua_getglobal($1, ((5250972)|0));
      $i=1;
      label = 3; break;
    case 3: 
      var $2=$i;
      var $3=$n;
      var $cmp=(($2)|0) <= (($3)|0);
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $4=$L_addr;
      _lua_pushvalue($4, -1);
      var $5=$L_addr;
      var $6=$i;
      _lua_pushvalue($5, $6);
      var $7=$L_addr;
      _lua_callk($7, 1, 1, 0, 0);
      var $8=$L_addr;
      var $call1=_lua_tolstring($8, -1, $l);
      $s=$call1;
      var $9=$s;
      var $cmp2=(($9)|0)==0;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $10=$L_addr;
      var $call3=_luaL_error($10, ((5248792)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      $retval=$call3;
      label = 11; break;
    case 6: 
      var $11=$i;
      var $cmp4=(($11)|0) > 1;
      if ($cmp4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $12=HEAP32[((_stdout)>>2)];
      var $call6=_fwrite(((5248680)|0), 1, 1, $12);
      label = 8; break;
    case 8: 
      var $13=$s;
      var $14=HEAP32[(($l)>>2)];
      var $15=HEAP32[((_stdout)>>2)];
      var $call8=_fwrite($13, 1, $14, $15);
      var $16=$L_addr;
      _lua_settop($16, -2);
      label = 9; break;
    case 9: 
      var $17=$i;
      var $inc=((($17)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 10: 
      var $18=HEAP32[((_stdout)>>2)];
      var $call9=_fwrite(((5248620)|0), 1, 1, $18);
      var $19=HEAP32[((_stdout)>>2)];
      var $call10=_fflush($19);
      $retval=0;
      label = 11; break;
    case 11: 
      var $20=$retval;
      STACKTOP = __stackBase__;
      return $20;
  }

}
_luaB_print["X"]=1;

function _luaB_rawequal($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  _luaL_checkany($0, 1);
  var $1=$L_addr;
  _luaL_checkany($1, 2);
  var $2=$L_addr;
  var $3=$L_addr;
  var $call=_lua_rawequal($3, 1, 2);
  _lua_pushboolean($2, $call);

  return 1;
}


function _luaB_rawlen($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $t;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_lua_type($0, 1);
      $t=$call;
      var $1=$t;
      var $cmp=(($1)|0)==5;
      if ($cmp) { var $4 = 1;label = 5; break; } else { label = 3; break; }
    case 3: 
      var $2=$t;
      var $cmp1=(($2)|0)==4;
      if ($cmp1) { var $4 = 1;label = 5; break; } else { label = 4; break; }
    case 4: 
      var $3=$L_addr;
      var $call2=_luaL_argerror($3, 1, ((5248956)|0));
      var $tobool=(($call2)|0)!=0;
      var $4 = $tobool;label = 5; break;
    case 5: 
      var $4;
      var $lor_ext=(($4)&1);
      var $5=$L_addr;
      var $6=$L_addr;
      var $call3=_lua_rawlen($6, 1);
      _lua_pushinteger($5, $call3);

      return 1;
  }

}


function _luaB_rawget($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  _luaL_checktype($0, 1, 5);
  var $1=$L_addr;
  _luaL_checkany($1, 2);
  var $2=$L_addr;
  _lua_settop($2, 2);
  var $3=$L_addr;
  _lua_rawget($3, 1);

  return 1;
}


function _luaB_rawset($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  _luaL_checktype($0, 1, 5);
  var $1=$L_addr;
  _luaL_checkany($1, 2);
  var $2=$L_addr;
  _luaL_checkany($2, 3);
  var $3=$L_addr;
  _lua_settop($3, 3);
  var $4=$L_addr;
  _lua_rawset($4, 1);

  return 1;
}


function _luaB_select($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $n;
      var $i;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_lua_gettop($0);
      $n=$call;
      var $1=$L_addr;
      var $call1=_lua_type($1, 1);
      var $cmp=(($call1)|0)==4;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $2=$L_addr;
      var $call2=_lua_tolstring($2, 1, 0);
      var $3=HEAP8[($call2)];
      var $conv=(($3 << 24) >> 24);
      var $cmp3=(($conv)|0)==35;
      if ($cmp3) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$L_addr;
      var $5=$n;
      var $sub=((($5)-(1))|0);
      _lua_pushinteger($4, $sub);
      $retval=1;
      label = 13; break;
    case 5: 
      var $6=$L_addr;
      var $call5=_luaL_checkinteger($6, 1);
      $i=$call5;
      var $7=$i;
      var $cmp6=(($7)|0) < 0;
      if ($cmp6) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $8=$n;
      var $9=$i;
      var $add=((($8)+($9))|0);
      $i=$add;
      label = 10; break;
    case 7: 
      var $10=$i;
      var $11=$n;
      var $cmp10=(($10)|0) > (($11)|0);
      if ($cmp10) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $12=$n;
      $i=$12;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $13=$i;
      var $cmp14=1 <= (($13)|0);
      if ($cmp14) { var $15 = 1;label = 12; break; } else { label = 11; break; }
    case 11: 
      var $14=$L_addr;
      var $call16=_luaL_argerror($14, 1, ((5249184)|0));
      var $tobool=(($call16)|0)!=0;
      var $15 = $tobool;label = 12; break;
    case 12: 
      var $15;
      var $lor_ext=(($15)&1);
      var $16=$n;
      var $17=$i;
      var $sub17=((($16)-($17))|0);
      $retval=$sub17;
      label = 13; break;
    case 13: 
      var $18=$retval;

      return $18;
  }

}
_luaB_select["X"]=1;

function _luaB_setmetatable($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $t;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_lua_type($0, 2);
      $t=$call;
      var $1=$L_addr;
      _luaL_checktype($1, 1, 5);
      var $2=$t;
      var $cmp=(($2)|0)==0;
      if ($cmp) { var $5 = 1;label = 5; break; } else { label = 3; break; }
    case 3: 
      var $3=$t;
      var $cmp1=(($3)|0)==5;
      if ($cmp1) { var $5 = 1;label = 5; break; } else { label = 4; break; }
    case 4: 
      var $4=$L_addr;
      var $call2=_luaL_argerror($4, 2, ((5249688)|0));
      var $tobool=(($call2)|0)!=0;
      var $5 = $tobool;label = 5; break;
    case 5: 
      var $5;
      var $lor_ext=(($5)&1);
      var $6=$L_addr;
      var $call3=_luaL_getmetafield($6, 1, ((5249524)|0));
      var $tobool4=(($call3)|0)!=0;
      if ($tobool4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $7=$L_addr;
      var $call5=_luaL_error($7, ((5249384)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      $retval=$call5;
      label = 8; break;
    case 7: 
      var $8=$L_addr;
      _lua_settop($8, 2);
      var $9=$L_addr;
      var $call6=_lua_setmetatable($9, 1);
      $retval=1;
      label = 8; break;
    case 8: 
      var $10=$retval;
      STACKTOP = __stackBase__;
      return $10;
  }

}


function _luaB_tonumber($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; _memset(__stackBase__, 0, 8);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $isnum=__stackBase__;
      var $n;
      var $l=(__stackBase__)+(4);
      var $s;
      var $e;
      var $base;
      var $neg;
      var $n26;
      var $digit;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_lua_type($0, 2);
      var $cmp=(($call)|0) <= 0;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $1=$L_addr;
      var $call1=_lua_tonumberx($1, 1, $isnum);
      $n=$call1;
      var $2=HEAP32[(($isnum)>>2)];
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$L_addr;
      var $4=$n;
      _lua_pushnumber($3, $4);
      $retval=1;
      label = 31; break;
    case 5: 
      var $5=$L_addr;
      _luaL_checkany($5, 1);
      label = 30; break;
    case 6: 
      var $6=$L_addr;
      var $call3=_luaL_checklstring($6, 1, $l);
      $s=$call3;
      var $7=$s;
      var $8=HEAP32[(($l)>>2)];
      var $add_ptr=(($7+$8)|0);
      $e=$add_ptr;
      var $9=$L_addr;
      var $call4=_luaL_checkinteger($9, 2);
      $base=$call4;
      $neg=0;
      var $10=$base;
      var $cmp5=2 <= (($10)|0);
      if ($cmp5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $11=$base;
      var $cmp6=(($11)|0) <= 36;
      if ($cmp6) { var $13 = 1;label = 9; break; } else { label = 8; break; }
    case 8: 
      var $12=$L_addr;
      var $call7=_luaL_argerror($12, 2, ((5249972)|0));
      var $tobool8=(($call7)|0)!=0;
      var $13 = $tobool8;label = 9; break;
    case 9: 
      var $13;
      var $lor_ext=(($13)&1);
      var $14=$s;
      var $call9=_strspn($14, ((5249836)|0));
      var $15=$s;
      var $add_ptr10=(($15+$call9)|0);
      $s=$add_ptr10;
      var $16=$s;
      var $17=HEAP8[($16)];
      var $conv=(($17 << 24) >> 24);
      var $cmp11=(($conv)|0)==45;
      if ($cmp11) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $18=$s;
      var $incdec_ptr=(($18+1)|0);
      $s=$incdec_ptr;
      $neg=1;
      label = 14; break;
    case 11: 
      var $19=$s;
      var $20=HEAP8[($19)];
      var $conv15=(($20 << 24) >> 24);
      var $cmp16=(($conv15)|0)==43;
      if ($cmp16) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $21=$s;
      var $incdec_ptr19=(($21+1)|0);
      $s=$incdec_ptr19;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $22=$s;
      var $23=HEAP8[($22)];
      var $conv22=(($23)&255);
      var $call23=_isalnum($conv22);
      var $tobool24=(($call23)|0)!=0;
      if ($tobool24) { label = 15; break; } else { label = 29; break; }
    case 15: 
      $n26=0;
      label = 16; break;
    case 16: 
      var $24=$s;
      var $25=HEAP8[($24)];
      var $conv27=(($25)&255);
      var $call28=_isdigit($conv27);
      var $tobool29=(($call28)|0)!=0;
      if ($tobool29) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $26=$s;
      var $27=HEAP8[($26)];
      var $conv30=(($27 << 24) >> 24);
      var $sub=((($conv30)-(48))|0);
      var $cond = $sub;label = 19; break;
    case 18: 
      var $28=$s;
      var $29=HEAP8[($28)];
      var $conv31=(($29)&255);
      var $call32=_toupper($conv31);
      var $sub33=((($call32)-(65))|0);
      var $add=((($sub33)+(10))|0);
      var $cond = $add;label = 19; break;
    case 19: 
      var $cond;
      $digit=$cond;
      var $30=$digit;
      var $31=$base;
      var $cmp34=(($30)|0) >= (($31)|0);
      if ($cmp34) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 23; break;
    case 21: 
      var $32=$n26;
      var $33=$base;
      var $conv38=(($33)|0);
      var $mul=($32)*($conv38);
      var $34=$digit;
      var $conv39=(($34)|0);
      var $add40=($mul)+($conv39);
      $n26=$add40;
      var $35=$s;
      var $incdec_ptr41=(($35+1)|0);
      $s=$incdec_ptr41;
      label = 22; break;
    case 22: 
      var $36=$s;
      var $37=HEAP8[($36)];
      var $conv42=(($37)&255);
      var $call43=_isalnum($conv42);
      var $tobool44=(($call43)|0)!=0;
      if ($tobool44) { label = 16; break; } else { label = 23; break; }
    case 23: 
      var $38=$s;
      var $call45=_strspn($38, ((5249836)|0));
      var $39=$s;
      var $add_ptr46=(($39+$call45)|0);
      $s=$add_ptr46;
      var $40=$s;
      var $41=$e;
      var $cmp47=(($40)|0)==(($41)|0);
      if ($cmp47) { label = 24; break; } else { label = 28; break; }
    case 24: 
      var $42=$L_addr;
      var $43=$neg;
      var $tobool50=(($43)|0)!=0;
      if ($tobool50) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $44=$n26;
      var $sub52=(-$44);
      var $cond55 = $sub52;label = 27; break;
    case 26: 
      var $45=$n26;
      var $cond55 = $45;label = 27; break;
    case 27: 
      var $cond55;
      _lua_pushnumber($42, $cond55);
      $retval=1;
      label = 31; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $46=$L_addr;
      _lua_pushnil($46);
      $retval=1;
      label = 31; break;
    case 31: 
      var $47=$retval;
      STACKTOP = __stackBase__;
      return $47;
  }

}
_luaB_tonumber["X"]=1;

function _luaB_tostring($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  _luaL_checkany($0, 1);
  var $1=$L_addr;
  var $call=_luaL_tolstring($1, 1, 0);

  return 1;
}


function _luaB_type($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  _luaL_checkany($0, 1);
  var $1=$L_addr;
  var $2=$L_addr;
  var $3=$L_addr;
  var $call=_lua_type($3, 1);
  var $call1=_lua_typename($2, $call);
  var $call2=_lua_pushstring($1, $call1);

  return 1;
}


function _luaB_xpcall($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $status;
      var $n;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_lua_gettop($0);
      $n=$call;
      var $1=$n;
      var $cmp=(($1)|0) >= 2;
      if ($cmp) { var $3 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$L_addr;
      var $call1=_luaL_argerror($2, 2, ((5250356)|0));
      var $tobool=(($call1)|0)!=0;
      var $3 = $tobool;label = 4; break;
    case 4: 
      var $3;
      var $lor_ext=(($3)&1);
      var $4=$L_addr;
      _lua_pushvalue($4, 1);
      var $5=$L_addr;
      _lua_copy($5, 2, 1);
      var $6=$L_addr;
      _lua_replace($6, 2);
      var $7=$L_addr;
      var $8=$n;
      var $sub=((($8)-(2))|0);
      var $call2=_lua_pcallk($7, $sub, -1, 1, 0, 26);
      $status=$call2;
      var $9=$L_addr;
      var $10=$status;
      var $cmp3=(($10)|0)==0;
      var $conv=(($cmp3)&1);
      var $call4=_finishpcall($9, $conv);

      return $call4;
  }

}


function _pcallcont($L) {
  var label = 0;


  var $L_addr;
  var $status;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_lua_getctx($0, 0);
  $status=$call;
  var $1=$L_addr;
  var $2=$status;
  var $cmp=(($2)|0)==1;
  var $conv=(($cmp)&1);
  var $call1=_finishpcall($1, $conv);

  return $call1;
}


function _finishpcall($L, $status) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $status_addr;
      $L_addr=$L;
      $status_addr=$status;
      var $0=$L_addr;
      var $call=_lua_checkstack($0, 1);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $1=$L_addr;
      _lua_settop($1, 0);
      var $2=$L_addr;
      _lua_pushboolean($2, 0);
      var $3=$L_addr;
      var $call1=_lua_pushstring($3, ((5250204)|0));
      $retval=2;
      label = 5; break;
    case 4: 
      var $4=$L_addr;
      var $5=$status_addr;
      _lua_pushboolean($4, $5);
      var $6=$L_addr;
      _lua_replace($6, 1);
      var $7=$L_addr;
      var $call2=_lua_gettop($7);
      $retval=$call2;
      label = 5; break;
    case 5: 
      var $8=$retval;

      return $8;
  }

}


function _pairsmeta($L, $method, $iszero, $iter) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $method_addr;
      var $iszero_addr;
      var $iter_addr;
      $L_addr=$L;
      $method_addr=$method;
      $iszero_addr=$iszero;
      $iter_addr=$iter;
      var $0=$L_addr;
      var $1=$method_addr;
      var $call=_luaL_getmetafield($0, 1, $1);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 3; break; }
    case 3: 
      var $2=$L_addr;
      _luaL_checktype($2, 1, 5);
      var $3=$L_addr;
      var $4=$iter_addr;
      _lua_pushcclosure($3, $4, 0);
      var $5=$L_addr;
      _lua_pushvalue($5, 1);
      var $6=$iszero_addr;
      var $tobool1=(($6)|0)!=0;
      if ($tobool1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $7=$L_addr;
      _lua_pushinteger($7, 0);
      label = 6; break;
    case 5: 
      var $8=$L_addr;
      _lua_pushnil($8);
      label = 6; break;
    case 6: 
      label = 8; break;
    case 7: 
      var $9=$L_addr;
      _lua_pushvalue($9, 1);
      var $10=$L_addr;
      _lua_callk($10, 1, 3, 0, 0);
      label = 8; break;
    case 8: 

      return 3;
  }

}


function _generic_reader($L, $ud, $size) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $ud_addr;
      var $size_addr;
      $L_addr=$L;
      $ud_addr=$ud;
      $size_addr=$size;
      var $0=$ud_addr;
      var $1=$L_addr;
      _luaL_checkstack($1, 2, ((5248164)|0));
      var $2=$L_addr;
      _lua_pushvalue($2, 1);
      var $3=$L_addr;
      _lua_callk($3, 0, 1, 0, 0);
      var $4=$L_addr;
      var $call=_lua_type($4, -1);
      var $cmp=(($call)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$L_addr;
      _lua_settop($5, -2);
      var $6=$size_addr;
      HEAP32[(($6)>>2)]=0;
      $retval=0;
      label = 8; break;
    case 4: 
      var $7=$L_addr;
      var $call1=_lua_isstring($7, -1);
      var $tobool=(($call1)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $8=$L_addr;
      var $call3=_luaL_error($8, ((5248028)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $9=$L_addr;
      _lua_replace($9, 5);
      var $10=$L_addr;
      var $11=$size_addr;
      var $call5=_lua_tolstring($10, 5, $11);
      $retval=$call5;
      label = 8; break;
    case 8: 
      var $12=$retval;
      STACKTOP = __stackBase__;
      return $12;
  }

}


function _load_aux($L, $status) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $status_addr;
      $L_addr=$L;
      $status_addr=$status;
      var $0=$status_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=1;
      label = 5; break;
    case 4: 
      var $1=$L_addr;
      _lua_pushnil($1);
      var $2=$L_addr;
      _lua_insert($2, -2);
      $retval=2;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
  }

}


function _ipairsaux($L) {
  var label = 0;


  var $L_addr;
  var $i;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_luaL_checkinteger($0, 2);
  $i=$call;
  var $1=$L_addr;
  _luaL_checktype($1, 1, 5);
  var $2=$i;
  var $inc=((($2)+(1))|0);
  $i=$inc;
  var $3=$L_addr;
  var $4=$i;
  _lua_pushinteger($3, $4);
  var $5=$L_addr;
  var $6=$i;
  _lua_rawgeti($5, 1, $6);
  var $7=$L_addr;
  var $call1=_lua_type($7, -1);
  var $cmp=(($call1)|0)==0;
  var $cond=$cmp ? 1 : 2;

  return $cond;
}


function _dofilecont($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_lua_gettop($0);
  var $sub=((($call)-(1))|0);

  return $sub;
}


function _luaopen_bit32($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  _lua_createtable($0, 0, 12);
  var $1=$L_addr;
  _luaL_setfuncs($1, ((5245064)|0), 0);

  return 1;
}


function _b_arshift($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $r;
      var $i;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_luaL_checkunsigned($0, 1);
      $r=$call;
      var $1=$L_addr;
      var $call1=_luaL_checkinteger($1, 2);
      $i=$call1;
      var $2=$i;
      var $cmp=(($2)|0) < 0;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $3=$r;
      var $and=$3 & -2147483648;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $4=$L_addr;
      var $5=$r;
      var $6=$i;
      var $sub=(((-$6))|0);
      var $call2=_b_shift($4, $5, $sub);
      $retval=$call2;
      label = 9; break;
    case 5: 
      var $7=$i;
      var $cmp3=(($7)|0) >= 32;
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $r=-1;
      label = 8; break;
    case 7: 
      var $8=$r;
      var $9=$i;
      var $shr=$8 >>> (($9)>>>0);
      var $10=$i;
      var $shr6=-1 >>> (($10)>>>0);
      var $neg=$shr6 ^ -1;
      var $or=$shr | $neg;
      $r=$or;
      label = 8; break;
    case 8: 
      var $11=$L_addr;
      var $12=$r;
      _lua_pushunsigned($11, $12);
      $retval=1;
      label = 9; break;
    case 9: 
      var $13=$retval;

      return $13;
  }

}


function _b_and($L) {
  var label = 0;


  var $L_addr;
  var $r;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_andaux($0);
  $r=$call;
  var $1=$L_addr;
  var $2=$r;
  _lua_pushunsigned($1, $2);

  return 1;
}


function _b_not($L) {
  var label = 0;


  var $L_addr;
  var $r;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_luaL_checkunsigned($0, 1);
  var $neg=$call ^ -1;
  $r=$neg;
  var $1=$L_addr;
  var $2=$r;
  _lua_pushunsigned($1, $2);

  return 1;
}


function _b_or($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $i;
      var $n;
      var $r;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_lua_gettop($0);
      $n=$call;
      $r=0;
      $i=1;
      label = 3; break;
    case 3: 
      var $1=$i;
      var $2=$n;
      var $cmp=(($1)|0) <= (($2)|0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $3=$L_addr;
      var $4=$i;
      var $call1=_luaL_checkunsigned($3, $4);
      var $5=$r;
      var $or=$5 | $call1;
      $r=$or;
      label = 5; break;
    case 5: 
      var $6=$i;
      var $inc=((($6)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $7=$L_addr;
      var $8=$r;
      _lua_pushunsigned($7, $8);

      return 1;
  }

}


function _b_xor($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $i;
      var $n;
      var $r;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_lua_gettop($0);
      $n=$call;
      $r=0;
      $i=1;
      label = 3; break;
    case 3: 
      var $1=$i;
      var $2=$n;
      var $cmp=(($1)|0) <= (($2)|0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $3=$L_addr;
      var $4=$i;
      var $call1=_luaL_checkunsigned($3, $4);
      var $5=$r;
      var $xor=$5 ^ $call1;
      $r=$xor;
      label = 5; break;
    case 5: 
      var $6=$i;
      var $inc=((($6)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $7=$L_addr;
      var $8=$r;
      _lua_pushunsigned($7, $8);

      return 1;
  }

}


function _b_test($L) {
  var label = 0;


  var $L_addr;
  var $r;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_andaux($0);
  $r=$call;
  var $1=$L_addr;
  var $2=$r;
  var $cmp=(($2)|0)!=0;
  var $conv=(($cmp)&1);
  _lua_pushboolean($1, $conv);

  return 1;
}


function _b_extract($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);

  var $L_addr;
  var $w=__stackBase__;
  var $r;
  var $f;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_luaL_checkunsigned($0, 1);
  $r=$call;
  var $1=$L_addr;
  var $call1=_fieldargs($1, 2, $w);
  $f=$call1;
  var $2=$r;
  var $3=$f;
  var $shr=$2 >>> (($3)>>>0);
  var $4=HEAP32[(($w)>>2)];
  var $sub=((($4)-(1))|0);
  var $shl=-2 << $sub;
  var $neg=$shl ^ -1;
  var $and=$shr & $neg;
  $r=$and;
  var $5=$L_addr;
  var $6=$r;
  _lua_pushunsigned($5, $6);
  STACKTOP = __stackBase__;
  return 1;
}


function _b_lrot($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_luaL_checkinteger($1, 2);
  var $call1=_b_rot($0, $call);

  return $call1;
}


function _b_lshift($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_luaL_checkunsigned($1, 1);
  var $2=$L_addr;
  var $call1=_luaL_checkinteger($2, 2);
  var $call2=_b_shift($0, $call, $call1);

  return $call2;
}


function _b_replace($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);

  var $L_addr;
  var $w=__stackBase__;
  var $r;
  var $v;
  var $f;
  var $m;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_luaL_checkunsigned($0, 1);
  $r=$call;
  var $1=$L_addr;
  var $call1=_luaL_checkunsigned($1, 2);
  $v=$call1;
  var $2=$L_addr;
  var $call2=_fieldargs($2, 3, $w);
  $f=$call2;
  var $3=HEAP32[(($w)>>2)];
  var $sub=((($3)-(1))|0);
  var $shl=-2 << $sub;
  var $neg=$shl ^ -1;
  $m=$neg;
  var $4=$m;
  var $5=$v;
  var $and=$5 & $4;
  $v=$and;
  var $6=$r;
  var $7=$m;
  var $8=$f;
  var $shl3=$7 << $8;
  var $neg4=$shl3 ^ -1;
  var $and5=$6 & $neg4;
  var $9=$v;
  var $10=$f;
  var $shl6=$9 << $10;
  var $or=$and5 | $shl6;
  $r=$or;
  var $11=$L_addr;
  var $12=$r;
  _lua_pushunsigned($11, $12);
  STACKTOP = __stackBase__;
  return 1;
}


function _b_rrot($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_luaL_checkinteger($1, 2);
  var $sub=(((-$call))|0);
  var $call1=_b_rot($0, $sub);

  return $call1;
}


function _b_rshift($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_luaL_checkunsigned($1, 1);
  var $2=$L_addr;
  var $call1=_luaL_checkinteger($2, 2);
  var $sub=(((-$call1))|0);
  var $call2=_b_shift($0, $call, $sub);

  return $call2;
}


function _b_shift($L, $r, $i) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $r_addr;
      var $i_addr;
      $L_addr=$L;
      $r_addr=$r;
      $i_addr=$i;
      var $0=$i_addr;
      var $cmp=(($0)|0) < 0;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$i_addr;
      var $sub=(((-$1))|0);
      $i_addr=$sub;
      var $2=$r_addr;
      $r_addr=$2;
      var $3=$i_addr;
      var $cmp1=(($3)|0) >= 32;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $r_addr=0;
      label = 6; break;
    case 5: 
      var $4=$i_addr;
      var $5=$r_addr;
      var $shr=$5 >>> (($4)>>>0);
      $r_addr=$shr;
      label = 6; break;
    case 6: 
      label = 11; break;
    case 7: 
      var $6=$i_addr;
      var $cmp4=(($6)|0) >= 32;
      if ($cmp4) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $r_addr=0;
      label = 10; break;
    case 9: 
      var $7=$i_addr;
      var $8=$r_addr;
      var $shl=$8 << $7;
      $r_addr=$shl;
      label = 10; break;
    case 10: 
      var $9=$r_addr;
      $r_addr=$9;
      label = 11; break;
    case 11: 
      var $10=$L_addr;
      var $11=$r_addr;
      _lua_pushunsigned($10, $11);

      return 1;
  }

}


function _b_rot($L, $i) {
  var label = 0;


  var $L_addr;
  var $i_addr;
  var $r;
  $L_addr=$L;
  $i_addr=$i;
  var $0=$L_addr;
  var $call=_luaL_checkunsigned($0, 1);
  $r=$call;
  var $1=$i_addr;
  var $and=$1 & 31;
  $i_addr=$and;
  var $2=$r;
  $r=$2;
  var $3=$r;
  var $4=$i_addr;
  var $shl=$3 << $4;
  var $5=$r;
  var $6=$i_addr;
  var $sub=(((32)-($6))|0);
  var $shr=$5 >>> (($sub)>>>0);
  var $or=$shl | $shr;
  $r=$or;
  var $7=$L_addr;
  var $8=$r;
  _lua_pushunsigned($7, $8);

  return 1;
}


function _fieldargs($L, $farg, $width) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $farg_addr;
      var $width_addr;
      var $f;
      var $w;
      $L_addr=$L;
      $farg_addr=$farg;
      $width_addr=$width;
      var $0=$L_addr;
      var $1=$farg_addr;
      var $call=_luaL_checkinteger($0, $1);
      $f=$call;
      var $2=$L_addr;
      var $3=$farg_addr;
      var $add=((($3)+(1))|0);
      var $call1=_luaL_optinteger($2, $add, 1);
      $w=$call1;
      var $4=$f;
      var $cmp=0 <= (($4)|0);
      if ($cmp) { var $7 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $5=$L_addr;
      var $6=$farg_addr;
      var $call2=_luaL_argerror($5, $6, ((5252984)|0));
      var $tobool=(($call2)|0)!=0;
      var $7 = $tobool;label = 4; break;
    case 4: 
      var $7;
      var $lor_ext=(($7)&1);
      var $8=$w;
      var $cmp3=0 < (($8)|0);
      if ($cmp3) { var $11 = 1;label = 6; break; } else { label = 5; break; }
    case 5: 
      var $9=$L_addr;
      var $10=$farg_addr;
      var $add5=((($10)+(1))|0);
      var $call6=_luaL_argerror($9, $add5, ((5252736)|0));
      var $tobool7=(($call6)|0)!=0;
      var $11 = $tobool7;label = 6; break;
    case 6: 
      var $11;
      var $lor_ext9=(($11)&1);
      var $12=$f;
      var $13=$w;
      var $add10=((($12)+($13))|0);
      var $cmp11=(($add10)|0) > 32;
      if ($cmp11) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $14=$L_addr;
      var $call12=_luaL_error($14, ((5252556)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 8; break;
    case 8: 
      var $15=$w;
      var $16=$width_addr;
      HEAP32[(($16)>>2)]=$15;
      var $17=$f;
      STACKTOP = __stackBase__;
      return $17;
  }

}
_fieldargs["X"]=1;

function _andaux($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $i;
      var $n;
      var $r;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_lua_gettop($0);
      $n=$call;
      $r=-1;
      $i=1;
      label = 3; break;
    case 3: 
      var $1=$i;
      var $2=$n;
      var $cmp=(($1)|0) <= (($2)|0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $3=$L_addr;
      var $4=$i;
      var $call1=_luaL_checkunsigned($3, $4);
      var $5=$r;
      var $and=$5 & $call1;
      $r=$and;
      label = 5; break;
    case 5: 
      var $6=$i;
      var $inc=((($6)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $7=$r;

      return $7;
  }

}


function _luaopen_coroutine($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  _lua_createtable($0, 0, 6);
  var $1=$L_addr;
  _luaL_setfuncs($1, ((5245000)|0), 0);

  return 1;
}


function _luaB_cocreate($L) {
  var label = 0;


  var $L_addr;
  var $NL;
  $L_addr=$L;
  var $0=$L_addr;
  _luaL_checktype($0, 1, 6);
  var $1=$L_addr;
  var $call=_lua_newthread($1);
  $NL=$call;
  var $2=$L_addr;
  _lua_pushvalue($2, 1);
  var $3=$L_addr;
  var $4=$NL;
  _lua_xmove($3, $4, 1);

  return 1;
}


function _luaB_coresume($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $co;
      var $r;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_lua_tothread($0, 1);
      $co=$call;
      var $1=$co;
      var $tobool=(($1)|0)!=0;
      if ($tobool) { var $3 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$L_addr;
      var $call1=_luaL_argerror($2, 1, ((5245432)|0));
      var $tobool2=(($call1)|0)!=0;
      var $3 = $tobool2;label = 4; break;
    case 4: 
      var $3;
      var $lor_ext=(($3)&1);
      var $4=$L_addr;
      var $5=$co;
      var $6=$L_addr;
      var $call3=_lua_gettop($6);
      var $sub=((($call3)-(1))|0);
      var $call4=_auxresume($4, $5, $sub);
      $r=$call4;
      var $7=$r;
      var $cmp=(($7)|0) < 0;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=$L_addr;
      _lua_pushboolean($8, 0);
      var $9=$L_addr;
      _lua_insert($9, -2);
      $retval=2;
      label = 7; break;
    case 6: 
      var $10=$L_addr;
      _lua_pushboolean($10, 1);
      var $11=$L_addr;
      var $12=$r;
      var $add=((($12)+(1))|0);
      var $sub5=(((-$add))|0);
      _lua_insert($11, $sub5);
      var $13=$r;
      var $add6=((($13)+(1))|0);
      $retval=$add6;
      label = 7; break;
    case 7: 
      var $14=$retval;

      return $14;
  }

}


function _luaB_corunning($L) {
  var label = 0;


  var $L_addr;
  var $ismain;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_lua_pushthread($0);
  $ismain=$call;
  var $1=$L_addr;
  var $2=$ismain;
  _lua_pushboolean($1, $2);

  return 2;
}


function _luaB_costatus($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 100)|0; _memset(__stackBase__, 0, 100);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $co;
      var $ar=__stackBase__;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_lua_tothread($0, 1);
      $co=$call;
      var $1=$co;
      var $tobool=(($1)|0)!=0;
      if ($tobool) { var $3 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$L_addr;
      var $call1=_luaL_argerror($2, 1, ((5245432)|0));
      var $tobool2=(($call1)|0)!=0;
      var $3 = $tobool2;label = 4; break;
    case 4: 
      var $3;
      var $lor_ext=(($3)&1);
      var $4=$L_addr;
      var $5=$co;
      var $cmp=(($4)|0)==(($5)|0);
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$L_addr;
      var $call3=_lua_pushlstring($6, ((5250452)|0), 7);
      label = 17; break;
    case 6: 
      var $7=$co;
      var $call4=_lua_status($7);
      if ((($call4)|0)==1) {
        label = 7; break;
      }
      else if ((($call4)|0)==0) {
        label = 8; break;
      }
      else {
      label = 15; break;
      }
      
    case 7: 
      var $8=$L_addr;
      var $call5=_lua_pushlstring($8, ((5253640)|0), 9);
      label = 16; break;
    case 8: 
      var $9=$co;
      var $call7=_lua_getstack($9, 0, $ar);
      var $cmp8=(($call7)|0) > 0;
      if ($cmp8) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $10=$L_addr;
      var $call10=_lua_pushlstring($10, ((5253288)|0), 6);
      label = 14; break;
    case 10: 
      var $11=$co;
      var $call12=_lua_gettop($11);
      var $cmp13=(($call12)|0)==0;
      if ($cmp13) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $12=$L_addr;
      var $call15=_lua_pushlstring($12, ((5252976)|0), 4);
      label = 13; break;
    case 12: 
      var $13=$L_addr;
      var $call17=_lua_pushlstring($13, ((5253640)|0), 9);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 16; break;
    case 15: 
      var $14=$L_addr;
      var $call19=_lua_pushlstring($14, ((5252976)|0), 4);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      STACKTOP = __stackBase__;
      return 1;
  }

}
_luaB_costatus["X"]=1;

function _luaB_cowrap($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_luaB_cocreate($0);
  var $1=$L_addr;
  _lua_pushcclosure($1, 76, 1);

  return 1;
}


function _luaB_yield($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_lua_gettop($1);
  var $call1=_lua_yieldk($0, $call, 0, 0);

  return $call1;
}


function _luaB_auxwrap($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $co;
      var $r;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_lua_tothread($0, -1001001);
      $co=$call;
      var $1=$L_addr;
      var $2=$co;
      var $3=$L_addr;
      var $call1=_lua_gettop($3);
      var $call2=_auxresume($1, $2, $call1);
      $r=$call2;
      var $4=$r;
      var $cmp=(($4)|0) < 0;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $5=$L_addr;
      var $call3=_lua_isstring($5, -1);
      var $tobool=(($call3)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $6=$L_addr;
      _luaL_where($6, 1);
      var $7=$L_addr;
      _lua_insert($7, -2);
      var $8=$L_addr;
      _lua_concat($8, 2);
      label = 5; break;
    case 5: 
      var $9=$L_addr;
      var $call5=_lua_error($9);
      label = 6; break;
    case 6: 
      var $10=$r;

      return $10;
  }

}


function _auxresume($L, $co, $narg) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $co_addr;
      var $narg_addr;
      var $status;
      var $nres;
      $L_addr=$L;
      $co_addr=$co;
      $narg_addr=$narg;
      var $0=$co_addr;
      var $1=$narg_addr;
      var $call=_lua_checkstack($0, $1);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$L_addr;
      var $call1=_lua_pushlstring($2, ((5246424)|0), 28);
      $retval=-1;
      label = 13; break;
    case 4: 
      var $3=$co_addr;
      var $call2=_lua_status($3);
      var $cmp=(($call2)|0)==0;
      if ($cmp) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $4=$co_addr;
      var $call3=_lua_gettop($4);
      var $cmp4=(($call3)|0)==0;
      if ($cmp4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $5=$L_addr;
      var $call6=_lua_pushlstring($5, ((5245976)|0), 28);
      $retval=-1;
      label = 13; break;
    case 7: 
      var $6=$L_addr;
      var $7=$co_addr;
      var $8=$narg_addr;
      _lua_xmove($6, $7, $8);
      var $9=$co_addr;
      var $10=$L_addr;
      var $11=$narg_addr;
      var $call8=_lua_resume($9, $10, $11);
      $status=$call8;
      var $12=$status;
      var $cmp9=(($12)|0)==0;
      if ($cmp9) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $13=$status;
      var $cmp10=(($13)|0)==1;
      if ($cmp10) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $14=$co_addr;
      var $call12=_lua_gettop($14);
      $nres=$call12;
      var $15=$L_addr;
      var $16=$nres;
      var $add=((($16)+(1))|0);
      var $call13=_lua_checkstack($15, $add);
      var $tobool14=(($call13)|0)!=0;
      if ($tobool14) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $17=$co_addr;
      var $18=$nres;
      var $sub=(((-$18))|0);
      var $sub16=((($sub)-(1))|0);
      _lua_settop($17, $sub16);
      var $19=$L_addr;
      var $call17=_lua_pushlstring($19, ((5245664)|0), 26);
      $retval=-1;
      label = 13; break;
    case 11: 
      var $20=$co_addr;
      var $21=$L_addr;
      var $22=$nres;
      _lua_xmove($20, $21, $22);
      var $23=$nres;
      $retval=$23;
      label = 13; break;
    case 12: 
      var $24=$co_addr;
      var $25=$L_addr;
      _lua_xmove($24, $25, 1);
      $retval=-1;
      label = 13; break;
    case 13: 
      var $26=$retval;

      return $26;
  }

}
_auxresume["X"]=1;

function _luaopen_debug($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  _lua_createtable($0, 0, 16);
  var $1=$L_addr;
  _luaL_setfuncs($1, ((5244844)|0), 0);

  return 1;
}


function _db_debug($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 252)|0; _memset(__stackBase__, 0, 252);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $buffer=__stackBase__;
      $L_addr=$L;
      label = 3; break;
    case 3: 
      var $0=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($0, ((5247160)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=((5247028)|0),tempInt));
      var $1=HEAP32[((_stderr)>>2)];
      var $call1=_fflush($1);
      var $arraydecay=(($buffer)|0);
      var $2=HEAP32[((_stdin)>>2)];
      var $call2=_fgets($arraydecay, 250, $2);
      var $cmp=(($call2)|0)==0;
      if ($cmp) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $arraydecay3=(($buffer)|0);
      var $call4=_strcmp($arraydecay3, ((5246908)|0));
      var $cmp5=(($call4)|0)==0;
      if ($cmp5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      STACKTOP = __stackBase__;
      return 0;
    case 6: 
      var $3=$L_addr;
      var $arraydecay6=(($buffer)|0);
      var $arraydecay7=(($buffer)|0);
      var $call8=_strlen($arraydecay7);
      var $call9=_luaL_loadbufferx($3, $arraydecay6, $call8, ((5246832)|0), 0);
      var $tobool=(($call9)|0)!=0;
      if ($tobool) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $4=$L_addr;
      var $call11=_lua_pcallk($4, 0, 0, 0, 0, 0);
      var $tobool12=(($call11)|0)!=0;
      if ($tobool12) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $5=HEAP32[((_stderr)>>2)];
      var $6=$L_addr;
      var $call14=_lua_tolstring($6, -1, 0);
      var $call15=_fprintf($5, ((5246756)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$call14,tempInt));
      var $7=HEAP32[((_stderr)>>2)];
      var $call16=_fflush($7);
      label = 9; break;
    case 9: 
      var $8=$L_addr;
      _lua_settop($8, 0);
      label = 3; break;
  }

}


function _db_getuservalue($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_lua_type($0, 1);
      var $cmp=(($call)|0)!=7;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$L_addr;
      _lua_pushnil($1);
      label = 5; break;
    case 4: 
      var $2=$L_addr;
      _lua_getuservalue($2, 1);
      label = 5; break;
    case 5: 

      return 1;
  }

}


function _db_gethook($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; _memset(__stackBase__, 0, 12);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $arg=__stackBase__;
      var $L1;
      var $buff=(__stackBase__)+(4);
      var $mask;
      var $hook;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_getthread($0, $arg);
      $L1=$call;
      var $1=$L1;
      var $call1=_lua_gethookmask($1);
      $mask=$call1;
      var $2=$L1;
      var $call2=_lua_gethook($2);
      $hook=$call2;
      var $3=$hook;
      var $cmp=(($3)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $4=$hook;
      var $cmp3=(($4)|0)!=(((146))|0);
      if ($cmp3) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $5=$L_addr;
      var $call4=_lua_pushlstring($5, ((5247224)|0), 13);
      label = 6; break;
    case 5: 
      var $6=$L_addr;
      var $call5=_luaL_getsubtable($6, -1001000, ((5251760)|0));
      var $7=$L1;
      var $call6=_lua_pushthread($7);
      var $8=$L1;
      var $9=$L_addr;
      _lua_xmove($8, $9, 1);
      var $10=$L_addr;
      _lua_rawget($10, -2);
      var $11=$L_addr;
      _lua_remove($11, -2);
      label = 6; break;
    case 6: 
      var $12=$L_addr;
      var $13=$mask;
      var $arraydecay=(($buff)|0);
      var $call7=_unmakemask($13, $arraydecay);
      var $call8=_lua_pushstring($12, $call7);
      var $14=$L_addr;
      var $15=$L1;
      var $call9=_lua_gethookcount($15);
      _lua_pushinteger($14, $call9);
      STACKTOP = __stackBase__;
      return 3;
  }

}


function _db_getinfo($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 104)|0; _memset(__stackBase__, 0, 104);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $ar=__stackBase__;
      var $arg=(__stackBase__)+(100);
      var $L1;
      var $options;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_getthread($0, $arg);
      $L1=$call;
      var $1=$L_addr;
      var $2=HEAP32[(($arg)>>2)];
      var $add=((($2)+(2))|0);
      var $call1=_luaL_optlstring($1, $add, ((5249516)|0), 0);
      $options=$call1;
      var $3=$L_addr;
      var $4=HEAP32[(($arg)>>2)];
      var $add2=((($4)+(1))|0);
      var $call3=_lua_isnumber($3, $add2);
      var $tobool=(($call3)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $5=$L1;
      var $6=$L_addr;
      var $7=HEAP32[(($arg)>>2)];
      var $add4=((($7)+(1))|0);
      var $call5=_lua_tointegerx($6, $add4, 0);
      var $call6=_lua_getstack($5, $call5, $ar);
      var $tobool7=(($call6)|0)!=0;
      if ($tobool7) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $8=$L_addr;
      _lua_pushnil($8);
      $retval=1;
      label = 27; break;
    case 5: 
      label = 10; break;
    case 6: 
      var $9=$L_addr;
      var $10=HEAP32[(($arg)>>2)];
      var $add9=((($10)+(1))|0);
      var $call10=_lua_type($9, $add9);
      var $cmp=(($call10)|0)==6;
      if ($cmp) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $11=$L_addr;
      var $12=$options;
      var $call12=_lua_pushfstring($11, ((5249380)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$12,tempInt));
      var $13=$L_addr;
      var $call13=_lua_tolstring($13, -1, 0);
      $options=$call13;
      var $14=$L_addr;
      var $15=HEAP32[(($arg)>>2)];
      var $add14=((($15)+(1))|0);
      _lua_pushvalue($14, $add14);
      var $16=$L_addr;
      var $17=$L1;
      _lua_xmove($16, $17, 1);
      label = 9; break;
    case 8: 
      var $18=$L_addr;
      var $19=HEAP32[(($arg)>>2)];
      var $add16=((($19)+(1))|0);
      var $call17=_luaL_argerror($18, $add16, ((5249156)|0));
      $retval=$call17;
      label = 27; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $20=$L1;
      var $21=$options;
      var $call20=_lua_getinfo($20, $21, $ar);
      var $tobool21=(($call20)|0)!=0;
      if ($tobool21) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $22=$L_addr;
      var $23=HEAP32[(($arg)>>2)];
      var $add23=((($23)+(2))|0);
      var $call24=_luaL_argerror($22, $add23, ((5248932)|0));
      $retval=$call24;
      label = 27; break;
    case 12: 
      var $24=$L_addr;
      _lua_createtable($24, 0, 2);
      var $25=$options;
      var $call26=_strchr($25, 83);
      var $tobool27=(($call26)|0)!=0;
      if ($tobool27) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $26=$L_addr;
      var $source=(($ar+16)|0);
      var $27=HEAP32[(($source)>>2)];
      _settabss($26, ((5248784)|0), $27);
      var $28=$L_addr;
      var $short_src=(($ar+36)|0);
      var $arraydecay=(($short_src)|0);
      _settabss($28, ((5248668)|0), $arraydecay);
      var $29=$L_addr;
      var $linedefined=(($ar+24)|0);
      var $30=HEAP32[(($linedefined)>>2)];
      _settabsi($29, ((5248608)|0), $30);
      var $31=$L_addr;
      var $lastlinedefined=(($ar+28)|0);
      var $32=HEAP32[(($lastlinedefined)>>2)];
      _settabsi($31, ((5248516)|0), $32);
      var $33=$L_addr;
      var $what=(($ar+12)|0);
      var $34=HEAP32[(($what)>>2)];
      _settabss($33, ((5248404)|0), $34);
      label = 14; break;
    case 14: 
      var $35=$options;
      var $call30=_strchr($35, 108);
      var $tobool31=(($call30)|0)!=0;
      if ($tobool31) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $36=$L_addr;
      var $currentline=(($ar+20)|0);
      var $37=HEAP32[(($currentline)>>2)];
      _settabsi($36, ((5248308)|0), $37);
      label = 16; break;
    case 16: 
      var $38=$options;
      var $call34=_strchr($38, 117);
      var $tobool35=(($call34)|0)!=0;
      if ($tobool35) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $39=$L_addr;
      var $nups=(($ar+32)|0);
      var $40=HEAP8[($nups)];
      var $conv=(($40)&255);
      _settabsi($39, ((5248156)|0), $conv);
      var $41=$L_addr;
      var $nparams=(($ar+33)|0);
      var $42=HEAP8[($nparams)];
      var $conv37=(($42)&255);
      _settabsi($41, ((5248020)|0), $conv37);
      var $43=$L_addr;
      var $isvararg=(($ar+34)|0);
      var $44=HEAP8[($isvararg)];
      var $conv38=(($44 << 24) >> 24);
      _settabsb($43, ((5247860)|0), $conv38);
      label = 18; break;
    case 18: 
      var $45=$options;
      var $call40=_strchr($45, 110);
      var $tobool41=(($call40)|0)!=0;
      if ($tobool41) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $46=$L_addr;
      var $name=(($ar+4)|0);
      var $47=HEAP32[(($name)>>2)];
      _settabss($46, ((5247680)|0), $47);
      var $48=$L_addr;
      var $namewhat=(($ar+8)|0);
      var $49=HEAP32[(($namewhat)>>2)];
      _settabss($48, ((5247580)|0), $49);
      label = 20; break;
    case 20: 
      var $50=$options;
      var $call44=_strchr($50, 116);
      var $tobool45=(($call44)|0)!=0;
      if ($tobool45) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $51=$L_addr;
      var $istailcall=(($ar+35)|0);
      var $52=HEAP8[($istailcall)];
      var $conv47=(($52 << 24) >> 24);
      _settabsb($51, ((5247504)|0), $conv47);
      label = 22; break;
    case 22: 
      var $53=$options;
      var $call49=_strchr($53, 76);
      var $tobool50=(($call49)|0)!=0;
      if ($tobool50) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $54=$L_addr;
      var $55=$L1;
      _treatstackoption($54, $55, ((5247420)|0));
      label = 24; break;
    case 24: 
      var $56=$options;
      var $call53=_strchr($56, 102);
      var $tobool54=(($call53)|0)!=0;
      if ($tobool54) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $57=$L_addr;
      var $58=$L1;
      _treatstackoption($57, $58, ((5247328)|0));
      label = 26; break;
    case 26: 
      $retval=1;
      label = 27; break;
    case 27: 
      var $59=$retval;
      STACKTOP = __stackBase__;
      return $59;
  }

}
_db_getinfo["X"]=1;

function _db_getlocal($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 104)|0; _memset(__stackBase__, 0, 104);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $arg=__stackBase__;
      var $L1;
      var $ar=(__stackBase__)+(4);
      var $name;
      var $nvar;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_getthread($0, $arg);
      $L1=$call;
      var $1=$L_addr;
      var $2=HEAP32[(($arg)>>2)];
      var $add=((($2)+(2))|0);
      var $call1=_luaL_checkinteger($1, $add);
      $nvar=$call1;
      var $3=$L_addr;
      var $4=HEAP32[(($arg)>>2)];
      var $add2=((($4)+(1))|0);
      var $call3=_lua_type($3, $add2);
      var $cmp=(($call3)|0)==6;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$L_addr;
      var $6=HEAP32[(($arg)>>2)];
      var $add4=((($6)+(1))|0);
      _lua_pushvalue($5, $add4);
      var $7=$L_addr;
      var $8=$L_addr;
      var $9=$nvar;
      var $call5=_lua_getlocal($8, 0, $9);
      var $call6=_lua_pushstring($7, $call5);
      $retval=1;
      label = 9; break;
    case 4: 
      var $10=$L1;
      var $11=$L_addr;
      var $12=HEAP32[(($arg)>>2)];
      var $add7=((($12)+(1))|0);
      var $call8=_luaL_checkinteger($11, $add7);
      var $call9=_lua_getstack($10, $call8, $ar);
      var $tobool=(($call9)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $13=$L_addr;
      var $14=HEAP32[(($arg)>>2)];
      var $add11=((($14)+(1))|0);
      var $call12=_luaL_argerror($13, $add11, ((5251944)|0));
      $retval=$call12;
      label = 9; break;
    case 6: 
      var $15=$L1;
      var $16=$nvar;
      var $call13=_lua_getlocal($15, $ar, $16);
      $name=$call13;
      var $17=$name;
      var $tobool14=(($17)|0)!=0;
      if ($tobool14) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $18=$L1;
      var $19=$L_addr;
      _lua_xmove($18, $19, 1);
      var $20=$L_addr;
      var $21=$name;
      var $call16=_lua_pushstring($20, $21);
      var $22=$L_addr;
      _lua_pushvalue($22, -2);
      $retval=2;
      label = 9; break;
    case 8: 
      var $23=$L_addr;
      _lua_pushnil($23);
      $retval=1;
      label = 9; break;
    case 9: 
      var $24=$retval;
      STACKTOP = __stackBase__;
      return $24;
  }

}
_db_getlocal["X"]=1;

function _db_getregistry($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  _lua_pushvalue($0, -1001000);

  return 1;
}


function _db_getmetatable($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      $L_addr=$L;
      var $0=$L_addr;
      _luaL_checkany($0, 1);
      var $1=$L_addr;
      var $call=_lua_getmetatable($1, 1);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$L_addr;
      _lua_pushnil($2);
      label = 4; break;
    case 4: 

      return 1;
  }

}


function _db_getupvalue($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_auxupvalue($0, 1);

  return $call;
}


function _db_upvaluejoin($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $n1;
      var $n2;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_checkupval($0, 1, 2);
      $n1=$call;
      var $1=$L_addr;
      var $call1=_checkupval($1, 3, 4);
      $n2=$call1;
      var $2=$L_addr;
      var $call2=_lua_iscfunction($2, 1);
      var $tobool=(($call2)|0)!=0;
      if ($tobool) { label = 3; break; } else { var $4 = 1;label = 4; break; }
    case 3: 
      var $3=$L_addr;
      var $call3=_luaL_argerror($3, 1, ((5249664)|0));
      var $tobool4=(($call3)|0)!=0;
      var $4 = $tobool4;label = 4; break;
    case 4: 
      var $4;
      var $lor_ext=(($4)&1);
      var $5=$L_addr;
      var $call5=_lua_iscfunction($5, 3);
      var $tobool6=(($call5)|0)!=0;
      if ($tobool6) { label = 5; break; } else { var $7 = 1;label = 6; break; }
    case 5: 
      var $6=$L_addr;
      var $call8=_luaL_argerror($6, 3, ((5249664)|0));
      var $tobool9=(($call8)|0)!=0;
      var $7 = $tobool9;label = 6; break;
    case 6: 
      var $7;
      var $lor_ext11=(($7)&1);
      var $8=$L_addr;
      var $9=$n1;
      var $10=$n2;
      _lua_upvaluejoin($8, 1, $9, 3, $10);

      return 0;
  }

}


function _db_upvalueid($L) {
  var label = 0;


  var $L_addr;
  var $n;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_checkupval($0, 1, 2);
  $n=$call;
  var $1=$L_addr;
  var $2=$L_addr;
  var $3=$n;
  var $call1=_lua_upvalueid($2, 1, $3);
  _lua_pushlightuserdata($1, $call1);

  return 1;
}


function _db_setuservalue($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_lua_type($0, 1);
      var $cmp=(($call)|0)==2;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$L_addr;
      var $call1=_luaL_argerror($1, 1, ((5250160)|0));
      label = 4; break;
    case 4: 
      var $2=$L_addr;
      _luaL_checktype($2, 1, 7);
      var $3=$L_addr;
      var $call2=_lua_type($3, 2);
      var $cmp3=(($call2)|0) <= 0;
      if ($cmp3) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $4=$L_addr;
      _luaL_checktype($4, 2, 5);
      label = 6; break;
    case 6: 
      var $5=$L_addr;
      _lua_settop($5, 2);
      var $6=$L_addr;
      _lua_setuservalue($6, 1);

      return 1;
  }

}


function _db_sethook($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $arg=__stackBase__;
      var $mask;
      var $count;
      var $func;
      var $L1;
      var $smask;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_getthread($0, $arg);
      $L1=$call;
      var $1=$L_addr;
      var $2=HEAP32[(($arg)>>2)];
      var $add=((($2)+(1))|0);
      var $call1=_lua_type($1, $add);
      var $cmp=(($call1)|0) <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$L_addr;
      var $4=HEAP32[(($arg)>>2)];
      var $add2=((($4)+(1))|0);
      _lua_settop($3, $add2);
      $func=0;
      $mask=0;
      $count=0;
      label = 5; break;
    case 4: 
      var $5=$L_addr;
      var $6=HEAP32[(($arg)>>2)];
      var $add3=((($6)+(2))|0);
      var $call4=_luaL_checklstring($5, $add3, 0);
      $smask=$call4;
      var $7=$L_addr;
      var $8=HEAP32[(($arg)>>2)];
      var $add5=((($8)+(1))|0);
      _luaL_checktype($7, $add5, 6);
      var $9=$L_addr;
      var $10=HEAP32[(($arg)>>2)];
      var $add6=((($10)+(3))|0);
      var $call7=_luaL_optinteger($9, $add6, 0);
      $count=$call7;
      $func=146;
      var $11=$smask;
      var $12=$count;
      var $call8=_makemask($11, $12);
      $mask=$call8;
      label = 5; break;
    case 5: 
      var $13=$L_addr;
      var $call9=_luaL_getsubtable($13, -1001000, ((5251760)|0));
      var $cmp10=(($call9)|0)==0;
      if ($cmp10) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $14=$L_addr;
      var $call12=_lua_pushstring($14, ((5251576)|0));
      var $15=$L_addr;
      _lua_setfield($15, -2, ((5251348)|0));
      var $16=$L_addr;
      _lua_pushvalue($16, -1);
      var $17=$L_addr;
      var $call13=_lua_setmetatable($17, -2);
      label = 7; break;
    case 7: 
      var $18=$L1;
      var $call15=_lua_pushthread($18);
      var $19=$L1;
      var $20=$L_addr;
      _lua_xmove($19, $20, 1);
      var $21=$L_addr;
      var $22=HEAP32[(($arg)>>2)];
      var $add16=((($22)+(1))|0);
      _lua_pushvalue($21, $add16);
      var $23=$L_addr;
      _lua_rawset($23, -3);
      var $24=$L1;
      var $25=$func;
      var $26=$mask;
      var $27=$count;
      var $call17=_lua_sethook($24, $25, $26, $27);
      STACKTOP = __stackBase__;
      return 0;
  }

}
_db_sethook["X"]=1;

function _db_setlocal($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 104)|0; _memset(__stackBase__, 0, 104);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $arg=__stackBase__;
      var $L1;
      var $ar=(__stackBase__)+(4);
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_getthread($0, $arg);
      $L1=$call;
      var $1=$L1;
      var $2=$L_addr;
      var $3=HEAP32[(($arg)>>2)];
      var $add=((($3)+(1))|0);
      var $call1=_luaL_checkinteger($2, $add);
      var $call2=_lua_getstack($1, $call1, $ar);
      var $tobool=(($call2)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $4=$L_addr;
      var $5=HEAP32[(($arg)>>2)];
      var $add3=((($5)+(1))|0);
      var $call4=_luaL_argerror($4, $add3, ((5251944)|0));
      $retval=$call4;
      label = 5; break;
    case 4: 
      var $6=$L_addr;
      var $7=HEAP32[(($arg)>>2)];
      var $add5=((($7)+(3))|0);
      _luaL_checkany($6, $add5);
      var $8=$L_addr;
      var $9=HEAP32[(($arg)>>2)];
      var $add6=((($9)+(3))|0);
      _lua_settop($8, $add6);
      var $10=$L_addr;
      var $11=$L1;
      _lua_xmove($10, $11, 1);
      var $12=$L_addr;
      var $13=$L1;
      var $14=$L_addr;
      var $15=HEAP32[(($arg)>>2)];
      var $add7=((($15)+(2))|0);
      var $call8=_luaL_checkinteger($14, $add7);
      var $call9=_lua_setlocal($13, $ar, $call8);
      var $call10=_lua_pushstring($12, $call9);
      $retval=1;
      label = 5; break;
    case 5: 
      var $16=$retval;
      STACKTOP = __stackBase__;
      return $16;
  }

}


function _db_setmetatable($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $t;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_lua_type($0, 2);
      $t=$call;
      var $1=$t;
      var $cmp=(($1)|0)==0;
      if ($cmp) { var $4 = 1;label = 5; break; } else { label = 3; break; }
    case 3: 
      var $2=$t;
      var $cmp1=(($2)|0)==5;
      if ($cmp1) { var $4 = 1;label = 5; break; } else { label = 4; break; }
    case 4: 
      var $3=$L_addr;
      var $call2=_luaL_argerror($3, 2, ((5252140)|0));
      var $tobool=(($call2)|0)!=0;
      var $4 = $tobool;label = 5; break;
    case 5: 
      var $4;
      var $lor_ext=(($4)&1);
      var $5=$L_addr;
      _lua_settop($5, 2);
      var $6=$L_addr;
      var $call3=_lua_setmetatable($6, 1);

      return 1;
  }

}


function _db_setupvalue($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  _luaL_checkany($0, 3);
  var $1=$L_addr;
  var $call=_auxupvalue($1, 0);

  return $call;
}


function _db_traceback($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $arg=__stackBase__;
      var $L1;
      var $msg;
      var $level;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_getthread($0, $arg);
      $L1=$call;
      var $1=$L_addr;
      var $2=HEAP32[(($arg)>>2)];
      var $add=((($2)+(1))|0);
      var $call1=_lua_tolstring($1, $add, 0);
      $msg=$call1;
      var $3=$msg;
      var $cmp=(($3)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $4=$L_addr;
      var $5=HEAP32[(($arg)>>2)];
      var $add2=((($5)+(1))|0);
      var $call3=_lua_type($4, $add2);
      var $cmp4=(($call3)|0) <= 0;
      if ($cmp4) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $6=$L_addr;
      var $7=HEAP32[(($arg)>>2)];
      var $add5=((($7)+(1))|0);
      _lua_pushvalue($6, $add5);
      label = 6; break;
    case 5: 
      var $8=$L_addr;
      var $9=HEAP32[(($arg)>>2)];
      var $add6=((($9)+(2))|0);
      var $10=$L_addr;
      var $11=$L1;
      var $cmp7=(($10)|0)==(($11)|0);
      var $cond=$cmp7 ? 1 : 0;
      var $call8=_luaL_optinteger($8, $add6, $cond);
      $level=$call8;
      var $12=$L_addr;
      var $13=$L1;
      var $14=$msg;
      var $15=$level;
      _luaL_traceback($12, $13, $14, $15);
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return 1;
  }

}


function _getthread($L, $arg) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $arg_addr;
      $L_addr=$L;
      $arg_addr=$arg;
      var $0=$L_addr;
      var $call=_lua_type($0, 1);
      var $cmp=(($call)|0)==8;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$arg_addr;
      HEAP32[(($1)>>2)]=1;
      var $2=$L_addr;
      var $call1=_lua_tothread($2, 1);
      $retval=$call1;
      label = 5; break;
    case 4: 
      var $3=$arg_addr;
      HEAP32[(($3)>>2)]=0;
      var $4=$L_addr;
      $retval=$4;
      label = 5; break;
    case 5: 
      var $5=$retval;

      return $5;
  }

}


function _auxupvalue($L, $get) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $get_addr;
      var $name;
      var $n;
      $L_addr=$L;
      $get_addr=$get;
      var $0=$L_addr;
      var $call=_luaL_checkinteger($0, 2);
      $n=$call;
      var $1=$L_addr;
      _luaL_checktype($1, 1, 6);
      var $2=$get_addr;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$L_addr;
      var $4=$n;
      var $call1=_lua_getupvalue($3, 1, $4);
      var $cond = $call1;label = 5; break;
    case 4: 
      var $5=$L_addr;
      var $6=$n;
      var $call2=_lua_setupvalue($5, 1, $6);
      var $cond = $call2;label = 5; break;
    case 5: 
      var $cond;
      $name=$cond;
      var $7=$name;
      var $cmp=(($7)|0)==0;
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $retval=0;
      label = 8; break;
    case 7: 
      var $8=$L_addr;
      var $9=$name;
      var $call3=_lua_pushstring($8, $9);
      var $10=$L_addr;
      var $11=$get_addr;
      var $add=((($11)+(1))|0);
      var $sub=(((-$add))|0);
      _lua_insert($10, $sub);
      var $12=$get_addr;
      var $add4=((($12)+(1))|0);
      $retval=$add4;
      label = 8; break;
    case 8: 
      var $13=$retval;

      return $13;
  }

}


function _hookf($L, $ar) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $ar_addr;
      $L_addr=$L;
      $ar_addr=$ar;
      var $0=$L_addr;
      var $call=_luaL_getsubtable($0, -1001000, ((5251760)|0));
      var $1=$L_addr;
      var $call1=_lua_pushthread($1);
      var $2=$L_addr;
      _lua_rawget($2, -2);
      var $3=$L_addr;
      var $call2=_lua_type($3, -1);
      var $cmp=(($call2)|0)==6;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $4=$L_addr;
      var $5=$ar_addr;
      var $event=(($5)|0);
      var $6=HEAP32[(($event)>>2)];
      var $arrayidx=((5244660+($6<<2))|0);
      var $7=HEAP32[(($arrayidx)>>2)];
      var $call3=_lua_pushstring($4, $7);
      var $8=$ar_addr;
      var $currentline=(($8+20)|0);
      var $9=HEAP32[(($currentline)>>2)];
      var $cmp4=(($9)|0) >= 0;
      if ($cmp4) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $10=$L_addr;
      var $11=$ar_addr;
      var $currentline6=(($11+20)|0);
      var $12=HEAP32[(($currentline6)>>2)];
      _lua_pushinteger($10, $12);
      label = 6; break;
    case 5: 
      var $13=$L_addr;
      _lua_pushnil($13);
      label = 6; break;
    case 6: 
      var $14=$L_addr;
      _lua_callk($14, 2, 0, 0, 0);
      label = 7; break;
    case 7: 

      return;
  }

}


function _makemask($smask, $count) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $smask_addr;
      var $count_addr;
      var $mask;
      $smask_addr=$smask;
      $count_addr=$count;
      $mask=0;
      var $0=$smask_addr;
      var $call=_strchr($0, 99);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$mask;
      var $or=$1 | 1;
      $mask=$or;
      label = 4; break;
    case 4: 
      var $2=$smask_addr;
      var $call1=_strchr($2, 114);
      var $tobool2=(($call1)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=$mask;
      var $or4=$3 | 2;
      $mask=$or4;
      label = 6; break;
    case 6: 
      var $4=$smask_addr;
      var $call6=_strchr($4, 108);
      var $tobool7=(($call6)|0)!=0;
      if ($tobool7) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $5=$mask;
      var $or9=$5 | 4;
      $mask=$or9;
      label = 8; break;
    case 8: 
      var $6=$count_addr;
      var $cmp=(($6)|0) > 0;
      if ($cmp) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $7=$mask;
      var $or12=$7 | 8;
      $mask=$or12;
      label = 10; break;
    case 10: 
      var $8=$mask;

      return $8;
  }

}


function _checkupval($L, $argf, $argnup) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 100)|0; _memset(__stackBase__, 0, 100);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $argf_addr;
      var $argnup_addr;
      var $ar=__stackBase__;
      var $nup;
      $L_addr=$L;
      $argf_addr=$argf;
      $argnup_addr=$argnup;
      var $0=$L_addr;
      var $1=$argnup_addr;
      var $call=_luaL_checkinteger($0, $1);
      $nup=$call;
      var $2=$L_addr;
      var $3=$argf_addr;
      _luaL_checktype($2, $3, 6);
      var $4=$L_addr;
      var $5=$argf_addr;
      _lua_pushvalue($4, $5);
      var $6=$L_addr;
      var $call1=_lua_getinfo($6, ((5249960)|0), $ar);
      var $7=$nup;
      var $cmp=1 <= (($7)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $8=$nup;
      var $nups=(($ar+32)|0);
      var $9=HEAP8[($nups)];
      var $conv=(($9)&255);
      var $cmp2=(($8)|0) <= (($conv)|0);
      if ($cmp2) { var $12 = 1;label = 5; break; } else { label = 4; break; }
    case 4: 
      var $10=$L_addr;
      var $11=$argnup_addr;
      var $call4=_luaL_argerror($10, $11, ((5249812)|0));
      var $tobool=(($call4)|0)!=0;
      var $12 = $tobool;label = 5; break;
    case 5: 
      var $12;
      var $lor_ext=(($12)&1);
      var $13=$nup;
      STACKTOP = __stackBase__;
      return $13;
  }

}


function _settabss($L, $i, $v) {
  var label = 0;


  var $L_addr;
  var $i_addr;
  var $v_addr;
  $L_addr=$L;
  $i_addr=$i;
  $v_addr=$v;
  var $0=$L_addr;
  var $1=$v_addr;
  var $call=_lua_pushstring($0, $1);
  var $2=$L_addr;
  var $3=$i_addr;
  _lua_setfield($2, -2, $3);

  return;
}


function _settabsi($L, $i, $v) {
  var label = 0;


  var $L_addr;
  var $i_addr;
  var $v_addr;
  $L_addr=$L;
  $i_addr=$i;
  $v_addr=$v;
  var $0=$L_addr;
  var $1=$v_addr;
  _lua_pushinteger($0, $1);
  var $2=$L_addr;
  var $3=$i_addr;
  _lua_setfield($2, -2, $3);

  return;
}


function _settabsb($L, $i, $v) {
  var label = 0;


  var $L_addr;
  var $i_addr;
  var $v_addr;
  $L_addr=$L;
  $i_addr=$i;
  $v_addr=$v;
  var $0=$L_addr;
  var $1=$v_addr;
  _lua_pushboolean($0, $1);
  var $2=$L_addr;
  var $3=$i_addr;
  _lua_setfield($2, -2, $3);

  return;
}


function _unmakemask($mask, $smask) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mask_addr;
      var $smask_addr;
      var $i;
      $mask_addr=$mask;
      $smask_addr=$smask;
      $i=0;
      var $0=$mask_addr;
      var $and=$0 & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$i;
      var $inc=((($1)+(1))|0);
      $i=$inc;
      var $2=$smask_addr;
      var $arrayidx=(($2+$1)|0);
      HEAP8[($arrayidx)]=99;
      label = 4; break;
    case 4: 
      var $3=$mask_addr;
      var $and1=$3 & 2;
      var $tobool2=(($and1)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $4=$i;
      var $inc4=((($4)+(1))|0);
      $i=$inc4;
      var $5=$smask_addr;
      var $arrayidx5=(($5+$4)|0);
      HEAP8[($arrayidx5)]=114;
      label = 6; break;
    case 6: 
      var $6=$mask_addr;
      var $and7=$6 & 4;
      var $tobool8=(($and7)|0)!=0;
      if ($tobool8) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $7=$i;
      var $inc10=((($7)+(1))|0);
      $i=$inc10;
      var $8=$smask_addr;
      var $arrayidx11=(($8+$7)|0);
      HEAP8[($arrayidx11)]=108;
      label = 8; break;
    case 8: 
      var $9=$i;
      var $10=$smask_addr;
      var $arrayidx13=(($10+$9)|0);
      HEAP8[($arrayidx13)]=0;
      var $11=$smask_addr;

      return $11;
  }

}


function _treatstackoption($L, $L1, $fname) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $L1_addr;
      var $fname_addr;
      $L_addr=$L;
      $L1_addr=$L1;
      $fname_addr=$fname;
      var $0=$L_addr;
      var $1=$L1_addr;
      var $cmp=(($0)|0)==(($1)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$L_addr;
      _lua_pushvalue($2, -2);
      var $3=$L_addr;
      _lua_remove($3, -3);
      label = 5; break;
    case 4: 
      var $4=$L1_addr;
      var $5=$L_addr;
      _lua_xmove($4, $5, 1);
      label = 5; break;
    case 5: 
      var $6=$L_addr;
      var $7=$fname_addr;
      _lua_setfield($6, -2, $7);

      return;
  }

}


function _luaopen_io($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  _lua_createtable($0, 0, 11);
  var $1=$L_addr;
  _luaL_setfuncs($1, ((5244564)|0), 0);
  var $2=$L_addr;
  _createmeta($2);
  var $3=$L_addr;
  var $4=HEAP32[((_stdin)>>2)];
  _createstdfile($3, $4, ((5246744)|0), ((5252400)|0));
  var $5=$L_addr;
  var $6=HEAP32[((_stdout)>>2)];
  _createstdfile($5, $6, ((5250372)|0), ((5248684)|0));
  var $7=$L_addr;
  var $8=HEAP32[((_stderr)>>2)];
  _createstdfile($7, $8, 0, ((5247532)|0));

  return 1;
}


function _createmeta($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_luaL_newmetatable($0, ((5246676)|0));
  var $1=$L_addr;
  _lua_pushvalue($1, -1);
  var $2=$L_addr;
  _lua_setfield($2, -2, ((5245944)|0));
  var $3=$L_addr;
  _luaL_setfuncs($3, ((5244680)|0), 0);
  var $4=$L_addr;
  _lua_settop($4, -2);

  return;
}


function _createstdfile($L, $f, $k, $fname) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $f_addr;
      var $k_addr;
      var $fname_addr;
      var $p;
      $L_addr=$L;
      $f_addr=$f;
      $k_addr=$k;
      $fname_addr=$fname;
      var $0=$L_addr;
      var $call=_newprefile($0);
      $p=$call;
      var $1=$f_addr;
      var $2=$p;
      var $f1=(($2)|0);
      HEAP32[(($f1)>>2)]=$1;
      var $3=$p;
      var $closef=(($3+4)|0);
      HEAP32[(($closef)>>2)]=172;
      var $4=$k_addr;
      var $cmp=(($4)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$L_addr;
      _lua_pushvalue($5, -1);
      var $6=$L_addr;
      var $7=$k_addr;
      _lua_setfield($6, -1001000, $7);
      label = 4; break;
    case 4: 
      var $8=$L_addr;
      var $9=$fname_addr;
      _lua_setfield($8, -2, $9);

      return;
  }

}


function _newprefile($L) {
  var label = 0;


  var $L_addr;
  var $p;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_lua_newuserdata($0, 8);
  var $1=$call;
  $p=$1;
  var $2=$p;
  var $closef=(($2+4)|0);
  HEAP32[(($closef)>>2)]=0;
  var $3=$L_addr;
  _luaL_setmetatable($3, ((5246676)|0));
  var $4=$p;

  return $4;
}


function _io_noclose($L) {
  var label = 0;


  var $L_addr;
  var $p;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_luaL_checkudata($0, 1, ((5246676)|0));
  var $1=$call;
  $p=$1;
  var $2=$p;
  var $closef=(($2+4)|0);
  HEAP32[(($closef)>>2)]=172;
  var $3=$L_addr;
  _lua_pushnil($3);
  var $4=$L_addr;
  var $call1=_lua_pushlstring($4, ((5246376)|0), 26);

  return 2;
}


function _io_close($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_lua_type($0, 1);
      var $cmp=(($call)|0)==-1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$L_addr;
      _lua_getfield($1, -1001000, ((5250372)|0));
      label = 4; break;
    case 4: 
      var $2=$L_addr;
      var $call1=_tofile($2);
      var $3=$L_addr;
      var $call2=_aux_close($3);

      return $call2;
  }

}


function _f_flush($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_tofile($1);
  var $call1=_fflush($call);
  var $cmp=(($call1)|0)==0;
  var $conv=(($cmp)&1);
  var $call2=_luaL_fileresult($0, $conv, 0);

  return $call2;
}


function _f_lines($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_tofile($0);
  var $1=$L_addr;
  _aux_lines($1, 0);

  return 1;
}


function _f_read($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_tofile($1);
  var $call1=_g_read($0, $call, 2);

  return $call1;
}


function _f_seek($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $f;
      var $op;
      var $p3;
      var $offset;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_tofile($0);
      $f=$call;
      var $1=$L_addr;
      var $call1=_luaL_checkoption($1, 2, ((5250340)|0), ((5244788)|0));
      $op=$call1;
      var $2=$L_addr;
      var $call2=_luaL_optnumber($2, 3, 0);
      $p3=$call2;
      var $3=$p3;
      var $conv=(($3)&-1);
      $offset=$conv;
      var $4=$offset;
      var $conv3=(($4)|0);
      var $5=$p3;
      var $cmp=$conv3 == $5;
      if ($cmp) { var $7 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $6=$L_addr;
      var $call5=_luaL_argerror($6, 3, ((5249928)|0));
      var $tobool=(($call5)|0)!=0;
      var $7 = $tobool;label = 4; break;
    case 4: 
      var $7;
      var $lor_ext=(($7)&1);
      var $8=$f;
      var $9=$offset;
      var $10=$op;
      var $arrayidx=((5244804+($10<<2))|0);
      var $11=HEAP32[(($arrayidx)>>2)];
      var $call6=_fseek($8, $9, $11);
      $op=$call6;
      var $12=$op;
      var $tobool7=(($12)|0)!=0;
      if ($tobool7) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $13=$L_addr;
      var $call8=_luaL_fileresult($13, 0, 0);
      $retval=$call8;
      label = 7; break;
    case 6: 
      var $14=$L_addr;
      var $15=$f;
      var $call9=_ftell($15);
      var $conv10=(($call9)|0);
      _lua_pushnumber($14, $conv10);
      $retval=1;
      label = 7; break;
    case 7: 
      var $16=$retval;

      return $16;
  }

}
_f_seek["X"]=1;

function _f_setvbuf($L) {
  var label = 0;


  var $L_addr;
  var $f;
  var $op;
  var $sz;
  var $res;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_tofile($0);
  $f=$call;
  var $1=$L_addr;
  var $call1=_luaL_checkoption($1, 2, 0, ((5244760)|0));
  $op=$call1;
  var $2=$L_addr;
  var $call2=_luaL_optinteger($2, 3, 1024);
  $sz=$call2;
  var $3=$f;
  var $4=$op;
  var $arrayidx=((5244776+($4<<2))|0);
  var $5=HEAP32[(($arrayidx)>>2)];
  var $6=$sz;
  var $call3=_setvbuf($3, 0, $5, $6);
  $res=$call3;
  var $7=$L_addr;
  var $8=$res;
  var $cmp=(($8)|0)==0;
  var $conv=(($cmp)&1);
  var $call4=_luaL_fileresult($7, $conv, 0);

  return $call4;
}


function _f_write($L) {
  var label = 0;


  var $L_addr;
  var $f;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_tofile($0);
  $f=$call;
  var $1=$L_addr;
  _lua_pushvalue($1, 1);
  var $2=$L_addr;
  var $3=$f;
  var $call1=_g_write($2, $3, 2);

  return $call1;
}


function _f_gc($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $p;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_luaL_checkudata($0, 1, ((5246676)|0));
      var $1=$call;
      $p=$1;
      var $2=$p;
      var $closef=(($2+4)|0);
      var $3=HEAP32[(($closef)>>2)];
      var $cmp=(($3)|0)==0;
      if ($cmp) { label = 5; break; } else { label = 3; break; }
    case 3: 
      var $4=$p;
      var $f=(($4)|0);
      var $5=HEAP32[(($f)>>2)];
      var $cmp1=(($5)|0)!=0;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $6=$L_addr;
      var $call2=_aux_close($6);
      label = 5; break;
    case 5: 

      return 0;
  }

}


function _f_tostring($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $p;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_luaL_checkudata($0, 1, ((5246676)|0));
      var $1=$call;
      $p=$1;
      var $2=$p;
      var $closef=(($2+4)|0);
      var $3=HEAP32[(($closef)>>2)];
      var $cmp=(($3)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$L_addr;
      var $call1=_lua_pushlstring($4, ((5251928)|0), 13);
      label = 5; break;
    case 4: 
      var $5=$L_addr;
      var $6=$p;
      var $f=(($6)|0);
      var $7=HEAP32[(($f)>>2)];
      var $call2=_lua_pushfstring($5, ((5251748)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$7,tempInt));
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return 1;
  }

}


function _aux_close($L) {
  var label = 0;


  var $L_addr;
  var $p;
  var $cf;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_luaL_checkudata($0, 1, ((5246676)|0));
  var $1=$call;
  $p=$1;
  var $2=$p;
  var $closef=(($2+4)|0);
  var $3=HEAP32[(($closef)>>2)];
  $cf=$3;
  var $4=$p;
  var $closef1=(($4+4)|0);
  HEAP32[(($closef1)>>2)]=0;
  var $5=$cf;
  var $6=$L_addr;
  var $call2=FUNCTION_TABLE[$5]($6);

  return $call2;
}


function _tofile($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $p;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_luaL_checkudata($0, 1, ((5246676)|0));
      var $1=$call;
      $p=$1;
      var $2=$p;
      var $closef=(($2+4)|0);
      var $3=HEAP32[(($closef)>>2)];
      var $cmp=(($3)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$L_addr;
      var $call1=_luaL_error($4, ((5251316)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      var $5=$p;
      var $f=(($5)|0);
      var $6=HEAP32[(($f)>>2)];
      STACKTOP = __stackBase__;
      return $6;
  }

}


function _g_write($L, $f, $arg) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $f_addr;
      var $arg_addr;
      var $nargs;
      var $status;
      var $l=__stackBase__;
      var $s;
      $L_addr=$L;
      $f_addr=$f;
      $arg_addr=$arg;
      var $0=$L_addr;
      var $call=_lua_gettop($0);
      var $1=$arg_addr;
      var $sub=((($call)-($1))|0);
      $nargs=$sub;
      $status=1;
      label = 3; break;
    case 3: 
      var $2=$nargs;
      var $dec=((($2)-(1))|0);
      $nargs=$dec;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $3=$L_addr;
      var $4=$arg_addr;
      var $call1=_lua_type($3, $4);
      var $cmp=(($call1)|0)==3;
      if ($cmp) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $5=$status;
      var $tobool2=(($5)|0)!=0;
      if ($tobool2) { label = 6; break; } else { var $9 = 0;label = 7; break; }
    case 6: 
      var $6=$f_addr;
      var $7=$L_addr;
      var $8=$arg_addr;
      var $call3=_lua_tonumberx($7, $8, 0);
      var $call4=_fprintf($6, ((5251568)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP = (STACKTOP + 8)|0,(HEAPF64[(tempDoublePtr)>>3]=$call3,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $cmp5=(($call4)|0) > 0;
      var $9 = $cmp5;label = 7; break;
    case 7: 
      var $9;
      var $land_ext=(($9)&1);
      $status=$land_ext;
      label = 11; break;
    case 8: 
      var $10=$L_addr;
      var $11=$arg_addr;
      var $call6=_luaL_checklstring($10, $11, $l);
      $s=$call6;
      var $12=$status;
      var $tobool7=(($12)|0)!=0;
      if ($tobool7) { label = 9; break; } else { var $17 = 0;label = 10; break; }
    case 9: 
      var $13=$s;
      var $14=HEAP32[(($l)>>2)];
      var $15=$f_addr;
      var $call9=_fwrite($13, 1, $14, $15);
      var $16=HEAP32[(($l)>>2)];
      var $cmp10=(($call9)|0)==(($16)|0);
      var $17 = $cmp10;label = 10; break;
    case 10: 
      var $17;
      var $land_ext12=(($17)&1);
      $status=$land_ext12;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $18=$arg_addr;
      var $inc=((($18)+(1))|0);
      $arg_addr=$inc;
      label = 3; break;
    case 13: 
      var $19=$status;
      var $tobool13=(($19)|0)!=0;
      if ($tobool13) { label = 14; break; } else { label = 15; break; }
    case 14: 
      $retval=1;
      label = 16; break;
    case 15: 
      var $20=$L_addr;
      var $21=$status;
      var $call16=_luaL_fileresult($20, $21, 0);
      $retval=$call16;
      label = 16; break;
    case 16: 
      var $22=$retval;
      STACKTOP = __stackBase__;
      return $22;
  }

}
_g_write["X"]=1;

function _g_read($L, $f, $first) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $f_addr;
      var $first_addr;
      var $nargs;
      var $success;
      var $n;
      var $l;
      var $p;
      $L_addr=$L;
      $f_addr=$f;
      $first_addr=$first;
      var $0=$L_addr;
      var $call=_lua_gettop($0);
      var $sub=((($call)-(1))|0);
      $nargs=$sub;
      var $1=$f_addr;
      _clearerr($1);
      var $2=$nargs;
      var $cmp=(($2)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$L_addr;
      var $4=$f_addr;
      var $call1=_read_line($3, $4, 1);
      $success=$call1;
      var $5=$first_addr;
      var $add=((($5)+(1))|0);
      $n=$add;
      label = 26; break;
    case 4: 
      var $6=$L_addr;
      var $7=$nargs;
      var $add2=((($7)+(20))|0);
      _luaL_checkstack($6, $add2, ((5249792)|0));
      $success=1;
      var $8=$first_addr;
      $n=$8;
      label = 5; break;
    case 5: 
      var $9=$nargs;
      var $dec=((($9)-(1))|0);
      $nargs=$dec;
      var $tobool=(($9)|0)!=0;
      if ($tobool) { label = 6; break; } else { var $11 = 0;label = 7; break; }
    case 6: 
      var $10=$success;
      var $tobool3=(($10)|0)!=0;
      var $11 = $tobool3;label = 7; break;
    case 7: 
      var $11;
      if ($11) { label = 8; break; } else { label = 25; break; }
    case 8: 
      var $12=$L_addr;
      var $13=$n;
      var $call4=_lua_type($12, $13);
      var $cmp5=(($call4)|0)==3;
      if ($cmp5) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $14=$L_addr;
      var $15=$n;
      var $call7=_lua_tointegerx($14, $15, 0);
      $l=$call7;
      var $16=$l;
      var $cmp8=(($16)|0)==0;
      if ($cmp8) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $17=$L_addr;
      var $18=$f_addr;
      var $call9=_test_eof($17, $18);
      var $cond = $call9;label = 12; break;
    case 11: 
      var $19=$L_addr;
      var $20=$f_addr;
      var $21=$l;
      var $call10=_read_chars($19, $20, $21);
      var $cond = $call10;label = 12; break;
    case 12: 
      var $cond;
      $success=$cond;
      label = 23; break;
    case 13: 
      var $22=$L_addr;
      var $23=$n;
      var $call12=_lua_tolstring($22, $23, 0);
      $p=$call12;
      var $24=$p;
      var $tobool13=(($24)|0)!=0;
      if ($tobool13) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $25=$p;
      var $arrayidx=(($25)|0);
      var $26=HEAP8[($arrayidx)];
      var $conv=(($26 << 24) >> 24);
      var $cmp14=(($conv)|0)==42;
      if ($cmp14) { var $29 = 1;label = 16; break; } else { label = 15; break; }
    case 15: 
      var $27=$L_addr;
      var $28=$n;
      var $call16=_luaL_argerror($27, $28, ((5249648)|0));
      var $tobool17=(($call16)|0)!=0;
      var $29 = $tobool17;label = 16; break;
    case 16: 
      var $29;
      var $lor_ext=(($29)&1);
      var $30=$p;
      var $arrayidx18=(($30+1)|0);
      var $31=HEAP8[($arrayidx18)];
      var $conv19=(($31 << 24) >> 24);
      if ((($conv19)|0)==110) {
        label = 17; break;
      }
      else if ((($conv19)|0)==108) {
        label = 18; break;
      }
      else if ((($conv19)|0)==76) {
        label = 19; break;
      }
      else if ((($conv19)|0)==97) {
        label = 20; break;
      }
      else {
      label = 21; break;
      }
      
    case 17: 
      var $32=$L_addr;
      var $33=$f_addr;
      var $call20=_read_number($32, $33);
      $success=$call20;
      label = 22; break;
    case 18: 
      var $34=$L_addr;
      var $35=$f_addr;
      var $call22=_read_line($34, $35, 1);
      $success=$call22;
      label = 22; break;
    case 19: 
      var $36=$L_addr;
      var $37=$f_addr;
      var $call24=_read_line($36, $37, 0);
      $success=$call24;
      label = 22; break;
    case 20: 
      var $38=$L_addr;
      var $39=$f_addr;
      _read_all($38, $39);
      $success=1;
      label = 22; break;
    case 21: 
      var $40=$L_addr;
      var $41=$n;
      var $call26=_luaL_argerror($40, $41, ((5249500)|0));
      $retval=$call26;
      label = 31; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $42=$n;
      var $inc=((($42)+(1))|0);
      $n=$inc;
      label = 5; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $43=$f_addr;
      var $call28=_ferror($43);
      var $tobool29=(($call28)|0)!=0;
      if ($tobool29) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $44=$L_addr;
      var $call31=_luaL_fileresult($44, 0, 0);
      $retval=$call31;
      label = 31; break;
    case 28: 
      var $45=$success;
      var $tobool33=(($45)|0)!=0;
      if ($tobool33) { label = 30; break; } else { label = 29; break; }
    case 29: 
      var $46=$L_addr;
      _lua_settop($46, -2);
      var $47=$L_addr;
      _lua_pushnil($47);
      label = 30; break;
    case 30: 
      var $48=$n;
      var $49=$first_addr;
      var $sub36=((($48)-($49))|0);
      $retval=$sub36;
      label = 31; break;
    case 31: 
      var $50=$retval;

      return $50;
  }

}
_g_read["X"]=1;

function _read_line($L, $f, $chop) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1040)|0; _memset(__stackBase__, 0, 1040);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $f_addr;
      var $chop_addr;
      var $b=__stackBase__;
      var $l;
      var $p;
      $L_addr=$L;
      $f_addr=$f;
      $chop_addr=$chop;
      var $0=$L_addr;
      _luaL_buffinit($0, $b);
      label = 3; break;
    case 3: 
      var $call=_luaL_prepbuffsize($b, 1024);
      $p=$call;
      var $1=$p;
      var $2=$f_addr;
      var $call1=_fgets($1, 1024, $2);
      var $cmp=(($call1)|0)==0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      _luaL_pushresult($b);
      var $3=$L_addr;
      var $call2=_lua_rawlen($3, -1);
      var $cmp3=(($call2)>>>0) > 0;
      var $conv=(($cmp3)&1);
      $retval=$conv;
      label = 10; break;
    case 5: 
      var $4=$p;
      var $call4=_strlen($4);
      $l=$call4;
      var $5=$l;
      var $cmp5=(($5)|0)==0;
      if ($cmp5) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $6=$l;
      var $sub=((($6)-(1))|0);
      var $7=$p;
      var $arrayidx=(($7+$sub)|0);
      var $8=HEAP8[($arrayidx)];
      var $conv7=(($8 << 24) >> 24);
      var $cmp8=(($conv7)|0)!=10;
      if ($cmp8) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $9=$l;
      var $n=(($b+8)|0);
      var $10=HEAP32[(($n)>>2)];
      var $add=((($10)+($9))|0);
      HEAP32[(($n)>>2)]=$add;
      label = 9; break;
    case 8: 
      var $11=$l;
      var $12=$chop_addr;
      var $sub11=((($11)-($12))|0);
      var $n12=(($b+8)|0);
      var $13=HEAP32[(($n12)>>2)];
      var $add13=((($13)+($sub11))|0);
      HEAP32[(($n12)>>2)]=$add13;
      _luaL_pushresult($b);
      $retval=1;
      label = 10; break;
    case 9: 
      label = 3; break;
    case 10: 
      var $14=$retval;
      STACKTOP = __stackBase__;
      return $14;
  }

}
_read_line["X"]=1;

function _test_eof($L, $f) {
  var label = 0;


  var $L_addr;
  var $f_addr;
  var $c;
  $L_addr=$L;
  $f_addr=$f;
  var $0=$f_addr;
  var $call=_fgetc($0);
  $c=$call;
  var $1=$c;
  var $2=$f_addr;
  var $call1=_ungetc($1, $2);
  var $3=$L_addr;
  var $call2=_lua_pushlstring($3, 0, 0);
  var $4=$c;
  var $cmp=(($4)|0)!=-1;
  var $conv=(($cmp)&1);

  return $conv;
}


function _read_chars($L, $f, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1040)|0; _memset(__stackBase__, 0, 1040);

  var $L_addr;
  var $f_addr;
  var $n_addr;
  var $nr;
  var $p;
  var $b=__stackBase__;
  $L_addr=$L;
  $f_addr=$f;
  $n_addr=$n;
  var $0=$L_addr;
  _luaL_buffinit($0, $b);
  var $1=$n_addr;
  var $call=_luaL_prepbuffsize($b, $1);
  $p=$call;
  var $2=$p;
  var $3=$n_addr;
  var $4=$f_addr;
  var $call1=_fread($2, 1, $3, $4);
  $nr=$call1;
  var $5=$nr;
  var $n2=(($b+8)|0);
  var $6=HEAP32[(($n2)>>2)];
  var $add=((($6)+($5))|0);
  HEAP32[(($n2)>>2)]=$add;
  _luaL_pushresult($b);
  var $7=$nr;
  var $cmp=(($7)>>>0) > 0;
  var $conv=(($cmp)&1);
  STACKTOP = __stackBase__;
  return $conv;
}


function _read_number($L, $f) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; _memset(__stackBase__, 0, 8);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $f_addr;
      var $d=__stackBase__;
      $L_addr=$L;
      $f_addr=$f;
      var $0=$f_addr;
      var $call=_fscanf($0, ((5249376)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$d,tempInt));
      var $cmp=(($call)|0)==1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$L_addr;
      var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($d)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($d)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _lua_pushnumber($1, $2);
      $retval=1;
      label = 5; break;
    case 4: 
      var $3=$L_addr;
      _lua_pushnil($3);
      $retval=0;
      label = 5; break;
    case 5: 
      var $4=$retval;
      STACKTOP = __stackBase__;
      return $4;
  }

}


function _read_all($L, $f) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1040)|0; _memset(__stackBase__, 0, 1040);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $f_addr;
      var $rlen;
      var $b=__stackBase__;
      var $p;
      var $nr;
      $L_addr=$L;
      $f_addr=$f;
      $rlen=1024;
      var $0=$L_addr;
      _luaL_buffinit($0, $b);
      label = 3; break;
    case 3: 
      var $1=$rlen;
      var $call=_luaL_prepbuffsize($b, $1);
      $p=$call;
      var $2=$p;
      var $3=$rlen;
      var $4=$f_addr;
      var $call1=_fread($2, 1, $3, $4);
      $nr=$call1;
      var $5=$nr;
      var $n=(($b+8)|0);
      var $6=HEAP32[(($n)>>2)];
      var $add=((($6)+($5))|0);
      HEAP32[(($n)>>2)]=$add;
      var $7=$nr;
      var $8=$rlen;
      var $cmp=(($7)>>>0) < (($8)>>>0);
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 9; break;
    case 5: 
      var $9=$rlen;
      var $cmp2=(($9)>>>0) <= 1073741823;
      if ($cmp2) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $10=$rlen;
      var $mul=($10<<1);
      $rlen=$mul;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 3; break;
    case 9: 
      _luaL_pushresult($b);
      STACKTOP = __stackBase__;
      return;
  }

}


function _aux_lines($L, $toclose) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $toclose_addr;
      var $i;
      var $n;
      $L_addr=$L;
      $toclose_addr=$toclose;
      var $0=$L_addr;
      var $call=_lua_gettop($0);
      var $sub=((($call)-(1))|0);
      $n=$sub;
      var $1=$n;
      var $cmp=(($1)|0) <= 17;
      if ($cmp) { var $3 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$L_addr;
      var $call1=_luaL_argerror($2, 17, ((5249136)|0));
      var $tobool=(($call1)|0)!=0;
      var $3 = $tobool;label = 4; break;
    case 4: 
      var $3;
      var $lor_ext=(($3)&1);
      var $4=$L_addr;
      _lua_pushvalue($4, 1);
      var $5=$L_addr;
      var $6=$n;
      _lua_pushinteger($5, $6);
      var $7=$L_addr;
      var $8=$toclose_addr;
      _lua_pushboolean($7, $8);
      $i=1;
      label = 5; break;
    case 5: 
      var $9=$i;
      var $10=$n;
      var $cmp2=(($9)|0) <= (($10)|0);
      if ($cmp2) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $11=$L_addr;
      var $12=$i;
      var $add=((($12)+(1))|0);
      _lua_pushvalue($11, $add);
      label = 7; break;
    case 7: 
      var $13=$i;
      var $inc=((($13)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      var $14=$L_addr;
      var $15=$n;
      var $add3=((($15)+(3))|0);
      _lua_pushcclosure($14, 166, $add3);

      return;
  }

}


function _io_readline($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $p;
      var $i;
      var $n;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_lua_touserdata($0, -1001001);
      var $1=$call;
      $p=$1;
      var $2=$L_addr;
      var $call1=_lua_tointegerx($2, -1001002, 0);
      $n=$call1;
      var $3=$p;
      var $closef=(($3+4)|0);
      var $4=HEAP32[(($closef)>>2)];
      var $cmp=(($4)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$L_addr;
      var $call2=_luaL_error($5, ((5248908)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      $retval=$call2;
      label = 15; break;
    case 4: 
      var $6=$L_addr;
      _lua_settop($6, 1);
      $i=1;
      label = 5; break;
    case 5: 
      var $7=$i;
      var $8=$n;
      var $cmp3=(($7)|0) <= (($8)|0);
      if ($cmp3) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $9=$L_addr;
      var $10=$i;
      var $add=((($10)+(3))|0);
      var $sub=(((-1001000)-($add))|0);
      _lua_pushvalue($9, $sub);
      label = 7; break;
    case 7: 
      var $11=$i;
      var $inc=((($11)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      var $12=$L_addr;
      var $13=$p;
      var $f=(($13)|0);
      var $14=HEAP32[(($f)>>2)];
      var $call4=_g_read($12, $14, 2);
      $n=$call4;
      var $15=$L_addr;
      var $16=$n;
      var $sub5=(((-$16))|0);
      var $call6=_lua_type($15, $sub5);
      var $cmp7=(($call6)|0)==0;
      if ($cmp7) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $17=$n;
      $retval=$17;
      label = 15; break;
    case 10: 
      var $18=$n;
      var $cmp9=(($18)|0) > 1;
      if ($cmp9) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $19=$L_addr;
      var $20=$L_addr;
      var $21=$n;
      var $sub11=(((-$21))|0);
      var $add12=((($sub11)+(1))|0);
      var $call13=_lua_tolstring($20, $add12, 0);
      var $call14=_luaL_error($19, ((5248780)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$call13,tempInt));
      $retval=$call14;
      label = 15; break;
    case 12: 
      var $22=$L_addr;
      var $call16=_lua_toboolean($22, -1001003);
      var $tobool=(($call16)|0)!=0;
      if ($tobool) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $23=$L_addr;
      _lua_settop($23, 0);
      var $24=$L_addr;
      _lua_pushvalue($24, -1001001);
      var $25=$L_addr;
      var $call18=_aux_close($25);
      label = 14; break;
    case 14: 
      $retval=0;
      label = 15; break;
    case 15: 
      var $26=$retval;
      STACKTOP = __stackBase__;
      return $26;
  }

}
_io_readline["X"]=1;

function _io_flush($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_getiofile($1, ((5250372)|0));
  var $call1=_fflush($call);
  var $cmp=(($call1)|0)==0;
  var $conv=(($cmp)&1);
  var $call2=_luaL_fileresult($0, $conv, 0);

  return $call2;
}


function _io_input($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_g_iofile($0, ((5246744)|0), ((5247576)|0));

  return $call;
}


function _io_lines($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $toclose;
      var $filename;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_lua_type($0, 1);
      var $cmp=(($call)|0)==-1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$L_addr;
      _lua_pushnil($1);
      label = 4; break;
    case 4: 
      var $2=$L_addr;
      var $call1=_lua_type($2, 1);
      var $cmp2=(($call1)|0)==0;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=$L_addr;
      _lua_getfield($3, -1001000, ((5246744)|0));
      var $4=$L_addr;
      _lua_replace($4, 1);
      var $5=$L_addr;
      var $call4=_tofile($5);
      $toclose=0;
      label = 7; break;
    case 6: 
      var $6=$L_addr;
      var $call5=_luaL_checklstring($6, 1, 0);
      $filename=$call5;
      var $7=$L_addr;
      var $8=$filename;
      _opencheck($7, $8, ((5247576)|0));
      var $9=$L_addr;
      _lua_replace($9, 1);
      $toclose=1;
      label = 7; break;
    case 7: 
      var $10=$L_addr;
      var $11=$toclose;
      _aux_lines($10, $11);

      return 1;
  }

}


function _io_open($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $filename;
      var $mode;
      var $p;
      var $i;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_luaL_checklstring($0, 1, 0);
      $filename=$call;
      var $1=$L_addr;
      var $call1=_luaL_optlstring($1, 2, ((5247576)|0), 0);
      $mode=$call1;
      var $2=$L_addr;
      var $call2=_newfile($2);
      $p=$call2;
      $i=0;
      var $3=$i;
      var $4=$mode;
      var $arrayidx=(($4+$3)|0);
      var $5=HEAP8[($arrayidx)];
      var $conv=(($5 << 24) >> 24);
      var $cmp=(($conv)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $6=$i;
      var $inc=((($6)+(1))|0);
      $i=$inc;
      var $7=$mode;
      var $arrayidx4=(($7+$6)|0);
      var $8=HEAP8[($arrayidx4)];
      var $conv5=(($8 << 24) >> 24);
      var $call6=_strchr(((5247220)|0), $conv5);
      var $cmp7=(($call6)|0)!=0;
      if ($cmp7) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $9=$i;
      var $10=$mode;
      var $arrayidx10=(($10+$9)|0);
      var $11=HEAP8[($arrayidx10)];
      var $conv11=(($11 << 24) >> 24);
      var $cmp12=(($conv11)|0)!=43;
      if ($cmp12) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $12=$i;
      var $inc14=((($12)+(1))|0);
      $i=$inc14;
      var $tobool=(($inc14)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $13=$i;
      var $14=$mode;
      var $arrayidx16=(($14+$13)|0);
      var $15=HEAP8[($arrayidx16)];
      var $conv17=(($15 << 24) >> 24);
      var $cmp18=(($conv17)|0)!=98;
      if ($cmp18) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $16=$i;
      var $inc21=((($16)+(1))|0);
      $i=$inc21;
      var $tobool22=(($inc21)|0)!=0;
      if ($tobool22) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $17=$i;
      var $18=$mode;
      var $arrayidx24=(($18+$17)|0);
      var $19=HEAP8[($arrayidx24)];
      var $conv25=(($19 << 24) >> 24);
      var $cmp26=(($conv25)|0)==0;
      if ($cmp26) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $20=$L_addr;
      var $21=$mode;
      var $call28=_luaL_error($20, ((5247112)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$21,tempInt));
      $retval=$call28;
      label = 14; break;
    case 10: 
      var $22=$filename;
      var $23=$mode;
      var $call29=_fopen($22, $23);
      var $24=$p;
      var $f=(($24)|0);
      HEAP32[(($f)>>2)]=$call29;
      var $25=$p;
      var $f30=(($25)|0);
      var $26=HEAP32[(($f30)>>2)];
      var $cmp31=(($26)|0)==0;
      if ($cmp31) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $27=$L_addr;
      var $28=$filename;
      var $call33=_luaL_fileresult($27, 0, $28);
      var $cond = $call33;label = 13; break;
    case 12: 
      var $cond = 1;label = 13; break;
    case 13: 
      var $cond;
      $retval=$cond;
      label = 14; break;
    case 14: 
      var $29=$retval;
      STACKTOP = __stackBase__;
      return $29;
  }

}
_io_open["X"]=1;

function _io_output($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_g_iofile($0, ((5250372)|0), ((5247408)|0));

  return $call;
}


function _io_popen($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $filename;
      var $mode;
      var $p;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_luaL_checklstring($0, 1, 0);
      $filename=$call;
      var $1=$L_addr;
      var $call1=_luaL_optlstring($1, 2, ((5247576)|0), 0);
      $mode=$call1;
      var $2=$L_addr;
      var $call2=_newprefile($2);
      $p=$call2;
      var $3=$filename;
      var $4=$mode;
      var $5=$L_addr;
      var $call3=_luaL_error($5, ((5247480)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $6=$p;
      var $f=(($6)|0);
      HEAP32[(($f)>>2)]=0;
      var $7=$p;
      var $closef=(($7+4)|0);
      HEAP32[(($closef)>>2)]=320;
      var $8=$p;
      var $f4=(($8)|0);
      var $9=HEAP32[(($f4)>>2)];
      var $cmp=(($9)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=$L_addr;
      var $11=$filename;
      var $call5=_luaL_fileresult($10, 0, $11);
      var $cond = $call5;label = 5; break;
    case 4: 
      var $cond = 1;label = 5; break;
    case 5: 
      var $cond;
      STACKTOP = __stackBase__;
      return $cond;
  }

}


function _io_read($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_getiofile($1, ((5246744)|0));
  var $call1=_g_read($0, $call, 1);

  return $call1;
}


function _io_tmpfile($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $p;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_newfile($0);
      $p=$call;
      var $call1=_tmpfile();
      var $1=$p;
      var $f=(($1)|0);
      HEAP32[(($f)>>2)]=$call1;
      var $2=$p;
      var $f2=(($2)|0);
      var $3=HEAP32[(($f2)>>2)];
      var $cmp=(($3)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$L_addr;
      var $call3=_luaL_fileresult($4, 0, 0);
      var $cond = $call3;label = 5; break;
    case 4: 
      var $cond = 1;label = 5; break;
    case 5: 
      var $cond;

      return $cond;
  }

}


function _io_type($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $p;
      $L_addr=$L;
      var $0=$L_addr;
      _luaL_checkany($0, 1);
      var $1=$L_addr;
      var $call=_luaL_testudata($1, 1, ((5246676)|0));
      var $2=$call;
      $p=$2;
      var $3=$p;
      var $cmp=(($3)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$L_addr;
      _lua_pushnil($4);
      label = 8; break;
    case 4: 
      var $5=$p;
      var $closef=(($5+4)|0);
      var $6=HEAP32[(($closef)>>2)];
      var $cmp1=(($6)|0)==0;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$L_addr;
      var $call3=_lua_pushlstring($7, ((5247848)|0), 11);
      label = 7; break;
    case 6: 
      var $8=$L_addr;
      var $call5=_lua_pushlstring($8, ((5247672)|0), 4);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 

      return 1;
  }

}


function _io_write($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_getiofile($1, ((5250372)|0));
  var $call1=_g_write($0, $call, 1);

  return $call1;
}


function _getiofile($L, $findex) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $findex_addr;
      var $p;
      $L_addr=$L;
      $findex_addr=$findex;
      var $0=$L_addr;
      var $1=$findex_addr;
      _lua_getfield($0, -1001000, $1);
      var $2=$L_addr;
      var $call=_lua_touserdata($2, -1);
      var $3=$call;
      $p=$3;
      var $4=$p;
      var $closef=(($4+4)|0);
      var $5=HEAP32[(($closef)>>2)];
      var $cmp=(($5)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $6=$L_addr;
      var $7=$findex_addr;
      var $add_ptr=(($7+4)|0);
      var $call1=_luaL_error($6, ((5247992)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$add_ptr,tempInt));
      label = 4; break;
    case 4: 
      var $8=$p;
      var $f=(($8)|0);
      var $9=HEAP32[(($f)>>2)];
      STACKTOP = __stackBase__;
      return $9;
  }

}


function _newfile($L) {
  var label = 0;


  var $L_addr;
  var $p;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_newprefile($0);
  $p=$call;
  var $1=$p;
  var $f=(($1)|0);
  HEAP32[(($f)>>2)]=0;
  var $2=$p;
  var $closef=(($2+4)|0);
  HEAP32[(($closef)>>2)]=284;
  var $3=$p;

  return $3;
}


function _io_fclose($L) {
  var label = 0;


  var $L_addr;
  var $p;
  var $res;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_luaL_checkudata($0, 1, ((5246676)|0));
  var $1=$call;
  $p=$1;
  var $2=$p;
  var $f=(($2)|0);
  var $3=HEAP32[(($f)>>2)];
  var $call1=_fclose($3);
  $res=$call1;
  var $4=$L_addr;
  var $5=$res;
  var $cmp=(($5)|0)==0;
  var $conv=(($cmp)&1);
  var $call2=_luaL_fileresult($4, $conv, 0);

  return $call2;
}


function _io_pclose($L) {
  var label = 0;


  var $L_addr;
  var $p;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_luaL_checkudata($0, 1, ((5246676)|0));
  var $1=$call;
  $p=$1;
  var $2=$L_addr;
  var $3=$L_addr;
  var $4=$p;
  var $f=(($4)|0);
  var $5=HEAP32[(($f)>>2)];
  var $call1=_luaL_execresult($2, -1);

  return $call1;
}


function _g_iofile($L, $f, $mode) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $f_addr;
      var $mode_addr;
      var $filename;
      $L_addr=$L;
      $f_addr=$f;
      $mode_addr=$mode;
      var $0=$L_addr;
      var $call=_lua_type($0, 1);
      var $cmp=(($call)|0) <= 0;
      if ($cmp) { label = 7; break; } else { label = 3; break; }
    case 3: 
      var $1=$L_addr;
      var $call1=_lua_tolstring($1, 1, 0);
      $filename=$call1;
      var $2=$filename;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$L_addr;
      var $4=$filename;
      var $5=$mode_addr;
      _opencheck($3, $4, $5);
      label = 6; break;
    case 5: 
      var $6=$L_addr;
      var $call3=_tofile($6);
      var $7=$L_addr;
      _lua_pushvalue($7, 1);
      label = 6; break;
    case 6: 
      var $8=$L_addr;
      var $9=$f_addr;
      _lua_setfield($8, -1001000, $9);
      label = 7; break;
    case 7: 
      var $10=$L_addr;
      var $11=$f_addr;
      _lua_getfield($10, -1001000, $11);

      return 1;
  }

}


function _opencheck($L, $fname, $mode) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $fname_addr;
      var $mode_addr;
      var $p;
      $L_addr=$L;
      $fname_addr=$fname;
      $mode_addr=$mode;
      var $0=$L_addr;
      var $call=_newfile($0);
      $p=$call;
      var $1=$fname_addr;
      var $2=$mode_addr;
      var $call1=_fopen($1, $2);
      var $3=$p;
      var $f=(($3)|0);
      HEAP32[(($f)>>2)]=$call1;
      var $4=$p;
      var $f2=(($4)|0);
      var $5=HEAP32[(($f2)>>2)];
      var $cmp=(($5)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $6=$L_addr;
      var $7=$fname_addr;
      var $call3=___errno_location();
      var $8=HEAP32[(($call3)>>2)];
      var $call4=_strerror($8);
      var $call5=_luaL_error($6, ((5247300)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempInt)>>2)]=$7,HEAP32[(((tempInt)+(4))>>2)]=$call4,tempInt));
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
  }

}


function _luaopen_math($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  _lua_createtable($0, 0, 27);
  var $1=$L_addr;
  _luaL_setfuncs($1, ((5243304)|0), 0);
  var $2=$L_addr;
  _lua_pushnumber($2, 3.141592653589793);
  var $3=$L_addr;
  _lua_setfield($3, -2, ((5246620)|0));
  var $4=$L_addr;
  _lua_pushnumber($4, Infinity);
  var $5=$L_addr;
  _lua_setfield($5, -2, ((5252328)|0));

  return 1;
}


function _math_abs($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_luaL_checknumber($1, 1);
  var $call1=Math.abs($call);
  _lua_pushnumber($0, $call1);

  return 1;
}


function _math_acos($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_luaL_checknumber($1, 1);
  var $call1=Math.acos($call);
  _lua_pushnumber($0, $call1);

  return 1;
}


function _math_asin($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_luaL_checknumber($1, 1);
  var $call1=Math.asin($call);
  _lua_pushnumber($0, $call1);

  return 1;
}


function _math_atan2($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_luaL_checknumber($1, 1);
  var $2=$L_addr;
  var $call1=_luaL_checknumber($2, 2);
  var $call2=Math.atan2($call, $call1);
  _lua_pushnumber($0, $call2);

  return 1;
}


function _math_atan($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_luaL_checknumber($1, 1);
  var $call1=Math.atan($call);
  _lua_pushnumber($0, $call1);

  return 1;
}


function _math_ceil($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_luaL_checknumber($1, 1);
  var $call1=Math.ceil($call);
  _lua_pushnumber($0, $call1);

  return 1;
}


function _math_cosh($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_luaL_checknumber($1, 1);
  var $call1=_cosh($call);
  _lua_pushnumber($0, $call1);

  return 1;
}


function _math_cos($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_luaL_checknumber($1, 1);
  var $call1=Math.cos($call);
  _lua_pushnumber($0, $call1);

  return 1;
}


function _math_deg($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_luaL_checknumber($1, 1);
  var $div=($call)/(0.017453292519943295);
  _lua_pushnumber($0, $div);

  return 1;
}


function _math_exp($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_luaL_checknumber($1, 1);
  var $call1=Math.exp($call);
  _lua_pushnumber($0, $call1);

  return 1;
}


function _math_floor($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_luaL_checknumber($1, 1);
  var $call1=Math.floor($call);
  _lua_pushnumber($0, $call1);

  return 1;
}


function _math_fmod($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_luaL_checknumber($1, 1);
  var $2=$L_addr;
  var $call1=_luaL_checknumber($2, 2);
  var $call2=_fmod($call, $call1);
  _lua_pushnumber($0, $call2);

  return 1;
}


function _math_frexp($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);

  var $L_addr;
  var $e=__stackBase__;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_luaL_checknumber($1, 1);
  var $call1=_frexp($call, $e);
  _lua_pushnumber($0, $call1);
  var $2=$L_addr;
  var $3=HEAP32[(($e)>>2)];
  _lua_pushinteger($2, $3);
  STACKTOP = __stackBase__;
  return 2;
}


function _math_ldexp($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_luaL_checknumber($1, 1);
  var $2=$L_addr;
  var $call1=_luaL_checkinteger($2, 2);
  var $call2=_ldexp($call, $call1);
  _lua_pushnumber($0, $call2);

  return 1;
}


function _math_log($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $x;
      var $res;
      var $base;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_luaL_checknumber($0, 1);
      $x=$call;
      var $1=$L_addr;
      var $call1=_lua_type($1, 2);
      var $cmp=(($call1)|0) <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$x;
      var $call2=Math.log($2);
      $res=$call2;
      label = 8; break;
    case 4: 
      var $3=$L_addr;
      var $call3=_luaL_checknumber($3, 2);
      $base=$call3;
      var $4=$base;
      var $cmp4=$4 == 10;
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $5=$x;
      var $call6=_log10($5);
      $res=$call6;
      label = 7; break;
    case 6: 
      var $6=$x;
      var $call8=Math.log($6);
      var $7=$base;
      var $call9=Math.log($7);
      var $div=($call8)/($call9);
      $res=$div;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $8=$L_addr;
      var $9=$res;
      _lua_pushnumber($8, $9);

      return 1;
  }

}


function _math_max($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $n;
      var $dmax;
      var $i;
      var $d;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_lua_gettop($0);
      $n=$call;
      var $1=$L_addr;
      var $call1=_luaL_checknumber($1, 1);
      $dmax=$call1;
      $i=2;
      label = 3; break;
    case 3: 
      var $2=$i;
      var $3=$n;
      var $cmp=(($2)|0) <= (($3)|0);
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $4=$L_addr;
      var $5=$i;
      var $call2=_luaL_checknumber($4, $5);
      $d=$call2;
      var $6=$d;
      var $7=$dmax;
      var $cmp3=$6 > $7;
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=$d;
      $dmax=$8;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $9=$i;
      var $inc=((($9)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 
      var $10=$L_addr;
      var $11=$dmax;
      _lua_pushnumber($10, $11);

      return 1;
  }

}


function _math_min($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $n;
      var $dmin;
      var $i;
      var $d;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_lua_gettop($0);
      $n=$call;
      var $1=$L_addr;
      var $call1=_luaL_checknumber($1, 1);
      $dmin=$call1;
      $i=2;
      label = 3; break;
    case 3: 
      var $2=$i;
      var $3=$n;
      var $cmp=(($2)|0) <= (($3)|0);
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $4=$L_addr;
      var $5=$i;
      var $call2=_luaL_checknumber($4, $5);
      $d=$call2;
      var $6=$d;
      var $7=$dmin;
      var $cmp3=$6 < $7;
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=$d;
      $dmin=$8;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $9=$i;
      var $inc=((($9)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 
      var $10=$L_addr;
      var $11=$dmin;
      _lua_pushnumber($10, $11);

      return 1;
  }

}


function _math_modf($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; _memset(__stackBase__, 0, 8);

  var $L_addr;
  var $ip=__stackBase__;
  var $fp;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_luaL_checknumber($0, 1);
  var $call1=_modf($call, $ip);
  $fp=$call1;
  var $1=$L_addr;
  var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($ip)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($ip)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _lua_pushnumber($1, $2);
  var $3=$L_addr;
  var $4=$fp;
  _lua_pushnumber($3, $4);
  STACKTOP = __stackBase__;
  return 2;
}


function _math_pow($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_luaL_checknumber($1, 1);
  var $2=$L_addr;
  var $call1=_luaL_checknumber($2, 2);
  var $3=Math.pow($call, $call1);
  _lua_pushnumber($0, $3);

  return 1;
}


function _math_rad($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_luaL_checknumber($1, 1);
  var $mul=($call)*(0.017453292519943295);
  _lua_pushnumber($0, $mul);

  return 1;
}


function _math_random($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $r;
      var $u;
      var $l;
      var $u9;
      $L_addr=$L;
      var $call=_rand();
      var $rem=((($call)|0))%(2147483647);
      var $conv=(($rem)|0);
      var $div=($conv)/(2147483647);
      $r=$div;
      var $0=$L_addr;
      var $call1=_lua_gettop($0);
      if ((($call1)|0)==0) {
        label = 3; break;
      }
      else if ((($call1)|0)==1) {
        label = 4; break;
      }
      else if ((($call1)|0)==2) {
        label = 7; break;
      }
      else {
      label = 10; break;
      }
      
    case 3: 
      var $1=$L_addr;
      var $2=$r;
      _lua_pushnumber($1, $2);
      label = 11; break;
    case 4: 
      var $3=$L_addr;
      var $call3=_luaL_checknumber($3, 1);
      $u=$call3;
      var $4=$u;
      var $cmp=1 <= $4;
      if ($cmp) { var $6 = 1;label = 6; break; } else { label = 5; break; }
    case 5: 
      var $5=$L_addr;
      var $call5=_luaL_argerror($5, 1, ((5249628)|0));
      var $tobool=(($call5)|0)!=0;
      var $6 = $tobool;label = 6; break;
    case 6: 
      var $6;
      var $lor_ext=(($6)&1);
      var $7=$L_addr;
      var $8=$r;
      var $9=$u;
      var $mul=($8)*($9);
      var $call6=Math.floor($mul);
      var $add=($call6)+(1);
      _lua_pushnumber($7, $add);
      label = 11; break;
    case 7: 
      var $10=$L_addr;
      var $call8=_luaL_checknumber($10, 1);
      $l=$call8;
      var $11=$L_addr;
      var $call10=_luaL_checknumber($11, 2);
      $u9=$call10;
      var $12=$l;
      var $13=$u9;
      var $cmp11=$12 <= $13;
      if ($cmp11) { var $15 = 1;label = 9; break; } else { label = 8; break; }
    case 8: 
      var $14=$L_addr;
      var $call14=_luaL_argerror($14, 2, ((5249628)|0));
      var $tobool15=(($call14)|0)!=0;
      var $15 = $tobool15;label = 9; break;
    case 9: 
      var $15;
      var $lor_ext17=(($15)&1);
      var $16=$L_addr;
      var $17=$r;
      var $18=$u9;
      var $19=$l;
      var $sub=($18)-($19);
      var $add18=($sub)+(1);
      var $mul19=($17)*($add18);
      var $call20=Math.floor($mul19);
      var $20=$l;
      var $add21=($call20)+($20);
      _lua_pushnumber($16, $add21);
      label = 11; break;
    case 10: 
      var $21=$L_addr;
      var $call22=_luaL_error($21, ((5249472)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      $retval=$call22;
      label = 12; break;
    case 11: 
      $retval=1;
      label = 12; break;
    case 12: 
      var $22=$retval;
      STACKTOP = __stackBase__;
      return $22;
  }

}
_math_random["X"]=1;

function _math_randomseed($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_luaL_checkunsigned($0, 1);
  _srand($call);
  var $call1=_rand();

  return 0;
}


function _math_sinh($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_luaL_checknumber($1, 1);
  var $call1=_sinh($call);
  _lua_pushnumber($0, $call1);

  return 1;
}


function _math_sin($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_luaL_checknumber($1, 1);
  var $call1=Math.sin($call);
  _lua_pushnumber($0, $call1);

  return 1;
}


function _math_sqrt($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_luaL_checknumber($1, 1);
  var $call1=Math.sqrt($call);
  _lua_pushnumber($0, $call1);

  return 1;
}


function _math_tanh($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_luaL_checknumber($1, 1);
  var $call1=_tanh($call);
  _lua_pushnumber($0, $call1);

  return 1;
}


function _math_tan($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_luaL_checknumber($1, 1);
  var $call1=Math.tan($call);
  _lua_pushnumber($0, $call1);

  return 1;
}


function _luaopen_os($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  _lua_createtable($0, 0, 11);
  var $1=$L_addr;
  _luaL_setfuncs($1, ((5242948)|0), 0);

  return 1;
}


function _os_clock($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_clock();
  var $conv=(($call)>>>0);
  var $div=($conv)/(1000);
  _lua_pushnumber($0, $div);

  return 1;
}


function _os_date($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1292)|0; _memset(__stackBase__, 0, 1292);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $s;
      var $t=__stackBase__;
      var $tmr=(__stackBase__)+(4);
      var $stm;
      var $cc=(__stackBase__)+(48);
      var $b=(__stackBase__)+(52);
      var $reslen;
      var $buff=(__stackBase__)+(1092);
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_luaL_optlstring($0, 1, ((5250332)|0), 0);
      $s=$call;
      var $1=$L_addr;
      var $call1=_lua_type($1, 2);
      var $cmp=(($call1)|0) <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $call2=_time(0);
      var $cond = $call2;label = 5; break;
    case 4: 
      var $2=$L_addr;
      var $call3=_luaL_checknumber($2, 2);
      var $conv=(($call3)&-1);
      var $cond = $conv;label = 5; break;
    case 5: 
      var $cond;
      HEAP32[(($t)>>2)]=$cond;
      var $3=$s;
      var $4=HEAP8[($3)];
      var $conv4=(($4 << 24) >> 24);
      var $cmp5=(($conv4)|0)==33;
      if ($cmp5) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $call7=_gmtime($t);
      $stm=$call7;
      var $5=$s;
      var $incdec_ptr=(($5+1)|0);
      $s=$incdec_ptr;
      label = 8; break;
    case 7: 
      var $call8=_localtime($t);
      $stm=$call8;
      label = 8; break;
    case 8: 
      var $6=$stm;
      var $cmp9=(($6)|0)==0;
      if ($cmp9) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $7=$L_addr;
      _lua_pushnil($7);
      label = 22; break;
    case 10: 
      var $8=$s;
      var $call13=_strcmp($8, ((5250136)|0));
      var $cmp14=(($call13)|0)==0;
      if ($cmp14) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $9=$L_addr;
      _lua_createtable($9, 0, 9);
      var $10=$L_addr;
      var $11=$stm;
      var $tm_sec=(($11)|0);
      var $12=HEAP32[(($tm_sec)>>2)];
      _setfield($10, ((5252920)|0), $12);
      var $13=$L_addr;
      var $14=$stm;
      var $tm_min=(($14+4)|0);
      var $15=HEAP32[(($tm_min)>>2)];
      _setfield($13, ((5252680)|0), $15);
      var $16=$L_addr;
      var $17=$stm;
      var $tm_hour=(($17+8)|0);
      var $18=HEAP32[(($tm_hour)>>2)];
      _setfield($16, ((5252512)|0), $18);
      var $19=$L_addr;
      var $20=$stm;
      var $tm_mday=(($20+12)|0);
      var $21=HEAP32[(($tm_mday)>>2)];
      _setfield($19, ((5252356)|0), $21);
      var $22=$L_addr;
      var $23=$stm;
      var $tm_mon=(($23+16)|0);
      var $24=HEAP32[(($tm_mon)>>2)];
      var $add=((($24)+(1))|0);
      _setfield($22, ((5252108)|0), $add);
      var $25=$L_addr;
      var $26=$stm;
      var $tm_year=(($26+20)|0);
      var $27=HEAP32[(($tm_year)>>2)];
      var $add17=((($27)+(1900))|0);
      _setfield($25, ((5251916)|0), $add17);
      var $28=$L_addr;
      var $29=$stm;
      var $tm_wday=(($29+24)|0);
      var $30=HEAP32[(($tm_wday)>>2)];
      var $add18=((($30)+(1))|0);
      _setfield($28, ((5249912)|0), $add18);
      var $31=$L_addr;
      var $32=$stm;
      var $tm_yday=(($32+28)|0);
      var $33=HEAP32[(($tm_yday)>>2)];
      var $add19=((($33)+(1))|0);
      _setfield($31, ((5249780)|0), $add19);
      var $34=$L_addr;
      var $35=$stm;
      var $tm_isdst=(($35+32)|0);
      var $36=HEAP32[(($tm_isdst)>>2)];
      _setboolfield($34, ((5251736)|0), $36);
      label = 21; break;
    case 12: 
      var $arrayidx=(($cc)|0);
      HEAP8[($arrayidx)]=37;
      var $37=$L_addr;
      _luaL_buffinit($37, $b);
      label = 13; break;
    case 13: 
      var $38=$s;
      var $39=HEAP8[($38)];
      var $tobool=(($39 << 24) >> 24)!=0;
      if ($tobool) { label = 14; break; } else { label = 20; break; }
    case 14: 
      var $40=$s;
      var $41=HEAP8[($40)];
      var $conv21=(($41 << 24) >> 24);
      var $cmp22=(($conv21)|0)!=37;
      if ($cmp22) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $n=(($b+8)|0);
      var $42=HEAP32[(($n)>>2)];
      var $size=(($b+4)|0);
      var $43=HEAP32[(($size)>>2)];
      var $cmp25=(($42)>>>0) < (($43)>>>0);
      if ($cmp25) { var $44 = 1;label = 17; break; } else { label = 16; break; }
    case 16: 
      var $call27=_luaL_prepbuffsize($b, 1);
      var $tobool28=(($call27)|0)!=0;
      var $44 = $tobool28;label = 17; break;
    case 17: 
      var $44;
      var $lor_ext=(($44)&1);
      var $45=$s;
      var $incdec_ptr29=(($45+1)|0);
      $s=$incdec_ptr29;
      var $46=HEAP8[($45)];
      var $n30=(($b+8)|0);
      var $47=HEAP32[(($n30)>>2)];
      var $inc=((($47)+(1))|0);
      HEAP32[(($n30)>>2)]=$inc;
      var $b31=(($b)|0);
      var $48=HEAP32[(($b31)>>2)];
      var $arrayidx32=(($48+$47)|0);
      HEAP8[($arrayidx32)]=$46;
      label = 19; break;
    case 18: 
      var $49=$L_addr;
      var $50=$s;
      var $add_ptr=(($50+1)|0);
      var $arraydecay=(($cc)|0);
      var $call34=_checkoption($49, $add_ptr, $arraydecay);
      $s=$call34;
      var $arraydecay35=(($buff)|0);
      var $arraydecay36=(($cc)|0);
      var $51=$stm;
      var $call37=_strftime($arraydecay35, 200, $arraydecay36, $51);
      $reslen=$call37;
      var $arraydecay38=(($buff)|0);
      var $52=$reslen;
      _luaL_addlstring($b, $arraydecay38, $52);
      label = 19; break;
    case 19: 
      label = 13; break;
    case 20: 
      _luaL_pushresult($b);
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      STACKTOP = __stackBase__;
      return 1;
  }

}
_os_date["X"]=1;

function _os_difftime($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_luaL_checknumber($1, 1);
  var $conv=(($call)&-1);
  var $2=$L_addr;
  var $call1=_luaL_optnumber($2, 2, 0);
  var $conv2=(($call1)&-1);
  var $call3=_difftime($conv, $conv2);
  _lua_pushnumber($0, $call3);

  return 1;
}


function _os_execute($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $cmd;
      var $stat;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_luaL_optlstring($0, 1, 0, 0);
      $cmd=$call;
      var $1=$cmd;
      var $call1=_system($1);
      $stat=$call1;
      var $2=$cmd;
      var $cmp=(($2)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$L_addr;
      var $4=$stat;
      var $call2=_luaL_execresult($3, $4);
      $retval=$call2;
      label = 5; break;
    case 4: 
      var $5=$L_addr;
      var $6=$stat;
      _lua_pushboolean($5, $6);
      $retval=1;
      label = 5; break;
    case 5: 
      var $7=$retval;

      return $7;
  }

}


function _os_getenv($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $1=$L_addr;
  var $call=_luaL_checklstring($1, 1, 0);
  var $call1=_getenv($call);
  var $call2=_lua_pushstring($0, $call1);

  return 1;
}


function _os_remove($L) {
  var label = 0;


  var $L_addr;
  var $filename;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_luaL_checklstring($0, 1, 0);
  $filename=$call;
  var $1=$L_addr;
  var $2=$filename;
  var $call1=_remove($2);
  var $cmp=(($call1)|0)==0;
  var $conv=(($cmp)&1);
  var $3=$filename;
  var $call2=_luaL_fileresult($1, $conv, $3);

  return $call2;
}


function _os_rename($L) {
  var label = 0;


  var $L_addr;
  var $fromname;
  var $toname;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_luaL_checklstring($0, 1, 0);
  $fromname=$call;
  var $1=$L_addr;
  var $call1=_luaL_checklstring($1, 2, 0);
  $toname=$call1;
  var $2=$L_addr;
  var $3=$fromname;
  var $4=$toname;
  var $call2=_rename($3, $4);
  var $cmp=(($call2)|0)==0;
  var $conv=(($cmp)&1);
  var $5=$fromname;
  var $call3=_luaL_fileresult($2, $conv, $5);

  return $call3;
}


function _os_setlocale($L) {
  var label = 0;


  var $L_addr;
  var $l;
  var $op;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_luaL_optlstring($0, 1, 0, 0);
  $l=$call;
  var $1=$L_addr;
  var $call1=_luaL_checkoption($1, 2, ((5251308)|0), ((5243228)|0));
  $op=$call1;
  var $2=$L_addr;
  var $3=$op;
  var $arrayidx=((5243256+($3<<2))|0);
  var $4=HEAP32[(($arrayidx)>>2)];
  var $5=$l;
  var $call2=_setlocale($4, $5);
  var $call3=_lua_pushstring($2, $call2);

  return 1;
}


function _os_time($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 44)|0; _memset(__stackBase__, 0, 44);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $t;
      var $ts=__stackBase__;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_lua_type($0, 1);
      var $cmp=(($call)|0) <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $call1=_time(0);
      $t=$call1;
      label = 5; break;
    case 4: 
      var $1=$L_addr;
      _luaL_checktype($1, 1, 5);
      var $2=$L_addr;
      _lua_settop($2, 1);
      var $3=$L_addr;
      var $call2=_getfield($3, ((5252920)|0), 0);
      var $tm_sec=(($ts)|0);
      HEAP32[(($tm_sec)>>2)]=$call2;
      var $4=$L_addr;
      var $call3=_getfield($4, ((5252680)|0), 0);
      var $tm_min=(($ts+4)|0);
      HEAP32[(($tm_min)>>2)]=$call3;
      var $5=$L_addr;
      var $call4=_getfield($5, ((5252512)|0), 12);
      var $tm_hour=(($ts+8)|0);
      HEAP32[(($tm_hour)>>2)]=$call4;
      var $6=$L_addr;
      var $call5=_getfield($6, ((5252356)|0), -1);
      var $tm_mday=(($ts+12)|0);
      HEAP32[(($tm_mday)>>2)]=$call5;
      var $7=$L_addr;
      var $call6=_getfield($7, ((5252108)|0), -1);
      var $sub=((($call6)-(1))|0);
      var $tm_mon=(($ts+16)|0);
      HEAP32[(($tm_mon)>>2)]=$sub;
      var $8=$L_addr;
      var $call7=_getfield($8, ((5251916)|0), -1);
      var $sub8=((($call7)-(1900))|0);
      var $tm_year=(($ts+20)|0);
      HEAP32[(($tm_year)>>2)]=$sub8;
      var $9=$L_addr;
      var $call9=_getboolfield($9, ((5251736)|0));
      var $tm_isdst=(($ts+32)|0);
      HEAP32[(($tm_isdst)>>2)]=$call9;
      var $call10=_mktime($ts);
      $t=$call10;
      label = 5; break;
    case 5: 
      var $10=$t;
      var $cmp11=(($10)|0)==-1;
      if ($cmp11) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $11=$L_addr;
      _lua_pushnil($11);
      label = 8; break;
    case 7: 
      var $12=$L_addr;
      var $13=$t;
      var $conv=(($13)|0);
      _lua_pushnumber($12, $conv);
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return 1;
  }

}
_os_time["X"]=1;

function _os_tmpname($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1024)|0; _memset(__stackBase__, 0, 1024);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $buff=__stackBase__;
      var $err;
      $L_addr=$L;
      var $arraydecay=(($buff)|0);
      var $call=_tmpnam($arraydecay);
      var $cmp=(($call)|0)==0;
      var $conv=(($cmp)&1);
      $err=$conv;
      var $0=$err;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$L_addr;
      var $call1=_luaL_error($1, ((5253228)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      $retval=$call1;
      label = 5; break;
    case 4: 
      var $2=$L_addr;
      var $arraydecay2=(($buff)|0);
      var $call3=_lua_pushstring($2, $arraydecay2);
      $retval=1;
      label = 5; break;
    case 5: 
      var $3=$retval;
      STACKTOP = __stackBase__;
      return $3;
  }

}


function _getfield($L, $key, $d) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $key_addr;
      var $d_addr;
      var $res;
      var $isnum=__stackBase__;
      $L_addr=$L;
      $key_addr=$key;
      $d_addr=$d;
      var $0=$L_addr;
      var $1=$key_addr;
      _lua_getfield($0, -1, $1);
      var $2=$L_addr;
      var $call=_lua_tointegerx($2, -1, $isnum);
      $res=$call;
      var $3=HEAP32[(($isnum)>>2)];
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 3; break; }
    case 3: 
      var $4=$d_addr;
      var $cmp=(($4)|0) < 0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $5=$L_addr;
      var $6=$key_addr;
      var $call2=_luaL_error($5, ((5251524)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$6,tempInt));
      $retval=$call2;
      label = 7; break;
    case 5: 
      var $7=$d_addr;
      $res=$7;
      label = 6; break;
    case 6: 
      var $8=$L_addr;
      _lua_settop($8, -2);
      var $9=$res;
      $retval=$9;
      label = 7; break;
    case 7: 
      var $10=$retval;
      STACKTOP = __stackBase__;
      return $10;
  }

}


function _getboolfield($L, $key) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $key_addr;
      var $res;
      $L_addr=$L;
      $key_addr=$key;
      var $0=$L_addr;
      var $1=$key_addr;
      _lua_getfield($0, -1, $1);
      var $2=$L_addr;
      var $call=_lua_type($2, -1);
      var $cmp=(($call)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $cond = -1;label = 5; break;
    case 4: 
      var $3=$L_addr;
      var $call1=_lua_toboolean($3, -1);
      var $cond = $call1;label = 5; break;
    case 5: 
      var $cond;
      $res=$cond;
      var $4=$L_addr;
      _lua_settop($4, -2);
      var $5=$res;

      return $5;
  }

}


function _setfield($L, $key, $value) {
  var label = 0;


  var $L_addr;
  var $key_addr;
  var $value_addr;
  $L_addr=$L;
  $key_addr=$key;
  $value_addr=$value;
  var $0=$L_addr;
  var $1=$value_addr;
  _lua_pushinteger($0, $1);
  var $2=$L_addr;
  var $3=$key_addr;
  _lua_setfield($2, -2, $3);

  return;
}


function _setboolfield($L, $key, $value) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $key_addr;
      var $value_addr;
      $L_addr=$L;
      $key_addr=$key;
      $value_addr=$value;
      var $0=$value_addr;
      var $cmp=(($0)|0) < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      var $1=$L_addr;
      var $2=$value_addr;
      _lua_pushboolean($1, $2);
      var $3=$L_addr;
      var $4=$key_addr;
      _lua_setfield($3, -2, $4);
      label = 5; break;
    case 5: 

      return;
  }

}


function _os_exit($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $status;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_lua_type($0, 1);
      var $cmp=(($call)|0)==1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$L_addr;
      var $call1=_lua_toboolean($1, 1);
      var $tobool=(($call1)|0)!=0;
      var $cond=$tobool ? 0 : 1;
      $status=$cond;
      label = 5; break;
    case 4: 
      var $2=$L_addr;
      var $call2=_luaL_optinteger($2, 1, 0);
      $status=$call2;
      label = 5; break;
    case 5: 
      var $3=$L_addr;
      var $call3=_lua_toboolean($3, 2);
      var $tobool4=(($call3)|0)!=0;
      if ($tobool4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $4=$L_addr;
      _lua_close($4);
      label = 7; break;
    case 7: 
      var $5=$L_addr;
      var $tobool7=(($5)|0)!=0;
      if ($tobool7) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $6=$status;
      _exit($6);

    case 9: 

      return 0;
  }

}


function _checkoption($L, $conv, $buff) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $conv_addr;
      var $buff_addr;
      var $i;
      $L_addr=$L;
      $conv_addr=$conv;
      $buff_addr=$buff;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)>>>0) < 2;
      if ($cmp) { label = 4; break; } else { label = 15; break; }
    case 4: 
      var $1=$conv_addr;
      var $2=HEAP8[($1)];
      var $conv2=(($2 << 24) >> 24);
      var $cmp3=(($conv2)|0)!=0;
      if ($cmp3) { label = 5; break; } else { label = 13; break; }
    case 5: 
      var $3=$i;
      var $arrayidx=((5245056+($3<<2))|0);
      var $4=HEAP32[(($arrayidx)>>2)];
      var $5=$conv_addr;
      var $6=HEAP8[($5)];
      var $conv5=(($6 << 24) >> 24);
      var $call=_strchr($4, $conv5);
      var $cmp6=(($call)|0)!=0;
      if ($cmp6) { label = 6; break; } else { label = 13; break; }
    case 6: 
      var $7=$conv_addr;
      var $8=HEAP8[($7)];
      var $9=$buff_addr;
      var $arrayidx8=(($9+1)|0);
      HEAP8[($arrayidx8)]=$8;
      var $10=$i;
      var $add=((($10)+(1))|0);
      var $arrayidx9=((5245056+($add<<2))|0);
      var $11=HEAP32[(($arrayidx9)>>2)];
      var $12=HEAP8[($11)];
      var $conv10=(($12 << 24) >> 24);
      var $cmp11=(($conv10)|0)==0;
      if ($cmp11) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $13=$buff_addr;
      var $arrayidx14=(($13+2)|0);
      HEAP8[($arrayidx14)]=0;
      var $14=$conv_addr;
      var $add_ptr=(($14+1)|0);
      $retval=$add_ptr;
      label = 16; break;
    case 8: 
      var $15=$conv_addr;
      var $add_ptr15=(($15+1)|0);
      var $16=HEAP8[($add_ptr15)];
      var $conv16=(($16 << 24) >> 24);
      var $cmp17=(($conv16)|0)!=0;
      if ($cmp17) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $17=$i;
      var $add20=((($17)+(1))|0);
      var $arrayidx21=((5245056+($add20<<2))|0);
      var $18=HEAP32[(($arrayidx21)>>2)];
      var $19=$conv_addr;
      var $add_ptr22=(($19+1)|0);
      var $20=HEAP8[($add_ptr22)];
      var $conv23=(($20 << 24) >> 24);
      var $call24=_strchr($18, $conv23);
      var $cmp25=(($call24)|0)!=0;
      if ($cmp25) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $21=$conv_addr;
      var $add_ptr28=(($21+1)|0);
      var $22=HEAP8[($add_ptr28)];
      var $23=$buff_addr;
      var $arrayidx29=(($23+2)|0);
      HEAP8[($arrayidx29)]=$22;
      var $24=$buff_addr;
      var $arrayidx30=(($24+3)|0);
      HEAP8[($arrayidx30)]=0;
      var $25=$conv_addr;
      var $add_ptr31=(($25+2)|0);
      $retval=$add_ptr31;
      label = 16; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $26=$i;
      var $add34=((($26)+(2))|0);
      $i=$add34;
      label = 3; break;
    case 15: 
      var $27=$L_addr;
      var $28=$L_addr;
      var $29=$conv_addr;
      var $call35=_lua_pushfstring($28, ((5249340)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$29,tempInt));
      var $call36=_luaL_argerror($27, 1, $call35);
      var $30=$conv_addr;
      $retval=$30;
      label = 16; break;
    case 16: 
      var $31=$retval;
      STACKTOP = __stackBase__;
      return $31;
  }

}
_checkoption["X"]=1;

function _luaopen_string($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  _lua_createtable($0, 0, 14);
  var $1=$L_addr;
  _luaL_setfuncs($1, ((5243044)|0), 0);
  var $2=$L_addr;
  _createmetatable($2);

  return 1;
}


function _createmetatable($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  _lua_createtable($0, 0, 1);
  var $1=$L_addr;
  var $call=_lua_pushlstring($1, ((5246404)|0), 0);
  var $2=$L_addr;
  _lua_pushvalue($2, -2);
  var $3=$L_addr;
  var $call1=_lua_setmetatable($3, -2);
  var $4=$L_addr;
  _lua_settop($4, -2);
  var $5=$L_addr;
  _lua_pushvalue($5, -2);
  var $6=$L_addr;
  _lua_setfield($6, -2, ((5252132)|0));
  var $7=$L_addr;
  _lua_settop($7, -2);

  return;
}


function _str_byte($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $l=__stackBase__;
      var $s;
      var $posi;
      var $pose;
      var $n;
      var $i;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_luaL_checklstring($0, 1, $l);
      $s=$call;
      var $1=$L_addr;
      var $call1=_luaL_optinteger($1, 2, 1);
      var $2=HEAP32[(($l)>>2)];
      var $call2=_posrelat($call1, $2);
      $posi=$call2;
      var $3=$L_addr;
      var $4=$posi;
      var $call3=_luaL_optinteger($3, 3, $4);
      var $5=HEAP32[(($l)>>2)];
      var $call4=_posrelat($call3, $5);
      $pose=$call4;
      var $6=$posi;
      var $cmp=(($6)>>>0) < 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $posi=1;
      label = 4; break;
    case 4: 
      var $7=$pose;
      var $8=HEAP32[(($l)>>2)];
      var $cmp5=(($7)>>>0) > (($8)>>>0);
      if ($cmp5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $9=HEAP32[(($l)>>2)];
      $pose=$9;
      label = 6; break;
    case 6: 
      var $10=$posi;
      var $11=$pose;
      var $cmp8=(($10)>>>0) > (($11)>>>0);
      if ($cmp8) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $retval=0;
      label = 15; break;
    case 8: 
      var $12=$pose;
      var $13=$posi;
      var $sub=((($12)-($13))|0);
      var $add=((($sub)+(1))|0);
      $n=$add;
      var $14=$posi;
      var $15=$n;
      var $add11=((($14)+($15))|0);
      var $16=$pose;
      var $cmp12=(($add11)>>>0) <= (($16)>>>0);
      if ($cmp12) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $17=$L_addr;
      var $call14=_luaL_error($17, ((5247816)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      $retval=$call14;
      label = 15; break;
    case 10: 
      var $18=$L_addr;
      var $19=$n;
      _luaL_checkstack($18, $19, ((5247816)|0));
      $i=0;
      label = 11; break;
    case 11: 
      var $20=$i;
      var $21=$n;
      var $cmp16=(($20)|0) < (($21)|0);
      if ($cmp16) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $22=$L_addr;
      var $23=$posi;
      var $24=$i;
      var $add17=((($23)+($24))|0);
      var $sub18=((($add17)-(1))|0);
      var $25=$s;
      var $arrayidx=(($25+$sub18)|0);
      var $26=HEAP8[($arrayidx)];
      var $conv=(($26)&255);
      _lua_pushinteger($22, $conv);
      label = 13; break;
    case 13: 
      var $27=$i;
      var $inc=((($27)+(1))|0);
      $i=$inc;
      label = 11; break;
    case 14: 
      var $28=$n;
      $retval=$28;
      label = 15; break;
    case 15: 
      var $29=$retval;
      STACKTOP = __stackBase__;
      return $29;
  }

}
_str_byte["X"]=1;

function _str_char($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1040)|0; _memset(__stackBase__, 0, 1040);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $n;
      var $i;
      var $b=__stackBase__;
      var $p;
      var $c;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_lua_gettop($0);
      $n=$call;
      var $1=$L_addr;
      var $2=$n;
      var $call1=_luaL_buffinitsize($1, $b, $2);
      $p=$call1;
      $i=1;
      label = 3; break;
    case 3: 
      var $3=$i;
      var $4=$n;
      var $cmp=(($3)|0) <= (($4)|0);
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $5=$L_addr;
      var $6=$i;
      var $call2=_luaL_checkinteger($5, $6);
      $c=$call2;
      var $7=$c;
      var $conv=(($7) & 255);
      var $conv3=(($conv)&255);
      var $8=$c;
      var $cmp4=(($conv3)|0)==(($8)|0);
      if ($cmp4) { var $11 = 1;label = 6; break; } else { label = 5; break; }
    case 5: 
      var $9=$L_addr;
      var $10=$i;
      var $call6=_luaL_argerror($9, $10, ((5247972)|0));
      var $tobool=(($call6)|0)!=0;
      var $11 = $tobool;label = 6; break;
    case 6: 
      var $11;
      var $lor_ext=(($11)&1);
      var $12=$c;
      var $conv7=(($12) & 255);
      var $13=$i;
      var $sub=((($13)-(1))|0);
      var $14=$p;
      var $arrayidx=(($14+$sub)|0);
      HEAP8[($arrayidx)]=$conv7;
      label = 7; break;
    case 7: 
      var $15=$i;
      var $inc=((($15)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 
      var $16=$n;
      _luaL_pushresultsize($b, $16);
      STACKTOP = __stackBase__;
      return 1;
  }

}
_str_char["X"]=1;

function _str_dump($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1040)|0; _memset(__stackBase__, 0, 1040);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $b=__stackBase__;
      $L_addr=$L;
      var $0=$L_addr;
      _luaL_checktype($0, 1, 6);
      var $1=$L_addr;
      _lua_settop($1, 1);
      var $2=$L_addr;
      _luaL_buffinit($2, $b);
      var $3=$L_addr;
      var $4=$b;
      var $call=_lua_dump($3, 78, $4);
      var $cmp=(($call)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$L_addr;
      var $call1=_luaL_error($5, ((5248116)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      $retval=$call1;
      label = 5; break;
    case 4: 
      _luaL_pushresult($b);
      $retval=1;
      label = 5; break;
    case 5: 
      var $6=$retval;
      STACKTOP = __stackBase__;
      return $6;
  }

}


function _str_find($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_str_find_aux($0, 1);

  return $call;
}


function _str_format($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1068)|0; _memset(__stackBase__, 0, 1068);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $top;
      var $arg;
      var $sfl=__stackBase__;
      var $strfrmt;
      var $strfrmt_end;
      var $b=(__stackBase__)+(4);
      var $form=(__stackBase__)+(1044);
      var $buff;
      var $nb;
      var $n42;
      var $ni;
      var $diff;
      var $n59;
      var $ni61;
      var $diff63;
      var $l=(__stackBase__)+(1064);
      var $s;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_lua_gettop($0);
      $top=$call;
      $arg=1;
      var $1=$L_addr;
      var $2=$arg;
      var $call1=_luaL_checklstring($1, $2, $sfl);
      $strfrmt=$call1;
      var $3=$strfrmt;
      var $4=HEAP32[(($sfl)>>2)];
      var $add_ptr=(($3+$4)|0);
      $strfrmt_end=$add_ptr;
      var $5=$L_addr;
      _luaL_buffinit($5, $b);
      label = 3; break;
    case 3: 
      var $6=$strfrmt;
      var $7=$strfrmt_end;
      var $cmp=(($6)>>>0) < (($7)>>>0);
      if ($cmp) { label = 4; break; } else { label = 34; break; }
    case 4: 
      var $8=$strfrmt;
      var $9=HEAP8[($8)];
      var $conv=(($9 << 24) >> 24);
      var $cmp2=(($conv)|0)!=37;
      if ($cmp2) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $n=(($b+8)|0);
      var $10=HEAP32[(($n)>>2)];
      var $size=(($b+4)|0);
      var $11=HEAP32[(($size)>>2)];
      var $cmp4=(($10)>>>0) < (($11)>>>0);
      if ($cmp4) { var $12 = 1;label = 7; break; } else { label = 6; break; }
    case 6: 
      var $call6=_luaL_prepbuffsize($b, 1);
      var $tobool=(($call6)|0)!=0;
      var $12 = $tobool;label = 7; break;
    case 7: 
      var $12;
      var $lor_ext=(($12)&1);
      var $13=$strfrmt;
      var $incdec_ptr=(($13+1)|0);
      $strfrmt=$incdec_ptr;
      var $14=HEAP8[($13)];
      var $n7=(($b+8)|0);
      var $15=HEAP32[(($n7)>>2)];
      var $inc=((($15)+(1))|0);
      HEAP32[(($n7)>>2)]=$inc;
      var $b8=(($b)|0);
      var $16=HEAP32[(($b8)>>2)];
      var $arrayidx=(($16+$15)|0);
      HEAP8[($arrayidx)]=$14;
      label = 33; break;
    case 8: 
      var $17=$strfrmt;
      var $incdec_ptr9=(($17+1)|0);
      $strfrmt=$incdec_ptr9;
      var $18=HEAP8[($incdec_ptr9)];
      var $conv10=(($18 << 24) >> 24);
      var $cmp11=(($conv10)|0)==37;
      if ($cmp11) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $n14=(($b+8)|0);
      var $19=HEAP32[(($n14)>>2)];
      var $size15=(($b+4)|0);
      var $20=HEAP32[(($size15)>>2)];
      var $cmp16=(($19)>>>0) < (($20)>>>0);
      if ($cmp16) { var $21 = 1;label = 11; break; } else { label = 10; break; }
    case 10: 
      var $call19=_luaL_prepbuffsize($b, 1);
      var $tobool20=(($call19)|0)!=0;
      var $21 = $tobool20;label = 11; break;
    case 11: 
      var $21;
      var $lor_ext22=(($21)&1);
      var $22=$strfrmt;
      var $incdec_ptr23=(($22+1)|0);
      $strfrmt=$incdec_ptr23;
      var $23=HEAP8[($22)];
      var $n24=(($b+8)|0);
      var $24=HEAP32[(($n24)>>2)];
      var $inc25=((($24)+(1))|0);
      HEAP32[(($n24)>>2)]=$inc25;
      var $b26=(($b)|0);
      var $25=HEAP32[(($b26)>>2)];
      var $arrayidx27=(($25+$24)|0);
      HEAP8[($arrayidx27)]=$23;
      label = 32; break;
    case 12: 
      var $call29=_luaL_prepbuffsize($b, 512);
      $buff=$call29;
      $nb=0;
      var $26=$arg;
      var $inc30=((($26)+(1))|0);
      $arg=$inc30;
      var $27=$top;
      var $cmp31=(($inc30)|0) > (($27)|0);
      if ($cmp31) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $28=$L_addr;
      var $29=$arg;
      var $call34=_luaL_argerror($28, $29, ((5249456)|0));
      label = 14; break;
    case 14: 
      var $30=$L_addr;
      var $31=$strfrmt;
      var $arraydecay=(($form)|0);
      var $call35=_scanformat($30, $31, $arraydecay);
      $strfrmt=$call35;
      var $32=$strfrmt;
      var $incdec_ptr36=(($32+1)|0);
      $strfrmt=$incdec_ptr36;
      var $33=HEAP8[($32)];
      var $conv37=(($33 << 24) >> 24);
      if ((($conv37)|0)==99) {
        label = 15; break;
      }
      else if ((($conv37)|0)==100 | (($conv37)|0)==105) {
        label = 16; break;
      }
      else if ((($conv37)|0)==111 | (($conv37)|0)==117 | (($conv37)|0)==120 | (($conv37)|0)==88) {
        label = 20; break;
      }
      else if ((($conv37)|0)==101 | (($conv37)|0)==69 | (($conv37)|0)==102 | (($conv37)|0)==103 | (($conv37)|0)==71) {
        label = 24; break;
      }
      else if ((($conv37)|0)==113) {
        label = 25; break;
      }
      else if ((($conv37)|0)==115) {
        label = 26; break;
      }
      else {
      label = 30; break;
      }
      
    case 15: 
      var $34=$buff;
      var $arraydecay38=(($form)|0);
      var $35=$L_addr;
      var $36=$arg;
      var $call39=_luaL_checkinteger($35, $36);
      var $call40=_sprintf($34, $arraydecay38, (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$call39,tempInt));
      $nb=$call40;
      label = 31; break;
    case 16: 
      var $37=$L_addr;
      var $38=$arg;
      var $call43=_luaL_checknumber($37, $38);
      $n42=$call43;
      var $39=$n42;
      var $conv44=(($39)&-1);
      $ni=$conv44;
      var $40=$n42;
      var $41=$ni;
      var $conv45=(($41)|0);
      var $sub=($40)-($conv45);
      $diff=$sub;
      var $42=$diff;
      var $cmp46=-1 < $42;
      if ($cmp46) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $43=$diff;
      var $cmp48=$43 < 1;
      if ($cmp48) { var $46 = 1;label = 19; break; } else { label = 18; break; }
    case 18: 
      var $44=$L_addr;
      var $45=$arg;
      var $call51=_luaL_argerror($44, $45, ((5249308)|0));
      var $tobool52=(($call51)|0)!=0;
      var $46 = $tobool52;label = 19; break;
    case 19: 
      var $46;
      var $lor_ext54=(($46)&1);
      var $arraydecay55=(($form)|0);
      _addlenmod($arraydecay55, ((5249124)|0));
      var $47=$buff;
      var $arraydecay56=(($form)|0);
      var $48=$ni;
      var $call57=_sprintf($47, $arraydecay56, (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$48,tempInt));
      $nb=$call57;
      label = 31; break;
    case 20: 
      var $49=$L_addr;
      var $50=$arg;
      var $call60=_luaL_checknumber($49, $50);
      $n59=$call60;
      var $51=$n59;
      var $conv62=($51>=0 ? Math.floor($51) : Math.ceil($51));
      $ni61=$conv62;
      var $52=$n59;
      var $53=$ni61;
      var $conv64=(($53)>>>0);
      var $sub65=($52)-($conv64);
      $diff63=$sub65;
      var $54=$diff63;
      var $cmp66=-1 < $54;
      if ($cmp66) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $55=$diff63;
      var $cmp69=$55 < 1;
      if ($cmp69) { var $58 = 1;label = 23; break; } else { label = 22; break; }
    case 22: 
      var $56=$L_addr;
      var $57=$arg;
      var $call72=_luaL_argerror($56, $57, ((5248864)|0));
      var $tobool73=(($call72)|0)!=0;
      var $58 = $tobool73;label = 23; break;
    case 23: 
      var $58;
      var $lor_ext75=(($58)&1);
      var $arraydecay76=(($form)|0);
      _addlenmod($arraydecay76, ((5249124)|0));
      var $59=$buff;
      var $arraydecay77=(($form)|0);
      var $60=$ni61;
      var $call78=_sprintf($59, $arraydecay77, (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$60,tempInt));
      $nb=$call78;
      label = 31; break;
    case 24: 
      var $arraydecay80=(($form)|0);
      _addlenmod($arraydecay80, ((5246404)|0));
      var $61=$buff;
      var $arraydecay81=(($form)|0);
      var $62=$L_addr;
      var $63=$arg;
      var $call82=_luaL_checknumber($62, $63);
      var $call83=_sprintf($61, $arraydecay81, (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP = (STACKTOP + 8)|0,(HEAPF64[(tempDoublePtr)>>3]=$call82,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      $nb=$call83;
      label = 31; break;
    case 25: 
      var $64=$L_addr;
      var $65=$arg;
      _addquoted($64, $b, $65);
      label = 31; break;
    case 26: 
      var $66=$L_addr;
      var $67=$arg;
      var $call86=_luaL_tolstring($66, $67, $l);
      $s=$call86;
      var $arraydecay87=(($form)|0);
      var $call88=_strchr($arraydecay87, 46);
      var $tobool89=(($call88)|0)!=0;
      if ($tobool89) { label = 29; break; } else { label = 27; break; }
    case 27: 
      var $68=HEAP32[(($l)>>2)];
      var $cmp91=(($68)>>>0) >= 100;
      if ($cmp91) { label = 28; break; } else { label = 29; break; }
    case 28: 
      _luaL_addvalue($b);
      label = 31; break;
    case 29: 
      var $69=$buff;
      var $arraydecay95=(($form)|0);
      var $70=$s;
      var $call96=_sprintf($69, $arraydecay95, (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$70,tempInt));
      $nb=$call96;
      var $71=$L_addr;
      _lua_settop($71, -2);
      label = 31; break;
    case 30: 
      var $72=$L_addr;
      var $73=$strfrmt;
      var $add_ptr97=((($73)-(1))|0);
      var $74=HEAP8[($add_ptr97)];
      var $conv98=(($74 << 24) >> 24);
      var $call99=_luaL_error($72, ((5248740)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$conv98,tempInt));
      $retval=$call99;
      label = 35; break;
    case 31: 
      var $75=$nb;
      var $n100=(($b+8)|0);
      var $76=HEAP32[(($n100)>>2)];
      var $add=((($76)+($75))|0);
      HEAP32[(($n100)>>2)]=$add;
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 3; break;
    case 34: 
      _luaL_pushresult($b);
      $retval=1;
      label = 35; break;
    case 35: 
      var $77=$retval;
      STACKTOP = __stackBase__;
      return $77;
  }

}
_str_format["X"]=1;

function _gmatch($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_luaL_checklstring($0, 1, 0);
  var $1=$L_addr;
  var $call1=_luaL_checklstring($1, 2, 0);
  var $2=$L_addr;
  _lua_settop($2, 2);
  var $3=$L_addr;
  _lua_pushinteger($3, 0);
  var $4=$L_addr;
  _lua_pushcclosure($4, 182, 3);

  return 1;
}


function _str_gsub($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1324)|0; _memset(__stackBase__, 0, 1324);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $srcl=__stackBase__;
      var $lp=(__stackBase__)+(4);
      var $src;
      var $p;
      var $tr;
      var $max_s;
      var $anchor;
      var $n;
      var $ms=(__stackBase__)+(8);
      var $b=(__stackBase__)+(284);
      var $e;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_luaL_checklstring($0, 1, $srcl);
      $src=$call;
      var $1=$L_addr;
      var $call1=_luaL_checklstring($1, 2, $lp);
      $p=$call1;
      var $2=$L_addr;
      var $call2=_lua_type($2, 3);
      $tr=$call2;
      var $3=$L_addr;
      var $4=HEAP32[(($srcl)>>2)];
      var $add=((($4)+(1))|0);
      var $call3=_luaL_optinteger($3, 4, $add);
      $max_s=$call3;
      var $5=$p;
      var $6=HEAP8[($5)];
      var $conv=(($6 << 24) >> 24);
      var $cmp=(($conv)|0)==94;
      var $conv4=(($cmp)&1);
      $anchor=$conv4;
      $n=0;
      var $7=$tr;
      var $cmp5=(($7)|0)==3;
      if ($cmp5) { var $12 = 1;label = 7; break; } else { label = 3; break; }
    case 3: 
      var $8=$tr;
      var $cmp7=(($8)|0)==4;
      if ($cmp7) { var $12 = 1;label = 7; break; } else { label = 4; break; }
    case 4: 
      var $9=$tr;
      var $cmp10=(($9)|0)==6;
      if ($cmp10) { var $12 = 1;label = 7; break; } else { label = 5; break; }
    case 5: 
      var $10=$tr;
      var $cmp13=(($10)|0)==5;
      if ($cmp13) { var $12 = 1;label = 7; break; } else { label = 6; break; }
    case 6: 
      var $11=$L_addr;
      var $call15=_luaL_argerror($11, 3, ((5249880)|0));
      var $tobool=(($call15)|0)!=0;
      var $12 = $tobool;label = 7; break;
    case 7: 
      var $12;
      var $lor_ext=(($12)&1);
      var $13=$L_addr;
      _luaL_buffinit($13, $b);
      var $14=$anchor;
      var $tobool16=(($14)|0)!=0;
      if ($tobool16) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $15=$p;
      var $incdec_ptr=(($15+1)|0);
      $p=$incdec_ptr;
      var $16=HEAP32[(($lp)>>2)];
      var $dec=((($16)-(1))|0);
      HEAP32[(($lp)>>2)]=$dec;
      label = 9; break;
    case 9: 
      var $17=$L_addr;
      var $L17=(($ms+12)|0);
      HEAP32[(($L17)>>2)]=$17;
      var $18=$src;
      var $src_init=(($ms)|0);
      HEAP32[(($src_init)>>2)]=$18;
      var $19=$src;
      var $20=HEAP32[(($srcl)>>2)];
      var $add_ptr=(($19+$20)|0);
      var $src_end=(($ms+4)|0);
      HEAP32[(($src_end)>>2)]=$add_ptr;
      var $21=$p;
      var $22=HEAP32[(($lp)>>2)];
      var $add_ptr18=(($21+$22)|0);
      var $p_end=(($ms+8)|0);
      HEAP32[(($p_end)>>2)]=$add_ptr18;
      label = 10; break;
    case 10: 
      var $23=$n;
      var $24=$max_s;
      var $cmp19=(($23)>>>0) < (($24)>>>0);
      if ($cmp19) { label = 11; break; } else { label = 25; break; }
    case 11: 
      var $level=(($ms+16)|0);
      HEAP32[(($level)>>2)]=0;
      var $25=$src;
      var $26=$p;
      var $call21=_match($ms, $25, $26);
      $e=$call21;
      var $27=$e;
      var $tobool22=(($27)|0)!=0;
      if ($tobool22) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $28=$n;
      var $inc=((($28)+(1))|0);
      $n=$inc;
      var $29=$src;
      var $30=$e;
      var $31=$tr;
      _add_value($ms, $b, $29, $30, $31);
      label = 13; break;
    case 13: 
      var $32=$e;
      var $tobool25=(($32)|0)!=0;
      if ($tobool25) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $33=$e;
      var $34=$src;
      var $cmp26=(($33)>>>0) > (($34)>>>0);
      if ($cmp26) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $35=$e;
      $src=$35;
      label = 22; break;
    case 16: 
      var $36=$src;
      var $src_end29=(($ms+4)|0);
      var $37=HEAP32[(($src_end29)>>2)];
      var $cmp30=(($36)>>>0) < (($37)>>>0);
      if ($cmp30) { label = 17; break; } else { label = 20; break; }
    case 17: 
      var $n33=(($b+8)|0);
      var $38=HEAP32[(($n33)>>2)];
      var $size=(($b+4)|0);
      var $39=HEAP32[(($size)>>2)];
      var $cmp34=(($38)>>>0) < (($39)>>>0);
      if ($cmp34) { var $40 = 1;label = 19; break; } else { label = 18; break; }
    case 18: 
      var $call37=_luaL_prepbuffsize($b, 1);
      var $tobool38=(($call37)|0)!=0;
      var $40 = $tobool38;label = 19; break;
    case 19: 
      var $40;
      var $lor_ext40=(($40)&1);
      var $41=$src;
      var $incdec_ptr41=(($41+1)|0);
      $src=$incdec_ptr41;
      var $42=HEAP8[($41)];
      var $n42=(($b+8)|0);
      var $43=HEAP32[(($n42)>>2)];
      var $inc43=((($43)+(1))|0);
      HEAP32[(($n42)>>2)]=$inc43;
      var $b44=(($b)|0);
      var $44=HEAP32[(($b44)>>2)];
      var $arrayidx=(($44+$43)|0);
      HEAP8[($arrayidx)]=$42;
      label = 21; break;
    case 20: 
      label = 25; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $45=$anchor;
      var $tobool48=(($45)|0)!=0;
      if ($tobool48) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 25; break;
    case 24: 
      label = 10; break;
    case 25: 
      var $46=$src;
      var $src_end51=(($ms+4)|0);
      var $47=HEAP32[(($src_end51)>>2)];
      var $48=$src;
      var $sub_ptr_lhs_cast=$47;
      var $sub_ptr_rhs_cast=$48;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      _luaL_addlstring($b, $46, $sub_ptr_sub);
      _luaL_pushresult($b);
      var $49=$L_addr;
      var $50=$n;
      _lua_pushinteger($49, $50);
      STACKTOP = __stackBase__;
      return 2;
  }

}
_str_gsub["X"]=1;

function _str_len($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);

  var $L_addr;
  var $l=__stackBase__;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_luaL_checklstring($0, 1, $l);
  var $1=$L_addr;
  var $2=HEAP32[(($l)>>2)];
  _lua_pushinteger($1, $2);
  STACKTOP = __stackBase__;
  return 1;
}


function _posrelat($pos, $len) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $pos_addr;
      var $len_addr;
      $pos_addr=$pos;
      $len_addr=$len;
      var $0=$pos_addr;
      var $cmp=(($0)|0) >= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$pos_addr;
      $retval=$1;
      label = 7; break;
    case 4: 
      var $2=$pos_addr;
      var $sub=(((-$2))|0);
      var $3=$len_addr;
      var $cmp1=(($sub)>>>0) > (($3)>>>0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=0;
      label = 7; break;
    case 6: 
      var $4=$len_addr;
      var $5=$pos_addr;
      var $sub4=(((-$5))|0);
      var $sub5=((($4)-($sub4))|0);
      var $add=((($sub5)+(1))|0);
      $retval=$add;
      label = 7; break;
    case 7: 
      var $6=$retval;

      return $6;
  }

}


function _str_lower($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1044)|0; _memset(__stackBase__, 0, 1044);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $l=__stackBase__;
      var $i;
      var $b=(__stackBase__)+(4);
      var $s;
      var $p;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_luaL_checklstring($0, 1, $l);
      $s=$call;
      var $1=$L_addr;
      var $2=HEAP32[(($l)>>2)];
      var $call1=_luaL_buffinitsize($1, $b, $2);
      $p=$call1;
      $i=0;
      label = 3; break;
    case 3: 
      var $3=$i;
      var $4=HEAP32[(($l)>>2)];
      var $cmp=(($3)>>>0) < (($4)>>>0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $5=$i;
      var $6=$s;
      var $arrayidx=(($6+$5)|0);
      var $7=HEAP8[($arrayidx)];
      var $conv=(($7)&255);
      var $call2=_tolower($conv);
      var $conv3=(($call2) & 255);
      var $8=$i;
      var $9=$p;
      var $arrayidx4=(($9+$8)|0);
      HEAP8[($arrayidx4)]=$conv3;
      label = 5; break;
    case 5: 
      var $10=$i;
      var $inc=((($10)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $11=HEAP32[(($l)>>2)];
      _luaL_pushresultsize($b, $11);
      STACKTOP = __stackBase__;
      return 1;
  }

}


function _str_match($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_str_find_aux($0, 0);

  return $call;
}


function _str_rep($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1048)|0; _memset(__stackBase__, 0, 1048);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $l=__stackBase__;
      var $lsep=(__stackBase__)+(4);
      var $s;
      var $n;
      var $sep;
      var $totallen;
      var $b=(__stackBase__)+(8);
      var $p;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_luaL_checklstring($0, 1, $l);
      $s=$call;
      var $1=$L_addr;
      var $call1=_luaL_checkinteger($1, 2);
      $n=$call1;
      var $2=$L_addr;
      var $call2=_luaL_optlstring($2, 3, ((5246404)|0), $lsep);
      $sep=$call2;
      var $3=$n;
      var $cmp=(($3)|0) <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$L_addr;
      var $call3=_lua_pushlstring($4, ((5246404)|0), 0);
      label = 14; break;
    case 4: 
      var $5=HEAP32[(($l)>>2)];
      var $6=HEAP32[(($lsep)>>2)];
      var $add=((($5)+($6))|0);
      var $7=HEAP32[(($l)>>2)];
      var $cmp4=(($add)>>>0) < (($7)>>>0);
      if ($cmp4) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $8=HEAP32[(($l)>>2)];
      var $9=HEAP32[(($lsep)>>2)];
      var $add5=((($8)+($9))|0);
      var $10=$n;
      var $div=Math.floor((2147483647)/((($10)>>>0)));
      var $cmp6=(($add5)>>>0) >= (($div)>>>0);
      if ($cmp6) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $11=$L_addr;
      var $call8=_luaL_error($11, ((5252080)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      $retval=$call8;
      label = 15; break;
    case 7: 
      var $12=$n;
      var $13=HEAP32[(($l)>>2)];
      var $mul=Math.imul($12,$13);
      var $14=$n;
      var $sub=((($14)-(1))|0);
      var $15=HEAP32[(($lsep)>>2)];
      var $mul10=Math.imul($sub,$15);
      var $add11=((($mul)+($mul10))|0);
      $totallen=$add11;
      var $16=$L_addr;
      var $17=$totallen;
      var $call12=_luaL_buffinitsize($16, $b, $17);
      $p=$call12;
      label = 8; break;
    case 8: 
      var $18=$n;
      var $dec=((($18)-(1))|0);
      $n=$dec;
      var $cmp13=(($18)|0) > 1;
      if ($cmp13) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $19=$p;
      var $20=$s;
      var $21=HEAP32[(($l)>>2)];
      var $mul14=$21;
      _memcpy($19, $20, $mul14);
      var $22=HEAP32[(($l)>>2)];
      var $23=$p;
      var $add_ptr=(($23+$22)|0);
      $p=$add_ptr;
      var $24=HEAP32[(($lsep)>>2)];
      var $cmp15=(($24)>>>0) > 0;
      if ($cmp15) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $25=$p;
      var $26=$sep;
      var $27=HEAP32[(($lsep)>>2)];
      var $mul17=$27;
      _memcpy($25, $26, $mul17);
      var $28=HEAP32[(($lsep)>>2)];
      var $29=$p;
      var $add_ptr18=(($29+$28)|0);
      $p=$add_ptr18;
      label = 11; break;
    case 11: 
      label = 8; break;
    case 12: 
      var $30=$p;
      var $31=$s;
      var $32=HEAP32[(($l)>>2)];
      var $mul19=$32;
      _memcpy($30, $31, $mul19);
      var $33=$totallen;
      _luaL_pushresultsize($b, $33);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      $retval=1;
      label = 15; break;
    case 15: 
      var $34=$retval;
      STACKTOP = __stackBase__;
      return $34;
  }

}
_str_rep["X"]=1;

function _str_reverse($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1044)|0; _memset(__stackBase__, 0, 1044);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $l=__stackBase__;
      var $i;
      var $b=(__stackBase__)+(4);
      var $s;
      var $p;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_luaL_checklstring($0, 1, $l);
      $s=$call;
      var $1=$L_addr;
      var $2=HEAP32[(($l)>>2)];
      var $call1=_luaL_buffinitsize($1, $b, $2);
      $p=$call1;
      $i=0;
      label = 3; break;
    case 3: 
      var $3=$i;
      var $4=HEAP32[(($l)>>2)];
      var $cmp=(($3)>>>0) < (($4)>>>0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $5=HEAP32[(($l)>>2)];
      var $6=$i;
      var $sub=((($5)-($6))|0);
      var $sub2=((($sub)-(1))|0);
      var $7=$s;
      var $arrayidx=(($7+$sub2)|0);
      var $8=HEAP8[($arrayidx)];
      var $9=$i;
      var $10=$p;
      var $arrayidx3=(($10+$9)|0);
      HEAP8[($arrayidx3)]=$8;
      label = 5; break;
    case 5: 
      var $11=$i;
      var $inc=((($11)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $12=HEAP32[(($l)>>2)];
      _luaL_pushresultsize($b, $12);
      STACKTOP = __stackBase__;
      return 1;
  }

}


function _str_sub($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $l=__stackBase__;
      var $s;
      var $start;
      var $end;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_luaL_checklstring($0, 1, $l);
      $s=$call;
      var $1=$L_addr;
      var $call1=_luaL_checkinteger($1, 2);
      var $2=HEAP32[(($l)>>2)];
      var $call2=_posrelat($call1, $2);
      $start=$call2;
      var $3=$L_addr;
      var $call3=_luaL_optinteger($3, 3, -1);
      var $4=HEAP32[(($l)>>2)];
      var $call4=_posrelat($call3, $4);
      $end=$call4;
      var $5=$start;
      var $cmp=(($5)>>>0) < 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $start=1;
      label = 4; break;
    case 4: 
      var $6=$end;
      var $7=HEAP32[(($l)>>2)];
      var $cmp5=(($6)>>>0) > (($7)>>>0);
      if ($cmp5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=HEAP32[(($l)>>2)];
      $end=$8;
      label = 6; break;
    case 6: 
      var $9=$start;
      var $10=$end;
      var $cmp8=(($9)>>>0) <= (($10)>>>0);
      if ($cmp8) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $11=$L_addr;
      var $12=$s;
      var $13=$start;
      var $add_ptr=(($12+$13)|0);
      var $add_ptr10=((($add_ptr)-(1))|0);
      var $14=$end;
      var $15=$start;
      var $sub=((($14)-($15))|0);
      var $add=((($sub)+(1))|0);
      var $call11=_lua_pushlstring($11, $add_ptr10, $add);
      label = 9; break;
    case 8: 
      var $16=$L_addr;
      var $call12=_lua_pushlstring($16, ((5246404)|0), 0);
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return 1;
  }

}
_str_sub["X"]=1;

function _str_upper($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1044)|0; _memset(__stackBase__, 0, 1044);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $l=__stackBase__;
      var $i;
      var $b=(__stackBase__)+(4);
      var $s;
      var $p;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_luaL_checklstring($0, 1, $l);
      $s=$call;
      var $1=$L_addr;
      var $2=HEAP32[(($l)>>2)];
      var $call1=_luaL_buffinitsize($1, $b, $2);
      $p=$call1;
      $i=0;
      label = 3; break;
    case 3: 
      var $3=$i;
      var $4=HEAP32[(($l)>>2)];
      var $cmp=(($3)>>>0) < (($4)>>>0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $5=$i;
      var $6=$s;
      var $arrayidx=(($6+$5)|0);
      var $7=HEAP8[($arrayidx)];
      var $conv=(($7)&255);
      var $call2=_toupper($conv);
      var $conv3=(($call2) & 255);
      var $8=$i;
      var $9=$p;
      var $arrayidx4=(($9+$8)|0);
      HEAP8[($arrayidx4)]=$conv3;
      label = 5; break;
    case 5: 
      var $10=$i;
      var $inc=((($10)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $11=HEAP32[(($l)>>2)];
      _luaL_pushresultsize($b, $11);
      STACKTOP = __stackBase__;
      return 1;
  }

}


function _str_find_aux($L, $find) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 284)|0; _memset(__stackBase__, 0, 284);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $find_addr;
      var $ls=__stackBase__;
      var $lp=(__stackBase__)+(4);
      var $s;
      var $p;
      var $init;
      var $s2;
      var $ms=(__stackBase__)+(8);
      var $s1;
      var $anchor;
      var $res;
      $L_addr=$L;
      $find_addr=$find;
      var $0=$L_addr;
      var $call=_luaL_checklstring($0, 1, $ls);
      $s=$call;
      var $1=$L_addr;
      var $call1=_luaL_checklstring($1, 2, $lp);
      $p=$call1;
      var $2=$L_addr;
      var $call2=_luaL_optinteger($2, 3, 1);
      var $3=HEAP32[(($ls)>>2)];
      var $call3=_posrelat($call2, $3);
      $init=$call3;
      var $4=$init;
      var $cmp=(($4)>>>0) < 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $init=1;
      label = 7; break;
    case 4: 
      var $5=$init;
      var $6=HEAP32[(($ls)>>2)];
      var $add=((($6)+(1))|0);
      var $cmp4=(($5)>>>0) > (($add)>>>0);
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$L_addr;
      _lua_pushnil($7);
      $retval=1;
      label = 26; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $8=$find_addr;
      var $tobool=(($8)|0)!=0;
      if ($tobool) { label = 8; break; } else { label = 13; break; }
    case 8: 
      var $9=$L_addr;
      var $call7=_lua_toboolean($9, 4);
      var $tobool8=(($call7)|0)!=0;
      if ($tobool8) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $10=$p;
      var $11=HEAP32[(($lp)>>2)];
      var $call9=_nospecials($10, $11);
      var $tobool10=(($call9)|0)!=0;
      if ($tobool10) { label = 10; break; } else { label = 13; break; }
    case 10: 
      var $12=$s;
      var $13=$init;
      var $add_ptr=(($12+$13)|0);
      var $add_ptr12=((($add_ptr)-(1))|0);
      var $14=HEAP32[(($ls)>>2)];
      var $15=$init;
      var $sub=((($14)-($15))|0);
      var $add13=((($sub)+(1))|0);
      var $16=$p;
      var $17=HEAP32[(($lp)>>2)];
      var $call14=_lmemfind($add_ptr12, $add13, $16, $17);
      $s2=$call14;
      var $18=$s2;
      var $tobool15=(($18)|0)!=0;
      if ($tobool15) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $19=$L_addr;
      var $20=$s2;
      var $21=$s;
      var $sub_ptr_lhs_cast=$20;
      var $sub_ptr_rhs_cast=$21;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $add17=((($sub_ptr_sub)+(1))|0);
      _lua_pushinteger($19, $add17);
      var $22=$L_addr;
      var $23=$s2;
      var $24=$s;
      var $sub_ptr_lhs_cast18=$23;
      var $sub_ptr_rhs_cast19=$24;
      var $sub_ptr_sub20=((($sub_ptr_lhs_cast18)-($sub_ptr_rhs_cast19))|0);
      var $25=HEAP32[(($lp)>>2)];
      var $add21=((($sub_ptr_sub20)+($25))|0);
      _lua_pushinteger($22, $add21);
      $retval=2;
      label = 26; break;
    case 12: 
      label = 25; break;
    case 13: 
      var $26=$s;
      var $27=$init;
      var $add_ptr24=(($26+$27)|0);
      var $add_ptr25=((($add_ptr24)-(1))|0);
      $s1=$add_ptr25;
      var $28=$p;
      var $29=HEAP8[($28)];
      var $conv=(($29 << 24) >> 24);
      var $cmp26=(($conv)|0)==94;
      var $conv27=(($cmp26)&1);
      $anchor=$conv27;
      var $30=$anchor;
      var $tobool28=(($30)|0)!=0;
      if ($tobool28) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $31=$p;
      var $incdec_ptr=(($31+1)|0);
      $p=$incdec_ptr;
      var $32=HEAP32[(($lp)>>2)];
      var $dec=((($32)-(1))|0);
      HEAP32[(($lp)>>2)]=$dec;
      label = 15; break;
    case 15: 
      var $33=$L_addr;
      var $L31=(($ms+12)|0);
      HEAP32[(($L31)>>2)]=$33;
      var $34=$s;
      var $src_init=(($ms)|0);
      HEAP32[(($src_init)>>2)]=$34;
      var $35=$s;
      var $36=HEAP32[(($ls)>>2)];
      var $add_ptr32=(($35+$36)|0);
      var $src_end=(($ms+4)|0);
      HEAP32[(($src_end)>>2)]=$add_ptr32;
      var $37=$p;
      var $38=HEAP32[(($lp)>>2)];
      var $add_ptr33=(($37+$38)|0);
      var $p_end=(($ms+8)|0);
      HEAP32[(($p_end)>>2)]=$add_ptr33;
      label = 16; break;
    case 16: 
      var $level=(($ms+16)|0);
      HEAP32[(($level)>>2)]=0;
      var $39=$s1;
      var $40=$p;
      var $call34=_match($ms, $39, $40);
      $res=$call34;
      var $cmp35=(($call34)|0)!=0;
      if ($cmp35) { label = 17; break; } else { label = 20; break; }
    case 17: 
      var $41=$find_addr;
      var $tobool38=(($41)|0)!=0;
      if ($tobool38) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $42=$L_addr;
      var $43=$s1;
      var $44=$s;
      var $sub_ptr_lhs_cast40=$43;
      var $sub_ptr_rhs_cast41=$44;
      var $sub_ptr_sub42=((($sub_ptr_lhs_cast40)-($sub_ptr_rhs_cast41))|0);
      var $add43=((($sub_ptr_sub42)+(1))|0);
      _lua_pushinteger($42, $add43);
      var $45=$L_addr;
      var $46=$res;
      var $47=$s;
      var $sub_ptr_lhs_cast44=$46;
      var $sub_ptr_rhs_cast45=$47;
      var $sub_ptr_sub46=((($sub_ptr_lhs_cast44)-($sub_ptr_rhs_cast45))|0);
      _lua_pushinteger($45, $sub_ptr_sub46);
      var $call47=_push_captures($ms, 0, 0);
      var $add48=((($call47)+(2))|0);
      $retval=$add48;
      label = 26; break;
    case 19: 
      var $48=$s1;
      var $49=$res;
      var $call50=_push_captures($ms, $48, $49);
      $retval=$call50;
      label = 26; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $50=$s1;
      var $incdec_ptr52=(($50+1)|0);
      $s1=$incdec_ptr52;
      var $src_end53=(($ms+4)|0);
      var $51=HEAP32[(($src_end53)>>2)];
      var $cmp54=(($50)>>>0) < (($51)>>>0);
      if ($cmp54) { label = 22; break; } else { var $53 = 0;label = 23; break; }
    case 22: 
      var $52=$anchor;
      var $tobool56=(($52)|0)!=0;
      var $lnot=$tobool56 ^ 1;
      var $53 = $lnot;label = 23; break;
    case 23: 
      var $53;
      if ($53) { label = 16; break; } else { label = 24; break; }
    case 24: 
      label = 25; break;
    case 25: 
      var $54=$L_addr;
      _lua_pushnil($54);
      $retval=1;
      label = 26; break;
    case 26: 
      var $55=$retval;
      STACKTOP = __stackBase__;
      return $55;
  }

}
_str_find_aux["X"]=1;

function _nospecials($p, $l) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p_addr;
      var $l_addr;
      var $upto;
      $p_addr=$p;
      $l_addr=$l;
      $upto=0;
      label = 3; break;
    case 3: 
      var $0=$p_addr;
      var $1=$upto;
      var $add_ptr=(($0+$1)|0);
      var $call=_strpbrk($add_ptr, ((5250124)|0));
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $retval=0;
      label = 8; break;
    case 5: 
      var $2=$p_addr;
      var $3=$upto;
      var $add_ptr1=(($2+$3)|0);
      var $call2=_strlen($add_ptr1);
      var $add=((($call2)+(1))|0);
      var $4=$upto;
      var $add3=((($4)+($add))|0);
      $upto=$add3;
      label = 6; break;
    case 6: 
      var $5=$upto;
      var $6=$l_addr;
      var $cmp=(($5)>>>0) <= (($6)>>>0);
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 7: 
      $retval=1;
      label = 8; break;
    case 8: 
      var $7=$retval;

      return $7;
  }

}


function _lmemfind($s1, $l1, $s2, $l2) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $s1_addr;
      var $l1_addr;
      var $s2_addr;
      var $l2_addr;
      var $init;
      $s1_addr=$s1;
      $l1_addr=$l1;
      $s2_addr=$s2;
      $l2_addr=$l2;
      var $0=$l2_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$s1_addr;
      $retval=$1;
      label = 15; break;
    case 4: 
      var $2=$l2_addr;
      var $3=$l1_addr;
      var $cmp1=(($2)>>>0) > (($3)>>>0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=0;
      label = 15; break;
    case 6: 
      var $4=$l2_addr;
      var $dec=((($4)-(1))|0);
      $l2_addr=$dec;
      var $5=$l1_addr;
      var $6=$l2_addr;
      var $sub=((($5)-($6))|0);
      $l1_addr=$sub;
      label = 7; break;
    case 7: 
      var $7=$l1_addr;
      var $cmp4=(($7)>>>0) > 0;
      if ($cmp4) { label = 8; break; } else { var $12 = 0;label = 9; break; }
    case 8: 
      var $8=$s1_addr;
      var $9=$s2_addr;
      var $10=HEAP8[($9)];
      var $conv=(($10 << 24) >> 24);
      var $11=$l1_addr;
      var $call=_memchr($8, $conv, $11);
      $init=$call;
      var $cmp5=(($call)|0)!=0;
      var $12 = $cmp5;label = 9; break;
    case 9: 
      var $12;
      if ($12) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $13=$init;
      var $incdec_ptr=(($13+1)|0);
      $init=$incdec_ptr;
      var $14=$init;
      var $15=$s2_addr;
      var $add_ptr=(($15+1)|0);
      var $16=$l2_addr;
      var $call7=_memcmp($14, $add_ptr, $16);
      var $cmp8=(($call7)|0)==0;
      if ($cmp8) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $17=$init;
      var $add_ptr11=((($17)-(1))|0);
      $retval=$add_ptr11;
      label = 15; break;
    case 12: 
      var $18=$init;
      var $19=$s1_addr;
      var $sub_ptr_lhs_cast=$18;
      var $sub_ptr_rhs_cast=$19;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $20=$l1_addr;
      var $sub13=((($20)-($sub_ptr_sub))|0);
      $l1_addr=$sub13;
      var $21=$init;
      $s1_addr=$21;
      label = 13; break;
    case 13: 
      label = 7; break;
    case 14: 
      $retval=0;
      label = 15; break;
    case 15: 
      var $22=$retval;

      return $22;
  }

}
_lmemfind["X"]=1;

function _match($ms, $s, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $ms_addr;
      var $s_addr;
      var $p_addr;
      var $ep;
      var $previous;
      var $ep68;
      var $m;
      var $res;
      $ms_addr=$ms;
      $s_addr=$s;
      $p_addr=$p;
      label = 3; break;
    case 3: 
      var $0=$p_addr;
      var $1=$ms_addr;
      var $p_end=(($1+8)|0);
      var $2=HEAP32[(($p_end)>>2)];
      var $cmp=(($0)|0)==(($2)|0);
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$s_addr;
      $retval=$3;
      label = 50; break;
    case 5: 
      var $4=$p_addr;
      var $5=HEAP8[($4)];
      var $conv=(($5 << 24) >> 24);
      if ((($conv)|0)==40) {
        label = 6; break;
      }
      else if ((($conv)|0)==41) {
        label = 9; break;
      }
      else if ((($conv)|0)==36) {
        label = 10; break;
      }
      else if ((($conv)|0)==37) {
        label = 16; break;
      }
      else {
      label = 33; break;
      }
      
    case 6: 
      var $6=$p_addr;
      var $add_ptr=(($6+1)|0);
      var $7=HEAP8[($add_ptr)];
      var $conv1=(($7 << 24) >> 24);
      var $cmp2=(($conv1)|0)==41;
      if ($cmp2) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $8=$ms_addr;
      var $9=$s_addr;
      var $10=$p_addr;
      var $add_ptr5=(($10+2)|0);
      var $call=_start_capture($8, $9, $add_ptr5, -2);
      $retval=$call;
      label = 50; break;
    case 8: 
      var $11=$ms_addr;
      var $12=$s_addr;
      var $13=$p_addr;
      var $add_ptr6=(($13+1)|0);
      var $call7=_start_capture($11, $12, $add_ptr6, -1);
      $retval=$call7;
      label = 50; break;
    case 9: 
      var $14=$ms_addr;
      var $15=$s_addr;
      var $16=$p_addr;
      var $add_ptr9=(($16+1)|0);
      var $call10=_end_capture($14, $15, $add_ptr9);
      $retval=$call10;
      label = 50; break;
    case 10: 
      var $17=$p_addr;
      var $add_ptr12=(($17+1)|0);
      var $18=$ms_addr;
      var $p_end13=(($18+8)|0);
      var $19=HEAP32[(($p_end13)>>2)];
      var $cmp14=(($add_ptr12)|0)==(($19)|0);
      if ($cmp14) { label = 11; break; } else { label = 15; break; }
    case 11: 
      var $20=$s_addr;
      var $21=$ms_addr;
      var $src_end=(($21+4)|0);
      var $22=HEAP32[(($src_end)>>2)];
      var $cmp17=(($20)|0)==(($22)|0);
      if ($cmp17) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $23=$s_addr;
      var $cond = $23;label = 14; break;
    case 13: 
      var $cond = 0;label = 14; break;
    case 14: 
      var $cond;
      $retval=$cond;
      label = 50; break;
    case 15: 
      label = 34; break;
    case 16: 
      var $24=$p_addr;
      var $add_ptr21=(($24+1)|0);
      var $25=HEAP8[($add_ptr21)];
      var $conv22=(($25 << 24) >> 24);
      if ((($conv22)|0)==98) {
        label = 17; break;
      }
      else if ((($conv22)|0)==102) {
        label = 20; break;
      }
      else if ((($conv22)|0)==48 | (($conv22)|0)==49 | (($conv22)|0)==50 | (($conv22)|0)==51 | (($conv22)|0)==52 | (($conv22)|0)==53 | (($conv22)|0)==54 | (($conv22)|0)==55 | (($conv22)|0)==56 | (($conv22)|0)==57) {
        label = 29; break;
      }
      else {
      label = 32; break;
      }
      
    case 17: 
      var $26=$ms_addr;
      var $27=$s_addr;
      var $28=$p_addr;
      var $add_ptr24=(($28+2)|0);
      var $call25=_matchbalance($26, $27, $add_ptr24);
      $s_addr=$call25;
      var $29=$s_addr;
      var $cmp26=(($29)|0)==0;
      if ($cmp26) { label = 18; break; } else { label = 19; break; }
    case 18: 
      $retval=0;
      label = 50; break;
    case 19: 
      var $30=$p_addr;
      var $add_ptr30=(($30+4)|0);
      $p_addr=$add_ptr30;
      label = 3; break;
    case 20: 
      var $31=$p_addr;
      var $add_ptr32=(($31+2)|0);
      $p_addr=$add_ptr32;
      var $32=$p_addr;
      var $33=HEAP8[($32)];
      var $conv33=(($33 << 24) >> 24);
      var $cmp34=(($conv33)|0)!=91;
      if ($cmp34) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $34=$ms_addr;
      var $L=(($34+12)|0);
      var $35=HEAP32[(($L)>>2)];
      var $call37=_luaL_error($35, ((5251272)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 22; break;
    case 22: 
      var $36=$ms_addr;
      var $37=$p_addr;
      var $call39=_classend($36, $37);
      $ep=$call39;
      var $38=$s_addr;
      var $39=$ms_addr;
      var $src_init=(($39)|0);
      var $40=HEAP32[(($src_init)>>2)];
      var $cmp40=(($38)|0)==(($40)|0);
      if ($cmp40) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $cond47 = 0;label = 25; break;
    case 24: 
      var $41=$s_addr;
      var $add_ptr44=((($41)-(1))|0);
      var $42=HEAP8[($add_ptr44)];
      var $conv45=(($42 << 24) >> 24);
      var $cond47 = $conv45;label = 25; break;
    case 25: 
      var $cond47;
      var $conv48=(($cond47) & 255);
      $previous=$conv48;
      var $43=$previous;
      var $conv49=(($43)&255);
      var $44=$p_addr;
      var $45=$ep;
      var $add_ptr50=((($45)-(1))|0);
      var $call51=_matchbracketclass($conv49, $44, $add_ptr50);
      var $tobool=(($call51)|0)!=0;
      if ($tobool) { label = 27; break; } else { label = 26; break; }
    case 26: 
      var $46=$s_addr;
      var $47=HEAP8[($46)];
      var $conv52=(($47)&255);
      var $48=$p_addr;
      var $49=$ep;
      var $add_ptr53=((($49)-(1))|0);
      var $call54=_matchbracketclass($conv52, $48, $add_ptr53);
      var $tobool55=(($call54)|0)!=0;
      if ($tobool55) { label = 28; break; } else { label = 27; break; }
    case 27: 
      $retval=0;
      label = 50; break;
    case 28: 
      var $50=$ep;
      $p_addr=$50;
      label = 3; break;
    case 29: 
      var $51=$ms_addr;
      var $52=$s_addr;
      var $53=$p_addr;
      var $add_ptr59=(($53+1)|0);
      var $54=HEAP8[($add_ptr59)];
      var $conv60=(($54)&255);
      var $call61=_match_capture($51, $52, $conv60);
      $s_addr=$call61;
      var $55=$s_addr;
      var $cmp62=(($55)|0)==0;
      if ($cmp62) { label = 30; break; } else { label = 31; break; }
    case 30: 
      $retval=0;
      label = 50; break;
    case 31: 
      var $56=$p_addr;
      var $add_ptr66=(($56+2)|0);
      $p_addr=$add_ptr66;
      label = 3; break;
    case 32: 
      label = 34; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $57=$ms_addr;
      var $58=$p_addr;
      var $call69=_classend($57, $58);
      $ep68=$call69;
      var $59=$s_addr;
      var $60=$ms_addr;
      var $src_end70=(($60+4)|0);
      var $61=HEAP32[(($src_end70)>>2)];
      var $cmp71=(($59)>>>0) < (($61)>>>0);
      if ($cmp71) { label = 35; break; } else { var $66 = 0;label = 36; break; }
    case 35: 
      var $62=$s_addr;
      var $63=HEAP8[($62)];
      var $conv73=(($63)&255);
      var $64=$p_addr;
      var $65=$ep68;
      var $call74=_singlematch($conv73, $64, $65);
      var $tobool75=(($call74)|0)!=0;
      var $66 = $tobool75;label = 36; break;
    case 36: 
      var $66;
      var $land_ext=(($66)&1);
      $m=$land_ext;
      var $67=$ep68;
      var $68=HEAP8[($67)];
      var $conv76=(($68 << 24) >> 24);
      if ((($conv76)|0)==63) {
        label = 37; break;
      }
      else if ((($conv76)|0)==42) {
        label = 41; break;
      }
      else if ((($conv76)|0)==43) {
        label = 42; break;
      }
      else if ((($conv76)|0)==45) {
        label = 46; break;
      }
      else {
      label = 47; break;
      }
      
    case 37: 
      var $69=$m;
      var $tobool78=(($69)|0)!=0;
      if ($tobool78) { label = 38; break; } else { label = 40; break; }
    case 38: 
      var $70=$ms_addr;
      var $71=$s_addr;
      var $add_ptr79=(($71+1)|0);
      var $72=$ep68;
      var $add_ptr80=(($72+1)|0);
      var $call81=_match($70, $add_ptr79, $add_ptr80);
      $res=$call81;
      var $cmp82=(($call81)|0)!=0;
      if ($cmp82) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $73=$res;
      $retval=$73;
      label = 50; break;
    case 40: 
      var $74=$ep68;
      var $add_ptr86=(($74+1)|0);
      $p_addr=$add_ptr86;
      label = 3; break;
    case 41: 
      var $75=$ms_addr;
      var $76=$s_addr;
      var $77=$p_addr;
      var $78=$ep68;
      var $call88=_max_expand($75, $76, $77, $78);
      $retval=$call88;
      label = 50; break;
    case 42: 
      var $79=$m;
      var $tobool90=(($79)|0)!=0;
      if ($tobool90) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $80=$ms_addr;
      var $81=$s_addr;
      var $add_ptr92=(($81+1)|0);
      var $82=$p_addr;
      var $83=$ep68;
      var $call93=_max_expand($80, $add_ptr92, $82, $83);
      var $cond96 = $call93;label = 45; break;
    case 44: 
      var $cond96 = 0;label = 45; break;
    case 45: 
      var $cond96;
      $retval=$cond96;
      label = 50; break;
    case 46: 
      var $84=$ms_addr;
      var $85=$s_addr;
      var $86=$p_addr;
      var $87=$ep68;
      var $call98=_min_expand($84, $85, $86, $87);
      $retval=$call98;
      label = 50; break;
    case 47: 
      var $88=$m;
      var $tobool100=(($88)|0)!=0;
      if ($tobool100) { label = 49; break; } else { label = 48; break; }
    case 48: 
      $retval=0;
      label = 50; break;
    case 49: 
      var $89=$s_addr;
      var $incdec_ptr=(($89+1)|0);
      $s_addr=$incdec_ptr;
      var $90=$ep68;
      $p_addr=$90;
      label = 3; break;
    case 50: 
      var $91=$retval;
      STACKTOP = __stackBase__;
      return $91;
  }

}
_match["X"]=1;

function _push_captures($ms, $s, $e) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ms_addr;
      var $s_addr;
      var $e_addr;
      var $i;
      var $nlevels;
      $ms_addr=$ms;
      $s_addr=$s;
      $e_addr=$e;
      var $0=$ms_addr;
      var $level=(($0+16)|0);
      var $1=HEAP32[(($level)>>2)];
      var $cmp=(($1)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $2=$s_addr;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $cond = 1;label = 6; break;
    case 5: 
      var $3=$ms_addr;
      var $level1=(($3+16)|0);
      var $4=HEAP32[(($level1)>>2)];
      var $cond = $4;label = 6; break;
    case 6: 
      var $cond;
      $nlevels=$cond;
      var $5=$ms_addr;
      var $L=(($5+12)|0);
      var $6=HEAP32[(($L)>>2)];
      var $7=$nlevels;
      _luaL_checkstack($6, $7, ((5251896)|0));
      $i=0;
      label = 7; break;
    case 7: 
      var $8=$i;
      var $9=$nlevels;
      var $cmp2=(($8)|0) < (($9)|0);
      if ($cmp2) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $10=$ms_addr;
      var $11=$i;
      var $12=$s_addr;
      var $13=$e_addr;
      _push_onecapture($10, $11, $12, $13);
      label = 9; break;
    case 9: 
      var $14=$i;
      var $inc=((($14)+(1))|0);
      $i=$inc;
      label = 7; break;
    case 10: 
      var $15=$nlevels;

      return $15;
  }

}


function _push_onecapture($ms, $i, $s, $e) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ms_addr;
      var $i_addr;
      var $s_addr;
      var $e_addr;
      var $l;
      $ms_addr=$ms;
      $i_addr=$i;
      $s_addr=$s;
      $e_addr=$e;
      var $0=$i_addr;
      var $1=$ms_addr;
      var $level=(($1+16)|0);
      var $2=HEAP32[(($level)>>2)];
      var $cmp=(($0)|0) >= (($2)|0);
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $3=$i_addr;
      var $cmp1=(($3)|0)==0;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$ms_addr;
      var $L=(($4+12)|0);
      var $5=HEAP32[(($L)>>2)];
      var $6=$s_addr;
      var $7=$e_addr;
      var $8=$s_addr;
      var $sub_ptr_lhs_cast=$7;
      var $sub_ptr_rhs_cast=$8;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $call=_lua_pushlstring($5, $6, $sub_ptr_sub);
      label = 6; break;
    case 5: 
      var $9=$ms_addr;
      var $L3=(($9+12)|0);
      var $10=HEAP32[(($L3)>>2)];
      var $call4=_luaL_error($10, ((5251712)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 6; break;
    case 6: 
      label = 13; break;
    case 7: 
      var $11=$i_addr;
      var $12=$ms_addr;
      var $capture=(($12+20)|0);
      var $arrayidx=(($capture+($11<<3))|0);
      var $len=(($arrayidx+4)|0);
      var $13=HEAP32[(($len)>>2)];
      $l=$13;
      var $14=$l;
      var $cmp6=(($14)|0)==-1;
      if ($cmp6) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $15=$ms_addr;
      var $L8=(($15+12)|0);
      var $16=HEAP32[(($L8)>>2)];
      var $call9=_luaL_error($16, ((5251504)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 9; break;
    case 9: 
      var $17=$l;
      var $cmp11=(($17)|0)==-2;
      if ($cmp11) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $18=$ms_addr;
      var $L13=(($18+12)|0);
      var $19=HEAP32[(($L13)>>2)];
      var $20=$i_addr;
      var $21=$ms_addr;
      var $capture14=(($21+20)|0);
      var $arrayidx15=(($capture14+($20<<3))|0);
      var $init=(($arrayidx15)|0);
      var $22=HEAP32[(($init)>>2)];
      var $23=$ms_addr;
      var $src_init=(($23)|0);
      var $24=HEAP32[(($src_init)>>2)];
      var $sub_ptr_lhs_cast16=$22;
      var $sub_ptr_rhs_cast17=$24;
      var $sub_ptr_sub18=((($sub_ptr_lhs_cast16)-($sub_ptr_rhs_cast17))|0);
      var $add=((($sub_ptr_sub18)+(1))|0);
      _lua_pushinteger($19, $add);
      label = 12; break;
    case 11: 
      var $25=$ms_addr;
      var $L20=(($25+12)|0);
      var $26=HEAP32[(($L20)>>2)];
      var $27=$i_addr;
      var $28=$ms_addr;
      var $capture21=(($28+20)|0);
      var $arrayidx22=(($capture21+($27<<3))|0);
      var $init23=(($arrayidx22)|0);
      var $29=HEAP32[(($init23)>>2)];
      var $30=$l;
      var $call24=_lua_pushlstring($26, $29, $30);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      STACKTOP = __stackBase__;
      return;
  }

}
_push_onecapture["X"]=1;

function _start_capture($ms, $s, $p, $what) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ms_addr;
      var $s_addr;
      var $p_addr;
      var $what_addr;
      var $res;
      var $level;
      $ms_addr=$ms;
      $s_addr=$s;
      $p_addr=$p;
      $what_addr=$what;
      var $0=$ms_addr;
      var $level1=(($0+16)|0);
      var $1=HEAP32[(($level1)>>2)];
      $level=$1;
      var $2=$level;
      var $cmp=(($2)|0) >= 32;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$ms_addr;
      var $L=(($3+12)|0);
      var $4=HEAP32[(($L)>>2)];
      var $call=_luaL_error($4, ((5251896)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      var $5=$s_addr;
      var $6=$level;
      var $7=$ms_addr;
      var $capture=(($7+20)|0);
      var $arrayidx=(($capture+($6<<3))|0);
      var $init=(($arrayidx)|0);
      HEAP32[(($init)>>2)]=$5;
      var $8=$what_addr;
      var $9=$level;
      var $10=$ms_addr;
      var $capture2=(($10+20)|0);
      var $arrayidx3=(($capture2+($9<<3))|0);
      var $len=(($arrayidx3+4)|0);
      HEAP32[(($len)>>2)]=$8;
      var $11=$level;
      var $add=((($11)+(1))|0);
      var $12=$ms_addr;
      var $level4=(($12+16)|0);
      HEAP32[(($level4)>>2)]=$add;
      var $13=$ms_addr;
      var $14=$s_addr;
      var $15=$p_addr;
      var $call5=_match($13, $14, $15);
      $res=$call5;
      var $cmp6=(($call5)|0)==0;
      if ($cmp6) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $16=$ms_addr;
      var $level8=(($16+16)|0);
      var $17=HEAP32[(($level8)>>2)];
      var $dec=((($17)-(1))|0);
      HEAP32[(($level8)>>2)]=$dec;
      label = 6; break;
    case 6: 
      var $18=$res;
      STACKTOP = __stackBase__;
      return $18;
  }

}
_start_capture["X"]=1;

function _end_capture($ms, $s, $p) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ms_addr;
      var $s_addr;
      var $p_addr;
      var $l;
      var $res;
      $ms_addr=$ms;
      $s_addr=$s;
      $p_addr=$p;
      var $0=$ms_addr;
      var $call=_capture_to_close($0);
      $l=$call;
      var $1=$s_addr;
      var $2=$l;
      var $3=$ms_addr;
      var $capture=(($3+20)|0);
      var $arrayidx=(($capture+($2<<3))|0);
      var $init=(($arrayidx)|0);
      var $4=HEAP32[(($init)>>2)];
      var $sub_ptr_lhs_cast=$1;
      var $sub_ptr_rhs_cast=$4;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $5=$l;
      var $6=$ms_addr;
      var $capture1=(($6+20)|0);
      var $arrayidx2=(($capture1+($5<<3))|0);
      var $len=(($arrayidx2+4)|0);
      HEAP32[(($len)>>2)]=$sub_ptr_sub;
      var $7=$ms_addr;
      var $8=$s_addr;
      var $9=$p_addr;
      var $call3=_match($7, $8, $9);
      $res=$call3;
      var $cmp=(($call3)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=$l;
      var $11=$ms_addr;
      var $capture4=(($11+20)|0);
      var $arrayidx5=(($capture4+($10<<3))|0);
      var $len6=(($arrayidx5+4)|0);
      HEAP32[(($len6)>>2)]=-1;
      label = 4; break;
    case 4: 
      var $12=$res;

      return $12;
  }

}


function _matchbalance($ms, $s, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $ms_addr;
      var $s_addr;
      var $p_addr;
      var $b;
      var $e;
      var $cont;
      $ms_addr=$ms;
      $s_addr=$s;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$ms_addr;
      var $p_end=(($1+8)|0);
      var $2=HEAP32[(($p_end)>>2)];
      var $add_ptr=((($2)-(1))|0);
      var $cmp=(($0)>>>0) >= (($add_ptr)>>>0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$ms_addr;
      var $L=(($3+12)|0);
      var $4=HEAP32[(($L)>>2)];
      var $call=_luaL_error($4, ((5250460)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      var $5=$s_addr;
      var $6=HEAP8[($5)];
      var $conv=(($6 << 24) >> 24);
      var $7=$p_addr;
      var $8=HEAP8[($7)];
      var $conv1=(($8 << 24) >> 24);
      var $cmp2=(($conv)|0)!=(($conv1)|0);
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=0;
      label = 18; break;
    case 6: 
      var $9=$p_addr;
      var $10=HEAP8[($9)];
      var $conv5=(($10 << 24) >> 24);
      $b=$conv5;
      var $11=$p_addr;
      var $add_ptr6=(($11+1)|0);
      var $12=HEAP8[($add_ptr6)];
      var $conv7=(($12 << 24) >> 24);
      $e=$conv7;
      $cont=1;
      label = 7; break;
    case 7: 
      var $13=$s_addr;
      var $incdec_ptr=(($13+1)|0);
      $s_addr=$incdec_ptr;
      var $14=$ms_addr;
      var $src_end=(($14+4)|0);
      var $15=HEAP32[(($src_end)>>2)];
      var $cmp8=(($incdec_ptr)>>>0) < (($15)>>>0);
      if ($cmp8) { label = 8; break; } else { label = 16; break; }
    case 8: 
      var $16=$s_addr;
      var $17=HEAP8[($16)];
      var $conv10=(($17 << 24) >> 24);
      var $18=$e;
      var $cmp11=(($conv10)|0)==(($18)|0);
      if ($cmp11) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $19=$cont;
      var $dec=((($19)-(1))|0);
      $cont=$dec;
      var $cmp14=(($dec)|0)==0;
      if ($cmp14) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $20=$s_addr;
      var $add_ptr17=(($20+1)|0);
      $retval=$add_ptr17;
      label = 18; break;
    case 11: 
      label = 15; break;
    case 12: 
      var $21=$s_addr;
      var $22=HEAP8[($21)];
      var $conv20=(($22 << 24) >> 24);
      var $23=$b;
      var $cmp21=(($conv20)|0)==(($23)|0);
      if ($cmp21) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $24=$cont;
      var $inc=((($24)+(1))|0);
      $cont=$inc;
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 7; break;
    case 16: 
      label = 17; break;
    case 17: 
      $retval=0;
      label = 18; break;
    case 18: 
      var $25=$retval;
      STACKTOP = __stackBase__;
      return $25;
  }

}
_matchbalance["X"]=1;

function _classend($ms, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $ms_addr;
      var $p_addr;
      $ms_addr=$ms;
      $p_addr=$p;
      var $0=$p_addr;
      var $incdec_ptr=(($0+1)|0);
      $p_addr=$incdec_ptr;
      var $1=HEAP8[($0)];
      var $conv=(($1 << 24) >> 24);
      if ((($conv)|0)==37) {
        label = 3; break;
      }
      else if ((($conv)|0)==91) {
        label = 6; break;
      }
      else {
      label = 17; break;
      }
      
    case 3: 
      var $2=$p_addr;
      var $3=$ms_addr;
      var $p_end=(($3+8)|0);
      var $4=HEAP32[(($p_end)>>2)];
      var $cmp=(($2)|0)==(($4)|0);
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $5=$ms_addr;
      var $L=(($5+12)|0);
      var $6=HEAP32[(($L)>>2)];
      var $call=_luaL_error($6, ((5250896)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 5; break;
    case 5: 
      var $7=$p_addr;
      var $add_ptr=(($7+1)|0);
      $retval=$add_ptr;
      label = 18; break;
    case 6: 
      var $8=$p_addr;
      var $9=HEAP8[($8)];
      var $conv3=(($9 << 24) >> 24);
      var $cmp4=(($conv3)|0)==94;
      if ($cmp4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $10=$p_addr;
      var $incdec_ptr7=(($10+1)|0);
      $p_addr=$incdec_ptr7;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $11=$p_addr;
      var $12=$ms_addr;
      var $p_end9=(($12+8)|0);
      var $13=HEAP32[(($p_end9)>>2)];
      var $cmp10=(($11)|0)==(($13)|0);
      if ($cmp10) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $14=$ms_addr;
      var $L13=(($14+12)|0);
      var $15=HEAP32[(($L13)>>2)];
      var $call14=_luaL_error($15, ((5250648)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 11; break;
    case 11: 
      var $16=$p_addr;
      var $incdec_ptr16=(($16+1)|0);
      $p_addr=$incdec_ptr16;
      var $17=HEAP8[($16)];
      var $conv17=(($17 << 24) >> 24);
      var $cmp18=(($conv17)|0)==37;
      if ($cmp18) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $18=$p_addr;
      var $19=$ms_addr;
      var $p_end20=(($19+8)|0);
      var $20=HEAP32[(($p_end20)>>2)];
      var $cmp21=(($18)>>>0) < (($20)>>>0);
      if ($cmp21) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $21=$p_addr;
      var $incdec_ptr24=(($21+1)|0);
      $p_addr=$incdec_ptr24;
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $22=$p_addr;
      var $23=HEAP8[($22)];
      var $conv26=(($23 << 24) >> 24);
      var $cmp27=(($conv26)|0)!=93;
      if ($cmp27) { label = 9; break; } else { label = 16; break; }
    case 16: 
      var $24=$p_addr;
      var $add_ptr29=(($24+1)|0);
      $retval=$add_ptr29;
      label = 18; break;
    case 17: 
      var $25=$p_addr;
      $retval=$25;
      label = 18; break;
    case 18: 
      var $26=$retval;
      STACKTOP = __stackBase__;
      return $26;
  }

}
_classend["X"]=1;

function _matchbracketclass($c, $p, $ec) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $c_addr;
      var $p_addr;
      var $ec_addr;
      var $sig;
      $c_addr=$c;
      $p_addr=$p;
      $ec_addr=$ec;
      $sig=1;
      var $0=$p_addr;
      var $add_ptr=(($0+1)|0);
      var $1=HEAP8[($add_ptr)];
      var $conv=(($1 << 24) >> 24);
      var $cmp=(($conv)|0)==94;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $sig=0;
      var $2=$p_addr;
      var $incdec_ptr=(($2+1)|0);
      $p_addr=$incdec_ptr;
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $3=$p_addr;
      var $incdec_ptr2=(($3+1)|0);
      $p_addr=$incdec_ptr2;
      var $4=$ec_addr;
      var $cmp3=(($incdec_ptr2)>>>0) < (($4)>>>0);
      if ($cmp3) { label = 6; break; } else { label = 21; break; }
    case 6: 
      var $5=$p_addr;
      var $6=HEAP8[($5)];
      var $conv5=(($6 << 24) >> 24);
      var $cmp6=(($conv5)|0)==37;
      if ($cmp6) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $7=$p_addr;
      var $incdec_ptr9=(($7+1)|0);
      $p_addr=$incdec_ptr9;
      var $8=$c_addr;
      var $9=$p_addr;
      var $10=HEAP8[($9)];
      var $conv10=(($10)&255);
      var $call=_match_class($8, $conv10);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $11=$sig;
      $retval=$11;
      label = 22; break;
    case 9: 
      label = 20; break;
    case 10: 
      var $12=$p_addr;
      var $add_ptr13=(($12+1)|0);
      var $13=HEAP8[($add_ptr13)];
      var $conv14=(($13 << 24) >> 24);
      var $cmp15=(($conv14)|0)==45;
      if ($cmp15) { label = 11; break; } else { label = 16; break; }
    case 11: 
      var $14=$p_addr;
      var $add_ptr17=(($14+2)|0);
      var $15=$ec_addr;
      var $cmp18=(($add_ptr17)>>>0) < (($15)>>>0);
      if ($cmp18) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $16=$p_addr;
      var $add_ptr21=(($16+2)|0);
      $p_addr=$add_ptr21;
      var $17=$p_addr;
      var $add_ptr22=((($17)-(2))|0);
      var $18=HEAP8[($add_ptr22)];
      var $conv23=(($18)&255);
      var $19=$c_addr;
      var $cmp24=(($conv23)|0) <= (($19)|0);
      if ($cmp24) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $20=$c_addr;
      var $21=$p_addr;
      var $22=HEAP8[($21)];
      var $conv27=(($22)&255);
      var $cmp28=(($20)|0) <= (($conv27)|0);
      if ($cmp28) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $23=$sig;
      $retval=$23;
      label = 22; break;
    case 15: 
      label = 19; break;
    case 16: 
      var $24=$p_addr;
      var $25=HEAP8[($24)];
      var $conv33=(($25)&255);
      var $26=$c_addr;
      var $cmp34=(($conv33)|0)==(($26)|0);
      if ($cmp34) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $27=$sig;
      $retval=$27;
      label = 22; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 5; break;
    case 21: 
      var $28=$sig;
      var $tobool40=(($28)|0)!=0;
      var $lnot=$tobool40 ^ 1;
      var $lnot_ext=(($lnot)&1);
      $retval=$lnot_ext;
      label = 22; break;
    case 22: 
      var $29=$retval;

      return $29;
  }

}
_matchbracketclass["X"]=1;

function _match_capture($ms, $s, $l) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $ms_addr;
      var $s_addr;
      var $l_addr;
      var $len;
      $ms_addr=$ms;
      $s_addr=$s;
      $l_addr=$l;
      var $0=$ms_addr;
      var $1=$l_addr;
      var $call=_check_capture($0, $1);
      $l_addr=$call;
      var $2=$l_addr;
      var $3=$ms_addr;
      var $capture=(($3+20)|0);
      var $arrayidx=(($capture+($2<<3))|0);
      var $len1=(($arrayidx+4)|0);
      var $4=HEAP32[(($len1)>>2)];
      $len=$4;
      var $5=$ms_addr;
      var $src_end=(($5+4)|0);
      var $6=HEAP32[(($src_end)>>2)];
      var $7=$s_addr;
      var $sub_ptr_lhs_cast=$6;
      var $sub_ptr_rhs_cast=$7;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $8=$len;
      var $cmp=(($sub_ptr_sub)>>>0) >= (($8)>>>0);
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $9=$l_addr;
      var $10=$ms_addr;
      var $capture2=(($10+20)|0);
      var $arrayidx3=(($capture2+($9<<3))|0);
      var $init=(($arrayidx3)|0);
      var $11=HEAP32[(($init)>>2)];
      var $12=$s_addr;
      var $13=$len;
      var $call4=_memcmp($11, $12, $13);
      var $cmp5=(($call4)|0)==0;
      if ($cmp5) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $14=$s_addr;
      var $15=$len;
      var $add_ptr=(($14+$15)|0);
      $retval=$add_ptr;
      label = 6; break;
    case 5: 
      $retval=0;
      label = 6; break;
    case 6: 
      var $16=$retval;

      return $16;
  }

}


function _singlematch($c, $p, $ep) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $c_addr;
      var $p_addr;
      var $ep_addr;
      $c_addr=$c;
      $p_addr=$p;
      $ep_addr=$ep;
      var $0=$p_addr;
      var $1=HEAP8[($0)];
      var $conv=(($1 << 24) >> 24);
      if ((($conv)|0)==46) {
        label = 3; break;
      }
      else if ((($conv)|0)==37) {
        label = 4; break;
      }
      else if ((($conv)|0)==91) {
        label = 5; break;
      }
      else {
      label = 6; break;
      }
      
    case 3: 
      $retval=1;
      label = 7; break;
    case 4: 
      var $2=$c_addr;
      var $3=$p_addr;
      var $add_ptr=(($3+1)|0);
      var $4=HEAP8[($add_ptr)];
      var $conv2=(($4)&255);
      var $call=_match_class($2, $conv2);
      $retval=$call;
      label = 7; break;
    case 5: 
      var $5=$c_addr;
      var $6=$p_addr;
      var $7=$ep_addr;
      var $add_ptr4=((($7)-(1))|0);
      var $call5=_matchbracketclass($5, $6, $add_ptr4);
      $retval=$call5;
      label = 7; break;
    case 6: 
      var $8=$p_addr;
      var $9=HEAP8[($8)];
      var $conv6=(($9)&255);
      var $10=$c_addr;
      var $cmp=(($conv6)|0)==(($10)|0);
      var $conv7=(($cmp)&1);
      $retval=$conv7;
      label = 7; break;
    case 7: 
      var $11=$retval;

      return $11;
  }

}


function _max_expand($ms, $s, $p, $ep) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $ms_addr;
      var $s_addr;
      var $p_addr;
      var $ep_addr;
      var $i;
      var $res;
      $ms_addr=$ms;
      $s_addr=$s;
      $p_addr=$p;
      $ep_addr=$ep;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$s_addr;
      var $1=$i;
      var $add_ptr=(($0+$1)|0);
      var $2=$ms_addr;
      var $src_end=(($2+4)|0);
      var $3=HEAP32[(($src_end)>>2)];
      var $cmp=(($add_ptr)>>>0) < (($3)>>>0);
      if ($cmp) { label = 4; break; } else { var $9 = 0;label = 5; break; }
    case 4: 
      var $4=$s_addr;
      var $5=$i;
      var $add_ptr1=(($4+$5)|0);
      var $6=HEAP8[($add_ptr1)];
      var $conv=(($6)&255);
      var $7=$p_addr;
      var $8=$ep_addr;
      var $call=_singlematch($conv, $7, $8);
      var $tobool=(($call)|0)!=0;
      var $9 = $tobool;label = 5; break;
    case 5: 
      var $9;
      if ($9) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $10=$i;
      var $inc=((($10)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $11=$i;
      var $cmp3=(($11)|0) >= 0;
      if ($cmp3) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $12=$ms_addr;
      var $13=$s_addr;
      var $14=$i;
      var $add_ptr6=(($13+$14)|0);
      var $15=$ep_addr;
      var $add_ptr7=(($15+1)|0);
      var $call8=_match($12, $add_ptr6, $add_ptr7);
      $res=$call8;
      var $16=$res;
      var $tobool9=(($16)|0)!=0;
      if ($tobool9) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $17=$res;
      $retval=$17;
      label = 13; break;
    case 11: 
      var $18=$i;
      var $dec=((($18)-(1))|0);
      $i=$dec;
      label = 8; break;
    case 12: 
      $retval=0;
      label = 13; break;
    case 13: 
      var $19=$retval;

      return $19;
  }

}
_max_expand["X"]=1;

function _min_expand($ms, $s, $p, $ep) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $ms_addr;
      var $s_addr;
      var $p_addr;
      var $ep_addr;
      var $res;
      $ms_addr=$ms;
      $s_addr=$s;
      $p_addr=$p;
      $ep_addr=$ep;
      label = 3; break;
    case 3: 
      var $0=$ms_addr;
      var $1=$s_addr;
      var $2=$ep_addr;
      var $add_ptr=(($2+1)|0);
      var $call=_match($0, $1, $add_ptr);
      $res=$call;
      var $3=$res;
      var $cmp=(($3)|0)!=0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$res;
      $retval=$4;
      label = 11; break;
    case 5: 
      var $5=$s_addr;
      var $6=$ms_addr;
      var $src_end=(($6+4)|0);
      var $7=HEAP32[(($src_end)>>2)];
      var $cmp1=(($5)>>>0) < (($7)>>>0);
      if ($cmp1) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $8=$s_addr;
      var $9=HEAP8[($8)];
      var $conv=(($9)&255);
      var $10=$p_addr;
      var $11=$ep_addr;
      var $call2=_singlematch($conv, $10, $11);
      var $tobool=(($call2)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $12=$s_addr;
      var $incdec_ptr=(($12+1)|0);
      $s_addr=$incdec_ptr;
      label = 9; break;
    case 8: 
      $retval=0;
      label = 11; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 3; break;
    case 11: 
      var $13=$retval;

      return $13;
  }

}


function _match_class($c, $cl) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $c_addr;
      var $cl_addr;
      var $res;
      $c_addr=$c;
      $cl_addr=$cl;
      var $0=$cl_addr;
      var $call=_tolower($0);
      if ((($call)|0)==97) {
        label = 3; break;
      }
      else if ((($call)|0)==99) {
        label = 4; break;
      }
      else if ((($call)|0)==100) {
        label = 5; break;
      }
      else if ((($call)|0)==103) {
        label = 6; break;
      }
      else if ((($call)|0)==108) {
        label = 7; break;
      }
      else if ((($call)|0)==112) {
        label = 8; break;
      }
      else if ((($call)|0)==115) {
        label = 9; break;
      }
      else if ((($call)|0)==117) {
        label = 10; break;
      }
      else if ((($call)|0)==119) {
        label = 11; break;
      }
      else if ((($call)|0)==120) {
        label = 12; break;
      }
      else if ((($call)|0)==122) {
        label = 13; break;
      }
      else {
      label = 14; break;
      }
      
    case 3: 
      var $1=$c_addr;
      var $call1=_isalpha($1);
      $res=$call1;
      label = 15; break;
    case 4: 
      var $2=$c_addr;
      var $call3=_iscntrl($2);
      $res=$call3;
      label = 15; break;
    case 5: 
      var $3=$c_addr;
      var $call5=_isdigit($3);
      $res=$call5;
      label = 15; break;
    case 6: 
      var $4=$c_addr;
      var $call7=_isprint($4);
      $res=$call7;
      label = 15; break;
    case 7: 
      var $5=$c_addr;
      var $call9=_islower($5);
      $res=$call9;
      label = 15; break;
    case 8: 
      var $6=$c_addr;
      var $call11=_ispunct($6);
      $res=$call11;
      label = 15; break;
    case 9: 
      var $7=$c_addr;
      var $call13=_isspace($7);
      $res=$call13;
      label = 15; break;
    case 10: 
      var $8=$c_addr;
      var $call15=_isupper($8);
      $res=$call15;
      label = 15; break;
    case 11: 
      var $9=$c_addr;
      var $call17=_isalnum($9);
      $res=$call17;
      label = 15; break;
    case 12: 
      var $10=$c_addr;
      var $call19=_isxdigit($10);
      $res=$call19;
      label = 15; break;
    case 13: 
      var $11=$c_addr;
      var $cmp=(($11)|0)==0;
      var $conv=(($cmp)&1);
      $res=$conv;
      label = 15; break;
    case 14: 
      var $12=$cl_addr;
      var $13=$c_addr;
      var $cmp21=(($12)|0)==(($13)|0);
      var $conv22=(($cmp21)&1);
      $retval=$conv22;
      label = 19; break;
    case 15: 
      var $14=$cl_addr;
      var $call23=_islower($14);
      var $tobool=(($call23)|0)!=0;
      if ($tobool) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $15=$res;
      var $cond = $15;label = 18; break;
    case 17: 
      var $16=$res;
      var $tobool24=(($16)|0)!=0;
      var $lnot=$tobool24 ^ 1;
      var $lnot_ext=(($lnot)&1);
      var $cond = $lnot_ext;label = 18; break;
    case 18: 
      var $cond;
      $retval=$cond;
      label = 19; break;
    case 19: 
      var $17=$retval;

      return $17;
  }

}
_match_class["X"]=1;

function _check_capture($ms, $l) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $ms_addr;
      var $l_addr;
      $ms_addr=$ms;
      $l_addr=$l;
      var $0=$l_addr;
      var $sub=((($0)-(49))|0);
      $l_addr=$sub;
      var $1=$l_addr;
      var $cmp=(($1)|0) < 0;
      if ($cmp) { label = 5; break; } else { label = 3; break; }
    case 3: 
      var $2=$l_addr;
      var $3=$ms_addr;
      var $level=(($3+16)|0);
      var $4=HEAP32[(($level)>>2)];
      var $cmp1=(($2)|0) >= (($4)|0);
      if ($cmp1) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $5=$l_addr;
      var $6=$ms_addr;
      var $capture=(($6+20)|0);
      var $arrayidx=(($capture+($5<<3))|0);
      var $len=(($arrayidx+4)|0);
      var $7=HEAP32[(($len)>>2)];
      var $cmp3=(($7)|0)==-1;
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=$ms_addr;
      var $L=(($8+12)|0);
      var $9=HEAP32[(($L)>>2)];
      var $10=$l_addr;
      var $add=((($10)+(1))|0);
      var $call=_luaL_error($9, ((5251108)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$add,tempInt));
      $retval=$call;
      label = 7; break;
    case 6: 
      var $11=$l_addr;
      $retval=$11;
      label = 7; break;
    case 7: 
      var $12=$retval;
      STACKTOP = __stackBase__;
      return $12;
  }

}


function _capture_to_close($ms) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $ms_addr;
      var $level;
      $ms_addr=$ms;
      var $0=$ms_addr;
      var $level1=(($0+16)|0);
      var $1=HEAP32[(($level1)>>2)];
      $level=$1;
      var $2=$level;
      var $dec=((($2)-(1))|0);
      $level=$dec;
      label = 3; break;
    case 3: 
      var $3=$level;
      var $cmp=(($3)|0) >= 0;
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $4=$level;
      var $5=$ms_addr;
      var $capture=(($5+20)|0);
      var $arrayidx=(($capture+($4<<3))|0);
      var $len=(($arrayidx+4)|0);
      var $6=HEAP32[(($len)>>2)];
      var $cmp2=(($6)|0)==-1;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$level;
      $retval=$7;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $8=$level;
      var $dec3=((($8)-(1))|0);
      $level=$dec3;
      label = 3; break;
    case 8: 
      var $9=$ms_addr;
      var $L=(($9+12)|0);
      var $10=HEAP32[(($L)>>2)];
      var $call=_luaL_error($10, ((5250308)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      $retval=$call;
      label = 9; break;
    case 9: 
      var $11=$retval;
      STACKTOP = __stackBase__;
      return $11;
  }

}


function _add_value($ms, $b, $s, $e, $tr) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ms_addr;
      var $b_addr;
      var $s_addr;
      var $e_addr;
      var $tr_addr;
      var $L;
      var $n;
      $ms_addr=$ms;
      $b_addr=$b;
      $s_addr=$s;
      $e_addr=$e;
      $tr_addr=$tr;
      var $0=$ms_addr;
      var $L1=(($0+12)|0);
      var $1=HEAP32[(($L1)>>2)];
      $L=$1;
      var $2=$tr_addr;
      if ((($2)|0)==6) {
        label = 3; break;
      }
      else if ((($2)|0)==5) {
        label = 4; break;
      }
      else {
      label = 5; break;
      }
      
    case 3: 
      var $3=$L;
      _lua_pushvalue($3, 3);
      var $4=$ms_addr;
      var $5=$s_addr;
      var $6=$e_addr;
      var $call=_push_captures($4, $5, $6);
      $n=$call;
      var $7=$L;
      var $8=$n;
      _lua_callk($7, $8, 1, 0, 0);
      label = 6; break;
    case 4: 
      var $9=$ms_addr;
      var $10=$s_addr;
      var $11=$e_addr;
      _push_onecapture($9, 0, $10, $11);
      var $12=$L;
      _lua_gettable($12, 3);
      label = 6; break;
    case 5: 
      var $13=$ms_addr;
      var $14=$b_addr;
      var $15=$s_addr;
      var $16=$e_addr;
      _add_s($13, $14, $15, $16);
      label = 12; break;
    case 6: 
      var $17=$L;
      var $call3=_lua_toboolean($17, -1);
      var $tobool=(($call3)|0)!=0;
      if ($tobool) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $18=$L;
      _lua_settop($18, -2);
      var $19=$L;
      var $20=$s_addr;
      var $21=$e_addr;
      var $22=$s_addr;
      var $sub_ptr_lhs_cast=$21;
      var $sub_ptr_rhs_cast=$22;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $call4=_lua_pushlstring($19, $20, $sub_ptr_sub);
      label = 11; break;
    case 8: 
      var $23=$L;
      var $call5=_lua_isstring($23, -1);
      var $tobool6=(($call5)|0)!=0;
      if ($tobool6) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $24=$L;
      var $25=$L;
      var $26=$L;
      var $call8=_lua_type($26, -1);
      var $call9=_lua_typename($25, $call8);
      var $call10=_luaL_error($24, ((5249744)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$call9,tempInt));
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $27=$b_addr;
      _luaL_addvalue($27);
      label = 12; break;
    case 12: 
      STACKTOP = __stackBase__;
      return;
  }

}
_add_value["X"]=1;

function _add_s($ms, $b, $s, $e) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; _memset(__stackBase__, 0, 4);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ms_addr;
      var $b_addr;
      var $s_addr;
      var $e_addr;
      var $l=__stackBase__;
      var $i;
      var $news;
      $ms_addr=$ms;
      $b_addr=$b;
      $s_addr=$s;
      $e_addr=$e;
      var $0=$ms_addr;
      var $L=(($0+12)|0);
      var $1=HEAP32[(($L)>>2)];
      var $call=_lua_tolstring($1, 3, $l);
      $news=$call;
      $i=0;
      label = 3; break;
    case 3: 
      var $2=$i;
      var $3=HEAP32[(($l)>>2)];
      var $cmp=(($2)>>>0) < (($3)>>>0);
      if ($cmp) { label = 4; break; } else { label = 21; break; }
    case 4: 
      var $4=$i;
      var $5=$news;
      var $arrayidx=(($5+$4)|0);
      var $6=HEAP8[($arrayidx)];
      var $conv=(($6 << 24) >> 24);
      var $cmp1=(($conv)|0)!=37;
      if ($cmp1) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $7=$b_addr;
      var $n=(($7+8)|0);
      var $8=HEAP32[(($n)>>2)];
      var $9=$b_addr;
      var $size=(($9+4)|0);
      var $10=HEAP32[(($size)>>2)];
      var $cmp3=(($8)>>>0) < (($10)>>>0);
      if ($cmp3) { var $12 = 1;label = 7; break; } else { label = 6; break; }
    case 6: 
      var $11=$b_addr;
      var $call5=_luaL_prepbuffsize($11, 1);
      var $tobool=(($call5)|0)!=0;
      var $12 = $tobool;label = 7; break;
    case 7: 
      var $12;
      var $lor_ext=(($12)&1);
      var $13=$i;
      var $14=$news;
      var $arrayidx6=(($14+$13)|0);
      var $15=HEAP8[($arrayidx6)];
      var $16=$b_addr;
      var $n7=(($16+8)|0);
      var $17=HEAP32[(($n7)>>2)];
      var $inc=((($17)+(1))|0);
      HEAP32[(($n7)>>2)]=$inc;
      var $18=$b_addr;
      var $b8=(($18)|0);
      var $19=HEAP32[(($b8)>>2)];
      var $arrayidx9=(($19+$17)|0);
      HEAP8[($arrayidx9)]=$15;
      label = 19; break;
    case 8: 
      var $20=$i;
      var $inc10=((($20)+(1))|0);
      $i=$inc10;
      var $21=$i;
      var $22=$news;
      var $arrayidx11=(($22+$21)|0);
      var $23=HEAP8[($arrayidx11)];
      var $conv12=(($23)&255);
      var $call13=_isdigit($conv12);
      var $tobool14=(($call13)|0)!=0;
      if ($tobool14) { label = 14; break; } else { label = 9; break; }
    case 9: 
      var $24=$i;
      var $25=$news;
      var $arrayidx16=(($25+$24)|0);
      var $26=HEAP8[($arrayidx16)];
      var $conv17=(($26 << 24) >> 24);
      var $cmp18=(($conv17)|0)!=37;
      if ($cmp18) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $27=$ms_addr;
      var $L21=(($27+12)|0);
      var $28=HEAP32[(($L21)>>2)];
      var $call22=_luaL_error($28, ((5249560)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=37,tempInt));
      label = 11; break;
    case 11: 
      var $29=$b_addr;
      var $n23=(($29+8)|0);
      var $30=HEAP32[(($n23)>>2)];
      var $31=$b_addr;
      var $size24=(($31+4)|0);
      var $32=HEAP32[(($size24)>>2)];
      var $cmp25=(($30)>>>0) < (($32)>>>0);
      if ($cmp25) { var $34 = 1;label = 13; break; } else { label = 12; break; }
    case 12: 
      var $33=$b_addr;
      var $call28=_luaL_prepbuffsize($33, 1);
      var $tobool29=(($call28)|0)!=0;
      var $34 = $tobool29;label = 13; break;
    case 13: 
      var $34;
      var $lor_ext31=(($34)&1);
      var $35=$i;
      var $36=$news;
      var $arrayidx32=(($36+$35)|0);
      var $37=HEAP8[($arrayidx32)];
      var $38=$b_addr;
      var $n33=(($38+8)|0);
      var $39=HEAP32[(($n33)>>2)];
      var $inc34=((($39)+(1))|0);
      HEAP32[(($n33)>>2)]=$inc34;
      var $40=$b_addr;
      var $b35=(($40)|0);
      var $41=HEAP32[(($b35)>>2)];
      var $arrayidx36=(($41+$39)|0);
      HEAP8[($arrayidx36)]=$37;
      label = 18; break;
    case 14: 
      var $42=$i;
      var $43=$news;
      var $arrayidx38=(($43+$42)|0);
      var $44=HEAP8[($arrayidx38)];
      var $conv39=(($44 << 24) >> 24);
      var $cmp40=(($conv39)|0)==48;
      if ($cmp40) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $45=$b_addr;
      var $46=$s_addr;
      var $47=$e_addr;
      var $48=$s_addr;
      var $sub_ptr_lhs_cast=$47;
      var $sub_ptr_rhs_cast=$48;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      _luaL_addlstring($45, $46, $sub_ptr_sub);
      label = 17; break;
    case 16: 
      var $49=$ms_addr;
      var $50=$i;
      var $51=$news;
      var $arrayidx44=(($51+$50)|0);
      var $52=HEAP8[($arrayidx44)];
      var $conv45=(($52 << 24) >> 24);
      var $sub=((($conv45)-(49))|0);
      var $53=$s_addr;
      var $54=$e_addr;
      _push_onecapture($49, $sub, $53, $54);
      var $55=$b_addr;
      _luaL_addvalue($55);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $56=$i;
      var $inc49=((($56)+(1))|0);
      $i=$inc49;
      label = 3; break;
    case 21: 
      STACKTOP = __stackBase__;
      return;
  }

}
_add_s["X"]=1;

function _gmatch_aux($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 284)|0; _memset(__stackBase__, 0, 284);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $ms=__stackBase__;
      var $ls=(__stackBase__)+(276);
      var $lp=(__stackBase__)+(280);
      var $s;
      var $p;
      var $src;
      var $e;
      var $newstart;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_lua_tolstring($0, -1001001, $ls);
      $s=$call;
      var $1=$L_addr;
      var $call1=_lua_tolstring($1, -1001002, $lp);
      $p=$call1;
      var $2=$L_addr;
      var $L2=(($ms+12)|0);
      HEAP32[(($L2)>>2)]=$2;
      var $3=$s;
      var $src_init=(($ms)|0);
      HEAP32[(($src_init)>>2)]=$3;
      var $4=$s;
      var $5=HEAP32[(($ls)>>2)];
      var $add_ptr=(($4+$5)|0);
      var $src_end=(($ms+4)|0);
      HEAP32[(($src_end)>>2)]=$add_ptr;
      var $6=$p;
      var $7=HEAP32[(($lp)>>2)];
      var $add_ptr3=(($6+$7)|0);
      var $p_end=(($ms+8)|0);
      HEAP32[(($p_end)>>2)]=$add_ptr3;
      var $8=$s;
      var $9=$L_addr;
      var $call4=_lua_tointegerx($9, -1001003, 0);
      var $add_ptr5=(($8+$call4)|0);
      $src=$add_ptr5;
      label = 3; break;
    case 3: 
      var $10=$src;
      var $src_end6=(($ms+4)|0);
      var $11=HEAP32[(($src_end6)>>2)];
      var $cmp=(($10)>>>0) <= (($11)>>>0);
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $level=(($ms+16)|0);
      HEAP32[(($level)>>2)]=0;
      var $12=$src;
      var $13=$p;
      var $call7=_match($ms, $12, $13);
      $e=$call7;
      var $cmp8=(($call7)|0)!=0;
      if ($cmp8) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $14=$e;
      var $15=$s;
      var $sub_ptr_lhs_cast=$14;
      var $sub_ptr_rhs_cast=$15;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $newstart=$sub_ptr_sub;
      var $16=$e;
      var $17=$src;
      var $cmp9=(($16)|0)==(($17)|0);
      if ($cmp9) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $18=$newstart;
      var $inc=((($18)+(1))|0);
      $newstart=$inc;
      label = 7; break;
    case 7: 
      var $19=$L_addr;
      var $20=$newstart;
      _lua_pushinteger($19, $20);
      var $21=$L_addr;
      _lua_replace($21, -1001003);
      var $22=$src;
      var $23=$e;
      var $call11=_push_captures($ms, $22, $23);
      $retval=$call11;
      label = 11; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $24=$src;
      var $incdec_ptr=(($24+1)|0);
      $src=$incdec_ptr;
      label = 3; break;
    case 10: 
      $retval=0;
      label = 11; break;
    case 11: 
      var $25=$retval;
      STACKTOP = __stackBase__;
      return $25;
  }

}
_gmatch_aux["X"]=1;

function _scanformat($L, $strfrmt, $form) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $strfrmt_addr;
      var $form_addr;
      var $p;
      $L_addr=$L;
      $strfrmt_addr=$strfrmt;
      $form_addr=$form;
      var $0=$strfrmt_addr;
      $p=$0;
      label = 3; break;
    case 3: 
      var $1=$p;
      var $2=HEAP8[($1)];
      var $conv=(($2 << 24) >> 24);
      var $cmp=(($conv)|0)!=0;
      if ($cmp) { label = 4; break; } else { var $5 = 0;label = 5; break; }
    case 4: 
      var $3=$p;
      var $4=HEAP8[($3)];
      var $conv2=(($4 << 24) >> 24);
      var $call=_strchr(((5248500)|0), $conv2);
      var $cmp3=(($call)|0)!=0;
      var $5 = $cmp3;label = 5; break;
    case 5: 
      var $5;
      if ($5) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $6=$p;
      var $incdec_ptr=(($6+1)|0);
      $p=$incdec_ptr;
      label = 3; break;
    case 7: 
      var $7=$p;
      var $8=$strfrmt_addr;
      var $sub_ptr_lhs_cast=$7;
      var $sub_ptr_rhs_cast=$8;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $cmp5=(($sub_ptr_sub)>>>0) >= 6;
      if ($cmp5) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $9=$L_addr;
      var $call7=_luaL_error($9, ((5248364)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 9; break;
    case 9: 
      var $10=$p;
      var $11=HEAP8[($10)];
      var $conv8=(($11)&255);
      var $call9=_isdigit($conv8);
      var $tobool=(($call9)|0)!=0;
      if ($tobool) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $12=$p;
      var $incdec_ptr11=(($12+1)|0);
      $p=$incdec_ptr11;
      label = 11; break;
    case 11: 
      var $13=$p;
      var $14=HEAP8[($13)];
      var $conv13=(($14)&255);
      var $call14=_isdigit($conv13);
      var $tobool15=(($call14)|0)!=0;
      if ($tobool15) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $15=$p;
      var $incdec_ptr17=(($15+1)|0);
      $p=$incdec_ptr17;
      label = 13; break;
    case 13: 
      var $16=$p;
      var $17=HEAP8[($16)];
      var $conv19=(($17 << 24) >> 24);
      var $cmp20=(($conv19)|0)==46;
      if ($cmp20) { label = 14; break; } else { label = 19; break; }
    case 14: 
      var $18=$p;
      var $incdec_ptr23=(($18+1)|0);
      $p=$incdec_ptr23;
      var $19=$p;
      var $20=HEAP8[($19)];
      var $conv24=(($20)&255);
      var $call25=_isdigit($conv24);
      var $tobool26=(($call25)|0)!=0;
      if ($tobool26) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $21=$p;
      var $incdec_ptr28=(($21+1)|0);
      $p=$incdec_ptr28;
      label = 16; break;
    case 16: 
      var $22=$p;
      var $23=HEAP8[($22)];
      var $conv30=(($23)&255);
      var $call31=_isdigit($conv30);
      var $tobool32=(($call31)|0)!=0;
      if ($tobool32) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $24=$p;
      var $incdec_ptr34=(($24+1)|0);
      $p=$incdec_ptr34;
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $25=$p;
      var $26=HEAP8[($25)];
      var $conv37=(($26)&255);
      var $call38=_isdigit($conv37);
      var $tobool39=(($call38)|0)!=0;
      if ($tobool39) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $27=$L_addr;
      var $call41=_luaL_error($27, ((5248252)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 21; break;
    case 21: 
      var $28=$form_addr;
      var $incdec_ptr43=(($28+1)|0);
      $form_addr=$incdec_ptr43;
      HEAP8[($28)]=37;
      var $29=$form_addr;
      var $30=$strfrmt_addr;
      var $31=$p;
      var $32=$strfrmt_addr;
      var $sub_ptr_lhs_cast44=$31;
      var $sub_ptr_rhs_cast45=$32;
      var $sub_ptr_sub46=((($sub_ptr_lhs_cast44)-($sub_ptr_rhs_cast45))|0);
      var $add=((($sub_ptr_sub46)+(1))|0);
      var $mul=$add;
      _memcpy($29, $30, $mul);
      var $33=$p;
      var $34=$strfrmt_addr;
      var $sub_ptr_lhs_cast47=$33;
      var $sub_ptr_rhs_cast48=$34;
      var $sub_ptr_sub49=((($sub_ptr_lhs_cast47)-($sub_ptr_rhs_cast48))|0);
      var $add50=((($sub_ptr_sub49)+(1))|0);
      var $35=$form_addr;
      var $add_ptr=(($35+$add50)|0);
      $form_addr=$add_ptr;
      var $36=$form_addr;
      HEAP8[($36)]=0;
      var $37=$p;
      STACKTOP = __stackBase__;
      return $37;
  }

}
_scanformat["X"]=1;

function _addlenmod($form, $lenmod) {
  var label = 0;


  var $form_addr;
  var $lenmod_addr;
  var $l;
  var $lm;
  var $spec;
  $form_addr=$form;
  $lenmod_addr=$lenmod;
  var $0=$form_addr;
  var $call=_strlen($0);
  $l=$call;
  var $1=$lenmod_addr;
  var $call1=_strlen($1);
  $lm=$call1;
  var $2=$l;
  var $sub=((($2)-(1))|0);
  var $3=$form_addr;
  var $arrayidx=(($3+$sub)|0);
  var $4=HEAP8[($arrayidx)];
  $spec=$4;
  var $5=$form_addr;
  var $6=$l;
  var $add_ptr=(($5+$6)|0);
  var $add_ptr2=((($add_ptr)-(1))|0);
  var $7=$lenmod_addr;
  var $call3=_strcpy($add_ptr2, $7);
  var $8=$spec;
  var $9=$l;
  var $10=$lm;
  var $add=((($9)+($10))|0);
  var $sub4=((($add)-(1))|0);
  var $11=$form_addr;
  var $arrayidx5=(($11+$sub4)|0);
  HEAP8[($arrayidx5)]=$8;
  var $12=$l;
  var $13=$lm;
  var $add6=((($12)+($13))|0);
  var $14=$form_addr;
  var $arrayidx7=(($14+$add6)|0);
  HEAP8[($arrayidx7)]=0;

  return;
}


function _addquoted($L, $b, $arg) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; _memset(__stackBase__, 0, 16);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $b_addr;
      var $arg_addr;
      var $l=__stackBase__;
      var $s;
      var $buff=(__stackBase__)+(4);
      $L_addr=$L;
      $b_addr=$b;
      $arg_addr=$arg;
      var $0=$L_addr;
      var $1=$arg_addr;
      var $call=_luaL_checklstring($0, $1, $l);
      $s=$call;
      var $2=$b_addr;
      var $n=(($2+8)|0);
      var $3=HEAP32[(($n)>>2)];
      var $4=$b_addr;
      var $size=(($4+4)|0);
      var $5=HEAP32[(($size)>>2)];
      var $cmp=(($3)>>>0) < (($5)>>>0);
      if ($cmp) { var $7 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $6=$b_addr;
      var $call1=_luaL_prepbuffsize($6, 1);
      var $tobool=(($call1)|0)!=0;
      var $7 = $tobool;label = 4; break;
    case 4: 
      var $7;
      var $lor_ext=(($7)&1);
      var $8=$b_addr;
      var $n2=(($8+8)|0);
      var $9=HEAP32[(($n2)>>2)];
      var $inc=((($9)+(1))|0);
      HEAP32[(($n2)>>2)]=$inc;
      var $10=$b_addr;
      var $b3=(($10)|0);
      var $11=HEAP32[(($b3)>>2)];
      var $arrayidx=(($11+$9)|0);
      HEAP8[($arrayidx)]=34;
      label = 5; break;
    case 5: 
      var $12=HEAP32[(($l)>>2)];
      var $dec=((($12)-(1))|0);
      HEAP32[(($l)>>2)]=$dec;
      var $tobool4=(($12)|0)!=0;
      if ($tobool4) { label = 6; break; } else { label = 25; break; }
    case 6: 
      var $13=$s;
      var $14=HEAP8[($13)];
      var $conv=(($14 << 24) >> 24);
      var $cmp5=(($conv)|0)==34;
      if ($cmp5) { label = 9; break; } else { label = 7; break; }
    case 7: 
      var $15=$s;
      var $16=HEAP8[($15)];
      var $conv7=(($16 << 24) >> 24);
      var $cmp8=(($conv7)|0)==92;
      if ($cmp8) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $17=$s;
      var $18=HEAP8[($17)];
      var $conv11=(($18 << 24) >> 24);
      var $cmp12=(($conv11)|0)==10;
      if ($cmp12) { label = 9; break; } else { label = 14; break; }
    case 9: 
      var $19=$b_addr;
      var $n14=(($19+8)|0);
      var $20=HEAP32[(($n14)>>2)];
      var $21=$b_addr;
      var $size15=(($21+4)|0);
      var $22=HEAP32[(($size15)>>2)];
      var $cmp16=(($20)>>>0) < (($22)>>>0);
      if ($cmp16) { var $24 = 1;label = 11; break; } else { label = 10; break; }
    case 10: 
      var $23=$b_addr;
      var $call19=_luaL_prepbuffsize($23, 1);
      var $tobool20=(($call19)|0)!=0;
      var $24 = $tobool20;label = 11; break;
    case 11: 
      var $24;
      var $lor_ext22=(($24)&1);
      var $25=$b_addr;
      var $n23=(($25+8)|0);
      var $26=HEAP32[(($n23)>>2)];
      var $inc24=((($26)+(1))|0);
      HEAP32[(($n23)>>2)]=$inc24;
      var $27=$b_addr;
      var $b25=(($27)|0);
      var $28=HEAP32[(($b25)>>2)];
      var $arrayidx26=(($28+$26)|0);
      HEAP8[($arrayidx26)]=92;
      var $29=$b_addr;
      var $n27=(($29+8)|0);
      var $30=HEAP32[(($n27)>>2)];
      var $31=$b_addr;
      var $size28=(($31+4)|0);
      var $32=HEAP32[(($size28)>>2)];
      var $cmp29=(($30)>>>0) < (($32)>>>0);
      if ($cmp29) { var $34 = 1;label = 13; break; } else { label = 12; break; }
    case 12: 
      var $33=$b_addr;
      var $call32=_luaL_prepbuffsize($33, 1);
      var $tobool33=(($call32)|0)!=0;
      var $34 = $tobool33;label = 13; break;
    case 13: 
      var $34;
      var $lor_ext35=(($34)&1);
      var $35=$s;
      var $36=HEAP8[($35)];
      var $37=$b_addr;
      var $n36=(($37+8)|0);
      var $38=HEAP32[(($n36)>>2)];
      var $inc37=((($38)+(1))|0);
      HEAP32[(($n36)>>2)]=$inc37;
      var $39=$b_addr;
      var $b38=(($39)|0);
      var $40=HEAP32[(($b38)>>2)];
      var $arrayidx39=(($40+$38)|0);
      HEAP8[($arrayidx39)]=$36;
      label = 24; break;
    case 14: 
      var $41=$s;
      var $42=HEAP8[($41)];
      var $conv40=(($42 << 24) >> 24);
      var $cmp41=(($conv40)|0)==0;
      if ($cmp41) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $43=$s;
      var $44=HEAP8[($43)];
      var $conv44=(($44)&255);
      var $call45=_iscntrl($conv44);
      var $tobool46=(($call45)|0)!=0;
      if ($tobool46) { label = 16; break; } else { label = 20; break; }
    case 16: 
      var $45=$s;
      var $add_ptr=(($45+1)|0);
      var $46=HEAP8[($add_ptr)];
      var $conv48=(($46)&255);
      var $call49=_isdigit($conv48);
      var $tobool50=(($call49)|0)!=0;
      if ($tobool50) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $arraydecay=(($buff)|0);
      var $47=$s;
      var $48=HEAP8[($47)];
      var $conv52=(($48)&255);
      var $call53=_sprintf($arraydecay, ((5248656)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$conv52,tempInt));
      label = 19; break;
    case 18: 
      var $arraydecay55=(($buff)|0);
      var $49=$s;
      var $50=HEAP8[($49)];
      var $conv56=(($50)&255);
      var $call57=_sprintf($arraydecay55, ((5248584)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$conv56,tempInt));
      label = 19; break;
    case 19: 
      var $51=$b_addr;
      var $arraydecay58=(($buff)|0);
      _luaL_addstring($51, $arraydecay58);
      label = 23; break;
    case 20: 
      var $52=$b_addr;
      var $n60=(($52+8)|0);
      var $53=HEAP32[(($n60)>>2)];
      var $54=$b_addr;
      var $size61=(($54+4)|0);
      var $55=HEAP32[(($size61)>>2)];
      var $cmp62=(($53)>>>0) < (($55)>>>0);
      if ($cmp62) { var $57 = 1;label = 22; break; } else { label = 21; break; }
    case 21: 
      var $56=$b_addr;
      var $call65=_luaL_prepbuffsize($56, 1);
      var $tobool66=(($call65)|0)!=0;
      var $57 = $tobool66;label = 22; break;
    case 22: 
      var $57;
      var $lor_ext68=(($57)&1);
      var $58=$s;
      var $59=HEAP8[($58)];
      var $60=$b_addr;
      var $n69=(($60+8)|0);
      var $61=HEAP32[(($n69)>>2)];
      var $inc70=((($61)+(1))|0);
      HEAP32[(($n69)>>2)]=$inc70;
      var $62=$b_addr;
      var $b71=(($62)|0);
      var $63=HEAP32[(($b71)>>2)];
      var $arrayidx72=(($63+$61)|0);
      HEAP8[($arrayidx72)]=$59;
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $64=$s;
      var $incdec_ptr=(($64+1)|0);
      $s=$incdec_ptr;
      label = 5; break;
    case 25: 
      var $65=$b_addr;
      var $n75=(($65+8)|0);
      var $66=HEAP32[(($n75)>>2)];
      var $67=$b_addr;
      var $size76=(($67+4)|0);
      var $68=HEAP32[(($size76)>>2)];
      var $cmp77=(($66)>>>0) < (($68)>>>0);
      if ($cmp77) { var $70 = 1;label = 27; break; } else { label = 26; break; }
    case 26: 
      var $69=$b_addr;
      var $call80=_luaL_prepbuffsize($69, 1);
      var $tobool81=(($call80)|0)!=0;
      var $70 = $tobool81;label = 27; break;
    case 27: 
      var $70;
      var $lor_ext83=(($70)&1);
      var $71=$b_addr;
      var $n84=(($71+8)|0);
      var $72=HEAP32[(($n84)>>2)];
      var $inc85=((($72)+(1))|0);
      HEAP32[(($n84)>>2)]=$inc85;
      var $73=$b_addr;
      var $b86=(($73)|0);
      var $74=HEAP32[(($b86)>>2)];
      var $arrayidx87=(($74+$72)|0);
      HEAP8[($arrayidx87)]=34;
      STACKTOP = __stackBase__;
      return;
  }

}
_addquoted["X"]=1;

function _writer($L, $b, $size, $B) {
  var label = 0;


  var $L_addr;
  var $b_addr;
  var $size_addr;
  var $B_addr;
  $L_addr=$L;
  $b_addr=$b;
  $size_addr=$size;
  $B_addr=$B;
  var $0=$L_addr;
  var $1=$B_addr;
  var $2=$1;
  var $3=$b_addr;
  var $4=$size_addr;
  _luaL_addlstring($2, $3, $4);

  return 0;
}


function _luaopen_table($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  _lua_createtable($0, 0, 6);
  var $1=$L_addr;
  _luaL_setfuncs($1, ((5242892)|0), 0);

  return 1;
}


function _tconcat($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1044)|0; _memset(__stackBase__, 0, 1044);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $b=__stackBase__;
      var $lsep=(__stackBase__)+(1040);
      var $i;
      var $last;
      var $sep;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_luaL_optlstring($0, 2, ((5246348)|0), $lsep);
      $sep=$call;
      var $1=$L_addr;
      _luaL_checktype($1, 1, 5);
      var $2=$L_addr;
      var $call1=_luaL_optinteger($2, 3, 1);
      $i=$call1;
      var $3=$L_addr;
      var $call2=_lua_type($3, 4);
      var $cmp=(($call2)|0) <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$L_addr;
      var $call3=_luaL_len($4, 1);
      var $cond = $call3;label = 5; break;
    case 4: 
      var $5=$L_addr;
      var $call4=_luaL_checkinteger($5, 4);
      var $cond = $call4;label = 5; break;
    case 5: 
      var $cond;
      $last=$cond;
      var $6=$L_addr;
      _luaL_buffinit($6, $b);
      label = 6; break;
    case 6: 
      var $7=$i;
      var $8=$last;
      var $cmp5=(($7)|0) < (($8)|0);
      if ($cmp5) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $9=$L_addr;
      var $10=$i;
      _addfield($9, $b, $10);
      var $11=$sep;
      var $12=HEAP32[(($lsep)>>2)];
      _luaL_addlstring($b, $11, $12);
      label = 8; break;
    case 8: 
      var $13=$i;
      var $inc=((($13)+(1))|0);
      $i=$inc;
      label = 6; break;
    case 9: 
      var $14=$i;
      var $15=$last;
      var $cmp6=(($14)|0)==(($15)|0);
      if ($cmp6) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $16=$L_addr;
      var $17=$i;
      _addfield($16, $b, $17);
      label = 11; break;
    case 11: 
      _luaL_pushresult($b);
      STACKTOP = __stackBase__;
      return 1;
  }

}
_tconcat["X"]=1;

function _tinsert($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $e;
      var $pos;
      var $i;
      $L_addr=$L;
      var $0=$L_addr;
      _luaL_checktype($0, 1, 5);
      var $1=$L_addr;
      var $call=_luaL_len($1, 1);
      var $add=((($call)+(1))|0);
      $e=$add;
      var $2=$L_addr;
      var $call1=_lua_gettop($2);
      if ((($call1)|0)==2) {
        label = 3; break;
      }
      else if ((($call1)|0)==3) {
        label = 4; break;
      }
      else {
      label = 11; break;
      }
      
    case 3: 
      var $3=$e;
      $pos=$3;
      label = 12; break;
    case 4: 
      var $4=$L_addr;
      var $call3=_luaL_checkinteger($4, 2);
      $pos=$call3;
      var $5=$pos;
      var $6=$e;
      var $cmp=(($5)|0) > (($6)|0);
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$pos;
      $e=$7;
      label = 6; break;
    case 6: 
      var $8=$e;
      $i=$8;
      label = 7; break;
    case 7: 
      var $9=$i;
      var $10=$pos;
      var $cmp4=(($9)|0) > (($10)|0);
      if ($cmp4) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $11=$L_addr;
      var $12=$i;
      var $sub=((($12)-(1))|0);
      _lua_rawgeti($11, 1, $sub);
      var $13=$L_addr;
      var $14=$i;
      _lua_rawseti($13, 1, $14);
      label = 9; break;
    case 9: 
      var $15=$i;
      var $dec=((($15)-(1))|0);
      $i=$dec;
      label = 7; break;
    case 10: 
      label = 12; break;
    case 11: 
      var $16=$L_addr;
      var $call5=_luaL_error($16, ((5253556)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      $retval=$call5;
      label = 13; break;
    case 12: 
      var $17=$L_addr;
      var $18=$pos;
      _lua_rawseti($17, 1, $18);
      $retval=0;
      label = 13; break;
    case 13: 
      var $19=$retval;
      STACKTOP = __stackBase__;
      return $19;
  }

}
_tinsert["X"]=1;

function _pack($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $n;
      var $i;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_lua_gettop($0);
      $n=$call;
      var $1=$L_addr;
      var $2=$n;
      _lua_createtable($1, $2, 1);
      var $3=$L_addr;
      var $4=$n;
      _lua_pushinteger($3, $4);
      var $5=$L_addr;
      _lua_setfield($5, -2, ((5245392)|0));
      var $6=$n;
      var $cmp=(($6)|0) > 0;
      if ($cmp) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $7=$L_addr;
      _lua_pushvalue($7, 1);
      var $8=$L_addr;
      _lua_rawseti($8, -2, 1);
      var $9=$L_addr;
      _lua_replace($9, 1);
      var $10=$n;
      $i=$10;
      label = 4; break;
    case 4: 
      var $11=$i;
      var $cmp1=(($11)|0) >= 2;
      if ($cmp1) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $12=$L_addr;
      var $13=$i;
      _lua_rawseti($12, 1, $13);
      label = 6; break;
    case 6: 
      var $14=$i;
      var $dec=((($14)-(1))|0);
      $i=$dec;
      label = 4; break;
    case 7: 
      label = 8; break;
    case 8: 

      return 1;
  }

}


function _unpack($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $i;
      var $e;
      var $n;
      $L_addr=$L;
      var $0=$L_addr;
      _luaL_checktype($0, 1, 5);
      var $1=$L_addr;
      var $call=_luaL_optinteger($1, 2, 1);
      $i=$call;
      var $2=$L_addr;
      var $call1=_lua_type($2, 3);
      var $cmp=(($call1)|0) <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$L_addr;
      var $call2=_luaL_len($3, 1);
      var $cond = $call2;label = 5; break;
    case 4: 
      var $4=$L_addr;
      var $call3=_luaL_checkinteger($4, 3);
      var $cond = $call3;label = 5; break;
    case 5: 
      var $cond;
      $e=$cond;
      var $5=$i;
      var $6=$e;
      var $cmp4=(($5)|0) > (($6)|0);
      if ($cmp4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $retval=0;
      label = 14; break;
    case 7: 
      var $7=$e;
      var $8=$i;
      var $sub=((($7)-($8))|0);
      var $add=((($sub)+(1))|0);
      $n=$add;
      var $9=$n;
      var $cmp5=(($9)|0) <= 0;
      if ($cmp5) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $10=$L_addr;
      var $11=$n;
      var $call6=_lua_checkstack($10, $11);
      var $tobool=(($call6)|0)!=0;
      if ($tobool) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $12=$L_addr;
      var $call8=_luaL_error($12, ((5245588)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      $retval=$call8;
      label = 14; break;
    case 10: 
      var $13=$L_addr;
      var $14=$i;
      _lua_rawgeti($13, 1, $14);
      label = 11; break;
    case 11: 
      var $15=$i;
      var $inc=((($15)+(1))|0);
      $i=$inc;
      var $16=$e;
      var $cmp10=(($15)|0) < (($16)|0);
      if ($cmp10) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $17=$L_addr;
      var $18=$i;
      _lua_rawgeti($17, 1, $18);
      label = 11; break;
    case 13: 
      var $19=$n;
      $retval=$19;
      label = 14; break;
    case 14: 
      var $20=$retval;
      STACKTOP = __stackBase__;
      return $20;
  }

}
_unpack["X"]=1;

function _tremove($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $e;
      var $pos;
      $L_addr=$L;
      var $0=$L_addr;
      _luaL_checktype($0, 1, 5);
      var $1=$L_addr;
      var $call=_luaL_len($1, 1);
      $e=$call;
      var $2=$L_addr;
      var $3=$e;
      var $call1=_luaL_optinteger($2, 2, $3);
      $pos=$call1;
      var $4=$pos;
      var $cmp=1 <= (($4)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$pos;
      var $6=$e;
      var $cmp2=(($5)|0) <= (($6)|0);
      if ($cmp2) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $retval=0;
      label = 10; break;
    case 5: 
      var $7=$L_addr;
      var $8=$pos;
      _lua_rawgeti($7, 1, $8);
      label = 6; break;
    case 6: 
      var $9=$pos;
      var $10=$e;
      var $cmp3=(($9)|0) < (($10)|0);
      if ($cmp3) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $11=$L_addr;
      var $12=$pos;
      var $add=((($12)+(1))|0);
      _lua_rawgeti($11, 1, $add);
      var $13=$L_addr;
      var $14=$pos;
      _lua_rawseti($13, 1, $14);
      label = 8; break;
    case 8: 
      var $15=$pos;
      var $inc=((($15)+(1))|0);
      $pos=$inc;
      label = 6; break;
    case 9: 
      var $16=$L_addr;
      _lua_pushnil($16);
      var $17=$L_addr;
      var $18=$e;
      _lua_rawseti($17, 1, $18);
      $retval=1;
      label = 10; break;
    case 10: 
      var $19=$retval;

      return $19;
  }

}
_tremove["X"]=1;

function _sort($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $n;
      $L_addr=$L;
      var $0=$L_addr;
      _luaL_checktype($0, 1, 5);
      var $1=$L_addr;
      var $call=_luaL_len($1, 1);
      $n=$call;
      var $2=$L_addr;
      _luaL_checkstack($2, 40, ((5246348)|0));
      var $3=$L_addr;
      var $call1=_lua_type($3, 2);
      var $cmp=(($call1)|0) <= 0;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $4=$L_addr;
      _luaL_checktype($4, 2, 6);
      label = 4; break;
    case 4: 
      var $5=$L_addr;
      _lua_settop($5, 2);
      var $6=$L_addr;
      var $7=$n;
      _auxsort($6, 1, $7);

      return 0;
  }

}


function _auxsort($L, $l, $u) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $l_addr;
      var $u_addr;
      var $i;
      var $j;
      $L_addr=$L;
      $l_addr=$l;
      $u_addr=$u;
      label = 3; break;
    case 3: 
      var $0=$l_addr;
      var $1=$u_addr;
      var $cmp=(($0)|0) < (($1)|0);
      if ($cmp) { label = 4; break; } else { label = 35; break; }
    case 4: 
      var $2=$L_addr;
      var $3=$l_addr;
      _lua_rawgeti($2, 1, $3);
      var $4=$L_addr;
      var $5=$u_addr;
      _lua_rawgeti($4, 1, $5);
      var $6=$L_addr;
      var $call=_sort_comp($6, -1, -2);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$L_addr;
      var $8=$l_addr;
      var $9=$u_addr;
      _set2($7, $8, $9);
      label = 7; break;
    case 6: 
      var $10=$L_addr;
      _lua_settop($10, -3);
      label = 7; break;
    case 7: 
      var $11=$u_addr;
      var $12=$l_addr;
      var $sub=((($11)-($12))|0);
      var $cmp1=(($sub)|0)==1;
      if ($cmp1) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 35; break;
    case 9: 
      var $13=$l_addr;
      var $14=$u_addr;
      var $add=((($13)+($14))|0);
      var $div=((((($add)|0))/(2))&-1);
      $i=$div;
      var $15=$L_addr;
      var $16=$i;
      _lua_rawgeti($15, 1, $16);
      var $17=$L_addr;
      var $18=$l_addr;
      _lua_rawgeti($17, 1, $18);
      var $19=$L_addr;
      var $call4=_sort_comp($19, -2, -1);
      var $tobool5=(($call4)|0)!=0;
      if ($tobool5) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $20=$L_addr;
      var $21=$i;
      var $22=$l_addr;
      _set2($20, $21, $22);
      label = 15; break;
    case 11: 
      var $23=$L_addr;
      _lua_settop($23, -2);
      var $24=$L_addr;
      var $25=$u_addr;
      _lua_rawgeti($24, 1, $25);
      var $26=$L_addr;
      var $call8=_sort_comp($26, -1, -2);
      var $tobool9=(($call8)|0)!=0;
      if ($tobool9) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $27=$L_addr;
      var $28=$i;
      var $29=$u_addr;
      _set2($27, $28, $29);
      label = 14; break;
    case 13: 
      var $30=$L_addr;
      _lua_settop($30, -3);
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $31=$u_addr;
      var $32=$l_addr;
      var $sub14=((($31)-($32))|0);
      var $cmp15=(($sub14)|0)==2;
      if ($cmp15) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 35; break;
    case 17: 
      var $33=$L_addr;
      var $34=$i;
      _lua_rawgeti($33, 1, $34);
      var $35=$L_addr;
      _lua_pushvalue($35, -1);
      var $36=$L_addr;
      var $37=$u_addr;
      var $sub18=((($37)-(1))|0);
      _lua_rawgeti($36, 1, $sub18);
      var $38=$L_addr;
      var $39=$i;
      var $40=$u_addr;
      var $sub19=((($40)-(1))|0);
      _set2($38, $39, $sub19);
      var $41=$l_addr;
      $i=$41;
      var $42=$u_addr;
      var $sub20=((($42)-(1))|0);
      $j=$sub20;
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $43=$L_addr;
      var $44=$i;
      var $inc=((($44)+(1))|0);
      $i=$inc;
      _lua_rawgeti($43, 1, $inc);
      var $45=$L_addr;
      var $call22=_sort_comp($45, -1, -2);
      var $tobool23=(($call22)|0)!=0;
      if ($tobool23) { label = 20; break; } else { label = 23; break; }
    case 20: 
      var $46=$i;
      var $47=$u_addr;
      var $cmp25=(($46)|0) >= (($47)|0);
      if ($cmp25) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $48=$L_addr;
      var $call27=_luaL_error($48, ((5245884)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 22; break;
    case 22: 
      var $49=$L_addr;
      _lua_settop($49, -2);
      label = 19; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $50=$L_addr;
      var $51=$j;
      var $dec=((($51)-(1))|0);
      $j=$dec;
      _lua_rawgeti($50, 1, $dec);
      var $52=$L_addr;
      var $call30=_sort_comp($52, -3, -1);
      var $tobool31=(($call30)|0)!=0;
      if ($tobool31) { label = 25; break; } else { label = 28; break; }
    case 25: 
      var $53=$j;
      var $54=$l_addr;
      var $cmp33=(($53)|0) <= (($54)|0);
      if ($cmp33) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $55=$L_addr;
      var $call35=_luaL_error($55, ((5245884)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 27; break;
    case 27: 
      var $56=$L_addr;
      _lua_settop($56, -2);
      label = 24; break;
    case 28: 
      var $57=$j;
      var $58=$i;
      var $cmp38=(($57)|0) < (($58)|0);
      if ($cmp38) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $59=$L_addr;
      _lua_settop($59, -4);
      label = 31; break;
    case 30: 
      var $60=$L_addr;
      var $61=$i;
      var $62=$j;
      _set2($60, $61, $62);
      label = 18; break;
    case 31: 
      var $63=$L_addr;
      var $64=$u_addr;
      var $sub41=((($64)-(1))|0);
      _lua_rawgeti($63, 1, $sub41);
      var $65=$L_addr;
      var $66=$i;
      _lua_rawgeti($65, 1, $66);
      var $67=$L_addr;
      var $68=$u_addr;
      var $sub42=((($68)-(1))|0);
      var $69=$i;
      _set2($67, $sub42, $69);
      var $70=$i;
      var $71=$l_addr;
      var $sub43=((($70)-($71))|0);
      var $72=$u_addr;
      var $73=$i;
      var $sub44=((($72)-($73))|0);
      var $cmp45=(($sub43)|0) < (($sub44)|0);
      if ($cmp45) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $74=$l_addr;
      $j=$74;
      var $75=$i;
      var $sub47=((($75)-(1))|0);
      $i=$sub47;
      var $76=$i;
      var $add48=((($76)+(2))|0);
      $l_addr=$add48;
      label = 34; break;
    case 33: 
      var $77=$i;
      var $add50=((($77)+(1))|0);
      $j=$add50;
      var $78=$u_addr;
      $i=$78;
      var $79=$j;
      var $sub51=((($79)-(2))|0);
      $u_addr=$sub51;
      label = 34; break;
    case 34: 
      var $80=$L_addr;
      var $81=$j;
      var $82=$i;
      _auxsort($80, $81, $82);
      label = 3; break;
    case 35: 
      STACKTOP = __stackBase__;
      return;
  }

}
_auxsort["X"]=1;

function _sort_comp($L, $a, $b) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $a_addr;
      var $b_addr;
      var $res;
      $L_addr=$L;
      $a_addr=$a;
      $b_addr=$b;
      var $0=$L_addr;
      var $call=_lua_type($0, 2);
      var $cmp=(($call)|0)==0;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $1=$L_addr;
      _lua_pushvalue($1, 2);
      var $2=$L_addr;
      var $3=$a_addr;
      var $sub=((($3)-(1))|0);
      _lua_pushvalue($2, $sub);
      var $4=$L_addr;
      var $5=$b_addr;
      var $sub1=((($5)-(2))|0);
      _lua_pushvalue($4, $sub1);
      var $6=$L_addr;
      _lua_callk($6, 2, 1, 0, 0);
      var $7=$L_addr;
      var $call2=_lua_toboolean($7, -1);
      $res=$call2;
      var $8=$L_addr;
      _lua_settop($8, -2);
      var $9=$res;
      $retval=$9;
      label = 5; break;
    case 4: 
      var $10=$L_addr;
      var $11=$a_addr;
      var $12=$b_addr;
      var $call3=_lua_compare($10, $11, $12, 1);
      $retval=$call3;
      label = 5; break;
    case 5: 
      var $13=$retval;

      return $13;
  }

}


function _set2($L, $i, $j) {
  var label = 0;


  var $L_addr;
  var $i_addr;
  var $j_addr;
  $L_addr=$L;
  $i_addr=$i;
  $j_addr=$j;
  var $0=$L_addr;
  var $1=$i_addr;
  _lua_rawseti($0, 1, $1);
  var $2=$L_addr;
  var $3=$j_addr;
  _lua_rawseti($2, 1, $3);

  return;
}


function _addfield($L, $b, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $b_addr;
      var $i_addr;
      $L_addr=$L;
      $b_addr=$b;
      $i_addr=$i;
      var $0=$L_addr;
      var $1=$i_addr;
      _lua_rawgeti($0, 1, $1);
      var $2=$L_addr;
      var $call=_lua_isstring($2, -1);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $3=$L_addr;
      var $4=$L_addr;
      var $5=$L_addr;
      var $call1=_lua_type($5, -1);
      var $call2=_lua_typename($4, $call1);
      var $6=$i_addr;
      var $call3=_luaL_error($3, ((5253164)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempInt)>>2)]=$call2,HEAP32[(((tempInt)+(4))>>2)]=$6,tempInt));
      label = 4; break;
    case 4: 
      var $7=$b_addr;
      _luaL_addvalue($7);
      STACKTOP = __stackBase__;
      return;
  }

}


function _luaopen_package($L) {
  var label = 0;


  var $L_addr;
  $L_addr=$L;
  var $0=$L_addr;
  var $call=_luaL_getsubtable($0, -1001000, ((5246176)|0));
  var $1=$L_addr;
  _lua_createtable($1, 0, 1);
  var $2=$L_addr;
  _lua_pushcclosure($2, 14, 0);
  var $3=$L_addr;
  _lua_setfield($3, -2, ((5252020)|0));
  var $4=$L_addr;
  var $call1=_lua_setmetatable($4, -2);
  var $5=$L_addr;
  _lua_createtable($5, 0, 2);
  var $6=$L_addr;
  _luaL_setfuncs($6, ((5243204)|0), 0);
  var $7=$L_addr;
  _createsearcherstable($7);
  var $8=$L_addr;
  _lua_setfield($8, -2, ((5250044)|0));
  var $9=$L_addr;
  _setpath($9, ((5248556)|0), ((5247372)|0), ((5246632)|0), ((5246208)|0));
  var $10=$L_addr;
  _setpath($10, ((5245876)|0), ((5245572)|0), ((5245380)|0), ((5253484)|0));
  var $11=$L_addr;
  var $call2=_lua_pushlstring($11, ((5253152)|0), 10);
  var $12=$L_addr;
  _lua_setfield($12, -2, ((5252908)|0));
  var $13=$L_addr;
  var $call3=_luaL_getsubtable($13, -1001000, ((5252664)|0));
  var $14=$L_addr;
  _lua_setfield($14, -2, ((5252492)|0));
  var $15=$L_addr;
  var $call4=_luaL_getsubtable($15, -1001000, ((5252336)|0));
  var $16=$L_addr;
  _lua_setfield($16, -2, ((5252072)|0));
  var $17=$L_addr;
  _lua_rawgeti($17, -1001000, 2);
  var $18=$L_addr;
  _lua_pushvalue($18, -2);
  var $19=$L_addr;
  _luaL_setfuncs($19, ((5244548)|0), 1);
  var $20=$L_addr;
  _lua_settop($20, -2);

  return 1;
}


function _gctm($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $n;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_luaL_len($0, 1);
      $n=$call;
      label = 3; break;
    case 3: 
      var $1=$n;
      var $cmp=(($1)|0) >= 1;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$L_addr;
      var $3=$n;
      _lua_rawgeti($2, 1, $3);
      var $4=$L_addr;
      var $call1=_lua_touserdata($4, -1);
      _ll_unloadlib($call1);
      var $5=$L_addr;
      _lua_settop($5, -2);
      label = 5; break;
    case 5: 
      var $6=$n;
      var $dec=((($6)-(1))|0);
      $n=$dec;
      label = 3; break;
    case 6: 

      return 0;
  }

}


function _createsearcherstable($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $i;
      $L_addr=$L;
      var $0=$L_addr;
      _lua_createtable($0, 4, 0);
      $i=0;
      label = 3; break;
    case 3: 
      var $1=$i;
      var $arrayidx=((5244980+($1<<2))|0);
      var $2=HEAP32[(($arrayidx)>>2)];
      var $cmp=(($2)|0)!=0;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $3=$L_addr;
      _lua_pushvalue($3, -2);
      var $4=$L_addr;
      var $5=$i;
      var $arrayidx1=((5244980+($5<<2))|0);
      var $6=HEAP32[(($arrayidx1)>>2)];
      _lua_pushcclosure($4, $6, 1);
      var $7=$L_addr;
      var $8=$i;
      var $add=((($8)+(1))|0);
      _lua_rawseti($7, -2, $add);
      label = 5; break;
    case 5: 
      var $9=$i;
      var $inc=((($9)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 

      return;
  }

}


function _setpath($L, $fieldname, $envname1, $envname2, $def) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $fieldname_addr;
      var $envname1_addr;
      var $envname2_addr;
      var $def_addr;
      var $path;
      $L_addr=$L;
      $fieldname_addr=$fieldname;
      $envname1_addr=$envname1;
      $envname2_addr=$envname2;
      $def_addr=$def;
      var $0=$envname1_addr;
      var $call=_getenv($0);
      $path=$call;
      var $1=$path;
      var $cmp=(($1)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$envname2_addr;
      var $call1=_getenv($2);
      $path=$call1;
      label = 4; break;
    case 4: 
      var $3=$path;
      var $cmp2=(($3)|0)==0;
      if ($cmp2) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $4=$L_addr;
      var $call3=_noenv($4);
      var $tobool=(($call3)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $5=$L_addr;
      var $6=$def_addr;
      var $call5=_lua_pushstring($5, $6);
      label = 8; break;
    case 7: 
      var $7=$L_addr;
      var $8=$path;
      var $call6=_luaL_gsub($7, $8, ((5251268)|0), ((5251104)|0));
      $path=$call6;
      var $9=$L_addr;
      var $10=$path;
      var $11=$def_addr;
      var $call7=_luaL_gsub($9, $10, ((5250840)|0), $11);
      var $12=$L_addr;
      _lua_remove($12, -2);
      label = 8; break;
    case 8: 
      var $13=$L_addr;
      var $14=$fieldname_addr;
      _lua_setfield($13, -2, $14);

      return;
  }

}


function _ll_require($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $name;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_luaL_checklstring($0, 1, 0);
      $name=$call;
      var $1=$L_addr;
      _lua_settop($1, 1);
      var $2=$L_addr;
      _lua_getfield($2, -1001000, ((5252664)|0));
      var $3=$L_addr;
      var $4=$name;
      _lua_getfield($3, 2, $4);
      var $5=$L_addr;
      var $call1=_lua_toboolean($5, -1);
      var $tobool=(($call1)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=1;
      label = 9; break;
    case 4: 
      var $6=$L_addr;
      _lua_settop($6, -2);
      var $7=$L_addr;
      var $8=$name;
      _findloader($7, $8);
      var $9=$L_addr;
      var $10=$name;
      var $call2=_lua_pushstring($9, $10);
      var $11=$L_addr;
      _lua_insert($11, -2);
      var $12=$L_addr;
      _lua_callk($12, 2, 1, 0, 0);
      var $13=$L_addr;
      var $call3=_lua_type($13, -1);
      var $cmp=(($call3)|0)==0;
      if ($cmp) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $14=$L_addr;
      var $15=$name;
      _lua_setfield($14, 2, $15);
      label = 6; break;
    case 6: 
      var $16=$L_addr;
      var $17=$name;
      _lua_getfield($16, 2, $17);
      var $18=$L_addr;
      var $call6=_lua_type($18, -1);
      var $cmp7=(($call6)|0)==0;
      if ($cmp7) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $19=$L_addr;
      _lua_pushboolean($19, 1);
      var $20=$L_addr;
      _lua_pushvalue($20, -1);
      var $21=$L_addr;
      var $22=$name;
      _lua_setfield($21, 2, $22);
      label = 8; break;
    case 8: 
      $retval=1;
      label = 9; break;
    case 9: 
      var $23=$retval;

      return $23;
  }

}
_ll_require["X"]=1;

function _findloader($L, $name) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1040)|0; _memset(__stackBase__, 0, 1040);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $name_addr;
      var $i;
      var $msg=__stackBase__;
      $L_addr=$L;
      $name_addr=$name;
      var $0=$L_addr;
      _luaL_buffinit($0, $msg);
      var $1=$L_addr;
      _lua_getfield($1, -1001001, ((5250044)|0));
      var $2=$L_addr;
      var $call=_lua_type($2, 3);
      var $cmp=(($call)|0)==5;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $3=$L_addr;
      var $call1=_luaL_error($3, ((5251676)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      $i=1;
      label = 5; break;
    case 5: 
      var $4=$L_addr;
      var $5=$i;
      _lua_rawgeti($4, 3, $5);
      var $6=$L_addr;
      var $call2=_lua_type($6, -1);
      var $cmp3=(($call2)|0)==0;
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $7=$L_addr;
      _lua_settop($7, -2);
      _luaL_pushresult($msg);
      var $8=$L_addr;
      var $9=$name_addr;
      var $10=$L_addr;
      var $call5=_lua_tolstring($10, -1, 0);
      var $call6=_luaL_error($8, ((5251476)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempInt)>>2)]=$9,HEAP32[(((tempInt)+(4))>>2)]=$call5,tempInt));
      label = 7; break;
    case 7: 
      var $11=$L_addr;
      var $12=$name_addr;
      var $call8=_lua_pushstring($11, $12);
      var $13=$L_addr;
      _lua_callk($13, 1, 2, 0, 0);
      var $14=$L_addr;
      var $call9=_lua_type($14, -2);
      var $cmp10=(($call9)|0)==6;
      if ($cmp10) { label = 8; break; } else { label = 9; break; }
    case 8: 
      STACKTOP = __stackBase__;
      return;
    case 9: 
      var $15=$L_addr;
      var $call12=_lua_isstring($15, -2);
      var $tobool=(($call12)|0)!=0;
      if ($tobool) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $16=$L_addr;
      _lua_settop($16, -2);
      _luaL_addvalue($msg);
      label = 12; break;
    case 11: 
      var $17=$L_addr;
      _lua_settop($17, -3);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $18=$i;
      var $inc=((($18)+(1))|0);
      $i=$inc;
      label = 5; break;
  }

}
_findloader["X"]=1;

function _noenv($L) {
  var label = 0;


  var $L_addr;
  var $b;
  $L_addr=$L;
  var $0=$L_addr;
  _lua_getfield($0, -1001000, ((5250636)|0));
  var $1=$L_addr;
  var $call=_lua_toboolean($1, -1);
  $b=$call;
  var $2=$L_addr;
  _lua_settop($2, -2);
  var $3=$b;

  return $3;
}


function _searcher_preload($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $name;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_luaL_checklstring($0, 1, 0);
      $name=$call;
      var $1=$L_addr;
      _lua_getfield($1, -1001000, ((5252336)|0));
      var $2=$L_addr;
      var $3=$name;
      _lua_getfield($2, -1, $3);
      var $4=$L_addr;
      var $call1=_lua_type($4, -1);
      var $cmp=(($call1)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$L_addr;
      var $6=$name;
      var $call2=_lua_pushfstring($5, ((5248464)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$6,tempInt));
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return 1;
  }

}


function _searcher_Lua($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $filename;
      var $name;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_luaL_checklstring($0, 1, 0);
      $name=$call;
      var $1=$L_addr;
      var $2=$name;
      var $call1=_findfile($1, $2, ((5248556)|0), ((5250448)|0));
      $filename=$call1;
      var $3=$filename;
      var $cmp=(($3)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=1;
      label = 5; break;
    case 4: 
      var $4=$L_addr;
      var $5=$L_addr;
      var $6=$filename;
      var $call2=_luaL_loadfilex($5, $6, 0);
      var $cmp3=(($call2)|0)==0;
      var $conv=(($cmp3)&1);
      var $7=$filename;
      var $call4=_checkload($4, $conv, $7);
      $retval=$call4;
      label = 5; break;
    case 5: 
      var $8=$retval;

      return $8;
  }

}


function _searcher_C($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $name;
      var $filename;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_luaL_checklstring($0, 1, 0);
      $name=$call;
      var $1=$L_addr;
      var $2=$name;
      var $call1=_findfile($1, $2, ((5245876)|0), ((5250448)|0));
      $filename=$call1;
      var $3=$filename;
      var $cmp=(($3)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=1;
      label = 5; break;
    case 4: 
      var $4=$L_addr;
      var $5=$L_addr;
      var $6=$filename;
      var $7=$name;
      var $call2=_loadfunc($5, $6, $7);
      var $cmp3=(($call2)|0)==0;
      var $conv=(($cmp3)&1);
      var $8=$filename;
      var $call4=_checkload($4, $conv, $8);
      $retval=$call4;
      label = 5; break;
    case 5: 
      var $9=$retval;

      return $9;
  }

}


function _searcher_Croot($L) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $filename;
      var $name;
      var $p;
      var $stat;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_luaL_checklstring($0, 1, 0);
      $name=$call;
      var $1=$name;
      var $call1=_strchr($1, 46);
      $p=$call1;
      var $2=$p;
      var $cmp=(($2)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 11; break;
    case 4: 
      var $3=$L_addr;
      var $4=$name;
      var $5=$p;
      var $6=$name;
      var $sub_ptr_lhs_cast=$5;
      var $sub_ptr_rhs_cast=$6;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $call2=_lua_pushlstring($3, $4, $sub_ptr_sub);
      var $7=$L_addr;
      var $8=$L_addr;
      var $call3=_lua_tolstring($8, -1, 0);
      var $call4=_findfile($7, $call3, ((5245876)|0), ((5250448)|0));
      $filename=$call4;
      var $9=$filename;
      var $cmp5=(($9)|0)==0;
      if ($cmp5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=1;
      label = 11; break;
    case 6: 
      var $10=$L_addr;
      var $11=$filename;
      var $12=$name;
      var $call8=_loadfunc($10, $11, $12);
      $stat=$call8;
      var $cmp9=(($call8)|0)!=0;
      if ($cmp9) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $13=$stat;
      var $cmp11=(($13)|0)!=2;
      if ($cmp11) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $14=$L_addr;
      var $15=$filename;
      var $call13=_checkload($14, 0, $15);
      $retval=$call13;
      label = 11; break;
    case 9: 
      var $16=$L_addr;
      var $17=$name;
      var $18=$filename;
      var $call14=_lua_pushfstring($16, ((5250264)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempInt)>>2)]=$17,HEAP32[(((tempInt)+(4))>>2)]=$18,tempInt));
      $retval=1;
      label = 11; break;
    case 10: 
      var $19=$L_addr;
      var $20=$filename;
      var $call16=_lua_pushstring($19, $20);
      $retval=2;
      label = 11; break;
    case 11: 
      var $21=$retval;
      STACKTOP = __stackBase__;
      return $21;
  }

}
_searcher_Croot["X"]=1;

function _findfile($L, $name, $pname, $dirsep) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $name_addr;
      var $pname_addr;
      var $dirsep_addr;
      var $path;
      $L_addr=$L;
      $name_addr=$name;
      $pname_addr=$pname;
      $dirsep_addr=$dirsep;
      var $0=$L_addr;
      var $1=$pname_addr;
      _lua_getfield($0, -1001001, $1);
      var $2=$L_addr;
      var $call=_lua_tolstring($2, -1, 0);
      $path=$call;
      var $3=$path;
      var $cmp=(($3)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$L_addr;
      var $5=$pname_addr;
      var $call1=_luaL_error($4, ((5249092)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$5,tempInt));
      label = 4; break;
    case 4: 
      var $6=$L_addr;
      var $7=$name_addr;
      var $8=$path;
      var $9=$dirsep_addr;
      var $call2=_searchpath($6, $7, $8, ((5249876)|0), $9);
      STACKTOP = __stackBase__;
      return $call2;
  }

}


function _ll_unloadlib($lib) {
  var label = 0;


  var $lib_addr;
  $lib_addr=$lib;
  var $0=$lib_addr;

  return;
}


function _loadfunc($L, $filename, $modname) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $filename_addr;
      var $modname_addr;
      var $funcname;
      var $mark;
      var $stat;
      $L_addr=$L;
      $filename_addr=$filename;
      $modname_addr=$modname;
      var $0=$L_addr;
      var $1=$modname_addr;
      var $call=_luaL_gsub($0, $1, ((5249876)|0), ((5249740)|0));
      $modname_addr=$call;
      var $2=$modname_addr;
      var $3=HEAP8[((((5249556)|0))|0)];
      var $conv=(($3 << 24) >> 24);
      var $call1=_strchr($2, $conv);
      $mark=$call1;
      var $4=$mark;
      var $tobool=(($4)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $5=$L_addr;
      var $6=$modname_addr;
      var $7=$mark;
      var $8=$modname_addr;
      var $sub_ptr_lhs_cast=$7;
      var $sub_ptr_rhs_cast=$8;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $call2=_lua_pushlstring($5, $6, $sub_ptr_sub);
      $funcname=$call2;
      var $9=$L_addr;
      var $10=$funcname;
      var $call3=_lua_pushfstring($9, ((5249436)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$10,tempInt));
      $funcname=$call3;
      var $11=$L_addr;
      var $12=$filename_addr;
      var $13=$funcname;
      var $call4=_ll_loadfunc($11, $12, $13);
      $stat=$call4;
      var $14=$stat;
      var $cmp=(($14)|0)!=2;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $15=$stat;
      $retval=$15;
      label = 7; break;
    case 5: 
      var $16=$mark;
      var $add_ptr=(($16+1)|0);
      $modname_addr=$add_ptr;
      label = 6; break;
    case 6: 
      var $17=$L_addr;
      var $18=$modname_addr;
      var $call8=_lua_pushfstring($17, ((5249436)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$18,tempInt));
      $funcname=$call8;
      var $19=$L_addr;
      var $20=$filename_addr;
      var $21=$funcname;
      var $call9=_ll_loadfunc($19, $20, $21);
      $retval=$call9;
      label = 7; break;
    case 7: 
      var $22=$retval;
      STACKTOP = __stackBase__;
      return $22;
  }

}
_loadfunc["X"]=1;

function _checkload($L, $stat, $filename) {
  var label = 0;
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $stat_addr;
      var $filename_addr;
      $L_addr=$L;
      $stat_addr=$stat;
      $filename_addr=$filename;
      var $0=$stat_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$L_addr;
      var $2=$filename_addr;
      var $call=_lua_pushstring($1, $2);
      $retval=2;
      label = 5; break;
    case 4: 
      var $3=$L_addr;
      var $4=$L_addr;
      var $call1=_lua_tolstring($4, 1, 0);
      var $5=$filename_addr;
      var $6=$L_addr;
      var $call2=_lua_tolstring($6, -1, 0);
      var $call3=_luaL_error($3, ((5250076)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 12),STACKTOP = (STACKTOP + 12)|0,HEAP32[((tempInt)>>2)]=$call1,HEAP32[(((tempInt)+(4))>>2)]=$5,HEAP32[(((tempInt)+(8))>>2)]=$call2,tempInt));
      $retval=$call3;
      label = 5; break;
    case 5: 
      var $7=$retval;
      STACKTOP = __stackBase__;
      return $7;
  }

}


function _ll_loadfunc($L, $path, $sym) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $path_addr;
      var $sym_addr;
      var $reg;
      var $f;
      $L_addr=$L;
      $path_addr=$path;
      $sym_addr=$sym;
      var $0=$L_addr;
      var $1=$path_addr;
      var $call=_ll_checkclib($0, $1);
      $reg=$call;
      var $2=$reg;
      var $cmp=(($2)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $3=$L_addr;
      var $4=$path_addr;
      var $5=$sym_addr;
      var $6=HEAP8[($5)];
      var $conv=(($6 << 24) >> 24);
      var $cmp1=(($conv)|0)==42;
      var $conv2=(($cmp1)&1);
      var $call3=_ll_load($3, $4, $conv2);
      $reg=$call3;
      var $7=$reg;
      var $cmp4=(($7)|0)==0;
      if ($cmp4) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $retval=1;
      label = 11; break;
    case 5: 
      var $8=$L_addr;
      var $9=$path_addr;
      var $10=$reg;
      _ll_addtoclib($8, $9, $10);
      label = 6; break;
    case 6: 
      var $11=$sym_addr;
      var $12=HEAP8[($11)];
      var $conv8=(($12 << 24) >> 24);
      var $cmp9=(($conv8)|0)==42;
      if ($cmp9) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $13=$L_addr;
      _lua_pushboolean($13, 1);
      $retval=0;
      label = 11; break;
    case 8: 
      var $14=$L_addr;
      var $15=$reg;
      var $16=$sym_addr;
      var $call12=_ll_sym($14, $15, $16);
      $f=$call12;
      var $17=$f;
      var $cmp13=(($17)|0)==0;
      if ($cmp13) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $retval=2;
      label = 11; break;
    case 10: 
      var $18=$L_addr;
      var $19=$f;
      _lua_pushcclosure($18, $19, 0);
      $retval=0;
      label = 11; break;
    case 11: 
      var $20=$retval;

      return $20;
  }

}
_ll_loadfunc["X"]=1;

function _ll_checkclib($L, $path) {
  var label = 0;


  var $L_addr;
  var $path_addr;
  var $plib;
  $L_addr=$L;
  $path_addr=$path;
  var $0=$L_addr;
  _lua_getfield($0, -1001000, ((5246176)|0));
  var $1=$L_addr;
  var $2=$path_addr;
  _lua_getfield($1, -1, $2);
  var $3=$L_addr;
  var $call=_lua_touserdata($3, -1);
  $plib=$call;
  var $4=$L_addr;
  _lua_settop($4, -3);
  var $5=$plib;

  return $5;
}


function _ll_load($L, $path, $seeglb) {
  var label = 0;


  var $L_addr;
  var $path_addr;
  var $seeglb_addr;
  $L_addr=$L;
  $path_addr=$path;
  $seeglb_addr=$seeglb;
  var $0=$path_addr;
  var $1=$seeglb_addr;
  var $2=$L_addr;
  var $call=_lua_pushlstring($2, ((5249248)|0), 58);

  return 0;
}


function _ll_addtoclib($L, $path, $plib) {
  var label = 0;


  var $L_addr;
  var $path_addr;
  var $plib_addr;
  $L_addr=$L;
  $path_addr=$path;
  $plib_addr=$plib;
  var $0=$L_addr;
  _lua_getfield($0, -1001000, ((5246176)|0));
  var $1=$L_addr;
  var $2=$plib_addr;
  _lua_pushlightuserdata($1, $2);
  var $3=$L_addr;
  _lua_pushvalue($3, -1);
  var $4=$L_addr;
  var $5=$path_addr;
  _lua_setfield($4, -3, $5);
  var $6=$L_addr;
  var $7=$L_addr;
  var $call=_luaL_len($7, -2);
  var $add=((($call)+(1))|0);
  _lua_rawseti($6, -2, $add);
  var $8=$L_addr;
  _lua_settop($8, -2);

  return;
}


function _ll_sym($L, $lib, $sym) {
  var label = 0;


  var $L_addr;
  var $lib_addr;
  var $sym_addr;
  $L_addr=$L;
  $lib_addr=$lib;
  $sym_addr=$sym;
  var $0=$lib_addr;
  var $1=$sym_addr;
  var $2=$L_addr;
  var $call=_lua_pushlstring($2, ((5249248)|0), 58);

  return 0;
}


function _searchpath($L, $name, $path, $sep, $dirsep) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1040)|0; _memset(__stackBase__, 0, 1040);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $name_addr;
      var $path_addr;
      var $sep_addr;
      var $dirsep_addr;
      var $msg=__stackBase__;
      var $filename;
      $L_addr=$L;
      $name_addr=$name;
      $path_addr=$path;
      $sep_addr=$sep;
      $dirsep_addr=$dirsep;
      var $0=$L_addr;
      _luaL_buffinit($0, $msg);
      var $1=$sep_addr;
      var $2=HEAP8[($1)];
      var $conv=(($2 << 24) >> 24);
      var $cmp=(($conv)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$L_addr;
      var $4=$name_addr;
      var $5=$sep_addr;
      var $6=$dirsep_addr;
      var $call=_luaL_gsub($3, $4, $5, $6);
      $name_addr=$call;
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $7=$L_addr;
      var $8=$path_addr;
      var $call2=_pushnexttemplate($7, $8);
      $path_addr=$call2;
      var $cmp3=(($call2)|0)!=0;
      if ($cmp3) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $9=$L_addr;
      var $10=$L_addr;
      var $call5=_lua_tolstring($10, -1, 0);
      var $11=$name_addr;
      var $call6=_luaL_gsub($9, $call5, ((5248860)|0), $11);
      $filename=$call6;
      var $12=$L_addr;
      _lua_remove($12, -2);
      var $13=$filename;
      var $call7=_readable($13);
      var $tobool=(($call7)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $14=$filename;
      $retval=$14;
      label = 10; break;
    case 8: 
      var $15=$L_addr;
      var $16=$filename;
      var $call10=_lua_pushfstring($15, ((5248716)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP = (STACKTOP + 4)|0,HEAP32[((tempInt)>>2)]=$16,tempInt));
      var $17=$L_addr;
      _lua_remove($17, -2);
      _luaL_addvalue($msg);
      label = 5; break;
    case 9: 
      _luaL_pushresult($msg);
      $retval=0;
      label = 10; break;
    case 10: 
      var $18=$retval;
      STACKTOP = __stackBase__;
      return $18;
  }

}
_searchpath["X"]=1;

function _pushnexttemplate($L, $path) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $path_addr;
      var $l;
      $L_addr=$L;
      $path_addr=$path;
      label = 3; break;
    case 3: 
      var $0=$path_addr;
      var $1=HEAP8[($0)];
      var $conv=(($1 << 24) >> 24);
      var $2=HEAP8[((((5248580)|0))|0)];
      var $conv1=(($2 << 24) >> 24);
      var $cmp=(($conv)|0)==(($conv1)|0);
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$path_addr;
      var $incdec_ptr=(($3+1)|0);
      $path_addr=$incdec_ptr;
      label = 3; break;
    case 5: 
      var $4=$path_addr;
      var $5=HEAP8[($4)];
      var $conv3=(($5 << 24) >> 24);
      var $cmp4=(($conv3)|0)==0;
      if ($cmp4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $retval=0;
      label = 10; break;
    case 7: 
      var $6=$path_addr;
      var $7=HEAP8[((((5248580)|0))|0)];
      var $conv6=(($7 << 24) >> 24);
      var $call=_strchr($6, $conv6);
      $l=$call;
      var $8=$l;
      var $cmp7=(($8)|0)==0;
      if ($cmp7) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $9=$path_addr;
      var $10=$path_addr;
      var $call10=_strlen($10);
      var $add_ptr=(($9+$call10)|0);
      $l=$add_ptr;
      label = 9; break;
    case 9: 
      var $11=$L_addr;
      var $12=$path_addr;
      var $13=$l;
      var $14=$path_addr;
      var $sub_ptr_lhs_cast=$13;
      var $sub_ptr_rhs_cast=$14;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $call12=_lua_pushlstring($11, $12, $sub_ptr_sub);
      var $15=$l;
      $retval=$15;
      label = 10; break;
    case 10: 
      var $16=$retval;

      return $16;
  }

}
_pushnexttemplate["X"]=1;

function _readable($filename) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $filename_addr;
      var $f;
      $filename_addr=$filename;
      var $0=$filename_addr;
      var $call=_fopen($0, ((5248652)|0));
      $f=$call;
      var $1=$f;
      var $cmp=(($1)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 5; break;
    case 4: 
      var $2=$f;
      var $call1=_fclose($2);
      $retval=1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
  }

}


function _ll_loadlib($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $path;
      var $init;
      var $stat;
      $L_addr=$L;
      var $0=$L_addr;
      var $call=_luaL_checklstring($0, 1, 0);
      $path=$call;
      var $1=$L_addr;
      var $call1=_luaL_checklstring($1, 2, 0);
      $init=$call1;
      var $2=$L_addr;
      var $3=$path;
      var $4=$init;
      var $call2=_ll_loadfunc($2, $3, $4);
      $stat=$call2;
      var $5=$stat;
      var $cmp=(($5)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=1;
      label = 5; break;
    case 4: 
      var $6=$L_addr;
      _lua_pushnil($6);
      var $7=$L_addr;
      _lua_insert($7, -2);
      var $8=$L_addr;
      var $9=$stat;
      var $cmp3=(($9)|0)==1;
      var $cond=$cmp3 ? (((5248108)|0)) : (((5247964)|0));
      var $call4=_lua_pushstring($8, $cond);
      $retval=3;
      label = 5; break;
    case 5: 
      var $10=$retval;

      return $10;
  }

}


function _ll_searchpath($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $L_addr;
      var $f;
      $L_addr=$L;
      var $0=$L_addr;
      var $1=$L_addr;
      var $call=_luaL_checklstring($1, 1, 0);
      var $2=$L_addr;
      var $call1=_luaL_checklstring($2, 2, 0);
      var $3=$L_addr;
      var $call2=_luaL_optlstring($3, 3, ((5249876)|0), 0);
      var $4=$L_addr;
      var $call3=_luaL_optlstring($4, 4, ((5250448)|0), 0);
      var $call4=_searchpath($0, $call, $call1, $call2, $call3);
      $f=$call4;
      var $5=$f;
      var $cmp=(($5)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=1;
      label = 5; break;
    case 4: 
      var $6=$L_addr;
      _lua_pushnil($6);
      var $7=$L_addr;
      _lua_insert($7, -2);
      $retval=2;
      label = 5; break;
    case 5: 
      var $8=$retval;

      return $8;
  }

}


function _luaL_openlibs($L) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $L_addr;
      var $lib;
      $L_addr=$L;
      $lib=((5244460)|0);
      label = 3; break;
    case 3: 
      var $0=$lib;
      var $func=(($0+4)|0);
      var $1=HEAP32[(($func)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$L_addr;
      var $3=$lib;
      var $name=(($3)|0);
      var $4=HEAP32[(($name)>>2)];
      var $5=$lib;
      var $func1=(($5+4)|0);
      var $6=HEAP32[(($func1)>>2)];
      _luaL_requiref($2, $4, $6, 1);
      var $7=$L_addr;
      _lua_settop($7, -2);
      label = 5; break;
    case 5: 
      var $8=$lib;
      var $incdec_ptr=(($8+8)|0);
      $lib=$incdec_ptr;
      label = 3; break;
    case 6: 
      var $9=$L_addr;
      var $call=_luaL_getsubtable($9, -1001000, ((5245964)|0));
      $lib=((5243196)|0);
      label = 7; break;
    case 7: 
      var $10=$lib;
      var $func3=(($10+4)|0);
      var $11=HEAP32[(($func3)>>2)];
      var $tobool4=(($11)|0)!=0;
      if ($tobool4) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $12=$L_addr;
      var $13=$lib;
      var $func6=(($13+4)|0);
      var $14=HEAP32[(($func6)>>2)];
      _lua_pushcclosure($12, $14, 0);
      var $15=$L_addr;
      var $16=$lib;
      var $name7=(($16)|0);
      var $17=HEAP32[(($name7)>>2)];
      _lua_setfield($15, -2, $17);
      label = 9; break;
    case 9: 
      var $18=$lib;
      var $incdec_ptr9=(($18+8)|0);
      $lib=$incdec_ptr9;
      label = 7; break;
    case 10: 
      var $19=$L_addr;
      _lua_settop($19, -2);

      return;
  }

}
Module["_luaL_openlibs"] = _luaL_openlibs;_luaL_openlibs["X"]=1;

function _malloc($bytes) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $bytes_addr;
      var $mem;
      var $nb;
      var $idx;
      var $smallbits;
      var $b;
      var $p;
      var $F;
      var $b33;
      var $p34;
      var $r;
      var $rsize;
      var $i;
      var $leftbits;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $F68;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F102;
      var $rsize157;
      var $p159;
      var $r163;
      var $dvs;
      var $rsize185;
      var $p187;
      var $r188;
      $bytes_addr=$bytes;
      var $0=$bytes_addr;
      var $cmp=(($0)>>>0) <= 244;
      if ($cmp) { label = 3; break; } else { label = 38; break; }
    case 3: 
      var $1=$bytes_addr;
      var $cmp1=(($1)>>>0) < 11;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $cond = 16;label = 6; break;
    case 5: 
      var $2=$bytes_addr;
      var $add=((($2)+(4))|0);
      var $add2=((($add)+(7))|0);
      var $and=$add2 & -8;
      var $cond = $and;label = 6; break;
    case 6: 
      var $cond;
      $nb=$cond;
      var $3=$nb;
      var $shr=$3 >>> 3;
      $idx=$shr;
      var $4=HEAP32[((((5253776)|0))>>2)];
      var $5=$idx;
      var $shr3=$4 >>> (($5)>>>0);
      $smallbits=$shr3;
      var $6=$smallbits;
      var $and4=$6 & 3;
      var $cmp5=(($and4)|0)!=0;
      if ($cmp5) { label = 7; break; } else { label = 14; break; }
    case 7: 
      var $7=$smallbits;
      var $neg=$7 ^ -1;
      var $and7=$neg & 1;
      var $8=$idx;
      var $add8=((($8)+($and7))|0);
      $idx=$add8;
      var $9=$idx;
      var $shl=$9 << 1;
      var $arrayidx=((((5253816)|0)+($shl<<2))|0);
      var $10=$arrayidx;
      var $11=$10;
      $b=$11;
      var $12=$b;
      var $fd=(($12+8)|0);
      var $13=HEAP32[(($fd)>>2)];
      $p=$13;
      var $14=$p;
      var $fd9=(($14+8)|0);
      var $15=HEAP32[(($fd9)>>2)];
      $F=$15;
      var $16=$b;
      var $17=$F;
      var $cmp10=(($16)|0)==(($17)|0);
      if ($cmp10) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $18=$idx;
      var $shl12=1 << $18;
      var $neg13=$shl12 ^ -1;
      var $19=HEAP32[((((5253776)|0))>>2)];
      var $and14=$19 & $neg13;
      HEAP32[((((5253776)|0))>>2)]=$and14;
      label = 13; break;
    case 9: 
      var $20=$F;
      var $21=$20;
      var $22=HEAP32[((((5253792)|0))>>2)];
      var $cmp15=(($21)>>>0) >= (($22)>>>0);
      var $conv=(($cmp15)&1);
      var $expval=($conv);
      var $tobool=(($expval)|0)!=0;
      if ($tobool) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $23=$F;
      var $24=$b;
      var $fd17=(($24+8)|0);
      HEAP32[(($fd17)>>2)]=$23;
      var $25=$b;
      var $26=$F;
      var $bk=(($26+12)|0);
      HEAP32[(($bk)>>2)]=$25;
      label = 12; break;
    case 11: 
      _abort();

    case 12: 
      label = 13; break;
    case 13: 
      var $27=$idx;
      var $shl20=$27 << 3;
      var $or=$shl20 | 1;
      var $or21=$or | 2;
      var $28=$p;
      var $head=(($28+4)|0);
      HEAP32[(($head)>>2)]=$or21;
      var $29=$p;
      var $30=$29;
      var $31=$idx;
      var $shl22=$31 << 3;
      var $add_ptr=(($30+$shl22)|0);
      var $32=$add_ptr;
      var $head23=(($32+4)|0);
      var $33=HEAP32[(($head23)>>2)];
      var $or24=$33 | 1;
      HEAP32[(($head23)>>2)]=$or24;
      var $34=$p;
      var $35=$34;
      var $add_ptr25=(($35+8)|0);
      $mem=$add_ptr25;
      label = 54; break;
    case 14: 
      var $36=$nb;
      var $37=HEAP32[((((5253784)|0))>>2)];
      var $cmp27=(($36)>>>0) > (($37)>>>0);
      if ($cmp27) { label = 15; break; } else { label = 36; break; }
    case 15: 
      var $38=$smallbits;
      var $cmp30=(($38)|0)!=0;
      if ($cmp30) { label = 16; break; } else { label = 31; break; }
    case 16: 
      var $39=$smallbits;
      var $40=$idx;
      var $shl35=$39 << $40;
      var $41=$idx;
      var $shl36=1 << $41;
      var $shl37=$shl36 << 1;
      var $42=$idx;
      var $shl38=1 << $42;
      var $shl39=$shl38 << 1;
      var $sub=(((-$shl39))|0);
      var $or40=$shl37 | $sub;
      var $and41=$shl35 & $or40;
      $leftbits=$and41;
      var $43=$leftbits;
      var $44=$leftbits;
      var $sub42=(((-$44))|0);
      var $and43=$43 & $sub42;
      $leastbit=$and43;
      var $45=$leastbit;
      var $sub44=((($45)-(1))|0);
      $Y=$sub44;
      var $46=$Y;
      var $shr45=$46 >>> 12;
      var $and46=$shr45 & 16;
      $K=$and46;
      var $47=$K;
      $N=$47;
      var $48=$K;
      var $49=$Y;
      var $shr47=$49 >>> (($48)>>>0);
      $Y=$shr47;
      var $50=$Y;
      var $shr48=$50 >>> 5;
      var $and49=$shr48 & 8;
      $K=$and49;
      var $51=$N;
      var $add50=((($51)+($and49))|0);
      $N=$add50;
      var $52=$K;
      var $53=$Y;
      var $shr51=$53 >>> (($52)>>>0);
      $Y=$shr51;
      var $54=$Y;
      var $shr52=$54 >>> 2;
      var $and53=$shr52 & 4;
      $K=$and53;
      var $55=$N;
      var $add54=((($55)+($and53))|0);
      $N=$add54;
      var $56=$K;
      var $57=$Y;
      var $shr55=$57 >>> (($56)>>>0);
      $Y=$shr55;
      var $58=$Y;
      var $shr56=$58 >>> 1;
      var $and57=$shr56 & 2;
      $K=$and57;
      var $59=$N;
      var $add58=((($59)+($and57))|0);
      $N=$add58;
      var $60=$K;
      var $61=$Y;
      var $shr59=$61 >>> (($60)>>>0);
      $Y=$shr59;
      var $62=$Y;
      var $shr60=$62 >>> 1;
      var $and61=$shr60 & 1;
      $K=$and61;
      var $63=$N;
      var $add62=((($63)+($and61))|0);
      $N=$add62;
      var $64=$K;
      var $65=$Y;
      var $shr63=$65 >>> (($64)>>>0);
      $Y=$shr63;
      var $66=$N;
      var $67=$Y;
      var $add64=((($66)+($67))|0);
      $i=$add64;
      var $68=$i;
      var $shl65=$68 << 1;
      var $arrayidx66=((((5253816)|0)+($shl65<<2))|0);
      var $69=$arrayidx66;
      var $70=$69;
      $b33=$70;
      var $71=$b33;
      var $fd67=(($71+8)|0);
      var $72=HEAP32[(($fd67)>>2)];
      $p34=$72;
      var $73=$p34;
      var $fd69=(($73+8)|0);
      var $74=HEAP32[(($fd69)>>2)];
      $F68=$74;
      var $75=$b33;
      var $76=$F68;
      var $cmp70=(($75)|0)==(($76)|0);
      if ($cmp70) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $77=$i;
      var $shl73=1 << $77;
      var $neg74=$shl73 ^ -1;
      var $78=HEAP32[((((5253776)|0))>>2)];
      var $and75=$78 & $neg74;
      HEAP32[((((5253776)|0))>>2)]=$and75;
      label = 22; break;
    case 18: 
      var $79=$F68;
      var $80=$79;
      var $81=HEAP32[((((5253792)|0))>>2)];
      var $cmp77=(($80)>>>0) >= (($81)>>>0);
      var $conv78=(($cmp77)&1);
      var $expval79=($conv78);
      var $tobool80=(($expval79)|0)!=0;
      if ($tobool80) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $82=$F68;
      var $83=$b33;
      var $fd82=(($83+8)|0);
      HEAP32[(($fd82)>>2)]=$82;
      var $84=$b33;
      var $85=$F68;
      var $bk83=(($85+12)|0);
      HEAP32[(($bk83)>>2)]=$84;
      label = 21; break;
    case 20: 
      _abort();

    case 21: 
      label = 22; break;
    case 22: 
      var $86=$i;
      var $shl87=$86 << 3;
      var $87=$nb;
      var $sub88=((($shl87)-($87))|0);
      $rsize=$sub88;
      var $88=$nb;
      var $or89=$88 | 1;
      var $or90=$or89 | 2;
      var $89=$p34;
      var $head91=(($89+4)|0);
      HEAP32[(($head91)>>2)]=$or90;
      var $90=$p34;
      var $91=$90;
      var $92=$nb;
      var $add_ptr92=(($91+$92)|0);
      var $93=$add_ptr92;
      $r=$93;
      var $94=$rsize;
      var $or93=$94 | 1;
      var $95=$r;
      var $head94=(($95+4)|0);
      HEAP32[(($head94)>>2)]=$or93;
      var $96=$rsize;
      var $97=$r;
      var $98=$97;
      var $99=$rsize;
      var $add_ptr95=(($98+$99)|0);
      var $100=$add_ptr95;
      var $prev_foot=(($100)|0);
      HEAP32[(($prev_foot)>>2)]=$96;
      var $101=HEAP32[((((5253784)|0))>>2)];
      $DVS=$101;
      var $102=$DVS;
      var $cmp96=(($102)|0)!=0;
      if ($cmp96) { label = 23; break; } else { label = 30; break; }
    case 23: 
      var $103=HEAP32[((((5253796)|0))>>2)];
      $DV=$103;
      var $104=$DVS;
      var $shr99=$104 >>> 3;
      $I=$shr99;
      var $105=$I;
      var $shl100=$105 << 1;
      var $arrayidx101=((((5253816)|0)+($shl100<<2))|0);
      var $106=$arrayidx101;
      var $107=$106;
      $B=$107;
      var $108=$B;
      $F102=$108;
      var $109=HEAP32[((((5253776)|0))>>2)];
      var $110=$I;
      var $shl103=1 << $110;
      var $and104=$109 & $shl103;
      var $tobool105=(($and104)|0)!=0;
      if ($tobool105) { label = 25; break; } else { label = 24; break; }
    case 24: 
      var $111=$I;
      var $shl107=1 << $111;
      var $112=HEAP32[((((5253776)|0))>>2)];
      var $or108=$112 | $shl107;
      HEAP32[((((5253776)|0))>>2)]=$or108;
      label = 29; break;
    case 25: 
      var $113=$B;
      var $fd110=(($113+8)|0);
      var $114=HEAP32[(($fd110)>>2)];
      var $115=$114;
      var $116=HEAP32[((((5253792)|0))>>2)];
      var $cmp111=(($115)>>>0) >= (($116)>>>0);
      var $conv112=(($cmp111)&1);
      var $expval113=($conv112);
      var $tobool114=(($expval113)|0)!=0;
      if ($tobool114) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $117=$B;
      var $fd116=(($117+8)|0);
      var $118=HEAP32[(($fd116)>>2)];
      $F102=$118;
      label = 28; break;
    case 27: 
      _abort();

    case 28: 
      label = 29; break;
    case 29: 
      var $119=$DV;
      var $120=$B;
      var $fd120=(($120+8)|0);
      HEAP32[(($fd120)>>2)]=$119;
      var $121=$DV;
      var $122=$F102;
      var $bk121=(($122+12)|0);
      HEAP32[(($bk121)>>2)]=$121;
      var $123=$F102;
      var $124=$DV;
      var $fd122=(($124+8)|0);
      HEAP32[(($fd122)>>2)]=$123;
      var $125=$B;
      var $126=$DV;
      var $bk123=(($126+12)|0);
      HEAP32[(($bk123)>>2)]=$125;
      label = 30; break;
    case 30: 
      var $127=$rsize;
      HEAP32[((((5253784)|0))>>2)]=$127;
      var $128=$r;
      HEAP32[((((5253796)|0))>>2)]=$128;
      var $129=$p34;
      var $130=$129;
      var $add_ptr125=(($130+8)|0);
      $mem=$add_ptr125;
      label = 54; break;
    case 31: 
      var $131=HEAP32[((((5253780)|0))>>2)];
      var $cmp127=(($131)|0)!=0;
      if ($cmp127) { label = 32; break; } else { label = 34; break; }
    case 32: 
      var $132=$nb;
      var $call=_tmalloc_small(5253776, $132);
      $mem=$call;
      var $cmp129=(($call)|0)!=0;
      if ($cmp129) { label = 33; break; } else { label = 34; break; }
    case 33: 
      label = 54; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 45; break;
    case 38: 
      var $133=$bytes_addr;
      var $cmp137=(($133)>>>0) >= 4294967232;
      if ($cmp137) { label = 39; break; } else { label = 40; break; }
    case 39: 
      $nb=-1;
      label = 44; break;
    case 40: 
      var $134=$bytes_addr;
      var $add141=((($134)+(4))|0);
      var $add142=((($add141)+(7))|0);
      var $and143=$add142 & -8;
      $nb=$and143;
      var $135=HEAP32[((((5253780)|0))>>2)];
      var $cmp144=(($135)|0)!=0;
      if ($cmp144) { label = 41; break; } else { label = 43; break; }
    case 41: 
      var $136=$nb;
      var $call147=_tmalloc_large(5253776, $136);
      $mem=$call147;
      var $cmp148=(($call147)|0)!=0;
      if ($cmp148) { label = 42; break; } else { label = 43; break; }
    case 42: 
      label = 54; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $137=$nb;
      var $138=HEAP32[((((5253784)|0))>>2)];
      var $cmp154=(($137)>>>0) <= (($138)>>>0);
      if ($cmp154) { label = 46; break; } else { label = 50; break; }
    case 46: 
      var $139=HEAP32[((((5253784)|0))>>2)];
      var $140=$nb;
      var $sub158=((($139)-($140))|0);
      $rsize157=$sub158;
      var $141=HEAP32[((((5253796)|0))>>2)];
      $p159=$141;
      var $142=$rsize157;
      var $cmp160=(($142)>>>0) >= 16;
      if ($cmp160) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $143=$p159;
      var $144=$143;
      var $145=$nb;
      var $add_ptr164=(($144+$145)|0);
      var $146=$add_ptr164;
      HEAP32[((((5253796)|0))>>2)]=$146;
      $r163=$146;
      var $147=$rsize157;
      HEAP32[((((5253784)|0))>>2)]=$147;
      var $148=$rsize157;
      var $or165=$148 | 1;
      var $149=$r163;
      var $head166=(($149+4)|0);
      HEAP32[(($head166)>>2)]=$or165;
      var $150=$rsize157;
      var $151=$r163;
      var $152=$151;
      var $153=$rsize157;
      var $add_ptr167=(($152+$153)|0);
      var $154=$add_ptr167;
      var $prev_foot168=(($154)|0);
      HEAP32[(($prev_foot168)>>2)]=$150;
      var $155=$nb;
      var $or169=$155 | 1;
      var $or170=$or169 | 2;
      var $156=$p159;
      var $head171=(($156+4)|0);
      HEAP32[(($head171)>>2)]=$or170;
      label = 49; break;
    case 48: 
      var $157=HEAP32[((((5253784)|0))>>2)];
      $dvs=$157;
      HEAP32[((((5253784)|0))>>2)]=0;
      HEAP32[((((5253796)|0))>>2)]=0;
      var $158=$dvs;
      var $or173=$158 | 1;
      var $or174=$or173 | 2;
      var $159=$p159;
      var $head175=(($159+4)|0);
      HEAP32[(($head175)>>2)]=$or174;
      var $160=$p159;
      var $161=$160;
      var $162=$dvs;
      var $add_ptr176=(($161+$162)|0);
      var $163=$add_ptr176;
      var $head177=(($163+4)|0);
      var $164=HEAP32[(($head177)>>2)];
      var $or178=$164 | 1;
      HEAP32[(($head177)>>2)]=$or178;
      label = 49; break;
    case 49: 
      var $165=$p159;
      var $166=$165;
      var $add_ptr180=(($166+8)|0);
      $mem=$add_ptr180;
      label = 54; break;
    case 50: 
      var $167=$nb;
      var $168=HEAP32[((((5253788)|0))>>2)];
      var $cmp182=(($167)>>>0) < (($168)>>>0);
      if ($cmp182) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $169=$nb;
      var $170=HEAP32[((((5253788)|0))>>2)];
      var $sub186=((($170)-($169))|0);
      HEAP32[((((5253788)|0))>>2)]=$sub186;
      $rsize185=$sub186;
      var $171=HEAP32[((((5253800)|0))>>2)];
      $p187=$171;
      var $172=$p187;
      var $173=$172;
      var $174=$nb;
      var $add_ptr189=(($173+$174)|0);
      var $175=$add_ptr189;
      HEAP32[((((5253800)|0))>>2)]=$175;
      $r188=$175;
      var $176=$rsize185;
      var $or190=$176 | 1;
      var $177=$r188;
      var $head191=(($177+4)|0);
      HEAP32[(($head191)>>2)]=$or190;
      var $178=$nb;
      var $or192=$178 | 1;
      var $or193=$or192 | 2;
      var $179=$p187;
      var $head194=(($179+4)|0);
      HEAP32[(($head194)>>2)]=$or193;
      var $180=$p187;
      var $181=$180;
      var $add_ptr195=(($181+8)|0);
      $mem=$add_ptr195;
      label = 54; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $182=$nb;
      var $call198=_sys_alloc(5253776, $182);
      $mem=$call198;
      label = 54; break;
    case 54: 
      var $183=$mem;

      return $183;
  }

}
_malloc["X"]=1;

function _tmalloc_small($m, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $nb_addr;
      var $t;
      var $v;
      var $rsize;
      var $i;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $trem;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F191;
      $m_addr=$m;
      $nb_addr=$nb;
      var $0=$m_addr;
      var $treemap=(($0+4)|0);
      var $1=HEAP32[(($treemap)>>2)];
      var $2=$m_addr;
      var $treemap1=(($2+4)|0);
      var $3=HEAP32[(($treemap1)>>2)];
      var $sub=(((-$3))|0);
      var $and=$1 & $sub;
      $leastbit=$and;
      var $4=$leastbit;
      var $sub2=((($4)-(1))|0);
      $Y=$sub2;
      var $5=$Y;
      var $shr=$5 >>> 12;
      var $and3=$shr & 16;
      $K=$and3;
      var $6=$K;
      $N=$6;
      var $7=$K;
      var $8=$Y;
      var $shr4=$8 >>> (($7)>>>0);
      $Y=$shr4;
      var $9=$Y;
      var $shr5=$9 >>> 5;
      var $and6=$shr5 & 8;
      $K=$and6;
      var $10=$N;
      var $add=((($10)+($and6))|0);
      $N=$add;
      var $11=$K;
      var $12=$Y;
      var $shr7=$12 >>> (($11)>>>0);
      $Y=$shr7;
      var $13=$Y;
      var $shr8=$13 >>> 2;
      var $and9=$shr8 & 4;
      $K=$and9;
      var $14=$N;
      var $add10=((($14)+($and9))|0);
      $N=$add10;
      var $15=$K;
      var $16=$Y;
      var $shr11=$16 >>> (($15)>>>0);
      $Y=$shr11;
      var $17=$Y;
      var $shr12=$17 >>> 1;
      var $and13=$shr12 & 2;
      $K=$and13;
      var $18=$N;
      var $add14=((($18)+($and13))|0);
      $N=$add14;
      var $19=$K;
      var $20=$Y;
      var $shr15=$20 >>> (($19)>>>0);
      $Y=$shr15;
      var $21=$Y;
      var $shr16=$21 >>> 1;
      var $and17=$shr16 & 1;
      $K=$and17;
      var $22=$N;
      var $add18=((($22)+($and17))|0);
      $N=$add18;
      var $23=$K;
      var $24=$Y;
      var $shr19=$24 >>> (($23)>>>0);
      $Y=$shr19;
      var $25=$N;
      var $26=$Y;
      var $add20=((($25)+($26))|0);
      $i=$add20;
      var $27=$i;
      var $28=$m_addr;
      var $treebins=(($28+304)|0);
      var $arrayidx=(($treebins+($27<<2))|0);
      var $29=HEAP32[(($arrayidx)>>2)];
      $t=$29;
      $v=$29;
      var $30=$t;
      var $head=(($30+4)|0);
      var $31=HEAP32[(($head)>>2)];
      var $and21=$31 & -8;
      var $32=$nb_addr;
      var $sub22=((($and21)-($32))|0);
      $rsize=$sub22;
      label = 3; break;
    case 3: 
      var $33=$t;
      var $child=(($33+16)|0);
      var $arrayidx23=(($child)|0);
      var $34=HEAP32[(($arrayidx23)>>2)];
      var $cmp=(($34)|0)!=0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $35=$t;
      var $child24=(($35+16)|0);
      var $arrayidx25=(($child24)|0);
      var $36=HEAP32[(($arrayidx25)>>2)];
      var $cond = $36;label = 6; break;
    case 5: 
      var $37=$t;
      var $child26=(($37+16)|0);
      var $arrayidx27=(($child26+4)|0);
      var $38=HEAP32[(($arrayidx27)>>2)];
      var $cond = $38;label = 6; break;
    case 6: 
      var $cond;
      $t=$cond;
      var $cmp28=(($cond)|0)!=0;
      if ($cmp28) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $39=$t;
      var $head29=(($39+4)|0);
      var $40=HEAP32[(($head29)>>2)];
      var $and30=$40 & -8;
      var $41=$nb_addr;
      var $sub31=((($and30)-($41))|0);
      $trem=$sub31;
      var $42=$trem;
      var $43=$rsize;
      var $cmp32=(($42)>>>0) < (($43)>>>0);
      if ($cmp32) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $44=$trem;
      $rsize=$44;
      var $45=$t;
      $v=$45;
      label = 9; break;
    case 9: 
      label = 3; break;
    case 10: 
      var $46=$v;
      var $47=$46;
      var $48=$m_addr;
      var $least_addr=(($48+16)|0);
      var $49=HEAP32[(($least_addr)>>2)];
      var $cmp33=(($47)>>>0) >= (($49)>>>0);
      var $conv=(($cmp33)&1);
      var $expval=($conv);
      var $tobool=(($expval)|0)!=0;
      if ($tobool) { label = 11; break; } else { label = 70; break; }
    case 11: 
      var $50=$v;
      var $51=$50;
      var $52=$nb_addr;
      var $add_ptr=(($51+$52)|0);
      var $53=$add_ptr;
      $r=$53;
      var $54=$v;
      var $55=$54;
      var $56=$r;
      var $57=$56;
      var $cmp35=(($55)>>>0) < (($57)>>>0);
      var $conv36=(($cmp35)&1);
      var $expval37=($conv36);
      var $tobool38=(($expval37)|0)!=0;
      if ($tobool38) { label = 12; break; } else { label = 69; break; }
    case 12: 
      var $58=$v;
      var $parent=(($58+24)|0);
      var $59=HEAP32[(($parent)>>2)];
      $XP=$59;
      var $60=$v;
      var $bk=(($60+12)|0);
      var $61=HEAP32[(($bk)>>2)];
      var $62=$v;
      var $cmp40=(($61)|0)!=(($62)|0);
      if ($cmp40) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $63=$v;
      var $fd=(($63+8)|0);
      var $64=HEAP32[(($fd)>>2)];
      $F=$64;
      var $65=$v;
      var $bk43=(($65+12)|0);
      var $66=HEAP32[(($bk43)>>2)];
      $R=$66;
      var $67=$F;
      var $68=$67;
      var $69=$m_addr;
      var $least_addr44=(($69+16)|0);
      var $70=HEAP32[(($least_addr44)>>2)];
      var $cmp45=(($68)>>>0) >= (($70)>>>0);
      var $conv46=(($cmp45)&1);
      var $expval47=($conv46);
      var $tobool48=(($expval47)|0)!=0;
      if ($tobool48) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $71=$R;
      var $72=$F;
      var $bk50=(($72+12)|0);
      HEAP32[(($bk50)>>2)]=$71;
      var $73=$F;
      var $74=$R;
      var $fd51=(($74+8)|0);
      HEAP32[(($fd51)>>2)]=$73;
      label = 16; break;
    case 15: 
      _abort();

    case 16: 
      label = 29; break;
    case 17: 
      var $75=$v;
      var $child54=(($75+16)|0);
      var $arrayidx55=(($child54+4)|0);
      $RP=$arrayidx55;
      var $76=HEAP32[(($arrayidx55)>>2)];
      $R=$76;
      var $cmp56=(($76)|0)!=0;
      if ($cmp56) { label = 19; break; } else { label = 18; break; }
    case 18: 
      var $77=$v;
      var $child58=(($77+16)|0);
      var $arrayidx59=(($child58)|0);
      $RP=$arrayidx59;
      var $78=HEAP32[(($arrayidx59)>>2)];
      $R=$78;
      var $cmp60=(($78)|0)!=0;
      if ($cmp60) { label = 19; break; } else { label = 28; break; }
    case 19: 
      label = 20; break;
    case 20: 
      var $79=$R;
      var $child64=(($79+16)|0);
      var $arrayidx65=(($child64+4)|0);
      $CP=$arrayidx65;
      var $80=HEAP32[(($arrayidx65)>>2)];
      var $cmp66=(($80)|0)!=0;
      if ($cmp66) { var $83 = 1;label = 22; break; } else { label = 21; break; }
    case 21: 
      var $81=$R;
      var $child68=(($81+16)|0);
      var $arrayidx69=(($child68)|0);
      $CP=$arrayidx69;
      var $82=HEAP32[(($arrayidx69)>>2)];
      var $cmp70=(($82)|0)!=0;
      var $83 = $cmp70;label = 22; break;
    case 22: 
      var $83;
      if ($83) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $84=$CP;
      $RP=$84;
      var $85=HEAP32[(($84)>>2)];
      $R=$85;
      label = 20; break;
    case 24: 
      var $86=$RP;
      var $87=$86;
      var $88=$m_addr;
      var $least_addr74=(($88+16)|0);
      var $89=HEAP32[(($least_addr74)>>2)];
      var $cmp75=(($87)>>>0) >= (($89)>>>0);
      var $conv76=(($cmp75)&1);
      var $expval77=($conv76);
      var $tobool78=(($expval77)|0)!=0;
      if ($tobool78) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $90=$RP;
      HEAP32[(($90)>>2)]=0;
      label = 27; break;
    case 26: 
      _abort();

    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $91=$XP;
      var $cmp84=(($91)|0)!=0;
      if ($cmp84) { label = 30; break; } else { label = 57; break; }
    case 30: 
      var $92=$v;
      var $index=(($92+28)|0);
      var $93=HEAP32[(($index)>>2)];
      var $94=$m_addr;
      var $treebins87=(($94+304)|0);
      var $arrayidx88=(($treebins87+($93<<2))|0);
      $H=$arrayidx88;
      var $95=$v;
      var $96=$H;
      var $97=HEAP32[(($96)>>2)];
      var $cmp89=(($95)|0)==(($97)|0);
      if ($cmp89) { label = 31; break; } else { label = 34; break; }
    case 31: 
      var $98=$R;
      var $99=$H;
      HEAP32[(($99)>>2)]=$98;
      var $cmp92=(($98)|0)==0;
      if ($cmp92) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $100=$v;
      var $index95=(($100+28)|0);
      var $101=HEAP32[(($index95)>>2)];
      var $shl=1 << $101;
      var $neg=$shl ^ -1;
      var $102=$m_addr;
      var $treemap96=(($102+4)|0);
      var $103=HEAP32[(($treemap96)>>2)];
      var $and97=$103 & $neg;
      HEAP32[(($treemap96)>>2)]=$and97;
      label = 33; break;
    case 33: 
      label = 41; break;
    case 34: 
      var $104=$XP;
      var $105=$104;
      var $106=$m_addr;
      var $least_addr100=(($106+16)|0);
      var $107=HEAP32[(($least_addr100)>>2)];
      var $cmp101=(($105)>>>0) >= (($107)>>>0);
      var $conv102=(($cmp101)&1);
      var $expval103=($conv102);
      var $tobool104=(($expval103)|0)!=0;
      if ($tobool104) { label = 35; break; } else { label = 39; break; }
    case 35: 
      var $108=$XP;
      var $child106=(($108+16)|0);
      var $arrayidx107=(($child106)|0);
      var $109=HEAP32[(($arrayidx107)>>2)];
      var $110=$v;
      var $cmp108=(($109)|0)==(($110)|0);
      if ($cmp108) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $111=$R;
      var $112=$XP;
      var $child111=(($112+16)|0);
      var $arrayidx112=(($child111)|0);
      HEAP32[(($arrayidx112)>>2)]=$111;
      label = 38; break;
    case 37: 
      var $113=$R;
      var $114=$XP;
      var $child114=(($114+16)|0);
      var $arrayidx115=(($child114+4)|0);
      HEAP32[(($arrayidx115)>>2)]=$113;
      label = 38; break;
    case 38: 
      label = 40; break;
    case 39: 
      _abort();

    case 40: 
      label = 41; break;
    case 41: 
      var $115=$R;
      var $cmp120=(($115)|0)!=0;
      if ($cmp120) { label = 42; break; } else { label = 56; break; }
    case 42: 
      var $116=$R;
      var $117=$116;
      var $118=$m_addr;
      var $least_addr123=(($118+16)|0);
      var $119=HEAP32[(($least_addr123)>>2)];
      var $cmp124=(($117)>>>0) >= (($119)>>>0);
      var $conv125=(($cmp124)&1);
      var $expval126=($conv125);
      var $tobool127=(($expval126)|0)!=0;
      if ($tobool127) { label = 43; break; } else { label = 54; break; }
    case 43: 
      var $120=$XP;
      var $121=$R;
      var $parent129=(($121+24)|0);
      HEAP32[(($parent129)>>2)]=$120;
      var $122=$v;
      var $child130=(($122+16)|0);
      var $arrayidx131=(($child130)|0);
      var $123=HEAP32[(($arrayidx131)>>2)];
      $C0=$123;
      var $cmp132=(($123)|0)!=0;
      if ($cmp132) { label = 44; break; } else { label = 48; break; }
    case 44: 
      var $124=$C0;
      var $125=$124;
      var $126=$m_addr;
      var $least_addr135=(($126+16)|0);
      var $127=HEAP32[(($least_addr135)>>2)];
      var $cmp136=(($125)>>>0) >= (($127)>>>0);
      var $conv137=(($cmp136)&1);
      var $expval138=($conv137);
      var $tobool139=(($expval138)|0)!=0;
      if ($tobool139) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $128=$C0;
      var $129=$R;
      var $child141=(($129+16)|0);
      var $arrayidx142=(($child141)|0);
      HEAP32[(($arrayidx142)>>2)]=$128;
      var $130=$R;
      var $131=$C0;
      var $parent143=(($131+24)|0);
      HEAP32[(($parent143)>>2)]=$130;
      label = 47; break;
    case 46: 
      _abort();

    case 47: 
      label = 48; break;
    case 48: 
      var $132=$v;
      var $child147=(($132+16)|0);
      var $arrayidx148=(($child147+4)|0);
      var $133=HEAP32[(($arrayidx148)>>2)];
      $C1=$133;
      var $cmp149=(($133)|0)!=0;
      if ($cmp149) { label = 49; break; } else { label = 53; break; }
    case 49: 
      var $134=$C1;
      var $135=$134;
      var $136=$m_addr;
      var $least_addr152=(($136+16)|0);
      var $137=HEAP32[(($least_addr152)>>2)];
      var $cmp153=(($135)>>>0) >= (($137)>>>0);
      var $conv154=(($cmp153)&1);
      var $expval155=($conv154);
      var $tobool156=(($expval155)|0)!=0;
      if ($tobool156) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $138=$C1;
      var $139=$R;
      var $child158=(($139+16)|0);
      var $arrayidx159=(($child158+4)|0);
      HEAP32[(($arrayidx159)>>2)]=$138;
      var $140=$R;
      var $141=$C1;
      var $parent160=(($141+24)|0);
      HEAP32[(($parent160)>>2)]=$140;
      label = 52; break;
    case 51: 
      _abort();

    case 52: 
      label = 53; break;
    case 53: 
      label = 55; break;
    case 54: 
      _abort();

    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $142=$rsize;
      var $cmp168=(($142)>>>0) < 16;
      if ($cmp168) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $143=$rsize;
      var $144=$nb_addr;
      var $add171=((($143)+($144))|0);
      var $or=$add171 | 1;
      var $or172=$or | 2;
      var $145=$v;
      var $head173=(($145+4)|0);
      HEAP32[(($head173)>>2)]=$or172;
      var $146=$v;
      var $147=$146;
      var $148=$rsize;
      var $149=$nb_addr;
      var $add174=((($148)+($149))|0);
      var $add_ptr175=(($147+$add174)|0);
      var $150=$add_ptr175;
      var $head176=(($150+4)|0);
      var $151=HEAP32[(($head176)>>2)];
      var $or177=$151 | 1;
      HEAP32[(($head176)>>2)]=$or177;
      label = 68; break;
    case 59: 
      var $152=$nb_addr;
      var $or179=$152 | 1;
      var $or180=$or179 | 2;
      var $153=$v;
      var $head181=(($153+4)|0);
      HEAP32[(($head181)>>2)]=$or180;
      var $154=$rsize;
      var $or182=$154 | 1;
      var $155=$r;
      var $head183=(($155+4)|0);
      HEAP32[(($head183)>>2)]=$or182;
      var $156=$rsize;
      var $157=$r;
      var $158=$157;
      var $159=$rsize;
      var $add_ptr184=(($158+$159)|0);
      var $160=$add_ptr184;
      var $prev_foot=(($160)|0);
      HEAP32[(($prev_foot)>>2)]=$156;
      var $161=$m_addr;
      var $dvsize=(($161+8)|0);
      var $162=HEAP32[(($dvsize)>>2)];
      $DVS=$162;
      var $163=$DVS;
      var $cmp185=(($163)|0)!=0;
      if ($cmp185) { label = 60; break; } else { label = 67; break; }
    case 60: 
      var $164=$m_addr;
      var $dv=(($164+20)|0);
      var $165=HEAP32[(($dv)>>2)];
      $DV=$165;
      var $166=$DVS;
      var $shr188=$166 >>> 3;
      $I=$shr188;
      var $167=$I;
      var $shl189=$167 << 1;
      var $168=$m_addr;
      var $smallbins=(($168+40)|0);
      var $arrayidx190=(($smallbins+($shl189<<2))|0);
      var $169=$arrayidx190;
      var $170=$169;
      $B=$170;
      var $171=$B;
      $F191=$171;
      var $172=$m_addr;
      var $smallmap=(($172)|0);
      var $173=HEAP32[(($smallmap)>>2)];
      var $174=$I;
      var $shl192=1 << $174;
      var $and193=$173 & $shl192;
      var $tobool194=(($and193)|0)!=0;
      if ($tobool194) { label = 62; break; } else { label = 61; break; }
    case 61: 
      var $175=$I;
      var $shl196=1 << $175;
      var $176=$m_addr;
      var $smallmap197=(($176)|0);
      var $177=HEAP32[(($smallmap197)>>2)];
      var $or198=$177 | $shl196;
      HEAP32[(($smallmap197)>>2)]=$or198;
      label = 66; break;
    case 62: 
      var $178=$B;
      var $fd200=(($178+8)|0);
      var $179=HEAP32[(($fd200)>>2)];
      var $180=$179;
      var $181=$m_addr;
      var $least_addr201=(($181+16)|0);
      var $182=HEAP32[(($least_addr201)>>2)];
      var $cmp202=(($180)>>>0) >= (($182)>>>0);
      var $conv203=(($cmp202)&1);
      var $expval204=($conv203);
      var $tobool205=(($expval204)|0)!=0;
      if ($tobool205) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $183=$B;
      var $fd207=(($183+8)|0);
      var $184=HEAP32[(($fd207)>>2)];
      $F191=$184;
      label = 65; break;
    case 64: 
      _abort();

    case 65: 
      label = 66; break;
    case 66: 
      var $185=$DV;
      var $186=$B;
      var $fd211=(($186+8)|0);
      HEAP32[(($fd211)>>2)]=$185;
      var $187=$DV;
      var $188=$F191;
      var $bk212=(($188+12)|0);
      HEAP32[(($bk212)>>2)]=$187;
      var $189=$F191;
      var $190=$DV;
      var $fd213=(($190+8)|0);
      HEAP32[(($fd213)>>2)]=$189;
      var $191=$B;
      var $192=$DV;
      var $bk214=(($192+12)|0);
      HEAP32[(($bk214)>>2)]=$191;
      label = 67; break;
    case 67: 
      var $193=$rsize;
      var $194=$m_addr;
      var $dvsize216=(($194+8)|0);
      HEAP32[(($dvsize216)>>2)]=$193;
      var $195=$r;
      var $196=$m_addr;
      var $dv217=(($196+20)|0);
      HEAP32[(($dv217)>>2)]=$195;
      label = 68; break;
    case 68: 
      var $197=$v;
      var $198=$197;
      var $add_ptr219=(($198+8)|0);

      return $add_ptr219;
    case 69: 
      label = 70; break;
    case 70: 
      _abort();

  }

}
_tmalloc_small["X"]=1;

function _tmalloc_large($m, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $nb_addr;
      var $v;
      var $rsize;
      var $t;
      var $idx;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $sizebits;
      var $rst;
      var $rt;
      var $trem;
      var $leftbits;
      var $i;
      var $leastbit;
      var $Y68;
      var $K70;
      var $N73;
      var $trem97;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I;
      var $B;
      var $F282;
      var $TP;
      var $H307;
      var $I308;
      var $X309;
      var $Y319;
      var $N320;
      var $K324;
      var $T;
      var $K365;
      var $C;
      var $F404;
      $m_addr=$m;
      $nb_addr=$nb;
      $v=0;
      var $0=$nb_addr;
      var $sub=(((-$0))|0);
      $rsize=$sub;
      var $1=$nb_addr;
      var $shr=$1 >>> 8;
      $X=$shr;
      var $2=$X;
      var $cmp=(($2)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $idx=0;
      label = 8; break;
    case 4: 
      var $3=$X;
      var $cmp1=(($3)>>>0) > 65535;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $idx=31;
      label = 7; break;
    case 6: 
      var $4=$X;
      $Y=$4;
      var $5=$Y;
      var $sub4=((($5)-(256))|0);
      var $shr5=$sub4 >>> 16;
      var $and=$shr5 & 8;
      $N=$and;
      var $6=$N;
      var $7=$Y;
      var $shl=$7 << $6;
      $Y=$shl;
      var $sub6=((($shl)-(4096))|0);
      var $shr7=$sub6 >>> 16;
      var $and8=$shr7 & 4;
      $K=$and8;
      var $8=$K;
      var $9=$N;
      var $add=((($9)+($8))|0);
      $N=$add;
      var $10=$K;
      var $11=$Y;
      var $shl9=$11 << $10;
      $Y=$shl9;
      var $sub10=((($shl9)-(16384))|0);
      var $shr11=$sub10 >>> 16;
      var $and12=$shr11 & 2;
      $K=$and12;
      var $12=$N;
      var $add13=((($12)+($and12))|0);
      $N=$add13;
      var $13=$N;
      var $sub14=(((14)-($13))|0);
      var $14=$K;
      var $15=$Y;
      var $shl15=$15 << $14;
      $Y=$shl15;
      var $shr16=$shl15 >>> 15;
      var $add17=((($sub14)+($shr16))|0);
      $K=$add17;
      var $16=$K;
      var $shl18=$16 << 1;
      var $17=$nb_addr;
      var $18=$K;
      var $add19=((($18)+(7))|0);
      var $shr20=$17 >>> (($add19)>>>0);
      var $and21=$shr20 & 1;
      var $add22=((($shl18)+($and21))|0);
      $idx=$add22;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $19=$idx;
      var $20=$m_addr;
      var $treebins=(($20+304)|0);
      var $arrayidx=(($treebins+($19<<2))|0);
      var $21=HEAP32[(($arrayidx)>>2)];
      $t=$21;
      var $cmp24=(($21)|0)!=0;
      if ($cmp24) { label = 9; break; } else { label = 24; break; }
    case 9: 
      var $22=$nb_addr;
      var $23=$idx;
      var $cmp26=(($23)|0)==31;
      if ($cmp26) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $cond = 0;label = 12; break;
    case 11: 
      var $24=$idx;
      var $shr27=$24 >>> 1;
      var $add28=((($shr27)+(8))|0);
      var $sub29=((($add28)-(2))|0);
      var $sub30=(((31)-($sub29))|0);
      var $cond = $sub30;label = 12; break;
    case 12: 
      var $cond;
      var $shl31=$22 << $cond;
      $sizebits=$shl31;
      $rst=0;
      label = 13; break;
    case 13: 
      var $25=$t;
      var $head=(($25+4)|0);
      var $26=HEAP32[(($head)>>2)];
      var $and32=$26 & -8;
      var $27=$nb_addr;
      var $sub33=((($and32)-($27))|0);
      $trem=$sub33;
      var $28=$trem;
      var $29=$rsize;
      var $cmp34=(($28)>>>0) < (($29)>>>0);
      if ($cmp34) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $30=$t;
      $v=$30;
      var $31=$trem;
      $rsize=$31;
      var $cmp36=(($31)|0)==0;
      if ($cmp36) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 23; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $32=$t;
      var $child=(($32+16)|0);
      var $arrayidx40=(($child+4)|0);
      var $33=HEAP32[(($arrayidx40)>>2)];
      $rt=$33;
      var $34=$sizebits;
      var $shr41=$34 >>> 31;
      var $and42=$shr41 & 1;
      var $35=$t;
      var $child43=(($35+16)|0);
      var $arrayidx44=(($child43+($and42<<2))|0);
      var $36=HEAP32[(($arrayidx44)>>2)];
      $t=$36;
      var $37=$rt;
      var $cmp45=(($37)|0)!=0;
      if ($cmp45) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $38=$rt;
      var $39=$t;
      var $cmp46=(($38)|0)!=(($39)|0);
      if ($cmp46) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $40=$rt;
      $rst=$40;
      label = 20; break;
    case 20: 
      var $41=$t;
      var $cmp49=(($41)|0)==0;
      if ($cmp49) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $42=$rst;
      $t=$42;
      label = 23; break;
    case 22: 
      var $43=$sizebits;
      var $shl52=$43 << 1;
      $sizebits=$shl52;
      label = 13; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $44=$t;
      var $cmp54=(($44)|0)==0;
      if ($cmp54) { label = 25; break; } else { label = 29; break; }
    case 25: 
      var $45=$v;
      var $cmp56=(($45)|0)==0;
      if ($cmp56) { label = 26; break; } else { label = 29; break; }
    case 26: 
      var $46=$idx;
      var $shl58=1 << $46;
      var $shl59=$shl58 << 1;
      var $47=$idx;
      var $shl60=1 << $47;
      var $shl61=$shl60 << 1;
      var $sub62=(((-$shl61))|0);
      var $or=$shl59 | $sub62;
      var $48=$m_addr;
      var $treemap=(($48+4)|0);
      var $49=HEAP32[(($treemap)>>2)];
      var $and63=$or & $49;
      $leftbits=$and63;
      var $50=$leftbits;
      var $cmp64=(($50)|0)!=0;
      if ($cmp64) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $51=$leftbits;
      var $52=$leftbits;
      var $sub66=(((-$52))|0);
      var $and67=$51 & $sub66;
      $leastbit=$and67;
      var $53=$leastbit;
      var $sub69=((($53)-(1))|0);
      $Y68=$sub69;
      var $54=$Y68;
      var $shr71=$54 >>> 12;
      var $and72=$shr71 & 16;
      $K70=$and72;
      var $55=$K70;
      $N73=$55;
      var $56=$K70;
      var $57=$Y68;
      var $shr74=$57 >>> (($56)>>>0);
      $Y68=$shr74;
      var $58=$Y68;
      var $shr75=$58 >>> 5;
      var $and76=$shr75 & 8;
      $K70=$and76;
      var $59=$N73;
      var $add77=((($59)+($and76))|0);
      $N73=$add77;
      var $60=$K70;
      var $61=$Y68;
      var $shr78=$61 >>> (($60)>>>0);
      $Y68=$shr78;
      var $62=$Y68;
      var $shr79=$62 >>> 2;
      var $and80=$shr79 & 4;
      $K70=$and80;
      var $63=$N73;
      var $add81=((($63)+($and80))|0);
      $N73=$add81;
      var $64=$K70;
      var $65=$Y68;
      var $shr82=$65 >>> (($64)>>>0);
      $Y68=$shr82;
      var $66=$Y68;
      var $shr83=$66 >>> 1;
      var $and84=$shr83 & 2;
      $K70=$and84;
      var $67=$N73;
      var $add85=((($67)+($and84))|0);
      $N73=$add85;
      var $68=$K70;
      var $69=$Y68;
      var $shr86=$69 >>> (($68)>>>0);
      $Y68=$shr86;
      var $70=$Y68;
      var $shr87=$70 >>> 1;
      var $and88=$shr87 & 1;
      $K70=$and88;
      var $71=$N73;
      var $add89=((($71)+($and88))|0);
      $N73=$add89;
      var $72=$K70;
      var $73=$Y68;
      var $shr90=$73 >>> (($72)>>>0);
      $Y68=$shr90;
      var $74=$N73;
      var $75=$Y68;
      var $add91=((($74)+($75))|0);
      $i=$add91;
      var $76=$i;
      var $77=$m_addr;
      var $treebins92=(($77+304)|0);
      var $arrayidx93=(($treebins92+($76<<2))|0);
      var $78=HEAP32[(($arrayidx93)>>2)];
      $t=$78;
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $79=$t;
      var $cmp96=(($79)|0)!=0;
      if ($cmp96) { label = 31; break; } else { label = 37; break; }
    case 31: 
      var $80=$t;
      var $head98=(($80+4)|0);
      var $81=HEAP32[(($head98)>>2)];
      var $and99=$81 & -8;
      var $82=$nb_addr;
      var $sub100=((($and99)-($82))|0);
      $trem97=$sub100;
      var $83=$trem97;
      var $84=$rsize;
      var $cmp101=(($83)>>>0) < (($84)>>>0);
      if ($cmp101) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $85=$trem97;
      $rsize=$85;
      var $86=$t;
      $v=$86;
      label = 33; break;
    case 33: 
      var $87=$t;
      var $child104=(($87+16)|0);
      var $arrayidx105=(($child104)|0);
      var $88=HEAP32[(($arrayidx105)>>2)];
      var $cmp106=(($88)|0)!=0;
      if ($cmp106) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $89=$t;
      var $child108=(($89+16)|0);
      var $arrayidx109=(($child108)|0);
      var $90=HEAP32[(($arrayidx109)>>2)];
      var $cond114 = $90;label = 36; break;
    case 35: 
      var $91=$t;
      var $child111=(($91+16)|0);
      var $arrayidx112=(($child111+4)|0);
      var $92=HEAP32[(($arrayidx112)>>2)];
      var $cond114 = $92;label = 36; break;
    case 36: 
      var $cond114;
      $t=$cond114;
      label = 30; break;
    case 37: 
      var $93=$v;
      var $cmp115=(($93)|0)!=0;
      if ($cmp115) { label = 38; break; } else { label = 127; break; }
    case 38: 
      var $94=$rsize;
      var $95=$m_addr;
      var $dvsize=(($95+8)|0);
      var $96=HEAP32[(($dvsize)>>2)];
      var $97=$nb_addr;
      var $sub117=((($96)-($97))|0);
      var $cmp118=(($94)>>>0) < (($sub117)>>>0);
      if ($cmp118) { label = 39; break; } else { label = 127; break; }
    case 39: 
      var $98=$v;
      var $99=$98;
      var $100=$m_addr;
      var $least_addr=(($100+16)|0);
      var $101=HEAP32[(($least_addr)>>2)];
      var $cmp120=(($99)>>>0) >= (($101)>>>0);
      var $conv=(($cmp120)&1);
      var $expval=($conv);
      var $tobool=(($expval)|0)!=0;
      if ($tobool) { label = 40; break; } else { label = 126; break; }
    case 40: 
      var $102=$v;
      var $103=$102;
      var $104=$nb_addr;
      var $add_ptr=(($103+$104)|0);
      var $105=$add_ptr;
      $r=$105;
      var $106=$v;
      var $107=$106;
      var $108=$r;
      var $109=$108;
      var $cmp122=(($107)>>>0) < (($109)>>>0);
      var $conv123=(($cmp122)&1);
      var $expval124=($conv123);
      var $tobool125=(($expval124)|0)!=0;
      if ($tobool125) { label = 41; break; } else { label = 125; break; }
    case 41: 
      var $110=$v;
      var $parent=(($110+24)|0);
      var $111=HEAP32[(($parent)>>2)];
      $XP=$111;
      var $112=$v;
      var $bk=(($112+12)|0);
      var $113=HEAP32[(($bk)>>2)];
      var $114=$v;
      var $cmp127=(($113)|0)!=(($114)|0);
      if ($cmp127) { label = 42; break; } else { label = 46; break; }
    case 42: 
      var $115=$v;
      var $fd=(($115+8)|0);
      var $116=HEAP32[(($fd)>>2)];
      $F=$116;
      var $117=$v;
      var $bk130=(($117+12)|0);
      var $118=HEAP32[(($bk130)>>2)];
      $R=$118;
      var $119=$F;
      var $120=$119;
      var $121=$m_addr;
      var $least_addr131=(($121+16)|0);
      var $122=HEAP32[(($least_addr131)>>2)];
      var $cmp132=(($120)>>>0) >= (($122)>>>0);
      var $conv133=(($cmp132)&1);
      var $expval134=($conv133);
      var $tobool135=(($expval134)|0)!=0;
      if ($tobool135) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $123=$R;
      var $124=$F;
      var $bk137=(($124+12)|0);
      HEAP32[(($bk137)>>2)]=$123;
      var $125=$F;
      var $126=$R;
      var $fd138=(($126+8)|0);
      HEAP32[(($fd138)>>2)]=$125;
      label = 45; break;
    case 44: 
      _abort();

    case 45: 
      label = 58; break;
    case 46: 
      var $127=$v;
      var $child142=(($127+16)|0);
      var $arrayidx143=(($child142+4)|0);
      $RP=$arrayidx143;
      var $128=HEAP32[(($arrayidx143)>>2)];
      $R=$128;
      var $cmp144=(($128)|0)!=0;
      if ($cmp144) { label = 48; break; } else { label = 47; break; }
    case 47: 
      var $129=$v;
      var $child146=(($129+16)|0);
      var $arrayidx147=(($child146)|0);
      $RP=$arrayidx147;
      var $130=HEAP32[(($arrayidx147)>>2)];
      $R=$130;
      var $cmp148=(($130)|0)!=0;
      if ($cmp148) { label = 48; break; } else { label = 57; break; }
    case 48: 
      label = 49; break;
    case 49: 
      var $131=$R;
      var $child152=(($131+16)|0);
      var $arrayidx153=(($child152+4)|0);
      $CP=$arrayidx153;
      var $132=HEAP32[(($arrayidx153)>>2)];
      var $cmp154=(($132)|0)!=0;
      if ($cmp154) { var $135 = 1;label = 51; break; } else { label = 50; break; }
    case 50: 
      var $133=$R;
      var $child156=(($133+16)|0);
      var $arrayidx157=(($child156)|0);
      $CP=$arrayidx157;
      var $134=HEAP32[(($arrayidx157)>>2)];
      var $cmp158=(($134)|0)!=0;
      var $135 = $cmp158;label = 51; break;
    case 51: 
      var $135;
      if ($135) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $136=$CP;
      $RP=$136;
      var $137=HEAP32[(($136)>>2)];
      $R=$137;
      label = 49; break;
    case 53: 
      var $138=$RP;
      var $139=$138;
      var $140=$m_addr;
      var $least_addr162=(($140+16)|0);
      var $141=HEAP32[(($least_addr162)>>2)];
      var $cmp163=(($139)>>>0) >= (($141)>>>0);
      var $conv164=(($cmp163)&1);
      var $expval165=($conv164);
      var $tobool166=(($expval165)|0)!=0;
      if ($tobool166) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $142=$RP;
      HEAP32[(($142)>>2)]=0;
      label = 56; break;
    case 55: 
      _abort();

    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $143=$XP;
      var $cmp172=(($143)|0)!=0;
      if ($cmp172) { label = 59; break; } else { label = 86; break; }
    case 59: 
      var $144=$v;
      var $index=(($144+28)|0);
      var $145=HEAP32[(($index)>>2)];
      var $146=$m_addr;
      var $treebins175=(($146+304)|0);
      var $arrayidx176=(($treebins175+($145<<2))|0);
      $H=$arrayidx176;
      var $147=$v;
      var $148=$H;
      var $149=HEAP32[(($148)>>2)];
      var $cmp177=(($147)|0)==(($149)|0);
      if ($cmp177) { label = 60; break; } else { label = 63; break; }
    case 60: 
      var $150=$R;
      var $151=$H;
      HEAP32[(($151)>>2)]=$150;
      var $cmp180=(($150)|0)==0;
      if ($cmp180) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $152=$v;
      var $index183=(($152+28)|0);
      var $153=HEAP32[(($index183)>>2)];
      var $shl184=1 << $153;
      var $neg=$shl184 ^ -1;
      var $154=$m_addr;
      var $treemap185=(($154+4)|0);
      var $155=HEAP32[(($treemap185)>>2)];
      var $and186=$155 & $neg;
      HEAP32[(($treemap185)>>2)]=$and186;
      label = 62; break;
    case 62: 
      label = 70; break;
    case 63: 
      var $156=$XP;
      var $157=$156;
      var $158=$m_addr;
      var $least_addr189=(($158+16)|0);
      var $159=HEAP32[(($least_addr189)>>2)];
      var $cmp190=(($157)>>>0) >= (($159)>>>0);
      var $conv191=(($cmp190)&1);
      var $expval192=($conv191);
      var $tobool193=(($expval192)|0)!=0;
      if ($tobool193) { label = 64; break; } else { label = 68; break; }
    case 64: 
      var $160=$XP;
      var $child195=(($160+16)|0);
      var $arrayidx196=(($child195)|0);
      var $161=HEAP32[(($arrayidx196)>>2)];
      var $162=$v;
      var $cmp197=(($161)|0)==(($162)|0);
      if ($cmp197) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $163=$R;
      var $164=$XP;
      var $child200=(($164+16)|0);
      var $arrayidx201=(($child200)|0);
      HEAP32[(($arrayidx201)>>2)]=$163;
      label = 67; break;
    case 66: 
      var $165=$R;
      var $166=$XP;
      var $child203=(($166+16)|0);
      var $arrayidx204=(($child203+4)|0);
      HEAP32[(($arrayidx204)>>2)]=$165;
      label = 67; break;
    case 67: 
      label = 69; break;
    case 68: 
      _abort();

    case 69: 
      label = 70; break;
    case 70: 
      var $167=$R;
      var $cmp209=(($167)|0)!=0;
      if ($cmp209) { label = 71; break; } else { label = 85; break; }
    case 71: 
      var $168=$R;
      var $169=$168;
      var $170=$m_addr;
      var $least_addr212=(($170+16)|0);
      var $171=HEAP32[(($least_addr212)>>2)];
      var $cmp213=(($169)>>>0) >= (($171)>>>0);
      var $conv214=(($cmp213)&1);
      var $expval215=($conv214);
      var $tobool216=(($expval215)|0)!=0;
      if ($tobool216) { label = 72; break; } else { label = 83; break; }
    case 72: 
      var $172=$XP;
      var $173=$R;
      var $parent218=(($173+24)|0);
      HEAP32[(($parent218)>>2)]=$172;
      var $174=$v;
      var $child219=(($174+16)|0);
      var $arrayidx220=(($child219)|0);
      var $175=HEAP32[(($arrayidx220)>>2)];
      $C0=$175;
      var $cmp221=(($175)|0)!=0;
      if ($cmp221) { label = 73; break; } else { label = 77; break; }
    case 73: 
      var $176=$C0;
      var $177=$176;
      var $178=$m_addr;
      var $least_addr224=(($178+16)|0);
      var $179=HEAP32[(($least_addr224)>>2)];
      var $cmp225=(($177)>>>0) >= (($179)>>>0);
      var $conv226=(($cmp225)&1);
      var $expval227=($conv226);
      var $tobool228=(($expval227)|0)!=0;
      if ($tobool228) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $180=$C0;
      var $181=$R;
      var $child230=(($181+16)|0);
      var $arrayidx231=(($child230)|0);
      HEAP32[(($arrayidx231)>>2)]=$180;
      var $182=$R;
      var $183=$C0;
      var $parent232=(($183+24)|0);
      HEAP32[(($parent232)>>2)]=$182;
      label = 76; break;
    case 75: 
      _abort();

    case 76: 
      label = 77; break;
    case 77: 
      var $184=$v;
      var $child236=(($184+16)|0);
      var $arrayidx237=(($child236+4)|0);
      var $185=HEAP32[(($arrayidx237)>>2)];
      $C1=$185;
      var $cmp238=(($185)|0)!=0;
      if ($cmp238) { label = 78; break; } else { label = 82; break; }
    case 78: 
      var $186=$C1;
      var $187=$186;
      var $188=$m_addr;
      var $least_addr241=(($188+16)|0);
      var $189=HEAP32[(($least_addr241)>>2)];
      var $cmp242=(($187)>>>0) >= (($189)>>>0);
      var $conv243=(($cmp242)&1);
      var $expval244=($conv243);
      var $tobool245=(($expval244)|0)!=0;
      if ($tobool245) { label = 79; break; } else { label = 80; break; }
    case 79: 
      var $190=$C1;
      var $191=$R;
      var $child247=(($191+16)|0);
      var $arrayidx248=(($child247+4)|0);
      HEAP32[(($arrayidx248)>>2)]=$190;
      var $192=$R;
      var $193=$C1;
      var $parent249=(($193+24)|0);
      HEAP32[(($parent249)>>2)]=$192;
      label = 81; break;
    case 80: 
      _abort();

    case 81: 
      label = 82; break;
    case 82: 
      label = 84; break;
    case 83: 
      _abort();

    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      var $194=$rsize;
      var $cmp257=(($194)>>>0) < 16;
      if ($cmp257) { label = 87; break; } else { label = 88; break; }
    case 87: 
      var $195=$rsize;
      var $196=$nb_addr;
      var $add260=((($195)+($196))|0);
      var $or261=$add260 | 1;
      var $or262=$or261 | 2;
      var $197=$v;
      var $head263=(($197+4)|0);
      HEAP32[(($head263)>>2)]=$or262;
      var $198=$v;
      var $199=$198;
      var $200=$rsize;
      var $201=$nb_addr;
      var $add264=((($200)+($201))|0);
      var $add_ptr265=(($199+$add264)|0);
      var $202=$add_ptr265;
      var $head266=(($202+4)|0);
      var $203=HEAP32[(($head266)>>2)];
      var $or267=$203 | 1;
      HEAP32[(($head266)>>2)]=$or267;
      label = 124; break;
    case 88: 
      var $204=$nb_addr;
      var $or269=$204 | 1;
      var $or270=$or269 | 2;
      var $205=$v;
      var $head271=(($205+4)|0);
      HEAP32[(($head271)>>2)]=$or270;
      var $206=$rsize;
      var $or272=$206 | 1;
      var $207=$r;
      var $head273=(($207+4)|0);
      HEAP32[(($head273)>>2)]=$or272;
      var $208=$rsize;
      var $209=$r;
      var $210=$209;
      var $211=$rsize;
      var $add_ptr274=(($210+$211)|0);
      var $212=$add_ptr274;
      var $prev_foot=(($212)|0);
      HEAP32[(($prev_foot)>>2)]=$208;
      var $213=$rsize;
      var $shr275=$213 >>> 3;
      var $cmp276=(($shr275)>>>0) < 32;
      if ($cmp276) { label = 89; break; } else { label = 96; break; }
    case 89: 
      var $214=$rsize;
      var $shr279=$214 >>> 3;
      $I=$shr279;
      var $215=$I;
      var $shl280=$215 << 1;
      var $216=$m_addr;
      var $smallbins=(($216+40)|0);
      var $arrayidx281=(($smallbins+($shl280<<2))|0);
      var $217=$arrayidx281;
      var $218=$217;
      $B=$218;
      var $219=$B;
      $F282=$219;
      var $220=$m_addr;
      var $smallmap=(($220)|0);
      var $221=HEAP32[(($smallmap)>>2)];
      var $222=$I;
      var $shl283=1 << $222;
      var $and284=$221 & $shl283;
      var $tobool285=(($and284)|0)!=0;
      if ($tobool285) { label = 91; break; } else { label = 90; break; }
    case 90: 
      var $223=$I;
      var $shl287=1 << $223;
      var $224=$m_addr;
      var $smallmap288=(($224)|0);
      var $225=HEAP32[(($smallmap288)>>2)];
      var $or289=$225 | $shl287;
      HEAP32[(($smallmap288)>>2)]=$or289;
      label = 95; break;
    case 91: 
      var $226=$B;
      var $fd291=(($226+8)|0);
      var $227=HEAP32[(($fd291)>>2)];
      var $228=$227;
      var $229=$m_addr;
      var $least_addr292=(($229+16)|0);
      var $230=HEAP32[(($least_addr292)>>2)];
      var $cmp293=(($228)>>>0) >= (($230)>>>0);
      var $conv294=(($cmp293)&1);
      var $expval295=($conv294);
      var $tobool296=(($expval295)|0)!=0;
      if ($tobool296) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $231=$B;
      var $fd298=(($231+8)|0);
      var $232=HEAP32[(($fd298)>>2)];
      $F282=$232;
      label = 94; break;
    case 93: 
      _abort();

    case 94: 
      label = 95; break;
    case 95: 
      var $233=$r;
      var $234=$B;
      var $fd302=(($234+8)|0);
      HEAP32[(($fd302)>>2)]=$233;
      var $235=$r;
      var $236=$F282;
      var $bk303=(($236+12)|0);
      HEAP32[(($bk303)>>2)]=$235;
      var $237=$F282;
      var $238=$r;
      var $fd304=(($238+8)|0);
      HEAP32[(($fd304)>>2)]=$237;
      var $239=$B;
      var $240=$r;
      var $bk305=(($240+12)|0);
      HEAP32[(($bk305)>>2)]=$239;
      label = 123; break;
    case 96: 
      var $241=$r;
      var $242=$241;
      $TP=$242;
      var $243=$rsize;
      var $shr310=$243 >>> 8;
      $X309=$shr310;
      var $244=$X309;
      var $cmp311=(($244)|0)==0;
      if ($cmp311) { label = 97; break; } else { label = 98; break; }
    case 97: 
      $I308=0;
      label = 102; break;
    case 98: 
      var $245=$X309;
      var $cmp315=(($245)>>>0) > 65535;
      if ($cmp315) { label = 99; break; } else { label = 100; break; }
    case 99: 
      $I308=31;
      label = 101; break;
    case 100: 
      var $246=$X309;
      $Y319=$246;
      var $247=$Y319;
      var $sub321=((($247)-(256))|0);
      var $shr322=$sub321 >>> 16;
      var $and323=$shr322 & 8;
      $N320=$and323;
      var $248=$N320;
      var $249=$Y319;
      var $shl325=$249 << $248;
      $Y319=$shl325;
      var $sub326=((($shl325)-(4096))|0);
      var $shr327=$sub326 >>> 16;
      var $and328=$shr327 & 4;
      $K324=$and328;
      var $250=$K324;
      var $251=$N320;
      var $add329=((($251)+($250))|0);
      $N320=$add329;
      var $252=$K324;
      var $253=$Y319;
      var $shl330=$253 << $252;
      $Y319=$shl330;
      var $sub331=((($shl330)-(16384))|0);
      var $shr332=$sub331 >>> 16;
      var $and333=$shr332 & 2;
      $K324=$and333;
      var $254=$N320;
      var $add334=((($254)+($and333))|0);
      $N320=$add334;
      var $255=$N320;
      var $sub335=(((14)-($255))|0);
      var $256=$K324;
      var $257=$Y319;
      var $shl336=$257 << $256;
      $Y319=$shl336;
      var $shr337=$shl336 >>> 15;
      var $add338=((($sub335)+($shr337))|0);
      $K324=$add338;
      var $258=$K324;
      var $shl339=$258 << 1;
      var $259=$rsize;
      var $260=$K324;
      var $add340=((($260)+(7))|0);
      var $shr341=$259 >>> (($add340)>>>0);
      var $and342=$shr341 & 1;
      var $add343=((($shl339)+($and342))|0);
      $I308=$add343;
      label = 101; break;
    case 101: 
      label = 102; break;
    case 102: 
      var $261=$I308;
      var $262=$m_addr;
      var $treebins346=(($262+304)|0);
      var $arrayidx347=(($treebins346+($261<<2))|0);
      $H307=$arrayidx347;
      var $263=$I308;
      var $264=$TP;
      var $index348=(($264+28)|0);
      HEAP32[(($index348)>>2)]=$263;
      var $265=$TP;
      var $child349=(($265+16)|0);
      var $arrayidx350=(($child349+4)|0);
      HEAP32[(($arrayidx350)>>2)]=0;
      var $266=$TP;
      var $child351=(($266+16)|0);
      var $arrayidx352=(($child351)|0);
      HEAP32[(($arrayidx352)>>2)]=0;
      var $267=$m_addr;
      var $treemap353=(($267+4)|0);
      var $268=HEAP32[(($treemap353)>>2)];
      var $269=$I308;
      var $shl354=1 << $269;
      var $and355=$268 & $shl354;
      var $tobool356=(($and355)|0)!=0;
      if ($tobool356) { label = 104; break; } else { label = 103; break; }
    case 103: 
      var $270=$I308;
      var $shl358=1 << $270;
      var $271=$m_addr;
      var $treemap359=(($271+4)|0);
      var $272=HEAP32[(($treemap359)>>2)];
      var $or360=$272 | $shl358;
      HEAP32[(($treemap359)>>2)]=$or360;
      var $273=$TP;
      var $274=$H307;
      HEAP32[(($274)>>2)]=$273;
      var $275=$H307;
      var $276=$275;
      var $277=$TP;
      var $parent361=(($277+24)|0);
      HEAP32[(($parent361)>>2)]=$276;
      var $278=$TP;
      var $279=$TP;
      var $bk362=(($279+12)|0);
      HEAP32[(($bk362)>>2)]=$278;
      var $280=$TP;
      var $fd363=(($280+8)|0);
      HEAP32[(($fd363)>>2)]=$278;
      label = 122; break;
    case 104: 
      var $281=$H307;
      var $282=HEAP32[(($281)>>2)];
      $T=$282;
      var $283=$rsize;
      var $284=$I308;
      var $cmp366=(($284)|0)==31;
      if ($cmp366) { label = 105; break; } else { label = 106; break; }
    case 105: 
      var $cond375 = 0;label = 107; break;
    case 106: 
      var $285=$I308;
      var $shr370=$285 >>> 1;
      var $add371=((($shr370)+(8))|0);
      var $sub372=((($add371)-(2))|0);
      var $sub373=(((31)-($sub372))|0);
      var $cond375 = $sub373;label = 107; break;
    case 107: 
      var $cond375;
      var $shl376=$283 << $cond375;
      $K365=$shl376;
      label = 108; break;
    case 108: 
      var $286=$T;
      var $head378=(($286+4)|0);
      var $287=HEAP32[(($head378)>>2)];
      var $and379=$287 & -8;
      var $288=$rsize;
      var $cmp380=(($and379)|0)!=(($288)|0);
      if ($cmp380) { label = 109; break; } else { label = 115; break; }
    case 109: 
      var $289=$K365;
      var $shr383=$289 >>> 31;
      var $and384=$shr383 & 1;
      var $290=$T;
      var $child385=(($290+16)|0);
      var $arrayidx386=(($child385+($and384<<2))|0);
      $C=$arrayidx386;
      var $291=$K365;
      var $shl387=$291 << 1;
      $K365=$shl387;
      var $292=$C;
      var $293=HEAP32[(($292)>>2)];
      var $cmp388=(($293)|0)!=0;
      if ($cmp388) { label = 110; break; } else { label = 111; break; }
    case 110: 
      var $294=$C;
      var $295=HEAP32[(($294)>>2)];
      $T=$295;
      label = 114; break;
    case 111: 
      var $296=$C;
      var $297=$296;
      var $298=$m_addr;
      var $least_addr392=(($298+16)|0);
      var $299=HEAP32[(($least_addr392)>>2)];
      var $cmp393=(($297)>>>0) >= (($299)>>>0);
      var $conv394=(($cmp393)&1);
      var $expval395=($conv394);
      var $tobool396=(($expval395)|0)!=0;
      if ($tobool396) { label = 112; break; } else { label = 113; break; }
    case 112: 
      var $300=$TP;
      var $301=$C;
      HEAP32[(($301)>>2)]=$300;
      var $302=$T;
      var $303=$TP;
      var $parent398=(($303+24)|0);
      HEAP32[(($parent398)>>2)]=$302;
      var $304=$TP;
      var $305=$TP;
      var $bk399=(($305+12)|0);
      HEAP32[(($bk399)>>2)]=$304;
      var $306=$TP;
      var $fd400=(($306+8)|0);
      HEAP32[(($fd400)>>2)]=$304;
      label = 121; break;
    case 113: 
      _abort();

    case 114: 
      label = 120; break;
    case 115: 
      var $307=$T;
      var $fd405=(($307+8)|0);
      var $308=HEAP32[(($fd405)>>2)];
      $F404=$308;
      var $309=$T;
      var $310=$309;
      var $311=$m_addr;
      var $least_addr406=(($311+16)|0);
      var $312=HEAP32[(($least_addr406)>>2)];
      var $cmp407=(($310)>>>0) >= (($312)>>>0);
      if ($cmp407) { label = 116; break; } else { var $317 = 0;label = 117; break; }
    case 116: 
      var $313=$F404;
      var $314=$313;
      var $315=$m_addr;
      var $least_addr409=(($315+16)|0);
      var $316=HEAP32[(($least_addr409)>>2)];
      var $cmp410=(($314)>>>0) >= (($316)>>>0);
      var $317 = $cmp410;label = 117; break;
    case 117: 
      var $317;
      var $land_ext=(($317)&1);
      var $expval412=($land_ext);
      var $tobool413=(($expval412)|0)!=0;
      if ($tobool413) { label = 118; break; } else { label = 119; break; }
    case 118: 
      var $318=$TP;
      var $319=$F404;
      var $bk415=(($319+12)|0);
      HEAP32[(($bk415)>>2)]=$318;
      var $320=$T;
      var $fd416=(($320+8)|0);
      HEAP32[(($fd416)>>2)]=$318;
      var $321=$F404;
      var $322=$TP;
      var $fd417=(($322+8)|0);
      HEAP32[(($fd417)>>2)]=$321;
      var $323=$T;
      var $324=$TP;
      var $bk418=(($324+12)|0);
      HEAP32[(($bk418)>>2)]=$323;
      var $325=$TP;
      var $parent419=(($325+24)|0);
      HEAP32[(($parent419)>>2)]=0;
      label = 121; break;
    case 119: 
      _abort();

    case 120: 
      label = 108; break;
    case 121: 
      label = 122; break;
    case 122: 
      label = 123; break;
    case 123: 
      label = 124; break;
    case 124: 
      var $326=$v;
      var $327=$326;
      var $add_ptr426=(($327+8)|0);
      $retval=$add_ptr426;
      label = 128; break;
    case 125: 
      label = 126; break;
    case 126: 
      _abort();

    case 127: 
      $retval=0;
      label = 128; break;
    case 128: 
      var $328=$retval;

      return $328;
  }

}
_tmalloc_large["X"]=1;

function _sys_alloc($m, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $nb_addr;
      var $tbase;
      var $tsize;
      var $mmap_flag;
      var $mem;
      var $br;
      var $ss;
      var $asize;
      var $base;
      var $esize;
      var $end;
      var $asize97;
      var $br106;
      var $end107;
      var $ssize;
      var $mn;
      var $sp;
      var $oldbase;
      var $rsize;
      var $p;
      var $r;
      $m_addr=$m;
      $nb_addr=$nb;
      $tbase=-1;
      $tsize=0;
      $mmap_flag=0;
      var $0=HEAP32[((((5243280)|0))>>2)];
      var $cmp=(($0)|0)!=0;
      if ($cmp) { var $1 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $call=_init_mparams();
      var $tobool=(($call)|0)!=0;
      var $1 = $tobool;label = 4; break;
    case 4: 
      var $1;
      var $lor_ext=(($1)&1);
      var $2=$m_addr;
      var $mflags=(($2+440)|0);
      var $3=HEAP32[(($mflags)>>2)];
      var $and=$3 & 0;
      var $tobool1=(($and)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 10; break; }
    case 5: 
      var $4=$nb_addr;
      var $5=HEAP32[((((5243292)|0))>>2)];
      var $cmp2=(($4)>>>0) >= (($5)>>>0);
      if ($cmp2) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $6=$m_addr;
      var $topsize=(($6+12)|0);
      var $7=HEAP32[(($topsize)>>2)];
      var $cmp4=(($7)|0)!=0;
      if ($cmp4) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $8=$m_addr;
      var $9=$nb_addr;
      var $call5=_mmap_alloc($8, $9);
      $mem=$call5;
      var $10=$mem;
      var $cmp6=(($10)|0)!=0;
      if ($cmp6) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $11=$mem;
      $retval=$11;
      label = 93; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $12=$m_addr;
      var $mflags9=(($12+440)|0);
      var $13=HEAP32[(($mflags9)>>2)];
      var $and10=$13 & 4;
      var $tobool11=(($and10)|0)!=0;
      if ($tobool11) { label = 43; break; } else { label = 11; break; }
    case 11: 
      $br=-1;
      var $14=$m_addr;
      var $top=(($14+24)|0);
      var $15=HEAP32[(($top)>>2)];
      var $cmp13=(($15)|0)==0;
      if ($cmp13) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $cond = 0;label = 14; break;
    case 13: 
      var $16=$m_addr;
      var $17=$m_addr;
      var $top14=(($17+24)|0);
      var $18=HEAP32[(($top14)>>2)];
      var $19=$18;
      var $call15=_segment_holding($16, $19);
      var $cond = $call15;label = 14; break;
    case 14: 
      var $cond;
      $ss=$cond;
      $asize=0;
      var $20=$ss;
      var $cmp16=(($20)|0)==0;
      if ($cmp16) { label = 15; break; } else { label = 23; break; }
    case 15: 
      var $call18=_sbrk(0);
      $base=$call18;
      var $21=$base;
      var $cmp19=(($21)|0)!=-1;
      if ($cmp19) { label = 16; break; } else { label = 22; break; }
    case 16: 
      var $22=$nb_addr;
      var $add=((($22)+(48))|0);
      var $23=HEAP32[((((5243288)|0))>>2)];
      var $sub=((($23)-(1))|0);
      var $add21=((($add)+($sub))|0);
      var $24=HEAP32[((((5243288)|0))>>2)];
      var $sub22=((($24)-(1))|0);
      var $neg=$sub22 ^ -1;
      var $and23=$add21 & $neg;
      $asize=$and23;
      var $25=$base;
      var $26=$25;
      var $27=HEAP32[((((5243284)|0))>>2)];
      var $sub24=((($27)-(1))|0);
      var $and25=$26 & $sub24;
      var $cmp26=(($and25)|0)==0;
      if ($cmp26) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $28=$base;
      var $29=$28;
      var $30=HEAP32[((((5243284)|0))>>2)];
      var $sub28=((($30)-(1))|0);
      var $add29=((($29)+($sub28))|0);
      var $31=HEAP32[((((5243284)|0))>>2)];
      var $sub30=((($31)-(1))|0);
      var $neg31=$sub30 ^ -1;
      var $and32=$add29 & $neg31;
      var $32=$base;
      var $33=$32;
      var $sub33=((($and32)-($33))|0);
      var $34=$asize;
      var $add34=((($34)+($sub33))|0);
      $asize=$add34;
      label = 18; break;
    case 18: 
      var $35=$asize;
      var $cmp36=(($35)>>>0) < 2147483647;
      if ($cmp36) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $36=$asize;
      var $call38=_sbrk($36);
      $br=$call38;
      var $37=$base;
      var $cmp39=(($call38)|0)==(($37)|0);
      if ($cmp39) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $38=$base;
      $tbase=$38;
      var $39=$asize;
      $tsize=$39;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 27; break;
    case 23: 
      var $40=$nb_addr;
      var $41=$m_addr;
      var $topsize43=(($41+12)|0);
      var $42=HEAP32[(($topsize43)>>2)];
      var $sub44=((($40)-($42))|0);
      var $add45=((($sub44)+(48))|0);
      var $43=HEAP32[((((5243288)|0))>>2)];
      var $sub46=((($43)-(1))|0);
      var $add47=((($add45)+($sub46))|0);
      var $44=HEAP32[((((5243288)|0))>>2)];
      var $sub48=((($44)-(1))|0);
      var $neg49=$sub48 ^ -1;
      var $and50=$add47 & $neg49;
      $asize=$and50;
      var $45=$asize;
      var $cmp51=(($45)>>>0) < 2147483647;
      if ($cmp51) { label = 24; break; } else { label = 26; break; }
    case 24: 
      var $46=$asize;
      var $call53=_sbrk($46);
      $br=$call53;
      var $47=$ss;
      var $base54=(($47)|0);
      var $48=HEAP32[(($base54)>>2)];
      var $49=$ss;
      var $size=(($49+4)|0);
      var $50=HEAP32[(($size)>>2)];
      var $add_ptr=(($48+$50)|0);
      var $cmp55=(($call53)|0)==(($add_ptr)|0);
      if ($cmp55) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $51=$br;
      $tbase=$51;
      var $52=$asize;
      $tsize=$52;
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $53=$tbase;
      var $cmp59=(($53)|0)==-1;
      if ($cmp59) { label = 28; break; } else { label = 42; break; }
    case 28: 
      var $54=$br;
      var $cmp61=(($54)|0)!=-1;
      if ($cmp61) { label = 29; break; } else { label = 38; break; }
    case 29: 
      var $55=$asize;
      var $cmp63=(($55)>>>0) < 2147483647;
      if ($cmp63) { label = 30; break; } else { label = 37; break; }
    case 30: 
      var $56=$asize;
      var $57=$nb_addr;
      var $add65=((($57)+(48))|0);
      var $cmp66=(($56)>>>0) < (($add65)>>>0);
      if ($cmp66) { label = 31; break; } else { label = 37; break; }
    case 31: 
      var $58=$nb_addr;
      var $add68=((($58)+(48))|0);
      var $59=$asize;
      var $sub69=((($add68)-($59))|0);
      var $60=HEAP32[((((5243288)|0))>>2)];
      var $sub70=((($60)-(1))|0);
      var $add71=((($sub69)+($sub70))|0);
      var $61=HEAP32[((((5243288)|0))>>2)];
      var $sub72=((($61)-(1))|0);
      var $neg73=$sub72 ^ -1;
      var $and74=$add71 & $neg73;
      $esize=$and74;
      var $62=$esize;
      var $cmp75=(($62)>>>0) < 2147483647;
      if ($cmp75) { label = 32; break; } else { label = 36; break; }
    case 32: 
      var $63=$esize;
      var $call77=_sbrk($63);
      $end=$call77;
      var $64=$end;
      var $cmp78=(($64)|0)!=-1;
      if ($cmp78) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $65=$esize;
      var $66=$asize;
      var $add80=((($66)+($65))|0);
      $asize=$add80;
      label = 35; break;
    case 34: 
      var $67=$asize;
      var $sub82=(((-$67))|0);
      var $call83=_sbrk($sub82);
      $br=-1;
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $68=$br;
      var $cmp88=(($68)|0)!=-1;
      if ($cmp88) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $69=$br;
      $tbase=$69;
      var $70=$asize;
      $tsize=$70;
      label = 41; break;
    case 40: 
      var $71=$m_addr;
      var $mflags91=(($71+440)|0);
      var $72=HEAP32[(($mflags91)>>2)];
      var $or=$72 | 4;
      HEAP32[(($mflags91)>>2)]=$or;
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $73=$tbase;
      var $cmp95=(($73)|0)==-1;
      if ($cmp95) { label = 44; break; } else { label = 53; break; }
    case 44: 
      var $74=$nb_addr;
      var $add98=((($74)+(48))|0);
      var $75=HEAP32[((((5243288)|0))>>2)];
      var $sub99=((($75)-(1))|0);
      var $add100=((($add98)+($sub99))|0);
      var $76=HEAP32[((((5243288)|0))>>2)];
      var $sub101=((($76)-(1))|0);
      var $neg102=$sub101 ^ -1;
      var $and103=$add100 & $neg102;
      $asize97=$and103;
      var $77=$asize97;
      var $cmp104=(($77)>>>0) < 2147483647;
      if ($cmp104) { label = 45; break; } else { label = 52; break; }
    case 45: 
      $br106=-1;
      $end107=-1;
      var $78=$asize97;
      var $call108=_sbrk($78);
      $br106=$call108;
      var $call109=_sbrk(0);
      $end107=$call109;
      var $79=$br106;
      var $cmp110=(($79)|0)!=-1;
      if ($cmp110) { label = 46; break; } else { label = 51; break; }
    case 46: 
      var $80=$end107;
      var $cmp112=(($80)|0)!=-1;
      if ($cmp112) { label = 47; break; } else { label = 51; break; }
    case 47: 
      var $81=$br106;
      var $82=$end107;
      var $cmp114=(($81)>>>0) < (($82)>>>0);
      if ($cmp114) { label = 48; break; } else { label = 51; break; }
    case 48: 
      var $83=$end107;
      var $84=$br106;
      var $sub_ptr_lhs_cast=$83;
      var $sub_ptr_rhs_cast=$84;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $ssize=$sub_ptr_sub;
      var $85=$ssize;
      var $86=$nb_addr;
      var $add116=((($86)+(40))|0);
      var $cmp117=(($85)>>>0) > (($add116)>>>0);
      if ($cmp117) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $87=$br106;
      $tbase=$87;
      var $88=$ssize;
      $tsize=$88;
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $89=$tbase;
      var $cmp123=(($89)|0)!=-1;
      if ($cmp123) { label = 54; break; } else { label = 92; break; }
    case 54: 
      var $90=$tsize;
      var $91=$m_addr;
      var $footprint=(($91+432)|0);
      var $92=HEAP32[(($footprint)>>2)];
      var $add125=((($92)+($90))|0);
      HEAP32[(($footprint)>>2)]=$add125;
      var $93=$m_addr;
      var $max_footprint=(($93+436)|0);
      var $94=HEAP32[(($max_footprint)>>2)];
      var $cmp126=(($add125)>>>0) > (($94)>>>0);
      if ($cmp126) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $95=$m_addr;
      var $footprint128=(($95+432)|0);
      var $96=HEAP32[(($footprint128)>>2)];
      var $97=$m_addr;
      var $max_footprint129=(($97+436)|0);
      HEAP32[(($max_footprint129)>>2)]=$96;
      label = 56; break;
    case 56: 
      var $98=$m_addr;
      var $top131=(($98+24)|0);
      var $99=HEAP32[(($top131)>>2)];
      var $cmp132=(($99)|0)!=0;
      if ($cmp132) { label = 64; break; } else { label = 57; break; }
    case 57: 
      var $100=$m_addr;
      var $least_addr=(($100+16)|0);
      var $101=HEAP32[(($least_addr)>>2)];
      var $cmp134=(($101)|0)==0;
      if ($cmp134) { label = 59; break; } else { label = 58; break; }
    case 58: 
      var $102=$tbase;
      var $103=$m_addr;
      var $least_addr135=(($103+16)|0);
      var $104=HEAP32[(($least_addr135)>>2)];
      var $cmp136=(($102)>>>0) < (($104)>>>0);
      if ($cmp136) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $105=$tbase;
      var $106=$m_addr;
      var $least_addr138=(($106+16)|0);
      HEAP32[(($least_addr138)>>2)]=$105;
      label = 60; break;
    case 60: 
      var $107=$tbase;
      var $108=$m_addr;
      var $seg=(($108+444)|0);
      var $base140=(($seg)|0);
      HEAP32[(($base140)>>2)]=$107;
      var $109=$tsize;
      var $110=$m_addr;
      var $seg141=(($110+444)|0);
      var $size142=(($seg141+4)|0);
      HEAP32[(($size142)>>2)]=$109;
      var $111=$mmap_flag;
      var $112=$m_addr;
      var $seg143=(($112+444)|0);
      var $sflags=(($seg143+12)|0);
      HEAP32[(($sflags)>>2)]=$111;
      var $113=HEAP32[((((5243280)|0))>>2)];
      var $114=$m_addr;
      var $magic=(($114+36)|0);
      HEAP32[(($magic)>>2)]=$113;
      var $115=$m_addr;
      var $release_checks=(($115+32)|0);
      HEAP32[(($release_checks)>>2)]=-1;
      var $116=$m_addr;
      _init_bins($116);
      var $117=$m_addr;
      var $cmp144=(($117)|0)==5253776;
      if ($cmp144) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $118=$m_addr;
      var $119=$tbase;
      var $120=$119;
      var $121=$tsize;
      var $sub146=((($121)-(40))|0);
      _init_top($118, $120, $sub146);
      label = 63; break;
    case 62: 
      var $122=$m_addr;
      var $123=$122;
      var $add_ptr148=((($123)-(8))|0);
      var $124=$add_ptr148;
      var $125=$124;
      var $126=$m_addr;
      var $127=$126;
      var $add_ptr149=((($127)-(8))|0);
      var $128=$add_ptr149;
      var $head=(($128+4)|0);
      var $129=HEAP32[(($head)>>2)];
      var $and150=$129 & -8;
      var $add_ptr151=(($125+$and150)|0);
      var $130=$add_ptr151;
      $mn=$130;
      var $131=$m_addr;
      var $132=$mn;
      var $133=$tbase;
      var $134=$tsize;
      var $add_ptr152=(($133+$134)|0);
      var $135=$mn;
      var $136=$135;
      var $sub_ptr_lhs_cast153=$add_ptr152;
      var $sub_ptr_rhs_cast154=$136;
      var $sub_ptr_sub155=((($sub_ptr_lhs_cast153)-($sub_ptr_rhs_cast154))|0);
      var $sub156=((($sub_ptr_sub155)-(40))|0);
      _init_top($131, $132, $sub156);
      label = 63; break;
    case 63: 
      label = 89; break;
    case 64: 
      var $137=$m_addr;
      var $seg159=(($137+444)|0);
      $sp=$seg159;
      label = 65; break;
    case 65: 
      var $138=$sp;
      var $cmp160=(($138)|0)!=0;
      if ($cmp160) { label = 66; break; } else { var $144 = 0;label = 67; break; }
    case 66: 
      var $139=$tbase;
      var $140=$sp;
      var $base161=(($140)|0);
      var $141=HEAP32[(($base161)>>2)];
      var $142=$sp;
      var $size162=(($142+4)|0);
      var $143=HEAP32[(($size162)>>2)];
      var $add_ptr163=(($141+$143)|0);
      var $cmp164=(($139)|0)!=(($add_ptr163)|0);
      var $144 = $cmp164;label = 67; break;
    case 67: 
      var $144;
      if ($144) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $145=$sp;
      var $next=(($145+8)|0);
      var $146=HEAP32[(($next)>>2)];
      $sp=$146;
      label = 65; break;
    case 69: 
      var $147=$sp;
      var $cmp165=(($147)|0)!=0;
      if ($cmp165) { label = 70; break; } else { label = 75; break; }
    case 70: 
      var $148=$sp;
      var $sflags167=(($148+12)|0);
      var $149=HEAP32[(($sflags167)>>2)];
      var $and168=$149 & 8;
      var $tobool169=(($and168)|0)!=0;
      if ($tobool169) { label = 75; break; } else { label = 71; break; }
    case 71: 
      var $150=$sp;
      var $sflags171=(($150+12)|0);
      var $151=HEAP32[(($sflags171)>>2)];
      var $and172=$151 & 0;
      var $152=$mmap_flag;
      var $cmp173=(($and172)|0)==(($152)|0);
      if ($cmp173) { label = 72; break; } else { label = 75; break; }
    case 72: 
      var $153=$m_addr;
      var $top175=(($153+24)|0);
      var $154=HEAP32[(($top175)>>2)];
      var $155=$154;
      var $156=$sp;
      var $base176=(($156)|0);
      var $157=HEAP32[(($base176)>>2)];
      var $cmp177=(($155)>>>0) >= (($157)>>>0);
      if ($cmp177) { label = 73; break; } else { label = 75; break; }
    case 73: 
      var $158=$m_addr;
      var $top179=(($158+24)|0);
      var $159=HEAP32[(($top179)>>2)];
      var $160=$159;
      var $161=$sp;
      var $base180=(($161)|0);
      var $162=HEAP32[(($base180)>>2)];
      var $163=$sp;
      var $size181=(($163+4)|0);
      var $164=HEAP32[(($size181)>>2)];
      var $add_ptr182=(($162+$164)|0);
      var $cmp183=(($160)>>>0) < (($add_ptr182)>>>0);
      if ($cmp183) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $165=$tsize;
      var $166=$sp;
      var $size185=(($166+4)|0);
      var $167=HEAP32[(($size185)>>2)];
      var $add186=((($167)+($165))|0);
      HEAP32[(($size185)>>2)]=$add186;
      var $168=$m_addr;
      var $169=$m_addr;
      var $top187=(($169+24)|0);
      var $170=HEAP32[(($top187)>>2)];
      var $171=$m_addr;
      var $topsize188=(($171+12)|0);
      var $172=HEAP32[(($topsize188)>>2)];
      var $173=$tsize;
      var $add189=((($172)+($173))|0);
      _init_top($168, $170, $add189);
      label = 88; break;
    case 75: 
      var $174=$tbase;
      var $175=$m_addr;
      var $least_addr191=(($175+16)|0);
      var $176=HEAP32[(($least_addr191)>>2)];
      var $cmp192=(($174)>>>0) < (($176)>>>0);
      if ($cmp192) { label = 76; break; } else { label = 77; break; }
    case 76: 
      var $177=$tbase;
      var $178=$m_addr;
      var $least_addr194=(($178+16)|0);
      HEAP32[(($least_addr194)>>2)]=$177;
      label = 77; break;
    case 77: 
      var $179=$m_addr;
      var $seg196=(($179+444)|0);
      $sp=$seg196;
      label = 78; break;
    case 78: 
      var $180=$sp;
      var $cmp198=(($180)|0)!=0;
      if ($cmp198) { label = 79; break; } else { var $185 = 0;label = 80; break; }
    case 79: 
      var $181=$sp;
      var $base200=(($181)|0);
      var $182=HEAP32[(($base200)>>2)];
      var $183=$tbase;
      var $184=$tsize;
      var $add_ptr201=(($183+$184)|0);
      var $cmp202=(($182)|0)!=(($add_ptr201)|0);
      var $185 = $cmp202;label = 80; break;
    case 80: 
      var $185;
      if ($185) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $186=$sp;
      var $next205=(($186+8)|0);
      var $187=HEAP32[(($next205)>>2)];
      $sp=$187;
      label = 78; break;
    case 82: 
      var $188=$sp;
      var $cmp207=(($188)|0)!=0;
      if ($cmp207) { label = 83; break; } else { label = 86; break; }
    case 83: 
      var $189=$sp;
      var $sflags209=(($189+12)|0);
      var $190=HEAP32[(($sflags209)>>2)];
      var $and210=$190 & 8;
      var $tobool211=(($and210)|0)!=0;
      if ($tobool211) { label = 86; break; } else { label = 84; break; }
    case 84: 
      var $191=$sp;
      var $sflags213=(($191+12)|0);
      var $192=HEAP32[(($sflags213)>>2)];
      var $and214=$192 & 0;
      var $193=$mmap_flag;
      var $cmp215=(($and214)|0)==(($193)|0);
      if ($cmp215) { label = 85; break; } else { label = 86; break; }
    case 85: 
      var $194=$sp;
      var $base217=(($194)|0);
      var $195=HEAP32[(($base217)>>2)];
      $oldbase=$195;
      var $196=$tbase;
      var $197=$sp;
      var $base218=(($197)|0);
      HEAP32[(($base218)>>2)]=$196;
      var $198=$tsize;
      var $199=$sp;
      var $size219=(($199+4)|0);
      var $200=HEAP32[(($size219)>>2)];
      var $add220=((($200)+($198))|0);
      HEAP32[(($size219)>>2)]=$add220;
      var $201=$m_addr;
      var $202=$tbase;
      var $203=$oldbase;
      var $204=$nb_addr;
      var $call221=_prepend_alloc($201, $202, $203, $204);
      $retval=$call221;
      label = 93; break;
    case 86: 
      var $205=$m_addr;
      var $206=$tbase;
      var $207=$tsize;
      var $208=$mmap_flag;
      _add_segment($205, $206, $207, $208);
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      var $209=$nb_addr;
      var $210=$m_addr;
      var $topsize226=(($210+12)|0);
      var $211=HEAP32[(($topsize226)>>2)];
      var $cmp227=(($209)>>>0) < (($211)>>>0);
      if ($cmp227) { label = 90; break; } else { label = 91; break; }
    case 90: 
      var $212=$nb_addr;
      var $213=$m_addr;
      var $topsize229=(($213+12)|0);
      var $214=HEAP32[(($topsize229)>>2)];
      var $sub230=((($214)-($212))|0);
      HEAP32[(($topsize229)>>2)]=$sub230;
      $rsize=$sub230;
      var $215=$m_addr;
      var $top231=(($215+24)|0);
      var $216=HEAP32[(($top231)>>2)];
      $p=$216;
      var $217=$p;
      var $218=$217;
      var $219=$nb_addr;
      var $add_ptr232=(($218+$219)|0);
      var $220=$add_ptr232;
      var $221=$m_addr;
      var $top233=(($221+24)|0);
      HEAP32[(($top233)>>2)]=$220;
      $r=$220;
      var $222=$rsize;
      var $or234=$222 | 1;
      var $223=$r;
      var $head235=(($223+4)|0);
      HEAP32[(($head235)>>2)]=$or234;
      var $224=$nb_addr;
      var $or236=$224 | 1;
      var $or237=$or236 | 2;
      var $225=$p;
      var $head238=(($225+4)|0);
      HEAP32[(($head238)>>2)]=$or237;
      var $226=$p;
      var $227=$226;
      var $add_ptr239=(($227+8)|0);
      $retval=$add_ptr239;
      label = 93; break;
    case 91: 
      label = 92; break;
    case 92: 
      var $call242=___errno_location();
      HEAP32[(($call242)>>2)]=12;
      $retval=0;
      label = 93; break;
    case 93: 
      var $228=$retval;

      return $228;
  }

}
_sys_alloc["X"]=1;

function _free($mem) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mem_addr;
      var $p;
      var $psize;
      var $next;
      var $prevsize;
      var $prev;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F60;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F245;
      var $B247;
      var $I249;
      var $TP285;
      var $XP286;
      var $R288;
      var $F293;
      var $RP306;
      var $CP317;
      var $H343;
      var $C0385;
      var $C1386;
      var $I447;
      var $B449;
      var $F452;
      var $tp;
      var $H475;
      var $I476;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K525;
      var $C;
      var $F558;
      $mem_addr=$mem;
      var $0=$mem_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 197; break; }
    case 3: 
      var $1=$mem_addr;
      var $add_ptr=((($1)-(8))|0);
      var $2=$add_ptr;
      $p=$2;
      var $3=$p;
      var $4=$3;
      var $5=HEAP32[((((5253792)|0))>>2)];
      var $cmp1=(($4)>>>0) >= (($5)>>>0);
      if ($cmp1) { label = 4; break; } else { var $8 = 0;label = 5; break; }
    case 4: 
      var $6=$p;
      var $head=(($6+4)|0);
      var $7=HEAP32[(($head)>>2)];
      var $and=$7 & 3;
      var $cmp2=(($and)|0)!=1;
      var $8 = $cmp2;label = 5; break;
    case 5: 
      var $8;
      var $land_ext=(($8)&1);
      var $expval=($land_ext);
      var $tobool=(($expval)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 194; break; }
    case 6: 
      var $9=$p;
      var $head4=(($9+4)|0);
      var $10=HEAP32[(($head4)>>2)];
      var $and5=$10 & -8;
      $psize=$and5;
      var $11=$p;
      var $12=$11;
      var $13=$psize;
      var $add_ptr6=(($12+$13)|0);
      var $14=$add_ptr6;
      $next=$14;
      var $15=$p;
      var $head7=(($15+4)|0);
      var $16=HEAP32[(($head7)>>2)];
      var $and8=$16 & 1;
      var $tobool9=(($and8)|0)!=0;
      if ($tobool9) { label = 78; break; } else { label = 7; break; }
    case 7: 
      var $17=$p;
      var $prev_foot=(($17)|0);
      var $18=HEAP32[(($prev_foot)>>2)];
      $prevsize=$18;
      var $19=$p;
      var $head11=(($19+4)|0);
      var $20=HEAP32[(($head11)>>2)];
      var $and12=$20 & 3;
      var $cmp13=(($and12)|0)==0;
      if ($cmp13) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $21=$prevsize;
      var $add=((($21)+(16))|0);
      var $22=$psize;
      var $add15=((($22)+($add))|0);
      $psize=$add15;
      label = 196; break;
    case 9: 
      var $23=$p;
      var $24=$23;
      var $25=$prevsize;
      var $idx_neg=(((-$25))|0);
      var $add_ptr16=(($24+$idx_neg)|0);
      var $26=$add_ptr16;
      $prev=$26;
      var $27=$prevsize;
      var $28=$psize;
      var $add17=((($28)+($27))|0);
      $psize=$add17;
      var $29=$prev;
      $p=$29;
      var $30=$prev;
      var $31=$30;
      var $32=HEAP32[((((5253792)|0))>>2)];
      var $cmp18=(($31)>>>0) >= (($32)>>>0);
      var $conv=(($cmp18)&1);
      var $expval19=($conv);
      var $tobool20=(($expval19)|0)!=0;
      if ($tobool20) { label = 10; break; } else { label = 75; break; }
    case 10: 
      var $33=$p;
      var $34=HEAP32[((((5253796)|0))>>2)];
      var $cmp22=(($33)|0)!=(($34)|0);
      if ($cmp22) { label = 11; break; } else { label = 71; break; }
    case 11: 
      var $35=$prevsize;
      var $shr=$35 >>> 3;
      var $cmp25=(($shr)>>>0) < 32;
      if ($cmp25) { label = 12; break; } else { label = 24; break; }
    case 12: 
      var $36=$p;
      var $fd=(($36+8)|0);
      var $37=HEAP32[(($fd)>>2)];
      $F=$37;
      var $38=$p;
      var $bk=(($38+12)|0);
      var $39=HEAP32[(($bk)>>2)];
      $B=$39;
      var $40=$prevsize;
      var $shr28=$40 >>> 3;
      $I=$shr28;
      var $41=$F;
      var $42=$B;
      var $cmp29=(($41)|0)==(($42)|0);
      if ($cmp29) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $43=$I;
      var $shl=1 << $43;
      var $neg=$shl ^ -1;
      var $44=HEAP32[((((5253776)|0))>>2)];
      var $and32=$44 & $neg;
      HEAP32[((((5253776)|0))>>2)]=$and32;
      label = 23; break;
    case 14: 
      var $45=$F;
      var $46=$I;
      var $shl34=$46 << 1;
      var $arrayidx=((((5253816)|0)+($shl34<<2))|0);
      var $47=$arrayidx;
      var $48=$47;
      var $cmp35=(($45)|0)==(($48)|0);
      if ($cmp35) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $49=$F;
      var $50=$49;
      var $51=HEAP32[((((5253792)|0))>>2)];
      var $cmp37=(($50)>>>0) >= (($51)>>>0);
      if ($cmp37) { label = 16; break; } else { var $60 = 0;label = 19; break; }
    case 16: 
      var $52=$B;
      var $53=$I;
      var $shl40=$53 << 1;
      var $arrayidx41=((((5253816)|0)+($shl40<<2))|0);
      var $54=$arrayidx41;
      var $55=$54;
      var $cmp42=(($52)|0)==(($55)|0);
      if ($cmp42) { var $59 = 1;label = 18; break; } else { label = 17; break; }
    case 17: 
      var $56=$B;
      var $57=$56;
      var $58=HEAP32[((((5253792)|0))>>2)];
      var $cmp44=(($57)>>>0) >= (($58)>>>0);
      var $59 = $cmp44;label = 18; break;
    case 18: 
      var $59;
      var $60 = $59;label = 19; break;
    case 19: 
      var $60;
      var $land_ext47=(($60)&1);
      var $expval48=($land_ext47);
      var $tobool49=(($expval48)|0)!=0;
      if ($tobool49) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $61=$B;
      var $62=$F;
      var $bk51=(($62+12)|0);
      HEAP32[(($bk51)>>2)]=$61;
      var $63=$F;
      var $64=$B;
      var $fd52=(($64+8)|0);
      HEAP32[(($fd52)>>2)]=$63;
      label = 22; break;
    case 21: 
      _abort();

    case 22: 
      label = 23; break;
    case 23: 
      label = 70; break;
    case 24: 
      var $65=$p;
      var $66=$65;
      $TP=$66;
      var $67=$TP;
      var $parent=(($67+24)|0);
      var $68=HEAP32[(($parent)>>2)];
      $XP=$68;
      var $69=$TP;
      var $bk56=(($69+12)|0);
      var $70=HEAP32[(($bk56)>>2)];
      var $71=$TP;
      var $cmp57=(($70)|0)!=(($71)|0);
      if ($cmp57) { label = 25; break; } else { label = 29; break; }
    case 25: 
      var $72=$TP;
      var $fd61=(($72+8)|0);
      var $73=HEAP32[(($fd61)>>2)];
      $F60=$73;
      var $74=$TP;
      var $bk62=(($74+12)|0);
      var $75=HEAP32[(($bk62)>>2)];
      $R=$75;
      var $76=$F60;
      var $77=$76;
      var $78=HEAP32[((((5253792)|0))>>2)];
      var $cmp63=(($77)>>>0) >= (($78)>>>0);
      var $conv64=(($cmp63)&1);
      var $expval65=($conv64);
      var $tobool66=(($expval65)|0)!=0;
      if ($tobool66) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $79=$R;
      var $80=$F60;
      var $bk68=(($80+12)|0);
      HEAP32[(($bk68)>>2)]=$79;
      var $81=$F60;
      var $82=$R;
      var $fd69=(($82+8)|0);
      HEAP32[(($fd69)>>2)]=$81;
      label = 28; break;
    case 27: 
      _abort();

    case 28: 
      label = 41; break;
    case 29: 
      var $83=$TP;
      var $child=(($83+16)|0);
      var $arrayidx73=(($child+4)|0);
      $RP=$arrayidx73;
      var $84=HEAP32[(($arrayidx73)>>2)];
      $R=$84;
      var $cmp74=(($84)|0)!=0;
      if ($cmp74) { label = 31; break; } else { label = 30; break; }
    case 30: 
      var $85=$TP;
      var $child77=(($85+16)|0);
      var $arrayidx78=(($child77)|0);
      $RP=$arrayidx78;
      var $86=HEAP32[(($arrayidx78)>>2)];
      $R=$86;
      var $cmp79=(($86)|0)!=0;
      if ($cmp79) { label = 31; break; } else { label = 40; break; }
    case 31: 
      label = 32; break;
    case 32: 
      var $87=$R;
      var $child82=(($87+16)|0);
      var $arrayidx83=(($child82+4)|0);
      $CP=$arrayidx83;
      var $88=HEAP32[(($arrayidx83)>>2)];
      var $cmp84=(($88)|0)!=0;
      if ($cmp84) { var $91 = 1;label = 34; break; } else { label = 33; break; }
    case 33: 
      var $89=$R;
      var $child87=(($89+16)|0);
      var $arrayidx88=(($child87)|0);
      $CP=$arrayidx88;
      var $90=HEAP32[(($arrayidx88)>>2)];
      var $cmp89=(($90)|0)!=0;
      var $91 = $cmp89;label = 34; break;
    case 34: 
      var $91;
      if ($91) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $92=$CP;
      $RP=$92;
      var $93=HEAP32[(($92)>>2)];
      $R=$93;
      label = 32; break;
    case 36: 
      var $94=$RP;
      var $95=$94;
      var $96=HEAP32[((((5253792)|0))>>2)];
      var $cmp92=(($95)>>>0) >= (($96)>>>0);
      var $conv93=(($cmp92)&1);
      var $expval94=($conv93);
      var $tobool95=(($expval94)|0)!=0;
      if ($tobool95) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $97=$RP;
      HEAP32[(($97)>>2)]=0;
      label = 39; break;
    case 38: 
      _abort();

    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $98=$XP;
      var $cmp101=(($98)|0)!=0;
      if ($cmp101) { label = 42; break; } else { label = 69; break; }
    case 42: 
      var $99=$TP;
      var $index=(($99+28)|0);
      var $100=HEAP32[(($index)>>2)];
      var $arrayidx104=((((5254080)|0)+($100<<2))|0);
      $H=$arrayidx104;
      var $101=$TP;
      var $102=$H;
      var $103=HEAP32[(($102)>>2)];
      var $cmp105=(($101)|0)==(($103)|0);
      if ($cmp105) { label = 43; break; } else { label = 46; break; }
    case 43: 
      var $104=$R;
      var $105=$H;
      HEAP32[(($105)>>2)]=$104;
      var $cmp108=(($104)|0)==0;
      if ($cmp108) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $106=$TP;
      var $index111=(($106+28)|0);
      var $107=HEAP32[(($index111)>>2)];
      var $shl112=1 << $107;
      var $neg113=$shl112 ^ -1;
      var $108=HEAP32[((((5253780)|0))>>2)];
      var $and114=$108 & $neg113;
      HEAP32[((((5253780)|0))>>2)]=$and114;
      label = 45; break;
    case 45: 
      label = 53; break;
    case 46: 
      var $109=$XP;
      var $110=$109;
      var $111=HEAP32[((((5253792)|0))>>2)];
      var $cmp117=(($110)>>>0) >= (($111)>>>0);
      var $conv118=(($cmp117)&1);
      var $expval119=($conv118);
      var $tobool120=(($expval119)|0)!=0;
      if ($tobool120) { label = 47; break; } else { label = 51; break; }
    case 47: 
      var $112=$XP;
      var $child122=(($112+16)|0);
      var $arrayidx123=(($child122)|0);
      var $113=HEAP32[(($arrayidx123)>>2)];
      var $114=$TP;
      var $cmp124=(($113)|0)==(($114)|0);
      if ($cmp124) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $115=$R;
      var $116=$XP;
      var $child127=(($116+16)|0);
      var $arrayidx128=(($child127)|0);
      HEAP32[(($arrayidx128)>>2)]=$115;
      label = 50; break;
    case 49: 
      var $117=$R;
      var $118=$XP;
      var $child130=(($118+16)|0);
      var $arrayidx131=(($child130+4)|0);
      HEAP32[(($arrayidx131)>>2)]=$117;
      label = 50; break;
    case 50: 
      label = 52; break;
    case 51: 
      _abort();

    case 52: 
      label = 53; break;
    case 53: 
      var $119=$R;
      var $cmp136=(($119)|0)!=0;
      if ($cmp136) { label = 54; break; } else { label = 68; break; }
    case 54: 
      var $120=$R;
      var $121=$120;
      var $122=HEAP32[((((5253792)|0))>>2)];
      var $cmp139=(($121)>>>0) >= (($122)>>>0);
      var $conv140=(($cmp139)&1);
      var $expval141=($conv140);
      var $tobool142=(($expval141)|0)!=0;
      if ($tobool142) { label = 55; break; } else { label = 66; break; }
    case 55: 
      var $123=$XP;
      var $124=$R;
      var $parent144=(($124+24)|0);
      HEAP32[(($parent144)>>2)]=$123;
      var $125=$TP;
      var $child145=(($125+16)|0);
      var $arrayidx146=(($child145)|0);
      var $126=HEAP32[(($arrayidx146)>>2)];
      $C0=$126;
      var $cmp147=(($126)|0)!=0;
      if ($cmp147) { label = 56; break; } else { label = 60; break; }
    case 56: 
      var $127=$C0;
      var $128=$127;
      var $129=HEAP32[((((5253792)|0))>>2)];
      var $cmp150=(($128)>>>0) >= (($129)>>>0);
      var $conv151=(($cmp150)&1);
      var $expval152=($conv151);
      var $tobool153=(($expval152)|0)!=0;
      if ($tobool153) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $130=$C0;
      var $131=$R;
      var $child155=(($131+16)|0);
      var $arrayidx156=(($child155)|0);
      HEAP32[(($arrayidx156)>>2)]=$130;
      var $132=$R;
      var $133=$C0;
      var $parent157=(($133+24)|0);
      HEAP32[(($parent157)>>2)]=$132;
      label = 59; break;
    case 58: 
      _abort();

    case 59: 
      label = 60; break;
    case 60: 
      var $134=$TP;
      var $child161=(($134+16)|0);
      var $arrayidx162=(($child161+4)|0);
      var $135=HEAP32[(($arrayidx162)>>2)];
      $C1=$135;
      var $cmp163=(($135)|0)!=0;
      if ($cmp163) { label = 61; break; } else { label = 65; break; }
    case 61: 
      var $136=$C1;
      var $137=$136;
      var $138=HEAP32[((((5253792)|0))>>2)];
      var $cmp166=(($137)>>>0) >= (($138)>>>0);
      var $conv167=(($cmp166)&1);
      var $expval168=($conv167);
      var $tobool169=(($expval168)|0)!=0;
      if ($tobool169) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $139=$C1;
      var $140=$R;
      var $child171=(($140+16)|0);
      var $arrayidx172=(($child171+4)|0);
      HEAP32[(($arrayidx172)>>2)]=$139;
      var $141=$R;
      var $142=$C1;
      var $parent173=(($142+24)|0);
      HEAP32[(($parent173)>>2)]=$141;
      label = 64; break;
    case 63: 
      _abort();

    case 64: 
      label = 65; break;
    case 65: 
      label = 67; break;
    case 66: 
      _abort();

    case 67: 
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      label = 74; break;
    case 71: 
      var $143=$next;
      var $head183=(($143+4)|0);
      var $144=HEAP32[(($head183)>>2)];
      var $and184=$144 & 3;
      var $cmp185=(($and184)|0)==3;
      if ($cmp185) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $145=$psize;
      HEAP32[((((5253784)|0))>>2)]=$145;
      var $146=$next;
      var $head188=(($146+4)|0);
      var $147=HEAP32[(($head188)>>2)];
      var $and189=$147 & -2;
      HEAP32[(($head188)>>2)]=$and189;
      var $148=$psize;
      var $or=$148 | 1;
      var $149=$p;
      var $head190=(($149+4)|0);
      HEAP32[(($head190)>>2)]=$or;
      var $150=$psize;
      var $151=$p;
      var $152=$151;
      var $153=$psize;
      var $add_ptr191=(($152+$153)|0);
      var $154=$add_ptr191;
      var $prev_foot192=(($154)|0);
      HEAP32[(($prev_foot192)>>2)]=$150;
      label = 196; break;
    case 73: 
      label = 74; break;
    case 74: 
      label = 76; break;
    case 75: 
      label = 195; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      var $155=$p;
      var $156=$155;
      var $157=$next;
      var $158=$157;
      var $cmp199=(($156)>>>0) < (($158)>>>0);
      if ($cmp199) { label = 79; break; } else { var $161 = 0;label = 80; break; }
    case 79: 
      var $159=$next;
      var $head202=(($159+4)|0);
      var $160=HEAP32[(($head202)>>2)];
      var $and203=$160 & 1;
      var $tobool204=(($and203)|0)!=0;
      var $161 = $tobool204;label = 80; break;
    case 80: 
      var $161;
      var $land_ext206=(($161)&1);
      var $expval207=($land_ext206);
      var $tobool208=(($expval207)|0)!=0;
      if ($tobool208) { label = 81; break; } else { label = 193; break; }
    case 81: 
      var $162=$next;
      var $head210=(($162+4)|0);
      var $163=HEAP32[(($head210)>>2)];
      var $and211=$163 & 2;
      var $tobool212=(($and211)|0)!=0;
      if ($tobool212) { label = 154; break; } else { label = 82; break; }
    case 82: 
      var $164=$next;
      var $165=HEAP32[((((5253800)|0))>>2)];
      var $cmp214=(($164)|0)==(($165)|0);
      if ($cmp214) { label = 83; break; } else { label = 88; break; }
    case 83: 
      var $166=$psize;
      var $167=HEAP32[((((5253788)|0))>>2)];
      var $add217=((($167)+($166))|0);
      HEAP32[((((5253788)|0))>>2)]=$add217;
      $tsize=$add217;
      var $168=$p;
      HEAP32[((((5253800)|0))>>2)]=$168;
      var $169=$tsize;
      var $or218=$169 | 1;
      var $170=$p;
      var $head219=(($170+4)|0);
      HEAP32[(($head219)>>2)]=$or218;
      var $171=$p;
      var $172=HEAP32[((((5253796)|0))>>2)];
      var $cmp220=(($171)|0)==(($172)|0);
      if ($cmp220) { label = 84; break; } else { label = 85; break; }
    case 84: 
      HEAP32[((((5253796)|0))>>2)]=0;
      HEAP32[((((5253784)|0))>>2)]=0;
      label = 85; break;
    case 85: 
      var $173=$tsize;
      var $174=HEAP32[((((5253804)|0))>>2)];
      var $cmp224=(($173)>>>0) > (($174)>>>0);
      if ($cmp224) { label = 86; break; } else { label = 87; break; }
    case 86: 
      var $call=_sys_trim(5253776, 0);
      label = 87; break;
    case 87: 
      label = 196; break;
    case 88: 
      var $175=$next;
      var $176=HEAP32[((((5253796)|0))>>2)];
      var $cmp229=(($175)|0)==(($176)|0);
      if ($cmp229) { label = 89; break; } else { label = 90; break; }
    case 89: 
      var $177=$psize;
      var $178=HEAP32[((((5253784)|0))>>2)];
      var $add232=((($178)+($177))|0);
      HEAP32[((((5253784)|0))>>2)]=$add232;
      $dsize=$add232;
      var $179=$p;
      HEAP32[((((5253796)|0))>>2)]=$179;
      var $180=$dsize;
      var $or233=$180 | 1;
      var $181=$p;
      var $head234=(($181+4)|0);
      HEAP32[(($head234)>>2)]=$or233;
      var $182=$dsize;
      var $183=$p;
      var $184=$183;
      var $185=$dsize;
      var $add_ptr235=(($184+$185)|0);
      var $186=$add_ptr235;
      var $prev_foot236=(($186)|0);
      HEAP32[(($prev_foot236)>>2)]=$182;
      label = 196; break;
    case 90: 
      var $187=$next;
      var $head238=(($187+4)|0);
      var $188=HEAP32[(($head238)>>2)];
      var $and239=$188 & -8;
      $nsize=$and239;
      var $189=$nsize;
      var $190=$psize;
      var $add240=((($190)+($189))|0);
      $psize=$add240;
      var $191=$nsize;
      var $shr241=$191 >>> 3;
      var $cmp242=(($shr241)>>>0) < 32;
      if ($cmp242) { label = 91; break; } else { label = 103; break; }
    case 91: 
      var $192=$next;
      var $fd246=(($192+8)|0);
      var $193=HEAP32[(($fd246)>>2)];
      $F245=$193;
      var $194=$next;
      var $bk248=(($194+12)|0);
      var $195=HEAP32[(($bk248)>>2)];
      $B247=$195;
      var $196=$nsize;
      var $shr250=$196 >>> 3;
      $I249=$shr250;
      var $197=$F245;
      var $198=$B247;
      var $cmp251=(($197)|0)==(($198)|0);
      if ($cmp251) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $199=$I249;
      var $shl254=1 << $199;
      var $neg255=$shl254 ^ -1;
      var $200=HEAP32[((((5253776)|0))>>2)];
      var $and256=$200 & $neg255;
      HEAP32[((((5253776)|0))>>2)]=$and256;
      label = 102; break;
    case 93: 
      var $201=$F245;
      var $202=$I249;
      var $shl258=$202 << 1;
      var $arrayidx259=((((5253816)|0)+($shl258<<2))|0);
      var $203=$arrayidx259;
      var $204=$203;
      var $cmp260=(($201)|0)==(($204)|0);
      if ($cmp260) { label = 95; break; } else { label = 94; break; }
    case 94: 
      var $205=$F245;
      var $206=$205;
      var $207=HEAP32[((((5253792)|0))>>2)];
      var $cmp263=(($206)>>>0) >= (($207)>>>0);
      if ($cmp263) { label = 95; break; } else { var $216 = 0;label = 98; break; }
    case 95: 
      var $208=$B247;
      var $209=$I249;
      var $shl266=$209 << 1;
      var $arrayidx267=((((5253816)|0)+($shl266<<2))|0);
      var $210=$arrayidx267;
      var $211=$210;
      var $cmp268=(($208)|0)==(($211)|0);
      if ($cmp268) { var $215 = 1;label = 97; break; } else { label = 96; break; }
    case 96: 
      var $212=$B247;
      var $213=$212;
      var $214=HEAP32[((((5253792)|0))>>2)];
      var $cmp271=(($213)>>>0) >= (($214)>>>0);
      var $215 = $cmp271;label = 97; break;
    case 97: 
      var $215;
      var $216 = $215;label = 98; break;
    case 98: 
      var $216;
      var $land_ext275=(($216)&1);
      var $expval276=($land_ext275);
      var $tobool277=(($expval276)|0)!=0;
      if ($tobool277) { label = 99; break; } else { label = 100; break; }
    case 99: 
      var $217=$B247;
      var $218=$F245;
      var $bk279=(($218+12)|0);
      HEAP32[(($bk279)>>2)]=$217;
      var $219=$F245;
      var $220=$B247;
      var $fd280=(($220+8)|0);
      HEAP32[(($fd280)>>2)]=$219;
      label = 101; break;
    case 100: 
      _abort();

    case 101: 
      label = 102; break;
    case 102: 
      label = 149; break;
    case 103: 
      var $221=$next;
      var $222=$221;
      $TP285=$222;
      var $223=$TP285;
      var $parent287=(($223+24)|0);
      var $224=HEAP32[(($parent287)>>2)];
      $XP286=$224;
      var $225=$TP285;
      var $bk289=(($225+12)|0);
      var $226=HEAP32[(($bk289)>>2)];
      var $227=$TP285;
      var $cmp290=(($226)|0)!=(($227)|0);
      if ($cmp290) { label = 104; break; } else { label = 108; break; }
    case 104: 
      var $228=$TP285;
      var $fd294=(($228+8)|0);
      var $229=HEAP32[(($fd294)>>2)];
      $F293=$229;
      var $230=$TP285;
      var $bk295=(($230+12)|0);
      var $231=HEAP32[(($bk295)>>2)];
      $R288=$231;
      var $232=$F293;
      var $233=$232;
      var $234=HEAP32[((((5253792)|0))>>2)];
      var $cmp296=(($233)>>>0) >= (($234)>>>0);
      var $conv297=(($cmp296)&1);
      var $expval298=($conv297);
      var $tobool299=(($expval298)|0)!=0;
      if ($tobool299) { label = 105; break; } else { label = 106; break; }
    case 105: 
      var $235=$R288;
      var $236=$F293;
      var $bk301=(($236+12)|0);
      HEAP32[(($bk301)>>2)]=$235;
      var $237=$F293;
      var $238=$R288;
      var $fd302=(($238+8)|0);
      HEAP32[(($fd302)>>2)]=$237;
      label = 107; break;
    case 106: 
      _abort();

    case 107: 
      label = 120; break;
    case 108: 
      var $239=$TP285;
      var $child307=(($239+16)|0);
      var $arrayidx308=(($child307+4)|0);
      $RP306=$arrayidx308;
      var $240=HEAP32[(($arrayidx308)>>2)];
      $R288=$240;
      var $cmp309=(($240)|0)!=0;
      if ($cmp309) { label = 110; break; } else { label = 109; break; }
    case 109: 
      var $241=$TP285;
      var $child312=(($241+16)|0);
      var $arrayidx313=(($child312)|0);
      $RP306=$arrayidx313;
      var $242=HEAP32[(($arrayidx313)>>2)];
      $R288=$242;
      var $cmp314=(($242)|0)!=0;
      if ($cmp314) { label = 110; break; } else { label = 119; break; }
    case 110: 
      label = 111; break;
    case 111: 
      var $243=$R288;
      var $child319=(($243+16)|0);
      var $arrayidx320=(($child319+4)|0);
      $CP317=$arrayidx320;
      var $244=HEAP32[(($arrayidx320)>>2)];
      var $cmp321=(($244)|0)!=0;
      if ($cmp321) { var $247 = 1;label = 113; break; } else { label = 112; break; }
    case 112: 
      var $245=$R288;
      var $child324=(($245+16)|0);
      var $arrayidx325=(($child324)|0);
      $CP317=$arrayidx325;
      var $246=HEAP32[(($arrayidx325)>>2)];
      var $cmp326=(($246)|0)!=0;
      var $247 = $cmp326;label = 113; break;
    case 113: 
      var $247;
      if ($247) { label = 114; break; } else { label = 115; break; }
    case 114: 
      var $248=$CP317;
      $RP306=$248;
      var $249=HEAP32[(($248)>>2)];
      $R288=$249;
      label = 111; break;
    case 115: 
      var $250=$RP306;
      var $251=$250;
      var $252=HEAP32[((((5253792)|0))>>2)];
      var $cmp331=(($251)>>>0) >= (($252)>>>0);
      var $conv332=(($cmp331)&1);
      var $expval333=($conv332);
      var $tobool334=(($expval333)|0)!=0;
      if ($tobool334) { label = 116; break; } else { label = 117; break; }
    case 116: 
      var $253=$RP306;
      HEAP32[(($253)>>2)]=0;
      label = 118; break;
    case 117: 
      _abort();

    case 118: 
      label = 119; break;
    case 119: 
      label = 120; break;
    case 120: 
      var $254=$XP286;
      var $cmp340=(($254)|0)!=0;
      if ($cmp340) { label = 121; break; } else { label = 148; break; }
    case 121: 
      var $255=$TP285;
      var $index344=(($255+28)|0);
      var $256=HEAP32[(($index344)>>2)];
      var $arrayidx345=((((5254080)|0)+($256<<2))|0);
      $H343=$arrayidx345;
      var $257=$TP285;
      var $258=$H343;
      var $259=HEAP32[(($258)>>2)];
      var $cmp346=(($257)|0)==(($259)|0);
      if ($cmp346) { label = 122; break; } else { label = 125; break; }
    case 122: 
      var $260=$R288;
      var $261=$H343;
      HEAP32[(($261)>>2)]=$260;
      var $cmp349=(($260)|0)==0;
      if ($cmp349) { label = 123; break; } else { label = 124; break; }
    case 123: 
      var $262=$TP285;
      var $index352=(($262+28)|0);
      var $263=HEAP32[(($index352)>>2)];
      var $shl353=1 << $263;
      var $neg354=$shl353 ^ -1;
      var $264=HEAP32[((((5253780)|0))>>2)];
      var $and355=$264 & $neg354;
      HEAP32[((((5253780)|0))>>2)]=$and355;
      label = 124; break;
    case 124: 
      label = 132; break;
    case 125: 
      var $265=$XP286;
      var $266=$265;
      var $267=HEAP32[((((5253792)|0))>>2)];
      var $cmp358=(($266)>>>0) >= (($267)>>>0);
      var $conv359=(($cmp358)&1);
      var $expval360=($conv359);
      var $tobool361=(($expval360)|0)!=0;
      if ($tobool361) { label = 126; break; } else { label = 130; break; }
    case 126: 
      var $268=$XP286;
      var $child363=(($268+16)|0);
      var $arrayidx364=(($child363)|0);
      var $269=HEAP32[(($arrayidx364)>>2)];
      var $270=$TP285;
      var $cmp365=(($269)|0)==(($270)|0);
      if ($cmp365) { label = 127; break; } else { label = 128; break; }
    case 127: 
      var $271=$R288;
      var $272=$XP286;
      var $child368=(($272+16)|0);
      var $arrayidx369=(($child368)|0);
      HEAP32[(($arrayidx369)>>2)]=$271;
      label = 129; break;
    case 128: 
      var $273=$R288;
      var $274=$XP286;
      var $child371=(($274+16)|0);
      var $arrayidx372=(($child371+4)|0);
      HEAP32[(($arrayidx372)>>2)]=$273;
      label = 129; break;
    case 129: 
      label = 131; break;
    case 130: 
      _abort();

    case 131: 
      label = 132; break;
    case 132: 
      var $275=$R288;
      var $cmp377=(($275)|0)!=0;
      if ($cmp377) { label = 133; break; } else { label = 147; break; }
    case 133: 
      var $276=$R288;
      var $277=$276;
      var $278=HEAP32[((((5253792)|0))>>2)];
      var $cmp380=(($277)>>>0) >= (($278)>>>0);
      var $conv381=(($cmp380)&1);
      var $expval382=($conv381);
      var $tobool383=(($expval382)|0)!=0;
      if ($tobool383) { label = 134; break; } else { label = 145; break; }
    case 134: 
      var $279=$XP286;
      var $280=$R288;
      var $parent387=(($280+24)|0);
      HEAP32[(($parent387)>>2)]=$279;
      var $281=$TP285;
      var $child388=(($281+16)|0);
      var $arrayidx389=(($child388)|0);
      var $282=HEAP32[(($arrayidx389)>>2)];
      $C0385=$282;
      var $cmp390=(($282)|0)!=0;
      if ($cmp390) { label = 135; break; } else { label = 139; break; }
    case 135: 
      var $283=$C0385;
      var $284=$283;
      var $285=HEAP32[((((5253792)|0))>>2)];
      var $cmp393=(($284)>>>0) >= (($285)>>>0);
      var $conv394=(($cmp393)&1);
      var $expval395=($conv394);
      var $tobool396=(($expval395)|0)!=0;
      if ($tobool396) { label = 136; break; } else { label = 137; break; }
    case 136: 
      var $286=$C0385;
      var $287=$R288;
      var $child398=(($287+16)|0);
      var $arrayidx399=(($child398)|0);
      HEAP32[(($arrayidx399)>>2)]=$286;
      var $288=$R288;
      var $289=$C0385;
      var $parent400=(($289+24)|0);
      HEAP32[(($parent400)>>2)]=$288;
      label = 138; break;
    case 137: 
      _abort();

    case 138: 
      label = 139; break;
    case 139: 
      var $290=$TP285;
      var $child404=(($290+16)|0);
      var $arrayidx405=(($child404+4)|0);
      var $291=HEAP32[(($arrayidx405)>>2)];
      $C1386=$291;
      var $cmp406=(($291)|0)!=0;
      if ($cmp406) { label = 140; break; } else { label = 144; break; }
    case 140: 
      var $292=$C1386;
      var $293=$292;
      var $294=HEAP32[((((5253792)|0))>>2)];
      var $cmp409=(($293)>>>0) >= (($294)>>>0);
      var $conv410=(($cmp409)&1);
      var $expval411=($conv410);
      var $tobool412=(($expval411)|0)!=0;
      if ($tobool412) { label = 141; break; } else { label = 142; break; }
    case 141: 
      var $295=$C1386;
      var $296=$R288;
      var $child414=(($296+16)|0);
      var $arrayidx415=(($child414+4)|0);
      HEAP32[(($arrayidx415)>>2)]=$295;
      var $297=$R288;
      var $298=$C1386;
      var $parent416=(($298+24)|0);
      HEAP32[(($parent416)>>2)]=$297;
      label = 143; break;
    case 142: 
      _abort();

    case 143: 
      label = 144; break;
    case 144: 
      label = 146; break;
    case 145: 
      _abort();

    case 146: 
      label = 147; break;
    case 147: 
      label = 148; break;
    case 148: 
      label = 149; break;
    case 149: 
      var $299=$psize;
      var $or425=$299 | 1;
      var $300=$p;
      var $head426=(($300+4)|0);
      HEAP32[(($head426)>>2)]=$or425;
      var $301=$psize;
      var $302=$p;
      var $303=$302;
      var $304=$psize;
      var $add_ptr427=(($303+$304)|0);
      var $305=$add_ptr427;
      var $prev_foot428=(($305)|0);
      HEAP32[(($prev_foot428)>>2)]=$301;
      var $306=$p;
      var $307=HEAP32[((((5253796)|0))>>2)];
      var $cmp429=(($306)|0)==(($307)|0);
      if ($cmp429) { label = 150; break; } else { label = 151; break; }
    case 150: 
      var $308=$psize;
      HEAP32[((((5253784)|0))>>2)]=$308;
      label = 196; break;
    case 151: 
      label = 152; break;
    case 152: 
      label = 153; break;
    case 153: 
      label = 155; break;
    case 154: 
      var $309=$next;
      var $head436=(($309+4)|0);
      var $310=HEAP32[(($head436)>>2)];
      var $and437=$310 & -2;
      HEAP32[(($head436)>>2)]=$and437;
      var $311=$psize;
      var $or438=$311 | 1;
      var $312=$p;
      var $head439=(($312+4)|0);
      HEAP32[(($head439)>>2)]=$or438;
      var $313=$psize;
      var $314=$p;
      var $315=$314;
      var $316=$psize;
      var $add_ptr440=(($315+$316)|0);
      var $317=$add_ptr440;
      var $prev_foot441=(($317)|0);
      HEAP32[(($prev_foot441)>>2)]=$313;
      label = 155; break;
    case 155: 
      var $318=$psize;
      var $shr443=$318 >>> 3;
      var $cmp444=(($shr443)>>>0) < 32;
      if ($cmp444) { label = 156; break; } else { label = 163; break; }
    case 156: 
      var $319=$psize;
      var $shr448=$319 >>> 3;
      $I447=$shr448;
      var $320=$I447;
      var $shl450=$320 << 1;
      var $arrayidx451=((((5253816)|0)+($shl450<<2))|0);
      var $321=$arrayidx451;
      var $322=$321;
      $B449=$322;
      var $323=$B449;
      $F452=$323;
      var $324=HEAP32[((((5253776)|0))>>2)];
      var $325=$I447;
      var $shl453=1 << $325;
      var $and454=$324 & $shl453;
      var $tobool455=(($and454)|0)!=0;
      if ($tobool455) { label = 158; break; } else { label = 157; break; }
    case 157: 
      var $326=$I447;
      var $shl457=1 << $326;
      var $327=HEAP32[((((5253776)|0))>>2)];
      var $or458=$327 | $shl457;
      HEAP32[((((5253776)|0))>>2)]=$or458;
      label = 162; break;
    case 158: 
      var $328=$B449;
      var $fd460=(($328+8)|0);
      var $329=HEAP32[(($fd460)>>2)];
      var $330=$329;
      var $331=HEAP32[((((5253792)|0))>>2)];
      var $cmp461=(($330)>>>0) >= (($331)>>>0);
      var $conv462=(($cmp461)&1);
      var $expval463=($conv462);
      var $tobool464=(($expval463)|0)!=0;
      if ($tobool464) { label = 159; break; } else { label = 160; break; }
    case 159: 
      var $332=$B449;
      var $fd466=(($332+8)|0);
      var $333=HEAP32[(($fd466)>>2)];
      $F452=$333;
      label = 161; break;
    case 160: 
      _abort();

    case 161: 
      label = 162; break;
    case 162: 
      var $334=$p;
      var $335=$B449;
      var $fd470=(($335+8)|0);
      HEAP32[(($fd470)>>2)]=$334;
      var $336=$p;
      var $337=$F452;
      var $bk471=(($337+12)|0);
      HEAP32[(($bk471)>>2)]=$336;
      var $338=$F452;
      var $339=$p;
      var $fd472=(($339+8)|0);
      HEAP32[(($fd472)>>2)]=$338;
      var $340=$B449;
      var $341=$p;
      var $bk473=(($341+12)|0);
      HEAP32[(($bk473)>>2)]=$340;
      label = 192; break;
    case 163: 
      var $342=$p;
      var $343=$342;
      $tp=$343;
      var $344=$psize;
      var $shr477=$344 >>> 8;
      $X=$shr477;
      var $345=$X;
      var $cmp478=(($345)|0)==0;
      if ($cmp478) { label = 164; break; } else { label = 165; break; }
    case 164: 
      $I476=0;
      label = 169; break;
    case 165: 
      var $346=$X;
      var $cmp482=(($346)>>>0) > 65535;
      if ($cmp482) { label = 166; break; } else { label = 167; break; }
    case 166: 
      $I476=31;
      label = 168; break;
    case 167: 
      var $347=$X;
      $Y=$347;
      var $348=$Y;
      var $sub=((($348)-(256))|0);
      var $shr486=$sub >>> 16;
      var $and487=$shr486 & 8;
      $N=$and487;
      var $349=$N;
      var $350=$Y;
      var $shl488=$350 << $349;
      $Y=$shl488;
      var $sub489=((($shl488)-(4096))|0);
      var $shr490=$sub489 >>> 16;
      var $and491=$shr490 & 4;
      $K=$and491;
      var $351=$K;
      var $352=$N;
      var $add492=((($352)+($351))|0);
      $N=$add492;
      var $353=$K;
      var $354=$Y;
      var $shl493=$354 << $353;
      $Y=$shl493;
      var $sub494=((($shl493)-(16384))|0);
      var $shr495=$sub494 >>> 16;
      var $and496=$shr495 & 2;
      $K=$and496;
      var $355=$N;
      var $add497=((($355)+($and496))|0);
      $N=$add497;
      var $356=$N;
      var $sub498=(((14)-($356))|0);
      var $357=$K;
      var $358=$Y;
      var $shl499=$358 << $357;
      $Y=$shl499;
      var $shr500=$shl499 >>> 15;
      var $add501=((($sub498)+($shr500))|0);
      $K=$add501;
      var $359=$K;
      var $shl502=$359 << 1;
      var $360=$psize;
      var $361=$K;
      var $add503=((($361)+(7))|0);
      var $shr504=$360 >>> (($add503)>>>0);
      var $and505=$shr504 & 1;
      var $add506=((($shl502)+($and505))|0);
      $I476=$add506;
      label = 168; break;
    case 168: 
      label = 169; break;
    case 169: 
      var $362=$I476;
      var $arrayidx509=((((5254080)|0)+($362<<2))|0);
      $H475=$arrayidx509;
      var $363=$I476;
      var $364=$tp;
      var $index510=(($364+28)|0);
      HEAP32[(($index510)>>2)]=$363;
      var $365=$tp;
      var $child511=(($365+16)|0);
      var $arrayidx512=(($child511+4)|0);
      HEAP32[(($arrayidx512)>>2)]=0;
      var $366=$tp;
      var $child513=(($366+16)|0);
      var $arrayidx514=(($child513)|0);
      HEAP32[(($arrayidx514)>>2)]=0;
      var $367=HEAP32[((((5253780)|0))>>2)];
      var $368=$I476;
      var $shl515=1 << $368;
      var $and516=$367 & $shl515;
      var $tobool517=(($and516)|0)!=0;
      if ($tobool517) { label = 171; break; } else { label = 170; break; }
    case 170: 
      var $369=$I476;
      var $shl519=1 << $369;
      var $370=HEAP32[((((5253780)|0))>>2)];
      var $or520=$370 | $shl519;
      HEAP32[((((5253780)|0))>>2)]=$or520;
      var $371=$tp;
      var $372=$H475;
      HEAP32[(($372)>>2)]=$371;
      var $373=$H475;
      var $374=$373;
      var $375=$tp;
      var $parent521=(($375+24)|0);
      HEAP32[(($parent521)>>2)]=$374;
      var $376=$tp;
      var $377=$tp;
      var $bk522=(($377+12)|0);
      HEAP32[(($bk522)>>2)]=$376;
      var $378=$tp;
      var $fd523=(($378+8)|0);
      HEAP32[(($fd523)>>2)]=$376;
      label = 189; break;
    case 171: 
      var $379=$H475;
      var $380=HEAP32[(($379)>>2)];
      $T=$380;
      var $381=$psize;
      var $382=$I476;
      var $cmp526=(($382)|0)==31;
      if ($cmp526) { label = 172; break; } else { label = 173; break; }
    case 172: 
      var $cond = 0;label = 174; break;
    case 173: 
      var $383=$I476;
      var $shr528=$383 >>> 1;
      var $add529=((($shr528)+(8))|0);
      var $sub530=((($add529)-(2))|0);
      var $sub531=(((31)-($sub530))|0);
      var $cond = $sub531;label = 174; break;
    case 174: 
      var $cond;
      var $shl532=$381 << $cond;
      $K525=$shl532;
      label = 175; break;
    case 175: 
      var $384=$T;
      var $head533=(($384+4)|0);
      var $385=HEAP32[(($head533)>>2)];
      var $and534=$385 & -8;
      var $386=$psize;
      var $cmp535=(($and534)|0)!=(($386)|0);
      if ($cmp535) { label = 176; break; } else { label = 182; break; }
    case 176: 
      var $387=$K525;
      var $shr538=$387 >>> 31;
      var $and539=$shr538 & 1;
      var $388=$T;
      var $child540=(($388+16)|0);
      var $arrayidx541=(($child540+($and539<<2))|0);
      $C=$arrayidx541;
      var $389=$K525;
      var $shl542=$389 << 1;
      $K525=$shl542;
      var $390=$C;
      var $391=HEAP32[(($390)>>2)];
      var $cmp543=(($391)|0)!=0;
      if ($cmp543) { label = 177; break; } else { label = 178; break; }
    case 177: 
      var $392=$C;
      var $393=HEAP32[(($392)>>2)];
      $T=$393;
      label = 181; break;
    case 178: 
      var $394=$C;
      var $395=$394;
      var $396=HEAP32[((((5253792)|0))>>2)];
      var $cmp547=(($395)>>>0) >= (($396)>>>0);
      var $conv548=(($cmp547)&1);
      var $expval549=($conv548);
      var $tobool550=(($expval549)|0)!=0;
      if ($tobool550) { label = 179; break; } else { label = 180; break; }
    case 179: 
      var $397=$tp;
      var $398=$C;
      HEAP32[(($398)>>2)]=$397;
      var $399=$T;
      var $400=$tp;
      var $parent552=(($400+24)|0);
      HEAP32[(($parent552)>>2)]=$399;
      var $401=$tp;
      var $402=$tp;
      var $bk553=(($402+12)|0);
      HEAP32[(($bk553)>>2)]=$401;
      var $403=$tp;
      var $fd554=(($403+8)|0);
      HEAP32[(($fd554)>>2)]=$401;
      label = 188; break;
    case 180: 
      _abort();

    case 181: 
      label = 187; break;
    case 182: 
      var $404=$T;
      var $fd559=(($404+8)|0);
      var $405=HEAP32[(($fd559)>>2)];
      $F558=$405;
      var $406=$T;
      var $407=$406;
      var $408=HEAP32[((((5253792)|0))>>2)];
      var $cmp560=(($407)>>>0) >= (($408)>>>0);
      if ($cmp560) { label = 183; break; } else { var $412 = 0;label = 184; break; }
    case 183: 
      var $409=$F558;
      var $410=$409;
      var $411=HEAP32[((((5253792)|0))>>2)];
      var $cmp563=(($410)>>>0) >= (($411)>>>0);
      var $412 = $cmp563;label = 184; break;
    case 184: 
      var $412;
      var $land_ext566=(($412)&1);
      var $expval567=($land_ext566);
      var $tobool568=(($expval567)|0)!=0;
      if ($tobool568) { label = 185; break; } else { label = 186; break; }
    case 185: 
      var $413=$tp;
      var $414=$F558;
      var $bk570=(($414+12)|0);
      HEAP32[(($bk570)>>2)]=$413;
      var $415=$T;
      var $fd571=(($415+8)|0);
      HEAP32[(($fd571)>>2)]=$413;
      var $416=$F558;
      var $417=$tp;
      var $fd572=(($417+8)|0);
      HEAP32[(($fd572)>>2)]=$416;
      var $418=$T;
      var $419=$tp;
      var $bk573=(($419+12)|0);
      HEAP32[(($bk573)>>2)]=$418;
      var $420=$tp;
      var $parent574=(($420+24)|0);
      HEAP32[(($parent574)>>2)]=0;
      label = 188; break;
    case 186: 
      _abort();

    case 187: 
      label = 175; break;
    case 188: 
      label = 189; break;
    case 189: 
      var $421=HEAP32[((((5253808)|0))>>2)];
      var $dec=((($421)-(1))|0);
      HEAP32[((((5253808)|0))>>2)]=$dec;
      var $cmp578=(($dec)|0)==0;
      if ($cmp578) { label = 190; break; } else { label = 191; break; }
    case 190: 
      var $call581=_release_unused_segments(5253776);
      label = 191; break;
    case 191: 
      label = 192; break;
    case 192: 
      label = 196; break;
    case 193: 
      label = 194; break;
    case 194: 
      label = 195; break;
    case 195: 
      _abort();

    case 196: 
      label = 197; break;
    case 197: 

      return;
  }

}
_free["X"]=1;

function _sys_trim($m, $pad) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $pad_addr;
      var $released;
      var $unit;
      var $extra;
      var $sp;
      var $old_br;
      var $rel_br;
      var $new_br;
      $m_addr=$m;
      $pad_addr=$pad;
      $released=0;
      var $0=HEAP32[((((5243280)|0))>>2)];
      var $cmp=(($0)|0)!=0;
      if ($cmp) { var $1 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $call=_init_mparams();
      var $tobool=(($call)|0)!=0;
      var $1 = $tobool;label = 4; break;
    case 4: 
      var $1;
      var $lor_ext=(($1)&1);
      var $2=$pad_addr;
      var $cmp1=(($2)>>>0) < 4294967232;
      if ($cmp1) { label = 5; break; } else { label = 26; break; }
    case 5: 
      var $3=$m_addr;
      var $top=(($3+24)|0);
      var $4=HEAP32[(($top)>>2)];
      var $cmp2=(($4)|0)!=0;
      if ($cmp2) { label = 6; break; } else { label = 26; break; }
    case 6: 
      var $5=$pad_addr;
      var $add=((($5)+(40))|0);
      $pad_addr=$add;
      var $6=$m_addr;
      var $topsize=(($6+12)|0);
      var $7=HEAP32[(($topsize)>>2)];
      var $8=$pad_addr;
      var $cmp3=(($7)>>>0) > (($8)>>>0);
      if ($cmp3) { label = 7; break; } else { label = 22; break; }
    case 7: 
      var $9=HEAP32[((((5243288)|0))>>2)];
      $unit=$9;
      var $10=$m_addr;
      var $topsize5=(($10+12)|0);
      var $11=HEAP32[(($topsize5)>>2)];
      var $12=$pad_addr;
      var $sub=((($11)-($12))|0);
      var $13=$unit;
      var $sub6=((($13)-(1))|0);
      var $add7=((($sub)+($sub6))|0);
      var $14=$unit;
      var $div=Math.floor(((($add7)>>>0))/((($14)>>>0)));
      var $sub8=((($div)-(1))|0);
      var $15=$unit;
      var $mul=Math.imul($sub8,$15);
      $extra=$mul;
      var $16=$m_addr;
      var $17=$m_addr;
      var $top9=(($17+24)|0);
      var $18=HEAP32[(($top9)>>2)];
      var $19=$18;
      var $call10=_segment_holding($16, $19);
      $sp=$call10;
      var $20=$sp;
      var $sflags=(($20+12)|0);
      var $21=HEAP32[(($sflags)>>2)];
      var $and=$21 & 8;
      var $tobool11=(($and)|0)!=0;
      if ($tobool11) { label = 19; break; } else { label = 8; break; }
    case 8: 
      var $22=$sp;
      var $sflags13=(($22+12)|0);
      var $23=HEAP32[(($sflags13)>>2)];
      var $and14=$23 & 0;
      var $tobool15=(($and14)|0)!=0;
      if ($tobool15) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 18; break;
    case 10: 
      var $24=$extra;
      var $cmp17=(($24)>>>0) >= 2147483647;
      if ($cmp17) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $25=$unit;
      var $sub19=(((-2147483648)-($25))|0);
      $extra=$sub19;
      label = 12; break;
    case 12: 
      var $call20=_sbrk(0);
      $old_br=$call20;
      var $26=$old_br;
      var $27=$sp;
      var $base=(($27)|0);
      var $28=HEAP32[(($base)>>2)];
      var $29=$sp;
      var $size=(($29+4)|0);
      var $30=HEAP32[(($size)>>2)];
      var $add_ptr=(($28+$30)|0);
      var $cmp21=(($26)|0)==(($add_ptr)|0);
      if ($cmp21) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $31=$extra;
      var $sub23=(((-$31))|0);
      var $call24=_sbrk($sub23);
      $rel_br=$call24;
      var $call25=_sbrk(0);
      $new_br=$call25;
      var $32=$rel_br;
      var $cmp26=(($32)|0)!=-1;
      if ($cmp26) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $33=$new_br;
      var $34=$old_br;
      var $cmp28=(($33)>>>0) < (($34)>>>0);
      if ($cmp28) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $35=$old_br;
      var $36=$new_br;
      var $sub_ptr_lhs_cast=$35;
      var $sub_ptr_rhs_cast=$36;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $released=$sub_ptr_sub;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $37=$released;
      var $cmp34=(($37)|0)!=0;
      if ($cmp34) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $38=$released;
      var $39=$sp;
      var $size36=(($39+4)|0);
      var $40=HEAP32[(($size36)>>2)];
      var $sub37=((($40)-($38))|0);
      HEAP32[(($size36)>>2)]=$sub37;
      var $41=$released;
      var $42=$m_addr;
      var $footprint=(($42+432)|0);
      var $43=HEAP32[(($footprint)>>2)];
      var $sub38=((($43)-($41))|0);
      HEAP32[(($footprint)>>2)]=$sub38;
      var $44=$m_addr;
      var $45=$m_addr;
      var $top39=(($45+24)|0);
      var $46=HEAP32[(($top39)>>2)];
      var $47=$m_addr;
      var $topsize40=(($47+12)|0);
      var $48=HEAP32[(($topsize40)>>2)];
      var $49=$released;
      var $sub41=((($48)-($49))|0);
      _init_top($44, $46, $sub41);
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $50=$released;
      var $cmp44=(($50)|0)==0;
      if ($cmp44) { label = 23; break; } else { label = 25; break; }
    case 23: 
      var $51=$m_addr;
      var $topsize46=(($51+12)|0);
      var $52=HEAP32[(($topsize46)>>2)];
      var $53=$m_addr;
      var $trim_check=(($53+28)|0);
      var $54=HEAP32[(($trim_check)>>2)];
      var $cmp47=(($52)>>>0) > (($54)>>>0);
      if ($cmp47) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $55=$m_addr;
      var $trim_check49=(($55+28)|0);
      HEAP32[(($trim_check49)>>2)]=-1;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $56=$released;
      var $cmp52=(($56)|0)!=0;
      var $cond=$cmp52 ? 1 : 0;

      return $cond;
  }

}
_sys_trim["X"]=1;

function _realloc($oldmem, $bytes) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $oldmem_addr;
      var $bytes_addr;
      var $m;
      $oldmem_addr=$oldmem;
      $bytes_addr=$bytes;
      var $0=$oldmem_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$bytes_addr;
      var $call=_malloc($1);
      $retval=$call;
      label = 5; break;
    case 4: 
      $m=5253776;
      var $2=$m;
      var $3=$oldmem_addr;
      var $4=$bytes_addr;
      var $call1=_internal_realloc($2, $3, $4);
      $retval=$call1;
      label = 5; break;
    case 5: 
      var $5=$retval;

      return $5;
  }

}
Module["_realloc"] = _realloc;

function _release_unused_segments($m) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $released;
      var $nsegs;
      var $pred;
      var $sp;
      var $base;
      var $size;
      var $next3;
      var $p;
      var $psize;
      var $tp;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $H147;
      var $I;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K197;
      var $C;
      var $F235;
      $m_addr=$m;
      $released=0;
      $nsegs=0;
      var $0=$m_addr;
      var $seg=(($0+444)|0);
      $pred=$seg;
      var $1=$pred;
      var $next=(($1+8)|0);
      var $2=HEAP32[(($next)>>2)];
      $sp=$2;
      label = 3; break;
    case 3: 
      var $3=$sp;
      var $cmp=(($3)|0)!=0;
      if ($cmp) { label = 4; break; } else { label = 88; break; }
    case 4: 
      var $4=$sp;
      var $base1=(($4)|0);
      var $5=HEAP32[(($base1)>>2)];
      $base=$5;
      var $6=$sp;
      var $size2=(($6+4)|0);
      var $7=HEAP32[(($size2)>>2)];
      $size=$7;
      var $8=$sp;
      var $next4=(($8+8)|0);
      var $9=HEAP32[(($next4)>>2)];
      $next3=$9;
      var $10=$nsegs;
      var $inc=((($10)+(1))|0);
      $nsegs=$inc;
      var $11=$sp;
      var $sflags=(($11+12)|0);
      var $12=HEAP32[(($sflags)>>2)];
      var $and=$12 & 0;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 87; break; }
    case 5: 
      var $13=$sp;
      var $sflags5=(($13+12)|0);
      var $14=HEAP32[(($sflags5)>>2)];
      var $and6=$14 & 8;
      var $tobool7=(($and6)|0)!=0;
      if ($tobool7) { label = 87; break; } else { label = 6; break; }
    case 6: 
      var $15=$base;
      var $16=$base;
      var $add_ptr=(($16+8)|0);
      var $17=$add_ptr;
      var $and8=$17 & 7;
      var $cmp9=(($and8)|0)==0;
      if ($cmp9) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $cond = 0;label = 9; break;
    case 8: 
      var $18=$base;
      var $add_ptr10=(($18+8)|0);
      var $19=$add_ptr10;
      var $and11=$19 & 7;
      var $sub=(((8)-($and11))|0);
      var $and12=$sub & 7;
      var $cond = $and12;label = 9; break;
    case 9: 
      var $cond;
      var $add_ptr13=(($15+$cond)|0);
      var $20=$add_ptr13;
      $p=$20;
      var $21=$p;
      var $head=(($21+4)|0);
      var $22=HEAP32[(($head)>>2)];
      var $and14=$22 & -8;
      $psize=$and14;
      var $23=$p;
      var $head15=(($23+4)|0);
      var $24=HEAP32[(($head15)>>2)];
      var $and16=$24 & 3;
      var $cmp17=(($and16)|0)!=1;
      if ($cmp17) { label = 86; break; } else { label = 10; break; }
    case 10: 
      var $25=$p;
      var $26=$25;
      var $27=$psize;
      var $add_ptr19=(($26+$27)|0);
      var $28=$base;
      var $29=$size;
      var $add_ptr20=(($28+$29)|0);
      var $add_ptr21=((($add_ptr20)-(40))|0);
      var $cmp22=(($add_ptr19)>>>0) >= (($add_ptr21)>>>0);
      if ($cmp22) { label = 11; break; } else { label = 86; break; }
    case 11: 
      var $30=$p;
      var $31=$30;
      $tp=$31;
      var $32=$p;
      var $33=$m_addr;
      var $dv=(($33+20)|0);
      var $34=HEAP32[(($dv)>>2)];
      var $cmp24=(($32)|0)==(($34)|0);
      if ($cmp24) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $35=$m_addr;
      var $dv26=(($35+20)|0);
      HEAP32[(($dv26)>>2)]=0;
      var $36=$m_addr;
      var $dvsize=(($36+8)|0);
      HEAP32[(($dvsize)>>2)]=0;
      label = 59; break;
    case 13: 
      var $37=$tp;
      var $parent=(($37+24)|0);
      var $38=HEAP32[(($parent)>>2)];
      $XP=$38;
      var $39=$tp;
      var $bk=(($39+12)|0);
      var $40=HEAP32[(($bk)>>2)];
      var $41=$tp;
      var $cmp27=(($40)|0)!=(($41)|0);
      if ($cmp27) { label = 14; break; } else { label = 18; break; }
    case 14: 
      var $42=$tp;
      var $fd=(($42+8)|0);
      var $43=HEAP32[(($fd)>>2)];
      $F=$43;
      var $44=$tp;
      var $bk29=(($44+12)|0);
      var $45=HEAP32[(($bk29)>>2)];
      $R=$45;
      var $46=$F;
      var $47=$46;
      var $48=$m_addr;
      var $least_addr=(($48+16)|0);
      var $49=HEAP32[(($least_addr)>>2)];
      var $cmp30=(($47)>>>0) >= (($49)>>>0);
      var $conv=(($cmp30)&1);
      var $expval=($conv);
      var $tobool31=(($expval)|0)!=0;
      if ($tobool31) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $50=$R;
      var $51=$F;
      var $bk33=(($51+12)|0);
      HEAP32[(($bk33)>>2)]=$50;
      var $52=$F;
      var $53=$R;
      var $fd34=(($53+8)|0);
      HEAP32[(($fd34)>>2)]=$52;
      label = 17; break;
    case 16: 
      _abort();

    case 17: 
      label = 30; break;
    case 18: 
      var $54=$tp;
      var $child=(($54+16)|0);
      var $arrayidx=(($child+4)|0);
      $RP=$arrayidx;
      var $55=HEAP32[(($arrayidx)>>2)];
      $R=$55;
      var $cmp37=(($55)|0)!=0;
      if ($cmp37) { label = 20; break; } else { label = 19; break; }
    case 19: 
      var $56=$tp;
      var $child39=(($56+16)|0);
      var $arrayidx40=(($child39)|0);
      $RP=$arrayidx40;
      var $57=HEAP32[(($arrayidx40)>>2)];
      $R=$57;
      var $cmp41=(($57)|0)!=0;
      if ($cmp41) { label = 20; break; } else { label = 29; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $58=$R;
      var $child45=(($58+16)|0);
      var $arrayidx46=(($child45+4)|0);
      $CP=$arrayidx46;
      var $59=HEAP32[(($arrayidx46)>>2)];
      var $cmp47=(($59)|0)!=0;
      if ($cmp47) { var $62 = 1;label = 23; break; } else { label = 22; break; }
    case 22: 
      var $60=$R;
      var $child49=(($60+16)|0);
      var $arrayidx50=(($child49)|0);
      $CP=$arrayidx50;
      var $61=HEAP32[(($arrayidx50)>>2)];
      var $cmp51=(($61)|0)!=0;
      var $62 = $cmp51;label = 23; break;
    case 23: 
      var $62;
      if ($62) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $63=$CP;
      $RP=$63;
      var $64=HEAP32[(($63)>>2)];
      $R=$64;
      label = 21; break;
    case 25: 
      var $65=$RP;
      var $66=$65;
      var $67=$m_addr;
      var $least_addr54=(($67+16)|0);
      var $68=HEAP32[(($least_addr54)>>2)];
      var $cmp55=(($66)>>>0) >= (($68)>>>0);
      var $conv56=(($cmp55)&1);
      var $expval57=($conv56);
      var $tobool58=(($expval57)|0)!=0;
      if ($tobool58) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $69=$RP;
      HEAP32[(($69)>>2)]=0;
      label = 28; break;
    case 27: 
      _abort();

    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $70=$XP;
      var $cmp64=(($70)|0)!=0;
      if ($cmp64) { label = 31; break; } else { label = 58; break; }
    case 31: 
      var $71=$tp;
      var $index=(($71+28)|0);
      var $72=HEAP32[(($index)>>2)];
      var $73=$m_addr;
      var $treebins=(($73+304)|0);
      var $arrayidx67=(($treebins+($72<<2))|0);
      $H=$arrayidx67;
      var $74=$tp;
      var $75=$H;
      var $76=HEAP32[(($75)>>2)];
      var $cmp68=(($74)|0)==(($76)|0);
      if ($cmp68) { label = 32; break; } else { label = 35; break; }
    case 32: 
      var $77=$R;
      var $78=$H;
      HEAP32[(($78)>>2)]=$77;
      var $cmp71=(($77)|0)==0;
      if ($cmp71) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $79=$tp;
      var $index74=(($79+28)|0);
      var $80=HEAP32[(($index74)>>2)];
      var $shl=1 << $80;
      var $neg=$shl ^ -1;
      var $81=$m_addr;
      var $treemap=(($81+4)|0);
      var $82=HEAP32[(($treemap)>>2)];
      var $and75=$82 & $neg;
      HEAP32[(($treemap)>>2)]=$and75;
      label = 34; break;
    case 34: 
      label = 42; break;
    case 35: 
      var $83=$XP;
      var $84=$83;
      var $85=$m_addr;
      var $least_addr78=(($85+16)|0);
      var $86=HEAP32[(($least_addr78)>>2)];
      var $cmp79=(($84)>>>0) >= (($86)>>>0);
      var $conv80=(($cmp79)&1);
      var $expval81=($conv80);
      var $tobool82=(($expval81)|0)!=0;
      if ($tobool82) { label = 36; break; } else { label = 40; break; }
    case 36: 
      var $87=$XP;
      var $child84=(($87+16)|0);
      var $arrayidx85=(($child84)|0);
      var $88=HEAP32[(($arrayidx85)>>2)];
      var $89=$tp;
      var $cmp86=(($88)|0)==(($89)|0);
      if ($cmp86) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $90=$R;
      var $91=$XP;
      var $child89=(($91+16)|0);
      var $arrayidx90=(($child89)|0);
      HEAP32[(($arrayidx90)>>2)]=$90;
      label = 39; break;
    case 38: 
      var $92=$R;
      var $93=$XP;
      var $child92=(($93+16)|0);
      var $arrayidx93=(($child92+4)|0);
      HEAP32[(($arrayidx93)>>2)]=$92;
      label = 39; break;
    case 39: 
      label = 41; break;
    case 40: 
      _abort();

    case 41: 
      label = 42; break;
    case 42: 
      var $94=$R;
      var $cmp98=(($94)|0)!=0;
      if ($cmp98) { label = 43; break; } else { label = 57; break; }
    case 43: 
      var $95=$R;
      var $96=$95;
      var $97=$m_addr;
      var $least_addr101=(($97+16)|0);
      var $98=HEAP32[(($least_addr101)>>2)];
      var $cmp102=(($96)>>>0) >= (($98)>>>0);
      var $conv103=(($cmp102)&1);
      var $expval104=($conv103);
      var $tobool105=(($expval104)|0)!=0;
      if ($tobool105) { label = 44; break; } else { label = 55; break; }
    case 44: 
      var $99=$XP;
      var $100=$R;
      var $parent107=(($100+24)|0);
      HEAP32[(($parent107)>>2)]=$99;
      var $101=$tp;
      var $child108=(($101+16)|0);
      var $arrayidx109=(($child108)|0);
      var $102=HEAP32[(($arrayidx109)>>2)];
      $C0=$102;
      var $cmp110=(($102)|0)!=0;
      if ($cmp110) { label = 45; break; } else { label = 49; break; }
    case 45: 
      var $103=$C0;
      var $104=$103;
      var $105=$m_addr;
      var $least_addr113=(($105+16)|0);
      var $106=HEAP32[(($least_addr113)>>2)];
      var $cmp114=(($104)>>>0) >= (($106)>>>0);
      var $conv115=(($cmp114)&1);
      var $expval116=($conv115);
      var $tobool117=(($expval116)|0)!=0;
      if ($tobool117) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $107=$C0;
      var $108=$R;
      var $child119=(($108+16)|0);
      var $arrayidx120=(($child119)|0);
      HEAP32[(($arrayidx120)>>2)]=$107;
      var $109=$R;
      var $110=$C0;
      var $parent121=(($110+24)|0);
      HEAP32[(($parent121)>>2)]=$109;
      label = 48; break;
    case 47: 
      _abort();

    case 48: 
      label = 49; break;
    case 49: 
      var $111=$tp;
      var $child125=(($111+16)|0);
      var $arrayidx126=(($child125+4)|0);
      var $112=HEAP32[(($arrayidx126)>>2)];
      $C1=$112;
      var $cmp127=(($112)|0)!=0;
      if ($cmp127) { label = 50; break; } else { label = 54; break; }
    case 50: 
      var $113=$C1;
      var $114=$113;
      var $115=$m_addr;
      var $least_addr130=(($115+16)|0);
      var $116=HEAP32[(($least_addr130)>>2)];
      var $cmp131=(($114)>>>0) >= (($116)>>>0);
      var $conv132=(($cmp131)&1);
      var $expval133=($conv132);
      var $tobool134=(($expval133)|0)!=0;
      if ($tobool134) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $117=$C1;
      var $118=$R;
      var $child136=(($118+16)|0);
      var $arrayidx137=(($child136+4)|0);
      HEAP32[(($arrayidx137)>>2)]=$117;
      var $119=$R;
      var $120=$C1;
      var $parent138=(($120+24)|0);
      HEAP32[(($parent138)>>2)]=$119;
      label = 53; break;
    case 52: 
      _abort();

    case 53: 
      label = 54; break;
    case 54: 
      label = 56; break;
    case 55: 
      _abort();

    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $121=$psize;
      var $shr=$121 >>> 8;
      $X=$shr;
      var $122=$X;
      var $cmp148=(($122)|0)==0;
      if ($cmp148) { label = 60; break; } else { label = 61; break; }
    case 60: 
      $I=0;
      label = 65; break;
    case 61: 
      var $123=$X;
      var $cmp152=(($123)>>>0) > 65535;
      if ($cmp152) { label = 62; break; } else { label = 63; break; }
    case 62: 
      $I=31;
      label = 64; break;
    case 63: 
      var $124=$X;
      $Y=$124;
      var $125=$Y;
      var $sub156=((($125)-(256))|0);
      var $shr157=$sub156 >>> 16;
      var $and158=$shr157 & 8;
      $N=$and158;
      var $126=$N;
      var $127=$Y;
      var $shl159=$127 << $126;
      $Y=$shl159;
      var $sub160=((($shl159)-(4096))|0);
      var $shr161=$sub160 >>> 16;
      var $and162=$shr161 & 4;
      $K=$and162;
      var $128=$K;
      var $129=$N;
      var $add=((($129)+($128))|0);
      $N=$add;
      var $130=$K;
      var $131=$Y;
      var $shl163=$131 << $130;
      $Y=$shl163;
      var $sub164=((($shl163)-(16384))|0);
      var $shr165=$sub164 >>> 16;
      var $and166=$shr165 & 2;
      $K=$and166;
      var $132=$N;
      var $add167=((($132)+($and166))|0);
      $N=$add167;
      var $133=$N;
      var $sub168=(((14)-($133))|0);
      var $134=$K;
      var $135=$Y;
      var $shl169=$135 << $134;
      $Y=$shl169;
      var $shr170=$shl169 >>> 15;
      var $add171=((($sub168)+($shr170))|0);
      $K=$add171;
      var $136=$K;
      var $shl172=$136 << 1;
      var $137=$psize;
      var $138=$K;
      var $add173=((($138)+(7))|0);
      var $shr174=$137 >>> (($add173)>>>0);
      var $and175=$shr174 & 1;
      var $add176=((($shl172)+($and175))|0);
      $I=$add176;
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $139=$I;
      var $140=$m_addr;
      var $treebins179=(($140+304)|0);
      var $arrayidx180=(($treebins179+($139<<2))|0);
      $H147=$arrayidx180;
      var $141=$I;
      var $142=$tp;
      var $index181=(($142+28)|0);
      HEAP32[(($index181)>>2)]=$141;
      var $143=$tp;
      var $child182=(($143+16)|0);
      var $arrayidx183=(($child182+4)|0);
      HEAP32[(($arrayidx183)>>2)]=0;
      var $144=$tp;
      var $child184=(($144+16)|0);
      var $arrayidx185=(($child184)|0);
      HEAP32[(($arrayidx185)>>2)]=0;
      var $145=$m_addr;
      var $treemap186=(($145+4)|0);
      var $146=HEAP32[(($treemap186)>>2)];
      var $147=$I;
      var $shl187=1 << $147;
      var $and188=$146 & $shl187;
      var $tobool189=(($and188)|0)!=0;
      if ($tobool189) { label = 67; break; } else { label = 66; break; }
    case 66: 
      var $148=$I;
      var $shl191=1 << $148;
      var $149=$m_addr;
      var $treemap192=(($149+4)|0);
      var $150=HEAP32[(($treemap192)>>2)];
      var $or=$150 | $shl191;
      HEAP32[(($treemap192)>>2)]=$or;
      var $151=$tp;
      var $152=$H147;
      HEAP32[(($152)>>2)]=$151;
      var $153=$H147;
      var $154=$153;
      var $155=$tp;
      var $parent193=(($155+24)|0);
      HEAP32[(($parent193)>>2)]=$154;
      var $156=$tp;
      var $157=$tp;
      var $bk194=(($157+12)|0);
      HEAP32[(($bk194)>>2)]=$156;
      var $158=$tp;
      var $fd195=(($158+8)|0);
      HEAP32[(($fd195)>>2)]=$156;
      label = 85; break;
    case 67: 
      var $159=$H147;
      var $160=HEAP32[(($159)>>2)];
      $T=$160;
      var $161=$psize;
      var $162=$I;
      var $cmp198=(($162)|0)==31;
      if ($cmp198) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $cond207 = 0;label = 70; break;
    case 69: 
      var $163=$I;
      var $shr202=$163 >>> 1;
      var $add203=((($shr202)+(8))|0);
      var $sub204=((($add203)-(2))|0);
      var $sub205=(((31)-($sub204))|0);
      var $cond207 = $sub205;label = 70; break;
    case 70: 
      var $cond207;
      var $shl208=$161 << $cond207;
      $K197=$shl208;
      label = 71; break;
    case 71: 
      var $164=$T;
      var $head209=(($164+4)|0);
      var $165=HEAP32[(($head209)>>2)];
      var $and210=$165 & -8;
      var $166=$psize;
      var $cmp211=(($and210)|0)!=(($166)|0);
      if ($cmp211) { label = 72; break; } else { label = 78; break; }
    case 72: 
      var $167=$K197;
      var $shr214=$167 >>> 31;
      var $and215=$shr214 & 1;
      var $168=$T;
      var $child216=(($168+16)|0);
      var $arrayidx217=(($child216+($and215<<2))|0);
      $C=$arrayidx217;
      var $169=$K197;
      var $shl218=$169 << 1;
      $K197=$shl218;
      var $170=$C;
      var $171=HEAP32[(($170)>>2)];
      var $cmp219=(($171)|0)!=0;
      if ($cmp219) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $172=$C;
      var $173=HEAP32[(($172)>>2)];
      $T=$173;
      label = 77; break;
    case 74: 
      var $174=$C;
      var $175=$174;
      var $176=$m_addr;
      var $least_addr223=(($176+16)|0);
      var $177=HEAP32[(($least_addr223)>>2)];
      var $cmp224=(($175)>>>0) >= (($177)>>>0);
      var $conv225=(($cmp224)&1);
      var $expval226=($conv225);
      var $tobool227=(($expval226)|0)!=0;
      if ($tobool227) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $178=$tp;
      var $179=$C;
      HEAP32[(($179)>>2)]=$178;
      var $180=$T;
      var $181=$tp;
      var $parent229=(($181+24)|0);
      HEAP32[(($parent229)>>2)]=$180;
      var $182=$tp;
      var $183=$tp;
      var $bk230=(($183+12)|0);
      HEAP32[(($bk230)>>2)]=$182;
      var $184=$tp;
      var $fd231=(($184+8)|0);
      HEAP32[(($fd231)>>2)]=$182;
      label = 84; break;
    case 76: 
      _abort();

    case 77: 
      label = 83; break;
    case 78: 
      var $185=$T;
      var $fd236=(($185+8)|0);
      var $186=HEAP32[(($fd236)>>2)];
      $F235=$186;
      var $187=$T;
      var $188=$187;
      var $189=$m_addr;
      var $least_addr237=(($189+16)|0);
      var $190=HEAP32[(($least_addr237)>>2)];
      var $cmp238=(($188)>>>0) >= (($190)>>>0);
      if ($cmp238) { label = 79; break; } else { var $195 = 0;label = 80; break; }
    case 79: 
      var $191=$F235;
      var $192=$191;
      var $193=$m_addr;
      var $least_addr240=(($193+16)|0);
      var $194=HEAP32[(($least_addr240)>>2)];
      var $cmp241=(($192)>>>0) >= (($194)>>>0);
      var $195 = $cmp241;label = 80; break;
    case 80: 
      var $195;
      var $land_ext=(($195)&1);
      var $expval243=($land_ext);
      var $tobool244=(($expval243)|0)!=0;
      if ($tobool244) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $196=$tp;
      var $197=$F235;
      var $bk246=(($197+12)|0);
      HEAP32[(($bk246)>>2)]=$196;
      var $198=$T;
      var $fd247=(($198+8)|0);
      HEAP32[(($fd247)>>2)]=$196;
      var $199=$F235;
      var $200=$tp;
      var $fd248=(($200+8)|0);
      HEAP32[(($fd248)>>2)]=$199;
      var $201=$T;
      var $202=$tp;
      var $bk249=(($202+12)|0);
      HEAP32[(($bk249)>>2)]=$201;
      var $203=$tp;
      var $parent250=(($203+24)|0);
      HEAP32[(($parent250)>>2)]=0;
      label = 84; break;
    case 82: 
      _abort();

    case 83: 
      label = 71; break;
    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      var $204=$sp;
      $pred=$204;
      var $205=$next3;
      $sp=$205;
      label = 3; break;
    case 88: 
      var $206=$nsegs;
      var $cmp257=(($206)>>>0) > 4294967295;
      if ($cmp257) { label = 89; break; } else { label = 90; break; }
    case 89: 
      var $207=$nsegs;
      var $cond262 = $207;label = 91; break;
    case 90: 
      var $cond262 = -1;label = 91; break;
    case 91: 
      var $cond262;
      var $208=$m_addr;
      var $release_checks=(($208+32)|0);
      HEAP32[(($release_checks)>>2)]=$cond262;
      var $209=$released;

      return $209;
  }

}
_release_unused_segments["X"]=1;

function _mmap_resize($m, $oldp, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $oldp_addr;
      var $nb_addr;
      var $oldsize;
      var $offset;
      var $oldmmsize;
      var $newmmsize;
      var $cp;
      var $newp;
      var $psize;
      $m_addr=$m;
      $oldp_addr=$oldp;
      $nb_addr=$nb;
      var $0=$oldp_addr;
      var $head=(($0+4)|0);
      var $1=HEAP32[(($head)>>2)];
      var $and=$1 & -8;
      $oldsize=$and;
      var $2=$nb_addr;
      var $shr=$2 >>> 3;
      var $cmp=(($shr)>>>0) < 32;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 15; break;
    case 4: 
      var $3=$oldsize;
      var $4=$nb_addr;
      var $add=((($4)+(4))|0);
      var $cmp1=(($3)>>>0) >= (($add)>>>0);
      if ($cmp1) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $5=$oldsize;
      var $6=$nb_addr;
      var $sub=((($5)-($6))|0);
      var $7=HEAP32[((((5243288)|0))>>2)];
      var $shl=$7 << 1;
      var $cmp2=(($sub)>>>0) <= (($shl)>>>0);
      if ($cmp2) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $8=$oldp_addr;
      $retval=$8;
      label = 15; break;
    case 7: 
      var $9=$oldp_addr;
      var $prev_foot=(($9)|0);
      var $10=HEAP32[(($prev_foot)>>2)];
      $offset=$10;
      var $11=$oldsize;
      var $12=$offset;
      var $add4=((($11)+($12))|0);
      var $add5=((($add4)+(16))|0);
      $oldmmsize=$add5;
      var $13=$nb_addr;
      var $add6=((($13)+(24))|0);
      var $add7=((($add6)+(7))|0);
      var $14=HEAP32[((((5243284)|0))>>2)];
      var $sub8=((($14)-(1))|0);
      var $add9=((($add7)+($sub8))|0);
      var $15=HEAP32[((((5243284)|0))>>2)];
      var $sub10=((($15)-(1))|0);
      var $neg=$sub10 ^ -1;
      var $and11=$add9 & $neg;
      $newmmsize=$and11;
      $cp=-1;
      var $16=$cp;
      var $cmp12=(($16)|0)!=-1;
      if ($cmp12) { label = 8; break; } else { label = 13; break; }
    case 8: 
      var $17=$cp;
      var $18=$offset;
      var $add_ptr=(($17+$18)|0);
      var $19=$add_ptr;
      $newp=$19;
      var $20=$newmmsize;
      var $21=$offset;
      var $sub14=((($20)-($21))|0);
      var $sub15=((($sub14)-(16))|0);
      $psize=$sub15;
      var $22=$psize;
      var $23=$newp;
      var $head16=(($23+4)|0);
      HEAP32[(($head16)>>2)]=$22;
      var $24=$newp;
      var $25=$24;
      var $26=$psize;
      var $add_ptr17=(($25+$26)|0);
      var $27=$add_ptr17;
      var $head18=(($27+4)|0);
      HEAP32[(($head18)>>2)]=7;
      var $28=$newp;
      var $29=$28;
      var $30=$psize;
      var $add19=((($30)+(4))|0);
      var $add_ptr20=(($29+$add19)|0);
      var $31=$add_ptr20;
      var $head21=(($31+4)|0);
      HEAP32[(($head21)>>2)]=0;
      var $32=$cp;
      var $33=$m_addr;
      var $least_addr=(($33+16)|0);
      var $34=HEAP32[(($least_addr)>>2)];
      var $cmp22=(($32)>>>0) < (($34)>>>0);
      if ($cmp22) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $35=$cp;
      var $36=$m_addr;
      var $least_addr24=(($36+16)|0);
      HEAP32[(($least_addr24)>>2)]=$35;
      label = 10; break;
    case 10: 
      var $37=$newmmsize;
      var $38=$oldmmsize;
      var $sub26=((($37)-($38))|0);
      var $39=$m_addr;
      var $footprint=(($39+432)|0);
      var $40=HEAP32[(($footprint)>>2)];
      var $add27=((($40)+($sub26))|0);
      HEAP32[(($footprint)>>2)]=$add27;
      var $41=$m_addr;
      var $max_footprint=(($41+436)|0);
      var $42=HEAP32[(($max_footprint)>>2)];
      var $cmp28=(($add27)>>>0) > (($42)>>>0);
      if ($cmp28) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $43=$m_addr;
      var $footprint30=(($43+432)|0);
      var $44=HEAP32[(($footprint30)>>2)];
      var $45=$m_addr;
      var $max_footprint31=(($45+436)|0);
      HEAP32[(($max_footprint31)>>2)]=$44;
      label = 12; break;
    case 12: 
      var $46=$newp;
      $retval=$46;
      label = 15; break;
    case 13: 
      label = 14; break;
    case 14: 
      $retval=0;
      label = 15; break;
    case 15: 
      var $47=$retval;

      return $47;
  }

}
_mmap_resize["X"]=1;

function _segment_holding($m, $addr) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $addr_addr;
      var $sp;
      $m_addr=$m;
      $addr_addr=$addr;
      var $0=$m_addr;
      var $seg=(($0+444)|0);
      $sp=$seg;
      label = 3; break;
    case 3: 
      var $1=$addr_addr;
      var $2=$sp;
      var $base=(($2)|0);
      var $3=HEAP32[(($base)>>2)];
      var $cmp=(($1)>>>0) >= (($3)>>>0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $4=$addr_addr;
      var $5=$sp;
      var $base1=(($5)|0);
      var $6=HEAP32[(($base1)>>2)];
      var $7=$sp;
      var $size=(($7+4)|0);
      var $8=HEAP32[(($size)>>2)];
      var $add_ptr=(($6+$8)|0);
      var $cmp2=(($4)>>>0) < (($add_ptr)>>>0);
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $9=$sp;
      $retval=$9;
      label = 9; break;
    case 6: 
      var $10=$sp;
      var $next=(($10+8)|0);
      var $11=HEAP32[(($next)>>2)];
      $sp=$11;
      var $cmp3=(($11)|0)==0;
      if ($cmp3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $retval=0;
      label = 9; break;
    case 8: 
      label = 3; break;
    case 9: 
      var $12=$retval;

      return $12;
  }

}


function _init_top($m, $p, $psize) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $p_addr;
      var $psize_addr;
      var $offset;
      $m_addr=$m;
      $p_addr=$p;
      $psize_addr=$psize;
      var $0=$p_addr;
      var $1=$0;
      var $add_ptr=(($1+8)|0);
      var $2=$add_ptr;
      var $and=$2 & 7;
      var $cmp=(($and)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $cond = 0;label = 5; break;
    case 4: 
      var $3=$p_addr;
      var $4=$3;
      var $add_ptr1=(($4+8)|0);
      var $5=$add_ptr1;
      var $and2=$5 & 7;
      var $sub=(((8)-($and2))|0);
      var $and3=$sub & 7;
      var $cond = $and3;label = 5; break;
    case 5: 
      var $cond;
      $offset=$cond;
      var $6=$p_addr;
      var $7=$6;
      var $8=$offset;
      var $add_ptr4=(($7+$8)|0);
      var $9=$add_ptr4;
      $p_addr=$9;
      var $10=$offset;
      var $11=$psize_addr;
      var $sub5=((($11)-($10))|0);
      $psize_addr=$sub5;
      var $12=$p_addr;
      var $13=$m_addr;
      var $top=(($13+24)|0);
      HEAP32[(($top)>>2)]=$12;
      var $14=$psize_addr;
      var $15=$m_addr;
      var $topsize=(($15+12)|0);
      HEAP32[(($topsize)>>2)]=$14;
      var $16=$psize_addr;
      var $or=$16 | 1;
      var $17=$p_addr;
      var $head=(($17+4)|0);
      HEAP32[(($head)>>2)]=$or;
      var $18=$p_addr;
      var $19=$18;
      var $20=$psize_addr;
      var $add_ptr6=(($19+$20)|0);
      var $21=$add_ptr6;
      var $head7=(($21+4)|0);
      HEAP32[(($head7)>>2)]=40;
      var $22=HEAP32[((((5243296)|0))>>2)];
      var $23=$m_addr;
      var $trim_check=(($23+28)|0);
      HEAP32[(($trim_check)>>2)]=$22;

      return;
  }

}
_init_top["X"]=1;

function _mmap_alloc($m, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $nb_addr;
      var $mmsize;
      var $mm;
      var $offset;
      var $psize;
      var $p;
      $m_addr=$m;
      $nb_addr=$nb;
      var $0=$nb_addr;
      var $add=((($0)+(24))|0);
      var $add1=((($add)+(7))|0);
      var $1=HEAP32[((((5243284)|0))>>2)];
      var $sub=((($1)-(1))|0);
      var $add2=((($add1)+($sub))|0);
      var $2=HEAP32[((((5243284)|0))>>2)];
      var $sub3=((($2)-(1))|0);
      var $neg=$sub3 ^ -1;
      var $and=$add2 & $neg;
      $mmsize=$and;
      var $3=$mmsize;
      var $4=$nb_addr;
      var $cmp=(($3)>>>0) > (($4)>>>0);
      if ($cmp) { label = 3; break; } else { label = 14; break; }
    case 3: 
      $mm=-1;
      var $5=$mm;
      var $cmp4=(($5)|0)!=-1;
      if ($cmp4) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $6=$mm;
      var $add_ptr=(($6+8)|0);
      var $7=$add_ptr;
      var $and6=$7 & 7;
      var $cmp7=(($and6)|0)==0;
      if ($cmp7) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $cond = 0;label = 7; break;
    case 6: 
      var $8=$mm;
      var $add_ptr8=(($8+8)|0);
      var $9=$add_ptr8;
      var $and9=$9 & 7;
      var $sub10=(((8)-($and9))|0);
      var $and11=$sub10 & 7;
      var $cond = $and11;label = 7; break;
    case 7: 
      var $cond;
      $offset=$cond;
      var $10=$mmsize;
      var $11=$offset;
      var $sub12=((($10)-($11))|0);
      var $sub13=((($sub12)-(16))|0);
      $psize=$sub13;
      var $12=$mm;
      var $13=$offset;
      var $add_ptr14=(($12+$13)|0);
      var $14=$add_ptr14;
      $p=$14;
      var $15=$offset;
      var $16=$p;
      var $prev_foot=(($16)|0);
      HEAP32[(($prev_foot)>>2)]=$15;
      var $17=$psize;
      var $18=$p;
      var $head=(($18+4)|0);
      HEAP32[(($head)>>2)]=$17;
      var $19=$p;
      var $20=$19;
      var $21=$psize;
      var $add_ptr15=(($20+$21)|0);
      var $22=$add_ptr15;
      var $head16=(($22+4)|0);
      HEAP32[(($head16)>>2)]=7;
      var $23=$p;
      var $24=$23;
      var $25=$psize;
      var $add17=((($25)+(4))|0);
      var $add_ptr18=(($24+$add17)|0);
      var $26=$add_ptr18;
      var $head19=(($26+4)|0);
      HEAP32[(($head19)>>2)]=0;
      var $27=$m_addr;
      var $least_addr=(($27+16)|0);
      var $28=HEAP32[(($least_addr)>>2)];
      var $cmp20=(($28)|0)==0;
      if ($cmp20) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $29=$mm;
      var $30=$m_addr;
      var $least_addr21=(($30+16)|0);
      var $31=HEAP32[(($least_addr21)>>2)];
      var $cmp22=(($29)>>>0) < (($31)>>>0);
      if ($cmp22) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $32=$mm;
      var $33=$m_addr;
      var $least_addr24=(($33+16)|0);
      HEAP32[(($least_addr24)>>2)]=$32;
      label = 10; break;
    case 10: 
      var $34=$mmsize;
      var $35=$m_addr;
      var $footprint=(($35+432)|0);
      var $36=HEAP32[(($footprint)>>2)];
      var $add25=((($36)+($34))|0);
      HEAP32[(($footprint)>>2)]=$add25;
      var $37=$m_addr;
      var $max_footprint=(($37+436)|0);
      var $38=HEAP32[(($max_footprint)>>2)];
      var $cmp26=(($add25)>>>0) > (($38)>>>0);
      if ($cmp26) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $39=$m_addr;
      var $footprint28=(($39+432)|0);
      var $40=HEAP32[(($footprint28)>>2)];
      var $41=$m_addr;
      var $max_footprint29=(($41+436)|0);
      HEAP32[(($max_footprint29)>>2)]=$40;
      label = 12; break;
    case 12: 
      var $42=$p;
      var $43=$42;
      var $add_ptr31=(($43+8)|0);
      $retval=$add_ptr31;
      label = 15; break;
    case 13: 
      label = 14; break;
    case 14: 
      $retval=0;
      label = 15; break;
    case 15: 
      var $44=$retval;

      return $44;
  }

}
_mmap_alloc["X"]=1;

function _init_bins($m) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $i;
      var $bin;
      $m_addr=$m;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)>>>0) < 32;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$i;
      var $shl=$1 << 1;
      var $2=$m_addr;
      var $smallbins=(($2+40)|0);
      var $arrayidx=(($smallbins+($shl<<2))|0);
      var $3=$arrayidx;
      var $4=$3;
      $bin=$4;
      var $5=$bin;
      var $6=$bin;
      var $bk=(($6+12)|0);
      HEAP32[(($bk)>>2)]=$5;
      var $7=$bin;
      var $fd=(($7+8)|0);
      HEAP32[(($fd)>>2)]=$5;
      label = 5; break;
    case 5: 
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 

      return;
  }

}


function _internal_realloc($m, $oldmem, $bytes) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $oldmem_addr;
      var $bytes_addr;
      var $oldp;
      var $oldsize;
      var $next;
      var $newp;
      var $extra;
      var $nb;
      var $rsize;
      var $remainder;
      var $newsize;
      var $newtopsize;
      var $newtop;
      var $newmem;
      var $oc;
      $m_addr=$m;
      $oldmem_addr=$oldmem;
      $bytes_addr=$bytes;
      var $0=$bytes_addr;
      var $cmp=(($0)>>>0) >= 4294967232;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $call=___errno_location();
      HEAP32[(($call)>>2)]=12;
      $retval=0;
      label = 35; break;
    case 4: 
      var $1=$oldmem_addr;
      var $add_ptr=((($1)-(8))|0);
      var $2=$add_ptr;
      $oldp=$2;
      var $3=$oldp;
      var $head=(($3+4)|0);
      var $4=HEAP32[(($head)>>2)];
      var $and=$4 & -8;
      $oldsize=$and;
      var $5=$oldp;
      var $6=$5;
      var $7=$oldsize;
      var $add_ptr1=(($6+$7)|0);
      var $8=$add_ptr1;
      $next=$8;
      $newp=0;
      $extra=0;
      var $9=$oldp;
      var $10=$9;
      var $11=$m_addr;
      var $least_addr=(($11+16)|0);
      var $12=HEAP32[(($least_addr)>>2)];
      var $cmp2=(($10)>>>0) >= (($12)>>>0);
      if ($cmp2) { label = 5; break; } else { var $21 = 0;label = 8; break; }
    case 5: 
      var $13=$oldp;
      var $head3=(($13+4)|0);
      var $14=HEAP32[(($head3)>>2)];
      var $and4=$14 & 3;
      var $cmp5=(($and4)|0)!=1;
      if ($cmp5) { label = 6; break; } else { var $21 = 0;label = 8; break; }
    case 6: 
      var $15=$oldp;
      var $16=$15;
      var $17=$next;
      var $18=$17;
      var $cmp7=(($16)>>>0) < (($18)>>>0);
      if ($cmp7) { label = 7; break; } else { var $21 = 0;label = 8; break; }
    case 7: 
      var $19=$next;
      var $head8=(($19+4)|0);
      var $20=HEAP32[(($head8)>>2)];
      var $and9=$20 & 1;
      var $tobool=(($and9)|0)!=0;
      var $21 = $tobool;label = 8; break;
    case 8: 
      var $21;
      var $land_ext=(($21)&1);
      var $expval=($land_ext);
      var $tobool10=(($expval)|0)!=0;
      if ($tobool10) { label = 9; break; } else { label = 24; break; }
    case 9: 
      var $22=$bytes_addr;
      var $cmp12=(($22)>>>0) < 11;
      if ($cmp12) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $cond = 16;label = 12; break;
    case 11: 
      var $23=$bytes_addr;
      var $add=((($23)+(4))|0);
      var $add13=((($add)+(7))|0);
      var $and14=$add13 & -8;
      var $cond = $and14;label = 12; break;
    case 12: 
      var $cond;
      $nb=$cond;
      var $24=$oldp;
      var $head15=(($24+4)|0);
      var $25=HEAP32[(($head15)>>2)];
      var $and16=$25 & 3;
      var $cmp17=(($and16)|0)==0;
      if ($cmp17) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $26=$m_addr;
      var $27=$oldp;
      var $28=$nb;
      var $call19=_mmap_resize($26, $27, $28);
      $newp=$call19;
      label = 23; break;
    case 14: 
      var $29=$oldsize;
      var $30=$nb;
      var $cmp20=(($29)>>>0) >= (($30)>>>0);
      if ($cmp20) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $31=$oldsize;
      var $32=$nb;
      var $sub=((($31)-($32))|0);
      $rsize=$sub;
      var $33=$oldp;
      $newp=$33;
      var $34=$rsize;
      var $cmp22=(($34)>>>0) >= 16;
      if ($cmp22) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $35=$newp;
      var $36=$35;
      var $37=$nb;
      var $add_ptr24=(($36+$37)|0);
      var $38=$add_ptr24;
      $remainder=$38;
      var $39=$newp;
      var $head25=(($39+4)|0);
      var $40=HEAP32[(($head25)>>2)];
      var $and26=$40 & 1;
      var $41=$nb;
      var $or=$and26 | $41;
      var $or27=$or | 2;
      var $42=$newp;
      var $head28=(($42+4)|0);
      HEAP32[(($head28)>>2)]=$or27;
      var $43=$newp;
      var $44=$43;
      var $45=$nb;
      var $add_ptr29=(($44+$45)|0);
      var $46=$add_ptr29;
      var $head30=(($46+4)|0);
      var $47=HEAP32[(($head30)>>2)];
      var $or31=$47 | 1;
      HEAP32[(($head30)>>2)]=$or31;
      var $48=$rsize;
      var $or32=$48 | 1;
      var $or33=$or32 | 2;
      var $49=$remainder;
      var $head34=(($49+4)|0);
      HEAP32[(($head34)>>2)]=$or33;
      var $50=$remainder;
      var $51=$50;
      var $52=$rsize;
      var $add_ptr35=(($51+$52)|0);
      var $53=$add_ptr35;
      var $head36=(($53+4)|0);
      var $54=HEAP32[(($head36)>>2)];
      var $or37=$54 | 1;
      HEAP32[(($head36)>>2)]=$or37;
      var $55=$remainder;
      var $56=$55;
      var $add_ptr38=(($56+8)|0);
      $extra=$add_ptr38;
      label = 17; break;
    case 17: 
      label = 22; break;
    case 18: 
      var $57=$next;
      var $58=$m_addr;
      var $top=(($58+24)|0);
      var $59=HEAP32[(($top)>>2)];
      var $cmp41=(($57)|0)==(($59)|0);
      if ($cmp41) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $60=$oldsize;
      var $61=$m_addr;
      var $topsize=(($61+12)|0);
      var $62=HEAP32[(($topsize)>>2)];
      var $add43=((($60)+($62))|0);
      var $63=$nb;
      var $cmp44=(($add43)>>>0) > (($63)>>>0);
      if ($cmp44) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $64=$oldsize;
      var $65=$m_addr;
      var $topsize46=(($65+12)|0);
      var $66=HEAP32[(($topsize46)>>2)];
      var $add47=((($64)+($66))|0);
      $newsize=$add47;
      var $67=$newsize;
      var $68=$nb;
      var $sub48=((($67)-($68))|0);
      $newtopsize=$sub48;
      var $69=$oldp;
      var $70=$69;
      var $71=$nb;
      var $add_ptr49=(($70+$71)|0);
      var $72=$add_ptr49;
      $newtop=$72;
      var $73=$oldp;
      var $head50=(($73+4)|0);
      var $74=HEAP32[(($head50)>>2)];
      var $and51=$74 & 1;
      var $75=$nb;
      var $or52=$and51 | $75;
      var $or53=$or52 | 2;
      var $76=$oldp;
      var $head54=(($76+4)|0);
      HEAP32[(($head54)>>2)]=$or53;
      var $77=$oldp;
      var $78=$77;
      var $79=$nb;
      var $add_ptr55=(($78+$79)|0);
      var $80=$add_ptr55;
      var $head56=(($80+4)|0);
      var $81=HEAP32[(($head56)>>2)];
      var $or57=$81 | 1;
      HEAP32[(($head56)>>2)]=$or57;
      var $82=$newtopsize;
      var $or58=$82 | 1;
      var $83=$newtop;
      var $head59=(($83+4)|0);
      HEAP32[(($head59)>>2)]=$or58;
      var $84=$newtop;
      var $85=$m_addr;
      var $top60=(($85+24)|0);
      HEAP32[(($top60)>>2)]=$84;
      var $86=$newtopsize;
      var $87=$m_addr;
      var $topsize61=(($87+12)|0);
      HEAP32[(($topsize61)>>2)]=$86;
      var $88=$oldp;
      $newp=$88;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 25; break;
    case 24: 
      _abort();

    case 25: 
      var $89=$newp;
      var $cmp67=(($89)|0)!=0;
      if ($cmp67) { label = 26; break; } else { label = 29; break; }
    case 26: 
      var $90=$extra;
      var $cmp69=(($90)|0)!=0;
      if ($cmp69) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $91=$extra;
      _free($91);
      label = 28; break;
    case 28: 
      var $92=$newp;
      var $93=$92;
      var $add_ptr72=(($93+8)|0);
      $retval=$add_ptr72;
      label = 35; break;
    case 29: 
      var $94=$bytes_addr;
      var $call74=_malloc($94);
      $newmem=$call74;
      var $95=$newmem;
      var $cmp75=(($95)|0)!=0;
      if ($cmp75) { label = 30; break; } else { label = 34; break; }
    case 30: 
      var $96=$oldsize;
      var $97=$oldp;
      var $head77=(($97+4)|0);
      var $98=HEAP32[(($head77)>>2)];
      var $and78=$98 & 3;
      var $cmp79=(($and78)|0)==0;
      var $cond80=$cmp79 ? 8 : 4;
      var $sub81=((($96)-($cond80))|0);
      $oc=$sub81;
      var $99=$newmem;
      var $100=$oldmem_addr;
      var $101=$oc;
      var $102=$bytes_addr;
      var $cmp82=(($101)>>>0) < (($102)>>>0);
      if ($cmp82) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $103=$oc;
      var $cond86 = $103;label = 33; break;
    case 32: 
      var $104=$bytes_addr;
      var $cond86 = $104;label = 33; break;
    case 33: 
      var $cond86;
      _memcpy($99, $100, $cond86);
      var $105=$oldmem_addr;
      _free($105);
      label = 34; break;
    case 34: 
      var $106=$newmem;
      $retval=$106;
      label = 35; break;
    case 35: 
      var $107=$retval;

      return $107;
  }

}
_internal_realloc["X"]=1;

function _init_mparams() {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $magic;
      var $psize;
      var $gsize;
      var $0=HEAP32[((((5243280)|0))>>2)];
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $call=_sysconf(8);
      $psize=$call;
      var $1=$psize;
      $gsize=$1;
      var $2=$gsize;
      var $3=$gsize;
      var $sub=((($3)-(1))|0);
      var $and=$2 & $sub;
      var $cmp1=(($and)|0)!=0;
      if ($cmp1) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $4=$psize;
      var $5=$psize;
      var $sub2=((($5)-(1))|0);
      var $and3=$4 & $sub2;
      var $cmp4=(($and3)|0)!=0;
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      _abort();

    case 6: 
      var $6=$gsize;
      HEAP32[((((5243288)|0))>>2)]=$6;
      var $7=$psize;
      HEAP32[((((5243284)|0))>>2)]=$7;
      HEAP32[((((5243292)|0))>>2)]=-1;
      HEAP32[((((5243296)|0))>>2)]=2097152;
      HEAP32[((((5243300)|0))>>2)]=0;
      var $8=HEAP32[((((5243300)|0))>>2)];
      HEAP32[((((5254216)|0))>>2)]=$8;
      var $call6=_time(0);
      var $xor=$call6 ^ 1431655765;
      $magic=$xor;
      var $9=$magic;
      var $or=$9 | 8;
      $magic=$or;
      var $10=$magic;
      var $and7=$10 & -8;
      $magic=$and7;
      var $11=$magic;
      HEAP32[((((5243280)|0))>>2)]=$11;
      label = 7; break;
    case 7: 

      return 1;
  }

}


function _prepend_alloc($m, $newbase, $oldbase, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $newbase_addr;
      var $oldbase_addr;
      var $nb_addr;
      var $p;
      var $oldfirst;
      var $psize;
      var $q;
      var $qsize;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F63;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I203;
      var $B205;
      var $F209;
      var $TP235;
      var $H236;
      var $I237;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K290;
      var $C;
      var $F328;
      $m_addr=$m;
      $newbase_addr=$newbase;
      $oldbase_addr=$oldbase;
      $nb_addr=$nb;
      var $0=$newbase_addr;
      var $1=$newbase_addr;
      var $add_ptr=(($1+8)|0);
      var $2=$add_ptr;
      var $and=$2 & 7;
      var $cmp=(($and)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $cond = 0;label = 5; break;
    case 4: 
      var $3=$newbase_addr;
      var $add_ptr1=(($3+8)|0);
      var $4=$add_ptr1;
      var $and2=$4 & 7;
      var $sub=(((8)-($and2))|0);
      var $and3=$sub & 7;
      var $cond = $and3;label = 5; break;
    case 5: 
      var $cond;
      var $add_ptr4=(($0+$cond)|0);
      var $5=$add_ptr4;
      $p=$5;
      var $6=$oldbase_addr;
      var $7=$oldbase_addr;
      var $add_ptr5=(($7+8)|0);
      var $8=$add_ptr5;
      var $and6=$8 & 7;
      var $cmp7=(($and6)|0)==0;
      if ($cmp7) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $cond15 = 0;label = 8; break;
    case 7: 
      var $9=$oldbase_addr;
      var $add_ptr10=(($9+8)|0);
      var $10=$add_ptr10;
      var $and11=$10 & 7;
      var $sub12=(((8)-($and11))|0);
      var $and13=$sub12 & 7;
      var $cond15 = $and13;label = 8; break;
    case 8: 
      var $cond15;
      var $add_ptr16=(($6+$cond15)|0);
      var $11=$add_ptr16;
      $oldfirst=$11;
      var $12=$oldfirst;
      var $13=$12;
      var $14=$p;
      var $15=$14;
      var $sub_ptr_lhs_cast=$13;
      var $sub_ptr_rhs_cast=$15;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $psize=$sub_ptr_sub;
      var $16=$p;
      var $17=$16;
      var $18=$nb_addr;
      var $add_ptr17=(($17+$18)|0);
      var $19=$add_ptr17;
      $q=$19;
      var $20=$psize;
      var $21=$nb_addr;
      var $sub18=((($20)-($21))|0);
      $qsize=$sub18;
      var $22=$nb_addr;
      var $or=$22 | 1;
      var $or19=$or | 2;
      var $23=$p;
      var $head=(($23+4)|0);
      HEAP32[(($head)>>2)]=$or19;
      var $24=$oldfirst;
      var $25=$m_addr;
      var $top=(($25+24)|0);
      var $26=HEAP32[(($top)>>2)];
      var $cmp20=(($24)|0)==(($26)|0);
      if ($cmp20) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $27=$qsize;
      var $28=$m_addr;
      var $topsize=(($28+12)|0);
      var $29=HEAP32[(($topsize)>>2)];
      var $add=((($29)+($27))|0);
      HEAP32[(($topsize)>>2)]=$add;
      $tsize=$add;
      var $30=$q;
      var $31=$m_addr;
      var $top21=(($31+24)|0);
      HEAP32[(($top21)>>2)]=$30;
      var $32=$tsize;
      var $or22=$32 | 1;
      var $33=$q;
      var $head23=(($33+4)|0);
      HEAP32[(($head23)>>2)]=$or22;
      label = 110; break;
    case 10: 
      var $34=$oldfirst;
      var $35=$m_addr;
      var $dv=(($35+20)|0);
      var $36=HEAP32[(($dv)>>2)];
      var $cmp24=(($34)|0)==(($36)|0);
      if ($cmp24) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $37=$qsize;
      var $38=$m_addr;
      var $dvsize=(($38+8)|0);
      var $39=HEAP32[(($dvsize)>>2)];
      var $add26=((($39)+($37))|0);
      HEAP32[(($dvsize)>>2)]=$add26;
      $dsize=$add26;
      var $40=$q;
      var $41=$m_addr;
      var $dv27=(($41+20)|0);
      HEAP32[(($dv27)>>2)]=$40;
      var $42=$dsize;
      var $or28=$42 | 1;
      var $43=$q;
      var $head29=(($43+4)|0);
      HEAP32[(($head29)>>2)]=$or28;
      var $44=$dsize;
      var $45=$q;
      var $46=$45;
      var $47=$dsize;
      var $add_ptr30=(($46+$47)|0);
      var $48=$add_ptr30;
      var $prev_foot=(($48)|0);
      HEAP32[(($prev_foot)>>2)]=$44;
      label = 109; break;
    case 12: 
      var $49=$oldfirst;
      var $head32=(($49+4)|0);
      var $50=HEAP32[(($head32)>>2)];
      var $and33=$50 & 3;
      var $cmp34=(($and33)|0)!=1;
      if ($cmp34) { label = 73; break; } else { label = 13; break; }
    case 13: 
      var $51=$oldfirst;
      var $head36=(($51+4)|0);
      var $52=HEAP32[(($head36)>>2)];
      var $and37=$52 & -8;
      $nsize=$and37;
      var $53=$nsize;
      var $shr=$53 >>> 3;
      var $cmp38=(($shr)>>>0) < 32;
      if ($cmp38) { label = 14; break; } else { label = 26; break; }
    case 14: 
      var $54=$oldfirst;
      var $fd=(($54+8)|0);
      var $55=HEAP32[(($fd)>>2)];
      $F=$55;
      var $56=$oldfirst;
      var $bk=(($56+12)|0);
      var $57=HEAP32[(($bk)>>2)];
      $B=$57;
      var $58=$nsize;
      var $shr40=$58 >>> 3;
      $I=$shr40;
      var $59=$F;
      var $60=$B;
      var $cmp41=(($59)|0)==(($60)|0);
      if ($cmp41) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $61=$I;
      var $shl=1 << $61;
      var $neg=$shl ^ -1;
      var $62=$m_addr;
      var $smallmap=(($62)|0);
      var $63=HEAP32[(($smallmap)>>2)];
      var $and43=$63 & $neg;
      HEAP32[(($smallmap)>>2)]=$and43;
      label = 25; break;
    case 16: 
      var $64=$F;
      var $65=$I;
      var $shl45=$65 << 1;
      var $66=$m_addr;
      var $smallbins=(($66+40)|0);
      var $arrayidx=(($smallbins+($shl45<<2))|0);
      var $67=$arrayidx;
      var $68=$67;
      var $cmp46=(($64)|0)==(($68)|0);
      if ($cmp46) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $69=$F;
      var $70=$69;
      var $71=$m_addr;
      var $least_addr=(($71+16)|0);
      var $72=HEAP32[(($least_addr)>>2)];
      var $cmp47=(($70)>>>0) >= (($72)>>>0);
      if ($cmp47) { label = 18; break; } else { var $83 = 0;label = 21; break; }
    case 18: 
      var $73=$B;
      var $74=$I;
      var $shl48=$74 << 1;
      var $75=$m_addr;
      var $smallbins49=(($75+40)|0);
      var $arrayidx50=(($smallbins49+($shl48<<2))|0);
      var $76=$arrayidx50;
      var $77=$76;
      var $cmp51=(($73)|0)==(($77)|0);
      if ($cmp51) { var $82 = 1;label = 20; break; } else { label = 19; break; }
    case 19: 
      var $78=$B;
      var $79=$78;
      var $80=$m_addr;
      var $least_addr52=(($80+16)|0);
      var $81=HEAP32[(($least_addr52)>>2)];
      var $cmp53=(($79)>>>0) >= (($81)>>>0);
      var $82 = $cmp53;label = 20; break;
    case 20: 
      var $82;
      var $83 = $82;label = 21; break;
    case 21: 
      var $83;
      var $land_ext=(($83)&1);
      var $expval=($land_ext);
      var $tobool=(($expval)|0)!=0;
      if ($tobool) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $84=$B;
      var $85=$F;
      var $bk55=(($85+12)|0);
      HEAP32[(($bk55)>>2)]=$84;
      var $86=$F;
      var $87=$B;
      var $fd56=(($87+8)|0);
      HEAP32[(($fd56)>>2)]=$86;
      label = 24; break;
    case 23: 
      _abort();

    case 24: 
      label = 25; break;
    case 25: 
      label = 72; break;
    case 26: 
      var $88=$oldfirst;
      var $89=$88;
      $TP=$89;
      var $90=$TP;
      var $parent=(($90+24)|0);
      var $91=HEAP32[(($parent)>>2)];
      $XP=$91;
      var $92=$TP;
      var $bk60=(($92+12)|0);
      var $93=HEAP32[(($bk60)>>2)];
      var $94=$TP;
      var $cmp61=(($93)|0)!=(($94)|0);
      if ($cmp61) { label = 27; break; } else { label = 31; break; }
    case 27: 
      var $95=$TP;
      var $fd64=(($95+8)|0);
      var $96=HEAP32[(($fd64)>>2)];
      $F63=$96;
      var $97=$TP;
      var $bk65=(($97+12)|0);
      var $98=HEAP32[(($bk65)>>2)];
      $R=$98;
      var $99=$F63;
      var $100=$99;
      var $101=$m_addr;
      var $least_addr66=(($101+16)|0);
      var $102=HEAP32[(($least_addr66)>>2)];
      var $cmp67=(($100)>>>0) >= (($102)>>>0);
      var $conv=(($cmp67)&1);
      var $expval68=($conv);
      var $tobool69=(($expval68)|0)!=0;
      if ($tobool69) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $103=$R;
      var $104=$F63;
      var $bk71=(($104+12)|0);
      HEAP32[(($bk71)>>2)]=$103;
      var $105=$F63;
      var $106=$R;
      var $fd72=(($106+8)|0);
      HEAP32[(($fd72)>>2)]=$105;
      label = 30; break;
    case 29: 
      _abort();

    case 30: 
      label = 43; break;
    case 31: 
      var $107=$TP;
      var $child=(($107+16)|0);
      var $arrayidx76=(($child+4)|0);
      $RP=$arrayidx76;
      var $108=HEAP32[(($arrayidx76)>>2)];
      $R=$108;
      var $cmp77=(($108)|0)!=0;
      if ($cmp77) { label = 33; break; } else { label = 32; break; }
    case 32: 
      var $109=$TP;
      var $child80=(($109+16)|0);
      var $arrayidx81=(($child80)|0);
      $RP=$arrayidx81;
      var $110=HEAP32[(($arrayidx81)>>2)];
      $R=$110;
      var $cmp82=(($110)|0)!=0;
      if ($cmp82) { label = 33; break; } else { label = 42; break; }
    case 33: 
      label = 34; break;
    case 34: 
      var $111=$R;
      var $child85=(($111+16)|0);
      var $arrayidx86=(($child85+4)|0);
      $CP=$arrayidx86;
      var $112=HEAP32[(($arrayidx86)>>2)];
      var $cmp87=(($112)|0)!=0;
      if ($cmp87) { var $115 = 1;label = 36; break; } else { label = 35; break; }
    case 35: 
      var $113=$R;
      var $child90=(($113+16)|0);
      var $arrayidx91=(($child90)|0);
      $CP=$arrayidx91;
      var $114=HEAP32[(($arrayidx91)>>2)];
      var $cmp92=(($114)|0)!=0;
      var $115 = $cmp92;label = 36; break;
    case 36: 
      var $115;
      if ($115) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $116=$CP;
      $RP=$116;
      var $117=HEAP32[(($116)>>2)];
      $R=$117;
      label = 34; break;
    case 38: 
      var $118=$RP;
      var $119=$118;
      var $120=$m_addr;
      var $least_addr95=(($120+16)|0);
      var $121=HEAP32[(($least_addr95)>>2)];
      var $cmp96=(($119)>>>0) >= (($121)>>>0);
      var $conv97=(($cmp96)&1);
      var $expval98=($conv97);
      var $tobool99=(($expval98)|0)!=0;
      if ($tobool99) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $122=$RP;
      HEAP32[(($122)>>2)]=0;
      label = 41; break;
    case 40: 
      _abort();

    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $123=$XP;
      var $cmp105=(($123)|0)!=0;
      if ($cmp105) { label = 44; break; } else { label = 71; break; }
    case 44: 
      var $124=$TP;
      var $index=(($124+28)|0);
      var $125=HEAP32[(($index)>>2)];
      var $126=$m_addr;
      var $treebins=(($126+304)|0);
      var $arrayidx108=(($treebins+($125<<2))|0);
      $H=$arrayidx108;
      var $127=$TP;
      var $128=$H;
      var $129=HEAP32[(($128)>>2)];
      var $cmp109=(($127)|0)==(($129)|0);
      if ($cmp109) { label = 45; break; } else { label = 48; break; }
    case 45: 
      var $130=$R;
      var $131=$H;
      HEAP32[(($131)>>2)]=$130;
      var $cmp112=(($130)|0)==0;
      if ($cmp112) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $132=$TP;
      var $index115=(($132+28)|0);
      var $133=HEAP32[(($index115)>>2)];
      var $shl116=1 << $133;
      var $neg117=$shl116 ^ -1;
      var $134=$m_addr;
      var $treemap=(($134+4)|0);
      var $135=HEAP32[(($treemap)>>2)];
      var $and118=$135 & $neg117;
      HEAP32[(($treemap)>>2)]=$and118;
      label = 47; break;
    case 47: 
      label = 55; break;
    case 48: 
      var $136=$XP;
      var $137=$136;
      var $138=$m_addr;
      var $least_addr121=(($138+16)|0);
      var $139=HEAP32[(($least_addr121)>>2)];
      var $cmp122=(($137)>>>0) >= (($139)>>>0);
      var $conv123=(($cmp122)&1);
      var $expval124=($conv123);
      var $tobool125=(($expval124)|0)!=0;
      if ($tobool125) { label = 49; break; } else { label = 53; break; }
    case 49: 
      var $140=$XP;
      var $child127=(($140+16)|0);
      var $arrayidx128=(($child127)|0);
      var $141=HEAP32[(($arrayidx128)>>2)];
      var $142=$TP;
      var $cmp129=(($141)|0)==(($142)|0);
      if ($cmp129) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $143=$R;
      var $144=$XP;
      var $child132=(($144+16)|0);
      var $arrayidx133=(($child132)|0);
      HEAP32[(($arrayidx133)>>2)]=$143;
      label = 52; break;
    case 51: 
      var $145=$R;
      var $146=$XP;
      var $child135=(($146+16)|0);
      var $arrayidx136=(($child135+4)|0);
      HEAP32[(($arrayidx136)>>2)]=$145;
      label = 52; break;
    case 52: 
      label = 54; break;
    case 53: 
      _abort();

    case 54: 
      label = 55; break;
    case 55: 
      var $147=$R;
      var $cmp141=(($147)|0)!=0;
      if ($cmp141) { label = 56; break; } else { label = 70; break; }
    case 56: 
      var $148=$R;
      var $149=$148;
      var $150=$m_addr;
      var $least_addr144=(($150+16)|0);
      var $151=HEAP32[(($least_addr144)>>2)];
      var $cmp145=(($149)>>>0) >= (($151)>>>0);
      var $conv146=(($cmp145)&1);
      var $expval147=($conv146);
      var $tobool148=(($expval147)|0)!=0;
      if ($tobool148) { label = 57; break; } else { label = 68; break; }
    case 57: 
      var $152=$XP;
      var $153=$R;
      var $parent150=(($153+24)|0);
      HEAP32[(($parent150)>>2)]=$152;
      var $154=$TP;
      var $child151=(($154+16)|0);
      var $arrayidx152=(($child151)|0);
      var $155=HEAP32[(($arrayidx152)>>2)];
      $C0=$155;
      var $cmp153=(($155)|0)!=0;
      if ($cmp153) { label = 58; break; } else { label = 62; break; }
    case 58: 
      var $156=$C0;
      var $157=$156;
      var $158=$m_addr;
      var $least_addr156=(($158+16)|0);
      var $159=HEAP32[(($least_addr156)>>2)];
      var $cmp157=(($157)>>>0) >= (($159)>>>0);
      var $conv158=(($cmp157)&1);
      var $expval159=($conv158);
      var $tobool160=(($expval159)|0)!=0;
      if ($tobool160) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $160=$C0;
      var $161=$R;
      var $child162=(($161+16)|0);
      var $arrayidx163=(($child162)|0);
      HEAP32[(($arrayidx163)>>2)]=$160;
      var $162=$R;
      var $163=$C0;
      var $parent164=(($163+24)|0);
      HEAP32[(($parent164)>>2)]=$162;
      label = 61; break;
    case 60: 
      _abort();

    case 61: 
      label = 62; break;
    case 62: 
      var $164=$TP;
      var $child168=(($164+16)|0);
      var $arrayidx169=(($child168+4)|0);
      var $165=HEAP32[(($arrayidx169)>>2)];
      $C1=$165;
      var $cmp170=(($165)|0)!=0;
      if ($cmp170) { label = 63; break; } else { label = 67; break; }
    case 63: 
      var $166=$C1;
      var $167=$166;
      var $168=$m_addr;
      var $least_addr173=(($168+16)|0);
      var $169=HEAP32[(($least_addr173)>>2)];
      var $cmp174=(($167)>>>0) >= (($169)>>>0);
      var $conv175=(($cmp174)&1);
      var $expval176=($conv175);
      var $tobool177=(($expval176)|0)!=0;
      if ($tobool177) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $170=$C1;
      var $171=$R;
      var $child179=(($171+16)|0);
      var $arrayidx180=(($child179+4)|0);
      HEAP32[(($arrayidx180)>>2)]=$170;
      var $172=$R;
      var $173=$C1;
      var $parent181=(($173+24)|0);
      HEAP32[(($parent181)>>2)]=$172;
      label = 66; break;
    case 65: 
      _abort();

    case 66: 
      label = 67; break;
    case 67: 
      label = 69; break;
    case 68: 
      _abort();

    case 69: 
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      var $174=$oldfirst;
      var $175=$174;
      var $176=$nsize;
      var $add_ptr190=(($175+$176)|0);
      var $177=$add_ptr190;
      $oldfirst=$177;
      var $178=$nsize;
      var $179=$qsize;
      var $add191=((($179)+($178))|0);
      $qsize=$add191;
      label = 73; break;
    case 73: 
      var $180=$oldfirst;
      var $head193=(($180+4)|0);
      var $181=HEAP32[(($head193)>>2)];
      var $and194=$181 & -2;
      HEAP32[(($head193)>>2)]=$and194;
      var $182=$qsize;
      var $or195=$182 | 1;
      var $183=$q;
      var $head196=(($183+4)|0);
      HEAP32[(($head196)>>2)]=$or195;
      var $184=$qsize;
      var $185=$q;
      var $186=$185;
      var $187=$qsize;
      var $add_ptr197=(($186+$187)|0);
      var $188=$add_ptr197;
      var $prev_foot198=(($188)|0);
      HEAP32[(($prev_foot198)>>2)]=$184;
      var $189=$qsize;
      var $shr199=$189 >>> 3;
      var $cmp200=(($shr199)>>>0) < 32;
      if ($cmp200) { label = 74; break; } else { label = 81; break; }
    case 74: 
      var $190=$qsize;
      var $shr204=$190 >>> 3;
      $I203=$shr204;
      var $191=$I203;
      var $shl206=$191 << 1;
      var $192=$m_addr;
      var $smallbins207=(($192+40)|0);
      var $arrayidx208=(($smallbins207+($shl206<<2))|0);
      var $193=$arrayidx208;
      var $194=$193;
      $B205=$194;
      var $195=$B205;
      $F209=$195;
      var $196=$m_addr;
      var $smallmap210=(($196)|0);
      var $197=HEAP32[(($smallmap210)>>2)];
      var $198=$I203;
      var $shl211=1 << $198;
      var $and212=$197 & $shl211;
      var $tobool213=(($and212)|0)!=0;
      if ($tobool213) { label = 76; break; } else { label = 75; break; }
    case 75: 
      var $199=$I203;
      var $shl215=1 << $199;
      var $200=$m_addr;
      var $smallmap216=(($200)|0);
      var $201=HEAP32[(($smallmap216)>>2)];
      var $or217=$201 | $shl215;
      HEAP32[(($smallmap216)>>2)]=$or217;
      label = 80; break;
    case 76: 
      var $202=$B205;
      var $fd219=(($202+8)|0);
      var $203=HEAP32[(($fd219)>>2)];
      var $204=$203;
      var $205=$m_addr;
      var $least_addr220=(($205+16)|0);
      var $206=HEAP32[(($least_addr220)>>2)];
      var $cmp221=(($204)>>>0) >= (($206)>>>0);
      var $conv222=(($cmp221)&1);
      var $expval223=($conv222);
      var $tobool224=(($expval223)|0)!=0;
      if ($tobool224) { label = 77; break; } else { label = 78; break; }
    case 77: 
      var $207=$B205;
      var $fd226=(($207+8)|0);
      var $208=HEAP32[(($fd226)>>2)];
      $F209=$208;
      label = 79; break;
    case 78: 
      _abort();

    case 79: 
      label = 80; break;
    case 80: 
      var $209=$q;
      var $210=$B205;
      var $fd230=(($210+8)|0);
      HEAP32[(($fd230)>>2)]=$209;
      var $211=$q;
      var $212=$F209;
      var $bk231=(($212+12)|0);
      HEAP32[(($bk231)>>2)]=$211;
      var $213=$F209;
      var $214=$q;
      var $fd232=(($214+8)|0);
      HEAP32[(($fd232)>>2)]=$213;
      var $215=$B205;
      var $216=$q;
      var $bk233=(($216+12)|0);
      HEAP32[(($bk233)>>2)]=$215;
      label = 108; break;
    case 81: 
      var $217=$q;
      var $218=$217;
      $TP235=$218;
      var $219=$qsize;
      var $shr238=$219 >>> 8;
      $X=$shr238;
      var $220=$X;
      var $cmp239=(($220)|0)==0;
      if ($cmp239) { label = 82; break; } else { label = 83; break; }
    case 82: 
      $I237=0;
      label = 87; break;
    case 83: 
      var $221=$X;
      var $cmp243=(($221)>>>0) > 65535;
      if ($cmp243) { label = 84; break; } else { label = 85; break; }
    case 84: 
      $I237=31;
      label = 86; break;
    case 85: 
      var $222=$X;
      $Y=$222;
      var $223=$Y;
      var $sub247=((($223)-(256))|0);
      var $shr248=$sub247 >>> 16;
      var $and249=$shr248 & 8;
      $N=$and249;
      var $224=$N;
      var $225=$Y;
      var $shl250=$225 << $224;
      $Y=$shl250;
      var $sub251=((($shl250)-(4096))|0);
      var $shr252=$sub251 >>> 16;
      var $and253=$shr252 & 4;
      $K=$and253;
      var $226=$K;
      var $227=$N;
      var $add254=((($227)+($226))|0);
      $N=$add254;
      var $228=$K;
      var $229=$Y;
      var $shl255=$229 << $228;
      $Y=$shl255;
      var $sub256=((($shl255)-(16384))|0);
      var $shr257=$sub256 >>> 16;
      var $and258=$shr257 & 2;
      $K=$and258;
      var $230=$N;
      var $add259=((($230)+($and258))|0);
      $N=$add259;
      var $231=$N;
      var $sub260=(((14)-($231))|0);
      var $232=$K;
      var $233=$Y;
      var $shl261=$233 << $232;
      $Y=$shl261;
      var $shr262=$shl261 >>> 15;
      var $add263=((($sub260)+($shr262))|0);
      $K=$add263;
      var $234=$K;
      var $shl264=$234 << 1;
      var $235=$qsize;
      var $236=$K;
      var $add265=((($236)+(7))|0);
      var $shr266=$235 >>> (($add265)>>>0);
      var $and267=$shr266 & 1;
      var $add268=((($shl264)+($and267))|0);
      $I237=$add268;
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      var $237=$I237;
      var $238=$m_addr;
      var $treebins271=(($238+304)|0);
      var $arrayidx272=(($treebins271+($237<<2))|0);
      $H236=$arrayidx272;
      var $239=$I237;
      var $240=$TP235;
      var $index273=(($240+28)|0);
      HEAP32[(($index273)>>2)]=$239;
      var $241=$TP235;
      var $child274=(($241+16)|0);
      var $arrayidx275=(($child274+4)|0);
      HEAP32[(($arrayidx275)>>2)]=0;
      var $242=$TP235;
      var $child276=(($242+16)|0);
      var $arrayidx277=(($child276)|0);
      HEAP32[(($arrayidx277)>>2)]=0;
      var $243=$m_addr;
      var $treemap278=(($243+4)|0);
      var $244=HEAP32[(($treemap278)>>2)];
      var $245=$I237;
      var $shl279=1 << $245;
      var $and280=$244 & $shl279;
      var $tobool281=(($and280)|0)!=0;
      if ($tobool281) { label = 89; break; } else { label = 88; break; }
    case 88: 
      var $246=$I237;
      var $shl283=1 << $246;
      var $247=$m_addr;
      var $treemap284=(($247+4)|0);
      var $248=HEAP32[(($treemap284)>>2)];
      var $or285=$248 | $shl283;
      HEAP32[(($treemap284)>>2)]=$or285;
      var $249=$TP235;
      var $250=$H236;
      HEAP32[(($250)>>2)]=$249;
      var $251=$H236;
      var $252=$251;
      var $253=$TP235;
      var $parent286=(($253+24)|0);
      HEAP32[(($parent286)>>2)]=$252;
      var $254=$TP235;
      var $255=$TP235;
      var $bk287=(($255+12)|0);
      HEAP32[(($bk287)>>2)]=$254;
      var $256=$TP235;
      var $fd288=(($256+8)|0);
      HEAP32[(($fd288)>>2)]=$254;
      label = 107; break;
    case 89: 
      var $257=$H236;
      var $258=HEAP32[(($257)>>2)];
      $T=$258;
      var $259=$qsize;
      var $260=$I237;
      var $cmp291=(($260)|0)==31;
      if ($cmp291) { label = 90; break; } else { label = 91; break; }
    case 90: 
      var $cond300 = 0;label = 92; break;
    case 91: 
      var $261=$I237;
      var $shr295=$261 >>> 1;
      var $add296=((($shr295)+(8))|0);
      var $sub297=((($add296)-(2))|0);
      var $sub298=(((31)-($sub297))|0);
      var $cond300 = $sub298;label = 92; break;
    case 92: 
      var $cond300;
      var $shl301=$259 << $cond300;
      $K290=$shl301;
      label = 93; break;
    case 93: 
      var $262=$T;
      var $head302=(($262+4)|0);
      var $263=HEAP32[(($head302)>>2)];
      var $and303=$263 & -8;
      var $264=$qsize;
      var $cmp304=(($and303)|0)!=(($264)|0);
      if ($cmp304) { label = 94; break; } else { label = 100; break; }
    case 94: 
      var $265=$K290;
      var $shr307=$265 >>> 31;
      var $and308=$shr307 & 1;
      var $266=$T;
      var $child309=(($266+16)|0);
      var $arrayidx310=(($child309+($and308<<2))|0);
      $C=$arrayidx310;
      var $267=$K290;
      var $shl311=$267 << 1;
      $K290=$shl311;
      var $268=$C;
      var $269=HEAP32[(($268)>>2)];
      var $cmp312=(($269)|0)!=0;
      if ($cmp312) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $270=$C;
      var $271=HEAP32[(($270)>>2)];
      $T=$271;
      label = 99; break;
    case 96: 
      var $272=$C;
      var $273=$272;
      var $274=$m_addr;
      var $least_addr316=(($274+16)|0);
      var $275=HEAP32[(($least_addr316)>>2)];
      var $cmp317=(($273)>>>0) >= (($275)>>>0);
      var $conv318=(($cmp317)&1);
      var $expval319=($conv318);
      var $tobool320=(($expval319)|0)!=0;
      if ($tobool320) { label = 97; break; } else { label = 98; break; }
    case 97: 
      var $276=$TP235;
      var $277=$C;
      HEAP32[(($277)>>2)]=$276;
      var $278=$T;
      var $279=$TP235;
      var $parent322=(($279+24)|0);
      HEAP32[(($parent322)>>2)]=$278;
      var $280=$TP235;
      var $281=$TP235;
      var $bk323=(($281+12)|0);
      HEAP32[(($bk323)>>2)]=$280;
      var $282=$TP235;
      var $fd324=(($282+8)|0);
      HEAP32[(($fd324)>>2)]=$280;
      label = 106; break;
    case 98: 
      _abort();

    case 99: 
      label = 105; break;
    case 100: 
      var $283=$T;
      var $fd329=(($283+8)|0);
      var $284=HEAP32[(($fd329)>>2)];
      $F328=$284;
      var $285=$T;
      var $286=$285;
      var $287=$m_addr;
      var $least_addr330=(($287+16)|0);
      var $288=HEAP32[(($least_addr330)>>2)];
      var $cmp331=(($286)>>>0) >= (($288)>>>0);
      if ($cmp331) { label = 101; break; } else { var $293 = 0;label = 102; break; }
    case 101: 
      var $289=$F328;
      var $290=$289;
      var $291=$m_addr;
      var $least_addr334=(($291+16)|0);
      var $292=HEAP32[(($least_addr334)>>2)];
      var $cmp335=(($290)>>>0) >= (($292)>>>0);
      var $293 = $cmp335;label = 102; break;
    case 102: 
      var $293;
      var $land_ext338=(($293)&1);
      var $expval339=($land_ext338);
      var $tobool340=(($expval339)|0)!=0;
      if ($tobool340) { label = 103; break; } else { label = 104; break; }
    case 103: 
      var $294=$TP235;
      var $295=$F328;
      var $bk342=(($295+12)|0);
      HEAP32[(($bk342)>>2)]=$294;
      var $296=$T;
      var $fd343=(($296+8)|0);
      HEAP32[(($fd343)>>2)]=$294;
      var $297=$F328;
      var $298=$TP235;
      var $fd344=(($298+8)|0);
      HEAP32[(($fd344)>>2)]=$297;
      var $299=$T;
      var $300=$TP235;
      var $bk345=(($300+12)|0);
      HEAP32[(($bk345)>>2)]=$299;
      var $301=$TP235;
      var $parent346=(($301+24)|0);
      HEAP32[(($parent346)>>2)]=0;
      label = 106; break;
    case 104: 
      _abort();

    case 105: 
      label = 93; break;
    case 106: 
      label = 107; break;
    case 107: 
      label = 108; break;
    case 108: 
      label = 109; break;
    case 109: 
      label = 110; break;
    case 110: 
      var $302=$p;
      var $303=$302;
      var $add_ptr353=(($303+8)|0);

      return $add_ptr353;
  }

}
_prepend_alloc["X"]=1;

function _add_segment($m, $tbase, $tsize, $mmapped) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $tbase_addr;
      var $tsize_addr;
      var $mmapped_addr;
      var $old_top;
      var $oldsp;
      var $old_end;
      var $ssize;
      var $rawsp;
      var $offset;
      var $asp;
      var $csp;
      var $sp;
      var $ss;
      var $tnext;
      var $p;
      var $nfences;
      var $nextp;
      var $q;
      var $psize;
      var $tn;
      var $I;
      var $B;
      var $F;
      var $TP;
      var $H;
      var $I57;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K105;
      var $C;
      var $F144;
      $m_addr=$m;
      $tbase_addr=$tbase;
      $tsize_addr=$tsize;
      $mmapped_addr=$mmapped;
      var $0=$m_addr;
      var $top=(($0+24)|0);
      var $1=HEAP32[(($top)>>2)];
      var $2=$1;
      $old_top=$2;
      var $3=$m_addr;
      var $4=$old_top;
      var $call=_segment_holding($3, $4);
      $oldsp=$call;
      var $5=$oldsp;
      var $base=(($5)|0);
      var $6=HEAP32[(($base)>>2)];
      var $7=$oldsp;
      var $size=(($7+4)|0);
      var $8=HEAP32[(($size)>>2)];
      var $add_ptr=(($6+$8)|0);
      $old_end=$add_ptr;
      $ssize=24;
      var $9=$old_end;
      var $10=$ssize;
      var $add=((($10)+(16))|0);
      var $add1=((($add)+(7))|0);
      var $idx_neg=(((-$add1))|0);
      var $add_ptr2=(($9+$idx_neg)|0);
      $rawsp=$add_ptr2;
      var $11=$rawsp;
      var $add_ptr3=(($11+8)|0);
      var $12=$add_ptr3;
      var $and=$12 & 7;
      var $cmp=(($and)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $cond = 0;label = 5; break;
    case 4: 
      var $13=$rawsp;
      var $add_ptr4=(($13+8)|0);
      var $14=$add_ptr4;
      var $and5=$14 & 7;
      var $sub=(((8)-($and5))|0);
      var $and6=$sub & 7;
      var $cond = $and6;label = 5; break;
    case 5: 
      var $cond;
      $offset=$cond;
      var $15=$rawsp;
      var $16=$offset;
      var $add_ptr7=(($15+$16)|0);
      $asp=$add_ptr7;
      var $17=$asp;
      var $18=$old_top;
      var $add_ptr8=(($18+16)|0);
      var $cmp9=(($17)>>>0) < (($add_ptr8)>>>0);
      if ($cmp9) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $19=$old_top;
      var $cond13 = $19;label = 8; break;
    case 7: 
      var $20=$asp;
      var $cond13 = $20;label = 8; break;
    case 8: 
      var $cond13;
      $csp=$cond13;
      var $21=$csp;
      var $22=$21;
      $sp=$22;
      var $23=$sp;
      var $24=$23;
      var $add_ptr14=(($24+8)|0);
      var $25=$add_ptr14;
      $ss=$25;
      var $26=$sp;
      var $27=$26;
      var $28=$ssize;
      var $add_ptr15=(($27+$28)|0);
      var $29=$add_ptr15;
      $tnext=$29;
      var $30=$tnext;
      $p=$30;
      $nfences=0;
      var $31=$m_addr;
      var $32=$tbase_addr;
      var $33=$32;
      var $34=$tsize_addr;
      var $sub16=((($34)-(40))|0);
      _init_top($31, $33, $sub16);
      var $35=$ssize;
      var $or=$35 | 1;
      var $or17=$or | 2;
      var $36=$sp;
      var $head=(($36+4)|0);
      HEAP32[(($head)>>2)]=$or17;
      var $37=$ss;
      var $38=$m_addr;
      var $seg=(($38+444)|0);
      var $39=$37;
      var $40=$seg;
      HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[((($39)+(4))>>2)]=HEAP32[((($40)+(4))>>2)];HEAP32[((($39)+(8))>>2)]=HEAP32[((($40)+(8))>>2)];HEAP32[((($39)+(12))>>2)]=HEAP32[((($40)+(12))>>2)];
      var $41=$tbase_addr;
      var $42=$m_addr;
      var $seg18=(($42+444)|0);
      var $base19=(($seg18)|0);
      HEAP32[(($base19)>>2)]=$41;
      var $43=$tsize_addr;
      var $44=$m_addr;
      var $seg20=(($44+444)|0);
      var $size21=(($seg20+4)|0);
      HEAP32[(($size21)>>2)]=$43;
      var $45=$mmapped_addr;
      var $46=$m_addr;
      var $seg22=(($46+444)|0);
      var $sflags=(($seg22+12)|0);
      HEAP32[(($sflags)>>2)]=$45;
      var $47=$ss;
      var $48=$m_addr;
      var $seg23=(($48+444)|0);
      var $next=(($seg23+8)|0);
      HEAP32[(($next)>>2)]=$47;
      label = 9; break;
    case 9: 
      var $49=$p;
      var $50=$49;
      var $add_ptr24=(($50+4)|0);
      var $51=$add_ptr24;
      $nextp=$51;
      var $52=$p;
      var $head25=(($52+4)|0);
      HEAP32[(($head25)>>2)]=7;
      var $53=$nfences;
      var $inc=((($53)+(1))|0);
      $nfences=$inc;
      var $54=$nextp;
      var $head26=(($54+4)|0);
      var $55=$head26;
      var $56=$old_end;
      var $cmp27=(($55)>>>0) < (($56)>>>0);
      if ($cmp27) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $57=$nextp;
      $p=$57;
      label = 12; break;
    case 11: 
      label = 13; break;
    case 12: 
      label = 9; break;
    case 13: 
      var $58=$csp;
      var $59=$old_top;
      var $cmp28=(($58)|0)!=(($59)|0);
      if ($cmp28) { label = 14; break; } else { label = 50; break; }
    case 14: 
      var $60=$old_top;
      var $61=$60;
      $q=$61;
      var $62=$csp;
      var $63=$old_top;
      var $sub_ptr_lhs_cast=$62;
      var $sub_ptr_rhs_cast=$63;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $psize=$sub_ptr_sub;
      var $64=$q;
      var $65=$64;
      var $66=$psize;
      var $add_ptr30=(($65+$66)|0);
      var $67=$add_ptr30;
      $tn=$67;
      var $68=$tn;
      var $head31=(($68+4)|0);
      var $69=HEAP32[(($head31)>>2)];
      var $and32=$69 & -2;
      HEAP32[(($head31)>>2)]=$and32;
      var $70=$psize;
      var $or33=$70 | 1;
      var $71=$q;
      var $head34=(($71+4)|0);
      HEAP32[(($head34)>>2)]=$or33;
      var $72=$psize;
      var $73=$q;
      var $74=$73;
      var $75=$psize;
      var $add_ptr35=(($74+$75)|0);
      var $76=$add_ptr35;
      var $prev_foot=(($76)|0);
      HEAP32[(($prev_foot)>>2)]=$72;
      var $77=$psize;
      var $shr=$77 >>> 3;
      var $cmp36=(($shr)>>>0) < 32;
      if ($cmp36) { label = 15; break; } else { label = 22; break; }
    case 15: 
      var $78=$psize;
      var $shr38=$78 >>> 3;
      $I=$shr38;
      var $79=$I;
      var $shl=$79 << 1;
      var $80=$m_addr;
      var $smallbins=(($80+40)|0);
      var $arrayidx=(($smallbins+($shl<<2))|0);
      var $81=$arrayidx;
      var $82=$81;
      $B=$82;
      var $83=$B;
      $F=$83;
      var $84=$m_addr;
      var $smallmap=(($84)|0);
      var $85=HEAP32[(($smallmap)>>2)];
      var $86=$I;
      var $shl39=1 << $86;
      var $and40=$85 & $shl39;
      var $tobool=(($and40)|0)!=0;
      if ($tobool) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $87=$I;
      var $shl42=1 << $87;
      var $88=$m_addr;
      var $smallmap43=(($88)|0);
      var $89=HEAP32[(($smallmap43)>>2)];
      var $or44=$89 | $shl42;
      HEAP32[(($smallmap43)>>2)]=$or44;
      label = 21; break;
    case 17: 
      var $90=$B;
      var $fd=(($90+8)|0);
      var $91=HEAP32[(($fd)>>2)];
      var $92=$91;
      var $93=$m_addr;
      var $least_addr=(($93+16)|0);
      var $94=HEAP32[(($least_addr)>>2)];
      var $cmp46=(($92)>>>0) >= (($94)>>>0);
      var $conv=(($cmp46)&1);
      var $expval=($conv);
      var $tobool47=(($expval)|0)!=0;
      if ($tobool47) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $95=$B;
      var $fd49=(($95+8)|0);
      var $96=HEAP32[(($fd49)>>2)];
      $F=$96;
      label = 20; break;
    case 19: 
      _abort();

    case 20: 
      label = 21; break;
    case 21: 
      var $97=$q;
      var $98=$B;
      var $fd53=(($98+8)|0);
      HEAP32[(($fd53)>>2)]=$97;
      var $99=$q;
      var $100=$F;
      var $bk=(($100+12)|0);
      HEAP32[(($bk)>>2)]=$99;
      var $101=$F;
      var $102=$q;
      var $fd54=(($102+8)|0);
      HEAP32[(($fd54)>>2)]=$101;
      var $103=$B;
      var $104=$q;
      var $bk55=(($104+12)|0);
      HEAP32[(($bk55)>>2)]=$103;
      label = 49; break;
    case 22: 
      var $105=$q;
      var $106=$105;
      $TP=$106;
      var $107=$psize;
      var $shr58=$107 >>> 8;
      $X=$shr58;
      var $108=$X;
      var $cmp59=(($108)|0)==0;
      if ($cmp59) { label = 23; break; } else { label = 24; break; }
    case 23: 
      $I57=0;
      label = 28; break;
    case 24: 
      var $109=$X;
      var $cmp63=(($109)>>>0) > 65535;
      if ($cmp63) { label = 25; break; } else { label = 26; break; }
    case 25: 
      $I57=31;
      label = 27; break;
    case 26: 
      var $110=$X;
      $Y=$110;
      var $111=$Y;
      var $sub67=((($111)-(256))|0);
      var $shr68=$sub67 >>> 16;
      var $and69=$shr68 & 8;
      $N=$and69;
      var $112=$N;
      var $113=$Y;
      var $shl70=$113 << $112;
      $Y=$shl70;
      var $sub71=((($shl70)-(4096))|0);
      var $shr72=$sub71 >>> 16;
      var $and73=$shr72 & 4;
      $K=$and73;
      var $114=$K;
      var $115=$N;
      var $add74=((($115)+($114))|0);
      $N=$add74;
      var $116=$K;
      var $117=$Y;
      var $shl75=$117 << $116;
      $Y=$shl75;
      var $sub76=((($shl75)-(16384))|0);
      var $shr77=$sub76 >>> 16;
      var $and78=$shr77 & 2;
      $K=$and78;
      var $118=$N;
      var $add79=((($118)+($and78))|0);
      $N=$add79;
      var $119=$N;
      var $sub80=(((14)-($119))|0);
      var $120=$K;
      var $121=$Y;
      var $shl81=$121 << $120;
      $Y=$shl81;
      var $shr82=$shl81 >>> 15;
      var $add83=((($sub80)+($shr82))|0);
      $K=$add83;
      var $122=$K;
      var $shl84=$122 << 1;
      var $123=$psize;
      var $124=$K;
      var $add85=((($124)+(7))|0);
      var $shr86=$123 >>> (($add85)>>>0);
      var $and87=$shr86 & 1;
      var $add88=((($shl84)+($and87))|0);
      $I57=$add88;
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $125=$I57;
      var $126=$m_addr;
      var $treebins=(($126+304)|0);
      var $arrayidx91=(($treebins+($125<<2))|0);
      $H=$arrayidx91;
      var $127=$I57;
      var $128=$TP;
      var $index=(($128+28)|0);
      HEAP32[(($index)>>2)]=$127;
      var $129=$TP;
      var $child=(($129+16)|0);
      var $arrayidx92=(($child+4)|0);
      HEAP32[(($arrayidx92)>>2)]=0;
      var $130=$TP;
      var $child93=(($130+16)|0);
      var $arrayidx94=(($child93)|0);
      HEAP32[(($arrayidx94)>>2)]=0;
      var $131=$m_addr;
      var $treemap=(($131+4)|0);
      var $132=HEAP32[(($treemap)>>2)];
      var $133=$I57;
      var $shl95=1 << $133;
      var $and96=$132 & $shl95;
      var $tobool97=(($and96)|0)!=0;
      if ($tobool97) { label = 30; break; } else { label = 29; break; }
    case 29: 
      var $134=$I57;
      var $shl99=1 << $134;
      var $135=$m_addr;
      var $treemap100=(($135+4)|0);
      var $136=HEAP32[(($treemap100)>>2)];
      var $or101=$136 | $shl99;
      HEAP32[(($treemap100)>>2)]=$or101;
      var $137=$TP;
      var $138=$H;
      HEAP32[(($138)>>2)]=$137;
      var $139=$H;
      var $140=$139;
      var $141=$TP;
      var $parent=(($141+24)|0);
      HEAP32[(($parent)>>2)]=$140;
      var $142=$TP;
      var $143=$TP;
      var $bk102=(($143+12)|0);
      HEAP32[(($bk102)>>2)]=$142;
      var $144=$TP;
      var $fd103=(($144+8)|0);
      HEAP32[(($fd103)>>2)]=$142;
      label = 48; break;
    case 30: 
      var $145=$H;
      var $146=HEAP32[(($145)>>2)];
      $T=$146;
      var $147=$psize;
      var $148=$I57;
      var $cmp106=(($148)|0)==31;
      if ($cmp106) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $cond115 = 0;label = 33; break;
    case 32: 
      var $149=$I57;
      var $shr110=$149 >>> 1;
      var $add111=((($shr110)+(8))|0);
      var $sub112=((($add111)-(2))|0);
      var $sub113=(((31)-($sub112))|0);
      var $cond115 = $sub113;label = 33; break;
    case 33: 
      var $cond115;
      var $shl116=$147 << $cond115;
      $K105=$shl116;
      label = 34; break;
    case 34: 
      var $150=$T;
      var $head118=(($150+4)|0);
      var $151=HEAP32[(($head118)>>2)];
      var $and119=$151 & -8;
      var $152=$psize;
      var $cmp120=(($and119)|0)!=(($152)|0);
      if ($cmp120) { label = 35; break; } else { label = 41; break; }
    case 35: 
      var $153=$K105;
      var $shr123=$153 >>> 31;
      var $and124=$shr123 & 1;
      var $154=$T;
      var $child125=(($154+16)|0);
      var $arrayidx126=(($child125+($and124<<2))|0);
      $C=$arrayidx126;
      var $155=$K105;
      var $shl127=$155 << 1;
      $K105=$shl127;
      var $156=$C;
      var $157=HEAP32[(($156)>>2)];
      var $cmp128=(($157)|0)!=0;
      if ($cmp128) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $158=$C;
      var $159=HEAP32[(($158)>>2)];
      $T=$159;
      label = 40; break;
    case 37: 
      var $160=$C;
      var $161=$160;
      var $162=$m_addr;
      var $least_addr132=(($162+16)|0);
      var $163=HEAP32[(($least_addr132)>>2)];
      var $cmp133=(($161)>>>0) >= (($163)>>>0);
      var $conv134=(($cmp133)&1);
      var $expval135=($conv134);
      var $tobool136=(($expval135)|0)!=0;
      if ($tobool136) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $164=$TP;
      var $165=$C;
      HEAP32[(($165)>>2)]=$164;
      var $166=$T;
      var $167=$TP;
      var $parent138=(($167+24)|0);
      HEAP32[(($parent138)>>2)]=$166;
      var $168=$TP;
      var $169=$TP;
      var $bk139=(($169+12)|0);
      HEAP32[(($bk139)>>2)]=$168;
      var $170=$TP;
      var $fd140=(($170+8)|0);
      HEAP32[(($fd140)>>2)]=$168;
      label = 47; break;
    case 39: 
      _abort();

    case 40: 
      label = 46; break;
    case 41: 
      var $171=$T;
      var $fd145=(($171+8)|0);
      var $172=HEAP32[(($fd145)>>2)];
      $F144=$172;
      var $173=$T;
      var $174=$173;
      var $175=$m_addr;
      var $least_addr146=(($175+16)|0);
      var $176=HEAP32[(($least_addr146)>>2)];
      var $cmp147=(($174)>>>0) >= (($176)>>>0);
      if ($cmp147) { label = 42; break; } else { var $181 = 0;label = 43; break; }
    case 42: 
      var $177=$F144;
      var $178=$177;
      var $179=$m_addr;
      var $least_addr149=(($179+16)|0);
      var $180=HEAP32[(($least_addr149)>>2)];
      var $cmp150=(($178)>>>0) >= (($180)>>>0);
      var $181 = $cmp150;label = 43; break;
    case 43: 
      var $181;
      var $land_ext=(($181)&1);
      var $expval152=($land_ext);
      var $tobool153=(($expval152)|0)!=0;
      if ($tobool153) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $182=$TP;
      var $183=$F144;
      var $bk155=(($183+12)|0);
      HEAP32[(($bk155)>>2)]=$182;
      var $184=$T;
      var $fd156=(($184+8)|0);
      HEAP32[(($fd156)>>2)]=$182;
      var $185=$F144;
      var $186=$TP;
      var $fd157=(($186+8)|0);
      HEAP32[(($fd157)>>2)]=$185;
      var $187=$T;
      var $188=$TP;
      var $bk158=(($188+12)|0);
      HEAP32[(($bk158)>>2)]=$187;
      var $189=$TP;
      var $parent159=(($189+24)|0);
      HEAP32[(($parent159)>>2)]=0;
      label = 47; break;
    case 45: 
      _abort();

    case 46: 
      label = 34; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 

      return;
  }

}
_add_segment["X"]=1;

// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;

// === Auto-generated postamble setup entry stuff ===

Module.callMain = function callMain(args) {
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_STATIC);


  var ret;

  ret = Module['_main'](argc, argv, 0);


  return ret;
}




function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return 0;
  }

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    var toRun = Module['preRun'];
    Module['preRun'] = [];
    for (var i = toRun.length-1; i >= 0; i--) {
      toRun[i]();
    }
    if (runDependencies > 0) {
      // a preRun added a dependency, run will be called later
      return 0;
    }
  }

  function doRun() {
    var ret = 0;
    calledRun = true;
    if (Module['_main']) {
      preMain();
      ret = Module.callMain(args);
      if (!Module['noExitRuntime']) {
        exitRuntime();
      }
    }
    if (Module['postRun']) {
      if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
      while (Module['postRun'].length > 0) {
        Module['postRun'].pop()();
      }
    }
    return ret;
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
    return 0;
  } else {
    return doRun();
  }
}
Module['run'] = Module.run = run;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

initRuntime();

var shouldRunNow = false;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

if (shouldRunNow) {
  var ret = run();
}

// {{POST_RUN_ADDITIONS}}






  // {{MODULE_ADDITIONS}}


// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_luaL_checkstack","_computesizes","_pushnexttemplate","_b_replace","_txtToken","_dothecall","_luaV_settable","_singlematch","_assignment","_str_dump","_lua_pushlightuserdata","_luaB_next","_searcher_Lua","_tmalloc_large","_read_number","_luaB_pcall","_luaK_jump","_luaK_storevar","_lua_setmetatable","_match_class","_freeobj","_luaopen_io","_str_checkname","_luaX_lookahead","_internshrstr","_luaC_barrierback_","_test_then_block","_moveto","_luaopen_math","_getfield","_lua_setupvalue","_findvararg","_read_numeral","_new_localvar","_db_setupvalue","_countlevels","_freestack","_lua_xmove","_luaC_fullgc","_luaH_new","_luaB_auxwrap","_aux_upvalue","_lua_touserdata","_math_atan","_read_chars","_luaX_syntaxerror","_posrelat","_findindex","_retstat","_ifstat","_markupval","_loadfunc","_pushfuncname","_b_and","_codestring","_error_expected","_luaO_arith","_DumpChar","_lua_remove","_luaL_loadfilex","_closelistfield","_luaZ_openspace","_str_upper","_lua_len","_os_tmpname","_luaK_self","_field","_lua_pushvfstring","_lua_rawequal","_traceexec","_luaZ_fill","_str_rep","_checkmode","_llex","_f_parser","_luaS_new","_luaH_get","_gmatch","_luaD_throw","_luaV_tonumber","_str_find","_check_next","_resume","_luaL_optinteger","_luaC_newobj","_init_registry","_luaL_addstring","_lua_pushfstring","_findgotos","_sweeptolive","_db_upvaluejoin","_lua_tolstring","_lua_rawset","_LoadString","_propagateall","_io_readline","_subexpr","_sys_trim","_g_iofile","_gmatch_aux","_l_alloc","_load_aux","_luaK_codeABC","_luaV_arith","_luaL_checkinteger","_math_frexp","_codenot","_add_value","_separatetobefnz","_db_sethook","_searcher_preload","_mainfunc","_str_char","_patchtestreg","_setfield","_lua_gethook","_lua_gethookcount","_luaK_codeABx","_luaB_rawlen","_luaB_yield","_primaryexp","_lua_tounsignedx","_luaK_infix","_matchbalance","_atomic","_typeerror","_luaH_free","_save","_freeexp","_luaV_equalobj_","_str_len","_str_byte","_luaD_shrinkstack","_luaX_init","_cond","_db_traceback","_io_type","_addinfo","_os_rename","_luaK_posfix","_resume_error","_lua_sethook","_forbody","_luaS_newlstr","_math_ldexp","_luaB_setmetatable","_pushstr","_luaL_callmeta","_luaF_newproto","_luaG_aritherror","_db_getlocal","_malloc","_generationalcollection","_luaV_finishOp","_io_open","_math_log","_luaB_costatus","_luaV_lessthan","_DumpDebug","_lua_close","_LoadUpvalues","_statlist","_discharge2anyreg","_traversestack","_luaB_coresume","_adjust_assign","_tconcat","_luaV_execute","_luaL_addvalue","_math_sin","_recfield","_str_format","_luaL_getmetafield","_luaT_gettmbyobj","_unlinkupval","_getboolfield","_callallpendingfinalizers","_read_all","_getcached","_read_string","_luaG_typeerror","_ipairsaux","_luaL_checkudata","_math_atan2","_localstat","_ll_searchpath","_luaZ_init","_luaL_getsubtable","_math_sqrt","_math_ceil","_luaF_newCclosure","_luaX_setinput","_luaO_pushfstring","_breaklabel","_luaL_optnumber","_getupvalref","_lua_gethookmask","_scanformat","_ll_sym","_traverseproto","_whilestat","_skipcomment","_luaB_pairs","_createmetatable","_b_rshift","_buffreplace","_check_conflict","_luaK_getlabel","_luaF_getlocalname","_luaB_tonumber","_luaH_newkey","_b_shift","_isnumeral","_math_abs","_luaG_ordererror","_db_upvalueid","_traverseweakvalue","_newprefile","_math_tan","_f_lines","_finishpcall","_os_clock","_f_write","_luaF_freeproto","_str_reverse","_luaB_load","_sys_alloc","_singlevar","_check_capture","_codeextraarg","_undefgoto","_lua_load","_luaO_pushvfstring","_skipnoopstat","_lua_pcallk","_math_deg","_traverseLclosure","_parlist","_free","_findlocal","_getupvalname","_funcname","_luaC_step","_read_line","_traversetable","_luaL_loadbufferx","_luaU_undump","_luaB_assert","_lua_resume","_lua_iscfunction","_math_floor","_makemask","_luaC_checkfinalizer","_DumpBlock","_opencheck","_forlist","_luaT_init","_tmalloc_small","_lua_rawlen","_match_capture","_luaK_checkstack","_need_value","_lua_isnumber","_enterblock","_luaM_toobig","_lexerror","_createsearcherstable","_removevalues","_luaO_chunkid","_getiofile","_luaopen_os","_luaopen_coroutine","_luaU_header","_math_cos","_luaF_findupval","_luaX_newstring","_prepend_alloc","_luaH_setint","_luaK_goiftrue","_luaF_close","_luaK_setreturns","_singlestep","_luaB_cocreate","_lua_strx2number","_block_follow","_classend","_checkupval","_settabss","_propagatelist","_luaL_traceback","_DumpUpvalues","_ll_checkclib","_settabsi","_luaB_corunning","_luaD_hook","_settabsb","_luaopen_package","_luaO_hexavalue","_read_long_string","_unbound_search","_b_extract","_block","_io_popen","_hashnum","_realloc","_lua_getstack","_lua_gettop","_lua_getlocal","_lua_setuservalue","_math_tanh","_getlocvar","_readdecesc","_luaG_errormsg","_lua_toboolean","_aux_close","_fieldargs","_tremove","_DumpHeader","_luaK_concat","_l_strcmp","_luaB_error","_lua_tothread","_str_lower","_isneg","_f_gc","_lua_getctx","_remarkupvals","_addfield","_luaC_freeallobjects","_iscleared","_luaK_indexed","_findfield","_closegoto","_LoadNumber","_currentline","_luaB_getmetatable","_luaK_goiffalse","_io_read","_luaV_concat","_makeseed","_codecomp","_LoadChar","_luaE_setdebt","_exprstat","_luaB_loadfile","_os_getenv","_os_difftime","_luaC_barrierproto_","_g_read","_skipBOM","_upvalname","_luaL_checkversion_","_math_max","_growstack","_luaL_buffinitsize","_luaT_gettm","_unmakemask","_luaopen_base","_luaH_set","_countint","_callTM","_lua_atpanic","_getbinopr","_db_setuservalue","_luaE_freethread","_lua_getinfo","_luaK_patchclose","_set2","_luaB_select","_luaB_dofile","_init_top","_b_test","_lua_setfield","_statement","_max_expand","_internal_realloc","_io_tmpfile","_str_match","_sweeplist","_lua_next","_lua_concat","_sort_comp","_luaL_testudata","_luaD_reallocstack","_luaopen_table","_funcargs","_luaF_newupval","_recover","_seterrorobj","_lua_rawseti","_collectvalidlines","_getF","_g_write","_db_getinfo","_getobjname","_luaM_realloc_","_lua_absindex","_stackinuse","_db_setmetatable","_boolK","_luaL_error","_LoadFunction","_luaK_dischargevars","_luaU_dump","_luaB_type","_f_seek","_gctm","_f_call","_fornum","_code_label","_findloader","_checklimit","_traverseCclosure","_end_capture","_entersweep","_new_localvarliteral_","_lua_copy","_db_getregistry","_luaL_argerror","_math_modf","_constfolding","_errorlimit","_luaH_next","_lua_pushnil","_f_flush","_removeentry","_LoadInt","_luaL_pushresultsize","_DumpInt","_findfile","_luaO_int2fb","_callhook","_newupvalue","_ll_unloadlib","_addk","_release_unused_segments","_luaL_prepbuffsize","_explist","_searchupvalue","_createstdfile","_lua_rawget","_get_equalTM","_io_lines","_constructor","_condjump","_ll_addtoclib","_luaopen_string","_b_or","_f_luaopen","_luaL_buffinit","_b_arshift","_luaL_execresult","_init_bins","_newlabelentry","_checkoption","_index2addr","_luaG_concaterror","_luaS_eqstr","_readhexaesc","_mmap_alloc","_LoadDebug","_currentpc","_getjump","_tag_error","_patchlistaux","_incstep","_matchbracketclass","_luaK_prefix","_listfield","_freereg","_init_exp","_lua_pushlstring","_findsetreg","_lastlistfield","_noenv","_findlabel","_luaL_len","_setnodevector","_generic_reader","_reallymarkobject","_checkname","_sweepthread","_luaK_patchlist","_close_func","_convergeephemerons","_luaD_poscall","_db_getupvalue","_lua_insert","_io_close","_enterlevel","_finishCcall","_treatstackoption","_math_random","_luaK_ret","_luaB_xpcall","_lua_getupvalue","_push_captures","_fieldsel","_LoadBlock","_lua_checkstack","_luaL_pushresult","_movegotosout","_lua_error","_andaux","_match","_luaL_setfuncs","_lua_upvalueid","_luaL_optlstring","_clearvalues","_luaL_checkunsigned","_checknext","_luaK_exp2RK","_luaL_checklstring","_getfuncname","_pcallcont","_checkrepeated","_yindex","_codearith","_b_lrot","_luaH_resizearray","_db_setlocal","_lua_setlocal","_lua_yieldk","_ll_require","_math_min","_lua_newstate","_db_getmetatable","_markbeingfnz","_setarrayvector","_luaV_gettable","_hookf","_luaK_exp2anyreg","_luaE_freeCI","_gotostat","_math_randomseed","_unroll","_luaB_rawequal","_luaO_str2d","_math_acos","_checkSizes","_auxsort","_add_segment","_addprototype","_ll_loadfunc","_pushclosure","_inclinenumber","_luaD_precall","_str_sub","_searcher_Croot","_lua_getfield","_createstrobj","_tryfuncTM","_luaK_numberK","_luaD_protectedparser","_math_fmod","_DumpNumber","_traverseephemeron","_luaL_newmetatable","_luaB_ipairs","_luaL_requiref","_getthread","_luaopen_bit32","_setboolfield","_DumpFunction","_add_s","_lua_settop","_lua_pushboolean","_addlenmod","_capture_to_close","_lua_replace","_luaB_rawset","_ll_loadlib","_b_rrot","_retraversegrays","_adjust_varargs","_luaB_collectgarbage","_luaK_codek","_os_time","_searcher_C","_luaO_fb2int","_luaV_objlen","_io_pclose","_numusehash","_luaD_call","_test_eof","_discharge2reg","_localfunc","_os_date","_readhexa","_lua_getuservalue","_pushglobalfuncname","_addquoted","_labelstat","_getS","_luaY_parser","_luaL_setmetatable","_lua_status","_lua_tonumberx","_luaZ_read","_io_flush","_suffixedexp","_jumponcond","_getfreepos","_lmemfind","_lua_setglobal","_io_input","_f_tostring","_io_write","_getjumpcontrol","_luaK_reserveregs","_leaveblock","_clearkeys","_call_binTM","_pack","_lua_createtable","_kname","_math_sinh","_funcinfo","_db_gethook","_luaF_freeupval","_luaC_forcestep","_lua_pushthread","_call_orderTM","_exp1","_luaK_stringK","_singlevaraux","_correctstack","_luaK_exp2anyregup","_codeclosure","_writer","_luaF_newLclosure","_udata2finalize","_math_asin","_luaopen_debug","_os_remove","_traversestrongtable","_luaS_resize","_luaM_growaux_","_getunopr","_lua_getglobal","_error","_nospecials","_lua_pushcclosure","_lua_pushstring","_luaH_getstr","_lua_upvaluejoin","_math_rad","_exp2reg","_init_mparams","_expr","_luaK_exp2val","_luaK_setlist","_mainposition","_math_cosh","_searchpath","_preinit_state","_testnext","_body","_trydecpoint","_DumpVector","_GCTM","_panic","_tinsert","_luaD_growstack","_escerror","_io_fclose","_luaX_token2str","_isinstack","_tofile","_b_xor","_newfile","_lua_isstring","_luaD_pcall","_searchvar","_luaH_getn","_nilK","_luaS_hash","_luaK_code","_unpack","_simpleexp","_lua_callk","_luaL_checkany","_luaK_setoneret","_setpath","_luaC_checkupvalcolor","_invertjump","_luaV_lessequal","_check","_auxupvalue","_removevars","_luaO_ceillog2","_skip_sep","_newshrstr","_lua_newthread","_min_expand","_str_gsub","_DumpConstants","_markroot","_markmt","_luaE_extendCI","_f_read","_luaB_cowrap","_luaH_getint","_lua_pushnumber","_math_pow","_io_noclose","_luaB_tostring","_lua_topointer","_luaC_barrier_","_luaV_tostring","_luaK_patchtohere","_str_find_aux","_lua_gettable","_fixjump","_mmap_resize","_lua_compare","_luaX_next","_close_state","_dofilecont","_lua_gc","_lua_newuserdata","_luaL_addlstring","_start_capture","_pairsmeta","_luaL_fileresult","_lua_tointegerx","_lua_version","_registerlocalvar","_auxresume","_luaG_runerror","_luaL_openlibs","_luaL_checkoption","_DumpString","_lua_pushvalue","_luaH_resize","_checkload","_b_rot","_lua_typename","_luaC_changemode","_luaS_newudata","_os_setlocale","_sort","_lua_rawgeti","_propagatemark","_auxgetinfo","_luaD_rawrunprotected","_luaS_eqlngstr","_push_onecapture","_luaK_exp2nextreg","_math_exp","_lua_type","_lua_dump","_LoadConstants","_stack_init","_luaK_nil","_luaK_fixline","_db_debug","_luaL_checknumber","_createmeta","_lua_getmetatable","_lua_pushunsigned","_luaL_gsub","_luaL_tolstring","_b_lshift","_findpcall","_forstat","_anchor_token","_os_exit","_rehash","_luaL_checktype","_dischargejpc","_funcstat","_readable","_io_output","_ll_load","_errfile","_LoadCode","_LoadHeader","_segment_holding","_b_not","_semerror","_luaB_rawget","_os_execute","_repeatstat","_lua_pushinteger","_adjustlocalvars","_check_match","_open_func","_luaL_newstate","_aux_lines","_luaL_where","_luaC_runtilstate","_luaB_print","_db_getuservalue","_f_setvbuf","_arrayindex","_numusearray"]


// This file is appended to the end of build/liblua.js

// WEBLUA API =================================================================
// 
// Written by Philip Horger
// Based on https://github.com/replit/jsrepl/blob/master/extern/lua/entry_point.js
// 
// ============================================================================

this['Lua'] = {
    isInitialized: false,
    state: null,
    tmp_id: 0,
    default_source_name: 'stdin',
    preallocated_strings: {
        '__handle': null,
        '__index': null,
    },
    initialize: function (source_name, stdout, stderr) {
        if (this.isInitialized) throw new Error('Lua already initialized');
        this.default_source_name = source_name || this.default_source_name;
        this.stdout = stdout || this.stdout;
        this.stderr = stderr || this.stderr;
        run();
        this.state = _luaL_newstate();
        _luaL_openlibs(this.state);
        for (var key in this.preallocated_strings) {
            this.preallocated_strings[key] = this.allocate_string(key);
        }
        this.isInitialized = true;
    },
    require_initialization: function(){
        if (!this.isInitialized) throw new Error('Lua not yet initialized');
    },
    parse: function (command, source_name) {
        // Put new function, from buffer, at the top of the stack
        this.require_initialization();
        var commandPtr = this.allocate_string(command);
        var namePtr    = this.allocate_string(source_name);
        var parseFailed = _luaL_loadbufferx(
            this.state, commandPtr, command.length, namePtr
        );
        if (parseFailed) {
            this.report_error("Parsing failure");
        }
        _free(commandPtr);
        _free(namePtr);
        return !parseFailed;
    },
    eval: function (command, source_name, source) {
        source_name = source_name || this.default_source_name;
        source      = source      || command;
        return this.exec("return "+command, source_name, source);
    },
    exec: function (command, source_name, source) {
        this.require_initialization();
        source_name = source_name || this.default_source_name;
        source      = source      || command;

        if (this.parse(command, source_name)) {
            // Parse success, now try calling func at top of stack
            var callFailed = _lua_pcallk(this.state, 0, -1, 0);
            if (callFailed) {
                this.report_error("Evaluation failure");
            } else {
                return this.get_stack_args();
            }
        } else {
            this.report_error("Parsing failure");
        }
    },
    inject: function (object, name, final_location, metatable) {
        name = name || this.get_tmp_name();
        this.pushStack(object);
        if (metatable) {
            this.pushStack(metatable);
            _lua_setmetatable(this.state, -2);
        }
        var strptr = this.allocate_string(name);
        _lua_setglobal(this.state, strptr);
        _free(strptr);
        if (final_location) {
            this.exec(final_location + " = " + name + "\n" + name + " = nil");
        }
        return (final_location || name);
    },
    cache: function (evalstring) {
        if (!(evalstring in this.cache['items'])) {
            this.cache['items'][evalstring] = this.eval(evalstring)
        }
        return this.cache['items'][evalstring];
    },
    call: function (evalstring, args) {
        var func = this.cache(evalstring)[0];
        return func.apply(null, args);
    },
    allocate_string: function(str) {
        var arr = intArrayFromString(str);
        return allocate(arr, 'i8', 0);  // ALLOC_NORMAL
    },
    inspect: function(index) {
        var type = _lua_type(this.state, index);
        var ptr = _lua_typename(this.state, type);
        var typename = Pointer_stringify(ptr)
        var address = _lua_topointer(this.state, index);
        return {
            'type': type,
            'typename': typename,
            'address': address,
            'addrstr': address.toString(16),
        }
    },
    peekStack: function(index, source) {
        this.require_initialization();
        var ret;
        var type = _lua_type(this.state, index);
        switch (type) {
            case -1: // LUA_TNONE
            case 0:  // LUA_TNIL
                ret = null;
                break;
            case 1:  // LUA_TBOOLEAN
                var result = _lua_toboolean(this.state, index);
                ret = result ? true : false;
                break;
            case 3:  // LUA_TNUMBER
                ret = _lua_tonumberx(this.state, index);
                break;
            case 4:  // LUA_TSTRING
                var ptr = _lua_tolstring(this.state, index, 0);
                var len = _lua_rawlen(this.state, index);
                var buffer = [];
                for (var i = 0; i < len; i++)
                    buffer.push(String.fromCharCode(HEAP8[ptr+i]));
                ret = buffer.join('');
                break;
            case 5:  // LUA_TTABLE
                var is_array = true;
                var max_key = 0;

                // Check for handle
                _lua_pushstring(this.state, this.preallocated_strings['__handle']);
                _lua_rawget(this.state, index-1);
                var handle = this.popStack();
                if (handle) {
                    // Return original value
                    var ptr = this.preallocated_strings["__index"];
                    var success = _luaL_getmetafield(
                        this.state,
                        index,
                        ptr
                    );
                    var __indexfunc = this.popStack();
                    var source = __indexfunc.source;
                    return source;
                }

                ret = {};
                // Populate with values
                _lua_pushnil(this.state);
                _lua_pushnil(this.state);
                while (_lua_next(this.state, index-2)) {
                    var value = this.popStack();
                    var key = this.peekStack(-1);
                    ret[key] = value;

                    if (is_array && typeof key === "number") {
                        if (key > max_key)
                            max_key = key;
                    } else {
                        is_array = false;
                    }
                }
                this.popStack(); // Clear out leftover key
                if (is_array) {
                    newret = [];
                    for (var i = 1; i <= max_key; i++) {
                        if (ret[i] === undefined) {
                            // Abort
                            is_array = false;
                            break;
                        }
                        newret.push(ret[i]);
                    }
                    if (is_array) // not aborted
                        ret = newret;
                }
                break;
            case 6:  // LUA_TFUNCTION
                var self = this;
                var address = _lua_topointer(this.state, index);

                if (_lua_iscfunction(this.state, index)) {
                    var func = FUNCTION_TABLE[address];
                    if (func.unwrapped) {
                        return func.unwrapped;
                    }
                }

                // Don't allocate this stuff for wrapped funcs
                var name = this.get_tmp_name();
                var aname = this.allocate_string(name);

                _lua_pushvalue(this.state, index); // For non-destructive pop
                _lua_setglobal(this.state, aname);
                _free(aname);
                ret = function () {
                    var orig_top = _lua_gettop(self.state);

                    // Push function to stack
                    var aname = self.allocate_string(name);
                    _lua_getglobal(self.state, aname);
                    _free(aname);

                    // Convert arguments to Lua
                    for (var i = 0; i < arguments.length; i++) {
                        self.pushStack(arguments[i])
                    }

                    // Call
                    var failure = _lua_pcallk(self.state, arguments.length, -1, 0) // LUA_MULTRET
                    if (failure) {
                        self.report_error("Failure calling Lua function");
                    }
                    var num_args = _lua_gettop(self.state) - orig_top ;
                    return self.get_stack_args(num_args);
                }
                source = source || "";
                ret.toString = function() { 
                    return "Lua function " + source + ": " + name + " at " + address;
                };
                ret.source = source;
                ret.name = name;
                ret.address = address;
                break;
            default: // Other Lua type
                var inspection = this.inspect(index);
                ret = inspection.typename + " (typecode "+type+"): 0x" + inspection.addrstr;
        }
        return ret;
    },
    popStack: function(source) {
        var ret = this.peekStack(-1, source);
        _lua_settop(this.state, -2);
        return ret;
    },
    pushStack: function(object) {
        if (object === null) {
            object = undefined;
        }
        switch(typeof object) {
            case "undefined" :
                _lua_pushnil(this.state);
                return 1;
            case "boolean" :
                _lua_pushboolean(this.state, object);
                return 1;
            case "number" :
                _lua_pushnumber(this.state, object);
                return 1;
            case "string" :
                var strptr = this.allocate_string(object);
                _lua_pushstring(this.state, strptr);
                _free(strptr);
                return 1;
            case "function" :
                var self = this;
                var wrapper = function (state) {
                    var result = object.apply(self, self.get_stack_args());
                    if (result == undefined || result == null) {
                        result = [];
                    }
                    if (!( typeof result == 'object' && typeof result.length == "number")) {
                        throw new Error("Expected array return type from JS function");
                    }
                    for (var i = 0; i < result.length; i++) {
                        self.pushStack(result[i]);
                    }
                    return result.length;
                }
                wrapper.unwrapped = object;
                var pointer = Runtime.addFunction(wrapper);
                _lua_pushcclosure(this.state, pointer, 0);
                return 1;
            case "object" :
                if (object.length === undefined) {
                    // Object
                    _lua_createtable(this.state, 0, 0);
                    if (object['__handle']) {
                        // Handled object
                        var source = object;
                        var metatable = {
                            '__index': function (table, key) {
                                return [source[key]];
                            },
                            '__newindex': function (table, key, value) {
                                source[key] = value;
                                return [];
                            },
                        }
                        metatable['__index'].source = source;

                        this.pushStack(metatable);
                        _lua_setmetatable(this.state, -2);

                        object = {'__handle': object.toString()};
                    }
                    for (var k in object) {
                        this.pushStack(k);
                        this.pushStack(object[k]);
                        _lua_rawset(this.state, -3);
                    }
                } else {
                    // Array
                    _lua_createtable(this.state, object.length, 0);
                    for (var k in object) {
                        k = 1*k;
                        this.pushStack(k+1)
                        this.pushStack(object[k]);
                        _lua_rawset(this.state, -3);
                    }
                }
                return 1;
            default:
                throw new Error("Cannot push object to stack: " + object);
        }
    },
    get_stack_args: function(num_args) {
        num_args = (num_args === undefined) ? _lua_gettop(this.state) : num_args;
        var args = [];
        for (var i = 0; i < num_args; i++) {
            args.push(this.popStack());
        }
        return args.reverse();
    },
    anon_lua_object: function (object) {
        // Create anonymous Lua object or literal from JS object
        if (object == undefined || object == null) {
            return "nil";
        }
        switch (typeof object) {
            case "string":
                return '"' + object.replace('"','\\"') + '"';
            case "function":
            case "object":
                return this.inject(object);
            default:
                return object.toString();
        }
    },
    get_tmp_name: function() {
        return "_weblua_tmp_" + this.tmp_id++;
    },
    cleanup_tmp: function(name) {
        if (name == "_weblua_tmp_" + (this.tmp_id-1)) {
            // Latest tmp_id, can safely decrement
            tmp_id--;
        }
        // Set global to nil
        _lua_pushnil(this.state);
        var strptr = this.allocate_string(name);
        _lua_setglobal(this.state, strptr);
        _free(strptr);
    },
    stdout: function (str) {console.log("stdout: " +str)},
    stderr: function (str) {console.log("stderr: " +str)},
    report_error: function(defaultMessage) {
        if (this.isInitialized) {
            var errorMessage = this.popStack();
            if (!(errorMessage && errorMessage.length)) errorMessage = defaultMessage;
            this.stderr(errorMessage);
        } else {
            this.stderr(defaultMessage);
        }
        _lua_settop(this.state, 0);
    }
}
// Public functions
this['Lua']['initialize'] = this['Lua'].initialize;
this['Lua']['stdout'] = this['Lua'].stdout;
this['Lua']['stderr'] = this['Lua'].stderr;
this['Lua']['eval'] = this['Lua'].eval;
this['Lua']['exec'] = this['Lua'].exec;
this['Lua']['anon_lua_object'] = this['Lua'].anon_lua_object;
this['Lua']['inject'] = this['Lua'].inject;
this['Lua']['cache'] = this['Lua'].cache;

Lua.cache['items'] = {};
Lua.cache['clear'] = function (evalstring) { delete Lua.cache['items'][evalstring] }
